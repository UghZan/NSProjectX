; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30146.0 

	TITLE	i:\vitalya\mine\nsprojectx\nspx_build\intermediate\release-win32\xrrender_r1\blender_vertex.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BE@GPGCGGPD@LEVEL?3?5diffuse?$CKbase@	; `string'
PUBLIC	??_C@_0L@MJIHPLPM@vert_point@			; `string'
PUBLIC	??_C@_09CHMJHECG@vert_spot@			; `string'
PUBLIC	??_C@_06HMPFJCDL@vert_l@			; `string'
PUBLIC	??_R2CBlender_Vertex@@8				; CBlender_Vertex::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CBlender_Vertex@@8		; CBlender_Vertex::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3CBlender_Vertex@@8				; CBlender_Vertex::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AVCBlender_Vertex@@@8			; CBlender_Vertex `RTTI Type Descriptor'
PUBLIC	??_R4CBlender_Vertex@@6B@			; CBlender_Vertex::`RTTI Complete Object Locator'
PUBLIC	??_7CBlender_Vertex@@6B@			; CBlender_Vertex::`vftable'
;	COMDAT ??_7CBlender_Vertex@@6B@
CONST	SEGMENT
??_7CBlender_Vertex@@6B@ DD FLAT:??_R4CBlender_Vertex@@6B@ ; CBlender_Vertex::`vftable'
	DD	FLAT:?getName@IBlender@@UAEPBDXZ
	DD	FLAT:?getComment@CBlender_Vertex@@UAEPBDXZ
	DD	FLAT:?Save@CBlender_Vertex@@UAEXAAVIWriter@@@Z
	DD	FLAT:?Load@CBlender_Vertex@@UAEXAAVIReader@@G@Z
	DD	FLAT:?canBeDetailed@CBlender_Vertex@@UAEHXZ
	DD	FLAT:?canBeLMAPped@CBlender_Vertex@@UAEHXZ
	DD	FLAT:?Compile@CBlender_Vertex@@UAEXAAVCBlender_Compile@@@Z
	DD	FLAT:??_ECBlender_Vertex@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R4CBlender_Vertex@@6B@
rdata$r	SEGMENT
??_R4CBlender_Vertex@@6B@ DD 00H			; CBlender_Vertex::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCBlender_Vertex@@@8
	DD	FLAT:??_R3CBlender_Vertex@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCBlender_Vertex@@@8
data$rs	SEGMENT
??_R0?AVCBlender_Vertex@@@8 DD FLAT:??_7type_info@@6B@	; CBlender_Vertex `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCBlender_Vertex@@', 00H
data$rs	ENDS
;	COMDAT ??_R3CBlender_Vertex@@8
rdata$r	SEGMENT
??_R3CBlender_Vertex@@8 DD 00H				; CBlender_Vertex::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CBlender_Vertex@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CBlender_Vertex@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CBlender_Vertex@@8 DD FLAT:??_R0?AVCBlender_Vertex@@@8 ; CBlender_Vertex::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CBlender_Vertex@@8
rdata$r	ENDS
;	COMDAT ??_R2CBlender_Vertex@@8
rdata$r	SEGMENT
??_R2CBlender_Vertex@@8 DD FLAT:??_R1A@?0A@EA@CBlender_Vertex@@8 ; CBlender_Vertex::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IBlender@@8
	DD	FLAT:??_R1A@?0A@EA@CPropertyBase@@8
rdata$r	ENDS
;	COMDAT ??_C@_06HMPFJCDL@vert_l@
CONST	SEGMENT
??_C@_06HMPFJCDL@vert_l@ DB 'vert_l', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09CHMJHECG@vert_spot@
CONST	SEGMENT
??_C@_09CHMJHECG@vert_spot@ DB 'vert_spot', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MJIHPLPM@vert_point@
CONST	SEGMENT
??_C@_0L@MJIHPLPM@vert_point@ DB 'vert_point', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@GPGCGGPD@LEVEL?3?5diffuse?$CKbase@
CONST	SEGMENT
??_C@_0BE@GPGCGGPD@LEVEL?3?5diffuse?$CKbase@ DB 'LEVEL: diffuse*base', 00H ; `string'
PUBLIC	?Compile@CBlender_Vertex@@UAEXAAVCBlender_Compile@@@Z ; CBlender_Vertex::Compile
PUBLIC	?Load@CBlender_Vertex@@UAEXAAVIReader@@G@Z	; CBlender_Vertex::Load
PUBLIC	?Save@CBlender_Vertex@@UAEXAAVIWriter@@@Z	; CBlender_Vertex::Save
PUBLIC	??1CBlender_Vertex@@UAE@XZ			; CBlender_Vertex::~CBlender_Vertex
PUBLIC	??_GCBlender_Vertex@@UAEPAXI@Z			; CBlender_Vertex::`scalar deleting destructor'
PUBLIC	??0CBlender_Vertex@@QAE@XZ			; CBlender_Vertex::CBlender_Vertex
PUBLIC	?canBeLMAPped@CBlender_Vertex@@UAEHXZ		; CBlender_Vertex::canBeLMAPped
PUBLIC	?canBeDetailed@CBlender_Vertex@@UAEHXZ		; CBlender_Vertex::canBeDetailed
PUBLIC	?getComment@CBlender_Vertex@@UAEPBDXZ		; CBlender_Vertex::getComment
EXTRN	??_ECBlender_Vertex@@UAEPAXI@Z:PROC		; CBlender_Vertex::`vector deleting destructor'
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\Blender_Vertex.h
;	COMDAT ?getComment@CBlender_Vertex@@UAEPBDXZ
_TEXT	SEGMENT
?getComment@CBlender_Vertex@@UAEPBDXZ PROC		; CBlender_Vertex::getComment, COMDAT
; _this$ = ecx

; 12   : 	virtual		LPCSTR		getComment()	{ return "LEVEL: diffuse*base";	}

	mov	eax, OFFSET ??_C@_0BE@GPGCGGPD@LEVEL?3?5diffuse?$CKbase@
	ret	0
?getComment@CBlender_Vertex@@UAEPBDXZ ENDP		; CBlender_Vertex::getComment
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\Blender_Vertex.h
;	COMDAT ?canBeDetailed@CBlender_Vertex@@UAEHXZ
_TEXT	SEGMENT
?canBeDetailed@CBlender_Vertex@@UAEHXZ PROC		; CBlender_Vertex::canBeDetailed, COMDAT
; _this$ = ecx

; 13   : 	virtual		BOOL		canBeDetailed()	{ return TRUE;	}

	mov	eax, 1
	ret	0
?canBeDetailed@CBlender_Vertex@@UAEHXZ ENDP		; CBlender_Vertex::canBeDetailed
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\Blender_Vertex.h
;	COMDAT ?canBeLMAPped@CBlender_Vertex@@UAEHXZ
_TEXT	SEGMENT
?canBeLMAPped@CBlender_Vertex@@UAEHXZ PROC		; CBlender_Vertex::canBeLMAPped, COMDAT
; _this$ = ecx

; 14   : 	virtual		BOOL		canBeLMAPped()	{ return FALSE; }

	xor	eax, eax
	ret	0
?canBeLMAPped@CBlender_Vertex@@UAEHXZ ENDP		; CBlender_Vertex::canBeLMAPped
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\Blender_Vertex.cpp
_TEXT	SEGMENT
??0CBlender_Vertex@@QAE@XZ PROC				; CBlender_Vertex::CBlender_Vertex
; _this$ = ecx

; 15   : {

	push	esi
	mov	esi, ecx
	call	DWORD PTR __imp_??0IBlender@@QAE@XZ
	mov	DWORD PTR [esi], OFFSET ??_7CBlender_Vertex@@6B@

; 16   : 	description.CLS		= B_VERT;
; 17   : }

	mov	eax, esi
	mov	DWORD PTR [esi+4], 538976288		; 20202020H
	mov	DWORD PTR [esi+8], 1444945952		; 56202020H
	pop	esi
	ret	0
??0CBlender_Vertex@@QAE@XZ ENDP				; CBlender_Vertex::CBlender_Vertex
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\Blender_Vertex.cpp
;	COMDAT ??_GCBlender_Vertex@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCBlender_Vertex@@UAEPAXI@Z PROC			; CBlender_Vertex::`scalar deleting destructor', COMDAT
; _this$ = ecx

; 20   : {

	push	esi
	mov	esi, ecx
	mov	DWORD PTR [esi], OFFSET ??_7CBlender_Vertex@@6B@

; 21   : 	
; 22   : }

	call	DWORD PTR __imp_??1IBlender@@UAE@XZ
	test	BYTE PTR ___flags$[esp], 1
	je	SHORT $LN6@scalar
	push	324					; 00000144H
	push	esi
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN6@scalar:
	mov	eax, esi
	pop	esi
	ret	4
??_GCBlender_Vertex@@UAEPAXI@Z ENDP			; CBlender_Vertex::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\Blender_Vertex.cpp
_TEXT	SEGMENT
??1CBlender_Vertex@@UAE@XZ PROC				; CBlender_Vertex::~CBlender_Vertex
; _this$ = ecx

; 20   : {

	mov	DWORD PTR [ecx], OFFSET ??_7CBlender_Vertex@@6B@

; 21   : 	
; 22   : }

	jmp	DWORD PTR __imp_??1IBlender@@UAE@XZ
??1CBlender_Vertex@@UAE@XZ ENDP				; CBlender_Vertex::~CBlender_Vertex
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\Blender_Vertex.cpp
_TEXT	SEGMENT
_fs$ = 8						; size = 4
?Save@CBlender_Vertex@@UAEXAAVIWriter@@@Z PROC		; CBlender_Vertex::Save
; _this$ = ecx

; 26   : 	IBlender::Save	(fs);

	jmp	DWORD PTR __imp_?Save@IBlender@@UAEXAAVIWriter@@@Z
?Save@CBlender_Vertex@@UAEXAAVIWriter@@@Z ENDP		; CBlender_Vertex::Save
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\Blender_Vertex.cpp
_TEXT	SEGMENT
_fs$ = 8						; size = 4
_version$ = 12						; size = 2
?Load@CBlender_Vertex@@UAEXAAVIReader@@G@Z PROC		; CBlender_Vertex::Load
; _this$ = ecx

; 31   : 	IBlender::Load	(fs,version);

	jmp	DWORD PTR __imp_?Load@IBlender@@UAEXAAVIReader@@G@Z
?Load@CBlender_Vertex@@UAEXAAVIReader@@G@Z ENDP		; CBlender_Vertex::Load
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\Blender_Vertex.cpp
_TEXT	SEGMENT
_C$ = 8							; size = 4
?Compile@CBlender_Vertex@@UAEXAAVCBlender_Compile@@@Z PROC ; CBlender_Vertex::Compile
; _this$ = ecx

; 35   : {

	push	esi
	push	edi

; 36   : 	IBlender::Compile		(C);

	mov	edi, DWORD PTR _C$[esp+4]
	mov	esi, ecx
	push	edi
	call	DWORD PTR __imp_?Compile@IBlender@@UAEXAAVCBlender_Compile@@@Z

; 37   : 
; 38   : 	if (C.bEditor)

	cmp	DWORD PTR [edi+44], 0
	je	$LN4@Compile

; 39   : 	{
; 40   : 		// Editor shader
; 41   : 		C.PassBegin		();

	mov	ecx, edi
	call	DWORD PTR __imp_?PassBegin@CBlender_Compile@@QAEXXZ

; 42   : 		{
; 43   : 			C.PassSET_ZB			(TRUE,TRUE);

	push	0
	push	1
	push	1
	mov	ecx, edi
	call	DWORD PTR __imp_?PassSET_ZB@CBlender_Compile@@QAEXHHH@Z

; 44   : 			C.PassSET_Blend			(FALSE,D3DBLEND_ONE,D3DBLEND_ZERO,	FALSE,0);

	push	0
	push	0
	push	1
	push	2
	push	0
	mov	ecx, edi
	call	DWORD PTR __imp_?PassSET_Blend@CBlender_Compile@@QAEXHIIHI@Z

; 45   : 			C.PassSET_LightFog		(TRUE,TRUE);

	push	1
	push	1
	mov	ecx, edi
	call	DWORD PTR __imp_?PassSET_LightFog@CBlender_Compile@@QAEXHH@Z

; 46   : 			
; 47   : 			// Stage0 - Base texture
; 48   : 			C.StageBegin			();

	mov	ecx, edi
	call	DWORD PTR __imp_?StageBegin@CBlender_Compile@@QAEXXZ

; 49   : 			C.StageSET_Color		(D3DTA_TEXTURE,	  D3DTOP_MODULATE,	D3DTA_DIFFUSE);

	push	0
	push	4
	push	2
	mov	ecx, edi
	call	DWORD PTR __imp_?StageSET_Color@CBlender_Compile@@QAEXIII@Z

; 50   : 			C.StageSET_Alpha		(D3DTA_TEXTURE,	  D3DTOP_MODULATE,	D3DTA_DIFFUSE);

	push	0
	push	4
	push	2
	mov	ecx, edi
	call	DWORD PTR __imp_?StageSET_Alpha@CBlender_Compile@@QAEXIII@Z

; 51   : 			C.Stage_Texture			(oT_Name);

	push	2
	push	2
	push	2
	push	1
	lea	eax, DWORD PTR [esi+196]
	mov	ecx, edi
	push	eax
	call	DWORD PTR __imp_?Stage_Texture@CBlender_Compile@@QAEXPBDIIII@Z

; 52   : 			C.Stage_Matrix			(oT_xform,0);

	push	0
	lea	eax, DWORD PTR [esi+260]
	mov	ecx, edi
	push	eax
	call	DWORD PTR __imp_?Stage_Matrix@CBlender_Compile@@QAEXPBDH@Z

; 53   : 			C.Stage_Constant		("$null");

	push	OFFSET ??_C@_05CAGGJGBB@$null@
	mov	ecx, edi
	call	DWORD PTR __imp_?Stage_Constant@CBlender_Compile@@QAEXPBD@Z

; 54   : 			C.StageEnd				();

	mov	ecx, edi
	call	DWORD PTR __imp_?StageEnd@CBlender_Compile@@QAEXXZ

; 55   : 		}
; 56   : 		C.PassEnd			();

	mov	ecx, edi
	call	DWORD PTR __imp_?PassEnd@CBlender_Compile@@QAEXXZ

; 97   : 			C.r_Sampler		("s_base",C.L_textures[0]);
; 98   : 			C.r_End			();
; 99   : 			break;
; 100  : 		}
; 101  : 	}
; 102  : }

	pop	edi
	pop	esi
	ret	4
$LN4@Compile:

; 57   : 	} else {
; 58   : 		switch (C.iElement)

	mov	eax, DWORD PTR [edi+60]
	cmp	eax, 4
	ja	$LN2@Compile
	jmp	DWORD PTR $LN116@Compile[eax*4]
$LN6@Compile:

; 59   : 		{
; 60   : 		case SE_R1_NORMAL_HQ:
; 61   : 			// Level view
; 62   : 			if (C.bDetail_Diffuse)

	cmp	DWORD PTR [edi+52], 0
	mov	ecx, edi
	push	0
	push	0
	push	1
	push	2
	push	0
	push	1
	push	1
	push	1
	je	SHORT $LN7@Compile

; 63   : 			{
; 64   : 				C.r_Pass	("vert_dt","vert_dt",TRUE);

	push	OFFSET ??_C@_07PEDHPBPM@vert_dt@
	push	OFFSET ??_C@_07PEDHPBPM@vert_dt@
	call	DWORD PTR __imp_?r_Pass@CBlender_Compile@@QAEXPBD0_NHHHW4_D3DBLEND@@2HI@Z

; 65   : 				C.r_Sampler	("s_base",	C.L_textures[0]);

	push	2
	push	2
	push	2
	push	1
	push	0
	push	ecx
	mov	ecx, esp
	push	DWORD PTR [edi]
	call	??0shared_str@@QAE@ABV0@@Z		; shared_str::shared_str
	push	OFFSET ??_C@_06GMJOKNLF@s_base@
	mov	ecx, edi
	call	DWORD PTR __imp_?r_Sampler@CBlender_Compile@@QAEIPBDVshared_str@@_NIIII@Z

; 66   : 				C.r_Sampler	("s_detail",C.detail_texture);

	push	2
	push	2
	push	2
	push	1
	push	0
	push	DWORD PTR [edi+36]
	mov	ecx, edi
	push	OFFSET ??_C@_08HKJIABFJ@s_detail@
	call	DWORD PTR __imp_?r_Sampler@CBlender_Compile@@QAEIPBD0_NIIII@Z

; 97   : 			C.r_Sampler		("s_base",C.L_textures[0]);
; 98   : 			C.r_End			();
; 99   : 			break;
; 100  : 		}
; 101  : 	}
; 102  : }

	mov	ecx, edi
	call	DWORD PTR __imp_?r_End@CBlender_Compile@@QAEXXZ
	pop	edi
	pop	esi
	ret	4
$LN7@Compile:

; 67   : 				C.r_End		();
; 68   : 			} else	{
; 69   : 				C.r_Pass	("vert","vert",TRUE);

	push	OFFSET ??_C@_04FPJBBKHA@vert@
	push	OFFSET ??_C@_04FPJBBKHA@vert@

; 70   : 				C.r_Sampler	("s_base",C.L_textures[0]);
; 71   : 				C.r_End		();
; 72   : 			}
; 73   : 			break;

	jmp	$LN118@Compile
$LN9@Compile:

; 74   : 		case SE_R1_NORMAL_LQ:
; 75   : 			// Level view
; 76   : 			C.r_Pass	("vert","vert",TRUE);

	push	0
	push	0
	push	1
	push	2
	push	0
	push	1
	push	1
	push	1
	push	OFFSET ??_C@_04FPJBBKHA@vert@
	push	OFFSET ??_C@_04FPJBBKHA@vert@

; 77   : 			C.r_Sampler	("s_base",C.L_textures[0]);
; 78   : 			C.r_End		();
; 79   : 			break;

	jmp	$LN119@Compile
$LN10@Compile:

; 80   : 		case SE_R1_LPOINT:
; 81   : 			C.r_Pass		("vert_point","add_point",FALSE,TRUE,FALSE,TRUE,D3DBLEND_ONE,D3DBLEND_ONE,TRUE);

	push	0
	push	1
	push	2
	push	2
	push	1
	push	0
	push	1
	push	0
	push	OFFSET ??_C@_09PNJHBAHM@add_point@
	push	OFFSET ??_C@_0L@MJIHPLPM@vert_point@
	mov	ecx, edi
	call	DWORD PTR __imp_?r_Pass@CBlender_Compile@@QAEXPBD0_NHHHW4_D3DBLEND@@2HI@Z

; 82   : 			C.r_Sampler		("s_base",	C.L_textures[0]);

	push	2
	push	2
	push	2
	push	1
	push	0
	push	ecx
	mov	ecx, esp
	push	DWORD PTR [edi]
	call	??0shared_str@@QAE@ABV0@@Z		; shared_str::shared_str
	push	OFFSET ??_C@_06GMJOKNLF@s_base@
	mov	ecx, edi
	call	DWORD PTR __imp_?r_Sampler@CBlender_Compile@@QAEIPBDVshared_str@@_NIIII@Z

; 83   : 			C.r_Sampler_clf	("s_lmap",	TEX_POINT_ATT		);

	mov	esi, DWORD PTR __imp_?r_Sampler_clf@CBlender_Compile@@QAEXPBD0_N@Z
	mov	ecx, edi
	push	0
	push	OFFSET ??_C@_0CB@JJPBGPCM@internal?2internal_light_attpoin@
	push	OFFSET ??_C@_06LBGPDNGG@s_lmap@
	call	esi

; 84   : 			C.r_Sampler_clf	("s_att",	TEX_POINT_ATT		);

	push	0
	push	OFFSET ??_C@_0CB@JJPBGPCM@internal?2internal_light_attpoin@
	push	OFFSET ??_C@_05OCPJJFDB@s_att@
	mov	ecx, edi
	call	esi

; 97   : 			C.r_Sampler		("s_base",C.L_textures[0]);
; 98   : 			C.r_End			();
; 99   : 			break;
; 100  : 		}
; 101  : 	}
; 102  : }

	mov	ecx, edi
	call	DWORD PTR __imp_?r_End@CBlender_Compile@@QAEXXZ
	pop	edi
	pop	esi
	ret	4
$LN11@Compile:

; 85   : 			C.r_End			();
; 86   : 			break;
; 87   : 		case SE_R1_LSPOT:
; 88   : 			C.r_Pass		("vert_spot","add_spot",FALSE,TRUE,FALSE,TRUE,D3DBLEND_ONE,D3DBLEND_ONE,TRUE);

	push	0
	push	1
	push	2
	push	2
	push	1
	push	0
	push	1
	push	0
	push	OFFSET ??_C@_08FJPLAIEP@add_spot@
	push	OFFSET ??_C@_09CHMJHECG@vert_spot@
	mov	ecx, edi
	call	DWORD PTR __imp_?r_Pass@CBlender_Compile@@QAEXPBD0_NHHHW4_D3DBLEND@@2HI@Z

; 89   : 			C.r_Sampler		("s_base",	C.L_textures[0]);

	push	2
	push	2
	push	2
	push	1
	push	0
	push	ecx
	mov	ecx, esp
	push	DWORD PTR [edi]
	call	??0shared_str@@QAE@ABV0@@Z		; shared_str::shared_str
	push	OFFSET ??_C@_06GMJOKNLF@s_base@
	mov	ecx, edi
	call	DWORD PTR __imp_?r_Sampler@CBlender_Compile@@QAEIPBDVshared_str@@_NIIII@Z

; 90   : 			C.r_Sampler_clf	("s_lmap",	"internal\\internal_light_att",		true);

	mov	esi, DWORD PTR __imp_?r_Sampler_clf@CBlender_Compile@@QAEXPBD0_N@Z
	mov	ecx, edi
	push	1
	push	OFFSET ??_C@_0BM@EOCKFCCB@internal?2internal_light_att@
	push	OFFSET ??_C@_06LBGPDNGG@s_lmap@
	call	esi

; 91   : 			C.r_Sampler_clf	("s_att",	TEX_SPOT_ATT		);

	push	0
	push	OFFSET ??_C@_0CA@EOOCFOEF@internal?2internal_light_attclip@
	push	OFFSET ??_C@_05OCPJJFDB@s_att@
	mov	ecx, edi
	call	esi

; 97   : 			C.r_Sampler		("s_base",C.L_textures[0]);
; 98   : 			C.r_End			();
; 99   : 			break;
; 100  : 		}
; 101  : 	}
; 102  : }

	mov	ecx, edi
	call	DWORD PTR __imp_?r_End@CBlender_Compile@@QAEXXZ
	pop	edi
	pop	esi
	ret	4
$LN12@Compile:

; 92   : 			C.r_End			();
; 93   : 			break;
; 94   : 		case SE_R1_LMODELS:
; 95   : 			// Lighting only
; 96   : 			C.r_Pass		("vert_l","vert_l",FALSE);

	push	0
	push	0
	push	1
	push	2
	push	0
	push	1
	push	1
	push	0
	push	OFFSET ??_C@_06HMPFJCDL@vert_l@
	push	OFFSET ??_C@_06HMPFJCDL@vert_l@
$LN119@Compile:

; 97   : 			C.r_Sampler		("s_base",C.L_textures[0]);
; 98   : 			C.r_End			();
; 99   : 			break;
; 100  : 		}
; 101  : 	}
; 102  : }

	mov	ecx, edi
$LN118@Compile:
	call	DWORD PTR __imp_?r_Pass@CBlender_Compile@@QAEXPBD0_NHHHW4_D3DBLEND@@2HI@Z
	push	2
	push	2
	push	2
	push	1
	push	0
	push	ecx
	mov	ecx, esp
	push	DWORD PTR [edi]
	call	??0shared_str@@QAE@ABV0@@Z		; shared_str::shared_str
	push	OFFSET ??_C@_06GMJOKNLF@s_base@
	mov	ecx, edi
	call	DWORD PTR __imp_?r_Sampler@CBlender_Compile@@QAEIPBDVshared_str@@_NIIII@Z
	mov	ecx, edi
	call	DWORD PTR __imp_?r_End@CBlender_Compile@@QAEXXZ
$LN2@Compile:
	pop	edi
	pop	esi
	ret	4
$LN116@Compile:
	DD	$LN6@Compile
	DD	$LN9@Compile
	DD	$LN10@Compile
	DD	$LN11@Compile
	DD	$LN12@Compile
?Compile@CBlender_Vertex@@UAEXAAVCBlender_Compile@@@Z ENDP ; CBlender_Vertex::Compile
_TEXT	ENDS
END
