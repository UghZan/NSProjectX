; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30146.0 

	TITLE	i:\vitalya\mine\nsprojectx\nspx_build\intermediate\release-win32\xrrender_r1\tga.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BB@PHOEKMPG@TGAdesc?3?3maketga@		; `string'
PUBLIC	??_C@_0DD@MEJIILJD@I?3?2Vitalya?2mine?2NSProjectX?2laye@ ; `string'
PUBLIC	??_C@_04PJOLNDGD@data@				; `string'
PUBLIC	??_C@_05IGKADHGO@width@				; `string'
PUBLIC	??_C@_06LNLHEAAG@height@			; `string'
;	COMDAT ?ignore_always@?M@??maketga@TGAdesc@@QAEXAAVIWriter@@@Z@4_NA
_BSS	SEGMENT
?ignore_always@?M@??maketga@TGAdesc@@QAEXAAVIWriter@@@Z@4_NA DB 01H DUP (?) ; `TGAdesc::maketga'::`12'::ignore_always
_BSS	ENDS
;	COMDAT ?ignore_always@?7??maketga@TGAdesc@@QAEXAAVIWriter@@@Z@4_NA
_BSS	SEGMENT
?ignore_always@?7??maketga@TGAdesc@@QAEXAAVIWriter@@@Z@4_NA DB 01H DUP (?) ; `TGAdesc::maketga'::`8'::ignore_always
_BSS	ENDS
;	COMDAT ?ignore_always@?3??maketga@TGAdesc@@QAEXAAVIWriter@@@Z@4_NA
_BSS	SEGMENT
?ignore_always@?3??maketga@TGAdesc@@QAEXAAVIWriter@@@Z@4_NA DB 01H DUP (?) ; `TGAdesc::maketga'::`4'::ignore_always
_BSS	ENDS
_DATA	ENDS
;	COMDAT ??_C@_06LNLHEAAG@height@
CONST	SEGMENT
??_C@_06LNLHEAAG@height@ DB 'height', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05IGKADHGO@width@
CONST	SEGMENT
??_C@_05IGKADHGO@width@ DB 'width', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04PJOLNDGD@data@
CONST	SEGMENT
??_C@_04PJOLNDGD@data@ DB 'data', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@MEJIILJD@I?3?2Vitalya?2mine?2NSProjectX?2laye@
CONST	SEGMENT
??_C@_0DD@MEJIILJD@I?3?2Vitalya?2mine?2NSProjectX?2laye@ DB 'I:\Vitalya\m'
	DB	'ine\NSProjectX\layers\xrRender\tga.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@PHOEKMPG@TGAdesc?3?3maketga@
CONST	SEGMENT
??_C@_0BB@PHOEKMPG@TGAdesc?3?3maketga@ DB 'TGAdesc::maketga', 00H ; `string'
PUBLIC	?maketga@TGAdesc@@QAEXAAVIWriter@@@Z		; TGAdesc::maketga
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\tga.cpp
_TEXT	SEGMENT
_j$1$ = -36						; size = 4
_ab_buffer$1 = -36					; size = 4
_i$1$ = -32						; size = 4
_j$1$ = -32						; size = 4
_i$1$ = -28						; size = 4
tv546 = -24						; size = 4
_hdr$ = -20						; size = 18
_buffer$2 = 8						; size = 4
_buffer$3 = 8						; size = 3
_fs$ = 8						; size = 4
?maketga@TGAdesc@@QAEXAAVIWriter@@@Z PROC		; TGAdesc::maketga
; _this$ = ecx

; 23   : void TGAdesc::maketga( IWriter& fs ){

	sub	esp, 36					; 00000024H

; 24   : 	R_ASSERT(data);

	cmp	BYTE PTR ?ignore_always@?3??maketga@TGAdesc@@QAEXAAVIWriter@@@Z@4_NA, 0
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	edi, DWORD PTR __imp_?fail@xrDebug@@QAEXPBD0H0AA_N@Z
	mov	esi, ecx
	jne	SHORT $LN2@maketga
	cmp	DWORD PTR [esi+16], 0
	jne	SHORT $LN2@maketga
	mov	ecx, DWORD PTR __imp_?Debug@@3VxrDebug@@A
	push	OFFSET ?ignore_always@?3??maketga@TGAdesc@@QAEXAAVIWriter@@@Z@4_NA
	push	OFFSET ??_C@_0BB@PHOEKMPG@TGAdesc?3?3maketga@
	push	24					; 00000018H
	push	OFFSET ??_C@_0DD@MEJIILJD@I?3?2Vitalya?2mine?2NSProjectX?2laye@
	push	OFFSET ??_C@_04PJOLNDGD@data@
	call	edi
$LN2@maketga:

; 25   : 	R_ASSERT(width);

	cmp	BYTE PTR ?ignore_always@?7??maketga@TGAdesc@@QAEXAAVIWriter@@@Z@4_NA, 0
	jne	SHORT $LN5@maketga
	cmp	DWORD PTR [esi+8], 0
	jne	SHORT $LN5@maketga
	mov	ecx, DWORD PTR __imp_?Debug@@3VxrDebug@@A
	push	OFFSET ?ignore_always@?7??maketga@TGAdesc@@QAEXAAVIWriter@@@Z@4_NA
	push	OFFSET ??_C@_0BB@PHOEKMPG@TGAdesc?3?3maketga@
	push	25					; 00000019H
	push	OFFSET ??_C@_0DD@MEJIILJD@I?3?2Vitalya?2mine?2NSProjectX?2laye@
	push	OFFSET ??_C@_05IGKADHGO@width@
	call	edi
$LN5@maketga:

; 26   : 	R_ASSERT(height);

	cmp	BYTE PTR ?ignore_always@?M@??maketga@TGAdesc@@QAEXAAVIWriter@@@Z@4_NA, 0
	jne	SHORT $LN8@maketga
	cmp	DWORD PTR [esi+12], 0
	jne	SHORT $LN8@maketga
	mov	ecx, DWORD PTR __imp_?Debug@@3VxrDebug@@A
	push	OFFSET ?ignore_always@?M@??maketga@TGAdesc@@QAEXAAVIWriter@@@Z@4_NA
	push	OFFSET ??_C@_0BB@PHOEKMPG@TGAdesc?3?3maketga@
	push	26					; 0000001aH
	push	OFFSET ??_C@_0DD@MEJIILJD@I?3?2Vitalya?2mine?2NSProjectX?2laye@
	push	OFFSET ??_C@_06LNLHEAAG@height@
	call	edi
$LN8@maketga:

; 27   : 
; 28   : 	tgaHeader hdr;
; 29   : 	ZeroMemory( &hdr, sizeof(hdr) );

	push	18					; 00000012H
	push	0
	lea	eax, DWORD PTR _hdr$[esp+60]
	push	eax
	mov	eax, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	mov	eax, DWORD PTR [eax+12]
	call	eax

; 30   : 	hdr.tgaImgType			= 2;
; 31   : 	hdr.tgaImgSpec.tgaXSize = u16(width);
; 32   : 	hdr.tgaImgSpec.tgaYSize = u16(height);
; 33   : 
; 34   : 	if( format == IMG_24B ){

	cmp	DWORD PTR [esi], 0
	movzx	eax, WORD PTR [esi+8]
	mov	WORD PTR _hdr$[esp+64], ax
	movzx	eax, WORD PTR [esi+12]
	mov	BYTE PTR _hdr$[esp+54], 2
	mov	WORD PTR _hdr$[esp+66], ax

; 35   : 		hdr.tgaImgSpec.tgaDepth = 24;

	mov	WORD PTR _hdr$[esp+68], 8216		; 00002018H
	je	SHORT $LN27@maketga

; 36   : 		hdr.tgaImgSpec.tgaImgDesc = 32;			// flip
; 37   : 	}
; 38   : 	else{
; 39   : 		hdr.tgaImgSpec.tgaDepth = 32;

	mov	WORD PTR _hdr$[esp+68], 12064		; 00002f20H
$LN27@maketga:

; 40   : 		hdr.tgaImgSpec.tgaImgDesc = 0x0f | 32;	// flip
; 41   : 	}
; 42   : 
; 43   : 	fs.w(&hdr, sizeof(hdr) );

	mov	ebx, DWORD PTR _fs$[esp+48]
	lea	ecx, DWORD PTR _hdr$[esp+52]
	push	18					; 00000012H
	push	ecx
	mov	ecx, ebx
	mov	eax, DWORD PTR [ebx]
	call	DWORD PTR [eax+12]

; 44   : 
; 45   : 	if( format==IMG_24B ){

	cmp	DWORD PTR [esi], 0
	mov	ebp, DWORD PTR [esi+8]
	jne	$LN28@maketga

; 46   : 		BYTE ab_buffer[4]={0,0,0,0};
; 47   : 		int  real_sl = ((width*3)) & 3;

	neg	ebp
	mov	DWORD PTR _ab_buffer$1[esp+52], 0
	and	ebp, 3

; 48   : 		int  ab_size = real_sl ? 4-real_sl : 0 ;
; 49   : 		for( int j=0; j<height; j++){

	mov	eax, 4
	sub	eax, ebp
	neg	ebp
	sbb	ebp, ebp
	and	ebp, eax
	xor	eax, eax
	mov	DWORD PTR tv546[esp+52], ebp
	mov	DWORD PTR _j$1$[esp+52], eax
	cmp	DWORD PTR [esi+12], eax
	jle	$LN18@maketga
	npad	2
$LL13@maketga:

; 50   : 			BYTE *p = (LPBYTE)data + scanlenght*j;

	mov	edi, DWORD PTR [esi+4]
	imul	edi, eax

; 51   : 			for( int i=0; i<width; i++){

	mov	DWORD PTR _i$1$[esp+52], 0
	add	edi, DWORD PTR [esi+16]
	cmp	DWORD PTR [esi+8], 0
	jle	SHORT $LN54@maketga
	mov	ebp, DWORD PTR _i$1$[esp+52]
	npad	5
$LL16@maketga:

; 52   : 				BYTE buffer[3] = {p[0],p[1],p[2]};

	movzx	eax, BYTE PTR [edi]

; 53   : 				fs.w(buffer, 3 );

	lea	ecx, DWORD PTR _buffer$3[esp+48]
	mov	BYTE PTR _buffer$3[esp+48], al
	movzx	eax, BYTE PTR [edi+1]
	mov	BYTE PTR _buffer$3[esp+49], al
	movzx	eax, BYTE PTR [edi+2]
	mov	BYTE PTR _buffer$3[esp+50], al
	mov	eax, DWORD PTR [ebx]
	push	3
	push	ecx
	mov	ecx, ebx
	call	DWORD PTR [eax+12]
	inc	ebp

; 54   : 				p+=4;

	lea	edi, DWORD PTR [edi+4]
	cmp	ebp, DWORD PTR [esi+8]
	jl	SHORT $LL16@maketga
	mov	ebp, DWORD PTR tv546[esp+52]
	mov	eax, DWORD PTR _j$1$[esp+52]
$LN54@maketga:

; 55   : 			}
; 56   : 			if(ab_size)

	test	ebp, ebp
	je	SHORT $LN11@maketga

; 57   : 				fs.w(ab_buffer, ab_size );

	mov	eax, DWORD PTR [ebx]
	lea	ecx, DWORD PTR _ab_buffer$1[esp+52]
	push	ebp
	push	ecx
	mov	ecx, ebx
	call	DWORD PTR [eax+12]
	mov	eax, DWORD PTR _j$1$[esp+52]
$LN11@maketga:

; 48   : 		int  ab_size = real_sl ? 4-real_sl : 0 ;
; 49   : 		for( int j=0; j<height; j++){

	inc	eax
	mov	DWORD PTR _j$1$[esp+52], eax
	cmp	eax, DWORD PTR [esi+12]
	jl	SHORT $LL13@maketga

; 70   : 				}
; 71   : 			}
; 72   : 		}
; 73   : 	}
; 74   : }

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 36					; 00000024H
	ret	4
$LN28@maketga:

; 58   : 		}
; 59   : 	}
; 60   : 	else{
; 61   : 		if (width*4 == scanlenght)	fs.w	(data,width*height*4);

	lea	eax, DWORD PTR [ebp*4]
	cmp	eax, DWORD PTR [esi+4]
	jne	SHORT $LN31@maketga
	mov	eax, DWORD PTR [esi+12]
	mov	ecx, ebx
	mov	edx, DWORD PTR [ebx]
	imul	eax, ebp
	shl	eax, 2
	push	eax
	push	DWORD PTR [esi+16]
	call	DWORD PTR [edx+12]
	pop	edi

; 70   : 				}
; 71   : 			}
; 72   : 		}
; 73   : 	}
; 74   : }

	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 36					; 00000024H
	ret	4
$LN31@maketga:

; 62   : 		else {
; 63   : 			// bad pitch, it seems :(
; 64   : 			for( int j=0; j<height; j++){

	xor	eax, eax
	mov	DWORD PTR _j$1$[esp+52], eax
	cmp	DWORD PTR [esi+12], eax
	jle	SHORT $LN18@maketga
	npad	12
$LL19@maketga:

; 65   : 				BYTE *p = (LPBYTE)data + scanlenght*j;

	mov	edi, DWORD PTR [esi+4]
	imul	edi, eax

; 66   : 				for( int i=0; i<width; i++){

	mov	DWORD PTR _i$1$[esp+52], 0
	add	edi, DWORD PTR [esi+16]
	test	ebp, ebp
	jle	SHORT $LN17@maketga
$LL22@maketga:

; 67   : 					BYTE buffer[4] = {p[0],p[1],p[2],p[3]};

	movzx	eax, BYTE PTR [edi]

; 68   : 					fs.w(buffer, 4 );

	lea	ecx, DWORD PTR _buffer$2[esp+48]
	mov	BYTE PTR _buffer$2[esp+48], al
	movzx	eax, BYTE PTR [edi+1]
	mov	BYTE PTR _buffer$2[esp+49], al
	movzx	eax, BYTE PTR [edi+2]
	mov	BYTE PTR _buffer$2[esp+50], al
	movzx	eax, BYTE PTR [edi+3]
	mov	BYTE PTR _buffer$2[esp+51], al
	mov	eax, DWORD PTR [ebx]
	push	4
	push	ecx
	mov	ecx, ebx
	call	DWORD PTR [eax+12]
	mov	eax, DWORD PTR _i$1$[esp+52]

; 69   : 					p+=4;

	lea	edi, DWORD PTR [edi+4]
	mov	ebp, DWORD PTR [esi+8]
	inc	eax
	mov	DWORD PTR _i$1$[esp+52], eax
	cmp	eax, ebp
	jl	SHORT $LL22@maketga
	mov	eax, DWORD PTR _j$1$[esp+52]
$LN17@maketga:

; 62   : 		else {
; 63   : 			// bad pitch, it seems :(
; 64   : 			for( int j=0; j<height; j++){

	inc	eax
	mov	DWORD PTR _j$1$[esp+52], eax
	cmp	eax, DWORD PTR [esi+12]
	jl	SHORT $LL19@maketga
$LN18@maketga:
	pop	edi

; 70   : 				}
; 71   : 			}
; 72   : 		}
; 73   : 	}
; 74   : }

	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 36					; 00000024H
	ret	4
?maketga@TGAdesc@@QAEXAAVIWriter@@@Z ENDP		; TGAdesc::maketga
_TEXT	ENDS
END
