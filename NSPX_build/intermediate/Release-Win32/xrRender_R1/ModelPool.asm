; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30146.0 

	TITLE	i:\vitalya\mine\nsprojectx\nspx_build\intermediate\release-win32\xrrender_r1\modelpool.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BE@EBDNGAIE@Unknown?5visual?5type@	; `string'
PUBLIC	??_C@_0BM@ILNANEIH@CModelPool?3?3Instance_Create@ ; `string'
PUBLIC	??_C@_0DJ@HJNKECDB@I?3?2Vitalya?2mine?2NSProjectX?2laye@ ; `string'
PUBLIC	??_C@_01FCMHBHNC@V@				; `string'
PUBLIC	??_C@_0BP@KMCMNMJD@CModelPool?3?3Instance_Duplicate@ ; `string'
PUBLIC	??_C@_04FKFGGPFG@?4ogf@				; `string'
PUBLIC	??_C@_0O@CGKNLCGD@$game_meshes$@		; `string'
PUBLIC	??_C@_0BM@ENFCPNEL@Can?8t?5find?5model?5file?5?8?$CFs?8?4@ ; `string'
PUBLIC	??_C@_0BK@KFOEMNN@CModelPool?3?3Instance_Load@	; `string'
PUBLIC	??_C@_0BC@DJGLAOAH@prefetch_visuals_@		; `string'
PUBLIC	??_C@_0BK@JBHPMFMH@?9?9?9?5model?5pool?5?9?9?9?5begin?3@ ; `string'
PUBLIC	??_C@_0BI@BMBKIPKJ@?$CD?$CF3d?3?5?$FL?$CF3d?1?$CF5d?5Kb?$FN?5?9?5?$CFs@ ; `string'
PUBLIC	??_C@_0CC@JAFLBMEJ@?9?9?9?5models?3?5?$CFd?0?5mem?5usage?3?5?$CFd?5K@ ; `string'
PUBLIC	??_C@_04LIAPHEDB@free@				; `string'
PUBLIC	??_C@_04DOOIMPEH@used@				; `string'
PUBLIC	??_C@_0BJ@BHPDLEKJ@?$CD?$CF3d?3?5?$FL?$CFs?$FN?5?$FL?$CF5d?5Kb?$FN?5?9?5?$CFs@ ; `string'
PUBLIC	??_C@_0CO@FIEPEEB@?9?9?9?5instances?3?5?$CFd?0?5free?5?$CFd?0?5mem@ ; `string'
PUBLIC	??_C@_0BI@NKKAEFLK@?9?9?9?5model?5pool?5?9?9?9?5end?4@ ; `string'
PUBLIC	??_R2FLOD@@8					; FLOD::`RTTI Base Class Array'
PUBLIC	??_R2CSkeletonX_PM@@8				; CSkeletonX_PM::`RTTI Base Class Array'
PUBLIC	??_R2CSkeletonX_ST@@8				; CSkeletonX_ST::`RTTI Base Class Array'
PUBLIC	??_R2CSkeletonX_ext@@8				; CSkeletonX_ext::`RTTI Base Class Array'
PUBLIC	??_R2CSkeletonX@@8				; CSkeletonX::`RTTI Base Class Array'
PUBLIC	??_R2CModelPool@@8				; CModelPool::`RTTI Base Class Array'
PUBLIC	??_R2CKinematicsAnimated@@8			; CKinematicsAnimated::`RTTI Base Class Array'
PUBLIC	??_R2CKinematics@@8				; CKinematics::`RTTI Base Class Array'
PUBLIC	??_R2FHierrarhyVisual@@8			; FHierrarhyVisual::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@FLOD@@8				; FLOD::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1IM@?0A@EA@CSkeletonX@@8			; CSkeletonX::`RTTI Base Class Descriptor at (140,-1,0,64)'
PUBLIC	??_R1IM@?0A@EA@CSkeletonX_ext@@8		; CSkeletonX_ext::`RTTI Base Class Descriptor at (140,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CSkeletonX_PM@@8			; CSkeletonX_PM::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1GM@?0A@EA@CSkeletonX@@8			; CSkeletonX::`RTTI Base Class Descriptor at (108,-1,0,64)'
PUBLIC	??_R1GM@?0A@EA@CSkeletonX_ext@@8		; CSkeletonX_ext::`RTTI Base Class Descriptor at (108,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CSkeletonX_ST@@8			; CSkeletonX_ST::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CSkeletonX_ext@@8			; CSkeletonX_ext::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CSkeletonX@@8			; CSkeletonX::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CModelPool@@8			; CModelPool::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CKinematicsAnimated@@8		; CKinematicsAnimated::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CKinematics@@8			; CKinematics::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@FHierrarhyVisual@@8		; FHierrarhyVisual::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3FLOD@@8					; FLOD::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AVFLOD@@@8				; FLOD `RTTI Type Descriptor'
PUBLIC	??_R3CSkeletonX_PM@@8				; CSkeletonX_PM::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AVCSkeletonX_PM@@@8			; CSkeletonX_PM `RTTI Type Descriptor'
PUBLIC	??_R3CSkeletonX_ST@@8				; CSkeletonX_ST::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AVCSkeletonX_ST@@@8			; CSkeletonX_ST `RTTI Type Descriptor'
PUBLIC	??_R3CSkeletonX@@8				; CSkeletonX::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AVCSkeletonX@@@8				; CSkeletonX `RTTI Type Descriptor'
PUBLIC	??_R3CSkeletonX_ext@@8				; CSkeletonX_ext::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AVCSkeletonX_ext@@@8			; CSkeletonX_ext `RTTI Type Descriptor'
PUBLIC	??_R3CModelPool@@8				; CModelPool::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AVCModelPool@@@8				; CModelPool `RTTI Type Descriptor'
PUBLIC	??_R3CKinematicsAnimated@@8			; CKinematicsAnimated::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AVCKinematicsAnimated@@@8			; CKinematicsAnimated `RTTI Type Descriptor'
PUBLIC	??_R3FHierrarhyVisual@@8			; FHierrarhyVisual::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AVFHierrarhyVisual@@@8			; FHierrarhyVisual `RTTI Type Descriptor'
PUBLIC	??_R3CKinematics@@8				; CKinematics::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AVCKinematics@@@8				; CKinematics `RTTI Type Descriptor'
PUBLIC	??_R4FLOD@@6B@					; FLOD::`RTTI Complete Object Locator'
PUBLIC	??_R4CSkeletonX_PM@@6B@				; CSkeletonX_PM::`RTTI Complete Object Locator'
PUBLIC	??_R4CSkeletonX_PM@@6BIRender_Mesh@@@		; CSkeletonX_PM::`RTTI Complete Object Locator'
PUBLIC	??_R4CSkeletonX_PM@@6BIRender_Visual@@@		; CSkeletonX_PM::`RTTI Complete Object Locator'
PUBLIC	??_R4CSkeletonX_ST@@6B@				; CSkeletonX_ST::`RTTI Complete Object Locator'
PUBLIC	??_R4CSkeletonX_ST@@6BIRender_Mesh@@@		; CSkeletonX_ST::`RTTI Complete Object Locator'
PUBLIC	??_R4CSkeletonX_ST@@6BIRender_Visual@@@		; CSkeletonX_ST::`RTTI Complete Object Locator'
PUBLIC	??_R4CSkeletonX_ext@@6B@			; CSkeletonX_ext::`RTTI Complete Object Locator'
PUBLIC	??_R4FHierrarhyVisual@@6B@			; FHierrarhyVisual::`RTTI Complete Object Locator'
PUBLIC	??_R4CModelPool@@6B@				; CModelPool::`RTTI Complete Object Locator'
PUBLIC	??_R4CKinematicsAnimated@@6B@			; CKinematicsAnimated::`RTTI Complete Object Locator'
PUBLIC	??_R4CKinematics@@6B@				; CKinematics::`RTTI Complete Object Locator'
PUBLIC	??_C@_0BB@GCADKGJO@map?1set?5too?5long@		; `string'
PUBLIC	??_7FLOD@@6B@					; FLOD::`vftable'
PUBLIC	??_SCKinematics@@6B@				; CKinematics::`local vftable'
PUBLIC	??_SCKinematicsAnimated@@6B@			; CKinematicsAnimated::`local vftable'
PUBLIC	??_SFHierrarhyVisual@@6B@			; FHierrarhyVisual::`local vftable'
PUBLIC	??_7CModelPool@@6B@				; CModelPool::`vftable'
PUBLIC	??_7CSkeletonX_PM@@6B@				; CSkeletonX_PM::`vftable'
PUBLIC	??_7CSkeletonX_PM@@6BIRender_Mesh@@@		; CSkeletonX_PM::`vftable'
PUBLIC	??_7CSkeletonX_PM@@6BIRender_Visual@@@		; CSkeletonX_PM::`vftable'
PUBLIC	??_7CSkeletonX_ext@@6B@				; CSkeletonX_ext::`vftable'
PUBLIC	??_7CSkeletonX_ST@@6B@				; CSkeletonX_ST::`vftable'
PUBLIC	??_7CSkeletonX_ST@@6BIRender_Mesh@@@		; CSkeletonX_ST::`vftable'
PUBLIC	??_7CSkeletonX_ST@@6BIRender_Visual@@@		; CSkeletonX_ST::`vftable'
EXTRN	?OnCalculateBones@CKinematics@@UAEXXZ:PROC	; CKinematics::OnCalculateBones
EXTRN	__imp_?OnCalculateBones@CKinematics@@UAEXXZ:PROC
EXTRN	?CreateBoneData@CKinematics@@MAEPAVCBoneData@@G@Z:PROC ; CKinematics::CreateBoneData
EXTRN	__imp_?CreateBoneData@CKinematics@@MAEPAVCBoneData@@G@Z:PROC
EXTRN	?dcast_PKinematics@CKinematics@@UAEPAV1@XZ:PROC	; CKinematics::dcast_PKinematics
EXTRN	__imp_?dcast_PKinematics@CKinematics@@UAEPAV1@XZ:PROC
EXTRN	?mem_usage@CKinematics@@UAEI_N@Z:PROC		; CKinematics::mem_usage
EXTRN	__imp_?mem_usage@CKinematics@@UAEI_N@Z:PROC
EXTRN	?dcast_PKinematicsAnimated@CKinematicsAnimated@@UAEPAV1@XZ:PROC ; CKinematicsAnimated::dcast_PKinematicsAnimated
EXTRN	__imp_?dcast_PKinematicsAnimated@CKinematicsAnimated@@UAEPAV1@XZ:PROC
EXTRN	?mem_usage@CKinematicsAnimated@@UAEI_N@Z:PROC	; CKinematicsAnimated::mem_usage
EXTRN	__imp_?mem_usage@CKinematicsAnimated@@UAEI_N@Z:PROC
EXTRN	__imp_??0CSkeletonX@@QAE@XZ:PROC
EXTRN	?SetParent@CSkeletonX@@UAEXPAVCKinematics@@@Z:PROC ; CSkeletonX::SetParent
EXTRN	__imp_?SetParent@CSkeletonX@@UAEXPAVCKinematics@@@Z:PROC
EXTRN	__imp_??1CSkeletonX@@QAE@XZ:PROC
EXTRN	__imp_??0CKinematicsAnimated@@QAE@XZ:PROC
EXTRN	__imp___purecall:PROC
EXTRN	?Release@FHierrarhyVisual@@UAEXXZ:PROC		; FHierrarhyVisual::Release
EXTRN	__imp_?Release@FHierrarhyVisual@@UAEXXZ:PROC
EXTRN	?IBoneInstances_Destroy@CKinematicsAnimated@@MAEXXZ:PROC ; CKinematicsAnimated::IBoneInstances_Destroy
EXTRN	__imp_?IBoneInstances_Destroy@CKinematicsAnimated@@MAEXXZ:PROC
EXTRN	?IBoneInstances_Create@CKinematicsAnimated@@MAEXXZ:PROC ; CKinematicsAnimated::IBoneInstances_Create
EXTRN	__imp_?IBoneInstances_Create@CKinematicsAnimated@@MAEXXZ:PROC
EXTRN	?OnCalculateBones@CKinematicsAnimated@@UAEXXZ:PROC ; CKinematicsAnimated::OnCalculateBones
EXTRN	__imp_?OnCalculateBones@CKinematicsAnimated@@UAEXXZ:PROC
EXTRN	?Bone_Calculate@CKinematicsAnimated@@UAEXPAVCBoneData@@PAU?$_matrix@M@@@Z:PROC ; CKinematicsAnimated::Bone_Calculate
EXTRN	__imp_?Bone_Calculate@CKinematicsAnimated@@UAEXPAVCBoneData@@PAU?$_matrix@M@@@Z:PROC
EXTRN	?Spawn@CKinematicsAnimated@@UAEXXZ:PROC		; CKinematicsAnimated::Spawn
EXTRN	__imp_?Spawn@CKinematicsAnimated@@UAEXXZ:PROC
EXTRN	?Copy@CKinematicsAnimated@@UAEXPAVIRender_Visual@@@Z:PROC ; CKinematicsAnimated::Copy
EXTRN	__imp_?Copy@CKinematicsAnimated@@UAEXPAVIRender_Visual@@@Z:PROC
EXTRN	?Release@CKinematicsAnimated@@UAEXXZ:PROC	; CKinematicsAnimated::Release
EXTRN	__imp_?Release@CKinematicsAnimated@@UAEXXZ:PROC
EXTRN	?Load@CKinematicsAnimated@@UAEXPBDPAVIReader@@I@Z:PROC ; CKinematicsAnimated::Load
EXTRN	__imp_?Load@CKinematicsAnimated@@UAEXPBDPAVIReader@@I@Z:PROC
EXTRN	?CalculateBones@CKinematics@@UAEXH@Z:PROC	; CKinematics::CalculateBones
EXTRN	__imp_?CalculateBones@CKinematics@@UAEXH@Z:PROC
EXTRN	?EnumBoneVertices@CKinematics@@UAEXAAUSEnumVerticesCallback@@G@Z:PROC ; CKinematics::EnumBoneVertices
EXTRN	__imp_?EnumBoneVertices@CKinematics@@UAEXAAUSEnumVerticesCallback@@G@Z:PROC
EXTRN	?IBoneInstances_Destroy@CKinematics@@MAEXXZ:PROC ; CKinematics::IBoneInstances_Destroy
EXTRN	__imp_?IBoneInstances_Destroy@CKinematics@@MAEXXZ:PROC
EXTRN	?IBoneInstances_Create@CKinematics@@MAEXXZ:PROC	; CKinematics::IBoneInstances_Create
EXTRN	__imp_?IBoneInstances_Create@CKinematics@@MAEXXZ:PROC
EXTRN	?Bone_Calculate@CKinematics@@UAEXPAVCBoneData@@PAU?$_matrix@M@@@Z:PROC ; CKinematics::Bone_Calculate
EXTRN	__imp_?Bone_Calculate@CKinematics@@UAEXPAVCBoneData@@PAU?$_matrix@M@@@Z:PROC
EXTRN	?Depart@CKinematics@@UAEXXZ:PROC		; CKinematics::Depart
EXTRN	__imp_?Depart@CKinematics@@UAEXXZ:PROC
EXTRN	?Spawn@CKinematics@@UAEXXZ:PROC			; CKinematics::Spawn
EXTRN	__imp_?Spawn@CKinematics@@UAEXXZ:PROC
EXTRN	?Copy@CKinematics@@UAEXPAVIRender_Visual@@@Z:PROC ; CKinematics::Copy
EXTRN	__imp_?Copy@CKinematics@@UAEXPAVIRender_Visual@@@Z:PROC
EXTRN	?Release@CKinematics@@UAEXXZ:PROC		; CKinematics::Release
EXTRN	__imp_?Release@CKinematics@@UAEXXZ:PROC
EXTRN	?Load@CKinematics@@UAEXPBDPAVIReader@@I@Z:PROC	; CKinematics::Load
EXTRN	__imp_?Load@CKinematics@@UAEXPBDPAVIReader@@I@Z:PROC
EXTRN	?Render@IRender_Visual@@UAEXM@Z:PROC		; IRender_Visual::Render
EXTRN	__imp_?Render@IRender_Visual@@UAEXM@Z:PROC
EXTRN	__imp_??1motions_container@@QAE@XZ:PROC
EXTRN	__imp_??1CKinematicsAnimated@@UAE@XZ:PROC
EXTRN	__imp_??1CKinematics@@UAE@XZ:PROC
EXTRN	__imp_??1FHierrarhyVisual@@UAE@XZ:PROC
EXTRN	__imp_??0motions_container@@QAE@XZ:PROC
EXTRN	__imp_??0CKinematics@@QAE@XZ:PROC
EXTRN	__imp_??0FHierrarhyVisual@@QAE@XZ:PROC
EXTRN	__imp_?Log@@YAXPBD@Z:PROC
EXTRN	__imp_?r_section@CInifile@@QAEAAUSect@1@PBD@Z:PROC
EXTRN	__imp__strchr:PROC
EXTRN	__imp_?g_bRendering@@3HA:DWORD
EXTRN	__imp_?clean@motions_container@@QAEX_N@Z:PROC
EXTRN	__imp_?exist@CLocatorAPI@@QAEPBUfile@1@AAY0CAI@DPBD1@Z:PROC
EXTRN	__imp__strcpy_s:PROC
EXTRN	__imp_?strconcat@@YAPADHPADPBD1@Z:PROC
EXTRN	__imp__strrchr:PROC
EXTRN	__imp_?g_pMotionsContainer@@3PAVmotions_container@@A:DWORD
EXTRN	__imp__strlwr:PROC
EXTRN	__purecall:PROC
;	COMDAT ?ignore_always@?3??Instance_Duplicate@CModelPool@@QAEPAVIRender_Visual@@PAV3@@Z@4_NA
_BSS	SEGMENT
?ignore_always@?3??Instance_Duplicate@CModelPool@@QAEPAVIRender_Visual@@PAV3@@Z@4_NA DB 01H DUP (?) ; `CModelPool::Instance_Duplicate'::`4'::ignore_always
_BSS	ENDS
;	COMDAT ?ignore_always@?5??Instance_Create@CModelPool@@QAEPAVIRender_Visual@@I@Z@4_NA
_BSS	SEGMENT
?ignore_always@?5??Instance_Create@CModelPool@@QAEPAVIRender_Visual@@I@Z@4_NA DB 01H DUP (?) ; `CModelPool::Instance_Create'::`6'::ignore_always
_BSS	ENDS
;	COMDAT ??_7CSkeletonX_ST@@6BIRender_Visual@@@
CONST	SEGMENT
??_7CSkeletonX_ST@@6BIRender_Visual@@@ DD FLAT:??_R4CSkeletonX_ST@@6BIRender_Visual@@@ ; CSkeletonX_ST::`vftable'
	DD	FLAT:?Render@CSkeletonX_ST@@UAEXM@Z
	DD	FLAT:?Load@CSkeletonX_ST@@UAEXPBDPAVIReader@@I@Z
	DD	FLAT:?Release@CSkeletonX_ST@@UAEXXZ
	DD	FLAT:?Copy@CSkeletonX_ST@@UAEXPAVIRender_Visual@@@Z
	DD	FLAT:?Spawn@IRender_Visual@@UAEXXZ
	DD	FLAT:?Depart@IRender_Visual@@UAEXXZ
	DD	FLAT:?dcast_PKinematics@IRender_Visual@@UAEPAVCKinematics@@XZ
	DD	FLAT:?dcast_PKinematicsAnimated@IRender_Visual@@UAEPAVCKinematicsAnimated@@XZ
	DD	FLAT:?dcast_ParticleCustom@IRender_Visual@@UAEPAVIParticleCustom@@XZ
	DD	FLAT:??_ECSkeletonX_ST@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7CSkeletonX_ST@@6BIRender_Mesh@@@
CONST	SEGMENT
??_7CSkeletonX_ST@@6BIRender_Mesh@@@ DD FLAT:??_R4CSkeletonX_ST@@6BIRender_Mesh@@@ ; CSkeletonX_ST::`vftable'
	DD	FLAT:??_ECSkeletonX_ST@@WEE@AEPAXI@Z
CONST	ENDS
;	COMDAT ??_7CSkeletonX_ST@@6B@
CONST	SEGMENT
??_7CSkeletonX_ST@@6B@ DD FLAT:??_R4CSkeletonX_ST@@6B@	; CSkeletonX_ST::`vftable'
	DD	FLAT:?_Load_hw@CSkeletonX_ext@@MAEXAAVFvisual@@PAX@Z
	DD	FLAT:?_CollectBoneFaces@CSkeletonX_ext@@MAEXPAVFvisual@@II@Z
	DD	FLAT:?_FillVerticesHW1W@CSkeletonX_ext@@MAEXABU?$_matrix@M@@AAVCSkeletonWallmark@@ABU?$_vector3@M@@MPAVFvisual@@PAGAAV?$xr_vector@GV?$xalloc@G@@@@@Z
	DD	FLAT:?_FillVerticesHW2W@CSkeletonX_ext@@MAEXABU?$_matrix@M@@AAVCSkeletonWallmark@@ABU?$_vector3@M@@MPAVFvisual@@PAGAAV?$xr_vector@GV?$xalloc@G@@@@@Z
	DD	FLAT:?_FillVertices@CSkeletonX_ext@@MAEXABU?$_matrix@M@@AAVCSkeletonWallmark@@ABU?$_vector3@M@@MPAVFvisual@@GII@Z
	DD	FLAT:?_PickBoneHW1W@CSkeletonX_ext@@MAEHAAU?$_vector3@M@@AAMABU2@2PAVFvisual@@PAGAAV?$xr_vector@GV?$xalloc@G@@@@@Z
	DD	FLAT:?_PickBoneHW2W@CSkeletonX_ext@@MAEHAAU?$_vector3@M@@AAMABU2@2PAVFvisual@@PAGAAV?$xr_vector@GV?$xalloc@G@@@@@Z
	DD	FLAT:?_PickBone@CSkeletonX_ext@@MAEHAAU?$_vector3@M@@AAMABU2@2PAVFvisual@@GII@Z
	DD	FLAT:?SetParent@CSkeletonX@@UAEXPAVCKinematics@@@Z
	DD	FLAT:?AfterLoad@CSkeletonX_ST@@UAEXPAVCKinematics@@G@Z
	DD	FLAT:?EnumBoneVertices@CSkeletonX_ST@@UAEXAAUSEnumVerticesCallback@@G@Z
	DD	FLAT:?PickBone@CSkeletonX_ST@@UAEHAAU?$_vector3@M@@AAMABU2@2G@Z
	DD	FLAT:?FillVertices@CSkeletonX_ST@@UAEXABU?$_matrix@M@@AAVCSkeletonWallmark@@ABU?$_vector3@M@@MG@Z
CONST	ENDS
;	COMDAT ??_7CSkeletonX_ext@@6B@
CONST	SEGMENT
??_7CSkeletonX_ext@@6B@ DD FLAT:??_R4CSkeletonX_ext@@6B@ ; CSkeletonX_ext::`vftable'
	DD	FLAT:?_Load_hw@CSkeletonX_ext@@MAEXAAVFvisual@@PAX@Z
	DD	FLAT:?_CollectBoneFaces@CSkeletonX_ext@@MAEXPAVFvisual@@II@Z
	DD	FLAT:?_FillVerticesHW1W@CSkeletonX_ext@@MAEXABU?$_matrix@M@@AAVCSkeletonWallmark@@ABU?$_vector3@M@@MPAVFvisual@@PAGAAV?$xr_vector@GV?$xalloc@G@@@@@Z
	DD	FLAT:?_FillVerticesHW2W@CSkeletonX_ext@@MAEXABU?$_matrix@M@@AAVCSkeletonWallmark@@ABU?$_vector3@M@@MPAVFvisual@@PAGAAV?$xr_vector@GV?$xalloc@G@@@@@Z
	DD	FLAT:?_FillVertices@CSkeletonX_ext@@MAEXABU?$_matrix@M@@AAVCSkeletonWallmark@@ABU?$_vector3@M@@MPAVFvisual@@GII@Z
	DD	FLAT:?_PickBoneHW1W@CSkeletonX_ext@@MAEHAAU?$_vector3@M@@AAMABU2@2PAVFvisual@@PAGAAV?$xr_vector@GV?$xalloc@G@@@@@Z
	DD	FLAT:?_PickBoneHW2W@CSkeletonX_ext@@MAEHAAU?$_vector3@M@@AAMABU2@2PAVFvisual@@PAGAAV?$xr_vector@GV?$xalloc@G@@@@@Z
	DD	FLAT:?_PickBone@CSkeletonX_ext@@MAEHAAU?$_vector3@M@@AAMABU2@2PAVFvisual@@GII@Z
	DD	FLAT:?SetParent@CSkeletonX@@UAEXPAVCKinematics@@@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7CSkeletonX_PM@@6BIRender_Visual@@@
CONST	SEGMENT
??_7CSkeletonX_PM@@6BIRender_Visual@@@ DD FLAT:??_R4CSkeletonX_PM@@6BIRender_Visual@@@ ; CSkeletonX_PM::`vftable'
	DD	FLAT:?Render@CSkeletonX_PM@@UAEXM@Z
	DD	FLAT:?Load@CSkeletonX_PM@@UAEXPBDPAVIReader@@I@Z
	DD	FLAT:?Release@CSkeletonX_PM@@UAEXXZ
	DD	FLAT:?Copy@CSkeletonX_PM@@UAEXPAVIRender_Visual@@@Z
	DD	FLAT:?Spawn@IRender_Visual@@UAEXXZ
	DD	FLAT:?Depart@IRender_Visual@@UAEXXZ
	DD	FLAT:?dcast_PKinematics@IRender_Visual@@UAEPAVCKinematics@@XZ
	DD	FLAT:?dcast_PKinematicsAnimated@IRender_Visual@@UAEPAVCKinematicsAnimated@@XZ
	DD	FLAT:?dcast_ParticleCustom@IRender_Visual@@UAEPAVIParticleCustom@@XZ
	DD	FLAT:??_ECSkeletonX_PM@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7CSkeletonX_PM@@6BIRender_Mesh@@@
CONST	SEGMENT
??_7CSkeletonX_PM@@6BIRender_Mesh@@@ DD FLAT:??_R4CSkeletonX_PM@@6BIRender_Mesh@@@ ; CSkeletonX_PM::`vftable'
	DD	FLAT:??_ECSkeletonX_PM@@WEE@AEPAXI@Z
CONST	ENDS
;	COMDAT ??_7CSkeletonX_PM@@6B@
CONST	SEGMENT
??_7CSkeletonX_PM@@6B@ DD FLAT:??_R4CSkeletonX_PM@@6B@	; CSkeletonX_PM::`vftable'
	DD	FLAT:?_Load_hw@CSkeletonX_ext@@MAEXAAVFvisual@@PAX@Z
	DD	FLAT:?_CollectBoneFaces@CSkeletonX_ext@@MAEXPAVFvisual@@II@Z
	DD	FLAT:?_FillVerticesHW1W@CSkeletonX_ext@@MAEXABU?$_matrix@M@@AAVCSkeletonWallmark@@ABU?$_vector3@M@@MPAVFvisual@@PAGAAV?$xr_vector@GV?$xalloc@G@@@@@Z
	DD	FLAT:?_FillVerticesHW2W@CSkeletonX_ext@@MAEXABU?$_matrix@M@@AAVCSkeletonWallmark@@ABU?$_vector3@M@@MPAVFvisual@@PAGAAV?$xr_vector@GV?$xalloc@G@@@@@Z
	DD	FLAT:?_FillVertices@CSkeletonX_ext@@MAEXABU?$_matrix@M@@AAVCSkeletonWallmark@@ABU?$_vector3@M@@MPAVFvisual@@GII@Z
	DD	FLAT:?_PickBoneHW1W@CSkeletonX_ext@@MAEHAAU?$_vector3@M@@AAMABU2@2PAVFvisual@@PAGAAV?$xr_vector@GV?$xalloc@G@@@@@Z
	DD	FLAT:?_PickBoneHW2W@CSkeletonX_ext@@MAEHAAU?$_vector3@M@@AAMABU2@2PAVFvisual@@PAGAAV?$xr_vector@GV?$xalloc@G@@@@@Z
	DD	FLAT:?_PickBone@CSkeletonX_ext@@MAEHAAU?$_vector3@M@@AAMABU2@2PAVFvisual@@GII@Z
	DD	FLAT:?SetParent@CSkeletonX@@UAEXPAVCKinematics@@@Z
	DD	FLAT:?AfterLoad@CSkeletonX_PM@@UAEXPAVCKinematics@@G@Z
	DD	FLAT:?EnumBoneVertices@CSkeletonX_PM@@UAEXAAUSEnumVerticesCallback@@G@Z
	DD	FLAT:?PickBone@CSkeletonX_PM@@UAEHAAU?$_vector3@M@@AAMABU2@2G@Z
	DD	FLAT:?FillVertices@CSkeletonX_PM@@UAEXABU?$_matrix@M@@AAVCSkeletonWallmark@@ABU?$_vector3@M@@MG@Z
CONST	ENDS
;	COMDAT ??_7CModelPool@@6B@
CONST	SEGMENT
??_7CModelPool@@6B@ DD FLAT:??_R4CModelPool@@6B@	; CModelPool::`vftable'
	DD	FLAT:??_ECModelPool@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_SFHierrarhyVisual@@6B@
CONST	SEGMENT
??_SFHierrarhyVisual@@6B@ DD FLAT:??_R4FHierrarhyVisual@@6B@ ; FHierrarhyVisual::`local vftable'
	DD	FLAT:?Render@IRender_Visual@@UAEXM@Z
	DD	FLAT:?Load@FHierrarhyVisual@@UAEXPBDPAVIReader@@I@Z
	DD	FLAT:?Release@FHierrarhyVisual@@UAEXXZ
	DD	FLAT:?Copy@FHierrarhyVisual@@UAEXPAVIRender_Visual@@@Z
	DD	FLAT:?Spawn@IRender_Visual@@UAEXXZ
	DD	FLAT:?Depart@IRender_Visual@@UAEXXZ
	DD	FLAT:?dcast_PKinematics@IRender_Visual@@UAEPAVCKinematics@@XZ
	DD	FLAT:?dcast_PKinematicsAnimated@IRender_Visual@@UAEPAVCKinematicsAnimated@@XZ
	DD	FLAT:?dcast_ParticleCustom@IRender_Visual@@UAEPAVIParticleCustom@@XZ
	DD	FLAT:??_EFHierrarhyVisual@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_SCKinematicsAnimated@@6B@
CONST	SEGMENT
??_SCKinematicsAnimated@@6B@ DD FLAT:??_R4CKinematicsAnimated@@6B@ ; CKinematicsAnimated::`local vftable'
	DD	FLAT:?Render@IRender_Visual@@UAEXM@Z
	DD	FLAT:?Load@CKinematicsAnimated@@UAEXPBDPAVIReader@@I@Z
	DD	FLAT:?Release@CKinematicsAnimated@@UAEXXZ
	DD	FLAT:?Copy@CKinematicsAnimated@@UAEXPAVIRender_Visual@@@Z
	DD	FLAT:?Spawn@CKinematicsAnimated@@UAEXXZ
	DD	FLAT:?Depart@CKinematics@@UAEXXZ
	DD	FLAT:?dcast_PKinematics@CKinematics@@UAEPAV1@XZ
	DD	FLAT:?dcast_PKinematicsAnimated@CKinematicsAnimated@@UAEPAV1@XZ
	DD	FLAT:?dcast_ParticleCustom@IRender_Visual@@UAEPAVIParticleCustom@@XZ
	DD	FLAT:??_ECKinematicsAnimated@@UAEPAXI@Z
	DD	FLAT:?Bone_Calculate@CKinematicsAnimated@@UAEXPAVCBoneData@@PAU?$_matrix@M@@@Z
	DD	FLAT:?OnCalculateBones@CKinematicsAnimated@@UAEXXZ
	DD	FLAT:?CreateBoneData@CKinematics@@MAEPAVCBoneData@@G@Z
	DD	FLAT:?IBoneInstances_Create@CKinematicsAnimated@@MAEXXZ
	DD	FLAT:?IBoneInstances_Destroy@CKinematicsAnimated@@MAEXXZ
	DD	FLAT:?EnumBoneVertices@CKinematics@@UAEXAAUSEnumVerticesCallback@@G@Z
	DD	FLAT:?CalculateBones@CKinematics@@UAEXH@Z
	DD	FLAT:?mem_usage@CKinematicsAnimated@@UAEI_N@Z
CONST	ENDS
;	COMDAT ??_SCKinematics@@6B@
CONST	SEGMENT
??_SCKinematics@@6B@ DD FLAT:??_R4CKinematics@@6B@	; CKinematics::`local vftable'
	DD	FLAT:?Render@IRender_Visual@@UAEXM@Z
	DD	FLAT:?Load@CKinematics@@UAEXPBDPAVIReader@@I@Z
	DD	FLAT:?Release@CKinematics@@UAEXXZ
	DD	FLAT:?Copy@CKinematics@@UAEXPAVIRender_Visual@@@Z
	DD	FLAT:?Spawn@CKinematics@@UAEXXZ
	DD	FLAT:?Depart@CKinematics@@UAEXXZ
	DD	FLAT:?dcast_PKinematics@CKinematics@@UAEPAV1@XZ
	DD	FLAT:?dcast_PKinematicsAnimated@IRender_Visual@@UAEPAVCKinematicsAnimated@@XZ
	DD	FLAT:?dcast_ParticleCustom@IRender_Visual@@UAEPAVIParticleCustom@@XZ
	DD	FLAT:??_ECKinematics@@UAEPAXI@Z
	DD	FLAT:?Bone_Calculate@CKinematics@@UAEXPAVCBoneData@@PAU?$_matrix@M@@@Z
	DD	FLAT:?OnCalculateBones@CKinematics@@UAEXXZ
	DD	FLAT:?CreateBoneData@CKinematics@@MAEPAVCBoneData@@G@Z
	DD	FLAT:?IBoneInstances_Create@CKinematics@@MAEXXZ
	DD	FLAT:?IBoneInstances_Destroy@CKinematics@@MAEXXZ
	DD	FLAT:?EnumBoneVertices@CKinematics@@UAEXAAUSEnumVerticesCallback@@G@Z
	DD	FLAT:?CalculateBones@CKinematics@@UAEXH@Z
	DD	FLAT:?mem_usage@CKinematics@@UAEI_N@Z
CONST	ENDS
;	COMDAT ??_7FLOD@@6B@
CONST	SEGMENT
??_7FLOD@@6B@ DD FLAT:??_R4FLOD@@6B@			; FLOD::`vftable'
	DD	FLAT:?Render@FLOD@@UAEXM@Z
	DD	FLAT:?Load@FLOD@@UAEXPBDPAVIReader@@I@Z
	DD	FLAT:?Release@FHierrarhyVisual@@UAEXXZ
	DD	FLAT:?Copy@FLOD@@UAEXPAVIRender_Visual@@@Z
	DD	FLAT:?Spawn@IRender_Visual@@UAEXXZ
	DD	FLAT:?Depart@IRender_Visual@@UAEXXZ
	DD	FLAT:?dcast_PKinematics@IRender_Visual@@UAEPAVCKinematics@@XZ
	DD	FLAT:?dcast_PKinematicsAnimated@IRender_Visual@@UAEPAVCKinematicsAnimated@@XZ
	DD	FLAT:?dcast_ParticleCustom@IRender_Visual@@UAEPAVIParticleCustom@@XZ
	DD	FLAT:??_EFLOD@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
CONST	SEGMENT
??_C@_0BB@GCADKGJO@map?1set?5too?5long@ DB 'map/set too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_R4CKinematics@@6B@
rdata$r	SEGMENT
??_R4CKinematics@@6B@ DD 00H				; CKinematics::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCKinematics@@@8
	DD	FLAT:??_R3CKinematics@@8
rdata$r	ENDS
;	COMDAT ??_R4CKinematicsAnimated@@6B@
rdata$r	SEGMENT
??_R4CKinematicsAnimated@@6B@ DD 00H			; CKinematicsAnimated::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCKinematicsAnimated@@@8
	DD	FLAT:??_R3CKinematicsAnimated@@8
rdata$r	ENDS
;	COMDAT ??_R4CModelPool@@6B@
rdata$r	SEGMENT
??_R4CModelPool@@6B@ DD 00H				; CModelPool::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCModelPool@@@8
	DD	FLAT:??_R3CModelPool@@8
rdata$r	ENDS
;	COMDAT ??_R4FHierrarhyVisual@@6B@
rdata$r	SEGMENT
??_R4FHierrarhyVisual@@6B@ DD 00H			; FHierrarhyVisual::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVFHierrarhyVisual@@@8
	DD	FLAT:??_R3FHierrarhyVisual@@8
rdata$r	ENDS
;	COMDAT ??_R4CSkeletonX_ext@@6B@
rdata$r	SEGMENT
??_R4CSkeletonX_ext@@6B@ DD 00H				; CSkeletonX_ext::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCSkeletonX_ext@@@8
	DD	FLAT:??_R3CSkeletonX_ext@@8
rdata$r	ENDS
;	COMDAT ??_R4CSkeletonX_ST@@6BIRender_Visual@@@
rdata$r	SEGMENT
??_R4CSkeletonX_ST@@6BIRender_Visual@@@ DD 00H		; CSkeletonX_ST::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCSkeletonX_ST@@@8
	DD	FLAT:??_R3CSkeletonX_ST@@8
rdata$r	ENDS
;	COMDAT ??_R4CSkeletonX_ST@@6BIRender_Mesh@@@
rdata$r	SEGMENT
??_R4CSkeletonX_ST@@6BIRender_Mesh@@@ DD 00H		; CSkeletonX_ST::`RTTI Complete Object Locator'
	DD	044H
	DD	00H
	DD	FLAT:??_R0?AVCSkeletonX_ST@@@8
	DD	FLAT:??_R3CSkeletonX_ST@@8
rdata$r	ENDS
;	COMDAT ??_R4CSkeletonX_ST@@6B@
rdata$r	SEGMENT
??_R4CSkeletonX_ST@@6B@ DD 00H				; CSkeletonX_ST::`RTTI Complete Object Locator'
	DD	06cH
	DD	00H
	DD	FLAT:??_R0?AVCSkeletonX_ST@@@8
	DD	FLAT:??_R3CSkeletonX_ST@@8
rdata$r	ENDS
;	COMDAT ??_R4CSkeletonX_PM@@6BIRender_Visual@@@
rdata$r	SEGMENT
??_R4CSkeletonX_PM@@6BIRender_Visual@@@ DD 00H		; CSkeletonX_PM::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCSkeletonX_PM@@@8
	DD	FLAT:??_R3CSkeletonX_PM@@8
rdata$r	ENDS
;	COMDAT ??_R4CSkeletonX_PM@@6BIRender_Mesh@@@
rdata$r	SEGMENT
??_R4CSkeletonX_PM@@6BIRender_Mesh@@@ DD 00H		; CSkeletonX_PM::`RTTI Complete Object Locator'
	DD	044H
	DD	00H
	DD	FLAT:??_R0?AVCSkeletonX_PM@@@8
	DD	FLAT:??_R3CSkeletonX_PM@@8
rdata$r	ENDS
;	COMDAT ??_R4CSkeletonX_PM@@6B@
rdata$r	SEGMENT
??_R4CSkeletonX_PM@@6B@ DD 00H				; CSkeletonX_PM::`RTTI Complete Object Locator'
	DD	08cH
	DD	00H
	DD	FLAT:??_R0?AVCSkeletonX_PM@@@8
	DD	FLAT:??_R3CSkeletonX_PM@@8
rdata$r	ENDS
;	COMDAT ??_R4FLOD@@6B@
rdata$r	SEGMENT
??_R4FLOD@@6B@ DD 00H					; FLOD::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVFLOD@@@8
	DD	FLAT:??_R3FLOD@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCKinematics@@@8
data$rs	SEGMENT
??_R0?AVCKinematics@@@8 DD FLAT:??_7type_info@@6B@	; CKinematics `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCKinematics@@', 00H
data$rs	ENDS
;	COMDAT ??_R3CKinematics@@8
rdata$r	SEGMENT
??_R3CKinematics@@8 DD 00H				; CKinematics::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CKinematics@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFHierrarhyVisual@@@8
data$rs	SEGMENT
??_R0?AVFHierrarhyVisual@@@8 DD FLAT:??_7type_info@@6B@	; FHierrarhyVisual `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFHierrarhyVisual@@', 00H
data$rs	ENDS
;	COMDAT ??_R3FHierrarhyVisual@@8
rdata$r	SEGMENT
??_R3FHierrarhyVisual@@8 DD 00H				; FHierrarhyVisual::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2FHierrarhyVisual@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCKinematicsAnimated@@@8
data$rs	SEGMENT
??_R0?AVCKinematicsAnimated@@@8 DD FLAT:??_7type_info@@6B@ ; CKinematicsAnimated `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCKinematicsAnimated@@', 00H
data$rs	ENDS
;	COMDAT ??_R3CKinematicsAnimated@@8
rdata$r	SEGMENT
??_R3CKinematicsAnimated@@8 DD 00H			; CKinematicsAnimated::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2CKinematicsAnimated@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCModelPool@@@8
data$rs	SEGMENT
??_R0?AVCModelPool@@@8 DD FLAT:??_7type_info@@6B@	; CModelPool `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCModelPool@@', 00H
data$rs	ENDS
;	COMDAT ??_R3CModelPool@@8
rdata$r	SEGMENT
??_R3CModelPool@@8 DD 00H				; CModelPool::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CModelPool@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCSkeletonX_ext@@@8
data$rs	SEGMENT
??_R0?AVCSkeletonX_ext@@@8 DD FLAT:??_7type_info@@6B@	; CSkeletonX_ext `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCSkeletonX_ext@@', 00H
data$rs	ENDS
;	COMDAT ??_R3CSkeletonX_ext@@8
rdata$r	SEGMENT
??_R3CSkeletonX_ext@@8 DD 00H				; CSkeletonX_ext::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CSkeletonX_ext@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCSkeletonX@@@8
data$rs	SEGMENT
??_R0?AVCSkeletonX@@@8 DD FLAT:??_7type_info@@6B@	; CSkeletonX `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCSkeletonX@@', 00H
data$rs	ENDS
;	COMDAT ??_R3CSkeletonX@@8
rdata$r	SEGMENT
??_R3CSkeletonX@@8 DD 00H				; CSkeletonX::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CSkeletonX@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCSkeletonX_ST@@@8
data$rs	SEGMENT
??_R0?AVCSkeletonX_ST@@@8 DD FLAT:??_7type_info@@6B@	; CSkeletonX_ST `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCSkeletonX_ST@@', 00H
data$rs	ENDS
;	COMDAT ??_R3CSkeletonX_ST@@8
rdata$r	SEGMENT
??_R3CSkeletonX_ST@@8 DD 00H				; CSkeletonX_ST::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	06H
	DD	FLAT:??_R2CSkeletonX_ST@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCSkeletonX_PM@@@8
data$rs	SEGMENT
??_R0?AVCSkeletonX_PM@@@8 DD FLAT:??_7type_info@@6B@	; CSkeletonX_PM `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCSkeletonX_PM@@', 00H
data$rs	ENDS
;	COMDAT ??_R3CSkeletonX_PM@@8
rdata$r	SEGMENT
??_R3CSkeletonX_PM@@8 DD 00H				; CSkeletonX_PM::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	07H
	DD	FLAT:??_R2CSkeletonX_PM@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFLOD@@@8
data$rs	SEGMENT
??_R0?AVFLOD@@@8 DD FLAT:??_7type_info@@6B@		; FLOD `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFLOD@@', 00H
data$rs	ENDS
;	COMDAT ??_R3FLOD@@8
rdata$r	SEGMENT
??_R3FLOD@@8 DD	00H					; FLOD::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2FLOD@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@FHierrarhyVisual@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FHierrarhyVisual@@8 DD FLAT:??_R0?AVFHierrarhyVisual@@@8 ; FHierrarhyVisual::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FHierrarhyVisual@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CKinematics@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CKinematics@@8 DD FLAT:??_R0?AVCKinematics@@@8 ; CKinematics::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CKinematics@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CKinematicsAnimated@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CKinematicsAnimated@@8 DD FLAT:??_R0?AVCKinematicsAnimated@@@8 ; CKinematicsAnimated::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CKinematicsAnimated@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CModelPool@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CModelPool@@8 DD FLAT:??_R0?AVCModelPool@@@8 ; CModelPool::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CModelPool@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CSkeletonX@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CSkeletonX@@8 DD FLAT:??_R0?AVCSkeletonX@@@8 ; CSkeletonX::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CSkeletonX@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CSkeletonX_ext@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CSkeletonX_ext@@8 DD FLAT:??_R0?AVCSkeletonX_ext@@@8 ; CSkeletonX_ext::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CSkeletonX_ext@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CSkeletonX_ST@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CSkeletonX_ST@@8 DD FLAT:??_R0?AVCSkeletonX_ST@@@8 ; CSkeletonX_ST::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	05H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CSkeletonX_ST@@8
rdata$r	ENDS
;	COMDAT ??_R1GM@?0A@EA@CSkeletonX_ext@@8
rdata$r	SEGMENT
??_R1GM@?0A@EA@CSkeletonX_ext@@8 DD FLAT:??_R0?AVCSkeletonX_ext@@@8 ; CSkeletonX_ext::`RTTI Base Class Descriptor at (108,-1,0,64)'
	DD	01H
	DD	06cH
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CSkeletonX_ext@@8
rdata$r	ENDS
;	COMDAT ??_R1GM@?0A@EA@CSkeletonX@@8
rdata$r	SEGMENT
??_R1GM@?0A@EA@CSkeletonX@@8 DD FLAT:??_R0?AVCSkeletonX@@@8 ; CSkeletonX::`RTTI Base Class Descriptor at (108,-1,0,64)'
	DD	00H
	DD	06cH
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CSkeletonX@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CSkeletonX_PM@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CSkeletonX_PM@@8 DD FLAT:??_R0?AVCSkeletonX_PM@@@8 ; CSkeletonX_PM::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	06H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CSkeletonX_PM@@8
rdata$r	ENDS
;	COMDAT ??_R1IM@?0A@EA@CSkeletonX_ext@@8
rdata$r	SEGMENT
??_R1IM@?0A@EA@CSkeletonX_ext@@8 DD FLAT:??_R0?AVCSkeletonX_ext@@@8 ; CSkeletonX_ext::`RTTI Base Class Descriptor at (140,-1,0,64)'
	DD	01H
	DD	08cH
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CSkeletonX_ext@@8
rdata$r	ENDS
;	COMDAT ??_R1IM@?0A@EA@CSkeletonX@@8
rdata$r	SEGMENT
??_R1IM@?0A@EA@CSkeletonX@@8 DD FLAT:??_R0?AVCSkeletonX@@@8 ; CSkeletonX::`RTTI Base Class Descriptor at (140,-1,0,64)'
	DD	00H
	DD	08cH
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CSkeletonX@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@FLOD@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FLOD@@8 DD FLAT:??_R0?AVFLOD@@@8		; FLOD::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FLOD@@8
rdata$r	ENDS
;	COMDAT ??_R2FHierrarhyVisual@@8
rdata$r	SEGMENT
??_R2FHierrarhyVisual@@8 DD FLAT:??_R1A@?0A@EA@FHierrarhyVisual@@8 ; FHierrarhyVisual::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IRender_Visual@@8
rdata$r	ENDS
;	COMDAT ??_R2CKinematics@@8
rdata$r	SEGMENT
??_R2CKinematics@@8 DD FLAT:??_R1A@?0A@EA@CKinematics@@8 ; CKinematics::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@FHierrarhyVisual@@8
	DD	FLAT:??_R1A@?0A@EA@IRender_Visual@@8
rdata$r	ENDS
;	COMDAT ??_R2CKinematicsAnimated@@8
rdata$r	SEGMENT
??_R2CKinematicsAnimated@@8 DD FLAT:??_R1A@?0A@EA@CKinematicsAnimated@@8 ; CKinematicsAnimated::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CKinematics@@8
	DD	FLAT:??_R1A@?0A@EA@FHierrarhyVisual@@8
	DD	FLAT:??_R1A@?0A@EA@IRender_Visual@@8
rdata$r	ENDS
;	COMDAT ??_R2CModelPool@@8
rdata$r	SEGMENT
??_R2CModelPool@@8 DD FLAT:??_R1A@?0A@EA@CModelPool@@8	; CModelPool::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R2CSkeletonX@@8
rdata$r	SEGMENT
??_R2CSkeletonX@@8 DD FLAT:??_R1A@?0A@EA@CSkeletonX@@8	; CSkeletonX::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R2CSkeletonX_ext@@8
rdata$r	SEGMENT
??_R2CSkeletonX_ext@@8 DD FLAT:??_R1A@?0A@EA@CSkeletonX_ext@@8 ; CSkeletonX_ext::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CSkeletonX@@8
rdata$r	ENDS
;	COMDAT ??_R2CSkeletonX_ST@@8
rdata$r	SEGMENT
??_R2CSkeletonX_ST@@8 DD FLAT:??_R1A@?0A@EA@CSkeletonX_ST@@8 ; CSkeletonX_ST::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Fvisual@@8
	DD	FLAT:??_R1A@?0A@EA@IRender_Visual@@8
	DD	FLAT:??_R1EE@?0A@EA@IRender_Mesh@@8
	DD	FLAT:??_R1GM@?0A@EA@CSkeletonX_ext@@8
	DD	FLAT:??_R1GM@?0A@EA@CSkeletonX@@8
rdata$r	ENDS
;	COMDAT ??_R2CSkeletonX_PM@@8
rdata$r	SEGMENT
??_R2CSkeletonX_PM@@8 DD FLAT:??_R1A@?0A@EA@CSkeletonX_PM@@8 ; CSkeletonX_PM::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@FProgressive@@8
	DD	FLAT:??_R1A@?0A@EA@Fvisual@@8
	DD	FLAT:??_R1A@?0A@EA@IRender_Visual@@8
	DD	FLAT:??_R1EE@?0A@EA@IRender_Mesh@@8
	DD	FLAT:??_R1IM@?0A@EA@CSkeletonX_ext@@8
	DD	FLAT:??_R1IM@?0A@EA@CSkeletonX@@8
rdata$r	ENDS
;	COMDAT ??_R2FLOD@@8
rdata$r	SEGMENT
??_R2FLOD@@8 DD	FLAT:??_R1A@?0A@EA@FLOD@@8		; FLOD::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@FHierrarhyVisual@@8
	DD	FLAT:??_R1A@?0A@EA@IRender_Visual@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BI@NKKAEFLK@?9?9?9?5model?5pool?5?9?9?9?5end?4@
CONST	SEGMENT
??_C@_0BI@NKKAEFLK@?9?9?9?5model?5pool?5?9?9?9?5end?4@ DB '--- model pool'
	DB	' --- end.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@FIEPEEB@?9?9?9?5instances?3?5?$CFd?0?5free?5?$CFd?0?5mem@
CONST	SEGMENT
??_C@_0CO@FIEPEEB@?9?9?9?5instances?3?5?$CFd?0?5free?5?$CFd?0?5mem@ DB '-'
	DB	'-- instances: %d, free %d, mem usage: %d Kb ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@BHPDLEKJ@?$CD?$CF3d?3?5?$FL?$CFs?$FN?5?$FL?$CF5d?5Kb?$FN?5?9?5?$CFs@
CONST	SEGMENT
??_C@_0BJ@BHPDLEKJ@?$CD?$CF3d?3?5?$FL?$CFs?$FN?5?$FL?$CF5d?5Kb?$FN?5?9?5?$CFs@ DB '#'
	DB	'%3d: [%s] [%5d Kb] - %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DOOIMPEH@used@
CONST	SEGMENT
??_C@_04DOOIMPEH@used@ DB 'used', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04LIAPHEDB@free@
CONST	SEGMENT
??_C@_04LIAPHEDB@free@ DB 'free', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@JAFLBMEJ@?9?9?9?5models?3?5?$CFd?0?5mem?5usage?3?5?$CFd?5K@
CONST	SEGMENT
??_C@_0CC@JAFLBMEJ@?9?9?9?5models?3?5?$CFd?0?5mem?5usage?3?5?$CFd?5K@ DB '-'
	DB	'-- models: %d, mem usage: %d Kb ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@BMBKIPKJ@?$CD?$CF3d?3?5?$FL?$CF3d?1?$CF5d?5Kb?$FN?5?9?5?$CFs@
CONST	SEGMENT
??_C@_0BI@BMBKIPKJ@?$CD?$CF3d?3?5?$FL?$CF3d?1?$CF5d?5Kb?$FN?5?9?5?$CFs@ DB '#'
	DB	'%3d: [%3d/%5d Kb] - %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@JBHPMFMH@?9?9?9?5model?5pool?5?9?9?9?5begin?3@
CONST	SEGMENT
??_C@_0BK@JBHPMFMH@?9?9?9?5model?5pool?5?9?9?9?5begin?3@ DB '--- model po'
	DB	'ol --- begin:', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DJGLAOAH@prefetch_visuals_@
CONST	SEGMENT
??_C@_0BC@DJGLAOAH@prefetch_visuals_@ DB 'prefetch_visuals_', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@KFOEMNN@CModelPool?3?3Instance_Load@
CONST	SEGMENT
??_C@_0BK@KFOEMNN@CModelPool?3?3Instance_Load@ DB 'CModelPool::Instance_L'
	DB	'oad', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@ENFCPNEL@Can?8t?5find?5model?5file?5?8?$CFs?8?4@
CONST	SEGMENT
??_C@_0BM@ENFCPNEL@Can?8t?5find?5model?5file?5?8?$CFs?8?4@ DB 'Can''t fin'
	DB	'd model file ''%s''.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CGKNLCGD@$game_meshes$@
CONST	SEGMENT
??_C@_0O@CGKNLCGD@$game_meshes$@ DB '$game_meshes$', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04FKFGGPFG@?4ogf@
CONST	SEGMENT
??_C@_04FKFGGPFG@?4ogf@ DB '.ogf', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@KMCMNMJD@CModelPool?3?3Instance_Duplicate@
CONST	SEGMENT
??_C@_0BP@KMCMNMJD@CModelPool?3?3Instance_Duplicate@ DB 'CModelPool::Inst'
	DB	'ance_Duplicate', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01FCMHBHNC@V@
CONST	SEGMENT
??_C@_01FCMHBHNC@V@ DB 'V', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@HJNKECDB@I?3?2Vitalya?2mine?2NSProjectX?2laye@
CONST	SEGMENT
??_C@_0DJ@HJNKECDB@I?3?2Vitalya?2mine?2NSProjectX?2laye@ DB 'I:\Vitalya\m'
	DB	'ine\NSProjectX\layers\xrRender\ModelPool.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@ILNANEIH@CModelPool?3?3Instance_Create@
CONST	SEGMENT
??_C@_0BM@ILNANEIH@CModelPool?3?3Instance_Create@ DB 'CModelPool::Instanc'
	DB	'e_Create', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@EBDNGAIE@Unknown?5visual?5type@
CONST	SEGMENT
??_C@_0BE@EBDNGAIE@Unknown?5visual?5type@ DB 'Unknown visual type', 00H ; `string'
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
PUBLIC	?xr_strcmp@@YAHABVshared_str@@0@Z		; xr_strcmp
PUBLIC	?xr_strcmp@@YAHPBD0@Z				; xr_strcmp
PUBLIC	?equal@shared_str@@QBE_NABV1@@Z			; shared_str::equal
PUBLIC	??0shared_str@@QAE@PBD@Z			; shared_str::shared_str
PUBLIC	?strext@@YAPADPBD@Z				; strext
PUBLIC	??0ModelDef@CModelPool@@QAE@XZ			; CModelPool::ModelDef::ModelDef
PUBLIC	??Ashared_str@@QAEDI@Z				; shared_str::operator[]
PUBLIC	?push_back@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@QAEXABQAVIRender_Visual@@@Z ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::push_back
PUBLIC	??$emplace_back@ABQAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@QAE?A_TABQAVIRender_Visual@@@Z ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::emplace_back<IRender_Visual * const &>
PUBLIC	??$forward@ABQAVIRender_Visual@@@std@@YAABQAVIRender_Visual@@ABQAV1@@Z ; std::forward<IRender_Visual * const &>
PUBLIC	??$_Emplace_reallocate@ABQAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@QAEPAPAVIRender_Visual@@QAPAV2@ABQAV2@@Z ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::_Emplace_reallocate<IRender_Visual * const &>
PUBLIC	?_Change_array@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@AAEXQAPAVIRender_Visual@@II@Z ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::_Change_array
PUBLIC	?_Getal@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@AAEAAV?$xalloc@PAVIRender_Visual@@@@XZ ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::_Getal
PUBLIC	?_Get_first@?$_Compressed_pair@V?$xalloc@PAVIRender_Visual@@@@V?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@std@@$00@std@@QAEAAV?$xalloc@PAVIRender_Visual@@@@XZ ; std::_Compressed_pair<xalloc<IRender_Visual *>,std::_Vector_val<std::_Simple_types<IRender_Visual *> >,1>::_Get_first
PUBLIC	?deallocate@?$xalloc@PAVIRender_Visual@@@@QBEXPAPAVIRender_Visual@@I@Z ; xalloc<IRender_Visual *>::deallocate
PUBLIC	??$xr_free@PAVIRender_Visual@@@@YAXAAPAPAVIRender_Visual@@@Z ; xr_free<IRender_Visual *>
PUBLIC	?_Destroy@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@AAEXPAPAVIRender_Visual@@0@Z ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::_Destroy
PUBLIC	??$_Destroy_range@V?$xalloc@PAVIRender_Visual@@@@@std@@YAXPAPAVIRender_Visual@@QAPAV1@AAV?$xalloc@PAVIRender_Visual@@@@@Z ; std::_Destroy_range<xalloc<IRender_Visual *> >
PUBLIC	??$_Unfancy@PAVIRender_Visual@@@std@@YAPAPAVIRender_Visual@@PAPAV1@@Z ; std::_Unfancy<IRender_Visual *>
PUBLIC	??$destroy@PAVIRender_Visual@@@?$_Normal_allocator_traits@V?$xalloc@PAVIRender_Visual@@@@@std@@SAXAAV?$xalloc@PAVIRender_Visual@@@@PAPAVIRender_Visual@@@Z ; std::_Normal_allocator_traits<xalloc<IRender_Visual *> >::destroy<IRender_Visual *>
PUBLIC	?destroy@?$xalloc@PAVIRender_Visual@@@@QAEXPAPAVIRender_Visual@@@Z ; xalloc<IRender_Visual *>::destroy
PUBLIC	??$_Destroy_in_place@PAPAVIRender_Visual@@@std@@YAXAAPAPAVIRender_Visual@@@Z ; std::_Destroy_in_place<IRender_Visual * *>
PUBLIC	?_Umove@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@AAEPAPAVIRender_Visual@@PAPAV3@00@Z ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::_Umove
PUBLIC	??$_Uninitialized_move@PAPAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@YAPAPAVIRender_Visual@@QAPAV1@0PAPAV1@AAV?$xalloc@PAVIRender_Visual@@@@@Z ; std::_Uninitialized_move<IRender_Visual * *,xalloc<IRender_Visual *> >
PUBLIC	?_Release@?$_Uninitialized_backout_al@V?$xalloc@PAVIRender_Visual@@@@@std@@QAEPAPAVIRender_Visual@@XZ ; std::_Uninitialized_backout_al<xalloc<IRender_Visual *> >::_Release
PUBLIC	??$move@AAPAVIRender_Visual@@@std@@YA$$QAPAVIRender_Visual@@AAPAV1@@Z ; std::move<IRender_Visual * &>
PUBLIC	??$_Emplace_back@PAVIRender_Visual@@@?$_Uninitialized_backout_al@V?$xalloc@PAVIRender_Visual@@@@@std@@QAEX$$QAPAVIRender_Visual@@@Z ; std::_Uninitialized_backout_al<xalloc<IRender_Visual *> >::_Emplace_back<IRender_Visual *>
PUBLIC	??$forward@PAVIRender_Visual@@@std@@YA$$QAPAVIRender_Visual@@AAPAV1@@Z ; std::forward<IRender_Visual *>
PUBLIC	??$construct@PAVIRender_Visual@@PAV1@@?$_Normal_allocator_traits@V?$xalloc@PAVIRender_Visual@@@@@std@@SAXAAV?$xalloc@PAVIRender_Visual@@@@PAPAVIRender_Visual@@$$QAPAV3@@Z ; std::_Normal_allocator_traits<xalloc<IRender_Visual *> >::construct<IRender_Visual *,IRender_Visual *>
PUBLIC	?construct@?$xalloc@PAVIRender_Visual@@@@QAEXPAPAVIRender_Visual@@ABQAV2@@Z ; xalloc<IRender_Visual *>::construct
PUBLIC	??1?$_Uninitialized_backout_al@V?$xalloc@PAVIRender_Visual@@@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<xalloc<IRender_Visual *> >::~_Uninitialized_backout_al<xalloc<IRender_Visual *> >
PUBLIC	??0?$_Uninitialized_backout_al@V?$xalloc@PAVIRender_Visual@@@@@std@@QAE@PAPAVIRender_Visual@@AAV?$xalloc@PAVIRender_Visual@@@@@Z ; std::_Uninitialized_backout_al<xalloc<IRender_Visual *> >::_Uninitialized_backout_al<xalloc<IRender_Visual *> >
PUBLIC	??$_Get_unwrapped@ABQAPAVIRender_Visual@@@std@@YA?A_TABQAPAVIRender_Visual@@@Z ; std::_Get_unwrapped<IRender_Visual * * const &>
PUBLIC	?_Umove_if_noexcept@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@AAEXPAPAVIRender_Visual@@00@Z ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::_Umove_if_noexcept
PUBLIC	?_Umove_if_noexcept1@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@AAEXPAPAVIRender_Visual@@00U?$integral_constant@_N$00@2@@Z ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::_Umove_if_noexcept1
PUBLIC	??$construct@PAVIRender_Visual@@ABQAV1@@?$_Normal_allocator_traits@V?$xalloc@PAVIRender_Visual@@@@@std@@SAXAAV?$xalloc@PAVIRender_Visual@@@@PAPAVIRender_Visual@@ABQAV3@@Z ; std::_Normal_allocator_traits<xalloc<IRender_Visual *> >::construct<IRender_Visual *,IRender_Visual * const &>
PUBLIC	?allocate@?$xalloc@PAVIRender_Visual@@@@QBEPAPAVIRender_Visual@@IPBX@Z ; xalloc<IRender_Visual *>::allocate
PUBLIC	??$xr_alloc@PAVIRender_Visual@@@@YAPAPAVIRender_Visual@@I@Z ; xr_alloc<IRender_Visual *>
PUBLIC	?_Calculate_growth@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@ABEII@Z ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::_Calculate_growth
PUBLIC	?max_size@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@QBEIXZ ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::max_size
PUBLIC	?_Getal@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@ABEABV?$xalloc@PAVIRender_Visual@@@@XZ ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::_Getal
PUBLIC	?_Get_first@?$_Compressed_pair@V?$xalloc@PAVIRender_Visual@@@@V?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@std@@$00@std@@QBEABV?$xalloc@PAVIRender_Visual@@@@XZ ; std::_Compressed_pair<xalloc<IRender_Visual *>,std::_Vector_val<std::_Simple_types<IRender_Visual *> >,1>::_Get_first
PUBLIC	?max_size@?$_Normal_allocator_traits@V?$xalloc@PAVIRender_Visual@@@@@std@@SAIABV?$xalloc@PAVIRender_Visual@@@@@Z ; std::_Normal_allocator_traits<xalloc<IRender_Visual *> >::max_size
PUBLIC	?max_size@?$xalloc@PAVIRender_Visual@@@@QBEIXZ	; xalloc<IRender_Visual *>::max_size
PUBLIC	?capacity@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@QBEIXZ ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::capacity
PUBLIC	?_Xlength@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@CAXXZ ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::_Xlength
PUBLIC	??$_Emplace_back_with_unused_capacity@ABQAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@AAE?A_TABQAVIRender_Visual@@@Z ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::_Emplace_back_with_unused_capacity<IRender_Visual * const &>
PUBLIC	?_Orphan_range@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@ABEXPAPAVIRender_Visual@@0@Z ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::_Orphan_range
PUBLIC	?size@?$xr_vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@@QBEIXZ ; xr_vector<IRender_Visual *,xalloc<IRender_Visual *> >::size
PUBLIC	?size@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@QBEIXZ ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::size
PUBLIC	??8@YA_NABVshared_str@@0@Z			; operator==
PUBLIC	?_get@shared_str@@QBEPBUstr_value@@XZ		; shared_str::_get
PUBLIC	?Logging@CModelPool@@QAEXH@Z			; CModelPool::Logging
PUBLIC	?c_str@shared_str@@QBEPBDXZ			; shared_str::c_str
PUBLIC	?begin@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@std@@@2@XZ ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::begin
PUBLIC	??$addressof@V?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<IRender_Visual *> > >
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@std@@@std@@QAE@PAPAVIRender_Visual@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<IRender_Visual *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<IRender_Visual *> > >
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@std@@@std@@QAE@PAPAVIRender_Visual@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<IRender_Visual *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<IRender_Visual *> > >
PUBLIC	??$forward@U_Zero_then_variadic_args_t@std@@@std@@YA$$QAU_Zero_then_variadic_args_t@0@AAU10@@Z ; std::forward<std::_Zero_then_variadic_args_t>
PUBLIC	??0?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<IRender_Visual *> >::_Vector_val<std::_Simple_types<IRender_Visual *> >
PUBLIC	??4shared_str@@QAEAAV0@ABV0@@Z			; shared_str::operator=
PUBLIC	?_Getcont@_Iterator_base0@std@@QBEPBU_Container_base0@2@XZ ; std::_Iterator_base0::_Getcont
PUBLIC	??$forward@AAPAVIRender_Visual@@@std@@YAAAPAVIRender_Visual@@AAPAV1@@Z ; std::forward<IRender_Visual * &>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$forward@AAVshared_str@@@std@@YAAAVshared_str@@AAV1@@Z ; std::forward<shared_str &>
PUBLIC	??Rstr_pred@CModelPool@@QBE_NABVshared_str@@0@Z	; CModelPool::str_pred::operator()
PUBLIC	?_Throw_tree_length_error@std@@YAXXZ		; std::_Throw_tree_length_error
PUBLIC	??_ECSkeletonX_ST@@WEE@AEPAXI@Z			; [thunk]:CSkeletonX_ST::`vector deleting destructor'
PUBLIC	??_ECSkeletonX_PM@@WEE@AEPAXI@Z			; [thunk]:CSkeletonX_PM::`vector deleting destructor'
PUBLIC	??$forward@Vshared_str@@@std@@YA$$QAVshared_str@@AAV1@@Z ; std::forward<shared_str>
PUBLIC	??$forward@AAPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@0@AAPAU10@@Z ; std::forward<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> * &>
PUBLIC	??$forward@PAD@std@@YA$$QAPADAAPAD@Z		; std::forward<char *>
PUBLIC	??$?0Vshared_str@@PAVIRender_Visual@@$0A@@?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@QAE@$$QAU?$pair@Vshared_str@@PAVIRender_Visual@@@1@@Z ; std::pair<shared_str const ,IRender_Visual *>::pair<shared_str const ,IRender_Visual *><shared_str,IRender_Visual *,0>
PUBLIC	??$forward@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@std@@YA$$QAPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@0@AAPAU10@@Z ; std::forward<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> *>
PUBLIC	??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@0@0@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> *,std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> * &>
PUBLIC	??$construct@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@U?$pair@Vshared_str@@PAVIRender_Visual@@@2@@?$_Normal_allocator_traits@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@std@@SAXAAV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@PAU?$pair@$$CBVshared_str@@PAVIRender_Visual@@@1@$$QAU?$pair@Vshared_str@@PAVIRender_Visual@@@1@@Z ; std::_Normal_allocator_traits<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >::construct<std::pair<shared_str const ,IRender_Visual *>,std::pair<shared_str,IRender_Visual *> >
PUBLIC	??$?0PAVIRender_Visual@@PAD$0A@@?$pair@QAVIRender_Visual@@Vshared_str@@@std@@QAE@$$QAU?$pair@PAVIRender_Visual@@PAD@1@@Z ; std::pair<IRender_Visual * const,shared_str>::pair<IRender_Visual * const,shared_str><IRender_Visual *,char *,0>
PUBLIC	??0?$_Alloc_construct_ptr@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@std@@QAE@AAV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@Z ; std::_Alloc_construct_ptr<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >::_Alloc_construct_ptr<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >
PUBLIC	?_Allocate@?$_Alloc_construct_ptr@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@std@@QAEXXZ ; std::_Alloc_construct_ptr<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >::_Allocate
PUBLIC	??0?$_Tree_temp_node_alloc@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@std@@QAE@AAV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@Z ; std::_Tree_temp_node_alloc<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >::_Tree_temp_node_alloc<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >
PUBLIC	??$exchange@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@$$T@std@@YAPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@0@AAPAU10@$$QA$$T@Z ; std::exchange<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> *,std::nullptr_t>
PUBLIC	??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@0@AAV10@@Z ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > > > >
PUBLIC	??$?0PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@_N@std@@QAE@$$QAPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@1@$$QA_N@Z ; std::pair<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> *,bool>::pair<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> *,bool><std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> *,bool,0>
PUBLIC	??$_Find_upper_bound@Vshared_str@@@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@1@ABVshared_str@@@Z ; std::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >::_Find_upper_bound<shared_str>
PUBLIC	??$?0U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@?$_Tree_temp_node@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@std@@QAE@AAV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@1@$$QAU?$pair@Vshared_str@@PAVIRender_Visual@@@1@@Z ; std::_Tree_temp_node<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >::_Tree_temp_node<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > ><std::pair<shared_str,IRender_Visual *> >
PUBLIC	??$forward@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@std@@YA$$QAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@0@AAPAU10@@Z ; std::forward<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> *>
PUBLIC	??$_Construct_in_place@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@0@0@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> *,std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> * &>
PUBLIC	??$construct@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@U?$pair@PAVIRender_Visual@@PAD@2@@?$_Normal_allocator_traits@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@std@@SAXAAV?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@PAU?$pair@QAVIRender_Visual@@Vshared_str@@@1@$$QAU?$pair@PAVIRender_Visual@@PAD@1@@Z ; std::_Normal_allocator_traits<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >::construct<std::pair<IRender_Visual * const,shared_str>,std::pair<IRender_Visual *,char *> >
PUBLIC	??$forward@_N@std@@YA$$QA_NAA_N@Z		; std::forward<bool>
PUBLIC	??$forward@AAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@0@AAPAU10@@Z ; std::forward<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> * &>
PUBLIC	?max_size@?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@QBEIXZ ; xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> >::max_size
PUBLIC	?_Get_first@?$_Compressed_pair@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@$00@std@@QBEABV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@XZ ; std::_Compressed_pair<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >,1>::_Get_first
PUBLIC	?max_size@?$_Normal_allocator_traits@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@std@@SAIABV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@Z ; std::_Normal_allocator_traits<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >::max_size
PUBLIC	?_Getal@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@IBEABV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@XZ ; std::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >::_Getal
PUBLIC	?max_size@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@QBEIXZ ; std::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >::max_size
PUBLIC	??0?$_Alloc_construct_ptr@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@std@@QAE@AAV?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@Z ; std::_Alloc_construct_ptr<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >::_Alloc_construct_ptr<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >
PUBLIC	?_Allocate@?$_Alloc_construct_ptr@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@std@@QAEXXZ ; std::_Alloc_construct_ptr<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >::_Allocate
PUBLIC	??1?$_Alloc_construct_ptr@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >::~_Alloc_construct_ptr<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >
PUBLIC	??1?$_Tree_temp_node_alloc@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@std@@QAE@XZ ; std::_Tree_temp_node_alloc<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >::~_Tree_temp_node_alloc<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >
PUBLIC	?_Check_grow_by_1@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >::_Check_grow_by_1
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >::_Insert_node
PUBLIC	??0?$_Tree_temp_node_alloc@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@std@@QAE@AAV?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@Z ; std::_Tree_temp_node_alloc<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >::_Tree_temp_node_alloc<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >
PUBLIC	?_Release@?$_Alloc_construct_ptr@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@2@XZ ; std::_Alloc_construct_ptr<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >::_Release
PUBLIC	??1?$_Tree_temp_node@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@std@@QAE@XZ ; std::_Tree_temp_node<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >::~_Tree_temp_node<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >
PUBLIC	??$exchange@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@$$T@std@@YAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@0@AAPAU10@$$QA$$T@Z ; std::exchange<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> *,std::nullptr_t>
PUBLIC	??$construct@UModelDef@CModelPool@@AAU12@@?$_Normal_allocator_traits@V?$xalloc@UModelDef@CModelPool@@@@@std@@SAXAAV?$xalloc@UModelDef@CModelPool@@@@PAUModelDef@CModelPool@@AAU34@@Z ; std::_Normal_allocator_traits<xalloc<CModelPool::ModelDef> >::construct<CModelPool::ModelDef,CModelPool::ModelDef &>
PUBLIC	??$forward@AAUModelDef@CModelPool@@@std@@YAAAUModelDef@CModelPool@@AAU12@@Z ; std::forward<CModelPool::ModelDef &>
PUBLIC	??$construct@UModelDef@CModelPool@@U12@@?$_Normal_allocator_traits@V?$xalloc@UModelDef@CModelPool@@@@@std@@SAXAAV?$xalloc@UModelDef@CModelPool@@@@PAUModelDef@CModelPool@@$$QAU34@@Z ; std::_Normal_allocator_traits<xalloc<CModelPool::ModelDef> >::construct<CModelPool::ModelDef,CModelPool::ModelDef>
PUBLIC	??$forward@UModelDef@CModelPool@@@std@@YA$$QAUModelDef@CModelPool@@AAU12@@Z ; std::forward<CModelPool::ModelDef>
PUBLIC	??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@AB_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@1@AB_N@Z ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > > >,bool const &,0>
PUBLIC	??$_Emplace@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@_N@1@$$QAU?$pair@Vshared_str@@PAVIRender_Visual@@@1@@Z ; std::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >::_Emplace<std::pair<shared_str,IRender_Visual *> >
PUBLIC	??$forward@AB_N@std@@YAAB_NAB_N@Z		; std::forward<bool const &>
PUBLIC	??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@0@AAV10@@Z ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > > > >
PUBLIC	??$?0PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@_N@std@@QAE@$$QAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@1@$$QA_N@Z ; std::pair<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> *,bool>::pair<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> *,bool><std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> *,bool,0>
PUBLIC	??$?0U?$pair@PAVIRender_Visual@@PAD@std@@@?$_Tree_temp_node@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@std@@QAE@AAV?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@1@$$QAU?$pair@PAVIRender_Visual@@PAD@1@@Z ; std::_Tree_temp_node<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >::_Tree_temp_node<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > ><std::pair<IRender_Visual *,char *> >
PUBLIC	??$?0AAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@_N@std@@QAE@AAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@1@$$QA_N@Z ; std::pair<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> *,bool>::pair<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> *,bool><std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> * &,bool,0>
PUBLIC	?max_size@?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@QBEIXZ ; xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> >::max_size
PUBLIC	?_Get_first@?$_Compressed_pair@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@$00@std@@QBEABV?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@XZ ; std::_Compressed_pair<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >,1>::_Get_first
PUBLIC	?max_size@?$_Normal_allocator_traits@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@std@@SAIABV?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@Z ; std::_Normal_allocator_traits<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >::max_size
PUBLIC	?_Getal@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@IBEABV?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@XZ ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::_Getal
PUBLIC	?max_size@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::max_size
PUBLIC	??1?$_Alloc_construct_ptr@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >::~_Alloc_construct_ptr<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >
PUBLIC	??1?$_Tree_temp_node_alloc@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@std@@QAE@XZ ; std::_Tree_temp_node_alloc<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >::~_Tree_temp_node_alloc<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >
PUBLIC	?_Check_grow_by_1@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::_Check_grow_by_1
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >::_Insert_node
PUBLIC	?_Extract@?$_In_place_key_extract_map@PAVIRender_Visual@@U?$pair@PAVIRender_Visual@@PAD@std@@@std@@SAABQAVIRender_Visual@@ABU?$pair@PAVIRender_Visual@@PAD@2@@Z ; std::_In_place_key_extract_map<IRender_Visual *,std::pair<IRender_Visual *,char *> >::_Extract
PUBLIC	?_Release@?$_Alloc_construct_ptr@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@std@@QAEPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@2@XZ ; std::_Alloc_construct_ptr<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >::_Release
PUBLIC	??1?$_Tree_temp_node@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@std@@QAE@XZ ; std::_Tree_temp_node<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >::~_Tree_temp_node<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >
PUBLIC	??1?$pair@QAVIRender_Visual@@Vshared_str@@@std@@QAE@XZ ; std::pair<IRender_Visual * const,shared_str>::~pair<IRender_Visual * const,shared_str>
PUBLIC	??1?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@QAE@XZ ; std::pair<shared_str const ,IRender_Visual *>::~pair<shared_str const ,IRender_Visual *>
PUBLIC	??_G?$pair@QAVIRender_Visual@@Vshared_str@@@std@@QAEPAXI@Z ; std::pair<IRender_Visual * const,shared_str>::`scalar deleting destructor'
PUBLIC	??_G?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@QAEPAXI@Z ; std::pair<shared_str const ,IRender_Visual *>::`scalar deleting destructor'
PUBLIC	??$xr_free@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@YAXAAPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@Z ; xr_free<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> >
PUBLIC	??$xr_free@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@YAXAAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@Z ; xr_free<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> >
PUBLIC	??$move@AAD@std@@YA$$QADAAD@Z			; std::move<char &>
PUBLIC	??$_Emplace_back@AAUModelDef@CModelPool@@@?$_Uninitialized_backout_al@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAEXAAUModelDef@CModelPool@@@Z ; std::_Uninitialized_backout_al<xalloc<CModelPool::ModelDef> >::_Emplace_back<CModelPool::ModelDef &>
PUBLIC	??$destroy@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@?$_Normal_allocator_traits@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@std@@SAXAAV?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@PAU?$pair@QAVIRender_Visual@@Vshared_str@@@1@@Z ; std::_Normal_allocator_traits<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >::destroy<std::pair<IRender_Visual * const,shared_str> >
PUBLIC	??$_Emplace_back@UModelDef@CModelPool@@@?$_Uninitialized_backout_al@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAEX$$QAUModelDef@CModelPool@@@Z ; std::_Uninitialized_backout_al<xalloc<CModelPool::ModelDef> >::_Emplace_back<CModelPool::ModelDef>
PUBLIC	??$forward@ABQAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@std@@YAABQAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@0@ABQAU10@@Z ; std::forward<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> * const &>
PUBLIC	??$_Voidify_iter@PAPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@std@@YAPAXPAPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@0@@Z ; std::_Voidify_iter<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> * *>
PUBLIC	??$addressof@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> *>
PUBLIC	??$forward@ABQAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@std@@YAABQAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@0@ABQAU10@@Z ; std::forward<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> * const &>
PUBLIC	??$_Voidify_iter@PAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@std@@YAPAXPAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@0@@Z ; std::_Voidify_iter<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> * *>
PUBLIC	??$addressof@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> *>
PUBLIC	??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@0@@Z ; std::_Destroy_in_place<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> *>
PUBLIC	??$destroy@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@?$_Normal_allocator_traits@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@std@@SAXAAV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@PAU?$pair@$$CBVshared_str@@PAVIRender_Visual@@@1@@Z ; std::_Normal_allocator_traits<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >::destroy<std::pair<shared_str const ,IRender_Visual *> >
PUBLIC	??$_Kfn@$$CBVshared_str@@PAVIRender_Visual@@@?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@SAABVshared_str@@ABU?$pair@$$CBVshared_str@@PAVIRender_Visual@@@1@@Z ; std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1>::_Kfn<shared_str const ,IRender_Visual *>
PUBLIC	??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@0@@Z ; std::_Destroy_in_place<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> *>
PUBLIC	??$exchange@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@AAPAU12@@std@@YAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@0@AAPAU10@0@Z ; std::exchange<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> *,std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> * &>
PUBLIC	??$_Kfn@QAVIRender_Visual@@Vshared_str@@@?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@SAABQAVIRender_Visual@@ABU?$pair@QAVIRender_Visual@@Vshared_str@@@1@@Z ; std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0>::_Kfn<IRender_Visual * const,shared_str>
PUBLIC	??$emplace@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@Vshared_str@@PAVIRender_Visual@@@1@@Z ; std::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >::emplace<std::pair<shared_str,IRender_Visual *> >
PUBLIC	??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@std@@AB_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@1@AB_N@Z ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > > >,bool const &,0>
PUBLIC	??$_Emplace@U?$pair@PAVIRender_Visual@@PAD@std@@@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@_N@1@$$QAU?$pair@PAVIRender_Visual@@PAD@1@@Z ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::_Emplace<std::pair<IRender_Visual *,char *> >
PUBLIC	?deallocate@?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@QBEXPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@I@Z ; xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> >::deallocate
PUBLIC	?_Get_first@?$_Compressed_pair@Ustr_pred@CModelPool@@V?$_Compressed_pair@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@$00@std@@$00@std@@QBEABUstr_pred@CModelPool@@XZ ; std::_Compressed_pair<CModelPool::str_pred,std::_Compressed_pair<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >,1>,1>::_Get_first
PUBLIC	?deallocate@?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@QBEXPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@I@Z ; xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> >::deallocate
PUBLIC	?_Get_first@?$_Compressed_pair@U?$less@PAVIRender_Visual@@@std@@V?$_Compressed_pair@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@$00@2@$00@std@@QBEABU?$less@PAVIRender_Visual@@@2@XZ ; std::_Compressed_pair<std::less<IRender_Visual *>,std::_Compressed_pair<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >,1>,1>::_Get_first
PUBLIC	??0?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@QAE@XZ ; xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> >::xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> >
PUBLIC	?deallocate@?$_Normal_allocator_traits@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@std@@SAXAAV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@2@I@Z ; std::_Normal_allocator_traits<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >::deallocate
PUBLIC	?_Getcomp@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@IBEABUstr_pred@CModelPool@@XZ ; std::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >::_Getcomp
PUBLIC	??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >
PUBLIC	??0?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@QAE@XZ ; xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> >::xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> >
PUBLIC	?deallocate@?$_Normal_allocator_traits@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@std@@SAXAAV?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@2@I@Z ; std::_Normal_allocator_traits<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >::deallocate
PUBLIC	?_Getcomp@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@IBEABU?$less@PAVIRender_Visual@@@2@XZ ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::_Getcomp
PUBLIC	??R?$less@PAVIRender_Visual@@@std@@QBE_NABQAVIRender_Visual@@0@Z ; std::less<IRender_Visual *>::operator()
PUBLIC	??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >
PUBLIC	??0?$_Uninitialized_backout_al@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAE@PAUModelDef@CModelPool@@AAV?$xalloc@UModelDef@CModelPool@@@@@Z ; std::_Uninitialized_backout_al<xalloc<CModelPool::ModelDef> >::_Uninitialized_backout_al<xalloc<CModelPool::ModelDef> >
PUBLIC	??1?$_Uninitialized_backout_al@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<xalloc<CModelPool::ModelDef> >::~_Uninitialized_backout_al<xalloc<CModelPool::ModelDef> >
PUBLIC	?_Release@?$_Uninitialized_backout_al@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAEPAUModelDef@CModelPool@@XZ ; std::_Uninitialized_backout_al<xalloc<CModelPool::ModelDef> >::_Release
PUBLIC	??$swap@D$0A@@std@@YAXAAD0@Z			; std::swap<char,0>
PUBLIC	??$_Uninitialized_copy@PAUModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@YAPAUModelDef@CModelPool@@QAU12@0PAU12@AAV?$xalloc@UModelDef@CModelPool@@@@@Z ; std::_Uninitialized_copy<CModelPool::ModelDef *,xalloc<CModelPool::ModelDef> >
PUBLIC	??$xr_alloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@YAPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@I@Z ; xr_alloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> >
PUBLIC	??$addressof@$$CBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@YAPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@0@ABV10@@Z ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > > const >
PUBLIC	??$xr_alloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@YAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@I@Z ; xr_alloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> >
PUBLIC	??$_Freenode@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@SAXAAV?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@PAU01@@Z ; std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *>::_Freenode<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >
PUBLIC	??$xr_alloc@UModelDef@CModelPool@@@@YAPAUModelDef@CModelPool@@I@Z ; xr_alloc<CModelPool::ModelDef>
PUBLIC	??$_Destroy_in_place@PAUModelDef@CModelPool@@@std@@YAXAAPAUModelDef@CModelPool@@@Z ; std::_Destroy_in_place<CModelPool::ModelDef *>
PUBLIC	??$_Get_unwrapped@ABQAUModelDef@CModelPool@@@std@@YA?A_TABQAUModelDef@CModelPool@@@Z ; std::_Get_unwrapped<CModelPool::ModelDef * const &>
PUBLIC	??$_Uninitialized_move@PAUModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@YAPAUModelDef@CModelPool@@QAU12@0PAU12@AAV?$xalloc@UModelDef@CModelPool@@@@@Z ; std::_Uninitialized_move<CModelPool::ModelDef *,xalloc<CModelPool::ModelDef> >
PUBLIC	??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> *,std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> * const &>
PUBLIC	??$_Construct_in_place@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> *,std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> * const &>
PUBLIC	??$forward@ABUstr_pred@CModelPool@@@std@@YAABUstr_pred@CModelPool@@ABU12@@Z ; std::forward<CModelPool::str_pred const &>
PUBLIC	??$forward@ABU?$less@PAVIRender_Visual@@@std@@@std@@YAABU?$less@PAVIRender_Visual@@@0@ABU10@@Z ; std::forward<std::less<IRender_Visual *> const &>
PUBLIC	??$_Freenode0@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@SAXAAV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@PAU01@@Z ; std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *>::_Freenode0<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >
PUBLIC	??$_Freenode@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@SAXAAV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@PAU01@@Z ; std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *>::_Freenode<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >
PUBLIC	??$exchange@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@AAPAU12@@std@@YAPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@0@AAPAU10@0@Z ; std::exchange<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> *,std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> * &>
PUBLIC	??$_Lower_bound_duplicate@Vshared_str@@@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@IBE_NQAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@1@ABVshared_str@@@Z ; std::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >::_Lower_bound_duplicate<shared_str>
PUBLIC	??$_Find_lower_bound@Vshared_str@@@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@1@ABVshared_str@@@Z ; std::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >::_Find_lower_bound<shared_str>
PUBLIC	??$_Freenode0@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@SAXAAV?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@PAU01@@Z ; std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *>::_Freenode0<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >
PUBLIC	??$_Erase_tree@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@QAEXAAV?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >::_Erase_tree<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >
PUBLIC	??$_Lower_bound_duplicate@PAVIRender_Visual@@@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@IBE_NQAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@1@ABQAVIRender_Visual@@@Z ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::_Lower_bound_duplicate<IRender_Visual *>
PUBLIC	??$_Find_lower_bound@PAVIRender_Visual@@@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@1@ABQAVIRender_Visual@@@Z ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::_Find_lower_bound<IRender_Visual *>
PUBLIC	??$move@AAUModelDef@CModelPool@@@std@@YA$$QAUModelDef@CModelPool@@AAU12@@Z ; std::move<CModelPool::ModelDef &>
PUBLIC	??$emplace@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@?$multimap@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@1@$$QAU?$pair@Vshared_str@@PAVIRender_Visual@@@1@@Z ; std::multimap<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> > >::emplace<std::pair<shared_str,IRender_Visual *> >
PUBLIC	??$forward@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@std@@YA$$QAU?$pair@Vshared_str@@PAVIRender_Visual@@@0@AAU10@@Z ; std::forward<std::pair<shared_str,IRender_Visual *> >
PUBLIC	??$?0AAVshared_str@@AAPAVIRender_Visual@@$0A@@?$pair@Vshared_str@@PAVIRender_Visual@@@std@@QAE@AAVshared_str@@AAPAVIRender_Visual@@@Z ; std::pair<shared_str,IRender_Visual *>::pair<shared_str,IRender_Visual *><shared_str &,IRender_Visual * &,0>
PUBLIC	??$emplace@U?$pair@PAVIRender_Visual@@PAD@std@@@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@PAVIRender_Visual@@PAD@1@@Z ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::emplace<std::pair<IRender_Visual *,char *> >
PUBLIC	??$forward@U?$pair@PAVIRender_Visual@@PAD@std@@@std@@YA$$QAU?$pair@PAVIRender_Visual@@PAD@0@AAU10@@Z ; std::forward<std::pair<IRender_Visual *,char *> >
PUBLIC	??$?0AAPAVIRender_Visual@@AAPAD$0A@@?$pair@PAVIRender_Visual@@PAD@std@@QAE@AAPAVIRender_Visual@@AAPAD@Z ; std::pair<IRender_Visual *,char *>::pair<IRender_Visual *,char *><IRender_Visual * &,char * &,0>
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >,1>::_Compressed_pair<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >,1><>
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >,1>::_Compressed_pair<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >,1><>
PUBLIC	?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >::_Max
PUBLIC	?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >::_Lrotate
PUBLIC	?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >::_Rrotate
PUBLIC	?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >::_Max
PUBLIC	?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >::_Lrotate
PUBLIC	?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >::_Rrotate
PUBLIC	?max_size@?$xalloc@UModelDef@CModelPool@@@@QBEIXZ ; xalloc<CModelPool::ModelDef>::max_size
PUBLIC	?_Get_first@?$_Compressed_pair@V?$xalloc@UModelDef@CModelPool@@@@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@$00@std@@QBEABV?$xalloc@UModelDef@CModelPool@@@@XZ ; std::_Compressed_pair<xalloc<CModelPool::ModelDef>,std::_Vector_val<std::_Simple_types<CModelPool::ModelDef> >,1>::_Get_first
PUBLIC	?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >::_Extract
PUBLIC	?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >::_Extract
PUBLIC	?_Orphan_ptr@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >::_Orphan_ptr
PUBLIC	?max_size@?$_Normal_allocator_traits@V?$xalloc@UModelDef@CModelPool@@@@@std@@SAIABV?$xalloc@UModelDef@CModelPool@@@@@Z ; std::_Normal_allocator_traits<xalloc<CModelPool::ModelDef> >::max_size
PUBLIC	?capacity@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@QBEIXZ ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::capacity
PUBLIC	?_Umove_if_noexcept1@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@AAEXPAUModelDef@CModelPool@@00U?$integral_constant@_N$0A@@2@@Z ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::_Umove_if_noexcept1
PUBLIC	?_Getal@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@ABEABV?$xalloc@UModelDef@CModelPool@@@@XZ ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::_Getal
PUBLIC	??0ModelDef@CModelPool@@QAE@ABU01@@Z		; CModelPool::ModelDef::ModelDef
PUBLIC	??0?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@1@@Z ; std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > > >::_Tree_unchecked_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > > >
PUBLIC	??0?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@1@@Z ; std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > > >::_Tree_unchecked_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > > >
PUBLIC	??_Gmotions_container@@QAEPAXI@Z		; motions_container::`scalar deleting destructor'
PUBLIC	??0?$xalloc@PAVIRender_Visual@@@@QAE@XZ		; xalloc<IRender_Visual *>::xalloc<IRender_Visual *>
PUBLIC	?allocate@?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@QBEPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@IPBX@Z ; xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> >::allocate
PUBLIC	?_Erase_unchecked@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@AAEPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >::_Erase_unchecked
PUBLIC	?_Get_scary@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@IBEPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >::_Get_scary
PUBLIC	?allocate@?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@QBEPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@IPBX@Z ; xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> >::allocate
PUBLIC	?_Erase_unchecked@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@AAEPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::_Erase_unchecked
PUBLIC	??0?$xalloc@UModelDef@CModelPool@@@@QAE@XZ	; xalloc<CModelPool::ModelDef>::xalloc<CModelPool::ModelDef>
PUBLIC	?allocate@?$xalloc@UModelDef@CModelPool@@@@QBEPAUModelDef@CModelPool@@IPBX@Z ; xalloc<CModelPool::ModelDef>::allocate
PUBLIC	?construct@?$xalloc@UModelDef@CModelPool@@@@QAEXPAUModelDef@CModelPool@@ABU23@@Z ; xalloc<CModelPool::ModelDef>::construct
PUBLIC	?destroy@?$xalloc@UModelDef@CModelPool@@@@QAEXPAUModelDef@CModelPool@@@Z ; xalloc<CModelPool::ModelDef>::destroy
PUBLIC	?max_size@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@QBEIXZ ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::max_size
PUBLIC	?_Umove@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@AAEPAUModelDef@CModelPool@@PAU34@00@Z ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::_Umove
PUBLIC	?_Umove_if_noexcept@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@AAEXPAUModelDef@CModelPool@@00@Z ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::_Umove_if_noexcept
PUBLIC	?_Calculate_growth@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@ABEII@Z ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::_Calculate_growth
PUBLIC	?_Change_array@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@AAEXQAUModelDef@CModelPool@@II@Z ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::_Change_array
PUBLIC	?_Xlength@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@CAXXZ ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::_Xlength
PUBLIC	??0?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<CModelPool::ModelDef> >::_Vector_val<std::_Simple_types<CModelPool::ModelDef> >
PUBLIC	?_Unwrapped@?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@std@@QBE?AV?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@2@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > > >::_Unwrapped
PUBLIC	?_Unwrapped@?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@QBE?AV?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@2@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > > >::_Unwrapped
PUBLIC	??R?$xr_special_free@$00VIRender_Visual@@@@QAEXAAPAVIRender_Visual@@@Z ; xr_special_free<1,IRender_Visual>::operator()
PUBLIC	??R?$xr_special_free@$0A@Vmotions_container@@@@QAEXAAPAVmotions_container@@@Z ; xr_special_free<0,motions_container>::operator()
PUBLIC	??1FLOD@@UAE@XZ					; FLOD::~FLOD
PUBLIC	??_GFLOD@@UAEPAXI@Z				; FLOD::`scalar deleting destructor'
PUBLIC	??4ModelDef@CModelPool@@QAEAAU01@$$QAU01@@Z	; CModelPool::ModelDef::operator=
PUBLIC	??0FLOD@@QAE@XZ					; FLOD::FLOD
PUBLIC	??_GCKinematics@@UAEPAXI@Z			; CKinematics::`scalar deleting destructor'
PUBLIC	??_GCKinematicsAnimated@@UAEPAXI@Z		; CKinematicsAnimated::`scalar deleting destructor'
PUBLIC	??_GFHierrarhyVisual@@UAEPAXI@Z			; FHierrarhyVisual::`scalar deleting destructor'
PUBLIC	??$_Buyheadnode@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@SAPAU01@AAV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@Z ; std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *>::_Buyheadnode<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >
PUBLIC	??$_Buyheadnode@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@SAPAU01@AAV?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@Z ; std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *>::_Buyheadnode<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >
PUBLIC	??$addressof@$$CBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@std@@YAPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@0@ABV10@@Z ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > > const >
PUBLIC	??$xr_free@UModelDef@CModelPool@@@@YAXAAPAUModelDef@CModelPool@@@Z ; xr_free<CModelPool::ModelDef>
PUBLIC	??$_Destroy_range@V?$xalloc@UModelDef@CModelPool@@@@@std@@YAXPAUModelDef@CModelPool@@QAU12@AAV?$xalloc@UModelDef@CModelPool@@@@@Z ; std::_Destroy_range<xalloc<CModelPool::ModelDef> >
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$xalloc@PAVIRender_Visual@@@@V?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@std@@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<xalloc<IRender_Visual *>,std::_Vector_val<std::_Simple_types<IRender_Visual *> >,1>::_Compressed_pair<xalloc<IRender_Visual *>,std::_Vector_val<std::_Simple_types<IRender_Visual *> >,1><>
PUBLIC	??$addressof@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@YAPAU?$pair@$$CBVshared_str@@PAVIRender_Visual@@@0@AAU10@@Z ; std::addressof<std::pair<shared_str const ,IRender_Visual *> >
PUBLIC	??$?0ABUstr_pred@CModelPool@@U_Zero_then_variadic_args_t@std@@@?$_Compressed_pair@Ustr_pred@CModelPool@@V?$_Compressed_pair@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@$00@std@@$00@std@@QAE@U_One_then_variadic_args_t@1@ABUstr_pred@CModelPool@@$$QAU_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<CModelPool::str_pred,std::_Compressed_pair<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >,1>,1>::_Compressed_pair<CModelPool::str_pred,std::_Compressed_pair<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >,1>,1><CModelPool::str_pred const &,std::_Zero_then_variadic_args_t>
PUBLIC	??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@0@AAV10@@Z ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > > >
PUBLIC	??$addressof@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@YAPAU?$pair@QAVIRender_Visual@@Vshared_str@@@0@AAU10@@Z ; std::addressof<std::pair<IRender_Visual * const,shared_str> >
PUBLIC	??$?0ABU?$less@PAVIRender_Visual@@@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@PAVIRender_Visual@@@std@@V?$_Compressed_pair@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@PAVIRender_Visual@@@1@$$QAU_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::less<IRender_Visual *>,std::_Compressed_pair<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >,1>,1>::_Compressed_pair<std::less<IRender_Visual *>,std::_Compressed_pair<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >,1>,1><std::less<IRender_Visual *> const &,std::_Zero_then_variadic_args_t>
PUBLIC	??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@0@AAV10@@Z ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > > >
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$xalloc@UModelDef@CModelPool@@@@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<xalloc<CModelPool::ModelDef>,std::_Vector_val<std::_Simple_types<CModelPool::ModelDef> >,1>::_Compressed_pair<xalloc<CModelPool::ModelDef>,std::_Vector_val<std::_Simple_types<CModelPool::ModelDef> >,1><>
PUBLIC	??$addressof@V?$_Vector_val@U?$_Simple_types@UItem@CInifile@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@UItem@CInifile@@@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<CInifile::Item> > >
PUBLIC	??$_Erase_head@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@QAEXAAV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >::_Erase_head<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >
PUBLIC	??$_Erase_tree@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@QAEXAAV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >::_Erase_tree<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >
PUBLIC	??$_Find@Vshared_str@@@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@ABEPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@1@ABVshared_str@@@Z ; std::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >::_Find<shared_str>
PUBLIC	??$_Erase_head@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@QAEXAAV?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >::_Erase_head<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >
PUBLIC	??$_Find@PAVIRender_Visual@@@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@ABEPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@1@ABQAVIRender_Visual@@@Z ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::_Find<IRender_Visual *>
PUBLIC	??$_Emplace_reallocate@ABUModelDef@CModelPool@@@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAEPAUModelDef@CModelPool@@QAU23@ABU23@@Z ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::_Emplace_reallocate<CModelPool::ModelDef const &>
PUBLIC	??$construct@UModelDef@CModelPool@@ABU12@@?$_Normal_allocator_traits@V?$xalloc@UModelDef@CModelPool@@@@@std@@SAXAAV?$xalloc@UModelDef@CModelPool@@@@PAUModelDef@CModelPool@@ABU34@@Z ; std::_Normal_allocator_traits<xalloc<CModelPool::ModelDef> >::construct<CModelPool::ModelDef,CModelPool::ModelDef const &>
PUBLIC	??$forward@ABUModelDef@CModelPool@@@std@@YAABUModelDef@CModelPool@@ABU12@@Z ; std::forward<CModelPool::ModelDef const &>
PUBLIC	??$destroy@UModelDef@CModelPool@@@?$_Normal_allocator_traits@V?$xalloc@UModelDef@CModelPool@@@@@std@@SAXAAV?$xalloc@UModelDef@CModelPool@@@@PAUModelDef@CModelPool@@@Z ; std::_Normal_allocator_traits<xalloc<CModelPool::ModelDef> >::destroy<CModelPool::ModelDef>
PUBLIC	??$_Unfancy@UModelDef@CModelPool@@@std@@YAPAUModelDef@CModelPool@@PAU12@@Z ; std::_Unfancy<CModelPool::ModelDef>
PUBLIC	??$_Move_unchecked@PAUModelDef@CModelPool@@PAU12@@std@@YAPAUModelDef@CModelPool@@PAU12@00@Z ; std::_Move_unchecked<CModelPool::ModelDef *,CModelPool::ModelDef *>
PUBLIC	??$addressof@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<CModelPool::ModelDef> > >
PUBLIC	??$erase@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@std@@$0A@@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@1@V21@@Z ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::erase<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > > >,0>
PUBLIC	??$insert@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@$0A@@?$multimap@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@1@$$QAU?$pair@Vshared_str@@PAVIRender_Visual@@@1@@Z ; std::multimap<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> > >::insert<std::pair<shared_str,IRender_Visual *>,0>
PUBLIC	??$mk_pair@Vshared_str@@PAVIRender_Visual@@@@YA?AU?$pair@Vshared_str@@PAVIRender_Visual@@@std@@Vshared_str@@PAVIRender_Visual@@@Z ; mk_pair<shared_str,IRender_Visual *>
PUBLIC	??$insert@U?$pair@PAVIRender_Visual@@PAD@std@@$0A@@?$map@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@PAVIRender_Visual@@PAD@1@@Z ; std::map<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> > >::insert<std::pair<IRender_Visual *,char *>,0>
PUBLIC	??$mk_pair@PAVIRender_Visual@@PAD@@YA?AU?$pair@PAVIRender_Visual@@PAD@std@@PAVIRender_Visual@@PAD@Z ; mk_pair<IRender_Visual *,char *>
PUBLIC	??$erase@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@$0A@@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@1@V21@@Z ; std::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >::erase<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > > >,0>
PUBLIC	??$xr_delete@Vmotions_container@@@@YAXAAPAVmotions_container@@@Z ; xr_delete<motions_container>
PUBLIC	??$xr_new@Vmotions_container@@@@YAPAVmotions_container@@XZ ; xr_new<motions_container>
PUBLIC	??$xr_delete@VIRender_Visual@@@@YAXAAPAVIRender_Visual@@@Z ; xr_delete<IRender_Visual>
PUBLIC	??$xr_new@VFTreeVisual_PM@@@@YAPAVFTreeVisual_PM@@XZ ; xr_new<FTreeVisual_PM>
PUBLIC	??$xr_new@VFTreeVisual_ST@@@@YAPAVFTreeVisual_ST@@XZ ; xr_new<FTreeVisual_ST>
PUBLIC	??$xr_new@VFLOD@@@@YAPAVFLOD@@XZ		; xr_new<FLOD>
PUBLIC	??$xr_new@VCParticleGroup@PS@@@@YAPAVCParticleGroup@PS@@XZ ; xr_new<PS::CParticleGroup>
PUBLIC	??$xr_new@VCParticleEffect@PS@@@@YAPAVCParticleEffect@PS@@XZ ; xr_new<PS::CParticleEffect>
PUBLIC	??$xr_new@VCSkeletonX_ST@@@@YAPAVCSkeletonX_ST@@XZ ; xr_new<CSkeletonX_ST>
PUBLIC	??$xr_new@VCSkeletonX_PM@@@@YAPAVCSkeletonX_PM@@XZ ; xr_new<CSkeletonX_PM>
PUBLIC	??$xr_new@VCKinematics@@@@YAPAVCKinematics@@XZ	; xr_new<CKinematics>
PUBLIC	??$xr_new@VCKinematicsAnimated@@@@YAPAVCKinematicsAnimated@@XZ ; xr_new<CKinematicsAnimated>
PUBLIC	??$xr_new@VFProgressive@@@@YAPAVFProgressive@@XZ ; xr_new<FProgressive>
PUBLIC	??$xr_new@VFHierrarhyVisual@@@@YAPAVFHierrarhyVisual@@XZ ; xr_new<FHierrarhyVisual>
PUBLIC	??$xr_new@VFvisual@@@@YAPAVFvisual@@XZ		; xr_new<Fvisual>
PUBLIC	?_Verify_offset@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@std@@@std@@QBEXH@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<IRender_Visual *> > >::_Verify_offset
PUBLIC	??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<IRender_Visual *> > >::operator+=
PUBLIC	?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >::_Min
PUBLIC	?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >::_Min
PUBLIC	?clear@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@QAEXXZ ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::clear
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@std@@@std@@QBEABQAVIRender_Visual@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<IRender_Visual *> > >::operator*
PUBLIC	??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<IRender_Visual *> > >::operator+=
PUBLIC	?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >::_Alloc_sentinel_and_proxy
PUBLIC	?_Get_first@?$_Compressed_pair@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@$00@std@@QAEAAV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@XZ ; std::_Compressed_pair<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >,1>::_Get_first
PUBLIC	?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::_Alloc_sentinel_and_proxy
PUBLIC	?_Get_scary@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@IBEPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::_Get_scary
PUBLIC	?_Get_first@?$_Compressed_pair@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@$00@std@@QAEAAV?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@XZ ; std::_Compressed_pair<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >,1>::_Get_first
PUBLIC	?deallocate@?$xalloc@UModelDef@CModelPool@@@@QBEXPAUModelDef@CModelPool@@I@Z ; xalloc<CModelPool::ModelDef>::deallocate
PUBLIC	?clear@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAEXXZ ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::clear
PUBLIC	?_Destroy@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@AAEXPAUModelDef@CModelPool@@0@Z ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::_Destroy
PUBLIC	?_Get_first@?$_Compressed_pair@V?$xalloc@UModelDef@CModelPool@@@@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@$00@std@@QAEAAV?$xalloc@UModelDef@CModelPool@@@@XZ ; std::_Compressed_pair<xalloc<CModelPool::ModelDef>,std::_Vector_val<std::_Simple_types<CModelPool::ModelDef> >,1>::_Get_first
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CModelPool::ModelDef> > >::_Compat
PUBLIC	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >,std::_Iterator_base0>::operator++
PUBLIC	??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@std@@QBEABU?$pair@QAVIRender_Visual@@Vshared_str@@@1@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > > >::operator*
PUBLIC	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >,std::_Iterator_base0>::operator++
PUBLIC	??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBVshared_str@@PAVIRender_Visual@@@1@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > > >::operator*
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UItem@CInifile@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CInifile::Item> > >::_Compat
PUBLIC	??0?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@QAE@XZ ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::vector<IRender_Visual *,xalloc<IRender_Visual *> >
PUBLIC	?_Tidy@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@AAEXXZ ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::_Tidy
PUBLIC	?clear_and_free@?$xr_vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@@QAEXXZ ; xr_vector<IRender_Visual *,xalloc<IRender_Visual *> >::clear_and_free
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@std@@@std@@QBEAAPAVIRender_Visual@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<IRender_Visual *> > >::operator*
PUBLIC	??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<IRender_Visual *> > >::operator+
PUBLIC	?pointer_to@?$pointer_traits@PAU?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@SAPAU?$pair@$$CBVshared_str@@PAVIRender_Visual@@@2@AAU32@@Z ; std::pointer_traits<std::pair<shared_str const ,IRender_Visual *> *>::pointer_to
PUBLIC	??0?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@QAE@ABUstr_pred@CModelPool@@@Z ; std::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >
PUBLIC	?_Getal@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@IAEAAV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@XZ ; std::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >::_Getal
PUBLIC	?_Get_scary@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@IAEPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >::_Get_scary
PUBLIC	?_Orphan_ptr@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >::_Orphan_ptr
PUBLIC	?pointer_to@?$pointer_traits@PAU?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@SAPAU?$pair@QAVIRender_Visual@@Vshared_str@@@2@AAU32@@Z ; std::pointer_traits<std::pair<IRender_Visual * const,shared_str> *>::pointer_to
PUBLIC	??0?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@QAE@ABU?$less@PAVIRender_Visual@@@1@@Z ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >
PUBLIC	?size@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::size
PUBLIC	?_Getal@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@IAEAAV?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@XZ ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::_Getal
PUBLIC	?_Get_scary@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@IAEPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::_Get_scary
PUBLIC	??0?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAE@XZ ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >
PUBLIC	?_Tidy@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@AAEXXZ ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::_Tidy
PUBLIC	?_Orphan_range@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@ABEXPAUModelDef@CModelPool@@0@Z ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::_Orphan_range
PUBLIC	?_Getal@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@AAEAAV?$xalloc@UModelDef@CModelPool@@@@XZ ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::_Getal
PUBLIC	?clear_and_free@?$xr_vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@@QAEXXZ ; xr_vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::clear_and_free
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@@std@@QAE@PAUModelDef@CModelPool@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CModelPool::ModelDef> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CModelPool::ModelDef> > >
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CModelPool::ModelDef> > >::operator++
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CModelPool::ModelDef> > >::operator==
PUBLIC	??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@1@@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >,std::_Iterator_base0>
PUBLIC	??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > > >::operator==
PUBLIC	??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@std@@QBEAAU?$pair@QAVIRender_Visual@@Vshared_str@@@1@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > > >::operator*
PUBLIC	??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@1@@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >,std::_Iterator_base0>
PUBLIC	??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > > >::operator++
PUBLIC	??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > > >::operator==
PUBLIC	??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@QBEAAU?$pair@$$CBVshared_str@@PAVIRender_Visual@@@1@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > > >::operator*
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UItem@CInifile@@@std@@@std@@@std@@QAE@PAUItem@CInifile@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CInifile::Item> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CInifile::Item> > >
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UItem@CInifile@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CInifile::Item> > >::operator++
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UItem@CInifile@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CInifile::Item> > >::operator==
PUBLIC	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > > >
PUBLIC	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > > >
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UItem@CInifile@@@std@@@std@@@std@@QAE@PAUItem@CInifile@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CInifile::Item> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<CInifile::Item> > >
PUBLIC	??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@1@@Z ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > > >
PUBLIC	??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@1@@Z ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > > >
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@@std@@QAE@PAUModelDef@CModelPool@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CModelPool::ModelDef> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<CModelPool::ModelDef> > >
PUBLIC	?begin@?$vector@UItem@CInifile@@V?$xalloc@UItem@CInifile@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UItem@CInifile@@@std@@@std@@@2@XZ ; std::vector<CInifile::Item,xalloc<CInifile::Item> >::begin
PUBLIC	?end@?$vector@UItem@CInifile@@V?$xalloc@UItem@CInifile@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UItem@CInifile@@@std@@@std@@@2@XZ ; std::vector<CInifile::Item,xalloc<CInifile::Item> >::end
PUBLIC	??1?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@QAE@XZ ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::~vector<IRender_Visual *,xalloc<IRender_Visual *> >
PUBLIC	??0?$xr_vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@@QAE@XZ ; xr_vector<IRender_Visual *,xalloc<IRender_Visual *> >::xr_vector<IRender_Visual *,xalloc<IRender_Visual *> >
PUBLIC	?clear@?$xr_vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@@QAEXXZ ; xr_vector<IRender_Visual *,xalloc<IRender_Visual *> >::clear
PUBLIC	??A?$xr_vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@@QAEAAPAVIRender_Visual@@I@Z ; xr_vector<IRender_Visual *,xalloc<IRender_Visual *> >::operator[]
PUBLIC	??1?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >::~_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >
PUBLIC	?begin@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >::begin
PUBLIC	?end@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >::end
PUBLIC	?clear@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >::clear
PUBLIC	?find@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@2@ABVshared_str@@@Z ; std::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >::find
PUBLIC	??0?$multimap@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@@std@@QAE@XZ ; std::multimap<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> > >::multimap<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> > >
PUBLIC	??1?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::~_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >
PUBLIC	?begin@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::begin
PUBLIC	?end@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::end
PUBLIC	?empty@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@QBE_NXZ ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::empty
PUBLIC	?find@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@2@ABQAVIRender_Visual@@@Z ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::find
PUBLIC	??0?$map@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@@std@@QAE@XZ ; std::map<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> > >::map<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> > >
PUBLIC	??1?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAE@XZ ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::~vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >
PUBLIC	??$_Emplace_back_with_unused_capacity@ABUModelDef@CModelPool@@@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@AAE?A_TABUModelDef@CModelPool@@@Z ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::_Emplace_back_with_unused_capacity<CModelPool::ModelDef const &>
PUBLIC	??$emplace_back@ABUModelDef@CModelPool@@@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAE?A_TABUModelDef@CModelPool@@@Z ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::emplace_back<CModelPool::ModelDef const &>
PUBLIC	?push_back@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAEXABUModelDef@CModelPool@@@Z ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::push_back
PUBLIC	?erase@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@@2@@Z ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::erase
PUBLIC	?begin@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@@2@XZ ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::begin
PUBLIC	?end@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@@2@XZ ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::end
PUBLIC	??0?$xr_vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@@QAE@XZ ; xr_vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::xr_vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >
PUBLIC	?clear@?$xr_vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@@QAEXXZ ; xr_vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::clear
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CModelPool::ModelDef> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CModelPool::ModelDef> > >
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CModelPool::ModelDef> > >::operator!=
PUBLIC	??C?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@@std@@QBEPAUModelDef@CModelPool@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CModelPool::ModelDef> > >::operator->
PUBLIC	??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CModelPool::ModelDef> > >::operator++
PUBLIC	??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CModelPool::ModelDef> > >::operator++
PUBLIC	??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > > >::operator!=
PUBLIC	??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@std@@QBEPAU?$pair@QAVIRender_Visual@@Vshared_str@@@1@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > > >::operator->
PUBLIC	??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > > >::operator!=
PUBLIC	??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBVshared_str@@PAVIRender_Visual@@@1@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > > >::operator->
PUBLIC	??E?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > > >::operator++
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UItem@CInifile@@@std@@@std@@@std@@QBEABUItem@CInifile@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CInifile::Item> > >::operator*
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UItem@CInifile@@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CInifile::Item> > >::operator++
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UItem@CInifile@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CInifile::Item> > >::operator!=
PUBLIC	?CreatePG@CModelPool@@QAEPAVIRender_Visual@@PAVCPGDef@PS@@@Z ; CModelPool::CreatePG
PUBLIC	?CreatePE@CModelPool@@QAEPAVIRender_Visual@@PAVCPEDef@PS@@@Z ; CModelPool::CreatePE
PUBLIC	?ClearPool@CModelPool@@QAEXH@Z			; CModelPool::ClearPool
PUBLIC	?Prefetch@CModelPool@@QAEXXZ			; CModelPool::Prefetch
PUBLIC	?Discard@CModelPool@@QAEXAAPAVIRender_Visual@@H@Z ; CModelPool::Discard
PUBLIC	?DeleteQueue@CModelPool@@QAEXXZ			; CModelPool::DeleteQueue
PUBLIC	?Delete@CModelPool@@QAEXAAPAVIRender_Visual@@H@Z ; CModelPool::Delete
PUBLIC	??1?$pair@Vshared_str@@PAVIRender_Visual@@@std@@QAE@XZ ; std::pair<shared_str,IRender_Visual *>::~pair<shared_str,IRender_Visual *>
PUBLIC	?DeleteInternal@CModelPool@@QAEXAAPAVIRender_Visual@@H@Z ; CModelPool::DeleteInternal
PUBLIC	?CreateChild@CModelPool@@QAEPAVIRender_Visual@@PBDPAVIReader@@@Z ; CModelPool::CreateChild
PUBLIC	?Create@CModelPool@@QAEPAVIRender_Visual@@PBDPAVIReader@@@Z ; CModelPool::Create
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CModelPool::ModelDef> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<CModelPool::ModelDef> > >
PUBLIC	?Instance_Find@CModelPool@@QAEPAVIRender_Visual@@PBD@Z ; CModelPool::Instance_Find
PUBLIC	??1CModelPool@@UAE@XZ				; CModelPool::~CModelPool
PUBLIC	??1?$multimap@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@@std@@QAE@XZ ; std::multimap<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> > >::~multimap<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> > >
PUBLIC	??1?$map@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@@std@@QAE@XZ ; std::map<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> > >::~map<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> > >
PUBLIC	??1?$xr_multimap@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@@@QAE@XZ ; xr_multimap<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> > >::~xr_multimap<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> > >
PUBLIC	??0?$xr_multimap@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@@@QAE@XZ ; xr_multimap<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> > >::xr_multimap<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> > >
PUBLIC	??1?$xr_map@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@@@QAE@XZ ; xr_map<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> > >::~xr_map<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> > >
PUBLIC	??0?$xr_map@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@@@QAE@XZ ; xr_map<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> > >::xr_map<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> > >
PUBLIC	??1?$xr_vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@@QAE@XZ ; xr_vector<IRender_Visual *,xalloc<IRender_Visual *> >::~xr_vector<IRender_Visual *,xalloc<IRender_Visual *> >
PUBLIC	??1?$xr_vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@@QAE@XZ ; xr_vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::~xr_vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >
PUBLIC	??_GCModelPool@@UAEPAXI@Z			; CModelPool::`scalar deleting destructor'
PUBLIC	??0CModelPool@@QAE@XZ				; CModelPool::CModelPool
PUBLIC	?Destroy@CModelPool@@AAEXXZ			; CModelPool::Destroy
PUBLIC	??1ModelDef@CModelPool@@QAE@XZ			; CModelPool::ModelDef::~ModelDef
PUBLIC	?Instance_Register@CModelPool@@QAEXPBDPAVIRender_Visual@@@Z ; CModelPool::Instance_Register
PUBLIC	?Instance_Load@CModelPool@@QAEPAVIRender_Visual@@PBDPAVIReader@@H@Z ; CModelPool::Instance_Load
PUBLIC	?Instance_Load@CModelPool@@QAEPAVIRender_Visual@@PBDH@Z ; CModelPool::Instance_Load
PUBLIC	?Instance_Duplicate@CModelPool@@QAEPAVIRender_Visual@@PAV2@@Z ; CModelPool::Instance_Duplicate
PUBLIC	?Instance_Create@CModelPool@@QAEPAVIRender_Visual@@I@Z ; CModelPool::Instance_Create
PUBLIC	??_GCSkeletonX_PM@@UAEPAXI@Z			; CSkeletonX_PM::`scalar deleting destructor'
PUBLIC	??1CSkeletonX_PM@@UAE@XZ			; CSkeletonX_PM::~CSkeletonX_PM
PUBLIC	??0CSkeletonX_PM@@QAE@XZ			; CSkeletonX_PM::CSkeletonX_PM
PUBLIC	??1CSkeletonX_ext@@QAE@XZ			; CSkeletonX_ext::~CSkeletonX_ext
PUBLIC	??0CSkeletonX_ext@@QAE@XZ			; CSkeletonX_ext::CSkeletonX_ext
PUBLIC	??_GCSkeletonX_ST@@UAEPAXI@Z			; CSkeletonX_ST::`scalar deleting destructor'
PUBLIC	??1CSkeletonX_ST@@UAE@XZ			; CSkeletonX_ST::~CSkeletonX_ST
PUBLIC	??0CSkeletonX_ST@@QAE@XZ			; CSkeletonX_ST::CSkeletonX_ST
EXTRN	??_ECKinematics@@UAEPAXI@Z:PROC			; CKinematics::`vector deleting destructor'
EXTRN	??_ECKinematicsAnimated@@UAEPAXI@Z:PROC		; CKinematicsAnimated::`vector deleting destructor'
EXTRN	??_ECModelPool@@UAEPAXI@Z:PROC			; CModelPool::`vector deleting destructor'
EXTRN	??_EFHierrarhyVisual@@UAEPAXI@Z:PROC		; FHierrarhyVisual::`vector deleting destructor'
EXTRN	??_ECSkeletonX_ST@@UAEPAXI@Z:PROC		; CSkeletonX_ST::`vector deleting destructor'
EXTRN	??_ECSkeletonX_PM@@UAEPAXI@Z:PROC		; CSkeletonX_PM::`vector deleting destructor'
EXTRN	??_EFLOD@@UAEPAXI@Z:PROC			; FLOD::`vector deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Emplace_reallocate@ABUModelDef@CModelPool@@@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAEPAUModelDef@CModelPool@@QAU23@ABU23@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@ABUModelDef@CModelPool@@@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAEPAUModelDef@CModelPool@@QAU23@ABU23@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Emplace_reallocate@ABUModelDef@CModelPool@@@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAEPAUModelDef@CModelPool@@QAU23@ABU23@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??$_Emplace_reallocate@ABUModelDef@CModelPool@@@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAEPAUModelDef@CModelPool@@QAU23@ABU23@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Emplace_reallocate@ABUModelDef@CModelPool@@@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAEPAUModelDef@CModelPool@@QAU23@ABU23@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Emplace_reallocate@ABUModelDef@CModelPool@@@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAEPAUModelDef@CModelPool@@QAU23@ABU23@@Z$2
__catchsym$??$_Emplace_reallocate@ABUModelDef@CModelPool@@@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAEPAUModelDef@CModelPool@@QAU23@ABU23@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Emplace_reallocate@ABUModelDef@CModelPool@@@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAEPAUModelDef@CModelPool@@QAU23@ABU23@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Emplace_reallocate@ABQAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@QAEPAPAVIRender_Visual@@QAPAV2@ABQAV2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@ABQAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@QAEPAPAVIRender_Visual@@QAPAV2@ABQAV2@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Emplace_reallocate@ABQAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@QAEPAPAVIRender_Visual@@QAPAV2@ABQAV2@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??$_Emplace_reallocate@ABQAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@QAEPAPAVIRender_Visual@@QAPAV2@ABQAV2@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Emplace_reallocate@ABQAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@QAEPAPAVIRender_Visual@@QAPAV2@ABQAV2@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Emplace_reallocate@ABQAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@QAEPAPAVIRender_Visual@@QAPAV2@ABQAV2@@Z$2
__catchsym$??$_Emplace_reallocate@ABQAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@QAEPAPAVIRender_Visual@@QAPAV2@ABQAV2@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Emplace_reallocate@ABQAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@QAEPAPAVIRender_Visual@@QAPAV2@ABQAV2@@Z$0
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\fskinned.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\fskinned.h
;	COMDAT ??0CSkeletonX_ST@@QAE@XZ
_TEXT	SEGMENT
??0CSkeletonX_ST@@QAE@XZ PROC				; CSkeletonX_ST::CSkeletonX_ST, COMDAT
; _this$ = ecx

; 39   : 							CSkeletonX_ST	()	{}

	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp

; 19   : Fvisual::Fvisual()  : IRender_Visual()

	call	DWORD PTR __imp_??0IRender_Visual@@QAE@XZ

; 20   : {

	lea	ecx, DWORD PTR [ebx+68]
	call	DWORD PTR __imp_??0IRender_Mesh@@QAE@XZ
	lea	ecx, DWORD PTR [ebx+108]
	mov	DWORD PTR [ebx], OFFSET ??_7Fvisual@@6BIRender_Visual@@@
	mov	DWORD PTR [ebx+68], OFFSET ??_7Fvisual@@6BIRender_Mesh@@@

; 21   : 	m_fast	=	0;

	mov	DWORD PTR [ebx+104], 0
	call	DWORD PTR __imp_??0CSkeletonX@@QAE@XZ
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\fskinned.h

; 39   : 							CSkeletonX_ST	()	{}

	pop	edi
	pop	esi
	mov	DWORD PTR [ebx], OFFSET ??_7CSkeletonX_ST@@6BIRender_Visual@@@
	mov	eax, ebx
	mov	DWORD PTR [ebx+68], OFFSET ??_7CSkeletonX_ST@@6BIRender_Mesh@@@
	mov	DWORD PTR [ebx+108], OFFSET ??_7CSkeletonX_ST@@6B@
	pop	ebx
	ret	0
??0CSkeletonX_ST@@QAE@XZ ENDP				; CSkeletonX_ST::CSkeletonX_ST
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\fskinned.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\fskinned.h
;	COMDAT ??1CSkeletonX_ST@@UAE@XZ
_TEXT	SEGMENT
??1CSkeletonX_ST@@UAE@XZ PROC				; CSkeletonX_ST::~CSkeletonX_ST, COMDAT
; _this$ = ecx

; 40   : 	virtual					~CSkeletonX_ST	()	{}

	push	ebx
	push	edi
	mov	edi, ecx
	lea	ecx, DWORD PTR [edi+108]
	mov	DWORD PTR [ecx], OFFSET ??_7CSkeletonX_ST@@6B@
	mov	DWORD PTR [edi], OFFSET ??_7CSkeletonX_ST@@6BIRender_Visual@@@
	mov	DWORD PTR [edi+68], OFFSET ??_7CSkeletonX_ST@@6BIRender_Mesh@@@
	call	DWORD PTR __imp_??1CSkeletonX@@QAE@XZ
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp

; 25   : {

	mov	DWORD PTR [edi], OFFSET ??_7Fvisual@@6BIRender_Visual@@@
	mov	DWORD PTR [edi+68], OFFSET ??_7Fvisual@@6BIRender_Mesh@@@
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h

; 151  : 	if (ptr) 

	mov	eax, DWORD PTR [edi+104]
	test	eax, eax
	je	SHORT $LN8@CSkeletonX

; 132  : 		void*	_real_ptr	= dynamic_cast<void*>(ptr);

	push	esi
	push	eax
	call	___RTCastToVoid

; 133  : 		ptr->~T			();

	mov	ecx, DWORD PTR [edi+104]
	add	esp, 4
	mov	esi, eax
	mov	edx, DWORD PTR [ecx]
	push	0
	call	DWORD PTR [edx]

; 134  : 		Memory.mem_free	(_real_ptr);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	esi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z

; 154  : 		ptr = nullptr;

	mov	DWORD PTR [edi+104], 0
	pop	esi
$LN8@CSkeletonX:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp

; 27   : }

	lea	ecx, DWORD PTR [edi+68]
	call	DWORD PTR __imp_??1IRender_Mesh@@UAE@XZ
	mov	ecx, edi
	pop	edi
	pop	ebx
	jmp	DWORD PTR __imp_??1IRender_Visual@@UAE@XZ
??1CSkeletonX_ST@@UAE@XZ ENDP				; CSkeletonX_ST::~CSkeletonX_ST
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\fskinned.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp
;	COMDAT ??_GCSkeletonX_ST@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCSkeletonX_ST@@UAEPAXI@Z PROC			; CSkeletonX_ST::`scalar deleting destructor', COMDAT
; _this$ = ecx
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\fskinned.h

; 40   : 	virtual					~CSkeletonX_ST	()	{}

	push	ebx
	push	edi
	mov	edi, ecx
	lea	ecx, DWORD PTR [edi+108]
	mov	DWORD PTR [ecx], OFFSET ??_7CSkeletonX_ST@@6B@
	mov	DWORD PTR [edi], OFFSET ??_7CSkeletonX_ST@@6BIRender_Visual@@@
	mov	DWORD PTR [edi+68], OFFSET ??_7CSkeletonX_ST@@6BIRender_Mesh@@@
	call	DWORD PTR __imp_??1CSkeletonX@@QAE@XZ
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp

; 25   : {

	mov	DWORD PTR [edi], OFFSET ??_7Fvisual@@6BIRender_Visual@@@
	mov	DWORD PTR [edi+68], OFFSET ??_7Fvisual@@6BIRender_Mesh@@@
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h

; 151  : 	if (ptr) 

	mov	eax, DWORD PTR [edi+104]
	test	eax, eax
	je	SHORT $LN11@scalar

; 132  : 		void*	_real_ptr	= dynamic_cast<void*>(ptr);

	push	esi
	push	eax
	call	___RTCastToVoid

; 133  : 		ptr->~T			();

	mov	ecx, DWORD PTR [edi+104]
	add	esp, 4
	mov	esi, eax
	mov	edx, DWORD PTR [ecx]
	push	0
	call	DWORD PTR [edx]

; 134  : 		Memory.mem_free	(_real_ptr);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	esi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z

; 154  : 		ptr = nullptr;

	mov	DWORD PTR [edi+104], 0
	pop	esi
$LN11@scalar:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp

; 27   : }

	lea	ecx, DWORD PTR [edi+68]
	call	DWORD PTR __imp_??1IRender_Mesh@@UAE@XZ
	mov	ecx, edi
	call	DWORD PTR __imp_??1IRender_Visual@@UAE@XZ
	test	BYTE PTR ___flags$[esp+4], 1
	je	SHORT $LN15@scalar
	push	144					; 00000090H
	push	edi
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN15@scalar:
	mov	eax, edi
	pop	edi
	pop	ebx
	ret	4
??_GCSkeletonX_ST@@UAEPAXI@Z ENDP			; CSkeletonX_ST::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0CSkeletonX_ext@@QAE@XZ
_TEXT	SEGMENT
??0CSkeletonX_ext@@QAE@XZ PROC				; CSkeletonX_ext::CSkeletonX_ext, COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	call	DWORD PTR __imp_??0CSkeletonX@@QAE@XZ
	mov	DWORD PTR [esi], OFFSET ??_7CSkeletonX_ext@@6B@
	mov	eax, esi
	pop	esi
	ret	0
??0CSkeletonX_ext@@QAE@XZ ENDP				; CSkeletonX_ext::CSkeletonX_ext
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??1CSkeletonX_ext@@QAE@XZ
_TEXT	SEGMENT
??1CSkeletonX_ext@@QAE@XZ PROC				; CSkeletonX_ext::~CSkeletonX_ext, COMDAT
; _this$ = ecx
	jmp	DWORD PTR __imp_??1CSkeletonX@@QAE@XZ
??1CSkeletonX_ext@@QAE@XZ ENDP				; CSkeletonX_ext::~CSkeletonX_ext
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\fskinned.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FProgressive.cpp
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp
; File I:\Vitalya\mine\NSProjectX\xrEngine\Fmesh.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FProgressive.cpp
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\fskinned.h
;	COMDAT ??0CSkeletonX_PM@@QAE@XZ
_TEXT	SEGMENT
??0CSkeletonX_PM@@QAE@XZ PROC				; CSkeletonX_PM::CSkeletonX_PM, COMDAT
; _this$ = ecx

; 60   : 							CSkeletonX_PM	()	{}

	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp

; 19   : Fvisual::Fvisual()  : IRender_Visual()

	call	DWORD PTR __imp_??0IRender_Visual@@QAE@XZ

; 20   : {

	lea	ecx, DWORD PTR [ebx+68]
	call	DWORD PTR __imp_??0IRender_Mesh@@QAE@XZ
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FProgressive.cpp

; 16   : {

	mov	DWORD PTR [ebx], OFFSET ??_7FProgressive@@6BIRender_Visual@@@
	lea	ecx, DWORD PTR [ebx+140]
	mov	DWORD PTR [ebx+68], OFFSET ??_7FProgressive@@6BIRender_Mesh@@@
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp

; 21   : 	m_fast	=	0;

	mov	DWORD PTR [ebx+104], 0
; File I:\Vitalya\mine\NSProjectX\xrEngine\Fmesh.h

; 105  : 	FSlideWindowItem() : sw(0), count(0) {};

	mov	DWORD PTR [ebx+108], 0
	mov	DWORD PTR [ebx+112], 0
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FProgressive.cpp

; 17   : 	xSWI			= 0;

	mov	DWORD PTR [ebx+132], 0

; 18   : 	last_lod		= 0;

	mov	DWORD PTR [ebx+136], 0
	call	DWORD PTR __imp_??0CSkeletonX@@QAE@XZ
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\fskinned.h

; 60   : 							CSkeletonX_PM	()	{}

	pop	edi
	pop	esi
	mov	DWORD PTR [ebx], OFFSET ??_7CSkeletonX_PM@@6BIRender_Visual@@@
	mov	eax, ebx
	mov	DWORD PTR [ebx+68], OFFSET ??_7CSkeletonX_PM@@6BIRender_Mesh@@@
	mov	DWORD PTR [ebx+140], OFFSET ??_7CSkeletonX_PM@@6B@
	pop	ebx
	ret	0
??0CSkeletonX_PM@@QAE@XZ ENDP				; CSkeletonX_PM::CSkeletonX_PM
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\fskinned.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\fskinned.h
;	COMDAT ??1CSkeletonX_PM@@UAE@XZ
_TEXT	SEGMENT
??1CSkeletonX_PM@@UAE@XZ PROC				; CSkeletonX_PM::~CSkeletonX_PM, COMDAT
; _this$ = ecx

; 61   : 	virtual					~CSkeletonX_PM	()	{}

	push	ebx
	push	edi
	mov	edi, ecx
	lea	ecx, DWORD PTR [edi+140]
	mov	DWORD PTR [ecx], OFFSET ??_7CSkeletonX_PM@@6B@
	mov	DWORD PTR [edi], OFFSET ??_7CSkeletonX_PM@@6BIRender_Visual@@@
	mov	DWORD PTR [edi+68], OFFSET ??_7CSkeletonX_PM@@6BIRender_Mesh@@@
	call	DWORD PTR __imp_??1CSkeletonX@@QAE@XZ
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp

; 25   : {

	mov	DWORD PTR [edi], OFFSET ??_7Fvisual@@6BIRender_Visual@@@
	mov	DWORD PTR [edi+68], OFFSET ??_7Fvisual@@6BIRender_Mesh@@@
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h

; 151  : 	if (ptr) 

	mov	eax, DWORD PTR [edi+104]
	test	eax, eax
	je	SHORT $LN10@CSkeletonX

; 132  : 		void*	_real_ptr	= dynamic_cast<void*>(ptr);

	push	esi
	push	eax
	call	___RTCastToVoid

; 133  : 		ptr->~T			();

	mov	ecx, DWORD PTR [edi+104]
	add	esp, 4
	mov	esi, eax
	mov	edx, DWORD PTR [ecx]
	push	0
	call	DWORD PTR [edx]

; 134  : 		Memory.mem_free	(_real_ptr);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	esi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z

; 154  : 		ptr = nullptr;

	mov	DWORD PTR [edi+104], 0
	pop	esi
$LN10@CSkeletonX:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp

; 27   : }

	lea	ecx, DWORD PTR [edi+68]
	call	DWORD PTR __imp_??1IRender_Mesh@@UAE@XZ
	mov	ecx, edi
	pop	edi
	pop	ebx
	jmp	DWORD PTR __imp_??1IRender_Visual@@UAE@XZ
??1CSkeletonX_PM@@UAE@XZ ENDP				; CSkeletonX_PM::~CSkeletonX_PM
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\fskinned.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp
;	COMDAT ??_GCSkeletonX_PM@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCSkeletonX_PM@@UAEPAXI@Z PROC			; CSkeletonX_PM::`scalar deleting destructor', COMDAT
; _this$ = ecx
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\fskinned.h

; 61   : 	virtual					~CSkeletonX_PM	()	{}

	push	ebx
	push	edi
	mov	edi, ecx
	lea	ecx, DWORD PTR [edi+140]
	mov	DWORD PTR [ecx], OFFSET ??_7CSkeletonX_PM@@6B@
	mov	DWORD PTR [edi], OFFSET ??_7CSkeletonX_PM@@6BIRender_Visual@@@
	mov	DWORD PTR [edi+68], OFFSET ??_7CSkeletonX_PM@@6BIRender_Mesh@@@
	call	DWORD PTR __imp_??1CSkeletonX@@QAE@XZ
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp

; 25   : {

	mov	DWORD PTR [edi], OFFSET ??_7Fvisual@@6BIRender_Visual@@@
	mov	DWORD PTR [edi+68], OFFSET ??_7Fvisual@@6BIRender_Mesh@@@
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h

; 151  : 	if (ptr) 

	mov	eax, DWORD PTR [edi+104]
	test	eax, eax
	je	SHORT $LN13@scalar

; 132  : 		void*	_real_ptr	= dynamic_cast<void*>(ptr);

	push	esi
	push	eax
	call	___RTCastToVoid

; 133  : 		ptr->~T			();

	mov	ecx, DWORD PTR [edi+104]
	add	esp, 4
	mov	esi, eax
	mov	edx, DWORD PTR [ecx]
	push	0
	call	DWORD PTR [edx]

; 134  : 		Memory.mem_free	(_real_ptr);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	esi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z

; 154  : 		ptr = nullptr;

	mov	DWORD PTR [edi+104], 0
	pop	esi
$LN13@scalar:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp

; 27   : }

	lea	ecx, DWORD PTR [edi+68]
	call	DWORD PTR __imp_??1IRender_Mesh@@UAE@XZ
	mov	ecx, edi
	call	DWORD PTR __imp_??1IRender_Visual@@UAE@XZ
	test	BYTE PTR ___flags$[esp+4], 1
	je	SHORT $LN17@scalar
	push	176					; 000000b0H
	push	edi
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN17@scalar:
	mov	eax, edi
	pop	edi
	pop	ebx
	ret	4
??_GCSkeletonX_PM@@UAEPAXI@Z ENDP			; CSkeletonX_PM::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FProgressive.cpp
; File I:\Vitalya\mine\NSProjectX\xrEngine\Fmesh.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FProgressive.cpp
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FProgressive.cpp
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp
; File I:\Vitalya\mine\NSProjectX\xrEngine\Fmesh.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FProgressive.cpp
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\fskinned.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\fskinned.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleGroup.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h
; File I:\Vitalya\mine\NSProjectX\xrCore\xr_resource.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FTreeVisual.cpp
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FTreeVisual.cpp
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
_TEXT	SEGMENT
_type$ = 8						; size = 4
?Instance_Create@CModelPool@@QAEPAVIRender_Visual@@I@Z PROC ; CModelPool::Instance_Create
; _this$dead$ = ecx

; 29   : {

	push	ebx
	push	ebp

; 30   : 	IRender_Visual *V = NULL;
; 31   : 
; 32   : 	// Check types
; 33   : 	switch (type) {

	mov	ebp, DWORD PTR _type$[esp+4]
	xor	ebx, ebx
	push	esi
	push	edi
	cmp	ebp, 11					; 0000000bH
	ja	$LN19@Instance_C
	jmp	DWORD PTR $LN110@Instance_C[ebp*4]
$LN7@Instance_C:
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h

; 68   : 	T* ptr	= (T*)Memory.mem_alloc(sizeof(T));

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	108					; 0000006cH
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 69   : 	return new (ptr) T();

	mov	ebx, eax
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp

; 19   : Fvisual::Fvisual()  : IRender_Visual()

	mov	ecx, ebx
	call	DWORD PTR __imp_??0IRender_Visual@@QAE@XZ

; 20   : {

	lea	ecx, DWORD PTR [ebx+68]
	call	DWORD PTR __imp_??0IRender_Mesh@@QAE@XZ
	mov	DWORD PTR [ebx], OFFSET ??_7Fvisual@@6BIRender_Visual@@@
	mov	DWORD PTR [ebx+68], OFFSET ??_7Fvisual@@6BIRender_Mesh@@@

; 21   : 	m_fast	=	0;

	mov	DWORD PTR [ebx+104], 0
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 36   : 		break;

	jmp	$LN6@Instance_C
$LN8@Instance_C:
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h

; 68   : 	T* ptr	= (T*)Memory.mem_alloc(sizeof(T));

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	84					; 00000054H
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 69   : 	return new (ptr) T();

	mov	ebx, eax
	mov	ecx, ebx
	call	DWORD PTR __imp_??0FHierrarhyVisual@@QAE@XZ
	mov	DWORD PTR [ebx], OFFSET ??_SFHierrarhyVisual@@6B@
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 39   : 		break;

	jmp	$LN6@Instance_C
$LN9@Instance_C:
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h

; 68   : 	T* ptr	= (T*)Memory.mem_alloc(sizeof(T));

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	140					; 0000008cH
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 69   : 	return new (ptr) T();

	mov	ebx, eax
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp

; 19   : Fvisual::Fvisual()  : IRender_Visual()

	mov	ecx, ebx
	call	DWORD PTR __imp_??0IRender_Visual@@QAE@XZ

; 20   : {

	lea	ecx, DWORD PTR [ebx+68]
	call	DWORD PTR __imp_??0IRender_Mesh@@QAE@XZ

; 21   : 	m_fast	=	0;

	mov	DWORD PTR [ebx+104], 0
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FProgressive.cpp

; 16   : {

	mov	DWORD PTR [ebx], OFFSET ??_7FProgressive@@6BIRender_Visual@@@
	mov	DWORD PTR [ebx+68], OFFSET ??_7FProgressive@@6BIRender_Mesh@@@
; File I:\Vitalya\mine\NSProjectX\xrEngine\Fmesh.h

; 105  : 	FSlideWindowItem() : sw(0), count(0) {};

	mov	DWORD PTR [ebx+108], 0
	mov	DWORD PTR [ebx+112], 0
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FProgressive.cpp

; 17   : 	xSWI			= 0;

	mov	DWORD PTR [ebx+132], 0

; 18   : 	last_lod		= 0;

	mov	DWORD PTR [ebx+136], 0
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 42   : 		break;

	jmp	$LN6@Instance_C
$LN10@Instance_C:
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h

; 68   : 	T* ptr	= (T*)Memory.mem_alloc(sizeof(T));

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	17896					; 000045e8H
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 69   : 	return new (ptr) T();

	push	17896					; 000045e8H
	mov	ebx, eax
	push	0
	push	ebx
	call	_memset
	add	esp, 12					; 0000000cH
	mov	ecx, ebx
	call	DWORD PTR __imp_??0CKinematicsAnimated@@QAE@XZ
	mov	DWORD PTR [ebx], OFFSET ??_SCKinematicsAnimated@@6B@
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 45   : 		break;

	jmp	$LN6@Instance_C
$LN11@Instance_C:
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h

; 68   : 	T* ptr	= (T*)Memory.mem_alloc(sizeof(T));

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	168					; 000000a8H
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 69   : 	return new (ptr) T();

	mov	ebx, eax
	mov	ecx, ebx
	call	DWORD PTR __imp_??0CKinematics@@QAE@XZ
	mov	DWORD PTR [ebx], OFFSET ??_SCKinematics@@6B@
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 48   : 		break;

	jmp	$LN6@Instance_C
$LN12@Instance_C:
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h

; 68   : 	T* ptr	= (T*)Memory.mem_alloc(sizeof(T));

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	176					; 000000b0H
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 69   : 	return new (ptr) T();

	mov	ebx, eax
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp

; 19   : Fvisual::Fvisual()  : IRender_Visual()

	mov	ecx, ebx
	call	DWORD PTR __imp_??0IRender_Visual@@QAE@XZ

; 20   : {

	lea	ecx, DWORD PTR [ebx+68]
	call	DWORD PTR __imp_??0IRender_Mesh@@QAE@XZ
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FProgressive.cpp

; 16   : {

	mov	DWORD PTR [ebx], OFFSET ??_7FProgressive@@6BIRender_Visual@@@
	lea	ecx, DWORD PTR [ebx+140]
	mov	DWORD PTR [ebx+68], OFFSET ??_7FProgressive@@6BIRender_Mesh@@@
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp

; 21   : 	m_fast	=	0;

	mov	DWORD PTR [ebx+104], 0
; File I:\Vitalya\mine\NSProjectX\xrEngine\Fmesh.h

; 105  : 	FSlideWindowItem() : sw(0), count(0) {};

	mov	DWORD PTR [ebx+108], 0
	mov	DWORD PTR [ebx+112], 0
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FProgressive.cpp

; 17   : 	xSWI			= 0;

	mov	DWORD PTR [ebx+132], 0

; 18   : 	last_lod		= 0;

	mov	DWORD PTR [ebx+136], 0
	call	DWORD PTR __imp_??0CSkeletonX@@QAE@XZ
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\fskinned.h

; 60   : 							CSkeletonX_PM	()	{}

	mov	DWORD PTR [ebx], OFFSET ??_7CSkeletonX_PM@@6BIRender_Visual@@@
	mov	DWORD PTR [ebx+68], OFFSET ??_7CSkeletonX_PM@@6BIRender_Mesh@@@
	mov	DWORD PTR [ebx+140], OFFSET ??_7CSkeletonX_PM@@6B@
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 51   : 		break;

	jmp	$LN6@Instance_C
$LN13@Instance_C:
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h

; 68   : 	T* ptr	= (T*)Memory.mem_alloc(sizeof(T));

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	144					; 00000090H
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 69   : 	return new (ptr) T();

	mov	ebx, eax
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp

; 19   : Fvisual::Fvisual()  : IRender_Visual()

	mov	ecx, ebx
	call	DWORD PTR __imp_??0IRender_Visual@@QAE@XZ

; 20   : {

	lea	ecx, DWORD PTR [ebx+68]
	call	DWORD PTR __imp_??0IRender_Mesh@@QAE@XZ
	lea	ecx, DWORD PTR [ebx+108]
	mov	DWORD PTR [ebx], OFFSET ??_7Fvisual@@6BIRender_Visual@@@
	mov	DWORD PTR [ebx+68], OFFSET ??_7Fvisual@@6BIRender_Mesh@@@

; 21   : 	m_fast	=	0;

	mov	DWORD PTR [ebx+104], 0
	call	DWORD PTR __imp_??0CSkeletonX@@QAE@XZ
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\fskinned.h

; 39   : 							CSkeletonX_ST	()	{}

	mov	DWORD PTR [ebx], OFFSET ??_7CSkeletonX_ST@@6BIRender_Visual@@@
	mov	DWORD PTR [ebx+68], OFFSET ??_7CSkeletonX_ST@@6BIRender_Mesh@@@
	mov	DWORD PTR [ebx+108], OFFSET ??_7CSkeletonX_ST@@6B@
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 54   : 		break;

	jmp	$LN6@Instance_C
$LN14@Instance_C:
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h

; 68   : 	T* ptr	= (T*)Memory.mem_alloc(sizeof(T));

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	180					; 000000b4H
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 69   : 	return new (ptr) T();

	mov	ebx, eax
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 52   : {

	mov	ecx, ebx
	call	DWORD PTR __imp_??0IParticleCustom@@QAE@XZ

; 53   : 	m_HandleEffect 			= ParticleManager()->CreateEffect(1);		VERIFY(m_HandleEffect>=0);

	mov	esi, DWORD PTR __imp_?ParticleManager@PAPI@@YAPAVIParticleManager@1@XZ
	mov	DWORD PTR [ebx], OFFSET ??_7CParticleEffect@PS@@6B@
	call	esi
	push	1
	mov	ecx, eax
	mov	edx, DWORD PTR [eax]
	call	DWORD PTR [edx+4]
	mov	DWORD PTR [ebx+80], eax

; 54   : 	m_HandleActionList		= ParticleManager()->CreateActionList();	VERIFY(m_HandleActionList>=0);

	call	esi
	mov	ecx, eax
	mov	edx, DWORD PTR [eax]
	call	DWORD PTR [edx+12]
	mov	DWORD PTR [ebx+84], eax
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h

; 15   :     IC	SelfRef	zero	()											{ flags=T(0);	return *this;	}

	mov	BYTE PTR [ebx+176], 0
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 56   : 	m_Def					= 0;

	mov	DWORD PTR [ebx+72], 0

; 57   : 	m_fElapsedLimit			= 0.f;

	mov	DWORD PTR [ebx+76], 0

; 58   : 	m_MemDT					= 0;

	mov	DWORD PTR [ebx+88], 0
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	mov	DWORD PTR [ebx+92], 0
	mov	DWORD PTR [ebx+96], 0
	mov	DWORD PTR [ebx+100], 0
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 60   : 	m_DestroyCallback		= 0;

	mov	DWORD PTR [ebx+168], 0

; 61   : 	m_CollisionCallback		= 0;

	mov	DWORD PTR [ebx+172], 0
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 72   : 		_11=1; _12=0; _13=0; _14=0;

	mov	DWORD PTR [ebx+104], 1065353216		; 3f800000H
	mov	DWORD PTR [ebx+108], 0
	mov	DWORD PTR [ebx+112], 0
	mov	DWORD PTR [ebx+116], 0

; 73   : 		_21=0; _22=1; _23=0; _24=0;

	mov	DWORD PTR [ebx+120], 0
	mov	DWORD PTR [ebx+124], 1065353216		; 3f800000H
	mov	DWORD PTR [ebx+128], 0
	mov	DWORD PTR [ebx+132], 0

; 74   : 		_31=0; _32=0; _33=1; _34=0;

	mov	DWORD PTR [ebx+136], 0
	mov	DWORD PTR [ebx+140], 0
	mov	DWORD PTR [ebx+144], 1065353216		; 3f800000H
	mov	DWORD PTR [ebx+148], 0

; 75   : 		_41=0; _42=0; _43=0; _44=1;

	mov	DWORD PTR [ebx+152], 0
	mov	DWORD PTR [ebx+156], 0
	mov	DWORD PTR [ebx+160], 0
	mov	DWORD PTR [ebx+164], 1065353216		; 3f800000H
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 57   : 		break;

	jmp	$LN6@Instance_C
$LN15@Instance_C:
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h

; 68   : 	T* ptr	= (T*)Memory.mem_alloc(sizeof(T));

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	108					; 0000006cH
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 69   : 	return new (ptr) T();

	mov	ebx, eax
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleGroup.cpp

; 367  : {

	mov	ecx, ebx
	call	DWORD PTR __imp_??0IParticleCustom@@QAE@XZ
	mov	DWORD PTR [ebx], OFFSET ??_7CParticleGroup@PS@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 390  :     _CONSTEXPR20_CONTAINER _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

	mov	DWORD PTR [ebx+92], 0
	mov	DWORD PTR [ebx+96], 0
	mov	DWORD PTR [ebx+100], 0
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h

; 15   :     IC	SelfRef	zero	()											{ flags=T(0);	return *this;	}

	mov	BYTE PTR [ebx+104], 0
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	mov	DWORD PTR [ebx+80], 0
	mov	DWORD PTR [ebx+84], 0
	mov	DWORD PTR [ebx+88], 0
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 60   : 		break;

	jmp	$LN6@Instance_C
$LN16@Instance_C:
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h

; 68   : 	T* ptr	= (T*)Memory.mem_alloc(sizeof(T));

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	1084					; 0000043cH
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 69   : 	return new (ptr) T();

	push	1084					; 0000043cH
	mov	ebx, eax
	push	0
	push	ebx
	call	_memset
	add	esp, 12					; 0000000cH
	mov	ecx, ebx
	call	DWORD PTR __imp_??0FHierrarhyVisual@@QAE@XZ
	mov	DWORD PTR [ebx], OFFSET ??_7FLOD@@6B@
; File I:\Vitalya\mine\NSProjectX\xrCore\xr_resource.h

; 61   : 						resptr_core		()												{	p_ = 0;						}

	mov	DWORD PTR [ebx+84], 0
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 64   : 		break;

	jmp	$LN6@Instance_C
$LN17@Instance_C:
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h

; 68   : 	T* ptr	= (T*)Memory.mem_alloc(sizeof(T));

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	208					; 000000d0H
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 69   : 	return new (ptr) T();

	mov	ebx, eax
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FTreeVisual.cpp

; 21   : {

	mov	ecx, ebx
	call	DWORD PTR __imp_??0IRender_Visual@@QAE@XZ
	lea	ecx, DWORD PTR [ebx+68]
	call	DWORD PTR __imp_??0IRender_Mesh@@QAE@XZ

; 171  : {

	mov	DWORD PTR [ebx], OFFSET ??_7FTreeVisual_ST@@6BIRender_Visual@@@
	mov	DWORD PTR [ebx+68], OFFSET ??_7FTreeVisual_ST@@6BIRender_Mesh@@@
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 67   : 		break;

	jmp	SHORT $LN6@Instance_C
$LN18@Instance_C:
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h

; 68   : 	T* ptr	= (T*)Memory.mem_alloc(sizeof(T));

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	216					; 000000d8H
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 69   : 	return new (ptr) T();

	mov	ebx, eax
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FTreeVisual.cpp

; 21   : {

	mov	ecx, ebx
	call	DWORD PTR __imp_??0IRender_Visual@@QAE@XZ
	lea	ecx, DWORD PTR [ebx+68]
	call	DWORD PTR __imp_??0IRender_Mesh@@QAE@XZ

; 200  : {

	mov	DWORD PTR [ebx], OFFSET ??_7FTreeVisual_PM@@6BIRender_Visual@@@
	mov	DWORD PTR [ebx+68], OFFSET ??_7FTreeVisual_PM@@6BIRender_Mesh@@@

; 201  : 	pSWI						= 0;

	mov	DWORD PTR [ebx+208], 0

; 202  : 	last_lod					= 0;

	mov	DWORD PTR [ebx+212], 0
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 70   : 		break;

	jmp	SHORT $LN6@Instance_C
$LN19@Instance_C:

; 71   : #endif
; 72   : 	default:
; 73   : 		FATAL	("Unknown visual type");

	push	OFFSET ??_C@_0BE@EBDNGAIE@Unknown?5visual?5type@
	push	OFFSET ??_C@_0BM@ILNANEIH@CModelPool?3?3Instance_Create@
	push	73					; 00000049H
	push	OFFSET ??_C@_0DJ@HJNKECDB@I?3?2Vitalya?2mine?2NSProjectX?2laye@
	push	DWORD PTR __imp_?Debug@@3VxrDebug@@A
	call	DWORD PTR __imp_?fatal@xrDebug@@QAAXPBDH00ZZ
	add	esp, 20					; 00000014H
$LN6@Instance_C:

; 74   : 		break;
; 75   : 	}
; 76   : 	R_ASSERT	(V);

	cmp	BYTE PTR ?ignore_always@?5??Instance_Create@CModelPool@@QAEPAVIRender_Visual@@I@Z@4_NA, 0
	jne	SHORT $LN111@Instance_C
	test	ebx, ebx
	jne	SHORT $LN111@Instance_C
	mov	ecx, DWORD PTR __imp_?Debug@@3VxrDebug@@A
	push	OFFSET ?ignore_always@?5??Instance_Create@CModelPool@@QAEPAVIRender_Visual@@I@Z@4_NA
	push	OFFSET ??_C@_0BM@ILNANEIH@CModelPool?3?3Instance_Create@
	push	76					; 0000004cH
	push	OFFSET ??_C@_0DJ@HJNKECDB@I?3?2Vitalya?2mine?2NSProjectX?2laye@
	push	OFFSET ??_C@_01FCMHBHNC@V@
	call	DWORD PTR __imp_?fail@xrDebug@@QAEXPBD0H0AA_N@Z
$LN111@Instance_C:

; 77   : 	V->Type		= type;
; 78   : 	return		V;
; 79   : }

	pop	edi
	pop	esi
	mov	DWORD PTR [ebx+4], ebp
	mov	eax, ebx
	pop	ebp
	pop	ebx
	ret	4
	npad	2
$LN110@Instance_C:
	DD	$LN7@Instance_C
	DD	$LN8@Instance_C
	DD	$LN9@Instance_C
	DD	$LN10@Instance_C
	DD	$LN12@Instance_C
	DD	$LN13@Instance_C
	DD	$LN16@Instance_C
	DD	$LN17@Instance_C
	DD	$LN14@Instance_C
	DD	$LN15@Instance_C
	DD	$LN11@Instance_C
	DD	$LN18@Instance_C
?Instance_Create@CModelPool@@QAEPAVIRender_Visual@@I@Z ENDP ; CModelPool::Instance_Create
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
_TEXT	SEGMENT
_V$ = 8							; size = 4
?Instance_Duplicate@CModelPool@@QAEPAVIRender_Visual@@PAV2@@Z PROC ; CModelPool::Instance_Duplicate
; _this$ = ecx

; 83   : 	R_ASSERT(V);

	cmp	BYTE PTR ?ignore_always@?3??Instance_Duplicate@CModelPool@@QAEPAVIRender_Visual@@PAV3@@Z@4_NA, 0
	push	ebx
	push	esi
	mov	esi, DWORD PTR _V$[esp+4]
	mov	ebx, ecx
	push	edi
	jne	SHORT $LN2@Instance_D
	test	esi, esi
	jne	SHORT $LN2@Instance_D
	mov	ecx, DWORD PTR __imp_?Debug@@3VxrDebug@@A
	push	OFFSET ?ignore_always@?3??Instance_Duplicate@CModelPool@@QAEPAVIRender_Visual@@PAV3@@Z@4_NA
	push	OFFSET ??_C@_0BP@KMCMNMJD@CModelPool?3?3Instance_Duplicate@
	push	83					; 00000053H
	push	OFFSET ??_C@_0DJ@HJNKECDB@I?3?2Vitalya?2mine?2NSProjectX?2laye@
	push	OFFSET ??_C@_01FCMHBHNC@V@
	call	DWORD PTR __imp_?fail@xrDebug@@QAEXPBD0H0AA_N@Z
$LN2@Instance_D:

; 84   : 	IRender_Visual* N		= Instance_Create(V->Type);

	push	DWORD PTR [esi+4]
	call	?Instance_Create@CModelPool@@QAEPAVIRender_Visual@@I@Z ; CModelPool::Instance_Create
	mov	edi, eax

; 85   : 	N->Copy			(V);

	push	esi
	mov	ecx, edi
	mov	edx, DWORD PTR [edi]
	call	DWORD PTR [edx+12]

; 86   : 	N->Spawn		();

	mov	edx, DWORD PTR [edi]
	mov	ecx, edi
	call	DWORD PTR [edx+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR [ebx+4]

; 150  :         return _Ptr == _Right._Ptr;

	mov	ecx, DWORD PTR [ebx+8]
	cmp	eax, ecx
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 88   : 	for (xr_vector<ModelDef>::iterator I=Models.begin(); I!=Models.end(); I++) 

	je	SHORT $LN36@Instance_D
	npad	5
$LL7@Instance_D:

; 89   : 		if (I->model==V){ I->refs++; break;}

	cmp	DWORD PTR [eax+4], esi
	je	SHORT $LN32@Instance_D
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 74   :         ++_Ptr;

	add	eax, 12					; 0000000cH

; 150  :         return _Ptr == _Right._Ptr;

	cmp	eax, ecx
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 88   : 	for (xr_vector<ModelDef>::iterator I=Models.begin(); I!=Models.end(); I++) 

	jne	SHORT $LL7@Instance_D

; 90   : 	return N;
; 91   : }

	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
	ret	4
$LN32@Instance_D:

; 89   : 		if (I->model==V){ I->refs++; break;}

	inc	DWORD PTR [eax+8]
$LN36@Instance_D:

; 90   : 	return N;
; 91   : }

	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
	ret	4
?Instance_Duplicate@CModelPool@@QAEPAVIRender_Visual@@PAV2@@Z ENDP ; CModelPool::Instance_Duplicate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
_TEXT	SEGMENT
_data$ = -1088						; size = 4
_H$ = -1084						; size = 44
_name$ = -1040						; size = 520
_fn$ = -520						; size = 520
_N$ = 8							; size = 4
_allow_register$ = 12					; size = 4
?Instance_Load@CModelPool@@QAEPAVIRender_Visual@@PBDH@Z PROC ; CModelPool::Instance_Load
; _this$ = ecx

; 94   : {

	sub	esp, 1088				; 00000440H
	push	ebx
	push	esi
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 171  : {	return (char*) strrchr(S,'.');	}

	mov	esi, DWORD PTR _N$[esp+1092]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 94   : {

	mov	ebx, ecx
	push	edi
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 171  : {	return (char*) strrchr(S,'.');	}

	push	46					; 0000002eH
	push	esi
	call	DWORD PTR __imp__strrchr
	add	esp, 8
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 100  : 	if (0==strext(N))	strconcat	(sizeof(name),name,N,".ogf");

	test	eax, eax
	lea	eax, DWORD PTR _name$[esp+1100]
	jne	SHORT $LN2@Instance_L
	push	OFFSET ??_C@_04FKFGGPFG@?4ogf@
	push	esi
	push	eax
	push	520					; 00000208H
	call	DWORD PTR __imp_?strconcat@@YAPADHPADPBD1@Z
	add	esp, 16					; 00000010H
	jmp	SHORT $LN3@Instance_L
$LN2@Instance_L:

; 101  : 	else				strcpy_s	(name,sizeof(name),N);

	push	esi
	push	520					; 00000208H
	push	eax
	call	DWORD PTR __imp__strcpy_s
	add	esp, 12					; 0000000cH
$LN3@Instance_L:

; 102  : 
; 103  : 	// Load data from MESHES or LEVEL
; 104  : 	if (!FS.exist(N))	{

	mov	ecx, DWORD PTR __imp_?xr_FS@@3PAVCLocatorAPI@@A
	push	esi
	mov	ecx, DWORD PTR [ecx]
	call	DWORD PTR __imp_?exist@CLocatorAPI@@QAEPBUfile@1@PBD@Z
	test	eax, eax
	jne	SHORT $LN4@Instance_L

; 105  : 		if (!FS.exist(fn, "$level$", name))

	mov	ecx, DWORD PTR __imp_?xr_FS@@3PAVCLocatorAPI@@A
	lea	eax, DWORD PTR _name$[esp+1100]
	mov	edi, DWORD PTR __imp_?exist@CLocatorAPI@@QAEPBUfile@1@AAY0CAI@DPBD1@Z
	push	eax
	push	OFFSET ??_C@_07DJIBDFPO@$level$@
	mov	ecx, DWORD PTR [ecx]
	lea	eax, DWORD PTR _fn$[esp+1108]
	push	eax
	call	edi
	test	eax, eax
	jne	SHORT $LN5@Instance_L

; 106  : 			if (!FS.exist(fn, "$game_meshes$", name)){

	mov	ecx, DWORD PTR __imp_?xr_FS@@3PAVCLocatorAPI@@A
	lea	eax, DWORD PTR _name$[esp+1100]
	push	eax
	push	OFFSET ??_C@_0O@CGKNLCGD@$game_meshes$@
	lea	eax, DWORD PTR _fn$[esp+1108]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	call	edi
	test	eax, eax
	jne	SHORT $LN5@Instance_L

; 107  : #ifdef _EDITOR
; 108  : 				Msg("!Can't find model file '%s'.",name);
; 109  :                 return 0;
; 110  : #else            
; 111  : 				Debug.fatal(DEBUG_INFO,"Can't find model file '%s'.",name);

	lea	eax, DWORD PTR _name$[esp+1100]
	push	eax
	push	OFFSET ??_C@_0BM@ENFCPNEL@Can?8t?5find?5model?5file?5?8?$CFs?8?4@
	push	OFFSET ??_C@_0BK@KFOEMNN@CModelPool?3?3Instance_Load@
	push	111					; 0000006fH
	push	OFFSET ??_C@_0DJ@HJNKECDB@I?3?2Vitalya?2mine?2NSProjectX?2laye@
	push	DWORD PTR __imp_?Debug@@3VxrDebug@@A
	call	DWORD PTR __imp_?fatal@xrDebug@@QAAXPBDH00ZZ
	add	esp, 24					; 00000018H

; 112  : #endif
; 113  : 			}
; 114  : 	} else {

	jmp	SHORT $LN5@Instance_L
$LN4@Instance_L:

; 115  : 		strcpy			(fn,N);

	lea	edx, DWORD PTR _fn$[esp+1100]
	mov	eax, esi
	sub	edx, esi
	npad	8
$LL10@Instance_L:
	mov	cl, BYTE PTR [eax]
	lea	eax, DWORD PTR [eax+1]
	mov	BYTE PTR [edx+eax-1], cl
	test	cl, cl
	jne	SHORT $LL10@Instance_L
$LN5@Instance_L:

; 116  : 	}
; 117  : 	
; 118  : 	// Actual loading
; 119  : #ifdef DEBUG
; 120  : 	if (bLogging)		Msg		("- Uncached model loading: %s",fn);
; 121  : #endif // DEBUG
; 122  : 
; 123  : 	IReader*			data	= FS.r_open(fn);

	mov	ecx, DWORD PTR __imp_?xr_FS@@3PAVCLocatorAPI@@A
	lea	eax, DWORD PTR _fn$[esp+1100]
	push	eax
	mov	ecx, DWORD PTR [ecx]
	call	DWORD PTR __imp_?r_open@CLocatorAPI@@QAEPAVIReader@@PBD@Z

; 124  : 	ogf_header			H;
; 125  : 	data->r_chunk_safe	(OGF_HEADER,&H,sizeof(H));

	push	44					; 0000002cH
	lea	ecx, DWORD PTR _H$[esp+1104]
	mov	DWORD PTR _data$[esp+1104], eax
	push	ecx
	push	1
	mov	ecx, eax
	call	DWORD PTR __imp_?r_chunk_safe@?$IReaderBase@VIReader@@@@QAEHIPAXI@Z

; 126  : 	V = Instance_Create (H.type);

	movzx	eax, BYTE PTR _H$[esp+1101]
	push	eax
	call	?Instance_Create@CModelPool@@QAEPAVIRender_Visual@@I@Z ; CModelPool::Instance_Create
	mov	edi, eax

; 127  : 	V->Load				(N,data,0);

	push	0
	push	DWORD PTR _data$[esp+1104]
	mov	ecx, edi
	mov	edx, DWORD PTR [edi]
	push	esi
	call	DWORD PTR [edx+4]

; 128  : 	FS.r_close			(data);

	mov	ecx, DWORD PTR __imp_?xr_FS@@3PAVCLocatorAPI@@A
	lea	eax, DWORD PTR _data$[esp+1100]
	push	eax
	mov	ecx, DWORD PTR [ecx]
	call	DWORD PTR __imp_?r_close@CLocatorAPI@@QAEXAAPAVIReader@@@Z

; 129  : 	g_pGamePersistent->RegisterModel(V);

	mov	eax, DWORD PTR __imp_?g_pGamePersistent@@3PAVIGame_Persistent@@A
	push	edi
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+52]

; 130  : 
; 131  : 	// Registration
; 132  : 	if (allow_register) Instance_Register(N,V);

	cmp	DWORD PTR _allow_register$[esp+1096], 0
	je	SHORT $LN16@Instance_L
	push	edi
	push	esi
	mov	ecx, ebx
	call	?Instance_Register@CModelPool@@QAEXPBDPAVIRender_Visual@@@Z ; CModelPool::Instance_Register
$LN16@Instance_L:

; 133  : 
; 134  : 	return V;
; 135  : }

	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 1088				; 00000440H
	ret	8
?Instance_Load@CModelPool@@QAEPAVIRender_Visual@@PBDH@Z ENDP ; CModelPool::Instance_Load
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
_TEXT	SEGMENT
_H$ = -44						; size = 44
_name$ = 8						; size = 4
_data$ = 12						; size = 4
_allow_register$ = 16					; size = 4
?Instance_Load@CModelPool@@QAEPAVIRender_Visual@@PBDPAVIReader@@H@Z PROC ; CModelPool::Instance_Load
; _this$ = ecx

; 138  : {

	sub	esp, 44					; 0000002cH
	push	ebx
	push	esi

; 139  : 	IRender_Visual	*V;
; 140  : 	
; 141  : 	ogf_header			H;
; 142  : 	data->r_chunk_safe	(OGF_HEADER,&H,sizeof(H));

	mov	esi, DWORD PTR _data$[esp+48]
	lea	eax, DWORD PTR _H$[esp+52]
	push	edi
	push	44					; 0000002cH
	push	eax
	mov	ebx, ecx
	mov	ecx, esi
	push	1
	call	DWORD PTR __imp_?r_chunk_safe@?$IReaderBase@VIReader@@@@QAEHIPAXI@Z

; 143  : 	V = Instance_Create (H.type);

	movzx	eax, BYTE PTR _H$[esp+57]
	push	eax
	call	?Instance_Create@CModelPool@@QAEPAVIRender_Visual@@I@Z ; CModelPool::Instance_Create
	mov	edi, eax

; 144  : 	V->Load				(name,data,0);

	push	0
	push	esi
	mov	esi, DWORD PTR _name$[esp+60]
	mov	ecx, edi
	mov	edx, DWORD PTR [edi]
	push	esi
	call	DWORD PTR [edx+4]

; 145  : 
; 146  : 	// Registration
; 147  : 	if (allow_register) Instance_Register(name,V);

	cmp	DWORD PTR _allow_register$[esp+52], 0
	je	SHORT $LN4@Instance_L
	push	edi
	push	esi
	mov	ecx, ebx
	call	?Instance_Register@CModelPool@@QAEXPBDPAVIRender_Visual@@@Z ; CModelPool::Instance_Register
$LN4@Instance_L:

; 148  : 	return V;
; 149  : }

	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 44					; 0000002cH
	ret	12					; 0000000cH
?Instance_Load@CModelPool@@QAEPAVIRender_Visual@@PBDPAVIReader@@H@Z ENDP ; CModelPool::Instance_Load
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\modelpool.h
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
_TEXT	SEGMENT
_M$ = -12						; size = 12
_N$ = 8							; size = 4
_V$ = 12						; size = 4
?Instance_Register@CModelPool@@QAEXPBDPAVIRender_Visual@@@Z PROC ; CModelPool::Instance_Register
; _this$ = ecx

; 152  : {

	sub	esp, 12					; 0000000cH
	push	ebx
	mov	ebx, ecx
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\modelpool.h

; 29   :         ModelDef()			{ refs=0;model=0; }

	mov	DWORD PTR _M$[esp+24], 0
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 52   : 	void				_set		(str_c rhs) 					{	str_value* v = g_pStringContainer->dock(rhs); if (0!=v) v->dwReference++; _dec(); p_ = v;	}

	mov	ecx, DWORD PTR __imp_?g_pStringContainer@@3PAVstr_container@@A
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 152  : {

	push	esi
	push	edi
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 52   : 	void				_set		(str_c rhs) 					{	str_value* v = g_pStringContainer->dock(rhs); if (0!=v) v->dwReference++; _dec(); p_ = v;	}

	push	DWORD PTR _N$[esp+20]
	mov	ecx, DWORD PTR [ecx]
	call	DWORD PTR __imp_?dock@str_container@@QAEPAUstr_value@@PBD@Z
	mov	esi, eax
	test	esi, esi
	je	SHORT $LN46@Instance_R
	inc	DWORD PTR [esi]
$LN46@Instance_R:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 730  :         if (_Mylast != _My_data._Myend) {

	mov	eax, DWORD PTR [ebx+8]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 157  : 	Models.push_back	(M);

	lea	ecx, DWORD PTR [ebx+4]
	mov	edi, DWORD PTR _V$[esp+20]
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 52   : 	void				_set		(str_c rhs) 					{	str_value* v = g_pStringContainer->dock(rhs); if (0!=v) v->dwReference++; _dec(); p_ = v;	}

	mov	DWORD PTR _M$[esp+24], esi
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 156  : 	M.model				= V;

	mov	DWORD PTR _M$[esp+28], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 730  :         if (_Mylast != _My_data._Myend) {

	cmp	eax, DWORD PTR [ecx+8]
	je	SHORT $LN19@Instance_R
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 59   : 						shared_str	(shared_str const &rhs)			{	p_ = 0;	_set(rhs);								}

	mov	DWORD PTR [eax], 0

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	test	esi, esi
	je	SHORT $LN36@Instance_R
	inc	DWORD PTR [esi]
	mov	edx, DWORD PTR [eax]

; 50   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	test	edx, edx
	je	SHORT $LN36@Instance_R
	dec	DWORD PTR [edx]
$LN36@Instance_R:

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	DWORD PTR [eax], esi
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 716  :         ++_Mylast;

	add	DWORD PTR [ecx+4], 12			; 0000000cH

; 731  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

	jmp	SHORT $LN18@Instance_R
$LN19@Instance_R:

; 732  :         }
; 733  : 
; 734  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

	lea	edx, DWORD PTR _M$[esp+24]
	push	edx
	push	eax
	call	??$_Emplace_reallocate@ABUModelDef@CModelPool@@@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAEPAUModelDef@CModelPool@@QAU23@ABU23@@Z ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::_Emplace_reallocate<CModelPool::ModelDef const &>
$LN18@Instance_R:
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 50   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	test	esi, esi
	je	SHORT $LN44@Instance_R
	dec	DWORD PTR [esi]
$LN44@Instance_R:
	pop	edi
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 158  : }

	pop	esi
	pop	ebx
	add	esp, 12					; 0000000cH
	ret	8
?Instance_Register@CModelPool@@QAEXPBDPAVIRender_Visual@@@Z ENDP ; CModelPool::Instance_Register
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
;	COMDAT ??1ModelDef@CModelPool@@QAE@XZ
_TEXT	SEGMENT
??1ModelDef@CModelPool@@QAE@XZ PROC			; CModelPool::ModelDef::~ModelDef, COMDAT
; _this$ = ecx

; 50   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	mov	eax, DWORD PTR [ecx]
	test	eax, eax
	je	SHORT $LN7@ModelDef
	dec	DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN7@ModelDef
	mov	DWORD PTR [ecx], 0
$LN7@ModelDef:
	ret	0
??1ModelDef@CModelPool@@QAE@XZ ENDP			; CModelPool::ModelDef::~ModelDef
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
_TEXT	SEGMENT
_V$1 = -4						; size = 4
?Destroy@CModelPool@@AAEXXZ PROC			; CModelPool::Destroy
; _this$ = ecx

; 162  : {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 8
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	ebp, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1342 :         auto _Head = _Scary->_Myhead;

	mov	esi, DWORD PTR [ebp+36]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 164  : 	Pool.clear			();

	lea	edi, DWORD PTR [ebp+36]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1343 :         _Scary->_Erase_tree(_Getal(), _Head->_Parent);

	mov	ecx, edi
	push	DWORD PTR [esi+4]
	push	edi
	call	??$_Erase_tree@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@QAEXAAV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >::_Erase_tree<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >

; 1344 :         _Head->_Parent  = _Head;

	mov	DWORD PTR [esi+4], esi

; 1345 :         _Head->_Left    = _Head;

	mov	DWORD PTR [esi], esi

; 1346 :         _Head->_Right   = _Head;

	mov	DWORD PTR [esi+8], esi

; 1347 :         _Scary->_Mysize = 0;

	mov	DWORD PTR [edi+4], 0

; 1211 :         return size() == 0;

	cmp	DWORD PTR [ebp+32], 0
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 167  : 	while(!Registry.empty()){

	je	SHORT $LN3@Destroy
$LL2@Destroy:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1135 :         return iterator(_Scary->_Myhead->_Left, _Scary);

	mov	eax, DWORD PTR [ebp+28]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 169  : 		IRender_Visual* V=(IRender_Visual*)it->first;

	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _V$1[esp+24], ecx
	test	ecx, ecx

; 282  :     if (!V)					return;

	je	SHORT $LN26@Destroy

; 283  : 	V->Depart				();

	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+20]

; 284  : 	if (bDiscard||bForceDiscard){
; 285  :     	Discard	(V, TRUE); 

	push	1
	lea	eax, DWORD PTR _V$1[esp+28]
	mov	ecx, ebp
	push	eax
	call	?Discard@CModelPool@@QAEXAAPAVIRender_Visual@@H@Z ; CModelPool::Discard
$LN26@Destroy:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1211 :         return size() == 0;

	cmp	DWORD PTR [ebp+32], 0
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 167  : 	while(!Registry.empty()){

	jne	SHORT $LL2@Destroy
$LN3@Destroy:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1463 :         return iterator(_My_data._Myfirst, _STD addressof(_My_data));

	mov	edi, DWORD PTR [ebp+4]

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	esi, DWORD PTR [ebp+8]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 179  : 	for (; I!=E; I++)

	cmp	edi, esi
	je	SHORT $LN5@Destroy
$LL6@Destroy:

; 180  : 	{
; 181  : 		I->model->Release();

	mov	ecx, DWORD PTR [edi+4]
	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+8]
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h

; 151  : 	if (ptr) 

	mov	eax, DWORD PTR [edi+4]
	test	eax, eax
	je	SHORT $LN4@Destroy

; 132  : 		void*	_real_ptr	= dynamic_cast<void*>(ptr);

	push	eax
	call	___RTCastToVoid

; 133  : 		ptr->~T			();

	mov	ecx, DWORD PTR [edi+4]
	add	esp, 4
	mov	ebx, eax
	mov	edx, DWORD PTR [ecx]
	push	0
	call	DWORD PTR [edx+36]

; 134  : 		Memory.mem_free	(_real_ptr);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	ebx
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z

; 154  : 		ptr = nullptr;

	mov	DWORD PTR [edi+4], 0
$LN4@Destroy:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 74   :         ++_Ptr;

	add	edi, 12					; 0000000cH
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 179  : 	for (; I!=E; I++)

	cmp	edi, esi
	jne	SHORT $LL6@Destroy
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h

; 154  : 		ptr = nullptr;

	mov	edi, DWORD PTR [ebp+4]
$LN5@Destroy:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 185  : 	Models.clear();

	mov	DWORD PTR [ebp+8], edi

; 186  : 
; 187  : 	// cleanup motions container
; 188  : 	g_pMotionsContainer->clean(false);

	mov	ecx, DWORD PTR __imp_?g_pMotionsContainer@@3PAVmotions_container@@A
	push	0
	mov	ecx, DWORD PTR [ecx]
	call	DWORD PTR __imp_?clean@motions_container@@QAEX_N@Z

; 189  : }

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Destroy@CModelPool@@AAEXXZ ENDP			; CModelPool::Destroy
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
_TEXT	SEGMENT
??0CModelPool@@QAE@XZ PROC				; CModelPool::CModelPool
; _this$ = ecx

; 192  : {

	push	esi
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	mov	esi, DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 192  : {

	push	edi
	mov	edi, ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	push	24					; 00000018H
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 192  : {

	mov	DWORD PTR [edi], OFFSET ??_7CModelPool@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 390  :     _CONSTEXPR20_CONTAINER _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

	mov	DWORD PTR [edi+4], 0
	mov	DWORD PTR [edi+8], 0
	mov	DWORD PTR [edi+12], 0
	mov	DWORD PTR [edi+16], 0
	mov	DWORD PTR [edi+20], 0
	mov	DWORD PTR [edi+24], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 435  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

	mov	DWORD PTR [edi+28], 0
	mov	DWORD PTR [edi+32], 0
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	esi
	push	24					; 00000018H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 345  :         _Construct_in_place(_Pnode->_Left, _Pnode);

	mov	DWORD PTR [eax], eax

; 346  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

	mov	DWORD PTR [eax+4], eax

; 347  :         _Construct_in_place(_Pnode->_Right, _Pnode);

	mov	DWORD PTR [eax+8], eax

; 348  :         _Pnode->_Color = _Black;

	mov	WORD PTR [eax+12], 257			; 00000101H

; 1917 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

	mov	DWORD PTR [edi+28], eax

; 435  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

	mov	DWORD PTR [edi+36], 0
	mov	DWORD PTR [edi+40], 0
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	esi
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h

; 68   : 	T* ptr	= (T*)Memory.mem_alloc(sizeof(T));

	push	8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 345  :         _Construct_in_place(_Pnode->_Left, _Pnode);

	mov	DWORD PTR [eax], eax

; 346  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

	mov	DWORD PTR [eax+4], eax

; 347  :         _Construct_in_place(_Pnode->_Right, _Pnode);

	mov	DWORD PTR [eax+8], eax

; 348  :         _Pnode->_Color = _Black;

	mov	WORD PTR [eax+12], 257			; 00000101H

; 1917 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

	mov	DWORD PTR [edi+36], eax
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 193  : 	bLogging				= TRUE;

	mov	DWORD PTR [edi+44], 1

; 194  :     bForceDiscard 			= FALSE;

	mov	DWORD PTR [edi+48], 0

; 195  :     bAllowChildrenDuplicate	= TRUE; 

	mov	DWORD PTR [edi+52], 1
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h

; 68   : 	T* ptr	= (T*)Memory.mem_alloc(sizeof(T));

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	esi

; 69   : 	return new (ptr) T();

	mov	ecx, eax
	call	DWORD PTR __imp_??0motions_container@@QAE@XZ
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 196  : 	g_pMotionsContainer		= xr_new<motions_container>();

	mov	ecx, DWORD PTR __imp_?g_pMotionsContainer@@3PAVmotions_container@@A
	mov	DWORD PTR [ecx], eax

; 197  : }

	mov	eax, edi
	pop	edi
	pop	esi
	ret	0
??0CModelPool@@QAE@XZ ENDP				; CModelPool::CModelPool
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??_GCModelPool@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCModelPool@@UAEPAXI@Z PROC				; CModelPool::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	call	??1CModelPool@@UAE@XZ			; CModelPool::~CModelPool
	test	BYTE PTR ___flags$[esp], 1
	je	SHORT $LN4@scalar
	push	56					; 00000038H
	push	esi
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN4@scalar:
	mov	eax, esi
	pop	esi
	ret	4
??_GCModelPool@@UAEPAXI@Z ENDP				; CModelPool::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??1?$xr_vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@@QAE@XZ
_TEXT	SEGMENT
??1?$xr_vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@@QAE@XZ PROC ; xr_vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::~xr_vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >, COMDAT
; _this$ = ecx

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

	push	esi
	mov	esi, ecx
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN6@xr_vector
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

	mov	DWORD PTR [esi], 0

; 1755 :             _Mylast  = nullptr;

	mov	DWORD PTR [esi+4], 0

; 1756 :             _Myend   = nullptr;

	mov	DWORD PTR [esi+8], 0
$LN6@xr_vector:
	pop	esi
	ret	0
??1?$xr_vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@@QAE@XZ ENDP ; xr_vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::~xr_vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??1?$xr_vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@@QAE@XZ
_TEXT	SEGMENT
??1?$xr_vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@@QAE@XZ PROC ; xr_vector<IRender_Visual *,xalloc<IRender_Visual *> >::~xr_vector<IRender_Visual *,xalloc<IRender_Visual *> >, COMDAT
; _this$ = ecx

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

	push	esi
	mov	esi, ecx
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN6@xr_vector
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

	mov	DWORD PTR [esi], 0

; 1755 :             _Mylast  = nullptr;

	mov	DWORD PTR [esi+4], 0

; 1756 :             _Myend   = nullptr;

	mov	DWORD PTR [esi+8], 0
$LN6@xr_vector:
	pop	esi
	ret	0
??1?$xr_vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@@QAE@XZ ENDP ; xr_vector<IRender_Visual *,xalloc<IRender_Visual *> >::~xr_vector<IRender_Visual *,xalloc<IRender_Visual *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??0?$xr_map@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@@@QAE@XZ
_TEXT	SEGMENT
??0?$xr_map@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@@@QAE@XZ PROC ; xr_map<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> > >::xr_map<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> > >, COMDAT
; _this$ = ecx

; 435  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

	push	esi
	mov	esi, ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	push	24					; 00000018H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 435  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+4], 0
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 345  :         _Construct_in_place(_Pnode->_Left, _Pnode);

	mov	DWORD PTR [eax], eax

; 346  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

	mov	DWORD PTR [eax+4], eax

; 347  :         _Construct_in_place(_Pnode->_Right, _Pnode);

	mov	DWORD PTR [eax+8], eax

; 348  :         _Pnode->_Color = _Black;

	mov	WORD PTR [eax+12], 257			; 00000101H

; 1917 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

	mov	DWORD PTR [esi], eax
	mov	eax, esi
	pop	esi
	ret	0
??0?$xr_map@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@@@QAE@XZ ENDP ; xr_map<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> > >::xr_map<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
;	COMDAT ??1?$xr_map@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@@@QAE@XZ
_TEXT	SEGMENT
??1?$xr_map@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@@@QAE@XZ PROC ; xr_map<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> > >::~xr_map<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> > >, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 752  :         _Erase_tree(_Al, _Myhead->_Parent);

	push	esi
	mov	esi, ecx
	mov	eax, DWORD PTR [esi]
	push	DWORD PTR [eax+4]
	push	esi
	call	??$_Erase_tree@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@QAEXAAV?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >::_Erase_tree<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 560  :         _Al.deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR [esi]
	pop	esi
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	test	eax, eax
	je	SHORT $LN16@xr_map
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN16@xr_map:
	ret	0
??1?$xr_map@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@@@QAE@XZ ENDP ; xr_map<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> > >::~xr_map<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??0?$xr_multimap@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@@@QAE@XZ
_TEXT	SEGMENT
??0?$xr_multimap@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@@@QAE@XZ PROC ; xr_multimap<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> > >::xr_multimap<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> > >, COMDAT
; _this$ = ecx

; 435  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

	push	esi
	mov	esi, ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	push	24					; 00000018H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 435  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+4], 0
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 345  :         _Construct_in_place(_Pnode->_Left, _Pnode);

	mov	DWORD PTR [eax], eax

; 346  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

	mov	DWORD PTR [eax+4], eax

; 347  :         _Construct_in_place(_Pnode->_Right, _Pnode);

	mov	DWORD PTR [eax+8], eax

; 348  :         _Pnode->_Color = _Black;

	mov	WORD PTR [eax+12], 257			; 00000101H

; 1917 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

	mov	DWORD PTR [esi], eax
	mov	eax, esi
	pop	esi
	ret	0
??0?$xr_multimap@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@@@QAE@XZ ENDP ; xr_multimap<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> > >::xr_multimap<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
;	COMDAT ??1?$xr_multimap@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@@@QAE@XZ
_TEXT	SEGMENT
??1?$xr_multimap@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@@@QAE@XZ PROC ; xr_multimap<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> > >::~xr_multimap<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> > >, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 752  :         _Erase_tree(_Al, _Myhead->_Parent);

	push	esi
	mov	esi, ecx
	mov	eax, DWORD PTR [esi]
	push	DWORD PTR [eax+4]
	push	esi
	call	??$_Erase_tree@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@QAEXAAV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >::_Erase_tree<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 560  :         _Al.deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR [esi]
	pop	esi
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	test	eax, eax
	je	SHORT $LN16@xr_multima
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN16@xr_multima:
	ret	0
??1?$xr_multimap@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@@@QAE@XZ ENDP ; xr_multimap<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> > >::~xr_multimap<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
;	COMDAT ??1?$map@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$map@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@@std@@QAE@XZ PROC ; std::map<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> > >::~map<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> > >, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 752  :         _Erase_tree(_Al, _Myhead->_Parent);

	push	esi
	mov	esi, ecx
	mov	eax, DWORD PTR [esi]
	push	DWORD PTR [eax+4]
	push	esi
	call	??$_Erase_tree@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@QAEXAAV?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >::_Erase_tree<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 560  :         _Al.deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR [esi]
	pop	esi
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	test	eax, eax
	je	SHORT $LN14@map
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN14@map:
	ret	0
??1?$map@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@@std@@QAE@XZ ENDP ; std::map<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> > >::~map<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
;	COMDAT ??1?$multimap@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$multimap@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@@std@@QAE@XZ PROC ; std::multimap<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> > >::~multimap<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> > >, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 752  :         _Erase_tree(_Al, _Myhead->_Parent);

	push	esi
	mov	esi, ecx
	mov	eax, DWORD PTR [esi]
	push	DWORD PTR [eax+4]
	push	esi
	call	??$_Erase_tree@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@QAEXAAV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >::_Erase_tree<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 560  :         _Al.deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR [esi]
	pop	esi
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	test	eax, eax
	je	SHORT $LN14@multimap
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN14@multimap:
	ret	0
??1?$multimap@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@@std@@QAE@XZ ENDP ; std::multimap<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> > >::~multimap<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
_TEXT	SEGMENT
_V$1 = -4						; size = 4
??1CModelPool@@UAE@XZ PROC				; CModelPool::~CModelPool
; _this$ = ecx

; 200  : {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 8
	push	ebx
	push	ebp
	mov	ebx, ecx
	push	esi
	push	edi

; 164  : 	Pool.clear			();

	lea	edi, DWORD PTR [ebx+36]

; 200  : {

	mov	DWORD PTR [ebx], OFFSET ??_7CModelPool@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1343 :         _Scary->_Erase_tree(_Getal(), _Head->_Parent);

	mov	ecx, edi
	mov	esi, DWORD PTR [edi]
	push	DWORD PTR [esi+4]
	push	edi
	call	??$_Erase_tree@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@QAEXAAV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >::_Erase_tree<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >

; 1344 :         _Head->_Parent  = _Head;

	mov	DWORD PTR [esi+4], esi

; 1345 :         _Head->_Left    = _Head;

	mov	DWORD PTR [esi], esi

; 1346 :         _Head->_Right   = _Head;

	mov	DWORD PTR [esi+8], esi

; 1347 :         _Scary->_Mysize = 0;

	mov	DWORD PTR [edi+4], 0

; 1211 :         return size() == 0;

	cmp	DWORD PTR [ebx+32], 0
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 167  : 	while(!Registry.empty()){

	je	SHORT $LN5@CModelPool
	npad	6
$LL4@CModelPool:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1135 :         return iterator(_Scary->_Myhead->_Left, _Scary);

	mov	eax, DWORD PTR [ebx+28]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 169  : 		IRender_Visual* V=(IRender_Visual*)it->first;

	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _V$1[esp+24], ecx
	test	ecx, ecx

; 282  :     if (!V)					return;

	je	SHORT $LN28@CModelPool

; 283  : 	V->Depart				();

	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+20]

; 284  : 	if (bDiscard||bForceDiscard){
; 285  :     	Discard	(V, TRUE); 

	push	1
	lea	eax, DWORD PTR _V$1[esp+28]
	mov	ecx, ebx
	push	eax
	call	?Discard@CModelPool@@QAEXAAPAVIRender_Visual@@H@Z ; CModelPool::Discard
$LN28@CModelPool:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1211 :         return size() == 0;

	cmp	DWORD PTR [ebx+32], 0
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 167  : 	while(!Registry.empty()){

	jne	SHORT $LL4@CModelPool
$LN5@CModelPool:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1463 :         return iterator(_My_data._Myfirst, _STD addressof(_My_data));

	mov	ebp, DWORD PTR [ebx+4]

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	esi, DWORD PTR [ebx+8]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 179  : 	for (; I!=E; I++)

	mov	edi, DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	cmp	ebp, esi
	je	SHORT $LN7@CModelPool
	npad	7
$LL8@CModelPool:

; 180  : 	{
; 181  : 		I->model->Release();

	mov	ecx, DWORD PTR [ebp+4]
	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+8]
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h

; 151  : 	if (ptr) 

	mov	eax, DWORD PTR [ebp+4]
	test	eax, eax
	je	SHORT $LN6@CModelPool

; 132  : 		void*	_real_ptr	= dynamic_cast<void*>(ptr);

	push	eax
	call	___RTCastToVoid

; 133  : 		ptr->~T			();

	mov	ecx, DWORD PTR [ebp+4]
	add	esp, 4
	mov	edi, eax
	mov	edx, DWORD PTR [ecx]
	push	0
	call	DWORD PTR [edx+36]

; 134  : 		Memory.mem_free	(_real_ptr);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	edi
	mov	edi, DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	call	edi

; 154  : 		ptr = nullptr;

	mov	DWORD PTR [ebp+4], 0
$LN6@CModelPool:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 74   :         ++_Ptr;

	add	ebp, 12					; 0000000cH
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 179  : 	for (; I!=E; I++)

	cmp	ebp, esi
	jne	SHORT $LL8@CModelPool
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h

; 154  : 		ptr = nullptr;

	mov	ebp, DWORD PTR [ebx+4]
$LN7@CModelPool:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 185  : 	Models.clear();

	mov	DWORD PTR [ebx+8], ebp

; 186  : 
; 187  : 	// cleanup motions container
; 188  : 	g_pMotionsContainer->clean(false);

	mov	ecx, DWORD PTR __imp_?g_pMotionsContainer@@3PAVmotions_container@@A
	push	0
	mov	ecx, DWORD PTR [ecx]
	call	DWORD PTR __imp_?clean@motions_container@@QAEX_N@Z

; 201  : 	Destroy					();
; 202  : 	xr_delete				(g_pMotionsContainer);

	mov	esi, DWORD PTR __imp_?g_pMotionsContainer@@3PAVmotions_container@@A
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h

; 151  : 	if (ptr) 

	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN248@CModelPool
	call	DWORD PTR __imp_??1motions_container@@QAE@XZ

; 144  : 		Memory.mem_free	(ptr);

	push	DWORD PTR [esi]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	edi

; 154  : 		ptr = nullptr;

	mov	DWORD PTR [esi], 0
$LN248@CModelPool:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 752  :         _Erase_tree(_Al, _Myhead->_Parent);

	mov	eax, DWORD PTR [ebx+36]
	lea	esi, DWORD PTR [ebx+36]
	mov	ecx, esi
	push	DWORD PTR [eax+4]
	push	esi
	call	??$_Erase_tree@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@QAEXAAV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >::_Erase_tree<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 560  :         _Al.deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR [esi]
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	test	eax, eax
	je	SHORT $LN270@CModelPool
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	edi
$LN270@CModelPool:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 752  :         _Erase_tree(_Al, _Myhead->_Parent);

	mov	eax, DWORD PTR [ebx+28]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 203  : }

	lea	esi, DWORD PTR [ebx+28]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 752  :         _Erase_tree(_Al, _Myhead->_Parent);

	mov	ecx, esi
	push	DWORD PTR [eax+4]
	push	esi
	call	??$_Erase_tree@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@QAEXAAV?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >::_Erase_tree<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 560  :         _Al.deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR [esi]
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	test	eax, eax
	je	SHORT $LN287@CModelPool
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	edi
$LN287@CModelPool:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

	mov	eax, DWORD PTR [ebx+16]
	test	eax, eax
	je	SHORT $LN294@CModelPool
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

	mov	DWORD PTR [ebx+16], 0

; 1755 :             _Mylast  = nullptr;

	mov	DWORD PTR [ebx+20], 0

; 1756 :             _Myend   = nullptr;

	mov	DWORD PTR [ebx+24], 0
$LN294@CModelPool:

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

	mov	eax, DWORD PTR [ebx+4]
	test	eax, eax
	je	SHORT $LN306@CModelPool
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

	mov	DWORD PTR [ebx+4], 0

; 1755 :             _Mylast  = nullptr;

	mov	DWORD PTR [ebx+8], 0

; 1756 :             _Myend   = nullptr;

	mov	DWORD PTR [ebx+12], 0
$LN306@CModelPool:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 203  : }

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1CModelPool@@UAE@XZ ENDP				; CModelPool::~CModelPool
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
_TEXT	SEGMENT
_N$ = 8							; size = 4
?Instance_Find@CModelPool@@QAEPAVIRender_Visual@@PBD@Z PROC ; CModelPool::Instance_Find
; _this$ = ecx

; 209  : 	for (I=Models.begin(); I!=Models.end(); I++)

	mov	eax, DWORD PTR [ecx+4]
	push	edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 150  :         return _Ptr == _Right._Ptr;

	mov	edi, DWORD PTR [ecx+8]
	cmp	eax, edi
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 209  : 	for (I=Models.begin(); I!=Models.end(); I++)

	je	SHORT $LN51@Instance_F
	push	ebp
	mov	ebp, DWORD PTR _N$[esp+4]
	push	ebx
	push	esi
$LL4@Instance_F:
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 67   : 	char				operator[]	(size_t id)						{	return p_->value[id];							}

	mov	esi, DWORD PTR [eax]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 211  : 		if (I->name[0]&&(0==xr_strcmp(*I->name,N))) {

	cmp	BYTE PTR [esi+12], 0
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 67   : 	char				operator[]	(size_t id)						{	return p_->value[id];							}

	lea	ecx, DWORD PTR [esi+12]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 211  : 		if (I->name[0]&&(0==xr_strcmp(*I->name,N))) {

	je	SHORT $LN2@Instance_F
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 183  : {	return (int)strcmp(S1,S2);  }

	xor	ebx, ebx
	mov	edx, ebp
	test	esi, esi
	cmove	ecx, ebx
$LL46@Instance_F:
	mov	bl, BYTE PTR [ecx]
	cmp	bl, BYTE PTR [edx]
	jne	SHORT $LN47@Instance_F
	test	bl, bl
	je	SHORT $LN48@Instance_F
	mov	bl, BYTE PTR [ecx+1]
	cmp	bl, BYTE PTR [edx+1]
	jne	SHORT $LN47@Instance_F
	add	ecx, 2
	add	edx, 2
	test	bl, bl
	jne	SHORT $LL46@Instance_F
$LN48@Instance_F:
	xor	ecx, ecx
	jmp	SHORT $LN49@Instance_F
$LN47@Instance_F:
	sbb	ecx, ecx
	or	ecx, 1
$LN49@Instance_F:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 211  : 		if (I->name[0]&&(0==xr_strcmp(*I->name,N))) {

	test	ecx, ecx
	je	SHORT $LN40@Instance_F
$LN2@Instance_F:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 74   :         ++_Ptr;

	add	eax, 12					; 0000000cH

; 150  :         return _Ptr == _Right._Ptr;

	cmp	eax, edi
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 209  : 	for (I=Models.begin(); I!=Models.end(); I++)

	jne	SHORT $LL4@Instance_F

; 212  : 			Model = I->model;
; 213  : 			break;
; 214  : 		}
; 215  : 	}
; 216  : 	return Model;

	pop	esi
	pop	ebx
	pop	ebp
	xor	eax, eax
	pop	edi

; 217  : }

	ret	4
$LN40@Instance_F:

; 212  : 			Model = I->model;
; 213  : 			break;
; 214  : 		}
; 215  : 	}
; 216  : 	return Model;

	mov	eax, DWORD PTR [eax+4]
	pop	esi
	pop	ebx
	pop	ebp
	pop	edi

; 217  : }

	ret	4
$LN51@Instance_F:

; 212  : 			Model = I->model;
; 213  : 			break;
; 214  : 		}
; 215  : 	}
; 216  : 	return Model;

	xor	eax, eax
	pop	edi

; 217  : }

	ret	4
?Instance_Find@CModelPool@@QAEPAVIRender_Visual@@PBD@Z ENDP ; CModelPool::Instance_Find
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CModelPool::ModelDef> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<CModelPool::ModelDef> > >, COMDAT
; _this$ = ecx

; 39   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator() noexcept : _Ptr() {}

	mov	DWORD PTR [ecx], 0
	mov	eax, ecx
	ret	0
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CModelPool::ModelDef> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<CModelPool::ModelDef> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
_TEXT	SEGMENT
__Loc$3$ = -592						; size = 4
$T2 = -592						; size = 4
__Myhead$1$ = -588					; size = 4
_it$ = -588						; size = 4
__Loc$2$ = -584						; size = 4
$T3 = -584						; size = 8
$T4 = -576						; size = 12
_H$5 = -564						; size = 44
_low_name$ = -520					; size = 520
_name$ = 8						; size = 4
_data$ = 12						; size = 4
?Create@CModelPool@@QAEPAVIRender_Visual@@PBDPAVIReader@@@Z PROC ; CModelPool::Create
; _this$ = ecx

; 220  : {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H

; 225  : 	strcpy(low_name,name);	strlwr	(low_name);

	mov	edx, DWORD PTR _name$[ebp]
	sub	esp, 596				; 00000254H
	push	ebx
	push	esi
	lea	esi, DWORD PTR _low_name$[esp+604]
	push	edi
	mov	edi, ecx
	sub	esi, edx
	npad	6
$LL12@Create:
	mov	al, BYTE PTR [edx]
	lea	edx, DWORD PTR [edx+1]
	mov	BYTE PTR [esi+edx-1], al
	test	al, al
	jne	SHORT $LL12@Create
	lea	eax, DWORD PTR _low_name$[esp+608]
	push	eax
	call	DWORD PTR __imp__strlwr
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 171  : {	return (char*) strrchr(S,'.');	}

	mov	esi, DWORD PTR __imp__strrchr
	lea	eax, DWORD PTR _low_name$[esp+612]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 225  : 	strcpy(low_name,name);	strlwr	(low_name);

	add	esp, 4
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 171  : {	return (char*) strrchr(S,'.');	}

	push	46					; 0000002eH
	push	eax
	call	esi
	add	esp, 8
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 226  : 	if (strext(low_name))	*strext	(low_name)=0;

	test	eax, eax
	je	SHORT $LN5@Create
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 171  : {	return (char*) strrchr(S,'.');	}

	lea	eax, DWORD PTR _low_name$[esp+608]
	push	46					; 0000002eH
	push	eax
	call	esi
	add	esp, 8
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 226  : 	if (strext(low_name))	*strext	(low_name)=0;

	mov	BYTE PTR [eax], 0
$LN5@Create:
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 52   : 	void				_set		(str_c rhs) 					{	str_value* v = g_pStringContainer->dock(rhs); if (0!=v) v->dwReference++; _dec(); p_ = v;	}

	mov	ecx, DWORD PTR __imp_?g_pStringContainer@@3PAVstr_container@@A
	lea	eax, DWORD PTR _low_name$[esp+608]
	push	eax
	mov	ecx, DWORD PTR [ecx]
	call	DWORD PTR __imp_?dock@str_container@@QAEPAUstr_value@@PBD@Z
	mov	esi, eax
	lea	ebx, DWORD PTR [edi+36]
	mov	DWORD PTR $T2[esp+608], esi
	lea	eax, DWORD PTR $T2[esp+608]
	mov	ecx, ebx
	push	eax
	lea	eax, DWORD PTR _it$[esp+612]
	push	eax
	test	esi, esi
	je	SHORT $LN223@Create
	inc	DWORD PTR [esi]
	call	?find@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@2@ABVshared_str@@@Z ; std::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >::find

; 50   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	dec	DWORD PTR [esi]
	jmp	SHORT $LN30@Create
$LN223@Create:

; 52   : 	void				_set		(str_c rhs) 					{	str_value* v = g_pStringContainer->dock(rhs); if (0!=v) v->dwReference++; _dec(); p_ = v;	}

	call	?find@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@2@ABVshared_str@@@Z ; std::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >::find
$LN30@Create:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 233  :         return this->_Ptr == _Right._Ptr;

	mov	esi, DWORD PTR _it$[esp+608]
	cmp	esi, DWORD PTR [ebx]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 231  : 	if (it!=Pool.end())

	je	SHORT $LN6@Create

; 232  : 	{
; 233  : 		// 1. Instance found
; 234  :         IRender_Visual*		Model	= it->second;

	mov	edi, DWORD PTR [esi+20]

; 235  : 		Model->Spawn		();

	mov	ecx, edi
	mov	eax, DWORD PTR [edi]
	call	DWORD PTR [eax+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1284 :         _Nodeptr _Erasednode = _Scary->_Extract(_Where); // node to erase

	push	esi
	mov	ecx, ebx
	call	?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >::_Extract
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 50   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	mov	ecx, DWORD PTR [eax+16]
	test	ecx, ecx
	je	SHORT $LN73@Create
	dec	DWORD PTR [ecx]
	mov	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN73@Create
	mov	DWORD PTR [eax+16], 0
$LN73@Create:
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	test	eax, eax
	je	SHORT $LN82@Create
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN82@Create:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 237  : 		return				Model;

	mov	eax, edi

; 257  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
$LN6@Create:

; 238  : 	} else {
; 239  : 		// 1. Search for already loaded model (reference, base model)
; 240  : 		IRender_Visual* Base		= Instance_Find		(low_name);

	lea	eax, DWORD PTR _low_name$[esp+608]
	mov	ecx, edi
	push	eax
	call	?Instance_Find@CModelPool@@QAEPAVIRender_Visual@@PBD@Z ; CModelPool::Instance_Find
	mov	esi, eax

; 241  : 
; 242  : 		if (0==Base){

	test	esi, esi
	jne	SHORT $LN96@Create

; 243  : 			// 2. If not found
; 244  : 			bAllowChildrenDuplicate	= FALSE;
; 245  : 			if (data)		Base = Instance_Load(low_name,data,TRUE);

	mov	ebx, DWORD PTR _data$[ebp]
	mov	DWORD PTR [edi+52], eax
	test	ebx, ebx
	je	SHORT $LN9@Create

; 142  : 	data->r_chunk_safe	(OGF_HEADER,&H,sizeof(H));

	push	44					; 0000002cH
	lea	eax, DWORD PTR _H$5[esp+612]
	mov	ecx, ebx
	push	eax
	push	1
	call	DWORD PTR __imp_?r_chunk_safe@?$IReaderBase@VIReader@@@@QAEHIPAXI@Z

; 143  : 	V = Instance_Create (H.type);

	movzx	eax, BYTE PTR _H$5[esp+609]
	push	eax
	call	?Instance_Create@CModelPool@@QAEPAVIRender_Visual@@I@Z ; CModelPool::Instance_Create
	mov	esi, eax

; 144  : 	V->Load				(name,data,0);

	lea	ecx, DWORD PTR _low_name$[esp+608]
	push	0
	push	ebx
	push	ecx
	mov	eax, DWORD PTR [esi]
	mov	ecx, esi
	call	DWORD PTR [eax+4]

; 145  : 
; 146  : 	// Registration
; 147  : 	if (allow_register) Instance_Register(name,V);

	push	esi
	lea	eax, DWORD PTR _low_name$[esp+612]
	mov	ecx, edi
	push	eax
	call	?Instance_Register@CModelPool@@QAEXPBDPAVIRender_Visual@@@Z ; CModelPool::Instance_Register

; 243  : 			// 2. If not found
; 244  : 			bAllowChildrenDuplicate	= FALSE;
; 245  : 			if (data)		Base = Instance_Load(low_name,data,TRUE);

	jmp	SHORT $LN10@Create
$LN9@Create:

; 246  :             else			Base = Instance_Load(low_name,TRUE);

	push	1
	lea	eax, DWORD PTR _low_name$[esp+612]
	mov	ecx, edi
	push	eax
	call	?Instance_Load@CModelPool@@QAEPAVIRender_Visual@@PBDH@Z ; CModelPool::Instance_Load
	mov	esi, eax
$LN10@Create:

; 247  : 			bAllowChildrenDuplicate	= TRUE;

	mov	DWORD PTR [edi+52], 1
$LN96@Create:

; 83   : 	R_ASSERT(V);

	cmp	BYTE PTR ?ignore_always@?3??Instance_Duplicate@CModelPool@@QAEPAVIRender_Visual@@PAV3@@Z@4_NA, 0
	jne	SHORT $LN94@Create
	test	esi, esi
	jne	SHORT $LN94@Create
	mov	ecx, DWORD PTR __imp_?Debug@@3VxrDebug@@A
	push	OFFSET ?ignore_always@?3??Instance_Duplicate@CModelPool@@QAEPAVIRender_Visual@@PAV3@@Z@4_NA
	push	OFFSET ??_C@_0BP@KMCMNMJD@CModelPool?3?3Instance_Duplicate@
	push	83					; 00000053H
	push	OFFSET ??_C@_0DJ@HJNKECDB@I?3?2Vitalya?2mine?2NSProjectX?2laye@
	push	OFFSET ??_C@_01FCMHBHNC@V@
	call	DWORD PTR __imp_?fail@xrDebug@@QAEXPBD0H0AA_N@Z
$LN94@Create:

; 84   : 	IRender_Visual* N		= Instance_Create(V->Type);

	push	DWORD PTR [esi+4]
	call	?Instance_Create@CModelPool@@QAEPAVIRender_Visual@@I@Z ; CModelPool::Instance_Create
	mov	ebx, eax

; 85   : 	N->Copy			(V);

	push	esi
	mov	ecx, ebx
	mov	edx, DWORD PTR [ebx]
	call	DWORD PTR [edx+12]

; 86   : 	N->Spawn		();

	mov	edx, DWORD PTR [ebx]
	mov	ecx, ebx
	call	DWORD PTR [edx+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR [edi+4]

; 150  :         return _Ptr == _Right._Ptr;

	mov	ecx, DWORD PTR [edi+8]
	cmp	eax, ecx
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 88   : 	for (xr_vector<ModelDef>::iterator I=Models.begin(); I!=Models.end(); I++) 

	je	SHORT $LN98@Create
	npad	5
$LL99@Create:

; 89   : 		if (I->model==V){ I->refs++; break;}

	cmp	DWORD PTR [eax+4], esi
	je	SHORT $LN216@Create
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 74   :         ++_Ptr;

	add	eax, 12					; 0000000cH

; 150  :         return _Ptr == _Right._Ptr;

	cmp	eax, ecx
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 88   : 	for (xr_vector<ModelDef>::iterator I=Models.begin(); I!=Models.end(); I++) 

	jne	SHORT $LL99@Create

; 89   : 		if (I->model==V){ I->refs++; break;}

	jmp	SHORT $LN98@Create
$LN216@Create:
	inc	DWORD PTR [eax+8]
$LN98@Create:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	lea	eax, DWORD PTR _low_name$[esp+608]
	mov	DWORD PTR $T3[esp+608], ebx
	mov	DWORD PTR $T3[esp+612], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1006 :             _Loc                = _Find_lower_bound(_Keyval);

	lea	ecx, DWORD PTR [edi+28]
	lea	eax, DWORD PTR $T3[esp+608]
	push	eax
	lea	eax, DWORD PTR $T4[esp+612]
	push	eax
	call	??$_Find_lower_bound@PAVIRender_Visual@@@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@1@ABQAVIRender_Visual@@@Z ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::_Find_lower_bound<IRender_Visual *>
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Loc$2$[esp+608], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR __Loc$3$[esp+608], ecx

; 1591 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

	cmp	BYTE PTR [eax+13], 0
	jne	SHORT $LN136@Create
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

	cmp	ebx, DWORD PTR [eax+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1591 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

	jae	SHORT $LN131@Create
$LN136@Create:

; 1615 :         if (max_size() == _Get_scary()->_Mysize) {

	cmp	DWORD PTR [edi+32], 178956970		; 0aaaaaaaH
	je	SHORT $LN227@Create

; 1012 :             _Inserted = _Tree_temp_node<_Alnode>(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...)._Release();

	mov	eax, DWORD PTR [edi+28]
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	24					; 00000018H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1012 :             _Inserted = _Tree_temp_node<_Alnode>(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...)._Release();

	mov	DWORD PTR __Myhead$1$[esp+612], eax
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 52   : 	void				_set		(str_c rhs) 					{	str_value* v = g_pStringContainer->dock(rhs); if (0!=v) v->dwReference++; _dec(); p_ = v;	}

	mov	ecx, DWORD PTR __imp_?g_pStringContainer@@3PAVstr_container@@A
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 966  :         _Ptr = _Al.allocate(1);

	mov	esi, eax
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 52   : 	void				_set		(str_c rhs) 					{	str_value* v = g_pStringContainer->dock(rhs); if (0!=v) v->dwReference++; _dec(); p_ = v;	}

	lea	eax, DWORD PTR _low_name$[esp+608]
	push	eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 242  :         : first(_STD forward<_Other1>(_Right.first)), second(_STD forward<_Other2>(_Right.second)) {}

	mov	DWORD PTR [esi+16], ebx
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 58   : 						shared_str	(str_c rhs) 					{	p_ = 0;	_set(rhs);								}

	mov	DWORD PTR [esi+20], 0

; 52   : 	void				_set		(str_c rhs) 					{	str_value* v = g_pStringContainer->dock(rhs); if (0!=v) v->dwReference++; _dec(); p_ = v;	}

	mov	ecx, DWORD PTR [ecx]
	call	DWORD PTR __imp_?dock@str_container@@QAEPAUstr_value@@PBD@Z
	test	eax, eax
	je	SHORT $LN165@Create
	inc	DWORD PTR [eax]
$LN165@Create:

; 50   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	mov	ecx, DWORD PTR [esi+20]
	test	ecx, ecx
	je	SHORT $LN169@Create
	dec	DWORD PTR [ecx]
$LN169@Create:

; 52   : 	void				_set		(str_c rhs) 					{	str_value* v = g_pStringContainer->dock(rhs); if (0!=v) v->dwReference++; _dec(); p_ = v;	}

	mov	DWORD PTR [esi+20], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1031 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

	lea	ecx, DWORD PTR [edi+28]

; 806  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

	mov	eax, DWORD PTR __Myhead$1$[esp+608]

; 1031 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

	push	esi
	push	DWORD PTR __Loc$3$[esp+612]

; 806  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

	mov	DWORD PTR [esi], eax

; 1031 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

	push	DWORD PTR __Loc$2$[esp+616]

; 807  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

	mov	DWORD PTR [esi+4], eax

; 808  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

	mov	DWORD PTR [esi+8], eax

; 809  :         this->_Ptr->_Color = _Red;

	mov	WORD PTR [esi+12], 0

; 1031 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

	call	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >::_Insert_node
$LN131@Create:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 257  : }

	pop	edi
	pop	esi
	mov	eax, ebx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
$LN227@Create:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1616 :             _Throw_tree_length_error();

	call	?_Throw_tree_length_error@std@@YAXXZ	; std::_Throw_tree_length_error
$LN225@Create:
	int	3
?Create@CModelPool@@QAEPAVIRender_Visual@@PBDPAVIReader@@@Z ENDP ; CModelPool::Create
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
_TEXT	SEGMENT
_H$1 = -300						; size = 44
_low_name$ = -256					; size = 256
_name$ = 8						; size = 4
_data$ = 12						; size = 4
?CreateChild@CModelPool@@QAEPAVIRender_Visual@@PBDPAVIReader@@@Z PROC ; CModelPool::CreateChild
; _this$ = ecx

; 261  : 	string256 low_name;		VERIFY	(xr_strlen(name)<256);
; 262  : 	strcpy(low_name,name);	strlwr	(low_name);

	mov	edx, DWORD PTR _name$[esp-4]
	sub	esp, 300				; 0000012cH
	push	ebx
	push	esi
	lea	esi, DWORD PTR _low_name$[esp+308]
	push	edi
	mov	edi, ecx
	sub	esi, edx
$LL10@CreateChil:
	mov	al, BYTE PTR [edx]
	lea	edx, DWORD PTR [edx+1]
	mov	BYTE PTR [esi+edx-1], al
	test	al, al
	jne	SHORT $LL10@CreateChil
	lea	eax, DWORD PTR _low_name$[esp+312]
	push	eax
	call	DWORD PTR __imp__strlwr
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 171  : {	return (char*) strrchr(S,'.');	}

	mov	esi, DWORD PTR __imp__strrchr
	lea	eax, DWORD PTR _low_name$[esp+316]
	push	46					; 0000002eH
	push	eax
	call	esi
	add	esp, 12					; 0000000cH
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 263  : 	if (strext(low_name))	*strext	(low_name) = 0;

	test	eax, eax
	je	SHORT $LN5@CreateChil
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 171  : {	return (char*) strrchr(S,'.');	}

	lea	eax, DWORD PTR _low_name$[esp+312]
	push	46					; 0000002eH
	push	eax
	call	esi
	add	esp, 8
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 263  : 	if (strext(low_name))	*strext	(low_name) = 0;

	mov	BYTE PTR [eax], 0
$LN5@CreateChil:

; 264  : 
; 265  : 	// 1. Search for already loaded model
; 266  : 	IRender_Visual* Base	= Instance_Find(low_name);

	lea	eax, DWORD PTR _low_name$[esp+312]
	mov	ecx, edi
	push	eax
	call	?Instance_Find@CModelPool@@QAEPAVIRender_Visual@@PBD@Z ; CModelPool::Instance_Find
	mov	esi, eax

; 267  : //.	if (0==Base) Base	 	= Instance_Load(name,data,FALSE);
; 268  : 	if(0==Base)

	test	esi, esi
	jne	SHORT $LN8@CreateChil

; 269  : 	{
; 270  : 		if (data)		Base = Instance_Load	(low_name,data,FALSE);

	mov	ebx, DWORD PTR _data$[esp+308]
	test	ebx, ebx
	je	SHORT $LN7@CreateChil

; 142  : 	data->r_chunk_safe	(OGF_HEADER,&H,sizeof(H));

	push	44					; 0000002cH
	lea	eax, DWORD PTR _H$1[esp+316]
	mov	ecx, ebx
	push	eax
	push	1
	call	DWORD PTR __imp_?r_chunk_safe@?$IReaderBase@VIReader@@@@QAEHIPAXI@Z

; 143  : 	V = Instance_Create (H.type);

	movzx	eax, BYTE PTR _H$1[esp+313]
	push	eax
	call	?Instance_Create@CModelPool@@QAEPAVIRender_Visual@@I@Z ; CModelPool::Instance_Create
	mov	esi, eax

; 144  : 	V->Load				(name,data,0);

	lea	ecx, DWORD PTR _low_name$[esp+312]
	push	0
	push	ebx
	push	ecx
	mov	eax, DWORD PTR [esi]
	mov	ecx, esi
	call	DWORD PTR [eax+4]

; 269  : 	{
; 270  : 		if (data)		Base = Instance_Load	(low_name,data,FALSE);

	jmp	SHORT $LN8@CreateChil
$LN7@CreateChil:

; 271  : 		else			Base = Instance_Load	(low_name,FALSE);

	push	0
	lea	eax, DWORD PTR _low_name$[esp+316]
	mov	ecx, edi
	push	eax
	call	?Instance_Load@CModelPool@@QAEPAVIRender_Visual@@PBDH@Z ; CModelPool::Instance_Load
	mov	esi, eax
$LN8@CreateChil:

; 272  : 	}
; 273  : 
; 274  :     IRender_Visual* Model	= bAllowChildrenDuplicate?Instance_Duplicate(Base):Base;

	cmp	DWORD PTR [edi+52], 0
	je	SHORT $LN11@CreateChil

; 83   : 	R_ASSERT(V);

	cmp	BYTE PTR ?ignore_always@?3??Instance_Duplicate@CModelPool@@QAEPAVIRender_Visual@@PAV3@@Z@4_NA, 0
	jne	SHORT $LN21@CreateChil
	test	esi, esi
	jne	SHORT $LN21@CreateChil
	mov	ecx, DWORD PTR __imp_?Debug@@3VxrDebug@@A
	push	OFFSET ?ignore_always@?3??Instance_Duplicate@CModelPool@@QAEPAVIRender_Visual@@PAV3@@Z@4_NA
	push	OFFSET ??_C@_0BP@KMCMNMJD@CModelPool?3?3Instance_Duplicate@
	push	83					; 00000053H
	push	OFFSET ??_C@_0DJ@HJNKECDB@I?3?2Vitalya?2mine?2NSProjectX?2laye@
	push	OFFSET ??_C@_01FCMHBHNC@V@
	call	DWORD PTR __imp_?fail@xrDebug@@QAEXPBD0H0AA_N@Z
$LN21@CreateChil:

; 84   : 	IRender_Visual* N		= Instance_Create(V->Type);

	push	DWORD PTR [esi+4]
	call	?Instance_Create@CModelPool@@QAEPAVIRender_Visual@@I@Z ; CModelPool::Instance_Create
	mov	ebx, eax

; 85   : 	N->Copy			(V);

	push	esi
	mov	ecx, ebx
	mov	eax, DWORD PTR [ebx]
	call	DWORD PTR [eax+12]

; 86   : 	N->Spawn		();

	mov	eax, DWORD PTR [ebx]
	mov	ecx, ebx
	call	DWORD PTR [eax+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR [edi+4]

; 150  :         return _Ptr == _Right._Ptr;

	mov	ecx, DWORD PTR [edi+8]
	cmp	eax, ecx
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 88   : 	for (xr_vector<ModelDef>::iterator I=Models.begin(); I!=Models.end(); I++) 

	je	SHORT $LN25@CreateChil
$LL26@CreateChil:

; 89   : 		if (I->model==V){ I->refs++; break;}

	cmp	DWORD PTR [eax+4], esi
	je	SHORT $LN52@CreateChil
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 74   :         ++_Ptr;

	add	eax, 12					; 0000000cH

; 150  :         return _Ptr == _Right._Ptr;

	cmp	eax, ecx
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 88   : 	for (xr_vector<ModelDef>::iterator I=Models.begin(); I!=Models.end(); I++) 

	jne	SHORT $LL26@CreateChil

; 276  : }

	pop	edi
	pop	esi
	mov	eax, ebx
	pop	ebx
	add	esp, 300				; 0000012cH
	ret	8
$LN52@CreateChil:

; 89   : 		if (I->model==V){ I->refs++; break;}

	inc	DWORD PTR [eax+8]
$LN25@CreateChil:
	pop	edi

; 276  : }

	pop	esi
	mov	eax, ebx
	pop	ebx
	add	esp, 300				; 0000012cH
	ret	8
$LN11@CreateChil:
	pop	edi

; 275  :     return					Model;

	mov	eax, esi

; 276  : }

	pop	esi
	pop	ebx
	add	esp, 300				; 0000012cH
	ret	8
?CreateChild@CModelPool@@QAEPAVIRender_Visual@@PBDPAVIReader@@@Z ENDP ; CModelPool::CreateChild
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\modelpool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
_TEXT	SEGMENT
_this$1$ = -28						; size = 4
__Newnode$2$sroa$469$1$ = -24				; size = 4
_v$1$ = -20						; size = 4
$T3 = -16						; size = 4
$T4 = -16						; size = 4
__Loc$5 = -12						; size = 12
_V$ = 8							; size = 4
_bDiscard$ = 12						; size = 4
?DeleteInternal@CModelPool@@QAEXAAPAVIRender_Visual@@H@Z PROC ; CModelPool::DeleteInternal
; _this$ = ecx

; 280  : {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 28					; 0000001cH
	push	ebx

; 281  : 	VERIFY					(!g_bRendering);
; 282  :     if (!V)					return;

	mov	ebx, DWORD PTR _V$[ebp]
	push	esi
	mov	esi, ecx
	push	edi
	mov	ecx, DWORD PTR [ebx]
	test	ecx, ecx
	je	$LN1@DeleteInte

; 283  : 	V->Depart				();

	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+20]

; 284  : 	if (bDiscard||bForceDiscard){

	cmp	DWORD PTR _bDiscard$[ebp], 0
	jne	$LN8@DeleteInte
	cmp	DWORD PTR [esi+48], 0
	jne	$LN8@DeleteInte
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1353 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

	push	ebx
	lea	eax, DWORD PTR __Loc$5[esp+44]
	push	eax
	lea	ecx, DWORD PTR [esi+28]
	call	??$_Find_lower_bound@PAVIRender_Visual@@@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@1@ABQAVIRender_Visual@@@Z ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::_Find_lower_bound<IRender_Visual *>

; 1591 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

	mov	ecx, DWORD PTR __Loc$5[esp+48]
	cmp	BYTE PTR [ecx+13], 0
	jne	SHORT $LN15@DeleteInte
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

	mov	eax, DWORD PTR [ebx]
	cmp	eax, DWORD PTR [ecx+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1591 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

	jb	SHORT $LN15@DeleteInte

; 1355 :             return _Loc._Bound;

	mov	eax, DWORD PTR [esi+28]
	jmp	SHORT $LN14@DeleteInte
$LN15@DeleteInte:

; 1356 :         }
; 1357 : 
; 1358 :         return _Get_scary()->_Myhead;

	mov	ecx, DWORD PTR [esi+28]
	mov	eax, ecx
$LN14@DeleteInte:

; 233  :         return this->_Ptr == _Right._Ptr;

	cmp	ecx, eax
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 289  : 		if (it!=Registry.end())

	je	$LN9@DeleteInte
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	eax, DWORD PTR [ecx+20]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 292  : 			Pool.insert			(mk_pair(it->second,V));

	mov	edi, DWORD PTR [ebx]
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	DWORD PTR _v$1$[esp+40], eax
	push	24					; 00000018H
	test	eax, eax
	je	SHORT $LN194@DeleteInte
	inc	DWORD PTR [eax]

; 50   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	lea	eax, DWORD PTR [esi+36]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	mov	esi, DWORD PTR [eax]
	mov	DWORD PTR _this$1$[esp+44], eax
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	edx, DWORD PTR _v$1$[esp+40]

; 50   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	mov	DWORD PTR [eax+16], 0
	mov	DWORD PTR __Newnode$2$sroa$469$1$[esp+40], eax
	lea	ecx, DWORD PTR [eax+16]

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	inc	DWORD PTR [edx]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T3[esp+40], edx
	mov	edx, ecx

; 50   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	cmp	DWORD PTR $T3[esp+40], 0
	je	SHORT $LN106@DeleteInte
	mov	edx, DWORD PTR $T3[esp+40]
	dec	DWORD PTR [edx]
	mov	edx, DWORD PTR _this$1$[esp+40]
	mov	DWORD PTR _this$1$[esp+40], edx
	mov	edx, ecx
	jmp	SHORT $LN203@DeleteInte
$LN194@DeleteInte:
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	lea	eax, DWORD PTR [esi+36]
	mov	esi, DWORD PTR [eax]
	mov	DWORD PTR _this$1$[esp+44], eax
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	lea	edx, DWORD PTR [eax+16]
	mov	ecx, edx
	mov	DWORD PTR [ecx], 0
$LN203@DeleteInte:

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	DWORD PTR __Newnode$2$sroa$469$1$[esp+40], eax
$LN106@DeleteInte:
	mov	ebx, DWORD PTR _v$1$[esp+40]
	mov	DWORD PTR [ecx], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1574 :         while (!_Trynode->_Isnil) {

	mov	ebx, DWORD PTR _V$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 242  :         : first(_STD forward<_Other1>(_Right.first)), second(_STD forward<_Other2>(_Right.second)) {}

	mov	DWORD PTR [edx+4], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 806  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

	mov	DWORD PTR [eax], esi

; 807  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

	mov	DWORD PTR [eax+4], esi

; 808  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

	mov	DWORD PTR [eax+8], esi

; 809  :         this->_Ptr->_Color = _Red;

	mov	WORD PTR [eax+12], 0

; 1572 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

	mov	eax, DWORD PTR _this$1$[esp+40]
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [eax+4]
	xor	eax, eax

; 1574 :         while (!_Trynode->_Isnil) {

	cmp	BYTE PTR [ecx+13], al
	jne	SHORT $LN110@DeleteInte
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 73   : 	bool				equal		(const shared_str & rhs) const	{	return (p_ == rhs.p_);							}

	mov	edi, DWORD PTR [edx]
	mov	esi, ecx
$LL109@DeleteInte:
	mov	eax, DWORD PTR [esi+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1575 :             _Result._Location._Parent = _Trynode;

	mov	DWORD PTR $T4[esp+40], esi
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 73   : 	bool				equal		(const shared_str & rhs) const	{	return (p_ == rhs.p_);							}

	cmp	edi, eax

; 104  : 	if (a.equal(b))		return 0;

	je	SHORT $LN111@DeleteInte

; 65   : 	str_c				operator*	() const						{	return p_?p_->value:0;							}

	lea	ecx, DWORD PTR [eax+12]
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 183  : {	return (int)strcmp(S1,S2);  }

	mov	edx, edi
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 65   : 	str_c				operator*	() const						{	return p_?p_->value:0;							}

	neg	eax
	sbb	eax, eax
	and	eax, ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 183  : {	return (int)strcmp(S1,S2);  }

	neg	edx
	lea	ecx, DWORD PTR [edi+12]
	sbb	edx, edx
	and	edx, ecx
$LL198@DeleteInte:
	mov	cl, BYTE PTR [edx]
	cmp	cl, BYTE PTR [eax]
	jne	SHORT $LN199@DeleteInte
	test	cl, cl
	je	SHORT $LN200@DeleteInte
	mov	cl, BYTE PTR [edx+1]
	cmp	cl, BYTE PTR [eax+1]
	jne	SHORT $LN199@DeleteInte
	add	edx, 2
	add	eax, 2
	test	cl, cl
	jne	SHORT $LL198@DeleteInte
$LN200@DeleteInte:
	xor	eax, eax
	jmp	SHORT $LN201@DeleteInte
$LN199@DeleteInte:
	sbb	eax, eax
	or	eax, 1
$LN201@DeleteInte:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\modelpool.h

; 22   : 		{	return xr_strcmp(x,y)<0;}

	test	eax, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1576 :             if (_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Trynode->_Myval))) {

	jns	SHORT $LN111@DeleteInte

; 1577 :                 _Result._Location._Child = _Tree_child::_Left;
; 1578 :                 _Result._Bound           = _Trynode;
; 1579 :                 _Trynode                 = _Trynode->_Left;

	mov	esi, DWORD PTR [esi]
	mov	eax, 1

; 1580 :             } else {

	jmp	SHORT $LN112@DeleteInte
$LN111@DeleteInte:

; 1581 :                 _Result._Location._Child = _Tree_child::_Right;
; 1582 :                 _Trynode                 = _Trynode->_Right;

	mov	esi, DWORD PTR [esi+8]
	xor	eax, eax
$LN112@DeleteInte:

; 1574 :         while (!_Trynode->_Isnil) {

	cmp	BYTE PTR [esi+13], 0
	je	SHORT $LL109@DeleteInte
	mov	ecx, DWORD PTR $T4[esp+40]
$LN110@DeleteInte:

; 1615 :         if (max_size() == _Get_scary()->_Mysize) {

	mov	edx, DWORD PTR _this$1$[esp+40]
	cmp	DWORD PTR [edx+4], 178956970		; 0aaaaaaaH
	je	SHORT $LN205@DeleteInte

; 1031 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

	push	DWORD PTR __Newnode$2$sroa$469$1$[esp+40]
	push	eax
	push	ecx
	mov	ecx, edx
	call	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >::_Insert_node
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 50   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	mov	eax, DWORD PTR _v$1$[esp+40]
	test	eax, eax
	je	SHORT $LN10@DeleteInte
	dec	DWORD PTR [eax]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 298  : 	V	=	NULL;

	mov	DWORD PTR [ebx], 0

; 299  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
$LN9@DeleteInte:

; 293  : 		} else {
; 294  : 			// Registry entry not-found - just special type of visual / particles / etc.
; 295  : 			xr_delete			(V);

	mov	ecx, ebx
	call	??$xr_delete@VIRender_Visual@@@@YAXAAPAVIRender_Visual@@@Z ; xr_delete<IRender_Visual>

; 298  : 	V	=	NULL;

	mov	DWORD PTR [ebx], 0

; 299  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
$LN8@DeleteInte:

; 285  :     	Discard	(V, TRUE); 

	push	1
	push	ebx
	mov	ecx, esi
	call	?Discard@CModelPool@@QAEXAAPAVIRender_Visual@@H@Z ; CModelPool::Discard
$LN10@DeleteInte:

; 298  : 	V	=	NULL;

	mov	DWORD PTR [ebx], 0
$LN1@DeleteInte:

; 299  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
$LN205@DeleteInte:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1616 :             _Throw_tree_length_error();

	call	?_Throw_tree_length_error@std@@YAXXZ	; std::_Throw_tree_length_error
$LN202@DeleteInte:
	int	3
?DeleteInternal@CModelPool@@QAEXAAPAVIRender_Visual@@H@Z ENDP ; CModelPool::DeleteInternal
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
;	COMDAT ??1?$pair@Vshared_str@@PAVIRender_Visual@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$pair@Vshared_str@@PAVIRender_Visual@@@std@@QAE@XZ PROC ; std::pair<shared_str,IRender_Visual *>::~pair<shared_str,IRender_Visual *>, COMDAT
; _this$ = ecx

; 50   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	mov	eax, DWORD PTR [ecx]
	test	eax, eax
	je	SHORT $LN7@pair
	dec	DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN7@pair
	mov	DWORD PTR [ecx], 0
$LN7@pair:
	ret	0
??1?$pair@Vshared_str@@PAVIRender_Visual@@@std@@QAE@XZ ENDP ; std::pair<shared_str,IRender_Visual *>::~pair<shared_str,IRender_Visual *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
_TEXT	SEGMENT
_V$ = 8							; size = 4
_bDiscard$ = 12						; size = 4
?Delete@CModelPool@@QAEXAAPAVIRender_Visual@@H@Z PROC	; CModelPool::Delete
; _this$ = ecx

; 302  : {

	push	esi

; 303  : 	if (NULL==V)				return;

	mov	esi, DWORD PTR _V$[esp]
	mov	edx, DWORD PTR [esi]
	test	edx, edx
	je	SHORT $LN1@Delete

; 304  : 	if (g_bRendering){

	mov	eax, DWORD PTR __imp_?g_bRendering@@3HA
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN6@Delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 730  :         if (_Mylast != _My_data._Myend) {

	mov	eax, DWORD PTR [ecx+20]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 306  : 		ModelsToDelete.push_back(V);

	add	ecx, 16					; 00000010H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 730  :         if (_Mylast != _My_data._Myend) {

	cmp	eax, DWORD PTR [ecx+8]
	je	SHORT $LN12@Delete

; 713  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

	mov	DWORD PTR [eax], edx

; 714  :         _Orphan_range(_Mylast, _Mylast);
; 715  :         _Ty& _Result = *_Mylast;
; 716  :         ++_Mylast;

	add	DWORD PTR [ecx+4], 4
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 310  : 	V							=	NULL;

	mov	DWORD PTR [esi], 0

; 311  : }

	pop	esi
	ret	8
$LN12@Delete:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 734  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

	push	esi
	push	eax
	call	??$_Emplace_reallocate@ABQAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@QAEPAPAVIRender_Visual@@QAPAV2@ABQAV2@@Z ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::_Emplace_reallocate<IRender_Visual * const &>
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 310  : 	V							=	NULL;

	mov	DWORD PTR [esi], 0

; 311  : }

	pop	esi
	ret	8
$LN6@Delete:

; 307  : 	} else {
; 308  : 		DeleteInternal			(V,bDiscard);

	push	DWORD PTR _bDiscard$[esp]
	push	esi
	call	?DeleteInternal@CModelPool@@QAEXAAPAVIRender_Visual@@H@Z ; CModelPool::DeleteInternal

; 310  : 	V							=	NULL;

	mov	DWORD PTR [esi], 0
$LN1@Delete:

; 311  : }

	pop	esi
	ret	8
?Delete@CModelPool@@QAEXAAPAVIRender_Visual@@H@Z ENDP	; CModelPool::Delete
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
_TEXT	SEGMENT
?DeleteQueue@CModelPool@@QAEXXZ PROC			; CModelPool::DeleteQueue
; _this$ = ecx

; 314  : {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	push	esi
	mov	esi, ecx
	push	edi

; 315  : 	for (u32 it=0; it<ModelsToDelete.size(); it++)

	xor	edi, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	eax, DWORD PTR [esi+20]
	mov	ecx, DWORD PTR [esi+16]
	sub	eax, ecx
	sar	eax, 2
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 315  : 	for (u32 it=0; it<ModelsToDelete.size(); it++)

	test	eax, eax
	je	SHORT $LN31@DeleteQueu
	npad	5
$LL4@DeleteQueu:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 119  :         _Ptr += _Off;

	mov	eax, DWORD PTR [esi+16]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 316  : 		DeleteInternal(ModelsToDelete[it]);

	mov	ecx, esi
	push	0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 119  :         _Ptr += _Off;

	lea	eax, DWORD PTR [eax+edi*4]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 316  : 		DeleteInternal(ModelsToDelete[it]);

	push	eax
	call	?DeleteInternal@CModelPool@@QAEXAAPAVIRender_Visual@@H@Z ; CModelPool::DeleteInternal
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	eax, DWORD PTR [esi+20]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 315  : 	for (u32 it=0; it<ModelsToDelete.size(); it++)

	inc	edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	ecx, DWORD PTR [esi+16]
	sub	eax, ecx
	sar	eax, 2
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 315  : 	for (u32 it=0; it<ModelsToDelete.size(); it++)

	cmp	edi, eax
	jb	SHORT $LL4@DeleteQueu
$LN31@DeleteQueu:

; 317  : 	ModelsToDelete.clear			();
; 318  : }

	pop	edi
	mov	DWORD PTR [esi+20], ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?DeleteQueue@CModelPool@@QAEXXZ ENDP			; CModelPool::DeleteQueue
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
_TEXT	SEGMENT
_this$1$ = -16						; size = 4
__Loc$1 = -12						; size = 12
$T2 = 8							; size = 4
_V$ = 8							; size = 4
_b_complete$ = 12					; size = 4
?Discard@CModelPool@@QAEXAAPAVIRender_Visual@@H@Z PROC	; CModelPool::Discard
; _this$ = ecx

; 321  : {

	sub	esp, 16					; 00000010H
	push	ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1353 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

	mov	ebx, DWORD PTR _V$[esp+16]
	lea	eax, DWORD PTR __Loc$1[esp+20]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 321  : {

	push	ebp
	push	esi
	mov	ebp, ecx
	push	edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1353 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

	push	ebx
	push	eax
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 323  : 	REGISTRY_IT	it		= Registry.find	(V);

	lea	esi, DWORD PTR [ebp+28]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1353 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

	mov	ecx, esi
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 323  : 	REGISTRY_IT	it		= Registry.find	(V);

	mov	DWORD PTR _this$1$[esp+40], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1353 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

	call	??$_Find_lower_bound@PAVIRender_Visual@@@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@1@ABQAVIRender_Visual@@@Z ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::_Find_lower_bound<IRender_Visual *>

; 1591 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

	mov	edi, DWORD PTR __Loc$1[esp+40]
	mov	DWORD PTR $T2[esp+28], edi
	cmp	BYTE PTR [edi+13], 0
	jne	SHORT $LN20@Discard
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

	mov	eax, DWORD PTR [ebx]
	cmp	eax, DWORD PTR [edi+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1591 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

	jb	SHORT $LN20@Discard

; 1355 :             return _Loc._Bound;

	mov	eax, DWORD PTR [esi]
	jmp	SHORT $LN19@Discard
$LN20@Discard:

; 1356 :         }
; 1357 : 
; 1358 :         return _Get_scary()->_Myhead;

	mov	edi, DWORD PTR [esi]
	mov	eax, edi
	mov	DWORD PTR $T2[esp+28], edi
$LN19@Discard:

; 233  :         return this->_Ptr == _Right._Ptr;

	cmp	edi, eax
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 324  : 	if (it!=Registry.end())

	je	$LN8@Discard
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	esi, DWORD PTR [ebp+4]
	mov	eax, DWORD PTR [ebp+8]

; 150  :         return _Ptr == _Right._Ptr;

	cmp	esi, eax
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 333  : 			for (; I!=I_e; ++I)

	je	$LN14@Discard
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 93   : IC bool operator	==	(shared_str const & a, shared_str const & b)		{ return a._get() == b._get();					}

	mov	ecx, DWORD PTR [edi+20]
	npad	5
$LL4@Discard:
	cmp	DWORD PTR [esi], ecx
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 335  : 				if (I->name==name)

	je	SHORT $LN157@Discard
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 74   :         ++_Ptr;

	add	esi, 12					; 0000000cH

; 150  :         return _Ptr == _Right._Ptr;

	cmp	esi, eax
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 333  : 			for (; I!=I_e; ++I)

	jne	SHORT $LL4@Discard

; 335  : 				if (I->name==name)

	jmp	$LN14@Discard
$LN157@Discard:

; 336  : 				{
; 337  : 					if(b_complete || strchr(*name,'#'))

	cmp	DWORD PTR _b_complete$[esp+28], 0
	jne	SHORT $LN7@Discard
	lea	eax, DWORD PTR [ecx+12]
	neg	ecx
	push	35					; 00000023H
	sbb	ecx, ecx
	and	ecx, eax
	push	ecx
	call	DWORD PTR __imp__strchr
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN7@Discard

; 348  : 						}
; 349  : 						break;
; 350  : 					}else{
; 351  : 					if(I->refs>0)

	mov	eax, DWORD PTR [esi+8]
	test	eax, eax
	je	$LN14@Discard

; 352  : 						I->refs--;

	dec	eax
	mov	DWORD PTR [esi+8], eax

; 353  : 					break;

	jmp	$LN14@Discard
$LN7@Discard:

; 338  : 					{
; 339  : 						VERIFY(I->refs>0);
; 340  :             			I->refs--; 

	add	DWORD PTR [esi+8], -1

; 341  : 						if (0==I->refs)

	jne	$LN14@Discard

; 342  : 						{
; 343  :                 			bForceDiscard		= TRUE;

	mov	DWORD PTR [ebp+48], 1

; 344  : 	            			I->model->Release	();

	mov	ecx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+8]
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h

; 151  : 	if (ptr) 

	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $LN79@Discard

; 132  : 		void*	_real_ptr	= dynamic_cast<void*>(ptr);

	push	eax
	call	___RTCastToVoid

; 133  : 		ptr->~T			();

	mov	ecx, DWORD PTR [esi+4]
	add	esp, 4
	mov	edi, eax
	mov	edx, DWORD PTR [ecx]
	push	0
	call	DWORD PTR [edx+36]

; 134  : 		Memory.mem_free	(_real_ptr);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	edi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	mov	edi, DWORD PTR $T2[esp+28]

; 154  : 		ptr = nullptr;

	mov	DWORD PTR [esi+4], 0
$LN79@Discard:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1406 :         _Move_unchecked(_Whereptr + 1, _Mylast, _Whereptr);

	mov	edx, DWORD PTR [ebp+8]
	lea	eax, DWORD PTR [esi+12]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4320 :     for (; _First != _Last; ++_Dest, (void) ++_First) {

	cmp	eax, edx
	je	SHORT $LN87@Discard
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1397 :         pointer& _Mylast        = _My_data._Mylast;

	add	esi, 20					; 00000014H
	npad	2
$LL88@Discard:
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	eax, DWORD PTR [esi-8]
	test	eax, eax
	je	SHORT $LN95@Discard
	inc	DWORD PTR [eax]
$LN95@Discard:

; 50   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	mov	ecx, DWORD PTR [esi-20]
	test	ecx, ecx
	je	SHORT $LN99@Discard
	dec	DWORD PTR [ecx]
$LN99@Discard:

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	DWORD PTR [esi-20], eax
	mov	eax, DWORD PTR [esi-4]
	mov	DWORD PTR [esi-16], eax
	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [esi-12], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4320 :     for (; _First != _Last; ++_Dest, (void) ++_First) {

	add	esi, 12					; 0000000cH
	lea	eax, DWORD PTR [esi-8]
	cmp	eax, edx
	jne	SHORT $LL88@Discard
	mov	edx, DWORD PTR [ebp+8]
$LN87@Discard:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1408 :         --_Mylast;

	lea	eax, DWORD PTR [edx-12]
	mov	DWORD PTR [ebp+8], eax
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 347  : 							bForceDiscard		= FALSE;

	mov	DWORD PTR [ebp+48], 0
$LN14@Discard:
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h

; 151  : 	if (ptr) 

	mov	eax, DWORD PTR [ebx]
	test	eax, eax
	je	SHORT $LN169@Discard

; 132  : 		void*	_real_ptr	= dynamic_cast<void*>(ptr);

	push	eax
	call	___RTCastToVoid

; 133  : 		ptr->~T			();

	mov	ecx, DWORD PTR [ebx]
	add	esp, 4
	mov	esi, eax
	mov	edx, DWORD PTR [ecx]
	push	0
	call	DWORD PTR [edx+36]

; 134  : 		Memory.mem_free	(_real_ptr);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	mov	ebp, DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	push	esi
	call	ebp

; 154  : 		ptr = nullptr;

	mov	DWORD PTR [ebx], 0
	jmp	SHORT $LN106@Discard
$LN169@Discard:

; 151  : 	if (ptr) 

	mov	ebp, DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN106@Discard:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1284 :         _Nodeptr _Erasednode = _Scary->_Extract(_Where); // node to erase

	mov	ecx, DWORD PTR _this$1$[esp+32]
	push	edi
	call	?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >::_Extract
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 50   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	mov	ecx, DWORD PTR [eax+20]
	test	ecx, ecx
	je	SHORT $LN133@Discard
	dec	DWORD PTR [ecx]
	mov	ecx, DWORD PTR [eax+20]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN133@Discard
	mov	DWORD PTR [eax+20], 0
$LN133@Discard:
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	test	eax, eax
	je	SHORT $LN167@Discard
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	ebp
	pop	edi
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 366  : }

	pop	esi
	pop	ebp
	mov	DWORD PTR [ebx], 0
	pop	ebx
	add	esp, 16					; 00000010H
	ret	8
$LN8@Discard:
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h

; 151  : 	if (ptr) 

	mov	eax, DWORD PTR [ebx]
	test	eax, eax
	je	SHORT $LN167@Discard

; 132  : 		void*	_real_ptr	= dynamic_cast<void*>(ptr);

	push	eax
	call	___RTCastToVoid

; 133  : 		ptr->~T			();

	mov	ecx, DWORD PTR [ebx]
	add	esp, 4
	mov	esi, eax
	mov	edx, DWORD PTR [ecx]
	push	0
	call	DWORD PTR [edx+36]

; 134  : 		Memory.mem_free	(_real_ptr);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	esi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN167@Discard:
	pop	edi
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 366  : }

	pop	esi
	pop	ebp
	mov	DWORD PTR [ebx], 0
	pop	ebx
	add	esp, 16					; 00000010H
	ret	8
?Discard@CModelPool@@QAEXAAPAVIRender_Visual@@H@Z ENDP	; CModelPool::Discard
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
_TEXT	SEGMENT
_V$1 = -260						; size = 4
_section$ = -256					; size = 256
?Prefetch@CModelPool@@QAEXXZ PROC			; CModelPool::Prefetch
; _this$ = ecx

; 369  : {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H

; 370  : 	Logging					(FALSE);
; 371  : 	// prefetch visuals
; 372  : 	string256 section;
; 373  : 	strconcat				(sizeof(section),section,"prefetch_visuals_",g_pGamePersistent->m_game_params.m_game_type);

	mov	eax, DWORD PTR __imp_?g_pGamePersistent@@3PAVIGame_Persistent@@A
	sub	esp, 260				; 00000104H
	push	ebx
	push	esi
	push	edi
	mov	edi, ecx
	mov	DWORD PTR [edi+44], 0
	mov	eax, DWORD PTR [eax]
	add	eax, 292				; 00000124H
	push	eax
	push	OFFSET ??_C@_0BC@DJGLAOAH@prefetch_visuals_@
	lea	eax, DWORD PTR _section$[esp+280]
	push	eax
	push	256					; 00000100H
	call	DWORD PTR __imp_?strconcat@@YAPADHPADPBD1@Z

; 374  : 	CInifile::Sect& sect	= pSettings->r_section(section);

	mov	ecx, DWORD PTR __imp_?pSettings@@3PAVCInifile@@A
	lea	eax, DWORD PTR _section$[esp+288]
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR [ecx]
	push	eax
	call	DWORD PTR __imp_?r_section@CInifile@@QAEAAUSect@1@PBD@Z
	mov	ebx, eax

; 375  : 	for (CInifile::SectCIt I=sect.Data.begin(); I!=sect.Data.end(); I++)	{

	mov	esi, DWORD PTR [ebx+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 150  :         return _Ptr == _Right._Ptr;

	cmp	esi, DWORD PTR [ebx+8]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 375  : 	for (CInifile::SectCIt I=sect.Data.begin(); I!=sect.Data.end(); I++)	{

	je	SHORT $LN49@Prefetch
	npad	6
$LL4@Prefetch:
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 68   : 	str_c				c_str		() const						{	return p_?p_->value:0;							}

	mov	ecx, DWORD PTR [esi]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 377  : 		IRender_Visual* V	= Create(item.first.c_str());

	push	0
	lea	eax, DWORD PTR [ecx+12]
	neg	ecx
	sbb	ecx, ecx
	and	ecx, eax
	push	ecx
	mov	ecx, edi
	call	?Create@CModelPool@@QAEPAVIRender_Visual@@PBDPAVIReader@@@Z ; CModelPool::Create
	mov	edx, eax
	mov	DWORD PTR _V$1[esp+272], edx

; 303  : 	if (NULL==V)				return;

	test	edx, edx
	je	SHORT $LN2@Prefetch

; 304  : 	if (g_bRendering){

	mov	ecx, DWORD PTR __imp_?g_bRendering@@3HA
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN35@Prefetch
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 730  :         if (_Mylast != _My_data._Myend) {

	mov	eax, DWORD PTR [edi+20]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 306  : 		ModelsToDelete.push_back(V);

	lea	ecx, DWORD PTR [edi+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 730  :         if (_Mylast != _My_data._Myend) {

	cmp	eax, DWORD PTR [ecx+8]
	je	SHORT $LN41@Prefetch

; 713  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

	mov	DWORD PTR [eax], edx

; 714  :         _Orphan_range(_Mylast, _Mylast);
; 715  :         _Ty& _Result = *_Mylast;
; 716  :         ++_Mylast;

	add	DWORD PTR [ecx+4], 4

; 731  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

	jmp	SHORT $LN2@Prefetch
$LN41@Prefetch:

; 732  :         }
; 733  : 
; 734  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

	lea	edx, DWORD PTR _V$1[esp+272]
	push	edx
	push	eax
	call	??$_Emplace_reallocate@ABQAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@QAEPAPAVIRender_Visual@@QAPAV2@ABQAV2@@Z ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::_Emplace_reallocate<IRender_Visual * const &>
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 307  : 	} else {

	jmp	SHORT $LN2@Prefetch
$LN35@Prefetch:

; 308  : 		DeleteInternal			(V,bDiscard);

	push	0
	lea	eax, DWORD PTR _V$1[esp+276]
	mov	ecx, edi
	push	eax
	call	?DeleteInternal@CModelPool@@QAEXAAPAVIRender_Visual@@H@Z ; CModelPool::DeleteInternal
$LN2@Prefetch:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 74   :         ++_Ptr;

	add	esi, 8

; 150  :         return _Ptr == _Right._Ptr;

	cmp	esi, DWORD PTR [ebx+8]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 375  : 	for (CInifile::SectCIt I=sect.Data.begin(); I!=sect.Data.end(); I++)	{

	jne	SHORT $LL4@Prefetch
$LN49@Prefetch:

; 378  : 		Delete				(V,FALSE);
; 379  : 	}
; 380  : 	Logging					(TRUE);
; 381  : }

	mov	DWORD PTR [edi+44], 1
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Prefetch@CModelPool@@QAEXXZ ENDP			; CModelPool::Prefetch
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
_TEXT	SEGMENT
__I$ = -4						; size = 4
_b_complete$ = 8					; size = 4
?ClearPool@CModelPool@@QAEXH@Z PROC			; CModelPool::ClearPool
; _this$ = ecx

; 384  : {

	push	ecx
	push	ebx
	mov	ebx, ecx
	push	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1135 :         return iterator(_Scary->_Myhead->_Left, _Scary);

	mov	esi, DWORD PTR [ebx+36]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 384  : {

	push	edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1135 :         return iterator(_Scary->_Myhead->_Left, _Scary);

	lea	edi, DWORD PTR [ebx+36]

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR __I$[esp+16], eax
	cmp	eax, esi
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 387  : 	for (;_I!=_E;_I++)	{

	je	SHORT $LN3@ClearPool
	push	ebp
	mov	ebp, DWORD PTR _b_complete$[esp+16]
	npad	5
$LL4@ClearPool:

; 388  : 		Discard	(_I->second, b_complete)	;

	push	ebp
	add	eax, 20					; 00000014H
	mov	ecx, ebx
	push	eax
	call	?Discard@CModelPool@@QAEXAAPAVIRender_Visual@@H@Z ; CModelPool::Discard
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 199  :         _Mybase::operator++();

	lea	ecx, DWORD PTR __I$[esp+20]
	call	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >,std::_Iterator_base0>::operator++

; 233  :         return this->_Ptr == _Right._Ptr;

	mov	eax, DWORD PTR __I$[esp+20]
	cmp	eax, esi
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 387  : 	for (;_I!=_E;_I++)	{

	jne	SHORT $LL4@ClearPool
	pop	ebp
$LN3@ClearPool:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1342 :         auto _Head = _Scary->_Myhead;

	mov	esi, DWORD PTR [edi]

; 1343 :         _Scary->_Erase_tree(_Getal(), _Head->_Parent);

	mov	ecx, edi
	push	DWORD PTR [esi+4]
	push	edi
	call	??$_Erase_tree@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@QAEXAAV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >::_Erase_tree<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >

; 1344 :         _Head->_Parent  = _Head;

	mov	DWORD PTR [esi+4], esi

; 1345 :         _Head->_Left    = _Head;

	mov	DWORD PTR [esi], esi

; 1346 :         _Head->_Right   = _Head;

	mov	DWORD PTR [esi+8], esi

; 1347 :         _Scary->_Mysize = 0;

	mov	DWORD PTR [edi+4], 0
	pop	edi
	pop	esi
	pop	ebx
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 391  : }

	pop	ecx
	ret	4
?ClearPool@CModelPool@@QAEXH@Z ENDP			; CModelPool::ClearPool
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\FS.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xr_resource.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
_TEXT	SEGMENT
_F$1 = -20						; size = 20
_source$ = 8						; size = 4
?CreatePE@CModelPool@@QAEPAVIRender_Visual@@PAVCPEDef@PS@@@Z PROC ; CModelPool::CreatePE
; _this$dead$ = ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h

; 68   : 	T* ptr	= (T*)Memory.mem_alloc(sizeof(T));

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 394  : {

	sub	esp, 20					; 00000014H
	push	ebx
	push	esi
	push	edi
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h

; 68   : 	T* ptr	= (T*)Memory.mem_alloc(sizeof(T));

	push	180					; 000000b4H
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 69   : 	return new (ptr) T();

	mov	esi, eax
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 52   : {

	mov	ecx, esi
	call	DWORD PTR __imp_??0IParticleCustom@@QAE@XZ

; 53   : 	m_HandleEffect 			= ParticleManager()->CreateEffect(1);		VERIFY(m_HandleEffect>=0);

	mov	ebx, DWORD PTR __imp_?ParticleManager@PAPI@@YAPAVIParticleManager@1@XZ
	mov	DWORD PTR [esi], OFFSET ??_7CParticleEffect@PS@@6B@
	call	ebx
	push	1
	mov	ecx, eax
	mov	edx, DWORD PTR [eax]
	call	DWORD PTR [edx+4]
	mov	DWORD PTR [esi+80], eax

; 54   : 	m_HandleActionList		= ParticleManager()->CreateActionList();	VERIFY(m_HandleActionList>=0);

	call	ebx
	mov	ecx, eax
	mov	edx, DWORD PTR [eax]
	call	DWORD PTR [edx+12]

; 167  : 	m_Def 						= def;

	mov	edi, DWORD PTR _source$[esp+28]

; 54   : 	m_HandleActionList		= ParticleManager()->CreateActionList();	VERIFY(m_HandleActionList>=0);

	mov	DWORD PTR [esi+84], eax
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h

; 15   :     IC	SelfRef	zero	()											{ flags=T(0);	return *this;	}

	mov	BYTE PTR [esi+176], 0
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 57   : 	m_fElapsedLimit			= 0.f;

	mov	DWORD PTR [esi+76], 0

; 58   : 	m_MemDT					= 0;

	mov	DWORD PTR [esi+88], 0
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	mov	DWORD PTR [esi+92], 0
	mov	DWORD PTR [esi+96], 0
	mov	DWORD PTR [esi+100], 0
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 60   : 	m_DestroyCallback		= 0;

	mov	DWORD PTR [esi+168], 0

; 61   : 	m_CollisionCallback		= 0;

	mov	DWORD PTR [esi+172], 0
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 72   : 		_11=1; _12=0; _13=0; _14=0;

	mov	DWORD PTR [esi+104], 1065353216		; 3f800000H
	mov	DWORD PTR [esi+108], 0
	mov	DWORD PTR [esi+112], 0
	mov	DWORD PTR [esi+116], 0

; 73   : 		_21=0; _22=1; _23=0; _24=0;

	mov	DWORD PTR [esi+120], 0
	mov	DWORD PTR [esi+124], 1065353216		; 3f800000H
	mov	DWORD PTR [esi+128], 0
	mov	DWORD PTR [esi+132], 0

; 74   : 		_31=0; _32=0; _33=1; _34=0;

	mov	DWORD PTR [esi+136], 0
	mov	DWORD PTR [esi+140], 0
	mov	DWORD PTR [esi+144], 1065353216		; 3f800000H
	mov	DWORD PTR [esi+148], 0

; 75   : 		_41=0; _42=0; _43=0; _44=1;

	mov	DWORD PTR [esi+152], 0
	mov	DWORD PTR [esi+156], 0
	mov	DWORD PTR [esi+160], 0
	mov	DWORD PTR [esi+164], 1065353216		; 3f800000H
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 77   : 	V->Type		= type;

	mov	DWORD PTR [esi+4], 8
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 167  : 	m_Def 						= def;

	mov	DWORD PTR [esi+72], edi

; 168  : 	if (m_Def){

	test	edi, edi
	je	$LN138@CreatePE

; 89   : 	OnDeviceDestroy();

	mov	eax, DWORD PTR [esi]
	mov	ecx, esi
	call	DWORD PTR [eax+44]

; 90   : 	OnDeviceCreate();

	mov	eax, DWORD PTR [esi]
	mov	ecx, esi
	call	DWORD PTR [eax+40]
; File I:\Vitalya\mine\NSProjectX\xrCore\FS.h

; 119  : 	IC u32			size		() const 	{	return file_size;			}

	mov	eax, DWORD PTR [esi+72]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 173  : 		IReader F				(m_Def->m_Actions.pointer(),m_Def->m_Actions.size());

	lea	ecx, DWORD PTR _F$1[esp+32]
	push	0
	push	DWORD PTR [eax+80]
	push	DWORD PTR [eax+68]
	call	DWORD PTR __imp_??0IReader@@QAE@PAXHH@Z

; 174  :         ParticleManager()->LoadActions		(m_HandleActionList,F);

	call	ebx
	lea	ecx, DWORD PTR _F$1[esp+32]
	push	ecx
	push	DWORD PTR [esi+84]
	mov	edx, DWORD PTR [eax]
	mov	ecx, eax
	call	DWORD PTR [edx+64]

; 175  :         ParticleManager()->SetMaxParticles	(m_HandleEffect,m_Def->m_MaxParticles);

	call	ebx
	mov	ecx, DWORD PTR [esi+72]
	mov	edx, DWORD PTR [eax]
	push	DWORD PTR [ecx+88]
	mov	ecx, eax
	push	DWORD PTR [esi+80]
	call	DWORD PTR [edx+44]

; 176  :         ParticleManager()->SetCallback		(m_HandleEffect,OnEffectParticleBirth,OnEffectParticleDead,this,0);

	call	ebx
	push	0
	push	esi
	push	OFFSET ?OnEffectParticleDead@PS@@YAXPAXIAAUParticle@PAPI@@I@Z ; PS::OnEffectParticleDead
	mov	edx, DWORD PTR [eax]
	mov	ecx, eax
	push	OFFSET ?OnEffectParticleBirth@PS@@YAXPAXIAAUParticle@PAPI@@I@Z ; PS::OnEffectParticleBirth
	push	DWORD PTR [esi+80]
	call	DWORD PTR [edx+48]
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h

; 23   : 	IC 	BOOL	is		(const T mask)						const	{ return mask==(flags&mask);			}

	mov	eax, DWORD PTR [esi+72]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 178  : 		if (m_Def->m_Flags.is(CPEDef::dfTimeLimit))

	test	DWORD PTR [eax+4], 16384		; 00004000H
	je	SHORT $LN114@CreatePE

; 179  : 			m_fElapsedLimit 	= m_Def->m_fTimeLimit;

	fld	DWORD PTR [eax+84]
	fstp	DWORD PTR [esi+76]
$LN114@CreatePE:
; File I:\Vitalya\mine\NSProjectX\xrCore\xr_resource.h

; 48   : 	ICF		T *			_get	() const							{	return p_;																					}

	mov	edi, DWORD PTR [edi+16]

; 46   : 	ICF		void		_set	(T * rhs) 							{	if (0!=rhs) rhs->dwReference++;	_dec(); p_ = rhs;											}

	test	edi, edi
	je	SHORT $LN136@CreatePE
	inc	DWORD PTR [edi]
$LN136@CreatePE:
	lea	ecx, DWORD PTR [esi+64]
	call	DWORD PTR __imp_?_dec@?$resptr_base@UShader@@@@IAEXXZ
	mov	DWORD PTR [esi+64], edi
$LN138@CreatePE:
	pop	edi
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 398  : }

	mov	eax, esi
	pop	esi
	pop	ebx
	add	esp, 20					; 00000014H
	ret	4
?CreatePE@CModelPool@@QAEPAVIRender_Visual@@PAVCPEDef@PS@@@Z ENDP ; CModelPool::CreatePE
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleGroup.cpp
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleGroup.cpp
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp
_TEXT	SEGMENT
_source$ = 8						; size = 4
?CreatePG@CModelPool@@QAEPAVIRender_Visual@@PAVCPGDef@PS@@@Z PROC ; CModelPool::CreatePG
; _this$dead$ = ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h

; 68   : 	T* ptr	= (T*)Memory.mem_alloc(sizeof(T));

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 401  : {

	push	esi
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h

; 68   : 	T* ptr	= (T*)Memory.mem_alloc(sizeof(T));

	push	108					; 0000006cH
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 69   : 	return new (ptr) T();

	mov	esi, eax
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleGroup.cpp

; 367  : {

	mov	ecx, esi
	call	DWORD PTR __imp_??0IParticleCustom@@QAE@XZ
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 403  : 	V->Compile		(source);

	push	DWORD PTR _source$[esp]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleGroup.cpp

; 367  : {

	mov	DWORD PTR [esi], OFFSET ??_7CParticleGroup@PS@@6B@
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 403  : 	V->Compile		(source);

	mov	ecx, esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 390  :     _CONSTEXPR20_CONTAINER _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

	mov	DWORD PTR [esi+92], 0
	mov	DWORD PTR [esi+96], 0
	mov	DWORD PTR [esi+100], 0
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h

; 15   :     IC	SelfRef	zero	()											{ flags=T(0);	return *this;	}

	mov	BYTE PTR [esi+104], 0
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	mov	DWORD PTR [esi+80], 0
	mov	DWORD PTR [esi+84], 0
	mov	DWORD PTR [esi+88], 0
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ModelPool.cpp

; 77   : 	V->Type		= type;

	mov	DWORD PTR [esi+4], 9

; 403  : 	V->Compile		(source);

	call	?Compile@CParticleGroup@PS@@QAEHPAVCPGDef@2@@Z ; PS::CParticleGroup::Compile

; 404  : 	return V;

	mov	eax, esi
	pop	esi

; 405  : }

	ret	4
?CreatePG@CModelPool@@QAEPAVIRender_Visual@@PAVCPGDef@PS@@@Z ENDP ; CModelPool::CreatePG
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UItem@CInifile@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UItem@CInifile@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CInifile::Item> > >::operator!=, COMDAT
; _this$ = ecx

; 160  :         return !(*this == _Right);

	mov	eax, DWORD PTR __Right$[esp-4]
	mov	ecx, DWORD PTR [ecx]
	cmp	ecx, DWORD PTR [eax]
	setne	al

; 161  :     }

	ret	4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UItem@CInifile@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CInifile::Item> > >::operator!=
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UItem@CInifile@@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$dead$ = 12					; size = 4
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UItem@CInifile@@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CInifile::Item> > >::operator++, COMDAT
; _this$ = ecx

; 79   :         _Vector_const_iterator _Tmp = *this;

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 74   :         ++_Ptr;

	add	edx, 8
	mov	DWORD PTR [ecx], edx

; 80   :         ++*this;
; 81   :         return _Tmp;
; 82   :     }

	ret	8
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UItem@CInifile@@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CInifile::Item> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UItem@CInifile@@@std@@@std@@@std@@QBEABUItem@CInifile@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UItem@CInifile@@@std@@@std@@@std@@QBEABUItem@CInifile@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CInifile::Item> > >::operator*, COMDAT
; _this$ = ecx

; 46   : #if _ITERATOR_DEBUG_LEVEL != 0
; 47   :         const auto _Mycont = static_cast<const _Myvec*>(this->_Getcont());
; 48   :         _STL_VERIFY(_Ptr, "can't dereference value-initialized vector iterator");
; 49   :         _STL_VERIFY(
; 50   :             _Mycont->_Myfirst <= _Ptr && _Ptr < _Mycont->_Mylast, "can't dereference out of range vector iterator");
; 51   : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 52   : 
; 53   :         return *_Ptr;

	mov	eax, DWORD PTR [ecx]

; 54   :     }

	ret	0
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UItem@CInifile@@@std@@@std@@@std@@QBEABUItem@CInifile@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CInifile::Item> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??E?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$dead$ = 12					; size = 4
??E?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > > >::operator++, COMDAT
; _this$ = ecx

; 288  :         _Tree_iterator _Tmp = *this;

	mov	edx, DWORD PTR [ecx]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[esp]
	mov	DWORD PTR [esi], edx

; 199  :         _Mybase::operator++();

	call	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >,std::_Iterator_base0>::operator++

; 289  :         _Mybase::operator++();
; 290  :         return _Tmp;

	mov	eax, esi
	pop	esi

; 291  :     }

	ret	8
??E?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBVshared_str@@PAVIRender_Visual@@@1@XZ
_TEXT	SEGMENT
??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBVshared_str@@PAVIRender_Visual@@@1@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > > >::operator->, COMDAT
; _this$ = ecx

; 186  :         return this->_Ptr->_Myval;

	mov	eax, DWORD PTR [ecx]
	add	eax, 16					; 00000010H

; 279  :         return pointer_traits<pointer>::pointer_to(**this);
; 280  :     }

	ret	0
??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBVshared_str@@PAVIRender_Visual@@@1@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > > >::operator->
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > > >::operator!=, COMDAT
; _this$ = ecx

; 238  :         return !(*this == _Right);

	mov	eax, DWORD PTR __Right$[esp-4]
	mov	ecx, DWORD PTR [ecx]
	cmp	ecx, DWORD PTR [eax]
	setne	al

; 239  :     }

	ret	4
??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > > >::operator!=
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@std@@QBEPAU?$pair@QAVIRender_Visual@@Vshared_str@@@1@XZ
_TEXT	SEGMENT
??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@std@@QBEPAU?$pair@QAVIRender_Visual@@Vshared_str@@@1@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > > >::operator->, COMDAT
; _this$ = ecx

; 186  :         return this->_Ptr->_Myval;

	mov	eax, DWORD PTR [ecx]
	add	eax, 16					; 00000010H

; 279  :         return pointer_traits<pointer>::pointer_to(**this);
; 280  :     }

	ret	0
??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@std@@QBEPAU?$pair@QAVIRender_Visual@@Vshared_str@@@1@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > > >::operator->
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > > >::operator!=, COMDAT
; _this$ = ecx

; 238  :         return !(*this == _Right);

	mov	eax, DWORD PTR __Right$[esp-4]
	mov	ecx, DWORD PTR [ecx]
	cmp	ecx, DWORD PTR [eax]
	setne	al

; 239  :     }

	ret	4
??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > > >::operator!=
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$dead$ = 12					; size = 4
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CModelPool::ModelDef> > >::operator++, COMDAT
; _this$ = ecx

; 281  :         _Vector_iterator _Tmp = *this;

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 74   :         ++_Ptr;

	add	edx, 12					; 0000000cH
	mov	DWORD PTR [ecx], edx

; 282  :         _Mybase::operator++();
; 283  :         return _Tmp;
; 284  :     }

	ret	8
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CModelPool::ModelDef> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CModelPool::ModelDef> > >::operator++, COMDAT
; _this$ = ecx

; 74   :         ++_Ptr;

	add	DWORD PTR [ecx], 12			; 0000000cH

; 276  :         _Mybase::operator++();
; 277  :         return *this;

	mov	eax, ecx

; 278  :     }

	ret	0
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CModelPool::ModelDef> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??C?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@@std@@QBEPAUModelDef@CModelPool@@XZ
_TEXT	SEGMENT
??C?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@@std@@QBEPAUModelDef@CModelPool@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CModelPool::ModelDef> > >::operator->, COMDAT
; _this$ = ecx

; 265  : #if _ITERATOR_DEBUG_LEVEL != 0
; 266  :         const auto _Mycont = static_cast<const _Myvec*>(this->_Getcont());
; 267  :         _STL_VERIFY(this->_Ptr, "can't dereference value-initialized vector iterator");
; 268  :         _STL_VERIFY(_Mycont->_Myfirst <= this->_Ptr && this->_Ptr < _Mycont->_Mylast,
; 269  :             "can't dereference out of range vector iterator");
; 270  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 271  : 
; 272  :         return this->_Ptr;

	mov	eax, DWORD PTR [ecx]

; 273  :     }

	ret	0
??C?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@@std@@QBEPAUModelDef@CModelPool@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CModelPool::ModelDef> > >::operator->
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CModelPool::ModelDef> > >::operator!=, COMDAT
; _this$ = ecx

; 160  :         return !(*this == _Right);

	mov	eax, DWORD PTR __Right$[esp-4]
	mov	ecx, DWORD PTR [ecx]
	cmp	ecx, DWORD PTR [eax]
	setne	al

; 161  :     }

	ret	4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CModelPool::ModelDef> > >::operator!=
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CModelPool::ModelDef> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CModelPool::ModelDef> > >, COMDAT
; _this$ = ecx

; 39   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator() noexcept : _Ptr() {}

	mov	DWORD PTR [ecx], 0
	mov	eax, ecx
	ret	0
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CModelPool::ModelDef> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CModelPool::ModelDef> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ?clear@?$xr_vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@@QAEXXZ
_TEXT	SEGMENT
?clear@?$xr_vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@@QAEXXZ PROC ; xr_vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::clear, COMDAT
; _this$ = ecx

; 132  : 	void	clear				()									{ clear_and_free	();			}

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [ecx+4], eax
	ret	0
?clear@?$xr_vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@@QAEXXZ ENDP ; xr_vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ??0?$xr_vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@@QAE@XZ
_TEXT	SEGMENT
??0?$xr_vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@@QAE@XZ PROC ; xr_vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::xr_vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 390  :     _CONSTEXPR20_CONTAINER _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

	mov	DWORD PTR [ecx], 0
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h

; 122  : 			xr_vector			()									: inherited	()					{}

	mov	eax, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 390  :     _CONSTEXPR20_CONTAINER _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h

; 122  : 			xr_vector			()									: inherited	()					{}

	ret	0
??0?$xr_vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@@QAE@XZ ENDP ; xr_vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::xr_vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?end@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@@2@XZ PROC ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::end, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], ecx

; 1472 :         auto& _My_data = _Mypair._Myval2;
; 1473 :         return iterator(_My_data._Mylast, _STD addressof(_My_data));
; 1474 :     }

	ret	4
?end@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@@2@XZ ENDP ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::end
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?begin@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@@2@XZ PROC ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::begin, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], ecx

; 1462 :         auto& _My_data = _Mypair._Myval2;
; 1463 :         return iterator(_My_data._Myfirst, _STD addressof(_My_data));
; 1464 :     }

	ret	4
?begin@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@@2@XZ ENDP ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?erase@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?erase@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@@2@@Z PROC ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::erase, COMDAT
; _this$ = ecx

; 1394 :         is_nothrow_move_assignable_v<value_type>) /* strengthened */ {

	push	ebx
	push	ebp

; 1395 :         const pointer _Whereptr = _Where._Ptr;

	mov	ebp, DWORD PTR __Where$[esp+4]
	mov	ebx, ecx
	push	esi
	push	edi

; 1396 :         auto& _My_data          = _Mypair._Myval2;
; 1397 :         pointer& _Mylast        = _My_data._Mylast;
; 1398 : 
; 1399 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1400 :         _STL_VERIFY(
; 1401 :             _Where._Getcont() == _STD addressof(_My_data) && _Whereptr >= _My_data._Myfirst && _Mylast > _Whereptr,
; 1402 :             "vector erase iterator outside range");
; 1403 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1404 : 
; 1405 :         _Orphan_range(_Whereptr, _Mylast);
; 1406 :         _Move_unchecked(_Whereptr + 1, _Mylast, _Whereptr);

	mov	esi, ebp
	mov	edi, DWORD PTR [ebx+4]
	lea	edx, DWORD PTR [ebp+12]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4320 :     for (; _First != _Last; ++_Dest, (void) ++_First) {

	cmp	edx, edi
	je	SHORT $LN5@erase
$LL6@erase:
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	eax, DWORD PTR [edx]
	test	eax, eax
	je	SHORT $LN13@erase
	inc	DWORD PTR [eax]
$LN13@erase:

; 50   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN17@erase
	dec	DWORD PTR [ecx]
$LN17@erase:

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	DWORD PTR [esi], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [esi+4], eax
	mov	eax, DWORD PTR [edx+8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4320 :     for (; _First != _Last; ++_Dest, (void) ++_First) {

	add	edx, 12					; 0000000cH
	mov	DWORD PTR [esi+8], eax
	add	esi, 12					; 0000000cH
	cmp	edx, edi
	jne	SHORT $LL6@erase
	mov	edi, DWORD PTR [ebx+4]
$LN5@erase:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1408 :         --_Mylast;

	lea	eax, DWORD PTR [edi-12]
	mov	DWORD PTR [ebx+4], eax

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR ___$ReturnUdt$[esp+12]

; 1409 :         return iterator(_Whereptr, _STD addressof(_My_data));

	pop	edi
	pop	esi

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	DWORD PTR [eax], ebp

; 1409 :         return iterator(_Whereptr, _STD addressof(_My_data));

	pop	ebp
	pop	ebx

; 1410 :     }

	ret	8
?erase@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@@2@@Z ENDP ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::erase
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?push_back@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAEXABUModelDef@CModelPool@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAEXABUModelDef@CModelPool@@@Z PROC ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::push_back, COMDAT
; _this$ = ecx

; 730  :         if (_Mylast != _My_data._Myend) {

	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, DWORD PTR [ecx+8]
	je	SHORT $LN4@push_back
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 59   : 						shared_str	(shared_str const &rhs)			{	p_ = 0;	_set(rhs);								}

	push	edi

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	edi, DWORD PTR __Val$[esp]

; 59   : 						shared_str	(shared_str const &rhs)			{	p_ = 0;	_set(rhs);								}

	mov	DWORD PTR [edx], 0

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	eax, DWORD PTR [edi]
	test	eax, eax
	je	SHORT $LN21@push_back
	inc	DWORD PTR [eax]
	push	esi
	mov	esi, DWORD PTR [edx]

; 50   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	test	esi, esi
	je	SHORT $LN23@push_back
	dec	DWORD PTR [esi]
$LN23@push_back:
	pop	esi
$LN21@push_back:

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [edi+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [edi+8]
	mov	DWORD PTR [edx+8], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 716  :         ++_Mylast;

	add	DWORD PTR [ecx+4], 12			; 0000000cH
	pop	edi

; 743  :         emplace_back(_Val);
; 744  :     }

	ret	4
$LN4@push_back:

; 734  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

	push	DWORD PTR __Val$[esp-4]
	push	edx
	call	??$_Emplace_reallocate@ABUModelDef@CModelPool@@@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAEPAUModelDef@CModelPool@@QAU23@ABU23@@Z ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::_Emplace_reallocate<CModelPool::ModelDef const &>

; 743  :         emplace_back(_Val);
; 744  :     }

	ret	4
?push_back@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAEXABUModelDef@CModelPool@@@Z ENDP ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$emplace_back@ABUModelDef@CModelPool@@@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAE?A_TABUModelDef@CModelPool@@@Z
_TEXT	SEGMENT
_<_Val_0>$ = 8						; size = 4
??$emplace_back@ABUModelDef@CModelPool@@@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAE?A_TABUModelDef@CModelPool@@@Z PROC ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::emplace_back<CModelPool::ModelDef const &>, COMDAT
; _this$ = ecx

; 727  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 728  :         auto& _My_data   = _Mypair._Myval2;
; 729  :         pointer& _Mylast = _My_data._Mylast;
; 730  :         if (_Mylast != _My_data._Myend) {

	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, DWORD PTR [ecx+8]
	je	SHORT $LN2@emplace_ba
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 59   : 						shared_str	(shared_str const &rhs)			{	p_ = 0;	_set(rhs);								}

	push	edi

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	edi, DWORD PTR _<_Val_0>$[esp]

; 59   : 						shared_str	(shared_str const &rhs)			{	p_ = 0;	_set(rhs);								}

	mov	DWORD PTR [edx], 0

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	eax, DWORD PTR [edi]
	test	eax, eax
	je	SHORT $LN19@emplace_ba
	inc	DWORD PTR [eax]
	push	esi
	mov	esi, DWORD PTR [edx]

; 50   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	test	esi, esi
	je	SHORT $LN21@emplace_ba
	dec	DWORD PTR [esi]
$LN21@emplace_ba:
	pop	esi
$LN19@emplace_ba:

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [edi+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [edi+8]
	mov	DWORD PTR [edx+8], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 716  :         ++_Mylast;

	add	DWORD PTR [ecx+4], 12			; 0000000cH
	pop	edi

; 735  : #if _HAS_CXX17
; 736  :         return _Result;
; 737  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 738  :         (void) _Result;
; 739  : #endif // _HAS_CXX17
; 740  :     }

	ret	4
$LN2@emplace_ba:

; 731  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);
; 732  :         }
; 733  : 
; 734  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

	push	DWORD PTR _<_Val_0>$[esp-4]
	push	edx
	call	??$_Emplace_reallocate@ABUModelDef@CModelPool@@@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAEPAUModelDef@CModelPool@@QAU23@ABU23@@Z ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::_Emplace_reallocate<CModelPool::ModelDef const &>

; 735  : #if _HAS_CXX17
; 736  :         return _Result;
; 737  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 738  :         (void) _Result;
; 739  : #endif // _HAS_CXX17
; 740  :     }

	ret	4
??$emplace_back@ABUModelDef@CModelPool@@@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAE?A_TABUModelDef@CModelPool@@@Z ENDP ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::emplace_back<CModelPool::ModelDef const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Emplace_back_with_unused_capacity@ABUModelDef@CModelPool@@@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@AAE?A_TABUModelDef@CModelPool@@@Z
_TEXT	SEGMENT
_<_Val_0>$ = 8						; size = 4
??$_Emplace_back_with_unused_capacity@ABUModelDef@CModelPool@@@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@AAE?A_TABUModelDef@CModelPool@@@Z PROC ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::_Emplace_back_with_unused_capacity<CModelPool::ModelDef const &>, COMDAT
; _this$ = ecx

; 708  :     _CONSTEXPR20_CONTAINER decltype(auto) _Emplace_back_with_unused_capacity(_Valty&&... _Val) {

	push	esi
	mov	esi, ecx
	push	edi
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	edi, DWORD PTR _<_Val_0>$[esp+4]
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h

; 84   : 							void					construct		(pointer p, const T& _Val)				{	::new((void*)p) value_type (_Val); }

	mov	edx, DWORD PTR [esi+4]
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 59   : 						shared_str	(shared_str const &rhs)			{	p_ = 0;	_set(rhs);								}

	mov	DWORD PTR [edx], 0

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	eax, DWORD PTR [edi]
	test	eax, eax
	je	SHORT $LN16@Emplace_ba
	inc	DWORD PTR [eax]
	mov	ecx, DWORD PTR [edx]

; 50   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	test	ecx, ecx
	je	SHORT $LN16@Emplace_ba
	dec	DWORD PTR [ecx]
$LN16@Emplace_ba:

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [edi+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [edi+8]
	mov	DWORD PTR [edx+8], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 716  :         ++_Mylast;

	add	DWORD PTR [esi+4], 12			; 0000000cH
	pop	edi
	pop	esi

; 717  : #if _HAS_CXX17
; 718  :         return _Result;
; 719  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 720  :         (void) _Result;
; 721  : #endif // _HAS_CXX17
; 722  :     }

	ret	4
??$_Emplace_back_with_unused_capacity@ABUModelDef@CModelPool@@@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@AAE?A_TABUModelDef@CModelPool@@@Z ENDP ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::_Emplace_back_with_unused_capacity<CModelPool::ModelDef const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??1?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAE@XZ PROC ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::~vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >, COMDAT
; _this$ = ecx

; 698  :     _CONSTEXPR20_CONTAINER ~vector() noexcept {

	push	esi
	mov	esi, ecx

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN4@vector
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

	mov	DWORD PTR [esi], 0

; 1755 :             _Mylast  = nullptr;

	mov	DWORD PTR [esi+4], 0

; 1756 :             _Myend   = nullptr;

	mov	DWORD PTR [esi+8], 0
$LN4@vector:
	pop	esi

; 699  :         _Tidy();
; 700  : #if _ITERATOR_DEBUG_LEVEL != 0
; 701  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 702  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));
; 703  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 704  :     }

	ret	0
??1?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAE@XZ ENDP ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::~vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\map
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\map
;	COMDAT ??0?$map@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$map@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@@std@@QAE@XZ PROC ; std::map<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> > >::map<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> > >, COMDAT
; _this$ = ecx

; 105  :     map() : _Mybase(key_compare()) {}

	push	esi
	mov	esi, ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	push	24					; 00000018H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 435  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+4], 0
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 345  :         _Construct_in_place(_Pnode->_Left, _Pnode);

	mov	DWORD PTR [eax], eax

; 346  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

	mov	DWORD PTR [eax+4], eax

; 347  :         _Construct_in_place(_Pnode->_Right, _Pnode);

	mov	DWORD PTR [eax+8], eax

; 348  :         _Pnode->_Color = _Black;

	mov	WORD PTR [eax+12], 257			; 00000101H

; 1917 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

	mov	DWORD PTR [esi], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\map

; 105  :     map() : _Mybase(key_compare()) {}

	mov	eax, esi
	pop	esi
	ret	0
??0?$map@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@@std@@QAE@XZ ENDP ; std::map<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> > >::map<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?find@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@2@ABQAVIRender_Visual@@@Z
_TEXT	SEGMENT
__Loc$1 = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
?find@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@2@ABQAVIRender_Visual@@@Z PROC ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::find, COMDAT
; _this$ = ecx

; 1362 :     _NODISCARD iterator find(const key_type& _Keyval) {

	sub	esp, 12					; 0000000cH
	push	esi

; 1353 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

	mov	esi, DWORD PTR __Keyval$[esp+12]
	lea	eax, DWORD PTR __Loc$1[esp+16]

; 1362 :     _NODISCARD iterator find(const key_type& _Keyval) {

	push	edi

; 1353 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

	push	esi
	push	eax

; 1362 :     _NODISCARD iterator find(const key_type& _Keyval) {

	mov	edi, ecx

; 1353 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

	call	??$_Find_lower_bound@PAVIRender_Visual@@@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@1@ABQAVIRender_Visual@@@Z ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::_Find_lower_bound<IRender_Visual *>

; 1591 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

	mov	edx, DWORD PTR __Loc$1[esp+28]
	cmp	BYTE PTR [edx+13], 0
	jne	SHORT $LN4@find
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

	mov	eax, DWORD PTR [esi]
	cmp	eax, DWORD PTR [edx+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1591 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

	jb	SHORT $LN4@find

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

	mov	eax, DWORD PTR ___$ReturnUdt$[esp+16]
	pop	edi

; 1363 :         return iterator(_Find(_Keyval), _Get_scary());
; 1364 :     }

	pop	esi

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

	mov	DWORD PTR [eax], edx

; 1363 :         return iterator(_Find(_Keyval), _Get_scary());
; 1364 :     }

	add	esp, 12					; 0000000cH
	ret	8
$LN4@find:

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

	mov	eax, DWORD PTR ___$ReturnUdt$[esp+16]

; 1358 :         return _Get_scary()->_Myhead;

	mov	ecx, DWORD PTR [edi]
	pop	edi

; 1363 :         return iterator(_Find(_Keyval), _Get_scary());
; 1364 :     }

	pop	esi

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

	mov	DWORD PTR [eax], ecx

; 1363 :         return iterator(_Find(_Keyval), _Get_scary());
; 1364 :     }

	add	esp, 12					; 0000000cH
	ret	8
?find@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@2@ABQAVIRender_Visual@@@Z ENDP ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::find
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?empty@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@QBE_NXZ PROC ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::empty, COMDAT
; _this$ = ecx

; 1211 :         return size() == 0;

	cmp	DWORD PTR [ecx+4], 0
	sete	al

; 1212 :     }

	ret	0
?empty@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@QBE_NXZ ENDP ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::empty
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?end@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::end, COMDAT
; _this$ = ecx

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], ecx

; 1144 :         const auto _Scary = _Get_scary();
; 1145 :         return iterator(_Scary->_Myhead, _Scary);
; 1146 :     }

	ret	4
?end@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::end
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?begin@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::begin, COMDAT
; _this$ = ecx

; 1134 :         const auto _Scary = _Get_scary();
; 1135 :         return iterator(_Scary->_Myhead->_Left, _Scary);

	mov	eax, DWORD PTR [ecx]

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	DWORD PTR [eax], ecx

; 1136 :     }

	ret	4
?begin@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::~_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >, COMDAT
; _this$ = ecx

; 1084 :     ~_Tree() noexcept {

	push	esi
	mov	esi, ecx

; 752  :         _Erase_tree(_Al, _Myhead->_Parent);

	mov	eax, DWORD PTR [esi]
	push	DWORD PTR [eax+4]
	push	esi
	call	??$_Erase_tree@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@QAEXAAV?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >::_Erase_tree<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 560  :         _Al.deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR [esi]
	pop	esi
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	test	eax, eax
	je	SHORT $LN12@Tree
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN12@Tree:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1091 :     }

	ret	0
??1?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::~_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\map
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\map
;	COMDAT ??0?$multimap@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$multimap@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@@std@@QAE@XZ PROC ; std::multimap<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> > >::multimap<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> > >, COMDAT
; _this$ = ecx

; 448  :     multimap() : _Mybase(key_compare()) {}

	push	esi
	mov	esi, ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	push	24					; 00000018H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 435  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+4], 0
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 345  :         _Construct_in_place(_Pnode->_Left, _Pnode);

	mov	DWORD PTR [eax], eax

; 346  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

	mov	DWORD PTR [eax+4], eax

; 347  :         _Construct_in_place(_Pnode->_Right, _Pnode);

	mov	DWORD PTR [eax+8], eax

; 348  :         _Pnode->_Color = _Black;

	mov	WORD PTR [eax+12], 257			; 00000101H

; 1917 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

	mov	DWORD PTR [esi], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\map

; 448  :     multimap() : _Mybase(key_compare()) {}

	mov	eax, esi
	pop	esi
	ret	0
??0?$multimap@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@@std@@QAE@XZ ENDP ; std::multimap<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> > >::multimap<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\modelpool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\modelpool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?find@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@2@ABVshared_str@@@Z
_TEXT	SEGMENT
$T2 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
?find@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@2@ABVshared_str@@@Z PROC ; std::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >::find, COMDAT
; _this$ = ecx

; 1362 :     _NODISCARD iterator find(const key_type& _Keyval) {

	push	ecx
	push	ebx
	push	ebp

; 1599 :         while (!_Trynode->_Isnil) {

	mov	ebp, DWORD PTR __Keyval$[esp+8]

; 1362 :     _NODISCARD iterator find(const key_type& _Keyval) {

	push	esi
	push	edi

; 1597 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

	mov	edi, DWORD PTR [ecx]
	mov	ebx, edi
	mov	DWORD PTR $T2[esp+20], edi
	mov	esi, DWORD PTR [edi+4]

; 1598 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1599 :         while (!_Trynode->_Isnil) {

	cmp	BYTE PTR [esi+13], 0
	jne	SHORT $LN8@find
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 73   : 	bool				equal		(const shared_str & rhs) const	{	return (p_ == rhs.p_);							}

	mov	edi, DWORD PTR [ebp]
	npad	3
$LL7@find:
	mov	eax, DWORD PTR [esi+16]
	cmp	eax, edi

; 104  : 	if (a.equal(b))		return 0;

	je	SHORT $LN9@find

; 65   : 	str_c				operator*	() const						{	return p_?p_->value:0;							}

	mov	edx, edi
	lea	ecx, DWORD PTR [edi+12]
	neg	edx
	sbb	edx, edx
	and	edx, ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 183  : {	return (int)strcmp(S1,S2);  }

	lea	ecx, DWORD PTR [eax+12]
	neg	eax
	sbb	eax, eax
	and	eax, ecx
	npad	5
$LL63@find:
	mov	cl, BYTE PTR [eax]
	cmp	cl, BYTE PTR [edx]
	jne	SHORT $LN64@find
	test	cl, cl
	je	SHORT $LN65@find
	mov	cl, BYTE PTR [eax+1]
	cmp	cl, BYTE PTR [edx+1]
	jne	SHORT $LN64@find
	add	eax, 2
	add	edx, 2
	test	cl, cl
	jne	SHORT $LL63@find
$LN65@find:
	xor	eax, eax
	jmp	SHORT $LN66@find
$LN64@find:
	sbb	eax, eax
	or	eax, 1
$LN66@find:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\modelpool.h

; 22   : 		{	return xr_strcmp(x,y)<0;}

	test	eax, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1601 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

	jns	SHORT $LN9@find

; 1602 :                 _Result._Location._Child = _Tree_child::_Right;
; 1603 :                 _Trynode                 = _Trynode->_Right;

	mov	esi, DWORD PTR [esi+8]

; 1604 :             } else {

	jmp	SHORT $LN10@find
$LN9@find:

; 1605 :                 _Result._Location._Child = _Tree_child::_Left;
; 1606 :                 _Result._Bound           = _Trynode;

	mov	ebx, esi

; 1607 :                 _Trynode                 = _Trynode->_Left;

	mov	esi, DWORD PTR [esi]
$LN10@find:

; 1598 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1599 :         while (!_Trynode->_Isnil) {

	cmp	BYTE PTR [esi+13], 0
	je	SHORT $LL7@find
	mov	edi, DWORD PTR $T2[esp+20]
$LN8@find:

; 1591 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

	cmp	BYTE PTR [ebx+13], 0
	jne	SHORT $LN4@find
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 73   : 	bool				equal		(const shared_str & rhs) const	{	return (p_ == rhs.p_);							}

	mov	ecx, DWORD PTR [ebp]
	mov	edx, DWORD PTR [ebx+16]
	cmp	ecx, edx

; 104  : 	if (a.equal(b))		return 0;

	je	SHORT $LN62@find

; 65   : 	str_c				operator*	() const						{	return p_?p_->value:0;							}

	lea	eax, DWORD PTR [edx+12]
	neg	edx
	sbb	edx, edx
	and	edx, eax
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 183  : {	return (int)strcmp(S1,S2);  }

	lea	eax, DWORD PTR [ecx+12]
	neg	ecx
	sbb	ecx, ecx
	and	ecx, eax
	npad	2
$LL67@find:
	mov	al, BYTE PTR [ecx]
	cmp	al, BYTE PTR [edx]
	jne	SHORT $LN68@find
	test	al, al
	je	SHORT $LN69@find
	mov	al, BYTE PTR [ecx+1]
	cmp	al, BYTE PTR [edx+1]
	jne	SHORT $LN68@find
	add	ecx, 2
	add	edx, 2
	test	al, al
	jne	SHORT $LL67@find
$LN69@find:
	xor	eax, eax
	jmp	SHORT $LN70@find
$LN68@find:
	sbb	eax, eax
	or	eax, 1
$LN70@find:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\modelpool.h

; 22   : 		{	return xr_strcmp(x,y)<0;}

	test	eax, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1591 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

	js	SHORT $LN4@find
$LN62@find:

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

	mov	eax, DWORD PTR ___$ReturnUdt$[esp+16]
	pop	edi

; 1363 :         return iterator(_Find(_Keyval), _Get_scary());
; 1364 :     }

	pop	esi
	pop	ebp

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

	mov	DWORD PTR [eax], ebx

; 1363 :         return iterator(_Find(_Keyval), _Get_scary());
; 1364 :     }

	pop	ebx
	pop	ecx
	ret	8
$LN4@find:

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

	mov	eax, DWORD PTR ___$ReturnUdt$[esp+16]
	mov	DWORD PTR [eax], edi
	pop	edi

; 1363 :         return iterator(_Find(_Keyval), _Get_scary());
; 1364 :     }

	pop	esi
	pop	ebp
	pop	ebx
	pop	ecx
	ret	8
?find@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@2@ABVshared_str@@@Z ENDP ; std::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >::find
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?clear@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@QAEXXZ PROC ; std::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >::clear, COMDAT
; _this$ = ecx

; 1339 :     void clear() noexcept {

	push	esi
	push	edi
	mov	edi, ecx

; 1340 :         const auto _Scary = _Get_scary();
; 1341 :         _Scary->_Orphan_ptr(nullptr);
; 1342 :         auto _Head = _Scary->_Myhead;

	mov	esi, DWORD PTR [edi]

; 1343 :         _Scary->_Erase_tree(_Getal(), _Head->_Parent);

	push	DWORD PTR [esi+4]
	push	edi
	call	??$_Erase_tree@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@QAEXAAV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >::_Erase_tree<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >

; 1344 :         _Head->_Parent  = _Head;

	mov	DWORD PTR [esi+4], esi

; 1345 :         _Head->_Left    = _Head;

	mov	DWORD PTR [esi], esi

; 1346 :         _Head->_Right   = _Head;

	mov	DWORD PTR [esi+8], esi

; 1347 :         _Scary->_Mysize = 0;

	mov	DWORD PTR [edi+4], 0
	pop	edi
	pop	esi

; 1348 :     }

	ret	0
?clear@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?end@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >::end, COMDAT
; _this$ = ecx

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], ecx

; 1144 :         const auto _Scary = _Get_scary();
; 1145 :         return iterator(_Scary->_Myhead, _Scary);
; 1146 :     }

	ret	4
?end@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >::end
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?begin@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >::begin, COMDAT
; _this$ = ecx

; 1134 :         const auto _Scary = _Get_scary();
; 1135 :         return iterator(_Scary->_Myhead->_Left, _Scary);

	mov	eax, DWORD PTR [ecx]

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	DWORD PTR [eax], ecx

; 1136 :     }

	ret	4
?begin@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >::~_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >, COMDAT
; _this$ = ecx

; 1084 :     ~_Tree() noexcept {

	push	esi
	mov	esi, ecx

; 752  :         _Erase_tree(_Al, _Myhead->_Parent);

	mov	eax, DWORD PTR [esi]
	push	DWORD PTR [eax+4]
	push	esi
	call	??$_Erase_tree@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@QAEXAAV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >::_Erase_tree<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 560  :         _Al.deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR [esi]
	pop	esi
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	test	eax, eax
	je	SHORT $LN12@Tree
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN12@Tree:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1091 :     }

	ret	0
??1?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >::~_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ??A?$xr_vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@@QAEAAPAVIRender_Visual@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$xr_vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@@QAEAAPAVIRender_Visual@@I@Z PROC ; xr_vector<IRender_Visual *,xalloc<IRender_Visual *> >::operator[], COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 119  :         _Ptr += _Off;

	mov	ecx, DWORD PTR [ecx]
	mov	eax, DWORD PTR __Pos$[esp-4]
	lea	eax, DWORD PTR [ecx+eax*4]
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h

; 138  : 	reference operator[]		(size_type _Pos)					{ {VERIFY(_Pos<size());} return (*(begin() + _Pos)); }

	ret	4
??A?$xr_vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@@QAEAAPAVIRender_Visual@@I@Z ENDP ; xr_vector<IRender_Visual *,xalloc<IRender_Visual *> >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ?clear@?$xr_vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@@QAEXXZ
_TEXT	SEGMENT
?clear@?$xr_vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@@QAEXXZ PROC ; xr_vector<IRender_Visual *,xalloc<IRender_Visual *> >::clear, COMDAT
; _this$ = ecx

; 132  : 	void	clear				()									{ clear_and_free	();			}

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [ecx+4], eax
	ret	0
?clear@?$xr_vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@@QAEXXZ ENDP ; xr_vector<IRender_Visual *,xalloc<IRender_Visual *> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ??0?$xr_vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@@QAE@XZ
_TEXT	SEGMENT
??0?$xr_vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@@QAE@XZ PROC ; xr_vector<IRender_Visual *,xalloc<IRender_Visual *> >::xr_vector<IRender_Visual *,xalloc<IRender_Visual *> >, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 390  :     _CONSTEXPR20_CONTAINER _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

	mov	DWORD PTR [ecx], 0
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h

; 122  : 			xr_vector			()									: inherited	()					{}

	mov	eax, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 390  :     _CONSTEXPR20_CONTAINER _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h

; 122  : 			xr_vector			()									: inherited	()					{}

	ret	0
??0?$xr_vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@@QAE@XZ ENDP ; xr_vector<IRender_Visual *,xalloc<IRender_Visual *> >::xr_vector<IRender_Visual *,xalloc<IRender_Visual *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??1?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@QAE@XZ PROC ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::~vector<IRender_Visual *,xalloc<IRender_Visual *> >, COMDAT
; _this$ = ecx

; 698  :     _CONSTEXPR20_CONTAINER ~vector() noexcept {

	push	esi
	mov	esi, ecx

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN4@vector
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

	mov	DWORD PTR [esi], 0

; 1755 :             _Mylast  = nullptr;

	mov	DWORD PTR [esi+4], 0

; 1756 :             _Myend   = nullptr;

	mov	DWORD PTR [esi+8], 0
$LN4@vector:
	pop	esi

; 699  :         _Tidy();
; 700  : #if _ITERATOR_DEBUG_LEVEL != 0
; 701  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 702  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));
; 703  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 704  :     }

	ret	0
??1?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@QAE@XZ ENDP ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::~vector<IRender_Visual *,xalloc<IRender_Visual *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?end@?$vector@UItem@CInifile@@V?$xalloc@UItem@CInifile@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UItem@CInifile@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UItem@CInifile@@V?$xalloc@UItem@CInifile@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UItem@CInifile@@@std@@@std@@@2@XZ PROC ; std::vector<CInifile::Item,xalloc<CInifile::Item> >::end, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], ecx

; 1472 :         auto& _My_data = _Mypair._Myval2;
; 1473 :         return iterator(_My_data._Mylast, _STD addressof(_My_data));
; 1474 :     }

	ret	4
?end@?$vector@UItem@CInifile@@V?$xalloc@UItem@CInifile@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UItem@CInifile@@@std@@@std@@@2@XZ ENDP ; std::vector<CInifile::Item,xalloc<CInifile::Item> >::end
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?begin@?$vector@UItem@CInifile@@V?$xalloc@UItem@CInifile@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UItem@CInifile@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UItem@CInifile@@V?$xalloc@UItem@CInifile@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UItem@CInifile@@@std@@@std@@@2@XZ PROC ; std::vector<CInifile::Item,xalloc<CInifile::Item> >::begin, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], ecx

; 1462 :         auto& _My_data = _Mypair._Myval2;
; 1463 :         return iterator(_My_data._Myfirst, _STD addressof(_My_data));
; 1464 :     }

	ret	4
?begin@?$vector@UItem@CInifile@@V?$xalloc@UItem@CInifile@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UItem@CInifile@@@std@@@std@@@2@XZ ENDP ; std::vector<CInifile::Item,xalloc<CInifile::Item> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@@std@@QAE@PAUModelDef@CModelPool@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
___param0$ = 8						; size = 4
___param1$dead$ = 12					; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@@std@@QAE@PAUModelDef@CModelPool@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CModelPool::ModelDef> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<CModelPool::ModelDef> > >, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR ___param0$[esp-4]
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	ret	8
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@@std@@QAE@PAUModelDef@CModelPool@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CModelPool::ModelDef> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<CModelPool::ModelDef> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
___param0$ = 8						; size = 4
___param1$dead$ = 12					; size = 4
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@1@@Z PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > > >, COMDAT
; _this$ = ecx

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

	mov	eax, DWORD PTR ___param0$[esp-4]
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	ret	8
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@1@@Z ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
___param0$ = 8						; size = 4
___param1$dead$ = 12					; size = 4
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@1@@Z PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > > >, COMDAT
; _this$ = ecx

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

	mov	eax, DWORD PTR ___param0$[esp-4]
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	ret	8
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@1@@Z ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UItem@CInifile@@@std@@@std@@@std@@QAE@PAUItem@CInifile@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
___param0$ = 8						; size = 4
___param1$dead$ = 12					; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UItem@CInifile@@@std@@@std@@@std@@QAE@PAUItem@CInifile@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CInifile::Item> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<CInifile::Item> > >, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR ___param0$[esp-4]
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	ret	8
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UItem@CInifile@@@std@@@std@@@std@@QAE@PAUItem@CInifile@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CInifile::Item> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<CInifile::Item> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
___param0$ = 8						; size = 4
___param1$dead$ = 12					; size = 4
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@1@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > > >, COMDAT
; _this$ = ecx

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

	mov	eax, DWORD PTR ___param0$[esp-4]
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	ret	8
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@1@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
___param0$ = 8						; size = 4
___param1$dead$ = 12					; size = 4
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@1@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > > >, COMDAT
; _this$ = ecx

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

	mov	eax, DWORD PTR ___param0$[esp-4]
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	ret	8
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@1@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UItem@CInifile@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UItem@CInifile@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CInifile::Item> > >::operator==, COMDAT
; _this$ = ecx

; 149  :         _Compat(_Right);
; 150  :         return _Ptr == _Right._Ptr;

	mov	eax, DWORD PTR __Right$[esp-4]
	mov	ecx, DWORD PTR [ecx]
	cmp	ecx, DWORD PTR [eax]
	sete	al

; 151  :     }

	ret	4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UItem@CInifile@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CInifile::Item> > >::operator==
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UItem@CInifile@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UItem@CInifile@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CInifile::Item> > >::operator++, COMDAT
; _this$ = ecx

; 68   : #if _ITERATOR_DEBUG_LEVEL != 0
; 69   :         const auto _Mycont = static_cast<const _Myvec*>(this->_Getcont());
; 70   :         _STL_VERIFY(_Ptr, "can't increment value-initialized vector iterator");
; 71   :         _STL_VERIFY(_Ptr < _Mycont->_Mylast, "can't increment vector iterator past end");
; 72   : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 73   : 
; 74   :         ++_Ptr;

	add	DWORD PTR [ecx], 8

; 75   :         return *this;

	mov	eax, ecx

; 76   :     }

	ret	0
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UItem@CInifile@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CInifile::Item> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UItem@CInifile@@@std@@@std@@@std@@QAE@PAUItem@CInifile@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$dead$ = 12					; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UItem@CInifile@@@std@@@std@@@std@@QAE@PAUItem@CInifile@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CInifile::Item> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CInifile::Item> > >, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR __Parg$[esp-4]
	mov	DWORD PTR [ecx], eax

; 42   :         this->_Adopt(_Pvector);
; 43   :     }

	mov	eax, ecx
	ret	8
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UItem@CInifile@@@std@@@std@@@std@@QAE@PAUItem@CInifile@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CInifile::Item> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CInifile::Item> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@QBEAAU?$pair@$$CBVshared_str@@PAVIRender_Visual@@@1@XZ
_TEXT	SEGMENT
??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@QBEAAU?$pair@$$CBVshared_str@@PAVIRender_Visual@@@1@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > > >::operator*, COMDAT
; _this$ = ecx

; 186  :         return this->_Ptr->_Myval;

	mov	eax, DWORD PTR [ecx]
	add	eax, 16					; 00000010H

; 275  :         return const_cast<reference>(_Mybase::operator*());
; 276  :     }

	ret	0
??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@QBEAAU?$pair@$$CBVshared_str@@PAVIRender_Visual@@@1@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > > >::operator==, COMDAT
; _this$ = ecx

; 229  : #if _ITERATOR_DEBUG_LEVEL == 2
; 230  :         _STL_VERIFY(this->_Getcont() == _Right._Getcont(), "map/set iterators incompatible");
; 231  : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 232  : 
; 233  :         return this->_Ptr == _Right._Ptr;

	mov	eax, DWORD PTR __Right$[esp-4]
	mov	ecx, DWORD PTR [ecx]
	cmp	ecx, DWORD PTR [eax]
	sete	al

; 234  :     }

	ret	4
??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > > >::operator==
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > > >::operator++, COMDAT
; _this$ = ecx

; 193  :     _Tree_const_iterator& operator++() noexcept {

	push	esi
	mov	esi, ecx

; 194  : #if _ITERATOR_DEBUG_LEVEL == 2
; 195  :         _STL_VERIFY(this->_Getcont(), "cannot increment value-initialized map/set iterator");
; 196  :         _STL_VERIFY(!this->_Ptr->_Isnil, "cannot increment end map/set iterator");
; 197  : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 198  : 
; 199  :         _Mybase::operator++();

	call	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >,std::_Iterator_base0>::operator++

; 200  :         return *this;

	mov	eax, esi
	pop	esi

; 201  :     }

	ret	0
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$dead$ = 12					; size = 4
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@1@@Z PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >,std::_Iterator_base0>, COMDAT
; _this$ = ecx

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

	mov	eax, DWORD PTR __Pnode$[esp-4]
	mov	DWORD PTR [ecx], eax

; 39   :         this->_Adopt(_Plist);
; 40   :     }

	mov	eax, ecx
	ret	8
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@1@@Z ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >,std::_Iterator_base0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@std@@QBEAAU?$pair@QAVIRender_Visual@@Vshared_str@@@1@XZ
_TEXT	SEGMENT
??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@std@@QBEAAU?$pair@QAVIRender_Visual@@Vshared_str@@@1@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > > >::operator*, COMDAT
; _this$ = ecx

; 186  :         return this->_Ptr->_Myval;

	mov	eax, DWORD PTR [ecx]
	add	eax, 16					; 00000010H

; 275  :         return const_cast<reference>(_Mybase::operator*());
; 276  :     }

	ret	0
??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@std@@QBEAAU?$pair@QAVIRender_Visual@@Vshared_str@@@1@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > > >::operator==, COMDAT
; _this$ = ecx

; 229  : #if _ITERATOR_DEBUG_LEVEL == 2
; 230  :         _STL_VERIFY(this->_Getcont() == _Right._Getcont(), "map/set iterators incompatible");
; 231  : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 232  : 
; 233  :         return this->_Ptr == _Right._Ptr;

	mov	eax, DWORD PTR __Right$[esp-4]
	mov	ecx, DWORD PTR [ecx]
	cmp	ecx, DWORD PTR [eax]
	sete	al

; 234  :     }

	ret	4
??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > > >::operator==
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$dead$ = 12					; size = 4
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@1@@Z PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >,std::_Iterator_base0>, COMDAT
; _this$ = ecx

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

	mov	eax, DWORD PTR __Pnode$[esp-4]
	mov	DWORD PTR [ecx], eax

; 39   :         this->_Adopt(_Plist);
; 40   :     }

	mov	eax, ecx
	ret	8
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@1@@Z ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >,std::_Iterator_base0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CModelPool::ModelDef> > >::operator==, COMDAT
; _this$ = ecx

; 149  :         _Compat(_Right);
; 150  :         return _Ptr == _Right._Ptr;

	mov	eax, DWORD PTR __Right$[esp-4]
	mov	ecx, DWORD PTR [ecx]
	cmp	ecx, DWORD PTR [eax]
	sete	al

; 151  :     }

	ret	4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CModelPool::ModelDef> > >::operator==
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CModelPool::ModelDef> > >::operator++, COMDAT
; _this$ = ecx

; 68   : #if _ITERATOR_DEBUG_LEVEL != 0
; 69   :         const auto _Mycont = static_cast<const _Myvec*>(this->_Getcont());
; 70   :         _STL_VERIFY(_Ptr, "can't increment value-initialized vector iterator");
; 71   :         _STL_VERIFY(_Ptr < _Mycont->_Mylast, "can't increment vector iterator past end");
; 72   : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 73   : 
; 74   :         ++_Ptr;

	add	DWORD PTR [ecx], 12			; 0000000cH

; 75   :         return *this;

	mov	eax, ecx

; 76   :     }

	ret	0
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CModelPool::ModelDef> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@@std@@QAE@PAUModelDef@CModelPool@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$dead$ = 12					; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@@std@@QAE@PAUModelDef@CModelPool@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CModelPool::ModelDef> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CModelPool::ModelDef> > >, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR __Parg$[esp-4]
	mov	DWORD PTR [ecx], eax

; 42   :         this->_Adopt(_Pvector);
; 43   :     }

	mov	eax, ecx
	ret	8
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@@std@@QAE@PAUModelDef@CModelPool@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CModelPool::ModelDef> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CModelPool::ModelDef> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ?clear_and_free@?$xr_vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@@QAEXXZ
_TEXT	SEGMENT
?clear_and_free@?$xr_vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@@QAEXXZ PROC ; xr_vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::clear_and_free, COMDAT
; _this$ = ecx

; 127  : 	void	clear_and_free		()									{ inherited::clear();			}

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [ecx+4], eax
	ret	0
?clear_and_free@?$xr_vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@@QAEXXZ ENDP ; xr_vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::clear_and_free
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Getal@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@AAEAAV?$xalloc@UModelDef@CModelPool@@@@XZ
_TEXT	SEGMENT
?_Getal@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@AAEAAV?$xalloc@UModelDef@CModelPool@@@@XZ PROC ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::_Getal, COMDAT
; _this$ = ecx

; 1805 :         return _Mypair._Get_first();

	mov	eax, ecx

; 1806 :     }

	ret	0
?_Getal@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@AAEAAV?$xalloc@UModelDef@CModelPool@@@@XZ ENDP ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Orphan_range@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@ABEXPAUModelDef@CModelPool@@0@Z
_TEXT	SEGMENT
___formal$dead$ = 8					; size = 4
___formal$dead$ = 12					; size = 4
?_Orphan_range@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@ABEXPAUModelDef@CModelPool@@0@Z PROC ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::_Orphan_range, COMDAT
; _this$dead$ = ecx

; 1801 :     _CONSTEXPR20_CONTAINER void _Orphan_range(pointer, pointer) const {}

	ret	8
?_Orphan_range@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@ABEXPAUModelDef@CModelPool@@0@Z ENDP ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Tidy@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@AAEXXZ PROC ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::_Tidy, COMDAT
; _this$ = ecx

; 1742 :     _CONSTEXPR20_CONTAINER void _Tidy() noexcept { // free all storage

	push	esi
	mov	esi, ecx

; 1743 :         auto& _My_data    = _Mypair._Myval2;
; 1744 :         pointer& _Myfirst = _My_data._Myfirst;
; 1745 :         pointer& _Mylast  = _My_data._Mylast;
; 1746 :         pointer& _Myend   = _My_data._Myend;
; 1747 : 
; 1748 :         _My_data._Orphan_all();
; 1749 : 
; 1750 :         if (_Myfirst) { // destroy and deallocate old array

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN2@Tidy
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

	mov	DWORD PTR [esi], 0

; 1755 :             _Mylast  = nullptr;

	mov	DWORD PTR [esi+4], 0

; 1756 :             _Myend   = nullptr;

	mov	DWORD PTR [esi+8], 0
$LN2@Tidy:

; 1757 :         }
; 1758 :     }

	pop	esi
	ret	0
?_Tidy@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@AAEXXZ ENDP ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??0?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAE@XZ PROC ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >, COMDAT
; _this$ = ecx

; 390  :     _CONSTEXPR20_CONTAINER _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

	mov	DWORD PTR [ecx], 0

; 464  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));
; 465  :     }

	mov	eax, ecx

; 390  :     _CONSTEXPR20_CONTAINER _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0

; 464  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));
; 465  :     }

	ret	0
??0?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAE@XZ ENDP ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?_Get_scary@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@IAEPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_scary@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@IAEPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::_Get_scary, COMDAT
; _this$ = ecx

; 1943 :         return _STD addressof(_Mypair._Myval2._Myval2);

	mov	eax, ecx

; 1944 :     }

	ret	0
?_Get_scary@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@IAEPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::_Get_scary
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?_Getal@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@IAEAAV?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@XZ
_TEXT	SEGMENT
?_Getal@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@IAEAAV?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@XZ PROC ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::_Getal, COMDAT
; _this$ = ecx

; 1935 :         return _Mypair._Myval2._Get_first();

	mov	eax, ecx

; 1936 :     }

	ret	0
?_Getal@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@IAEAAV?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@XZ ENDP ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?size@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@QBEIXZ PROC ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::size, COMDAT
; _this$ = ecx

; 1202 :         return _Get_scary()->_Mysize;

	mov	eax, DWORD PTR [ecx+4]

; 1203 :     }

	ret	0
?size@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??0?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@QAE@ABU?$less@PAVIRender_Visual@@@1@@Z
_TEXT	SEGMENT
__Parg$dead$ = 8					; size = 4
??0?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@QAE@ABU?$less@PAVIRender_Visual@@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >, COMDAT
; _this$ = ecx

; 883  :     _Tree(const key_compare& _Parg) : _Mypair(_One_then_variadic_args_t{}, _Parg, _Zero_then_variadic_args_t{}) {

	push	esi
	mov	esi, ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	push	24					; 00000018H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 435  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+4], 0
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 345  :         _Construct_in_place(_Pnode->_Left, _Pnode);

	mov	DWORD PTR [eax], eax

; 346  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

	mov	DWORD PTR [eax+4], eax

; 347  :         _Construct_in_place(_Pnode->_Right, _Pnode);

	mov	DWORD PTR [eax+8], eax

; 348  :         _Pnode->_Color = _Black;

	mov	WORD PTR [eax+12], 257			; 00000101H

; 1917 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

	mov	DWORD PTR [esi], eax

; 884  :         _Alloc_sentinel_and_proxy();
; 885  :     }

	mov	eax, esi
	pop	esi
	ret	4
??0?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@QAE@ABU?$less@PAVIRender_Visual@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ?pointer_to@?$pointer_traits@PAU?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@SAPAU?$pair@QAVIRender_Visual@@Vshared_str@@@2@AAU32@@Z
_TEXT	SEGMENT
?pointer_to@?$pointer_traits@PAU?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@SAPAU?$pair@QAVIRender_Visual@@Vshared_str@@@2@AAU32@@Z PROC ; std::pointer_traits<std::pair<IRender_Visual * const,shared_str> *>::pointer_to, COMDAT
; __Val$ = ecx

; 186  :         return _STD addressof(_Val);

	mov	eax, ecx

; 187  :     }

	ret	0
?pointer_to@?$pointer_traits@PAU?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@SAPAU?$pair@QAVIRender_Visual@@Vshared_str@@@2@AAU32@@Z ENDP ; std::pointer_traits<std::pair<IRender_Visual * const,shared_str> *>::pointer_to
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?_Orphan_ptr@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Ptr$dead$ = 8						; size = 4
?_Orphan_ptr@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >::_Orphan_ptr, COMDAT
; _this$dead$ = ecx

; 714  : #if _ITERATOR_DEBUG_LEVEL == 2
; 715  :         _Lockit _Lock(_LOCK_DEBUG);
; 716  :         _Iterator_base12** _Pnext = &this->_Myproxy->_Myfirstiter;
; 717  :         while (*_Pnext) {
; 718  :             const auto _Pnextptr = static_cast<const_iterator&>(**_Pnext)._Ptr;
; 719  :             if (_Pnextptr == _Myhead || (_Ptr != nullptr && _Pnextptr != _Ptr)) {
; 720  :                 _Pnext = &(*_Pnext)->_Mynextiter;
; 721  :             } else { // orphan the iterator
; 722  :                 (*_Pnext)->_Myproxy = nullptr;
; 723  :                 *_Pnext             = (*_Pnext)->_Mynextiter;
; 724  :             }
; 725  :         }
; 726  : #else // ^^^ _ITERATOR_DEBUG_LEVEL == 2 ^^^ // vvv _ITERATOR_DEBUG_LEVEL != 2 vvv
; 727  :         (void) _Ptr;
; 728  : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 729  :     }

	ret	4
?_Orphan_ptr@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >::_Orphan_ptr
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?_Get_scary@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@IAEPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_scary@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@IAEPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >::_Get_scary, COMDAT
; _this$ = ecx

; 1943 :         return _STD addressof(_Mypair._Myval2._Myval2);

	mov	eax, ecx

; 1944 :     }

	ret	0
?_Get_scary@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@IAEPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >::_Get_scary
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?_Getal@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@IAEAAV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@XZ
_TEXT	SEGMENT
?_Getal@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@IAEAAV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@XZ PROC ; std::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >::_Getal, COMDAT
; _this$ = ecx

; 1935 :         return _Mypair._Myval2._Get_first();

	mov	eax, ecx

; 1936 :     }

	ret	0
?_Getal@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@IAEAAV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@XZ ENDP ; std::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??0?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@QAE@ABUstr_pred@CModelPool@@@Z
_TEXT	SEGMENT
__Parg$dead$ = 8					; size = 4
??0?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@QAE@ABUstr_pred@CModelPool@@@Z PROC ; std::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >, COMDAT
; _this$ = ecx

; 883  :     _Tree(const key_compare& _Parg) : _Mypair(_One_then_variadic_args_t{}, _Parg, _Zero_then_variadic_args_t{}) {

	push	esi
	mov	esi, ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	push	24					; 00000018H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 435  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+4], 0
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 345  :         _Construct_in_place(_Pnode->_Left, _Pnode);

	mov	DWORD PTR [eax], eax

; 346  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

	mov	DWORD PTR [eax+4], eax

; 347  :         _Construct_in_place(_Pnode->_Right, _Pnode);

	mov	DWORD PTR [eax+8], eax

; 348  :         _Pnode->_Color = _Black;

	mov	WORD PTR [eax+12], 257			; 00000101H

; 1917 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

	mov	DWORD PTR [esi], eax

; 884  :         _Alloc_sentinel_and_proxy();
; 885  :     }

	mov	eax, esi
	pop	esi
	ret	4
??0?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@QAE@ABUstr_pred@CModelPool@@@Z ENDP ; std::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ?pointer_to@?$pointer_traits@PAU?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@SAPAU?$pair@$$CBVshared_str@@PAVIRender_Visual@@@2@AAU32@@Z
_TEXT	SEGMENT
?pointer_to@?$pointer_traits@PAU?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@SAPAU?$pair@$$CBVshared_str@@PAVIRender_Visual@@@2@AAU32@@Z PROC ; std::pointer_traits<std::pair<shared_str const ,IRender_Visual *> *>::pointer_to, COMDAT
; __Val$ = ecx

; 186  :         return _STD addressof(_Val);

	mov	eax, ecx

; 187  :     }

	ret	0
?pointer_to@?$pointer_traits@PAU?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@SAPAU?$pair@$$CBVshared_str@@PAVIRender_Visual@@@2@AAU32@@Z ENDP ; std::pointer_traits<std::pair<shared_str const ,IRender_Visual *> *>::pointer_to
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@std@@@std@@QBE?AV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<IRender_Visual *> > >::operator+, COMDAT
; _this$ = ecx

; 119  :         _Ptr += _Off;

	mov	eax, DWORD PTR __Off$[esp-4]
	mov	ecx, DWORD PTR [ecx]
	lea	ecx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	DWORD PTR [eax], ecx

; 303  :         _Vector_iterator _Tmp = *this;
; 304  :         _Tmp += _Off; // TRANSITION, LLVM-49342
; 305  :         return _Tmp;
; 306  :     }

	ret	8
??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<IRender_Visual *> > >::operator+
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@std@@@std@@QBEAAPAVIRender_Visual@@XZ
_TEXT	SEGMENT
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@std@@@std@@QBEAAPAVIRender_Visual@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<IRender_Visual *> > >::operator*, COMDAT
; _this$ = ecx

; 261  :         return const_cast<reference>(_Mybase::operator*());

	mov	eax, DWORD PTR [ecx]

; 262  :     }

	ret	0
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@std@@@std@@QBEAAPAVIRender_Visual@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<IRender_Visual *> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ?clear_and_free@?$xr_vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@@QAEXXZ
_TEXT	SEGMENT
?clear_and_free@?$xr_vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@@QAEXXZ PROC ; xr_vector<IRender_Visual *,xalloc<IRender_Visual *> >::clear_and_free, COMDAT
; _this$ = ecx

; 127  : 	void	clear_and_free		()									{ inherited::clear();			}

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [ecx+4], eax
	ret	0
?clear_and_free@?$xr_vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@@QAEXXZ ENDP ; xr_vector<IRender_Visual *,xalloc<IRender_Visual *> >::clear_and_free
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Tidy@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@AAEXXZ PROC ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::_Tidy, COMDAT
; _this$ = ecx

; 1742 :     _CONSTEXPR20_CONTAINER void _Tidy() noexcept { // free all storage

	push	esi
	mov	esi, ecx

; 1743 :         auto& _My_data    = _Mypair._Myval2;
; 1744 :         pointer& _Myfirst = _My_data._Myfirst;
; 1745 :         pointer& _Mylast  = _My_data._Mylast;
; 1746 :         pointer& _Myend   = _My_data._Myend;
; 1747 : 
; 1748 :         _My_data._Orphan_all();
; 1749 : 
; 1750 :         if (_Myfirst) { // destroy and deallocate old array

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN2@Tidy
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

	mov	DWORD PTR [esi], 0

; 1755 :             _Mylast  = nullptr;

	mov	DWORD PTR [esi+4], 0

; 1756 :             _Myend   = nullptr;

	mov	DWORD PTR [esi+8], 0
$LN2@Tidy:

; 1757 :         }
; 1758 :     }

	pop	esi
	ret	0
?_Tidy@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@AAEXXZ ENDP ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??0?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@QAE@XZ PROC ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::vector<IRender_Visual *,xalloc<IRender_Visual *> >, COMDAT
; _this$ = ecx

; 390  :     _CONSTEXPR20_CONTAINER _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

	mov	DWORD PTR [ecx], 0

; 464  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));
; 465  :     }

	mov	eax, ecx

; 390  :     _CONSTEXPR20_CONTAINER _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0

; 464  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));
; 465  :     }

	ret	0
??0?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@QAE@XZ ENDP ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::vector<IRender_Visual *,xalloc<IRender_Visual *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UItem@CInifile@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
__Right$dead$ = 8					; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UItem@CInifile@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CInifile::Item> > >::_Compat, COMDAT
; _this$dead$ = ecx

; 182  :         // test for compatible iterator pair
; 183  : #if _ITERATOR_DEBUG_LEVEL == 0
; 184  :         (void) _Right;
; 185  : #else // ^^^ _ITERATOR_DEBUG_LEVEL == 0 ^^^ // vvv _ITERATOR_DEBUG_LEVEL != 0 vvv
; 186  :         _STL_VERIFY(this->_Getcont() == _Right._Getcont(), "vector iterators incompatible");
; 187  : #endif // _ITERATOR_DEBUG_LEVEL == 0
; 188  :     }

	ret	4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UItem@CInifile@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CInifile::Item> > >::_Compat
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBVshared_str@@PAVIRender_Visual@@@1@XZ
_TEXT	SEGMENT
??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBVshared_str@@PAVIRender_Visual@@@1@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > > >::operator*, COMDAT
; _this$ = ecx

; 180  : #if _ITERATOR_DEBUG_LEVEL == 2
; 181  :         const auto _Mycont = static_cast<const _Mytree*>(this->_Getcont());
; 182  :         _STL_ASSERT(_Mycont, "cannot dereference value-initialized map/set iterator");
; 183  :         _STL_VERIFY(this->_Ptr != _Mycont->_Myhead, "cannot dereference end map/set iterator");
; 184  : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 185  : 
; 186  :         return this->_Ptr->_Myval;

	mov	eax, DWORD PTR [ecx]
	add	eax, 16					; 00000010H

; 187  :     }

	ret	0
??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBVshared_str@@PAVIRender_Visual@@@1@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >,std::_Iterator_base0>::operator++, COMDAT
; _this$ = ecx

; 50   :     _Tree_unchecked_const_iterator& operator++() noexcept {

	push	esi
	mov	esi, ecx
	push	edi

; 51   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

	mov	edx, DWORD PTR [esi]
	mov	edi, DWORD PTR [edx+8]
	cmp	BYTE PTR [edi+13], 0
	je	SHORT $LN4@operator

; 52   :             _Nodeptr _Pnode;
; 53   :             while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right) {

	mov	eax, DWORD PTR [edx+4]
	cmp	BYTE PTR [eax+13], 0
	jne	SHORT $LN19@operator
$LL2@operator:
	cmp	edx, DWORD PTR [eax+8]
	jne	SHORT $LN19@operator

; 54   :                 _Ptr = _Pnode; // ==> parent while right subtree

	mov	DWORD PTR [esi], eax
	mov	edx, eax
	mov	eax, DWORD PTR [eax+4]
	cmp	BYTE PTR [eax+13], 0
	je	SHORT $LL2@operator
$LN19@operator:

; 55   :             }
; 56   : 
; 57   :             _Ptr = _Pnode; // ==> parent (head if end())
; 58   :         } else {
; 59   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree
; 60   :         }
; 61   : 
; 62   :         return *this;

	mov	DWORD PTR [esi], eax

; 63   :     }

	mov	eax, esi
	pop	edi
	pop	esi
	ret	0
$LN4@operator:

; 451  :         while (!_Pnode->_Left->_Isnil) {

	mov	ecx, DWORD PTR [edi]
	cmp	BYTE PTR [ecx+13], 0
	jne	SHORT $LN9@operator
	npad	7
$LL8@operator:
	mov	eax, DWORD PTR [ecx]

; 452  :             _Pnode = _Pnode->_Left;

	mov	edi, ecx
	mov	ecx, eax
	cmp	BYTE PTR [eax+13], 0
	je	SHORT $LL8@operator
$LN9@operator:

; 55   :             }
; 56   : 
; 57   :             _Ptr = _Pnode; // ==> parent (head if end())
; 58   :         } else {
; 59   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree
; 60   :         }
; 61   : 
; 62   :         return *this;

	mov	DWORD PTR [esi], edi

; 63   :     }

	mov	eax, esi
	pop	edi
	pop	esi
	ret	0
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >,std::_Iterator_base0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@std@@QBEABU?$pair@QAVIRender_Visual@@Vshared_str@@@1@XZ
_TEXT	SEGMENT
??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@std@@QBEABU?$pair@QAVIRender_Visual@@Vshared_str@@@1@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > > >::operator*, COMDAT
; _this$ = ecx

; 180  : #if _ITERATOR_DEBUG_LEVEL == 2
; 181  :         const auto _Mycont = static_cast<const _Mytree*>(this->_Getcont());
; 182  :         _STL_ASSERT(_Mycont, "cannot dereference value-initialized map/set iterator");
; 183  :         _STL_VERIFY(this->_Ptr != _Mycont->_Myhead, "cannot dereference end map/set iterator");
; 184  : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 185  : 
; 186  :         return this->_Ptr->_Myval;

	mov	eax, DWORD PTR [ecx]
	add	eax, 16					; 00000010H

; 187  :     }

	ret	0
??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@std@@QBEABU?$pair@QAVIRender_Visual@@Vshared_str@@@1@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >,std::_Iterator_base0>::operator++, COMDAT
; _this$ = ecx

; 50   :     _Tree_unchecked_const_iterator& operator++() noexcept {

	push	esi
	mov	esi, ecx
	push	edi

; 51   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

	mov	edx, DWORD PTR [esi]
	mov	edi, DWORD PTR [edx+8]
	cmp	BYTE PTR [edi+13], 0
	je	SHORT $LN4@operator

; 52   :             _Nodeptr _Pnode;
; 53   :             while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right) {

	mov	eax, DWORD PTR [edx+4]
	cmp	BYTE PTR [eax+13], 0
	jne	SHORT $LN19@operator
$LL2@operator:
	cmp	edx, DWORD PTR [eax+8]
	jne	SHORT $LN19@operator

; 54   :                 _Ptr = _Pnode; // ==> parent while right subtree

	mov	DWORD PTR [esi], eax
	mov	edx, eax
	mov	eax, DWORD PTR [eax+4]
	cmp	BYTE PTR [eax+13], 0
	je	SHORT $LL2@operator
$LN19@operator:

; 55   :             }
; 56   : 
; 57   :             _Ptr = _Pnode; // ==> parent (head if end())
; 58   :         } else {
; 59   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree
; 60   :         }
; 61   : 
; 62   :         return *this;

	mov	DWORD PTR [esi], eax

; 63   :     }

	mov	eax, esi
	pop	edi
	pop	esi
	ret	0
$LN4@operator:

; 451  :         while (!_Pnode->_Left->_Isnil) {

	mov	ecx, DWORD PTR [edi]
	cmp	BYTE PTR [ecx+13], 0
	jne	SHORT $LN9@operator
	npad	7
$LL8@operator:
	mov	eax, DWORD PTR [ecx]

; 452  :             _Pnode = _Pnode->_Left;

	mov	edi, ecx
	mov	ecx, eax
	cmp	BYTE PTR [eax+13], 0
	je	SHORT $LL8@operator
$LN9@operator:

; 55   :             }
; 56   : 
; 57   :             _Ptr = _Pnode; // ==> parent (head if end())
; 58   :         } else {
; 59   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree
; 60   :         }
; 61   : 
; 62   :         return *this;

	mov	DWORD PTR [esi], edi

; 63   :     }

	mov	eax, esi
	pop	edi
	pop	esi
	ret	0
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >,std::_Iterator_base0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
__Right$dead$ = 8					; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CModelPool::ModelDef> > >::_Compat, COMDAT
; _this$dead$ = ecx

; 182  :         // test for compatible iterator pair
; 183  : #if _ITERATOR_DEBUG_LEVEL == 0
; 184  :         (void) _Right;
; 185  : #else // ^^^ _ITERATOR_DEBUG_LEVEL == 0 ^^^ // vvv _ITERATOR_DEBUG_LEVEL != 0 vvv
; 186  :         _STL_VERIFY(this->_Getcont() == _Right._Getcont(), "vector iterators incompatible");
; 187  : #endif // _ITERATOR_DEBUG_LEVEL == 0
; 188  :     }

	ret	4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CModelPool::ModelDef> > >::_Compat
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$xalloc@UModelDef@CModelPool@@@@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@$00@std@@QAEAAV?$xalloc@UModelDef@CModelPool@@@@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$xalloc@UModelDef@CModelPool@@@@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@$00@std@@QAEAAV?$xalloc@UModelDef@CModelPool@@@@XZ PROC ; std::_Compressed_pair<xalloc<CModelPool::ModelDef>,std::_Vector_val<std::_Simple_types<CModelPool::ModelDef> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1339 :         return *this;

	mov	eax, ecx

; 1340 :     }

	ret	0
?_Get_first@?$_Compressed_pair@V?$xalloc@UModelDef@CModelPool@@@@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@$00@std@@QAEAAV?$xalloc@UModelDef@CModelPool@@@@XZ ENDP ; std::_Compressed_pair<xalloc<CModelPool::ModelDef>,std::_Vector_val<std::_Simple_types<CModelPool::ModelDef> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Destroy@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@AAEXPAUModelDef@CModelPool@@0@Z
_TEXT	SEGMENT
__First$dead$ = 8					; size = 4
__Last$dead$ = 12					; size = 4
?_Destroy@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@AAEXPAUModelDef@CModelPool@@0@Z PROC ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::_Destroy, COMDAT
; _this$dead$ = ecx

; 1666 :         // destroy [_First, _Last) using allocator
; 1667 :         _Destroy_range(_First, _Last, _Getal());
; 1668 :     }

	ret	8
?_Destroy@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@AAEXPAUModelDef@CModelPool@@0@Z ENDP ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?clear@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAEXXZ PROC ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::clear, COMDAT
; _this$ = ecx

; 1437 :         auto& _My_data    = _Mypair._Myval2;
; 1438 :         pointer& _Myfirst = _My_data._Myfirst;
; 1439 :         pointer& _Mylast  = _My_data._Mylast;
; 1440 : 
; 1441 :         _My_data._Orphan_all();
; 1442 :         _Destroy(_Myfirst, _Mylast);
; 1443 :         _Mylast = _Myfirst;

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [ecx+4], eax

; 1444 :     }

	ret	0
?clear@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAEXXZ ENDP ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ?deallocate@?$xalloc@UModelDef@CModelPool@@@@QBEXPAUModelDef@CModelPool@@I@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
_n$dead$ = 12						; size = 4
?deallocate@?$xalloc@UModelDef@CModelPool@@@@QBEXPAUModelDef@CModelPool@@I@Z PROC ; xalloc<CModelPool::ModelDef>::deallocate, COMDAT
; _this$dead$ = ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	mov	eax, DWORD PTR _p$[esp-4]
	test	eax, eax
	je	SHORT $LN4@deallocate
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN4@deallocate:
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h

; 82   : 							void					deallocate		(pointer p, size_type n) const			{	xr_free	(p);				}

	ret	8
?deallocate@?$xalloc@UModelDef@CModelPool@@@@QBEXPAUModelDef@CModelPool@@I@Z ENDP ; xalloc<CModelPool::ModelDef>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@$00@std@@QAEAAV?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@$00@std@@QAEAAV?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@XZ PROC ; std::_Compressed_pair<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1339 :         return *this;

	mov	eax, ecx

; 1340 :     }

	ret	0
?_Get_first@?$_Compressed_pair@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@$00@std@@QAEAAV?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@XZ ENDP ; std::_Compressed_pair<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?_Get_scary@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@IBEPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_scary@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@IBEPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::_Get_scary, COMDAT
; _this$ = ecx

; 1947 :         return _STD addressof(_Mypair._Myval2._Myval2);

	mov	eax, ecx

; 1948 :     }

	ret	0
?_Get_scary@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@IBEPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::_Get_scary
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@IAEXXZ PROC ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::_Alloc_sentinel_and_proxy, COMDAT
; _this$ = ecx

; 1913 :     void _Alloc_sentinel_and_proxy() {

	push	esi
	mov	esi, ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	24					; 00000018H
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 345  :         _Construct_in_place(_Pnode->_Left, _Pnode);

	mov	DWORD PTR [eax], eax

; 346  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

	mov	DWORD PTR [eax+4], eax

; 347  :         _Construct_in_place(_Pnode->_Right, _Pnode);

	mov	DWORD PTR [eax+8], eax

; 348  :         _Pnode->_Color = _Black;

	mov	WORD PTR [eax+12], 257			; 00000101H

; 1914 :         const auto _Scary = _Get_scary();
; 1915 :         auto&& _Alproxy   = _GET_PROXY_ALLOCATOR(_Alnode, _Getal());
; 1916 :         _Container_proxy_ptr<_Alnode> _Proxy(_Alproxy, *_Scary);
; 1917 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

	mov	DWORD PTR [esi], eax
	pop	esi

; 1918 :         _Proxy._Release();
; 1919 :     }

	ret	0
?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@IAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::_Alloc_sentinel_and_proxy
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@$00@std@@QAEAAV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@$00@std@@QAEAAV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@XZ PROC ; std::_Compressed_pair<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1339 :         return *this;

	mov	eax, ecx

; 1340 :     }

	ret	0
?_Get_first@?$_Compressed_pair@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@$00@std@@QAEAAV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@XZ ENDP ; std::_Compressed_pair<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@IAEXXZ PROC ; std::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >::_Alloc_sentinel_and_proxy, COMDAT
; _this$ = ecx

; 1913 :     void _Alloc_sentinel_and_proxy() {

	push	esi
	mov	esi, ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	24					; 00000018H
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 345  :         _Construct_in_place(_Pnode->_Left, _Pnode);

	mov	DWORD PTR [eax], eax

; 346  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

	mov	DWORD PTR [eax+4], eax

; 347  :         _Construct_in_place(_Pnode->_Right, _Pnode);

	mov	DWORD PTR [eax+8], eax

; 348  :         _Pnode->_Color = _Black;

	mov	WORD PTR [eax+12], 257			; 00000101H

; 1914 :         const auto _Scary = _Get_scary();
; 1915 :         auto&& _Alproxy   = _GET_PROXY_ALLOCATOR(_Alnode, _Getal());
; 1916 :         _Container_proxy_ptr<_Alnode> _Proxy(_Alproxy, *_Scary);
; 1917 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

	mov	DWORD PTR [esi], eax
	pop	esi

; 1918 :         _Proxy._Release();
; 1919 :     }

	ret	0
?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@IAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >::_Alloc_sentinel_and_proxy
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<IRender_Visual *> > >::operator+=, COMDAT
; _this$ = ecx

; 119  :         _Ptr += _Off;

	mov	eax, DWORD PTR __Off$[esp-4]
	shl	eax, 2
	add	DWORD PTR [ecx], eax

; 298  :         _Mybase::operator+=(_Off);
; 299  :         return *this;

	mov	eax, ecx

; 300  :     }

	ret	4
??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<IRender_Visual *> > >::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@std@@@std@@QBEABQAVIRender_Visual@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@std@@@std@@QBEABQAVIRender_Visual@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<IRender_Visual *> > >::operator*, COMDAT
; _this$ = ecx

; 46   : #if _ITERATOR_DEBUG_LEVEL != 0
; 47   :         const auto _Mycont = static_cast<const _Myvec*>(this->_Getcont());
; 48   :         _STL_VERIFY(_Ptr, "can't dereference value-initialized vector iterator");
; 49   :         _STL_VERIFY(
; 50   :             _Mycont->_Myfirst <= _Ptr && _Ptr < _Mycont->_Mylast, "can't dereference out of range vector iterator");
; 51   : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 52   : 
; 53   :         return *_Ptr;

	mov	eax, DWORD PTR [ecx]

; 54   :     }

	ret	0
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@std@@@std@@QBEABQAVIRender_Visual@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<IRender_Visual *> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?clear@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@QAEXXZ PROC ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::clear, COMDAT
; _this$ = ecx

; 1437 :         auto& _My_data    = _Mypair._Myval2;
; 1438 :         pointer& _Myfirst = _My_data._Myfirst;
; 1439 :         pointer& _Mylast  = _My_data._Mylast;
; 1440 : 
; 1441 :         _My_data._Orphan_all();
; 1442 :         _Destroy(_Myfirst, _Mylast);
; 1443 :         _Mylast = _Myfirst;

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [ecx+4], eax

; 1444 :     }

	ret	0
?clear@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@QAEXXZ ENDP ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >::_Min, COMDAT
; __Pnode$ = ecx

; 451  :         while (!_Pnode->_Left->_Isnil) {

	mov	edx, DWORD PTR [ecx]
	cmp	BYTE PTR [edx+13], 0
	jne	SHORT $LN9@Min
$LL2@Min:
	mov	ecx, DWORD PTR [edx]

; 452  :             _Pnode = _Pnode->_Left;

	mov	eax, edx
	mov	edx, ecx
	cmp	BYTE PTR [ecx+13], 0
	je	SHORT $LL2@Min

; 456  :     }

	ret	0
$LN9@Min:

; 453  :         }
; 454  : 
; 455  :         return _Pnode;

	mov	eax, ecx

; 456  :     }

	ret	0
?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >::_Min
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >::_Min, COMDAT
; __Pnode$ = ecx

; 451  :         while (!_Pnode->_Left->_Isnil) {

	mov	edx, DWORD PTR [ecx]
	cmp	BYTE PTR [edx+13], 0
	jne	SHORT $LN9@Min
$LL2@Min:
	mov	ecx, DWORD PTR [edx]

; 452  :             _Pnode = _Pnode->_Left;

	mov	eax, edx
	mov	edx, ecx
	cmp	BYTE PTR [ecx+13], 0
	je	SHORT $LL2@Min

; 456  :     }

	ret	0
$LN9@Min:

; 453  :         }
; 454  : 
; 455  :         return _Pnode;

	mov	eax, ecx

; 456  :     }

	ret	0
?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >::_Min
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<IRender_Visual *> > >::operator+=, COMDAT
; _this$ = ecx

; 118  :         _Verify_offset(_Off);
; 119  :         _Ptr += _Off;

	mov	eax, DWORD PTR __Off$[esp-4]
	shl	eax, 2
	add	DWORD PTR [ecx], eax

; 120  :         return *this;

	mov	eax, ecx

; 121  :     }

	ret	4
??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<IRender_Visual *> > >::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Verify_offset@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@std@@@std@@QBEXH@Z
_TEXT	SEGMENT
__Off$dead$ = 8						; size = 4
?_Verify_offset@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@std@@@std@@QBEXH@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<IRender_Visual *> > >::_Verify_offset, COMDAT
; _this$dead$ = ecx

; 102  : #if _ITERATOR_DEBUG_LEVEL == 0
; 103  :         (void) _Off;
; 104  : #else // ^^^ _ITERATOR_DEBUG_LEVEL == 0 ^^^ // vvv _ITERATOR_DEBUG_LEVEL != 0 vvv
; 105  :         const auto _Mycont = static_cast<const _Myvec*>(this->_Getcont());
; 106  :         _STL_VERIFY(_Off == 0 || _Ptr, "cannot seek value-initialized vector iterator");
; 107  :         if (_Off < 0) {
; 108  :             _STL_VERIFY(_Off >= _Mycont->_Myfirst - _Ptr, "cannot seek vector iterator before begin");
; 109  :         }
; 110  : 
; 111  :         if (_Off > 0) {
; 112  :             _STL_VERIFY(_Off <= _Mycont->_Mylast - _Ptr, "cannot seek vector iterator after end");
; 113  :         }
; 114  : #endif // _ITERATOR_DEBUG_LEVEL == 0
; 115  :     }

	ret	4
?_Verify_offset@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@std@@@std@@QBEXH@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<IRender_Visual *> > >::_Verify_offset
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h
;	COMDAT ??$xr_new@VFvisual@@@@YAPAVFvisual@@XZ
_TEXT	SEGMENT
??$xr_new@VFvisual@@@@YAPAVFvisual@@XZ PROC		; xr_new<Fvisual>, COMDAT

; 68   : 	T* ptr	= (T*)Memory.mem_alloc(sizeof(T));

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	esi
	push	edi
	push	108					; 0000006cH
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 69   : 	return new (ptr) T();

	mov	edi, eax
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp

; 19   : Fvisual::Fvisual()  : IRender_Visual()

	mov	ecx, edi
	call	DWORD PTR __imp_??0IRender_Visual@@QAE@XZ

; 20   : {

	lea	ecx, DWORD PTR [edi+68]
	call	DWORD PTR __imp_??0IRender_Mesh@@QAE@XZ
	mov	DWORD PTR [edi], OFFSET ??_7Fvisual@@6BIRender_Visual@@@
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h

; 69   : 	return new (ptr) T();

	mov	eax, edi
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp

; 20   : {

	mov	DWORD PTR [edi+68], OFFSET ??_7Fvisual@@6BIRender_Mesh@@@

; 21   : 	m_fast	=	0;

	mov	DWORD PTR [edi+104], 0
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h

; 69   : 	return new (ptr) T();

	pop	edi
	pop	esi

; 70   : }

	ret	0
??$xr_new@VFvisual@@@@YAPAVFvisual@@XZ ENDP		; xr_new<Fvisual>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h
;	COMDAT ??$xr_new@VFHierrarhyVisual@@@@YAPAVFHierrarhyVisual@@XZ
_TEXT	SEGMENT
??$xr_new@VFHierrarhyVisual@@@@YAPAVFHierrarhyVisual@@XZ PROC ; xr_new<FHierrarhyVisual>, COMDAT

; 68   : 	T* ptr	= (T*)Memory.mem_alloc(sizeof(T));

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	esi
	push	84					; 00000054H
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 69   : 	return new (ptr) T();

	mov	esi, eax
	mov	ecx, esi
	call	DWORD PTR __imp_??0FHierrarhyVisual@@QAE@XZ
	mov	DWORD PTR [esi], OFFSET ??_SFHierrarhyVisual@@6B@
	mov	eax, esi
	pop	esi

; 70   : }

	ret	0
??$xr_new@VFHierrarhyVisual@@@@YAPAVFHierrarhyVisual@@XZ ENDP ; xr_new<FHierrarhyVisual>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FProgressive.cpp
; File I:\Vitalya\mine\NSProjectX\xrEngine\Fmesh.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FProgressive.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h
;	COMDAT ??$xr_new@VFProgressive@@@@YAPAVFProgressive@@XZ
_TEXT	SEGMENT
??$xr_new@VFProgressive@@@@YAPAVFProgressive@@XZ PROC	; xr_new<FProgressive>, COMDAT

; 68   : 	T* ptr	= (T*)Memory.mem_alloc(sizeof(T));

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	esi
	push	edi
	push	140					; 0000008cH
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 69   : 	return new (ptr) T();

	mov	edi, eax
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp

; 19   : Fvisual::Fvisual()  : IRender_Visual()

	mov	ecx, edi
	call	DWORD PTR __imp_??0IRender_Visual@@QAE@XZ

; 20   : {

	lea	ecx, DWORD PTR [edi+68]
	call	DWORD PTR __imp_??0IRender_Mesh@@QAE@XZ

; 21   : 	m_fast	=	0;

	mov	DWORD PTR [edi+104], 0
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h

; 69   : 	return new (ptr) T();

	mov	eax, edi
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FProgressive.cpp

; 16   : {

	mov	DWORD PTR [edi], OFFSET ??_7FProgressive@@6BIRender_Visual@@@
	mov	DWORD PTR [edi+68], OFFSET ??_7FProgressive@@6BIRender_Mesh@@@
; File I:\Vitalya\mine\NSProjectX\xrEngine\Fmesh.h

; 105  : 	FSlideWindowItem() : sw(0), count(0) {};

	mov	DWORD PTR [edi+108], 0
	mov	DWORD PTR [edi+112], 0
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FProgressive.cpp

; 17   : 	xSWI			= 0;

	mov	DWORD PTR [edi+132], 0

; 18   : 	last_lod		= 0;

	mov	DWORD PTR [edi+136], 0
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h

; 69   : 	return new (ptr) T();

	pop	edi
	pop	esi

; 70   : }

	ret	0
??$xr_new@VFProgressive@@@@YAPAVFProgressive@@XZ ENDP	; xr_new<FProgressive>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h
;	COMDAT ??$xr_new@VCKinematicsAnimated@@@@YAPAVCKinematicsAnimated@@XZ
_TEXT	SEGMENT
??$xr_new@VCKinematicsAnimated@@@@YAPAVCKinematicsAnimated@@XZ PROC ; xr_new<CKinematicsAnimated>, COMDAT

; 68   : 	T* ptr	= (T*)Memory.mem_alloc(sizeof(T));

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	esi
	push	17896					; 000045e8H
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 69   : 	return new (ptr) T();

	push	17896					; 000045e8H
	mov	esi, eax
	push	0
	push	esi
	call	_memset
	add	esp, 12					; 0000000cH
	mov	ecx, esi
	call	DWORD PTR __imp_??0CKinematicsAnimated@@QAE@XZ
	mov	DWORD PTR [esi], OFFSET ??_SCKinematicsAnimated@@6B@
	mov	eax, esi
	pop	esi

; 70   : }

	ret	0
??$xr_new@VCKinematicsAnimated@@@@YAPAVCKinematicsAnimated@@XZ ENDP ; xr_new<CKinematicsAnimated>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h
;	COMDAT ??$xr_new@VCKinematics@@@@YAPAVCKinematics@@XZ
_TEXT	SEGMENT
??$xr_new@VCKinematics@@@@YAPAVCKinematics@@XZ PROC	; xr_new<CKinematics>, COMDAT

; 68   : 	T* ptr	= (T*)Memory.mem_alloc(sizeof(T));

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	esi
	push	168					; 000000a8H
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 69   : 	return new (ptr) T();

	mov	esi, eax
	mov	ecx, esi
	call	DWORD PTR __imp_??0CKinematics@@QAE@XZ
	mov	DWORD PTR [esi], OFFSET ??_SCKinematics@@6B@
	mov	eax, esi
	pop	esi

; 70   : }

	ret	0
??$xr_new@VCKinematics@@@@YAPAVCKinematics@@XZ ENDP	; xr_new<CKinematics>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FProgressive.cpp
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp
; File I:\Vitalya\mine\NSProjectX\xrEngine\Fmesh.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FProgressive.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\fskinned.h
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\fskinned.h
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h
;	COMDAT ??$xr_new@VCSkeletonX_PM@@@@YAPAVCSkeletonX_PM@@XZ
_TEXT	SEGMENT
??$xr_new@VCSkeletonX_PM@@@@YAPAVCSkeletonX_PM@@XZ PROC	; xr_new<CSkeletonX_PM>, COMDAT

; 68   : 	T* ptr	= (T*)Memory.mem_alloc(sizeof(T));

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	ebx
	push	esi
	push	edi
	push	176					; 000000b0H
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 69   : 	return new (ptr) T();

	mov	ebx, eax
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp

; 19   : Fvisual::Fvisual()  : IRender_Visual()

	mov	ecx, ebx
	call	DWORD PTR __imp_??0IRender_Visual@@QAE@XZ

; 20   : {

	lea	ecx, DWORD PTR [ebx+68]
	call	DWORD PTR __imp_??0IRender_Mesh@@QAE@XZ
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FProgressive.cpp

; 16   : {

	mov	DWORD PTR [ebx], OFFSET ??_7FProgressive@@6BIRender_Visual@@@
	lea	ecx, DWORD PTR [ebx+140]
	mov	DWORD PTR [ebx+68], OFFSET ??_7FProgressive@@6BIRender_Mesh@@@
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp

; 21   : 	m_fast	=	0;

	mov	DWORD PTR [ebx+104], 0
; File I:\Vitalya\mine\NSProjectX\xrEngine\Fmesh.h

; 105  : 	FSlideWindowItem() : sw(0), count(0) {};

	mov	DWORD PTR [ebx+108], 0
	mov	DWORD PTR [ebx+112], 0
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FProgressive.cpp

; 17   : 	xSWI			= 0;

	mov	DWORD PTR [ebx+132], 0

; 18   : 	last_lod		= 0;

	mov	DWORD PTR [ebx+136], 0
	call	DWORD PTR __imp_??0CSkeletonX@@QAE@XZ
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h

; 69   : 	return new (ptr) T();

	pop	edi
	pop	esi
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\fskinned.h

; 60   : 							CSkeletonX_PM	()	{}

	mov	DWORD PTR [ebx], OFFSET ??_7CSkeletonX_PM@@6BIRender_Visual@@@
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h

; 69   : 	return new (ptr) T();

	mov	eax, ebx
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\fskinned.h

; 60   : 							CSkeletonX_PM	()	{}

	mov	DWORD PTR [ebx+68], OFFSET ??_7CSkeletonX_PM@@6BIRender_Mesh@@@
	mov	DWORD PTR [ebx+140], OFFSET ??_7CSkeletonX_PM@@6B@
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h

; 69   : 	return new (ptr) T();

	pop	ebx

; 70   : }

	ret	0
??$xr_new@VCSkeletonX_PM@@@@YAPAVCSkeletonX_PM@@XZ ENDP	; xr_new<CSkeletonX_PM>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\fskinned.h
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\fskinned.h
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h
;	COMDAT ??$xr_new@VCSkeletonX_ST@@@@YAPAVCSkeletonX_ST@@XZ
_TEXT	SEGMENT
??$xr_new@VCSkeletonX_ST@@@@YAPAVCSkeletonX_ST@@XZ PROC	; xr_new<CSkeletonX_ST>, COMDAT

; 68   : 	T* ptr	= (T*)Memory.mem_alloc(sizeof(T));

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	ebx
	push	esi
	push	edi
	push	144					; 00000090H
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 69   : 	return new (ptr) T();

	mov	ebx, eax
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp

; 19   : Fvisual::Fvisual()  : IRender_Visual()

	mov	ecx, ebx
	call	DWORD PTR __imp_??0IRender_Visual@@QAE@XZ

; 20   : {

	lea	ecx, DWORD PTR [ebx+68]
	call	DWORD PTR __imp_??0IRender_Mesh@@QAE@XZ
	lea	ecx, DWORD PTR [ebx+108]
	mov	DWORD PTR [ebx], OFFSET ??_7Fvisual@@6BIRender_Visual@@@
	mov	DWORD PTR [ebx+68], OFFSET ??_7Fvisual@@6BIRender_Mesh@@@

; 21   : 	m_fast	=	0;

	mov	DWORD PTR [ebx+104], 0
	call	DWORD PTR __imp_??0CSkeletonX@@QAE@XZ
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h

; 69   : 	return new (ptr) T();

	pop	edi
	pop	esi
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\fskinned.h

; 39   : 							CSkeletonX_ST	()	{}

	mov	DWORD PTR [ebx], OFFSET ??_7CSkeletonX_ST@@6BIRender_Visual@@@
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h

; 69   : 	return new (ptr) T();

	mov	eax, ebx
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\fskinned.h

; 39   : 							CSkeletonX_ST	()	{}

	mov	DWORD PTR [ebx+68], OFFSET ??_7CSkeletonX_ST@@6BIRender_Mesh@@@
	mov	DWORD PTR [ebx+108], OFFSET ??_7CSkeletonX_ST@@6B@
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h

; 69   : 	return new (ptr) T();

	pop	ebx

; 70   : }

	ret	0
??$xr_new@VCSkeletonX_ST@@@@YAPAVCSkeletonX_ST@@XZ ENDP	; xr_new<CSkeletonX_ST>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h
;	COMDAT ??$xr_new@VCParticleEffect@PS@@@@YAPAVCParticleEffect@PS@@XZ
_TEXT	SEGMENT
??$xr_new@VCParticleEffect@PS@@@@YAPAVCParticleEffect@PS@@XZ PROC ; xr_new<PS::CParticleEffect>, COMDAT

; 68   : 	T* ptr	= (T*)Memory.mem_alloc(sizeof(T));

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	edi
	push	180					; 000000b4H
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 69   : 	return new (ptr) T();

	mov	edi, eax
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 52   : {

	mov	ecx, edi
	call	DWORD PTR __imp_??0IParticleCustom@@QAE@XZ
	mov	DWORD PTR [edi], OFFSET ??_7CParticleEffect@PS@@6B@

; 53   : 	m_HandleEffect 			= ParticleManager()->CreateEffect(1);		VERIFY(m_HandleEffect>=0);

	call	DWORD PTR __imp_?ParticleManager@PAPI@@YAPAVIParticleManager@1@XZ
	push	1
	mov	ecx, eax
	mov	edx, DWORD PTR [eax]
	call	DWORD PTR [edx+4]
	mov	DWORD PTR [edi+80], eax

; 54   : 	m_HandleActionList		= ParticleManager()->CreateActionList();	VERIFY(m_HandleActionList>=0);

	call	DWORD PTR __imp_?ParticleManager@PAPI@@YAPAVIParticleManager@1@XZ
	mov	ecx, eax
	mov	edx, DWORD PTR [eax]
	call	DWORD PTR [edx+12]
	mov	DWORD PTR [edi+84], eax
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h

; 69   : 	return new (ptr) T();

	mov	eax, edi
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h

; 15   :     IC	SelfRef	zero	()											{ flags=T(0);	return *this;	}

	mov	BYTE PTR [edi+176], 0
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 56   : 	m_Def					= 0;

	mov	DWORD PTR [edi+72], 0

; 57   : 	m_fElapsedLimit			= 0.f;

	mov	DWORD PTR [edi+76], 0

; 58   : 	m_MemDT					= 0;

	mov	DWORD PTR [edi+88], 0
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	mov	DWORD PTR [edi+92], 0
	mov	DWORD PTR [edi+96], 0
	mov	DWORD PTR [edi+100], 0
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 60   : 	m_DestroyCallback		= 0;

	mov	DWORD PTR [edi+168], 0

; 61   : 	m_CollisionCallback		= 0;

	mov	DWORD PTR [edi+172], 0
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 72   : 		_11=1; _12=0; _13=0; _14=0;

	mov	DWORD PTR [edi+104], 1065353216		; 3f800000H
	mov	DWORD PTR [edi+108], 0
	mov	DWORD PTR [edi+112], 0
	mov	DWORD PTR [edi+116], 0

; 73   : 		_21=0; _22=1; _23=0; _24=0;

	mov	DWORD PTR [edi+120], 0
	mov	DWORD PTR [edi+124], 1065353216		; 3f800000H
	mov	DWORD PTR [edi+128], 0
	mov	DWORD PTR [edi+132], 0

; 74   : 		_31=0; _32=0; _33=1; _34=0;

	mov	DWORD PTR [edi+136], 0
	mov	DWORD PTR [edi+140], 0
	mov	DWORD PTR [edi+144], 1065353216		; 3f800000H
	mov	DWORD PTR [edi+148], 0

; 75   : 		_41=0; _42=0; _43=0; _44=1;

	mov	DWORD PTR [edi+152], 0
	mov	DWORD PTR [edi+156], 0
	mov	DWORD PTR [edi+160], 0
	mov	DWORD PTR [edi+164], 1065353216		; 3f800000H
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h

; 69   : 	return new (ptr) T();

	pop	edi

; 70   : }

	ret	0
??$xr_new@VCParticleEffect@PS@@@@YAPAVCParticleEffect@PS@@XZ ENDP ; xr_new<PS::CParticleEffect>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleGroup.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h
;	COMDAT ??$xr_new@VCParticleGroup@PS@@@@YAPAVCParticleGroup@PS@@XZ
_TEXT	SEGMENT
??$xr_new@VCParticleGroup@PS@@@@YAPAVCParticleGroup@PS@@XZ PROC ; xr_new<PS::CParticleGroup>, COMDAT

; 68   : 	T* ptr	= (T*)Memory.mem_alloc(sizeof(T));

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	esi
	push	108					; 0000006cH
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 69   : 	return new (ptr) T();

	mov	esi, eax
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleGroup.cpp

; 367  : {

	mov	ecx, esi
	call	DWORD PTR __imp_??0IParticleCustom@@QAE@XZ
	mov	DWORD PTR [esi], OFFSET ??_7CParticleGroup@PS@@6B@
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h

; 69   : 	return new (ptr) T();

	mov	eax, esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 390  :     _CONSTEXPR20_CONTAINER _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

	mov	DWORD PTR [esi+92], 0
	mov	DWORD PTR [esi+96], 0
	mov	DWORD PTR [esi+100], 0
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h

; 15   :     IC	SelfRef	zero	()											{ flags=T(0);	return *this;	}

	mov	BYTE PTR [esi+104], 0
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	mov	DWORD PTR [esi+80], 0
	mov	DWORD PTR [esi+84], 0
	mov	DWORD PTR [esi+88], 0
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h

; 69   : 	return new (ptr) T();

	pop	esi

; 70   : }

	ret	0
??$xr_new@VCParticleGroup@PS@@@@YAPAVCParticleGroup@PS@@XZ ENDP ; xr_new<PS::CParticleGroup>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h
; File I:\Vitalya\mine\NSProjectX\xrCore\xr_resource.h
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h
;	COMDAT ??$xr_new@VFLOD@@@@YAPAVFLOD@@XZ
_TEXT	SEGMENT
??$xr_new@VFLOD@@@@YAPAVFLOD@@XZ PROC			; xr_new<FLOD>, COMDAT

; 68   : 	T* ptr	= (T*)Memory.mem_alloc(sizeof(T));

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	esi
	push	1084					; 0000043cH
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 69   : 	return new (ptr) T();

	push	1084					; 0000043cH
	mov	esi, eax
	push	0
	push	esi
	call	_memset
	add	esp, 12					; 0000000cH
	mov	ecx, esi
	call	DWORD PTR __imp_??0FHierrarhyVisual@@QAE@XZ
	mov	DWORD PTR [esi], OFFSET ??_7FLOD@@6B@
	mov	eax, esi
; File I:\Vitalya\mine\NSProjectX\xrCore\xr_resource.h

; 61   : 						resptr_core		()												{	p_ = 0;						}

	mov	DWORD PTR [esi+84], 0
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h

; 69   : 	return new (ptr) T();

	pop	esi

; 70   : }

	ret	0
??$xr_new@VFLOD@@@@YAPAVFLOD@@XZ ENDP			; xr_new<FLOD>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FTreeVisual.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FTreeVisual.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h
;	COMDAT ??$xr_new@VFTreeVisual_ST@@@@YAPAVFTreeVisual_ST@@XZ
_TEXT	SEGMENT
??$xr_new@VFTreeVisual_ST@@@@YAPAVFTreeVisual_ST@@XZ PROC ; xr_new<FTreeVisual_ST>, COMDAT

; 68   : 	T* ptr	= (T*)Memory.mem_alloc(sizeof(T));

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	esi
	push	edi
	push	208					; 000000d0H
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 69   : 	return new (ptr) T();

	mov	edi, eax
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FTreeVisual.cpp

; 21   : {

	mov	ecx, edi
	call	DWORD PTR __imp_??0IRender_Visual@@QAE@XZ
	lea	ecx, DWORD PTR [edi+68]
	call	DWORD PTR __imp_??0IRender_Mesh@@QAE@XZ

; 171  : {

	mov	DWORD PTR [edi], OFFSET ??_7FTreeVisual_ST@@6BIRender_Visual@@@
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h

; 69   : 	return new (ptr) T();

	mov	eax, edi
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FTreeVisual.cpp

; 171  : {

	mov	DWORD PTR [edi+68], OFFSET ??_7FTreeVisual_ST@@6BIRender_Mesh@@@
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h

; 69   : 	return new (ptr) T();

	pop	edi
	pop	esi

; 70   : }

	ret	0
??$xr_new@VFTreeVisual_ST@@@@YAPAVFTreeVisual_ST@@XZ ENDP ; xr_new<FTreeVisual_ST>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FTreeVisual.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FTreeVisual.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h
;	COMDAT ??$xr_new@VFTreeVisual_PM@@@@YAPAVFTreeVisual_PM@@XZ
_TEXT	SEGMENT
??$xr_new@VFTreeVisual_PM@@@@YAPAVFTreeVisual_PM@@XZ PROC ; xr_new<FTreeVisual_PM>, COMDAT

; 68   : 	T* ptr	= (T*)Memory.mem_alloc(sizeof(T));

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	esi
	push	edi
	push	216					; 000000d8H
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 69   : 	return new (ptr) T();

	mov	edi, eax
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FTreeVisual.cpp

; 21   : {

	mov	ecx, edi
	call	DWORD PTR __imp_??0IRender_Visual@@QAE@XZ
	lea	ecx, DWORD PTR [edi+68]
	call	DWORD PTR __imp_??0IRender_Mesh@@QAE@XZ

; 200  : {

	mov	DWORD PTR [edi], OFFSET ??_7FTreeVisual_PM@@6BIRender_Visual@@@
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h

; 69   : 	return new (ptr) T();

	mov	eax, edi
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FTreeVisual.cpp

; 200  : {

	mov	DWORD PTR [edi+68], OFFSET ??_7FTreeVisual_PM@@6BIRender_Mesh@@@

; 201  : 	pSWI						= 0;

	mov	DWORD PTR [edi+208], 0

; 202  : 	last_lod					= 0;

	mov	DWORD PTR [edi+212], 0
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h

; 69   : 	return new (ptr) T();

	pop	edi
	pop	esi

; 70   : }

	ret	0
??$xr_new@VFTreeVisual_PM@@@@YAPAVFTreeVisual_PM@@XZ ENDP ; xr_new<FTreeVisual_PM>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h
;	COMDAT ??$xr_delete@VIRender_Visual@@@@YAXAAPAVIRender_Visual@@@Z
_TEXT	SEGMENT
??$xr_delete@VIRender_Visual@@@@YAXAAPAVIRender_Visual@@@Z PROC ; xr_delete<IRender_Visual>, COMDAT
; _ptr$ = ecx

; 150  : {

	push	edi
	mov	edi, ecx

; 151  : 	if (ptr) 

	mov	eax, DWORD PTR [edi]
	test	eax, eax
	je	SHORT $LN2@xr_delete

; 132  : 		void*	_real_ptr	= dynamic_cast<void*>(ptr);

	push	esi
	push	eax
	call	___RTCastToVoid

; 133  : 		ptr->~T			();

	mov	ecx, DWORD PTR [edi]
	add	esp, 4
	mov	esi, eax
	mov	edx, DWORD PTR [ecx]
	push	0
	call	DWORD PTR [edx+36]

; 134  : 		Memory.mem_free	(_real_ptr);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	esi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z

; 152  : 	{
; 153  : 		xr_special_free<is_polymorphic<T>::result,T>()(ptr);
; 154  : 		ptr = nullptr;

	mov	DWORD PTR [edi], 0
	pop	esi
$LN2@xr_delete:

; 155  : 	}
; 156  : }

	pop	edi
	ret	0
??$xr_delete@VIRender_Visual@@@@YAXAAPAVIRender_Visual@@@Z ENDP ; xr_delete<IRender_Visual>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h
;	COMDAT ??$xr_new@Vmotions_container@@@@YAPAVmotions_container@@XZ
_TEXT	SEGMENT
??$xr_new@Vmotions_container@@@@YAPAVmotions_container@@XZ PROC ; xr_new<motions_container>, COMDAT

; 68   : 	T* ptr	= (T*)Memory.mem_alloc(sizeof(T));

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	8
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 69   : 	return new (ptr) T();

	mov	ecx, eax
	jmp	DWORD PTR __imp_??0motions_container@@QAE@XZ
??$xr_new@Vmotions_container@@@@YAPAVmotions_container@@XZ ENDP ; xr_new<motions_container>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h
;	COMDAT ??$xr_delete@Vmotions_container@@@@YAXAAPAVmotions_container@@@Z
_TEXT	SEGMENT
??$xr_delete@Vmotions_container@@@@YAXAAPAVmotions_container@@@Z PROC ; xr_delete<motions_container>, COMDAT
; _ptr$dead$ = ecx

; 150  : {

	push	ecx
	push	esi
	mov	esi, DWORD PTR __imp_?g_pMotionsContainer@@3PAVmotions_container@@A

; 151  : 	if (ptr) 

	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN2@xr_delete
	call	DWORD PTR __imp_??1motions_container@@QAE@XZ

; 144  : 		Memory.mem_free	(ptr);

	push	DWORD PTR [esi]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z

; 152  : 	{
; 153  : 		xr_special_free<is_polymorphic<T>::result,T>()(ptr);
; 154  : 		ptr = nullptr;

	mov	DWORD PTR [esi], 0
$LN2@xr_delete:
	pop	esi

; 155  : 	}
; 156  : }

	pop	ecx
	ret	0
??$xr_delete@Vmotions_container@@@@YAXAAPAVmotions_container@@@Z ENDP ; xr_delete<motions_container>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??$erase@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@$0A@@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@1@V21@@Z
_TEXT	SEGMENT
__Successor$1 = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
??$erase@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@$0A@@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@1@V21@@Z PROC ; std::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >::erase<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > > >,0>, COMDAT
; _this$ = ecx

; 1308 :     iterator erase(iterator _Where) noexcept /* strengthened */ {

	push	ecx
	push	esi

; 1282 :         _Unchecked_const_iterator _Successor = _Where;

	mov	esi, DWORD PTR __Where$[esp+4]

; 1308 :     iterator erase(iterator _Where) noexcept /* strengthened */ {

	push	edi
	mov	edi, ecx

; 1282 :         _Unchecked_const_iterator _Successor = _Where;

	mov	DWORD PTR __Successor$1[esp+12], esi

; 1283 :         ++_Successor; // save successor iterator for return

	lea	ecx, DWORD PTR __Successor$1[esp+12]
	call	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >,std::_Iterator_base0>::operator++

; 1284 :         _Nodeptr _Erasednode = _Scary->_Extract(_Where); // node to erase

	push	esi
	mov	ecx, edi
	call	?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >::_Extract
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 50   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	pop	edi
	pop	esi
	mov	ecx, DWORD PTR [eax+16]
	test	ecx, ecx
	je	SHORT $LN24@erase
	dec	DWORD PTR [ecx]
	mov	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN24@erase
	mov	DWORD PTR [eax+16], 0
$LN24@erase:
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	test	eax, eax
	je	SHORT $LN41@erase
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN41@erase:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1315 :     }

	mov	eax, DWORD PTR ___$ReturnUdt$[esp]
	mov	ecx, DWORD PTR __Successor$1[esp+4]
	mov	DWORD PTR [eax], ecx
	pop	ecx
	ret	8
??$erase@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@$0A@@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@1@V21@@Z ENDP ; std::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >::erase<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > > >,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ??$mk_pair@PAVIRender_Visual@@PAD@@YA?AU?$pair@PAVIRender_Visual@@PAD@std@@PAVIRender_Visual@@PAD@Z
_TEXT	SEGMENT
__Val2$ = 8						; size = 4
??$mk_pair@PAVIRender_Visual@@PAD@@YA?AU?$pair@PAVIRender_Visual@@PAD@std@@PAVIRender_Visual@@PAD@Z PROC ; mk_pair<IRender_Visual *,char *>, COMDAT
; ___$ReturnUdt$ = ecx
; __Val1$ = edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	eax, DWORD PTR __Val2$[esp-4]
	mov	DWORD PTR [ecx+4], eax
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h

; 207  : template	<class _Ty1, class _Ty2> inline	std::pair<_Ty1, _Ty2>		mk_pair		(_Ty1 _Val1, _Ty2 _Val2)	{	return (std::pair<_Ty1, _Ty2>(_Val1, _Val2));	}

	mov	eax, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	DWORD PTR [ecx], edx
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h

; 207  : template	<class _Ty1, class _Ty2> inline	std::pair<_Ty1, _Ty2>		mk_pair		(_Ty1 _Val1, _Ty2 _Val2)	{	return (std::pair<_Ty1, _Ty2>(_Val1, _Val2));	}

	ret	0
??$mk_pair@PAVIRender_Visual@@PAD@@YA?AU?$pair@PAVIRender_Visual@@PAD@std@@PAVIRender_Visual@@PAD@Z ENDP ; mk_pair<IRender_Visual *,char *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\map
;	COMDAT ??$insert@U?$pair@PAVIRender_Visual@@PAD@std@@$0A@@?$map@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@PAVIRender_Visual@@PAD@1@@Z
_TEXT	SEGMENT
__Loc$1$ = -16						; size = 4
$T3 = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Loc$3$ = 12						; size = 4
__Val$ = 12						; size = 4
??$insert@U?$pair@PAVIRender_Visual@@PAD@std@@$0A@@?$map@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@PAVIRender_Visual@@PAD@1@@Z PROC ; std::map<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> > >::insert<std::pair<IRender_Visual *,char *>,0>, COMDAT
; _this$ = ecx

; 162  :     pair<iterator, bool> insert(_Valty&& _Val) {

	sub	esp, 20					; 00000014H
	push	ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1006 :             _Loc                = _Find_lower_bound(_Keyval);

	mov	ebx, DWORD PTR __Val$[esp+20]
	lea	eax, DWORD PTR $T3[esp+24]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\map

; 162  :     pair<iterator, bool> insert(_Valty&& _Val) {

	push	ebp
	push	esi
	push	edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1006 :             _Loc                = _Find_lower_bound(_Keyval);

	push	ebx
	push	eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\map

; 162  :     pair<iterator, bool> insert(_Valty&& _Val) {

	mov	edi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1006 :             _Loc                = _Find_lower_bound(_Keyval);

	call	??$_Find_lower_bound@PAVIRender_Visual@@@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@1@ABQAVIRender_Visual@@@Z ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::_Find_lower_bound<IRender_Visual *>
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Loc$1$[esp+36], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Loc$3$[esp+32], ecx
	mov	ecx, DWORD PTR [eax+8]

; 1591 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

	cmp	BYTE PTR [ecx+13], 0
	jne	SHORT $LN6@insert
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

	mov	eax, DWORD PTR [ebx]
	cmp	eax, DWORD PTR [ecx+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1591 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

	jb	SHORT $LN6@insert
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	eax, DWORD PTR ___$ReturnUdt$[esp+32]
	xor	dl, dl
	mov	DWORD PTR [eax], ecx
	mov	BYTE PTR [eax+4], dl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\map

; 164  :     }

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 20					; 00000014H
	ret	8
$LN6@insert:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1615 :         if (max_size() == _Get_scary()->_Mysize) {

	cmp	DWORD PTR [edi+4], 178956970		; 0aaaaaaaH
	je	SHORT $LN92@insert
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1012 :             _Inserted = _Tree_temp_node<_Alnode>(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...)._Release();

	mov	ebp, DWORD PTR [edi]
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	push	24					; 00000018H
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 242  :         : first(_STD forward<_Other1>(_Right.first)), second(_STD forward<_Other2>(_Right.second)) {}

	mov	ecx, DWORD PTR [ebx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 966  :         _Ptr = _Al.allocate(1);

	mov	esi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 242  :         : first(_STD forward<_Other1>(_Right.first)), second(_STD forward<_Other2>(_Right.second)) {}

	mov	DWORD PTR [esi+16], ecx
	mov	ecx, DWORD PTR [ebx+4]
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 52   : 	void				_set		(str_c rhs) 					{	str_value* v = g_pStringContainer->dock(rhs); if (0!=v) v->dwReference++; _dec(); p_ = v;	}

	push	ecx
	mov	ecx, DWORD PTR __imp_?g_pStringContainer@@3PAVstr_container@@A

; 58   : 						shared_str	(str_c rhs) 					{	p_ = 0;	_set(rhs);								}

	mov	DWORD PTR [esi+20], 0

; 52   : 	void				_set		(str_c rhs) 					{	str_value* v = g_pStringContainer->dock(rhs); if (0!=v) v->dwReference++; _dec(); p_ = v;	}

	mov	ecx, DWORD PTR [ecx]
	call	DWORD PTR __imp_?dock@str_container@@QAEPAUstr_value@@PBD@Z
	test	eax, eax
	je	SHORT $LN39@insert
	inc	DWORD PTR [eax]
$LN39@insert:

; 50   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	mov	ecx, DWORD PTR [esi+20]
	test	ecx, ecx
	je	SHORT $LN43@insert
	dec	DWORD PTR [ecx]
$LN43@insert:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1031 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

	push	esi
	push	DWORD PTR __Loc$3$[esp+36]
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 52   : 	void				_set		(str_c rhs) 					{	str_value* v = g_pStringContainer->dock(rhs); if (0!=v) v->dwReference++; _dec(); p_ = v;	}

	mov	DWORD PTR [esi+20], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1031 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

	mov	ecx, edi
	push	DWORD PTR __Loc$1$[esp+44]

; 806  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

	mov	DWORD PTR [esi], ebp

; 807  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

	mov	DWORD PTR [esi+4], ebp

; 808  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

	mov	DWORD PTR [esi+8], ebp

; 809  :         this->_Ptr->_Color = _Red;

	mov	WORD PTR [esi+12], 0

; 1031 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

	call	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >::_Insert_node
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\map

; 164  :     }

	pop	edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	ecx, eax
	mov	dl, 1
	mov	eax, DWORD PTR ___$ReturnUdt$[esp+28]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\map

; 164  :     }

	pop	esi
	pop	ebp
	pop	ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	DWORD PTR [eax], ecx
	mov	BYTE PTR [eax+4], dl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\map

; 164  :     }

	add	esp, 20					; 00000014H
	ret	8
$LN92@insert:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1616 :             _Throw_tree_length_error();

	call	?_Throw_tree_length_error@std@@YAXXZ	; std::_Throw_tree_length_error
$LN90@insert:
	int	3
??$insert@U?$pair@PAVIRender_Visual@@PAD@std@@$0A@@?$map@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@PAVIRender_Visual@@PAD@1@@Z ENDP ; std::map<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> > >::insert<std::pair<IRender_Visual *,char *>,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ??$mk_pair@Vshared_str@@PAVIRender_Visual@@@@YA?AU?$pair@Vshared_str@@PAVIRender_Visual@@@std@@Vshared_str@@PAVIRender_Visual@@@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
??$mk_pair@Vshared_str@@PAVIRender_Visual@@@@YA?AU?$pair@Vshared_str@@PAVIRender_Visual@@@std@@Vshared_str@@PAVIRender_Visual@@@Z PROC ; mk_pair<shared_str,IRender_Visual *>, COMDAT
; ___$ReturnUdt$ = ecx
; __Val2$ = edx
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	eax, DWORD PTR __Val1$[esp-4]

; 59   : 						shared_str	(shared_str const &rhs)			{	p_ = 0;	_set(rhs);								}

	mov	DWORD PTR [ecx], 0
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h

; 207  : template	<class _Ty1, class _Ty2> inline	std::pair<_Ty1, _Ty2>		mk_pair		(_Ty1 _Val1, _Ty2 _Val2)	{	return (std::pair<_Ty1, _Ty2>(_Val1, _Val2));	}

	push	esi
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	esi, eax
	test	eax, eax
	je	SHORT $LN12@mk_pair
	inc	DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]

; 50   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	test	eax, eax
	je	SHORT $LN23@mk_pair
	dec	DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN23@mk_pair
	mov	eax, DWORD PTR __Val1$[esp]
	mov	DWORD PTR [ecx], esi
	mov	DWORD PTR [ecx+4], edx
	pop	esi
	dec	DWORD PTR [eax]
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h

; 207  : template	<class _Ty1, class _Ty2> inline	std::pair<_Ty1, _Ty2>		mk_pair		(_Ty1 _Val1, _Ty2 _Val2)	{	return (std::pair<_Ty1, _Ty2>(_Val1, _Val2));	}

	mov	eax, ecx
	ret	0
$LN23@mk_pair:
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 50   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	mov	eax, DWORD PTR __Val1$[esp]
$LN12@mk_pair:

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	DWORD PTR [ecx], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	DWORD PTR [ecx+4], edx
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 50   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	test	eax, eax
	je	SHORT $LN22@mk_pair
	dec	DWORD PTR [eax]
$LN22@mk_pair:
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h

; 207  : template	<class _Ty1, class _Ty2> inline	std::pair<_Ty1, _Ty2>		mk_pair		(_Ty1 _Val1, _Ty2 _Val2)	{	return (std::pair<_Ty1, _Ty2>(_Val1, _Val2));	}

	mov	eax, ecx
	pop	esi
	ret	0
??$mk_pair@Vshared_str@@PAVIRender_Visual@@@@YA?AU?$pair@Vshared_str@@PAVIRender_Visual@@@std@@Vshared_str@@PAVIRender_Visual@@@Z ENDP ; mk_pair<shared_str,IRender_Visual *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\map
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\modelpool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\map
;	COMDAT ??$insert@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@$0A@@?$multimap@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@1@$$QAU?$pair@Vshared_str@@PAVIRender_Visual@@@1@@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Val$ = 12						; size = 4
??$insert@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@$0A@@?$multimap@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@1@$$QAU?$pair@Vshared_str@@PAVIRender_Visual@@@1@@Z PROC ; std::multimap<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> > >::insert<std::pair<shared_str,IRender_Visual *>,0>, COMDAT
; _this$ = ecx

; 508  :     iterator insert(_Valty&& _Val) {

	push	ecx
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	edi, ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	24					; 00000018H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\map

; 508  :     iterator insert(_Valty&& _Val) {

	mov	DWORD PTR _this$1$[esp+24], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1015 :             _Tree_temp_node<_Alnode> _Newnode(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...);

	mov	esi, DWORD PTR [edi]
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	edx, DWORD PTR __Val$[esp+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 966  :         _Ptr = _Al.allocate(1);

	mov	ebp, eax
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 59   : 						shared_str	(shared_str const &rhs)			{	p_ = 0;	_set(rhs);								}

	mov	DWORD PTR [ebp+16], 0

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	ecx, DWORD PTR [edx]
	test	ecx, ecx
	je	SHORT $LN32@insert
	inc	DWORD PTR [ecx]
	mov	eax, DWORD PTR [ebp+16]

; 50   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	test	eax, eax
	je	SHORT $LN32@insert
	dec	DWORD PTR [eax]
$LN32@insert:

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	DWORD PTR [ebp+16], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 242  :         : first(_STD forward<_Other1>(_Right.first)), second(_STD forward<_Other2>(_Right.second)) {}

	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ebp+20], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 806  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

	mov	DWORD PTR [ebp], esi

; 807  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

	mov	DWORD PTR [ebp+4], esi

; 808  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

	mov	DWORD PTR [ebp+8], esi

; 809  :         this->_Ptr->_Color = _Red;

	mov	WORD PTR [ebp+12], 0

; 1572 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

	mov	eax, DWORD PTR [edi]
	mov	ebx, DWORD PTR [eax+4]
	xor	eax, eax

; 1573 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1574 :         while (!_Trynode->_Isnil) {

	cmp	BYTE PTR [ebx+13], al
	jne	SHORT $LN36@insert
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 73   : 	bool				equal		(const shared_str & rhs) const	{	return (p_ == rhs.p_);							}

	mov	edi, ecx
	mov	esi, ebx
$LL35@insert:
	mov	eax, DWORD PTR [esi+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1575 :             _Result._Location._Parent = _Trynode;

	mov	ebx, esi
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 73   : 	bool				equal		(const shared_str & rhs) const	{	return (p_ == rhs.p_);							}

	cmp	edi, eax

; 104  : 	if (a.equal(b))		return 0;

	je	SHORT $LN37@insert

; 65   : 	str_c				operator*	() const						{	return p_?p_->value:0;							}

	lea	ecx, DWORD PTR [eax+12]
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 183  : {	return (int)strcmp(S1,S2);  }

	mov	edx, edi
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 65   : 	str_c				operator*	() const						{	return p_?p_->value:0;							}

	neg	eax
	sbb	eax, eax
	and	eax, ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 183  : {	return (int)strcmp(S1,S2);  }

	neg	edx
	lea	ecx, DWORD PTR [edi+12]
	sbb	edx, edx
	and	edx, ecx
	npad	2
$LL108@insert:
	mov	cl, BYTE PTR [edx]
	cmp	cl, BYTE PTR [eax]
	jne	SHORT $LN109@insert
	test	cl, cl
	je	SHORT $LN110@insert
	mov	cl, BYTE PTR [edx+1]
	cmp	cl, BYTE PTR [eax+1]
	jne	SHORT $LN109@insert
	add	edx, 2
	add	eax, 2
	test	cl, cl
	jne	SHORT $LL108@insert
$LN110@insert:
	xor	eax, eax
	jmp	SHORT $LN111@insert
$LN109@insert:
	sbb	eax, eax
	or	eax, 1
$LN111@insert:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\modelpool.h

; 22   : 		{	return xr_strcmp(x,y)<0;}

	test	eax, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1576 :             if (_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Trynode->_Myval))) {

	jns	SHORT $LN37@insert

; 1577 :                 _Result._Location._Child = _Tree_child::_Left;
; 1578 :                 _Result._Bound           = _Trynode;
; 1579 :                 _Trynode                 = _Trynode->_Left;

	mov	esi, DWORD PTR [esi]
	mov	eax, 1

; 1580 :             } else {

	jmp	SHORT $LN38@insert
$LN37@insert:

; 1581 :                 _Result._Location._Child = _Tree_child::_Right;
; 1582 :                 _Trynode                 = _Trynode->_Right;

	mov	esi, DWORD PTR [esi+8]
	xor	eax, eax
$LN38@insert:

; 1573 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1574 :         while (!_Trynode->_Isnil) {

	cmp	BYTE PTR [esi+13], 0
	je	SHORT $LL35@insert
	mov	edi, DWORD PTR _this$1$[esp+20]
$LN36@insert:

; 1615 :         if (max_size() == _Get_scary()->_Mysize) {

	cmp	DWORD PTR [edi+4], 178956970		; 0aaaaaaaH
	je	SHORT $LN114@insert

; 1031 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

	push	ebp
	push	eax
	push	ebx
	mov	ecx, edi
	call	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >::_Insert_node
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\map

; 498  :         return _Mybase::emplace(_STD forward<_Valty>(_Val)...).first;

	mov	ecx, DWORD PTR ___$ReturnUdt$[esp+16]

; 510  :     }

	pop	edi
	pop	esi
	pop	ebp

; 498  :         return _Mybase::emplace(_STD forward<_Valty>(_Val)...).first;

	mov	DWORD PTR [ecx], eax

; 509  :         return this->emplace(_STD forward<_Valty>(_Val));

	mov	eax, ecx

; 510  :     }

	pop	ebx
	pop	ecx
	ret	8
$LN114@insert:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1616 :             _Throw_tree_length_error();

	call	?_Throw_tree_length_error@std@@YAXXZ	; std::_Throw_tree_length_error
$LN112@insert:
	int	3
??$insert@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@$0A@@?$multimap@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@1@$$QAU?$pair@Vshared_str@@PAVIRender_Visual@@@1@@Z ENDP ; std::multimap<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> > >::insert<std::pair<shared_str,IRender_Visual *>,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??$erase@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@std@@$0A@@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@1@V21@@Z
_TEXT	SEGMENT
__Successor$1 = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
??$erase@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@std@@$0A@@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@1@V21@@Z PROC ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::erase<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > > >,0>, COMDAT
; _this$ = ecx

; 1308 :     iterator erase(iterator _Where) noexcept /* strengthened */ {

	push	ecx
	push	esi

; 1282 :         _Unchecked_const_iterator _Successor = _Where;

	mov	esi, DWORD PTR __Where$[esp+4]

; 1308 :     iterator erase(iterator _Where) noexcept /* strengthened */ {

	push	edi
	mov	edi, ecx

; 1282 :         _Unchecked_const_iterator _Successor = _Where;

	mov	DWORD PTR __Successor$1[esp+12], esi

; 1283 :         ++_Successor; // save successor iterator for return

	lea	ecx, DWORD PTR __Successor$1[esp+12]
	call	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >,std::_Iterator_base0>::operator++

; 1284 :         _Nodeptr _Erasednode = _Scary->_Extract(_Where); // node to erase

	push	esi
	mov	ecx, edi
	call	?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >::_Extract
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 50   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	pop	edi
	pop	esi
	mov	ecx, DWORD PTR [eax+20]
	test	ecx, ecx
	je	SHORT $LN24@erase
	dec	DWORD PTR [ecx]
	mov	ecx, DWORD PTR [eax+20]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN24@erase
	mov	DWORD PTR [eax+20], 0
$LN24@erase:
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	test	eax, eax
	je	SHORT $LN41@erase
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN41@erase:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1315 :     }

	mov	eax, DWORD PTR ___$ReturnUdt$[esp]
	mov	ecx, DWORD PTR __Successor$1[esp+4]
	mov	DWORD PTR [eax], ecx
	pop	ecx
	ret	8
??$erase@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@std@@$0A@@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@1@V21@@Z ENDP ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::erase<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > > >,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$addressof@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
??$addressof@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@0@AAV10@@Z PROC ; std::addressof<std::_Vector_val<std::_Simple_types<CModelPool::ModelDef> > >, COMDAT
; __Val$ = ecx

; 253  :     return __builtin_addressof(_Val);

	mov	eax, ecx

; 254  : }

	ret	0
??$addressof@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_Vector_val<std::_Simple_types<CModelPool::ModelDef> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Move_unchecked@PAUModelDef@CModelPool@@PAU12@@std@@YAPAUModelDef@CModelPool@@PAU12@00@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
??$_Move_unchecked@PAUModelDef@CModelPool@@PAU12@@std@@YAPAUModelDef@CModelPool@@PAU12@00@Z PROC ; std::_Move_unchecked<CModelPool::ModelDef *,CModelPool::ModelDef *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 4308 : _CONSTEXPR20 _OutIt _Move_unchecked(_InIt _First, _InIt _Last, _OutIt _Dest) {

	push	esi
	mov	esi, ecx

; 4320 :     for (; _First != _Last; ++_Dest, (void) ++_First) {

	cmp	esi, edx
	je	SHORT $LN21@Move_unche
	push	edi
	mov	edi, DWORD PTR __Dest$[esp+4]
	npad	4
$LL4@Move_unche:
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN11@Move_unche
	inc	DWORD PTR [eax]
$LN11@Move_unche:

; 50   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	mov	ecx, DWORD PTR [edi]
	test	ecx, ecx
	je	SHORT $LN15@Move_unche
	dec	DWORD PTR [ecx]
$LN15@Move_unche:

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	DWORD PTR [edi], eax
	mov	ecx, DWORD PTR [esi+4]
	mov	DWORD PTR [edi+4], ecx
	mov	ecx, DWORD PTR [esi+8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4320 :     for (; _First != _Last; ++_Dest, (void) ++_First) {

	add	esi, 12					; 0000000cH
	mov	DWORD PTR [edi+8], ecx
	add	edi, 12					; 0000000cH
	cmp	esi, edx
	jne	SHORT $LL4@Move_unche

; 4321 :         *_Dest = _STD move(*_First);
; 4322 :     }
; 4323 : 
; 4324 :     return _Dest;

	mov	eax, edi
	pop	edi
	pop	esi

; 4325 : }

	ret	0
$LN21@Move_unche:

; 4321 :         *_Dest = _STD move(*_First);
; 4322 :     }
; 4323 : 
; 4324 :     return _Dest;

	mov	eax, DWORD PTR __Dest$[esp]
	pop	esi

; 4325 : }

	ret	0
??$_Move_unchecked@PAUModelDef@CModelPool@@PAU12@@std@@YAPAUModelDef@CModelPool@@PAU12@00@Z ENDP ; std::_Move_unchecked<CModelPool::ModelDef *,CModelPool::ModelDef *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$_Unfancy@UModelDef@CModelPool@@@std@@YAPAUModelDef@CModelPool@@PAU12@@Z
_TEXT	SEGMENT
??$_Unfancy@UModelDef@CModelPool@@@std@@YAPAUModelDef@CModelPool@@PAU12@@Z PROC ; std::_Unfancy<CModelPool::ModelDef>, COMDAT
; __Ptr$ = ecx

; 266  :     return _Ptr;

	mov	eax, ecx

; 267  : }

	ret	0
??$_Unfancy@UModelDef@CModelPool@@@std@@YAPAUModelDef@CModelPool@@PAU12@@Z ENDP ; std::_Unfancy<CModelPool::ModelDef>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$destroy@UModelDef@CModelPool@@@?$_Normal_allocator_traits@V?$xalloc@UModelDef@CModelPool@@@@@std@@SAXAAV?$xalloc@UModelDef@CModelPool@@@@PAUModelDef@CModelPool@@@Z
_TEXT	SEGMENT
??$destroy@UModelDef@CModelPool@@@?$_Normal_allocator_traits@V?$xalloc@UModelDef@CModelPool@@@@@std@@SAXAAV?$xalloc@UModelDef@CModelPool@@@@PAUModelDef@CModelPool@@@Z PROC ; std::_Normal_allocator_traits<xalloc<CModelPool::ModelDef> >::destroy<CModelPool::ModelDef>, COMDAT
; __Al$dead$ = ecx
; __Ptr$dead$ = edx

; 579  :         if constexpr (_Uses_default_destroy<_Alloc, _Ty*>::value) {
; 580  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 581  :             _STD destroy_at(_Ptr);
; 582  : #else // __cpp_lib_constexpr_dynamic_alloc
; 583  :             _Ptr->~_Ty();
; 584  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 585  :         } else {
; 586  :             _Al.destroy(_Ptr);
; 587  :         }
; 588  :     }

	ret	0
??$destroy@UModelDef@CModelPool@@@?$_Normal_allocator_traits@V?$xalloc@UModelDef@CModelPool@@@@@std@@SAXAAV?$xalloc@UModelDef@CModelPool@@@@PAUModelDef@CModelPool@@@Z ENDP ; std::_Normal_allocator_traits<xalloc<CModelPool::ModelDef> >::destroy<CModelPool::ModelDef>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@ABUModelDef@CModelPool@@@std@@YAABUModelDef@CModelPool@@ABU12@@Z
_TEXT	SEGMENT
??$forward@ABUModelDef@CModelPool@@@std@@YAABUModelDef@CModelPool@@ABU12@@Z PROC ; std::forward<CModelPool::ModelDef const &>, COMDAT
; __Arg$ = ecx

; 1386 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, ecx

; 1387 : }

	ret	0
??$forward@ABUModelDef@CModelPool@@@std@@YAABUModelDef@CModelPool@@ABU12@@Z ENDP ; std::forward<CModelPool::ModelDef const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$construct@UModelDef@CModelPool@@ABU12@@?$_Normal_allocator_traits@V?$xalloc@UModelDef@CModelPool@@@@@std@@SAXAAV?$xalloc@UModelDef@CModelPool@@@@PAUModelDef@CModelPool@@ABU34@@Z
_TEXT	SEGMENT
_<_Args_0>$ = 8						; size = 4
??$construct@UModelDef@CModelPool@@ABU12@@?$_Normal_allocator_traits@V?$xalloc@UModelDef@CModelPool@@@@@std@@SAXAAV?$xalloc@UModelDef@CModelPool@@@@PAUModelDef@CModelPool@@ABU34@@Z PROC ; std::_Normal_allocator_traits<xalloc<CModelPool::ModelDef> >::construct<CModelPool::ModelDef,CModelPool::ModelDef const &>, COMDAT
; __Al$dead$ = ecx
; __Ptr$ = edx

; 564  :     static _CONSTEXPR20_DYNALLOC void construct(_Alloc& _Al, _Ty* _Ptr, _Types&&... _Args) {

	push	esi
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	esi, DWORD PTR _<_Args_0>$[esp]

; 59   : 						shared_str	(shared_str const &rhs)			{	p_ = 0;	_set(rhs);								}

	mov	DWORD PTR [edx], 0

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN14@construct
	inc	DWORD PTR [eax]
	mov	ecx, DWORD PTR [edx]

; 50   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	test	ecx, ecx
	je	SHORT $LN14@construct
	dec	DWORD PTR [ecx]
$LN14@construct:

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [esi+8]
	mov	DWORD PTR [edx+8], eax
	pop	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 575  :     }

	ret	0
??$construct@UModelDef@CModelPool@@ABU12@@?$_Normal_allocator_traits@V?$xalloc@UModelDef@CModelPool@@@@@std@@SAXAAV?$xalloc@UModelDef@CModelPool@@@@PAUModelDef@CModelPool@@ABU34@@Z ENDP ; std::_Normal_allocator_traits<xalloc<CModelPool::ModelDef> >::construct<CModelPool::ModelDef,CModelPool::ModelDef const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Emplace_reallocate@ABUModelDef@CModelPool@@@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAEPAUModelDef@CModelPool@@QAU23@ABU23@@Z
_TEXT	SEGMENT
__Newvec$ = -28						; size = 4
__Oldsize$1$ = -24					; size = 4
__Whereoff$1$ = -20					; size = 4
tv325 = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABUModelDef@CModelPool@@@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAEPAUModelDef@CModelPool@@QAU23@ABU23@@Z PROC ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::_Emplace_reallocate<CModelPool::ModelDef const &>, COMDAT
; _this$ = ecx

; 752  :     _CONSTEXPR20_CONTAINER pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Emplace_reallocate@ABUModelDef@CModelPool@@@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAEPAUModelDef@CModelPool@@QAU23@ABU23@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	esi, ecx

; 753  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 754  :         _Alty& _Al        = _Getal();
; 755  :         auto& _My_data    = _Mypair._Myval2;
; 756  :         pointer& _Myfirst = _My_data._Myfirst;
; 757  :         pointer& _Mylast  = _My_data._Mylast;
; 758  : 
; 759  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 760  : 
; 761  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

	mov	edi, DWORD PTR [esi]
	mov	edx, DWORD PTR __Whereptr$[ebp]
	sub	edx, edi
	mov	eax, 715827883				; 2aaaaaabH
	imul	edx
	sar	edx, 1
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	mov	DWORD PTR __Whereoff$1$[ebp], eax

; 762  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

	mov	eax, DWORD PTR [esi+4]
	sub	eax, edi
	sar	eax, 2
	imul	eax, eax, -1431655765
	mov	DWORD PTR __Oldsize$1$[ebp], eax

; 763  : 
; 764  :         if (_Oldsize == max_size()) {

	cmp	eax, 357913941				; 15555555H
	je	$LN32@Emplace_re

; 766  :         }
; 767  : 
; 768  :         const size_type _Newsize     = _Oldsize + 1;

	lea	ecx, DWORD PTR [eax+1]

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	eax, DWORD PTR [esi+8]
	sub	eax, edi
	sar	eax, 2
	imul	edi, eax, -1431655765

; 1675 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	mov	edx, edi
	shr	edx, 1
	mov	eax, 357913941				; 15555555H
	sub	eax, edx
	cmp	edi, eax
	jbe	SHORT $LN12@Emplace_re

; 1676 :             return _Max; // geometric growth would overflow

	mov	eax, 357913941				; 15555555H
	jmp	SHORT $LN13@Emplace_re
$LN12@Emplace_re:

; 1677 :         }
; 1678 : 
; 1679 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	lea	eax, DWORD PTR [edx+edi]

; 1680 : 
; 1681 :         if (_Geometric < _Newsize) {

	cmp	eax, ecx
	cmovb	eax, ecx
$LN13@Emplace_re:
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	lea	ebx, DWORD PTR [eax+eax*2]
	shl	ebx, 2
	push	ebx
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 771  :         const pointer _Newvec           = _Al.allocate(_Newcapacity);

	mov	edi, eax
	mov	DWORD PTR __Newvec$[ebp], edi

; 772  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;
; 773  :         pointer _Constructed_first      = _Constructed_last;
; 774  : 
; 775  :         _TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 776  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

	mov	eax, DWORD PTR __Whereoff$1$[ebp]
	lea	ecx, DWORD PTR [eax+eax*2]
	lea	eax, DWORD PTR [edi+ecx*4]
	mov	DWORD PTR tv325[ebp], eax
	push	DWORD PTR _<_Val_0>$[ebp]
	mov	edx, eax
	call	??$construct@UModelDef@CModelPool@@ABU12@@?$_Normal_allocator_traits@V?$xalloc@UModelDef@CModelPool@@@@@std@@SAXAAV?$xalloc@UModelDef@CModelPool@@@@PAUModelDef@CModelPool@@ABU34@@Z ; std::_Normal_allocator_traits<xalloc<CModelPool::ModelDef> >::construct<CModelPool::ModelDef,CModelPool::ModelDef const &>
	add	esp, 4

; 777  :         _Constructed_first = _Newvec + _Whereoff;
; 778  : 
; 779  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

	mov	edx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR __Whereptr$[ebp]
	push	edi
	cmp	ecx, edx
	jne	SHORT $LN4@Emplace_re

; 780  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);

	push	edx
	push	eax
	call	?_Umove_if_noexcept@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@AAEXPAUModelDef@CModelPool@@00@Z ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::_Umove_if_noexcept

; 781  :         } else { // provide basic guarantee

	jmp	SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 782  :             _Umove(_Myfirst, _Whereptr, _Newvec);

	push	ecx
	push	eax
	call	?_Umove@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@AAEPAUModelDef@CModelPool@@PAU34@00@Z ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::_Umove

; 783  :             _Constructed_first = _Newvec;
; 784  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

	mov	ecx, DWORD PTR tv325[ebp]
	lea	eax, DWORD PTR [ecx+12]
	push	eax
	push	DWORD PTR [esi+4]
	push	DWORD PTR __Whereptr$[ebp]
	call	?_Umove@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@AAEPAUModelDef@CModelPool@@PAU34@00@Z ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::_Umove
$LN5@Emplace_re:
	mov	DWORD PTR __$EHRec$[ebp+12], -1

; 1732 :         if (_Myfirst) { // destroy and deallocate old array

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN27@Emplace_re
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	push	eax
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN27@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1737 :         _Myfirst = _Newvec;

	mov	DWORD PTR [esi], edi

; 1738 :         _Mylast  = _Newvec + _Newsize;

	mov	eax, DWORD PTR __Oldsize$1$[ebp]
	inc	eax
	lea	ecx, DWORD PTR [eax+eax*2]
	lea	ecx, DWORD PTR [edi+ecx*4]
	mov	DWORD PTR [esi+4], ecx

; 1739 :         _Myend   = _Newvec + _Newcapacity;

	lea	ecx, DWORD PTR [ebx+edi]
	mov	DWORD PTR [esi+8], ecx

; 790  :         _CATCH_END
; 791  : 
; 792  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 793  :         return _Newvec + _Whereoff;

	mov	eax, DWORD PTR tv325[ebp]

; 794  :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
__catch$??$_Emplace_reallocate@ABUModelDef@CModelPool@@@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAEPAUModelDef@CModelPool@@QAU23@ABU23@@Z$0:

; 785  :         }
; 786  :         _CATCH_ALL
; 787  :         _Destroy(_Constructed_first, _Constructed_last);
; 788  :         _Al.deallocate(_Newvec, _Newcapacity);

	push	ecx
	push	DWORD PTR __Newvec$[ebp]
	call	?deallocate@?$xalloc@UModelDef@CModelPool@@@@QBEXPAUModelDef@CModelPool@@I@Z ; xalloc<CModelPool::ModelDef>::deallocate

; 789  :         _RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8
$LN32@Emplace_re:

; 765  :             _Xlength();

	call	?_Xlength@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@CAXXZ ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::_Xlength
$LN30@Emplace_re:
	int	3
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Emplace_reallocate@ABUModelDef@CModelPool@@@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAEPAUModelDef@CModelPool@@QAU23@ABU23@@Z:
	npad	1
	npad	1
	mov	eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@ABUModelDef@CModelPool@@@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAEPAUModelDef@CModelPool@@QAU23@ABU23@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@ABUModelDef@CModelPool@@@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAEPAUModelDef@CModelPool@@QAU23@ABU23@@Z ENDP ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::_Emplace_reallocate<CModelPool::ModelDef const &>
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??$_Find@PAVIRender_Visual@@@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@ABEPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@1@ABQAVIRender_Visual@@@Z
_TEXT	SEGMENT
__Loc$ = -12						; size = 12
__Keyval$ = 8						; size = 4
??$_Find@PAVIRender_Visual@@@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@ABEPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@1@ABQAVIRender_Visual@@@Z PROC ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::_Find<IRender_Visual *>, COMDAT
; _this$ = ecx

; 1352 :     _NODISCARD _Nodeptr _Find(const _Other& _Keyval) const {

	sub	esp, 12					; 0000000cH
	push	esi
	push	edi

; 1353 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

	mov	edi, DWORD PTR __Keyval$[esp+16]
	lea	eax, DWORD PTR __Loc$[esp+20]
	push	edi
	push	eax
	mov	esi, ecx
	call	??$_Find_lower_bound@PAVIRender_Visual@@@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@1@ABQAVIRender_Visual@@@Z ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::_Find_lower_bound<IRender_Visual *>

; 1591 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

	mov	eax, DWORD PTR __Loc$[esp+28]
	cmp	BYTE PTR [eax+13], 0
	jne	SHORT $LN2@Find
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

	mov	ecx, DWORD PTR [edi]
	cmp	ecx, DWORD PTR [eax+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1591 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

	jae	SHORT $LN1@Find
$LN2@Find:

; 1354 :         if (_Lower_bound_duplicate(_Loc._Bound, _Keyval)) {
; 1355 :             return _Loc._Bound;
; 1356 :         }
; 1357 : 
; 1358 :         return _Get_scary()->_Myhead;

	mov	eax, DWORD PTR [esi]
$LN1@Find:
	pop	edi

; 1359 :     }

	pop	esi
	add	esp, 12					; 0000000cH
	ret	4
??$_Find@PAVIRender_Visual@@@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@ABEPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@1@ABQAVIRender_Visual@@@Z ENDP ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::_Find<IRender_Visual *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??$_Erase_head@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@QAEXAAV?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
??$_Erase_head@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@QAEXAAV?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >::_Erase_head<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >, COMDAT
; _this$ = ecx

; 750  :     void _Erase_head(_Alnode& _Al) noexcept {

	push	esi
	mov	esi, ecx

; 751  :         this->_Orphan_all();
; 752  :         _Erase_tree(_Al, _Myhead->_Parent);

	mov	eax, DWORD PTR [esi]
	push	DWORD PTR [eax+4]
	push	DWORD PTR __Al$[esp+4]
	call	??$_Erase_tree@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@QAEXAAV?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >::_Erase_tree<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 560  :         _Al.deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR [esi]
	pop	esi
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	test	eax, eax
	je	SHORT $LN10@Erase_head
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	mov	DWORD PTR __Al$[esp-4], eax
	jmp	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN10@Erase_head:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 754  :     }

	ret	4
??$_Erase_head@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@QAEXAAV?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >::_Erase_head<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\modelpool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\modelpool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??$_Find@Vshared_str@@@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@ABEPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@1@ABVshared_str@@@Z
_TEXT	SEGMENT
tv354 = -4						; size = 4
__Keyval$ = 8						; size = 4
??$_Find@Vshared_str@@@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@ABEPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@1@ABVshared_str@@@Z PROC ; std::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >::_Find<shared_str>, COMDAT
; _this$ = ecx

; 1352 :     _NODISCARD _Nodeptr _Find(const _Other& _Keyval) const {

	push	ecx
	push	ebx
	push	ebp

; 1599 :         while (!_Trynode->_Isnil) {

	mov	ebp, DWORD PTR __Keyval$[esp+8]

; 1352 :     _NODISCARD _Nodeptr _Find(const _Other& _Keyval) const {

	push	esi
	push	edi

; 1597 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

	mov	edi, DWORD PTR [ecx]
	mov	ebx, edi
	mov	DWORD PTR tv354[esp+20], edi
	mov	esi, DWORD PTR [edi+4]

; 1598 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1599 :         while (!_Trynode->_Isnil) {

	cmp	BYTE PTR [esi+13], 0
	jne	SHORT $LN6@Find
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 73   : 	bool				equal		(const shared_str & rhs) const	{	return (p_ == rhs.p_);							}

	mov	edi, DWORD PTR [ebp]
	npad	3
$LL5@Find:
	mov	eax, DWORD PTR [esi+16]
	cmp	eax, edi

; 104  : 	if (a.equal(b))		return 0;

	je	SHORT $LN7@Find

; 65   : 	str_c				operator*	() const						{	return p_?p_->value:0;							}

	mov	edx, edi
	lea	ecx, DWORD PTR [edi+12]
	neg	edx
	sbb	edx, edx
	and	edx, ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 183  : {	return (int)strcmp(S1,S2);  }

	lea	ecx, DWORD PTR [eax+12]
	neg	eax
	sbb	eax, eax
	and	eax, ecx
	npad	5
$LL55@Find:
	mov	cl, BYTE PTR [eax]
	cmp	cl, BYTE PTR [edx]
	jne	SHORT $LN56@Find
	test	cl, cl
	je	SHORT $LN57@Find
	mov	cl, BYTE PTR [eax+1]
	cmp	cl, BYTE PTR [edx+1]
	jne	SHORT $LN56@Find
	add	eax, 2
	add	edx, 2
	test	cl, cl
	jne	SHORT $LL55@Find
$LN57@Find:
	xor	eax, eax
	jmp	SHORT $LN58@Find
$LN56@Find:
	sbb	eax, eax
	or	eax, 1
$LN58@Find:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\modelpool.h

; 22   : 		{	return xr_strcmp(x,y)<0;}

	test	eax, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1601 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

	jns	SHORT $LN7@Find

; 1602 :                 _Result._Location._Child = _Tree_child::_Right;
; 1603 :                 _Trynode                 = _Trynode->_Right;

	mov	esi, DWORD PTR [esi+8]

; 1604 :             } else {

	jmp	SHORT $LN8@Find
$LN7@Find:

; 1605 :                 _Result._Location._Child = _Tree_child::_Left;
; 1606 :                 _Result._Bound           = _Trynode;

	mov	ebx, esi

; 1607 :                 _Trynode                 = _Trynode->_Left;

	mov	esi, DWORD PTR [esi]
$LN8@Find:

; 1598 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1599 :         while (!_Trynode->_Isnil) {

	cmp	BYTE PTR [esi+13], 0
	je	SHORT $LL5@Find
	mov	edi, DWORD PTR tv354[esp+20]
$LN6@Find:

; 1591 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

	cmp	BYTE PTR [ebx+13], 0
	jne	SHORT $LN2@Find
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 73   : 	bool				equal		(const shared_str & rhs) const	{	return (p_ == rhs.p_);							}

	mov	ecx, DWORD PTR [ebp]
	mov	edx, DWORD PTR [ebx+16]
	cmp	ecx, edx

; 104  : 	if (a.equal(b))		return 0;

	je	SHORT $LN54@Find

; 65   : 	str_c				operator*	() const						{	return p_?p_->value:0;							}

	lea	eax, DWORD PTR [edx+12]
	neg	edx
	sbb	edx, edx
	and	edx, eax
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 183  : {	return (int)strcmp(S1,S2);  }

	lea	eax, DWORD PTR [ecx+12]
	neg	ecx
	sbb	ecx, ecx
	and	ecx, eax
	npad	2
$LL59@Find:
	mov	al, BYTE PTR [ecx]
	cmp	al, BYTE PTR [edx]
	jne	SHORT $LN60@Find
	test	al, al
	je	SHORT $LN61@Find
	mov	al, BYTE PTR [ecx+1]
	cmp	al, BYTE PTR [edx+1]
	jne	SHORT $LN60@Find
	add	ecx, 2
	add	edx, 2
	test	al, al
	jne	SHORT $LL59@Find
$LN61@Find:
	xor	eax, eax
	jmp	SHORT $LN62@Find
$LN60@Find:
	sbb	eax, eax
	or	eax, 1
$LN62@Find:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\modelpool.h

; 22   : 		{	return xr_strcmp(x,y)<0;}

	test	eax, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1591 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

	js	SHORT $LN2@Find
$LN54@Find:
	pop	edi

; 1359 :     }

	pop	esi
	pop	ebp
	mov	eax, ebx
	pop	ebx
	pop	ecx
	ret	4
$LN2@Find:

; 1353 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);
; 1354 :         if (_Lower_bound_duplicate(_Loc._Bound, _Keyval)) {
; 1355 :             return _Loc._Bound;
; 1356 :         }
; 1357 : 
; 1358 :         return _Get_scary()->_Myhead;

	mov	eax, edi
	pop	edi

; 1359 :     }

	pop	esi
	pop	ebp
	pop	ebx
	pop	ecx
	ret	4
??$_Find@Vshared_str@@@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@ABEPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@1@ABVshared_str@@@Z ENDP ; std::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >::_Find<shared_str>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??$_Erase_tree@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@QAEXAAV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@QAEXAAV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >::_Erase_tree<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >, COMDAT
; _this$ = ecx

; 742  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

	push	ebx
	push	esi

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

	mov	esi, DWORD PTR __Rootnode$[esp+4]
	mov	ebx, ecx
	cmp	BYTE PTR [esi+13], 0
	jne	SHORT $LN3@Erase_tree
	push	ebp
	mov	ebp, DWORD PTR __Al$[esp+8]
	push	edi
	mov	edi, DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	npad	6
$LL2@Erase_tree:

; 744  :             _Erase_tree(_Al, _Rootnode->_Right);

	push	DWORD PTR [esi+8]
	mov	ecx, ebx
	push	ebp
	call	??$_Erase_tree@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@QAEXAAV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >::_Erase_tree<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 602  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

	mov	eax, esi

; 603  :     _Val         = static_cast<_Other&&>(_New_val);

	mov	esi, DWORD PTR [esi]
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 50   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	mov	ecx, DWORD PTR [eax+16]
	test	ecx, ecx
	je	SHORT $LN468@Erase_tree
	dec	DWORD PTR [ecx]
	mov	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN468@Erase_tree
	mov	DWORD PTR [eax+16], 0
$LN468@Erase_tree:
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	test	eax, eax
	je	SHORT $LN477@Erase_tree
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	edi
$LN477@Erase_tree:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

	cmp	BYTE PTR [esi+13], 0
	je	SHORT $LL2@Erase_tree
	pop	edi
	pop	ebp
$LN3@Erase_tree:
	pop	esi

; 745  :             _Alnode::value_type::_Freenode(_Al, _STD exchange(_Rootnode, _Rootnode->_Left));
; 746  :         }
; 747  :     }

	pop	ebx
	ret	8
??$_Erase_tree@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@QAEXAAV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >::_Erase_tree<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??$_Erase_head@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@QAEXAAV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
??$_Erase_head@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@QAEXAAV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >::_Erase_head<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >, COMDAT
; _this$ = ecx

; 750  :     void _Erase_head(_Alnode& _Al) noexcept {

	push	esi
	mov	esi, ecx

; 751  :         this->_Orphan_all();
; 752  :         _Erase_tree(_Al, _Myhead->_Parent);

	mov	eax, DWORD PTR [esi]
	push	DWORD PTR [eax+4]
	push	DWORD PTR __Al$[esp+4]
	call	??$_Erase_tree@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@QAEXAAV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >::_Erase_tree<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 560  :         _Al.deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR [esi]
	pop	esi
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	test	eax, eax
	je	SHORT $LN10@Erase_head
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	mov	DWORD PTR __Al$[esp-4], eax
	jmp	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN10@Erase_head:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 754  :     }

	ret	4
??$_Erase_head@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@QAEXAAV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >::_Erase_head<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$addressof@V?$_Vector_val@U?$_Simple_types@UItem@CInifile@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@UItem@CInifile@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
??$addressof@V?$_Vector_val@U?$_Simple_types@UItem@CInifile@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@UItem@CInifile@@@std@@@0@AAV10@@Z PROC ; std::addressof<std::_Vector_val<std::_Simple_types<CInifile::Item> > >, COMDAT
; __Val$ = ecx

; 253  :     return __builtin_addressof(_Val);

	mov	eax, ecx

; 254  : }

	ret	0
??$addressof@V?$_Vector_val@U?$_Simple_types@UItem@CInifile@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@UItem@CInifile@@@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_Vector_val<std::_Simple_types<CInifile::Item> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$xalloc@UModelDef@CModelPool@@@@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$xalloc@UModelDef@CModelPool@@@@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<xalloc<CModelPool::ModelDef>,std::_Vector_val<std::_Simple_types<CModelPool::ModelDef> >,1>::_Compressed_pair<xalloc<CModelPool::ModelDef>,std::_Vector_val<std::_Simple_types<CModelPool::ModelDef> >,1><>, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 390  :     _CONSTEXPR20_CONTAINER _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

	mov	DWORD PTR [ecx], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1331 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

	mov	eax, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 390  :     _CONSTEXPR20_CONTAINER _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1331 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

	ret	4
??$?0$$V@?$_Compressed_pair@V?$xalloc@UModelDef@CModelPool@@@@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<xalloc<CModelPool::ModelDef>,std::_Vector_val<std::_Simple_types<CModelPool::ModelDef> >,1>::_Compressed_pair<xalloc<CModelPool::ModelDef>,std::_Vector_val<std::_Simple_types<CModelPool::ModelDef> >,1><>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@0@AAV10@@Z PROC ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > > >, COMDAT
; __Val$ = ecx

; 253  :     return __builtin_addressof(_Val);

	mov	eax, ecx

; 254  : }

	ret	0
??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$?0ABU?$less@PAVIRender_Visual@@@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@PAVIRender_Visual@@@std@@V?$_Compressed_pair@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@PAVIRender_Visual@@@1@$$QAU_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$dead$ = 12					; size = 4
_<_Val2_0>$dead$ = 16					; size = 4
??$?0ABU?$less@PAVIRender_Visual@@@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@PAVIRender_Visual@@@std@@V?$_Compressed_pair@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@PAVIRender_Visual@@@1@$$QAU_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::less<IRender_Visual *>,std::_Compressed_pair<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >,1>,1>::_Compressed_pair<std::less<IRender_Visual *>,std::_Compressed_pair<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >,1>,1><std::less<IRender_Visual *> const &,std::_Zero_then_variadic_args_t>, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 435  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

	mov	DWORD PTR [ecx], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1336 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

	mov	eax, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 435  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

	mov	DWORD PTR [ecx+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1336 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

	ret	12					; 0000000cH
??$?0ABU?$less@PAVIRender_Visual@@@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@PAVIRender_Visual@@@std@@V?$_Compressed_pair@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@PAVIRender_Visual@@@1@$$QAU_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::less<IRender_Visual *>,std::_Compressed_pair<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >,1>,1>::_Compressed_pair<std::less<IRender_Visual *>,std::_Compressed_pair<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >,1>,1><std::less<IRender_Visual *> const &,std::_Zero_then_variadic_args_t>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$addressof@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@YAPAU?$pair@QAVIRender_Visual@@Vshared_str@@@0@AAU10@@Z
_TEXT	SEGMENT
??$addressof@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@YAPAU?$pair@QAVIRender_Visual@@Vshared_str@@@0@AAU10@@Z PROC ; std::addressof<std::pair<IRender_Visual * const,shared_str> >, COMDAT
; __Val$ = ecx

; 253  :     return __builtin_addressof(_Val);

	mov	eax, ecx

; 254  : }

	ret	0
??$addressof@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@YAPAU?$pair@QAVIRender_Visual@@Vshared_str@@@0@AAU10@@Z ENDP ; std::addressof<std::pair<IRender_Visual * const,shared_str> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@0@AAV10@@Z PROC ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > > >, COMDAT
; __Val$ = ecx

; 253  :     return __builtin_addressof(_Val);

	mov	eax, ecx

; 254  : }

	ret	0
??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$?0ABUstr_pred@CModelPool@@U_Zero_then_variadic_args_t@std@@@?$_Compressed_pair@Ustr_pred@CModelPool@@V?$_Compressed_pair@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@$00@std@@$00@std@@QAE@U_One_then_variadic_args_t@1@ABUstr_pred@CModelPool@@$$QAU_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$dead$ = 12					; size = 4
_<_Val2_0>$dead$ = 16					; size = 4
??$?0ABUstr_pred@CModelPool@@U_Zero_then_variadic_args_t@std@@@?$_Compressed_pair@Ustr_pred@CModelPool@@V?$_Compressed_pair@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@$00@std@@$00@std@@QAE@U_One_then_variadic_args_t@1@ABUstr_pred@CModelPool@@$$QAU_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<CModelPool::str_pred,std::_Compressed_pair<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >,1>,1>::_Compressed_pair<CModelPool::str_pred,std::_Compressed_pair<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >,1>,1><CModelPool::str_pred const &,std::_Zero_then_variadic_args_t>, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 435  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

	mov	DWORD PTR [ecx], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1336 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

	mov	eax, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 435  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

	mov	DWORD PTR [ecx+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1336 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

	ret	12					; 0000000cH
??$?0ABUstr_pred@CModelPool@@U_Zero_then_variadic_args_t@std@@@?$_Compressed_pair@Ustr_pred@CModelPool@@V?$_Compressed_pair@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@$00@std@@$00@std@@QAE@U_One_then_variadic_args_t@1@ABUstr_pred@CModelPool@@$$QAU_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<CModelPool::str_pred,std::_Compressed_pair<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >,1>,1>::_Compressed_pair<CModelPool::str_pred,std::_Compressed_pair<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >,1>,1><CModelPool::str_pred const &,std::_Zero_then_variadic_args_t>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$addressof@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@YAPAU?$pair@$$CBVshared_str@@PAVIRender_Visual@@@0@AAU10@@Z
_TEXT	SEGMENT
??$addressof@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@YAPAU?$pair@$$CBVshared_str@@PAVIRender_Visual@@@0@AAU10@@Z PROC ; std::addressof<std::pair<shared_str const ,IRender_Visual *> >, COMDAT
; __Val$ = ecx

; 253  :     return __builtin_addressof(_Val);

	mov	eax, ecx

; 254  : }

	ret	0
??$addressof@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@YAPAU?$pair@$$CBVshared_str@@PAVIRender_Visual@@@0@AAU10@@Z ENDP ; std::addressof<std::pair<shared_str const ,IRender_Visual *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$xalloc@PAVIRender_Visual@@@@V?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@std@@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$xalloc@PAVIRender_Visual@@@@V?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@std@@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<xalloc<IRender_Visual *>,std::_Vector_val<std::_Simple_types<IRender_Visual *> >,1>::_Compressed_pair<xalloc<IRender_Visual *>,std::_Vector_val<std::_Simple_types<IRender_Visual *> >,1><>, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 390  :     _CONSTEXPR20_CONTAINER _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

	mov	DWORD PTR [ecx], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1331 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

	mov	eax, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 390  :     _CONSTEXPR20_CONTAINER _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1331 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

	ret	4
??$?0$$V@?$_Compressed_pair@V?$xalloc@PAVIRender_Visual@@@@V?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@std@@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<xalloc<IRender_Visual *>,std::_Vector_val<std::_Simple_types<IRender_Visual *> >,1>::_Compressed_pair<xalloc<IRender_Visual *>,std::_Vector_val<std::_Simple_types<IRender_Visual *> >,1><>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Destroy_range@V?$xalloc@UModelDef@CModelPool@@@@@std@@YAXPAUModelDef@CModelPool@@QAU12@AAV?$xalloc@UModelDef@CModelPool@@@@@Z
_TEXT	SEGMENT
__Al$dead$ = 8						; size = 4
??$_Destroy_range@V?$xalloc@UModelDef@CModelPool@@@@@std@@YAXPAUModelDef@CModelPool@@QAU12@AAV?$xalloc@UModelDef@CModelPool@@@@@Z PROC ; std::_Destroy_range<xalloc<CModelPool::ModelDef> >, COMDAT
; __First$dead$ = ecx
; __Last$dead$ = edx

; 901  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 902  :     using _Ty = typename _Alloc::value_type;
; 903  :     if constexpr (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 904  :         for (; _First != _Last; ++_First) {
; 905  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 906  :         }
; 907  :     }
; 908  : }

	ret	0
??$_Destroy_range@V?$xalloc@UModelDef@CModelPool@@@@@std@@YAXPAUModelDef@CModelPool@@QAU12@AAV?$xalloc@UModelDef@CModelPool@@@@@Z ENDP ; std::_Destroy_range<xalloc<CModelPool::ModelDef> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
;	COMDAT ??$xr_free@UModelDef@CModelPool@@@@YAXAAPAUModelDef@CModelPool@@@Z
_TEXT	SEGMENT
??$xr_free@UModelDef@CModelPool@@@@YAXAAPAUModelDef@CModelPool@@@Z PROC ; xr_free<CModelPool::ModelDef>, COMDAT
; _P$ = ecx

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	push	esi
	mov	esi, ecx
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN2@xr_free
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	mov	DWORD PTR [esi], 0
$LN2@xr_free:
	pop	esi
	ret	0
??$xr_free@UModelDef@CModelPool@@@@YAXAAPAUModelDef@CModelPool@@@Z ENDP ; xr_free<CModelPool::ModelDef>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$addressof@$$CBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@std@@YAPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@0@ABV10@@Z
_TEXT	SEGMENT
??$addressof@$$CBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@std@@YAPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@0@ABV10@@Z PROC ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > > const >, COMDAT
; __Val$ = ecx

; 253  :     return __builtin_addressof(_Val);

	mov	eax, ecx

; 254  : }

	ret	0
??$addressof@$$CBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@std@@YAPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@0@ABV10@@Z ENDP ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > > const >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??$_Buyheadnode@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@SAPAU01@AAV?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@Z
_TEXT	SEGMENT
??$_Buyheadnode@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@SAPAU01@AAV?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@Z PROC ; std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *>::_Buyheadnode<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >, COMDAT
; __Al$dead$ = ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	24					; 00000018H
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 345  :         _Construct_in_place(_Pnode->_Left, _Pnode);

	mov	DWORD PTR [eax], eax

; 346  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

	mov	DWORD PTR [eax+4], eax

; 347  :         _Construct_in_place(_Pnode->_Right, _Pnode);

	mov	DWORD PTR [eax+8], eax

; 348  :         _Pnode->_Color = _Black;

	mov	WORD PTR [eax+12], 257			; 00000101H

; 349  :         _Pnode->_Isnil = true;
; 350  :         return _Pnode;
; 351  :     }

	ret	0
??$_Buyheadnode@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@SAPAU01@AAV?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@Z ENDP ; std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *>::_Buyheadnode<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??$_Buyheadnode@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@SAPAU01@AAV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@Z
_TEXT	SEGMENT
??$_Buyheadnode@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@SAPAU01@AAV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@Z PROC ; std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *>::_Buyheadnode<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >, COMDAT
; __Al$dead$ = ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	24					; 00000018H
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 345  :         _Construct_in_place(_Pnode->_Left, _Pnode);

	mov	DWORD PTR [eax], eax

; 346  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

	mov	DWORD PTR [eax+4], eax

; 347  :         _Construct_in_place(_Pnode->_Right, _Pnode);

	mov	DWORD PTR [eax+8], eax

; 348  :         _Pnode->_Color = _Black;

	mov	WORD PTR [eax+12], 257			; 00000101H

; 349  :         _Pnode->_Isnil = true;
; 350  :         return _Pnode;
; 351  :     }

	ret	0
??$_Buyheadnode@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@SAPAU01@AAV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@Z ENDP ; std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *>::_Buyheadnode<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??_GFHierrarhyVisual@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GFHierrarhyVisual@@UAEPAXI@Z PROC			; FHierrarhyVisual::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	call	DWORD PTR __imp_??1FHierrarhyVisual@@UAE@XZ
	test	BYTE PTR ___flags$[esp], 1
	je	SHORT $LN4@scalar
	push	84					; 00000054H
	push	esi
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN4@scalar:
	mov	eax, esi
	pop	esi
	ret	4
??_GFHierrarhyVisual@@UAEPAXI@Z ENDP			; FHierrarhyVisual::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??_GCKinematicsAnimated@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCKinematicsAnimated@@UAEPAXI@Z PROC			; CKinematicsAnimated::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	call	DWORD PTR __imp_??1CKinematicsAnimated@@UAE@XZ
	test	BYTE PTR ___flags$[esp], 1
	je	SHORT $LN4@scalar
	push	17896					; 000045e8H
	push	esi
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN4@scalar:
	mov	eax, esi
	pop	esi
	ret	4
??_GCKinematicsAnimated@@UAEPAXI@Z ENDP			; CKinematicsAnimated::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??_GCKinematics@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCKinematics@@UAEPAXI@Z PROC				; CKinematics::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	call	DWORD PTR __imp_??1CKinematics@@UAE@XZ
	test	BYTE PTR ___flags$[esp], 1
	je	SHORT $LN4@scalar
	push	168					; 000000a8H
	push	esi
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN4@scalar:
	mov	eax, esi
	pop	esi
	ret	4
??_GCKinematics@@UAEPAXI@Z ENDP				; CKinematics::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\xr_resource.h
;	COMDAT ??0FLOD@@QAE@XZ
_TEXT	SEGMENT
??0FLOD@@QAE@XZ PROC					; FLOD::FLOD, COMDAT
; _this$ = ecx

; 61   : 						resptr_core		()												{	p_ = 0;						}

	push	esi
	mov	esi, ecx
	call	DWORD PTR __imp_??0FHierrarhyVisual@@QAE@XZ
	mov	DWORD PTR [esi], OFFSET ??_7FLOD@@6B@
	mov	eax, esi
	mov	DWORD PTR [esi+84], 0
	pop	esi
	ret	0
??0FLOD@@QAE@XZ ENDP					; FLOD::FLOD
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
;	COMDAT ??4ModelDef@CModelPool@@QAEAAU01@$$QAU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4ModelDef@CModelPool@@QAEAAU01@$$QAU01@@Z PROC	; CModelPool::ModelDef::operator=, COMDAT
; _this$ = ecx

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	push	esi
	mov	esi, DWORD PTR ___that$[esp]
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN6@operator
	inc	DWORD PTR [eax]
$LN6@operator:

; 50   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	mov	edx, DWORD PTR [ecx]
	test	edx, edx
	je	SHORT $LN10@operator
	dec	DWORD PTR [edx]
$LN10@operator:

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [esi+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, ecx
	pop	esi
	ret	4
??4ModelDef@CModelPool@@QAEAAU01@$$QAU01@@Z ENDP	; CModelPool::ModelDef::operator=
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\xr_resource.h
;	COMDAT ??_GFLOD@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GFLOD@@UAEPAXI@Z PROC				; FLOD::`scalar deleting destructor', COMDAT
; _this$ = ecx

; 64   : 						~resptr_core	()												{	_dec();						}

	push	esi
	mov	esi, ecx
	lea	ecx, DWORD PTR [esi+84]
	call	DWORD PTR __imp_?_dec@?$resptr_base@USGeometry@@@@IAEXXZ
	mov	ecx, esi
	call	DWORD PTR __imp_??1FHierrarhyVisual@@UAE@XZ
	test	BYTE PTR ___flags$[esp], 1
	je	SHORT $LN8@scalar
	push	1084					; 0000043cH
	push	esi
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN8@scalar:
	mov	eax, esi
	pop	esi
	ret	4
??_GFLOD@@UAEPAXI@Z ENDP				; FLOD::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\xr_resource.h
;	COMDAT ??1FLOD@@UAE@XZ
_TEXT	SEGMENT
??1FLOD@@UAE@XZ PROC					; FLOD::~FLOD, COMDAT
; _this$ = ecx

; 64   : 						~resptr_core	()												{	_dec();						}

	push	esi
	mov	esi, ecx
	lea	ecx, DWORD PTR [esi+84]
	call	DWORD PTR __imp_?_dec@?$resptr_base@USGeometry@@@@IAEXXZ
	mov	ecx, esi
	pop	esi
	jmp	DWORD PTR __imp_??1FHierrarhyVisual@@UAE@XZ
??1FLOD@@UAE@XZ ENDP					; FLOD::~FLOD
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h
;	COMDAT ??R?$xr_special_free@$0A@Vmotions_container@@@@QAEXAAPAVmotions_container@@@Z
_TEXT	SEGMENT
_ptr$ = 8						; size = 4
??R?$xr_special_free@$0A@Vmotions_container@@@@QAEXAAPAVmotions_container@@@Z PROC ; xr_special_free<0,motions_container>::operator(), COMDAT
; _this$dead$ = ecx

; 142  : 	{

	push	esi

; 143  : 		ptr->~T			();

	mov	esi, DWORD PTR _ptr$[esp]
	mov	ecx, DWORD PTR [esi]
	call	DWORD PTR __imp_??1motions_container@@QAE@XZ

; 144  : 		Memory.mem_free	(ptr);

	push	DWORD PTR [esi]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	pop	esi

; 145  : 	}

	ret	4
??R?$xr_special_free@$0A@Vmotions_container@@@@QAEXAAPAVmotions_container@@@Z ENDP ; xr_special_free<0,motions_container>::operator()
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h
;	COMDAT ??R?$xr_special_free@$00VIRender_Visual@@@@QAEXAAPAVIRender_Visual@@@Z
_TEXT	SEGMENT
_ptr$ = 8						; size = 4
??R?$xr_special_free@$00VIRender_Visual@@@@QAEXAAPAVIRender_Visual@@@Z PROC ; xr_special_free<1,IRender_Visual>::operator(), COMDAT
; _this$dead$ = ecx

; 131  : 	{

	push	esi

; 132  : 		void*	_real_ptr	= dynamic_cast<void*>(ptr);

	mov	esi, DWORD PTR _ptr$[esp]
	push	edi
	push	DWORD PTR [esi]
	call	___RTCastToVoid

; 133  : 		ptr->~T			();

	mov	ecx, DWORD PTR [esi]
	add	esp, 4
	mov	edi, eax
	mov	edx, DWORD PTR [ecx]
	push	0
	call	DWORD PTR [edx+36]

; 134  : 		Memory.mem_free	(_real_ptr);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	edi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	pop	edi
	pop	esi

; 135  : 	}

	ret	4
??R?$xr_special_free@$00VIRender_Visual@@@@QAEXAAPAVIRender_Visual@@@Z ENDP ; xr_special_free<1,IRender_Visual>::operator()
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?_Unwrapped@?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@QBE?AV?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?_Unwrapped@?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@QBE?AV?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@2@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > > >::_Unwrapped, COMDAT
; _this$ = ecx

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], ecx

; 307  :         return _Tree_unchecked_iterator<_Mytree>(this->_Ptr, static_cast<const _Mytree*>(this->_Getcont()));
; 308  :     }

	ret	4
?_Unwrapped@?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@QBE?AV?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@2@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > > >::_Unwrapped
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?_Unwrapped@?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@std@@QBE?AV?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?_Unwrapped@?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@std@@QBE?AV?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@2@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > > >::_Unwrapped, COMDAT
; _this$ = ecx

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], ecx

; 307  :         return _Tree_unchecked_iterator<_Mytree>(this->_Ptr, static_cast<const _Mytree*>(this->_Getcont()));
; 308  :     }

	ret	4
?_Unwrapped@?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@std@@QBE?AV?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@2@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > > >::_Unwrapped
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<CModelPool::ModelDef> >::_Vector_val<std::_Simple_types<CModelPool::ModelDef> >, COMDAT
; _this$ = ecx

; 390  :     _CONSTEXPR20_CONTAINER _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

	mov	DWORD PTR [ecx], 0
	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	ret	0
??0?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<CModelPool::ModelDef> >::_Vector_val<std::_Simple_types<CModelPool::ModelDef> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Xlength@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@CAXXZ PROC ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::_Xlength, COMDAT

; 1761 :         _Xlength_error("vector too long");

	push	OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN3@Xlength:
	int	3
?_Xlength@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@CAXXZ ENDP ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Change_array@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@AAEXQAUModelDef@CModelPool@@II@Z
_TEXT	SEGMENT
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@AAEXQAUModelDef@CModelPool@@II@Z PROC ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::_Change_array, COMDAT
; _this$ = ecx

; 1723 :         const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

	push	esi
	mov	esi, ecx

; 1724 :         // orphan all iterators, discard old array, acquire new array
; 1725 :         auto& _My_data    = _Mypair._Myval2;
; 1726 :         pointer& _Myfirst = _My_data._Myfirst;
; 1727 :         pointer& _Mylast  = _My_data._Mylast;
; 1728 :         pointer& _Myend   = _My_data._Myend;
; 1729 : 
; 1730 :         _My_data._Orphan_all();
; 1731 : 
; 1732 :         if (_Myfirst) { // destroy and deallocate old array

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN7@Change_arr
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN7@Change_arr:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1737 :         _Myfirst = _Newvec;

	mov	ecx, DWORD PTR __Newvec$[esp]

; 1738 :         _Mylast  = _Newvec + _Newsize;

	mov	eax, DWORD PTR __Newsize$[esp]
	mov	DWORD PTR [esi], ecx
	lea	eax, DWORD PTR [eax+eax*2]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [esi+4], eax

; 1739 :         _Myend   = _Newvec + _Newcapacity;

	mov	eax, DWORD PTR __Newcapacity$[esp]
	lea	eax, DWORD PTR [eax+eax*2]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [esi+8], eax
	pop	esi

; 1740 :     }

	ret	12					; 0000000cH
?_Change_array@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@AAEXQAUModelDef@CModelPool@@II@Z ENDP ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Calculate_growth@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@ABEII@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Calculate_growth@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@ABEII@Z PROC ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [ecx]

; 1671 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1672 :         const size_type _Oldcapacity = capacity();
; 1673 :         const auto _Max              = max_size();
; 1674 : 
; 1675 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	mov	ecx, 357913941				; 15555555H

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	sar	eax, 2

; 1670 :     _CONSTEXPR20_CONTAINER size_type _Calculate_growth(const size_type _Newsize) const {

	push	esi

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	imul	esi, eax, -1431655765

; 1671 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1672 :         const size_type _Oldcapacity = capacity();
; 1673 :         const auto _Max              = max_size();
; 1674 : 
; 1675 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	mov	edx, esi
	shr	edx, 1
	sub	ecx, edx
	cmp	esi, ecx
	jbe	SHORT $LN2@Calculate_

; 1676 :             return _Max; // geometric growth would overflow

	mov	eax, 357913941				; 15555555H
	pop	esi

; 1682 :             return _Newsize; // geometric growth would be insufficient
; 1683 :         }
; 1684 : 
; 1685 :         return _Geometric; // geometric growth is sufficient
; 1686 :     }

	ret	4
$LN2@Calculate_:

; 1677 :         }
; 1678 : 
; 1679 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	lea	eax, DWORD PTR [edx+esi]

; 1680 : 
; 1681 :         if (_Geometric < _Newsize) {

	cmp	eax, DWORD PTR __Newsize$[esp]
	pop	esi
	cmovb	eax, DWORD PTR __Newsize$[esp-4]

; 1682 :             return _Newsize; // geometric growth would be insufficient
; 1683 :         }
; 1684 : 
; 1685 :         return _Geometric; // geometric growth is sufficient
; 1686 :     }

	ret	4
?_Calculate_growth@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@ABEII@Z ENDP ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Umove_if_noexcept@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@AAEXPAUModelDef@CModelPool@@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove_if_noexcept@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@AAEXPAUModelDef@CModelPool@@00@Z PROC ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::_Umove_if_noexcept, COMDAT
; _this$dead$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1658 :     for (; _UFirst != _ULast; ++_UFirst) {

	mov	ecx, DWORD PTR __First$[esp-4]

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	eax, DWORD PTR __Dest$[esp-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1659 :     _CONSTEXPR20_CONTAINER void _Umove_if_noexcept(pointer _First, pointer _Last, pointer _Dest) {

	push	edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1658 :     for (; _UFirst != _ULast; ++_UFirst) {

	mov	edi, DWORD PTR __Last$[esp]
	cmp	ecx, edi
	je	SHORT $LN7@Umove_if_n

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	push	ebx
	mov	ebx, eax
	lea	edx, DWORD PTR [ecx+8]
	push	esi
	sub	ebx, ecx
	npad	6
$LL8@Umove_if_n:
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 59   : 						shared_str	(shared_str const &rhs)			{	p_ = 0;	_set(rhs);								}

	mov	DWORD PTR [eax], 0

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	ecx, DWORD PTR [edx-8]
	test	ecx, ecx
	je	SHORT $LN27@Umove_if_n
	inc	DWORD PTR [ecx]
	mov	esi, DWORD PTR [eax]

; 50   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	test	esi, esi
	je	SHORT $LN27@Umove_if_n
	dec	DWORD PTR [esi]
$LN27@Umove_if_n:

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx-4]
	mov	DWORD PTR [eax+4], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1621 :         ++_Last;

	add	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [ebx+edx], ecx
	add	edx, 12					; 0000000cH

; 1658 :     for (; _UFirst != _ULast; ++_UFirst) {

	lea	ecx, DWORD PTR [edx-8]
	cmp	ecx, edi
	jne	SHORT $LL8@Umove_if_n
	pop	esi
	pop	ebx
$LN7@Umove_if_n:
	pop	edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1663 :     }

	ret	12					; 0000000cH
?_Umove_if_noexcept@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@AAEXPAUModelDef@CModelPool@@00@Z ENDP ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::_Umove_if_noexcept
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Umove@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@AAEPAUModelDef@CModelPool@@PAU34@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@AAEPAUModelDef@CModelPool@@PAU34@00@Z PROC ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::_Umove, COMDAT
; _this$dead$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	mov	ecx, DWORD PTR __First$[esp-4]

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	eax, DWORD PTR __Dest$[esp-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1644 :     _CONSTEXPR20_CONTAINER pointer _Umove(pointer _First, pointer _Last, pointer _Dest) {

	push	edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	mov	edi, DWORD PTR __Last$[esp]
	cmp	ecx, edi
	je	SHORT $LN5@Umove

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	push	ebx
	mov	ebx, eax
	lea	edx, DWORD PTR [ecx+8]
	push	esi
	sub	ebx, ecx
	npad	6
$LL6@Umove:
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 59   : 						shared_str	(shared_str const &rhs)			{	p_ = 0;	_set(rhs);								}

	mov	DWORD PTR [eax], 0

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	ecx, DWORD PTR [edx-8]
	test	ecx, ecx
	je	SHORT $LN25@Umove
	inc	DWORD PTR [ecx]
	mov	esi, DWORD PTR [eax]

; 50   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	test	esi, esi
	je	SHORT $LN25@Umove
	dec	DWORD PTR [esi]
$LN25@Umove:

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx-4]
	mov	DWORD PTR [eax+4], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1621 :         ++_Last;

	add	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [ebx+edx], ecx
	add	edx, 12					; 0000000cH

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	lea	ecx, DWORD PTR [edx-8]
	cmp	ecx, edi
	jne	SHORT $LL6@Umove
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1646 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

	pop	esi
	pop	ebx
$LN5@Umove:

; 1647 :     }

	pop	edi
	ret	12					; 0000000cH
?_Umove@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@AAEPAUModelDef@CModelPool@@PAU34@00@Z ENDP ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::_Umove
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?max_size@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@QBEIXZ PROC ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::max_size, COMDAT
; _this$dead$ = ecx

; 1540 :         return (_STD min)(

	mov	eax, 357913941				; 15555555H

; 1541 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1542 :     }

	ret	0
?max_size@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@QBEIXZ ENDP ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ?destroy@?$xalloc@UModelDef@CModelPool@@@@QAEXPAUModelDef@CModelPool@@@Z
_TEXT	SEGMENT
_p$dead$ = 8						; size = 4
?destroy@?$xalloc@UModelDef@CModelPool@@@@QAEXPAUModelDef@CModelPool@@@Z PROC ; xalloc<CModelPool::ModelDef>::destroy, COMDAT
; _this$dead$ = ecx

; 85   : 							void					destroy			(pointer p)								{	std::_Destroy_in_place(p);			}

	ret	4
?destroy@?$xalloc@UModelDef@CModelPool@@@@QAEXPAUModelDef@CModelPool@@@Z ENDP ; xalloc<CModelPool::ModelDef>::destroy
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ?construct@?$xalloc@UModelDef@CModelPool@@@@QAEXPAUModelDef@CModelPool@@ABU23@@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
__Val$ = 12						; size = 4
?construct@?$xalloc@UModelDef@CModelPool@@@@QAEXPAUModelDef@CModelPool@@ABU23@@Z PROC ; xalloc<CModelPool::ModelDef>::construct, COMDAT
; _this$dead$ = ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 59   : 						shared_str	(shared_str const &rhs)			{	p_ = 0;	_set(rhs);								}

	mov	ecx, DWORD PTR _p$[esp-4]
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h

; 84   : 							void					construct		(pointer p, const T& _Val)				{	::new((void*)p) value_type (_Val); }

	push	esi
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	esi, DWORD PTR __Val$[esp]

; 59   : 						shared_str	(shared_str const &rhs)			{	p_ = 0;	_set(rhs);								}

	mov	DWORD PTR [ecx], 0

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN12@construct
	inc	DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]

; 50   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	test	edx, edx
	je	SHORT $LN12@construct
	dec	DWORD PTR [edx]
$LN12@construct:

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [esi+8]
	mov	DWORD PTR [ecx+8], eax
	pop	esi
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h

; 84   : 							void					construct		(pointer p, const T& _Val)				{	::new((void*)p) value_type (_Val); }

	ret	8
?construct@?$xalloc@UModelDef@CModelPool@@@@QAEXPAUModelDef@CModelPool@@ABU23@@Z ENDP ; xalloc<CModelPool::ModelDef>::construct
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ?allocate@?$xalloc@UModelDef@CModelPool@@@@QBEPAUModelDef@CModelPool@@IPBX@Z
_TEXT	SEGMENT
_n$ = 8							; size = 4
_p$dead$ = 12						; size = 4
?allocate@?$xalloc@UModelDef@CModelPool@@@@QBEPAUModelDef@CModelPool@@IPBX@Z PROC ; xalloc<CModelPool::ModelDef>::allocate, COMDAT
; _this$dead$ = ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	mov	eax, DWORD PTR _n$[esp-4]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	lea	eax, DWORD PTR [eax+eax*2]
	shl	eax, 2
	push	eax
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h

; 80   : 							pointer					allocate		(size_type n, const void* p=0) const	{	return xr_alloc<T>((u32)n);	}

	ret	8
?allocate@?$xalloc@UModelDef@CModelPool@@@@QBEPAUModelDef@CModelPool@@IPBX@Z ENDP ; xalloc<CModelPool::ModelDef>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ??0?$xalloc@UModelDef@CModelPool@@@@QAE@XZ
_TEXT	SEGMENT
??0?$xalloc@UModelDef@CModelPool@@@@QAE@XZ PROC		; xalloc<CModelPool::ModelDef>::xalloc<CModelPool::ModelDef>, COMDAT
; _this$ = ecx

; 76   : 													xalloc			()										{	}

	mov	eax, ecx
	ret	0
??0?$xalloc@UModelDef@CModelPool@@@@QAE@XZ ENDP		; xalloc<CModelPool::ModelDef>::xalloc<CModelPool::ModelDef>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?_Erase_unchecked@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@AAEPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z
_TEXT	SEGMENT
__Successor$ = -4					; size = 4
__Where$ = 8						; size = 4
?_Erase_unchecked@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@AAEPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::_Erase_unchecked, COMDAT
; _this$ = ecx

; 1280 :     _Nodeptr _Erase_unchecked(_Unchecked_const_iterator _Where) noexcept {

	push	ecx
	push	esi

; 1281 :         const auto _Scary                    = _Get_scary();
; 1282 :         _Unchecked_const_iterator _Successor = _Where;

	mov	esi, DWORD PTR __Where$[esp+4]
	push	edi
	mov	edi, ecx
	mov	DWORD PTR __Successor$[esp+12], esi

; 1283 :         ++_Successor; // save successor iterator for return

	lea	ecx, DWORD PTR __Successor$[esp+12]
	call	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >,std::_Iterator_base0>::operator++

; 1284 :         _Nodeptr _Erasednode = _Scary->_Extract(_Where); // node to erase

	push	esi
	mov	ecx, edi
	call	?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >::_Extract
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 50   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	pop	edi
	pop	esi
	mov	ecx, DWORD PTR [eax+20]
	test	ecx, ecx
	je	SHORT $LN16@Erase_unch
	dec	DWORD PTR [ecx]
	mov	ecx, DWORD PTR [eax+20]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN16@Erase_unch
	mov	DWORD PTR [eax+20], 0
$LN16@Erase_unch:
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	test	eax, eax
	je	SHORT $LN27@Erase_unch
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN27@Erase_unch:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1288 :     }

	mov	eax, DWORD PTR __Successor$[esp+4]
	pop	ecx
	ret	4
?_Erase_unchecked@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@AAEPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::_Erase_unchecked
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ?allocate@?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@QBEPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@IPBX@Z
_TEXT	SEGMENT
_n$dead$ = 8						; size = 4
_p$dead$ = 12						; size = 4
?allocate@?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@QBEPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@IPBX@Z PROC ; xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> >::allocate, COMDAT
; _this$dead$ = ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	24					; 00000018H
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h

; 80   : 							pointer					allocate		(size_type n, const void* p=0) const	{	return xr_alloc<T>((u32)n);	}

	ret	8
?allocate@?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@QBEPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@IPBX@Z ENDP ; xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?_Get_scary@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@IBEPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_scary@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@IBEPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >::_Get_scary, COMDAT
; _this$ = ecx

; 1947 :         return _STD addressof(_Mypair._Myval2._Myval2);

	mov	eax, ecx

; 1948 :     }

	ret	0
?_Get_scary@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@IBEPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >::_Get_scary
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?_Erase_unchecked@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@AAEPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z
_TEXT	SEGMENT
__Successor$ = -4					; size = 4
__Where$ = 8						; size = 4
?_Erase_unchecked@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@AAEPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >::_Erase_unchecked, COMDAT
; _this$ = ecx

; 1280 :     _Nodeptr _Erase_unchecked(_Unchecked_const_iterator _Where) noexcept {

	push	ecx
	push	esi

; 1281 :         const auto _Scary                    = _Get_scary();
; 1282 :         _Unchecked_const_iterator _Successor = _Where;

	mov	esi, DWORD PTR __Where$[esp+4]
	push	edi
	mov	edi, ecx
	mov	DWORD PTR __Successor$[esp+12], esi

; 1283 :         ++_Successor; // save successor iterator for return

	lea	ecx, DWORD PTR __Successor$[esp+12]
	call	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >,std::_Iterator_base0>::operator++

; 1284 :         _Nodeptr _Erasednode = _Scary->_Extract(_Where); // node to erase

	push	esi
	mov	ecx, edi
	call	?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >::_Extract
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 50   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	pop	edi
	pop	esi
	mov	ecx, DWORD PTR [eax+16]
	test	ecx, ecx
	je	SHORT $LN16@Erase_unch
	dec	DWORD PTR [ecx]
	mov	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN16@Erase_unch
	mov	DWORD PTR [eax+16], 0
$LN16@Erase_unch:
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	test	eax, eax
	je	SHORT $LN27@Erase_unch
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN27@Erase_unch:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1288 :     }

	mov	eax, DWORD PTR __Successor$[esp+4]
	pop	ecx
	ret	4
?_Erase_unchecked@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@AAEPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >::_Erase_unchecked
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ?allocate@?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@QBEPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@IPBX@Z
_TEXT	SEGMENT
_n$dead$ = 8						; size = 4
_p$dead$ = 12						; size = 4
?allocate@?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@QBEPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@IPBX@Z PROC ; xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> >::allocate, COMDAT
; _this$dead$ = ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	24					; 00000018H
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h

; 80   : 							pointer					allocate		(size_type n, const void* p=0) const	{	return xr_alloc<T>((u32)n);	}

	ret	8
?allocate@?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@QBEPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@IPBX@Z ENDP ; xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ??0?$xalloc@PAVIRender_Visual@@@@QAE@XZ
_TEXT	SEGMENT
??0?$xalloc@PAVIRender_Visual@@@@QAE@XZ PROC		; xalloc<IRender_Visual *>::xalloc<IRender_Visual *>, COMDAT
; _this$ = ecx

; 76   : 													xalloc			()										{	}

	mov	eax, ecx
	ret	0
??0?$xalloc@PAVIRender_Visual@@@@QAE@XZ ENDP		; xalloc<IRender_Visual *>::xalloc<IRender_Visual *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??_Gmotions_container@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$dead$ = 8					; size = 4
??_Gmotions_container@@QAEPAXI@Z PROC			; motions_container::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	call	DWORD PTR __imp_??1motions_container@@QAE@XZ
	mov	eax, esi
	pop	esi
	ret	4
??_Gmotions_container@@QAEPAXI@Z ENDP			; motions_container::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??0?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
___param0$ = 8						; size = 4
___param1$dead$ = 12					; size = 4
??0?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@1@@Z PROC ; std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > > >::_Tree_unchecked_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > > >, COMDAT
; _this$ = ecx

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

	mov	eax, DWORD PTR ___param0$[esp-4]
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	ret	8
??0?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@1@@Z ENDP ; std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > > >::_Tree_unchecked_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??0?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
___param0$ = 8						; size = 4
___param1$dead$ = 12					; size = 4
??0?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@1@@Z PROC ; std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > > >::_Tree_unchecked_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > > >, COMDAT
; _this$ = ecx

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

	mov	eax, DWORD PTR ___param0$[esp-4]
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	ret	8
??0?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@1@@Z ENDP ; std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > > >::_Tree_unchecked_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
;	COMDAT ??0ModelDef@CModelPool@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0ModelDef@CModelPool@@QAE@ABU01@@Z PROC		; CModelPool::ModelDef::ModelDef, COMDAT
; _this$ = ecx

; 59   : 						shared_str	(shared_str const &rhs)			{	p_ = 0;	_set(rhs);								}

	push	esi

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	esi, DWORD PTR ___that$[esp]

; 59   : 						shared_str	(shared_str const &rhs)			{	p_ = 0;	_set(rhs);								}

	mov	DWORD PTR [ecx], 0

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN10@ModelDef
	inc	DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]

; 50   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	test	edx, edx
	je	SHORT $LN10@ModelDef
	dec	DWORD PTR [edx]
$LN10@ModelDef:

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [esi+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, ecx
	pop	esi
	ret	4
??0ModelDef@CModelPool@@QAE@ABU01@@Z ENDP		; CModelPool::ModelDef::ModelDef
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Getal@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@ABEABV?$xalloc@UModelDef@CModelPool@@@@XZ
_TEXT	SEGMENT
?_Getal@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@ABEABV?$xalloc@UModelDef@CModelPool@@@@XZ PROC ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::_Getal, COMDAT
; _this$ = ecx

; 1809 :         return _Mypair._Get_first();

	mov	eax, ecx

; 1810 :     }

	ret	0
?_Getal@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@ABEABV?$xalloc@UModelDef@CModelPool@@@@XZ ENDP ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Umove_if_noexcept1@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@AAEXPAUModelDef@CModelPool@@00U?$integral_constant@_N$0A@@2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
?_Umove_if_noexcept1@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@AAEXPAUModelDef@CModelPool@@00U?$integral_constant@_N$0A@@2@@Z PROC ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::_Umove_if_noexcept1, COMDAT
; _this$dead$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1658 :     for (; _UFirst != _ULast; ++_UFirst) {

	mov	ecx, DWORD PTR __First$[esp-4]

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	eax, DWORD PTR __Dest$[esp-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1654 :     _CONSTEXPR20_CONTAINER void _Umove_if_noexcept1(pointer _First, pointer _Last, pointer _Dest, false_type) {

	push	edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1658 :     for (; _UFirst != _ULast; ++_UFirst) {

	mov	edi, DWORD PTR __Last$[esp]
	cmp	ecx, edi
	je	SHORT $LN5@Umove_if_n

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	push	ebx
	mov	ebx, eax
	lea	edx, DWORD PTR [ecx+8]
	push	esi
	sub	ebx, ecx
	npad	6
$LL6@Umove_if_n:
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 59   : 						shared_str	(shared_str const &rhs)			{	p_ = 0;	_set(rhs);								}

	mov	DWORD PTR [eax], 0

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	ecx, DWORD PTR [edx-8]
	test	ecx, ecx
	je	SHORT $LN25@Umove_if_n
	inc	DWORD PTR [ecx]
	mov	esi, DWORD PTR [eax]

; 50   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	test	esi, esi
	je	SHORT $LN25@Umove_if_n
	dec	DWORD PTR [esi]
$LN25@Umove_if_n:

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx-4]
	mov	DWORD PTR [eax+4], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1621 :         ++_Last;

	add	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [ebx+edx], ecx
	add	edx, 12					; 0000000cH

; 1658 :     for (; _UFirst != _ULast; ++_UFirst) {

	lea	ecx, DWORD PTR [edx-8]
	cmp	ecx, edi
	jne	SHORT $LL6@Umove_if_n
	pop	esi
	pop	ebx
$LN5@Umove_if_n:
	pop	edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1657 :     }

	ret	16					; 00000010H
?_Umove_if_noexcept1@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@AAEXPAUModelDef@CModelPool@@00U?$integral_constant@_N$0A@@2@@Z ENDP ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::_Umove_if_noexcept1
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?capacity@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@QBEIXZ PROC ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::capacity, COMDAT
; _this$ = ecx

; 1545 :         auto& _My_data = _Mypair._Myval2;
; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2
	imul	eax, eax, -1431655765

; 1547 :     }

	ret	0
?capacity@?$vector@UModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@QBEIXZ ENDP ; std::vector<CModelPool::ModelDef,xalloc<CModelPool::ModelDef> >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?max_size@?$_Normal_allocator_traits@V?$xalloc@UModelDef@CModelPool@@@@@std@@SAIABV?$xalloc@UModelDef@CModelPool@@@@@Z
_TEXT	SEGMENT
?max_size@?$_Normal_allocator_traits@V?$xalloc@UModelDef@CModelPool@@@@@std@@SAIABV?$xalloc@UModelDef@CModelPool@@@@@Z PROC ; std::_Normal_allocator_traits<xalloc<CModelPool::ModelDef> >::max_size, COMDAT
; __Al$dead$ = ecx

; 591  :         if constexpr (_Has_max_size<_Alloc>::value) {
; 592  :             return _Al.max_size();

	mov	eax, 357913941				; 15555555H

; 593  :         } else {
; 594  :             return (numeric_limits<size_type>::max)() / sizeof(value_type);
; 595  :         }
; 596  :     }

	ret	0
?max_size@?$_Normal_allocator_traits@V?$xalloc@UModelDef@CModelPool@@@@@std@@SAIABV?$xalloc@UModelDef@CModelPool@@@@@Z ENDP ; std::_Normal_allocator_traits<xalloc<CModelPool::ModelDef> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?_Orphan_ptr@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Ptr$dead$ = 8						; size = 4
?_Orphan_ptr@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >::_Orphan_ptr, COMDAT
; _this$dead$ = ecx

; 714  : #if _ITERATOR_DEBUG_LEVEL == 2
; 715  :         _Lockit _Lock(_LOCK_DEBUG);
; 716  :         _Iterator_base12** _Pnext = &this->_Myproxy->_Myfirstiter;
; 717  :         while (*_Pnext) {
; 718  :             const auto _Pnextptr = static_cast<const_iterator&>(**_Pnext)._Ptr;
; 719  :             if (_Pnextptr == _Myhead || (_Ptr != nullptr && _Pnextptr != _Ptr)) {
; 720  :                 _Pnext = &(*_Pnext)->_Mynextiter;
; 721  :             } else { // orphan the iterator
; 722  :                 (*_Pnext)->_Myproxy = nullptr;
; 723  :                 *_Pnext             = (*_Pnext)->_Mynextiter;
; 724  :             }
; 725  :         }
; 726  : #else // ^^^ _ITERATOR_DEBUG_LEVEL == 2 ^^^ // vvv _ITERATOR_DEBUG_LEVEL != 2 vvv
; 727  :         (void) _Ptr;
; 728  : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 729  :     }

	ret	4
?_Orphan_ptr@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >::_Orphan_ptr
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z
_TEXT	SEGMENT
__Erasednode$1$ = -8					; size = 4
tv1182 = -4						; size = 4
__Where$ = 8						; size = 4
?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >::_Extract, COMDAT
; _this$ = ecx

; 502  :     _Nodeptr _Extract(_Unchecked_const_iterator _Where) noexcept {

	sub	esp, 8
	push	ebx
	push	ebp

; 503  :         _Nodeptr _Erasednode = _Where._Ptr; // node to erase

	mov	ebp, DWORD PTR __Where$[esp+12]
	mov	ebx, ecx
	push	esi
	push	edi

; 504  :         ++_Where; // save successor iterator for return

	lea	ecx, DWORD PTR __Where$[esp+20]
	mov	DWORD PTR __Erasednode$1$[esp+24], ebp
	call	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >,std::_Iterator_base0>::operator++

; 505  : 
; 506  :         _Nodeptr _Fixnode; // the node to recolor as needed
; 507  :         _Nodeptr _Fixnodeparent; // parent of _Fixnode (which may be nil)
; 508  :         _Nodeptr _Pnode = _Erasednode;
; 509  : 
; 510  :         if (_Pnode->_Left->_Isnil) {

	mov	eax, DWORD PTR [ebp]
	mov	edi, DWORD PTR [ebp+8]
	cmp	BYTE PTR [eax+13], 0
	jne	SHORT $LN86@Extract

; 511  :             _Fixnode = _Pnode->_Right; // stitch up right subtree
; 512  :         } else if (_Pnode->_Right->_Isnil) {

	cmp	BYTE PTR [edi+13], 0
	je	SHORT $LN7@Extract

; 513  :             _Fixnode = _Pnode->_Left; // stitch up left subtree

	mov	edi, eax

; 514  :         } else { // two subtrees, must lift successor node to replace erased

	jmp	SHORT $LN86@Extract
$LN7@Extract:

; 515  :             _Pnode   = _Where._Ptr; // _Pnode is successor node

	mov	ecx, DWORD PTR __Where$[esp+20]

; 516  :             _Fixnode = _Pnode->_Right; // _Fixnode is only subtree

	mov	edi, DWORD PTR [ecx+8]
	cmp	ecx, ebp

; 517  :         }
; 518  : 
; 519  :         if (_Pnode == _Erasednode) { // at most one subtree, relink it

	jne	$LN9@Extract
$LN86@Extract:

; 520  :             _Fixnodeparent = _Erasednode->_Parent;
; 521  :             if (!_Fixnode->_Isnil) {

	cmp	BYTE PTR [edi+13], 0
	mov	esi, DWORD PTR [ebp+4]
	jne	SHORT $LN11@Extract

; 522  :                 _Fixnode->_Parent = _Fixnodeparent; // link up

	mov	DWORD PTR [edi+4], esi
$LN11@Extract:

; 523  :             }
; 524  : 
; 525  :             if (_Myhead->_Parent == _Erasednode) {

	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+4], ebp
	jne	SHORT $LN12@Extract

; 526  :                 _Myhead->_Parent = _Fixnode; // link down from root

	mov	DWORD PTR [eax+4], edi
	jmp	SHORT $LN15@Extract
$LN12@Extract:

; 527  :             } else if (_Fixnodeparent->_Left == _Erasednode) {

	cmp	DWORD PTR [esi], ebp
	jne	SHORT $LN14@Extract

; 528  :                 _Fixnodeparent->_Left = _Fixnode; // link down to left

	mov	DWORD PTR [esi], edi

; 529  :             } else {

	jmp	SHORT $LN15@Extract
$LN14@Extract:

; 530  :                 _Fixnodeparent->_Right = _Fixnode; // link down to right

	mov	DWORD PTR [esi+8], edi
$LN15@Extract:

; 531  :             }
; 532  : 
; 533  :             if (_Myhead->_Left == _Erasednode) {

	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax], ebp
	jne	SHORT $LN16@Extract

; 534  :                 _Myhead->_Left = _Fixnode->_Isnil ? _Fixnodeparent // smallest is parent of erased node

	cmp	BYTE PTR [edi+13], 0
	je	SHORT $LN42@Extract
	mov	edx, esi
	jmp	SHORT $LN48@Extract
$LN42@Extract:

; 451  :         while (!_Pnode->_Left->_Isnil) {

	mov	ecx, DWORD PTR [edi]

; 534  :                 _Myhead->_Left = _Fixnode->_Isnil ? _Fixnodeparent // smallest is parent of erased node

	mov	edx, edi

; 451  :         while (!_Pnode->_Left->_Isnil) {

	cmp	BYTE PTR [ecx+13], 0
	jne	SHORT $LN48@Extract
	npad	4
$LL47@Extract:
	mov	eax, DWORD PTR [ecx]

; 452  :             _Pnode = _Pnode->_Left;

	mov	edx, ecx
	mov	ecx, eax
	cmp	BYTE PTR [eax+13], 0
	je	SHORT $LL47@Extract
	mov	eax, DWORD PTR [ebx]
$LN48@Extract:

; 534  :                 _Myhead->_Left = _Fixnode->_Isnil ? _Fixnodeparent // smallest is parent of erased node

	mov	DWORD PTR [eax], edx
$LN16@Extract:

; 535  :                                                   : _Min(_Fixnode); // smallest in relinked subtree
; 536  :             }
; 537  : 
; 538  :             if (_Myhead->_Right == _Erasednode) {

	mov	edx, DWORD PTR [ebx]
	cmp	DWORD PTR [edx+8], ebp
	jne	SHORT $LN17@Extract

; 539  :                 _Myhead->_Right = _Fixnode->_Isnil ? _Fixnodeparent // largest is parent of erased node

	cmp	BYTE PTR [edi+13], 0
	je	SHORT $LN44@Extract
	mov	ecx, esi
	mov	DWORD PTR [edx+8], ecx

; 540  :                                                    : _Max(_Fixnode); // largest in relinked subtree
; 541  :             }
; 542  :         } else { // erased has two subtrees, _Pnode is successor to erased

	mov	dl, BYTE PTR [ebp+12]
	jmp	SHORT $LN10@Extract
$LN44@Extract:

; 443  :         while (!_Pnode->_Right->_Isnil) {

	mov	eax, DWORD PTR [edi+8]

; 539  :                 _Myhead->_Right = _Fixnode->_Isnil ? _Fixnodeparent // largest is parent of erased node

	mov	ecx, edi

; 443  :         while (!_Pnode->_Right->_Isnil) {

	cmp	BYTE PTR [eax+13], 0
	jne	SHORT $LN52@Extract
$LL51@Extract:

; 444  :             _Pnode = _Pnode->_Right;

	mov	ecx, eax
	mov	eax, DWORD PTR [ecx+8]
	cmp	BYTE PTR [eax+13], 0
	je	SHORT $LL51@Extract
$LN52@Extract:

; 539  :                 _Myhead->_Right = _Fixnode->_Isnil ? _Fixnodeparent // largest is parent of erased node

	mov	DWORD PTR [edx+8], ecx
$LN17@Extract:

; 540  :                                                    : _Max(_Fixnode); // largest in relinked subtree
; 541  :             }
; 542  :         } else { // erased has two subtrees, _Pnode is successor to erased

	mov	dl, BYTE PTR [ebp+12]
	jmp	SHORT $LN10@Extract
$LN9@Extract:

; 543  :             _Erasednode->_Left->_Parent = _Pnode; // link left up

	mov	DWORD PTR [eax+4], ecx

; 544  :             _Pnode->_Left               = _Erasednode->_Left; // link successor down

	mov	eax, DWORD PTR [ebp]
	mov	DWORD PTR [ecx], eax

; 545  : 
; 546  :             if (_Pnode == _Erasednode->_Right) {

	cmp	ecx, DWORD PTR [ebp+8]
	jne	SHORT $LN18@Extract

; 547  :                 _Fixnodeparent = _Pnode; // successor is next to erased

	mov	esi, ecx

; 548  :             } else { // successor further down, link in place of erased

	jmp	SHORT $LN19@Extract
$LN18@Extract:

; 549  :                 _Fixnodeparent = _Pnode->_Parent; // parent is successor's
; 550  :                 if (!_Fixnode->_Isnil) {

	cmp	BYTE PTR [edi+13], 0
	mov	esi, DWORD PTR [ecx+4]
	jne	SHORT $LN20@Extract

; 551  :                     _Fixnode->_Parent = _Fixnodeparent; // link fix up

	mov	DWORD PTR [edi+4], esi
$LN20@Extract:

; 552  :                 }
; 553  : 
; 554  :                 _Fixnodeparent->_Left        = _Fixnode; // link fix down

	mov	DWORD PTR [esi], edi

; 555  :                 _Pnode->_Right               = _Erasednode->_Right; // link next down

	mov	eax, DWORD PTR [ebp+8]
	mov	DWORD PTR [ecx+8], eax

; 556  :                 _Erasednode->_Right->_Parent = _Pnode; // right up

	mov	eax, DWORD PTR [ebp+8]
	mov	DWORD PTR [eax+4], ecx
$LN19@Extract:

; 557  :             }
; 558  : 
; 559  :             if (_Myhead->_Parent == _Erasednode) {

	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+4], ebp
	jne	SHORT $LN21@Extract

; 560  :                 _Myhead->_Parent = _Pnode; // link down from root

	mov	DWORD PTR [eax+4], ecx
	jmp	SHORT $LN24@Extract
$LN21@Extract:

; 561  :             } else if (_Erasednode->_Parent->_Left == _Erasednode) {

	mov	eax, DWORD PTR [ebp+4]
	cmp	DWORD PTR [eax], ebp
	jne	SHORT $LN23@Extract

; 562  :                 _Erasednode->_Parent->_Left = _Pnode; // link down to left

	mov	DWORD PTR [eax], ecx

; 563  :             } else {

	jmp	SHORT $LN24@Extract
$LN23@Extract:

; 564  :                 _Erasednode->_Parent->_Right = _Pnode; // link down to right

	mov	DWORD PTR [eax+8], ecx
$LN24@Extract:

; 567  :             _Pnode->_Parent = _Erasednode->_Parent; // link successor up

	mov	eax, DWORD PTR [ebp+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	dl, BYTE PTR [ecx+12]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 567  :             _Pnode->_Parent = _Erasednode->_Parent; // link successor up

	mov	DWORD PTR [ecx+4], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 101  :     _Left    = _STD move(_Right);

	mov	al, BYTE PTR [ebp+12]
	mov	BYTE PTR [ecx+12], al

; 102  :     _Right   = _STD move(_Tmp);

	mov	BYTE PTR [ebp+12], dl
$LN10@Extract:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 571  :         if (_Erasednode->_Color == _Black) { // erasing black link, must recolor/rebalance tree

	cmp	dl, 1
	jne	$LN25@Extract

; 572  :             for (; _Fixnode != _Myhead->_Parent && _Fixnode->_Color == _Black; _Fixnodeparent = _Fixnode->_Parent) {

	mov	eax, DWORD PTR [ebx]
	cmp	edi, DWORD PTR [eax+4]
	je	$LN3@Extract
$LL4@Extract:
	cmp	BYTE PTR [edi+12], 1
	mov	ebp, esi
	jne	$LN93@Extract

; 573  :                 if (_Fixnode == _Fixnodeparent->_Left) { // fixup left subtree

	mov	ecx, DWORD PTR [esi]
	cmp	edi, ecx
	jne	$LN26@Extract

; 574  :                     _Pnode = _Fixnodeparent->_Right;

	mov	ecx, DWORD PTR [esi+8]

; 575  :                     if (_Pnode->_Color == _Red) { // rotate red up from right subtree

	cmp	BYTE PTR [ecx+12], 0
	jne	SHORT $LN87@Extract

; 576  :                         _Pnode->_Color         = _Black;

	mov	BYTE PTR [ecx+12], 1

; 459  :         _Nodeptr _Pnode    = _Wherenode->_Right;

	mov	ecx, DWORD PTR [esi+8]

; 577  :                         _Fixnodeparent->_Color = _Red;

	mov	BYTE PTR [esi+12], 0

; 460  :         _Wherenode->_Right = _Pnode->_Left;

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [esi+8], eax

; 461  : 
; 462  :         if (!_Pnode->_Left->_Isnil) {

	mov	eax, DWORD PTR [ecx]
	cmp	BYTE PTR [eax+13], 0
	jne	SHORT $LN57@Extract

; 463  :             _Pnode->_Left->_Parent = _Wherenode;

	mov	DWORD PTR [eax+4], esi
$LN57@Extract:

; 464  :         }
; 465  : 
; 466  :         _Pnode->_Parent = _Wherenode->_Parent;

	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [ecx+4], eax

; 467  : 
; 468  :         if (_Wherenode == _Myhead->_Parent) {

	mov	eax, DWORD PTR [ebx]
	cmp	esi, DWORD PTR [eax+4]
	jne	SHORT $LN58@Extract

; 469  :             _Myhead->_Parent = _Pnode;

	mov	DWORD PTR [eax+4], ecx
	jmp	SHORT $LN61@Extract
$LN58@Extract:

; 470  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

	mov	eax, DWORD PTR [esi+4]
	cmp	esi, DWORD PTR [eax]
	jne	SHORT $LN60@Extract

; 471  :             _Wherenode->_Parent->_Left = _Pnode;

	mov	DWORD PTR [eax], ecx

; 472  :         } else {

	jmp	SHORT $LN61@Extract
$LN60@Extract:

; 473  :             _Wherenode->_Parent->_Right = _Pnode;

	mov	DWORD PTR [eax+8], ecx
$LN61@Extract:

; 474  :         }
; 475  : 
; 476  :         _Pnode->_Left       = _Wherenode;

	mov	DWORD PTR [ecx], esi

; 477  :         _Wherenode->_Parent = _Pnode;

	mov	DWORD PTR [esi+4], ecx

; 578  :                         _Lrotate(_Fixnodeparent);
; 579  :                         _Pnode = _Fixnodeparent->_Right;

	mov	ecx, DWORD PTR [esi+8]
$LN87@Extract:

; 580  :                     }
; 581  : 
; 582  :                     if (_Pnode->_Isnil) {

	cmp	BYTE PTR [ecx+13], 0
	jne	$LN2@Extract

; 583  :                         _Fixnode = _Fixnodeparent; // shouldn't happen
; 584  :                     } else if (_Pnode->_Left->_Color == _Black
; 585  :                                && _Pnode->_Right->_Color == _Black) { // redden right subtree with black children

	mov	edx, DWORD PTR [ecx]
	cmp	BYTE PTR [edx+12], 1
	jne	SHORT $LN89@Extract
	mov	eax, DWORD PTR [ecx+8]
	cmp	BYTE PTR [eax+12], 1
	je	$LN94@Extract
$LN89@Extract:

; 586  :                         _Pnode->_Color = _Red;
; 587  :                         _Fixnode       = _Fixnodeparent;
; 588  :                     } else { // must rearrange right subtree
; 589  :                         if (_Pnode->_Right->_Color == _Black) { // rotate red up from left sub-subtree

	mov	eax, DWORD PTR [ecx+8]
	cmp	BYTE PTR [eax+12], 1
	jne	SHORT $LN33@Extract

; 590  :                             _Pnode->_Left->_Color = _Black;

	mov	BYTE PTR [edx+12], 1

; 591  :                             _Pnode->_Color        = _Red;

	mov	BYTE PTR [ecx+12], 0

; 592  :                             _Rrotate(_Pnode);

	push	ecx
	mov	ecx, ebx
	call	?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >::_Rrotate

; 593  :                             _Pnode = _Fixnodeparent->_Right;

	mov	ecx, DWORD PTR [esi+8]
$LN33@Extract:

; 594  :                         }
; 595  : 
; 596  :                         _Pnode->_Color         = _Fixnodeparent->_Color;

	mov	al, BYTE PTR [esi+12]
	mov	BYTE PTR [ecx+12], al

; 597  :                         _Fixnodeparent->_Color = _Black;

	mov	BYTE PTR [esi+12], 1

; 598  :                         _Pnode->_Right->_Color = _Black;

	mov	eax, DWORD PTR [ecx+8]

; 599  :                         _Lrotate(_Fixnodeparent);

	mov	ecx, ebx
	push	esi
	mov	BYTE PTR [eax+12], 1
	call	?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >::_Lrotate

; 600  :                         break; // tree now recolored/rebalanced

	jmp	SHORT $LN93@Extract
$LN26@Extract:

; 601  :                     }
; 602  :                 } else { // fixup right subtree
; 603  :                     _Pnode = _Fixnodeparent->_Left;
; 604  :                     if (_Pnode->_Color == _Red) { // rotate red up from left subtree

	cmp	BYTE PTR [ecx+12], 0
	jne	SHORT $LN88@Extract

; 605  :                         _Pnode->_Color         = _Black;

	mov	BYTE PTR [ecx+12], 1

; 481  :         _Nodeptr _Pnode   = _Wherenode->_Left;

	mov	ecx, DWORD PTR [esi]

; 606  :                         _Fixnodeparent->_Color = _Red;

	mov	BYTE PTR [esi+12], 0

; 482  :         _Wherenode->_Left = _Pnode->_Right;

	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [esi], eax

; 483  : 
; 484  :         if (!_Pnode->_Right->_Isnil) {

	mov	eax, DWORD PTR [ecx+8]
	cmp	BYTE PTR [eax+13], 0
	jne	SHORT $LN64@Extract

; 485  :             _Pnode->_Right->_Parent = _Wherenode;

	mov	DWORD PTR [eax+4], esi
$LN64@Extract:

; 486  :         }
; 487  : 
; 488  :         _Pnode->_Parent = _Wherenode->_Parent;

	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [ecx+4], eax

; 489  : 
; 490  :         if (_Wherenode == _Myhead->_Parent) {

	mov	eax, DWORD PTR [ebx]
	cmp	esi, DWORD PTR [eax+4]
	jne	SHORT $LN65@Extract

; 491  :             _Myhead->_Parent = _Pnode;

	mov	DWORD PTR [eax+4], ecx
	jmp	SHORT $LN68@Extract
$LN65@Extract:

; 492  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

	mov	eax, DWORD PTR [esi+4]
	cmp	esi, DWORD PTR [eax+8]
	jne	SHORT $LN67@Extract

; 493  :             _Wherenode->_Parent->_Right = _Pnode;

	mov	DWORD PTR [eax+8], ecx

; 494  :         } else {

	jmp	SHORT $LN68@Extract
$LN67@Extract:

; 495  :             _Wherenode->_Parent->_Left = _Pnode;

	mov	DWORD PTR [eax], ecx
$LN68@Extract:

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

	mov	DWORD PTR [ecx+8], esi

; 499  :         _Wherenode->_Parent = _Pnode;

	mov	DWORD PTR [esi+4], ecx

; 607  :                         _Rrotate(_Fixnodeparent);
; 608  :                         _Pnode = _Fixnodeparent->_Left;

	mov	ecx, DWORD PTR [esi]
$LN88@Extract:

; 609  :                     }
; 610  : 
; 611  :                     if (_Pnode->_Isnil) {

	cmp	BYTE PTR [ecx+13], 0
	jne	SHORT $LN2@Extract

; 612  :                         _Fixnode = _Fixnodeparent; // shouldn't happen
; 613  :                     } else if (_Pnode->_Right->_Color == _Black
; 614  :                                && _Pnode->_Left->_Color == _Black) { // redden left subtree with black children

	mov	edx, DWORD PTR [ecx+8]
	cmp	BYTE PTR [edx+12], 1
	jne	SHORT $LN90@Extract
	mov	eax, DWORD PTR [ecx]
	cmp	BYTE PTR [eax+12], 1
	jne	SHORT $LN90@Extract
$LN94@Extract:

; 572  :             for (; _Fixnode != _Myhead->_Parent && _Fixnode->_Color == _Black; _Fixnodeparent = _Fixnode->_Parent) {

	mov	BYTE PTR [ecx+12], 0
$LN2@Extract:
	mov	eax, DWORD PTR [ebx]
	mov	edi, ebp
	mov	esi, DWORD PTR [esi+4]
	cmp	ebp, DWORD PTR [eax+4]
	jne	$LL4@Extract
$LN93@Extract:

; 629  :                         break; // tree now recolored/rebalanced
; 630  :                     }
; 631  :                 }
; 632  :             }
; 633  : 
; 634  :             _Fixnode->_Color = _Black; // stopping node is black

	mov	ebp, DWORD PTR __Erasednode$1$[esp+24]
$LN3@Extract:
	mov	BYTE PTR [edi+12], 1
$LN25@Extract:

; 635  :         }
; 636  : 
; 637  :         if (0 < _Mysize) {

	mov	ecx, DWORD PTR [ebx+4]
	mov	eax, ebp
	test	ecx, ecx
	je	SHORT $LN40@Extract

; 638  :             --_Mysize;

	dec	ecx
	mov	DWORD PTR [ebx+4], ecx
$LN40@Extract:

; 639  :         }
; 640  : 
; 641  :         return _Erasednode;
; 642  :     }

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 8
	ret	4
$LN90@Extract:

; 615  :                         _Pnode->_Color = _Red;
; 616  :                         _Fixnode       = _Fixnodeparent;
; 617  :                     } else { // must rearrange left subtree
; 618  :                         if (_Pnode->_Left->_Color == _Black) { // rotate red up from right sub-subtree

	mov	eax, DWORD PTR [ecx]
	cmp	BYTE PTR [eax+12], 1
	jne	SHORT $LN39@Extract

; 619  :                             _Pnode->_Right->_Color = _Black;

	mov	BYTE PTR [edx+12], 1

; 620  :                             _Pnode->_Color         = _Red;

	mov	BYTE PTR [ecx+12], 0

; 621  :                             _Lrotate(_Pnode);

	push	ecx
	mov	ecx, ebx
	call	?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >::_Lrotate

; 622  :                             _Pnode = _Fixnodeparent->_Left;

	mov	ecx, DWORD PTR [esi]
$LN39@Extract:

; 623  :                         }
; 624  : 
; 625  :                         _Pnode->_Color         = _Fixnodeparent->_Color;

	mov	al, BYTE PTR [esi+12]
	mov	BYTE PTR [ecx+12], al

; 626  :                         _Fixnodeparent->_Color = _Black;

	mov	BYTE PTR [esi+12], 1

; 627  :                         _Pnode->_Left->_Color  = _Black;

	mov	eax, DWORD PTR [ecx]

; 628  :                         _Rrotate(_Fixnodeparent);

	mov	ecx, ebx
	push	esi
	mov	BYTE PTR [eax+12], 1
	call	?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >::_Rrotate
	jmp	SHORT $LN93@Extract
?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >::_Extract
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z
_TEXT	SEGMENT
__Erasednode$1$ = -8					; size = 4
tv1182 = -4						; size = 4
__Where$ = 8						; size = 4
?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >::_Extract, COMDAT
; _this$ = ecx

; 502  :     _Nodeptr _Extract(_Unchecked_const_iterator _Where) noexcept {

	sub	esp, 8
	push	ebx
	push	ebp

; 503  :         _Nodeptr _Erasednode = _Where._Ptr; // node to erase

	mov	ebp, DWORD PTR __Where$[esp+12]
	mov	ebx, ecx
	push	esi
	push	edi

; 504  :         ++_Where; // save successor iterator for return

	lea	ecx, DWORD PTR __Where$[esp+20]
	mov	DWORD PTR __Erasednode$1$[esp+24], ebp
	call	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >,std::_Iterator_base0>::operator++

; 505  : 
; 506  :         _Nodeptr _Fixnode; // the node to recolor as needed
; 507  :         _Nodeptr _Fixnodeparent; // parent of _Fixnode (which may be nil)
; 508  :         _Nodeptr _Pnode = _Erasednode;
; 509  : 
; 510  :         if (_Pnode->_Left->_Isnil) {

	mov	eax, DWORD PTR [ebp]
	mov	edi, DWORD PTR [ebp+8]
	cmp	BYTE PTR [eax+13], 0
	jne	SHORT $LN86@Extract

; 511  :             _Fixnode = _Pnode->_Right; // stitch up right subtree
; 512  :         } else if (_Pnode->_Right->_Isnil) {

	cmp	BYTE PTR [edi+13], 0
	je	SHORT $LN7@Extract

; 513  :             _Fixnode = _Pnode->_Left; // stitch up left subtree

	mov	edi, eax

; 514  :         } else { // two subtrees, must lift successor node to replace erased

	jmp	SHORT $LN86@Extract
$LN7@Extract:

; 515  :             _Pnode   = _Where._Ptr; // _Pnode is successor node

	mov	ecx, DWORD PTR __Where$[esp+20]

; 516  :             _Fixnode = _Pnode->_Right; // _Fixnode is only subtree

	mov	edi, DWORD PTR [ecx+8]
	cmp	ecx, ebp

; 517  :         }
; 518  : 
; 519  :         if (_Pnode == _Erasednode) { // at most one subtree, relink it

	jne	$LN9@Extract
$LN86@Extract:

; 520  :             _Fixnodeparent = _Erasednode->_Parent;
; 521  :             if (!_Fixnode->_Isnil) {

	cmp	BYTE PTR [edi+13], 0
	mov	esi, DWORD PTR [ebp+4]
	jne	SHORT $LN11@Extract

; 522  :                 _Fixnode->_Parent = _Fixnodeparent; // link up

	mov	DWORD PTR [edi+4], esi
$LN11@Extract:

; 523  :             }
; 524  : 
; 525  :             if (_Myhead->_Parent == _Erasednode) {

	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+4], ebp
	jne	SHORT $LN12@Extract

; 526  :                 _Myhead->_Parent = _Fixnode; // link down from root

	mov	DWORD PTR [eax+4], edi
	jmp	SHORT $LN15@Extract
$LN12@Extract:

; 527  :             } else if (_Fixnodeparent->_Left == _Erasednode) {

	cmp	DWORD PTR [esi], ebp
	jne	SHORT $LN14@Extract

; 528  :                 _Fixnodeparent->_Left = _Fixnode; // link down to left

	mov	DWORD PTR [esi], edi

; 529  :             } else {

	jmp	SHORT $LN15@Extract
$LN14@Extract:

; 530  :                 _Fixnodeparent->_Right = _Fixnode; // link down to right

	mov	DWORD PTR [esi+8], edi
$LN15@Extract:

; 531  :             }
; 532  : 
; 533  :             if (_Myhead->_Left == _Erasednode) {

	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax], ebp
	jne	SHORT $LN16@Extract

; 534  :                 _Myhead->_Left = _Fixnode->_Isnil ? _Fixnodeparent // smallest is parent of erased node

	cmp	BYTE PTR [edi+13], 0
	je	SHORT $LN42@Extract
	mov	edx, esi
	jmp	SHORT $LN48@Extract
$LN42@Extract:

; 451  :         while (!_Pnode->_Left->_Isnil) {

	mov	ecx, DWORD PTR [edi]

; 534  :                 _Myhead->_Left = _Fixnode->_Isnil ? _Fixnodeparent // smallest is parent of erased node

	mov	edx, edi

; 451  :         while (!_Pnode->_Left->_Isnil) {

	cmp	BYTE PTR [ecx+13], 0
	jne	SHORT $LN48@Extract
	npad	4
$LL47@Extract:
	mov	eax, DWORD PTR [ecx]

; 452  :             _Pnode = _Pnode->_Left;

	mov	edx, ecx
	mov	ecx, eax
	cmp	BYTE PTR [eax+13], 0
	je	SHORT $LL47@Extract
	mov	eax, DWORD PTR [ebx]
$LN48@Extract:

; 534  :                 _Myhead->_Left = _Fixnode->_Isnil ? _Fixnodeparent // smallest is parent of erased node

	mov	DWORD PTR [eax], edx
$LN16@Extract:

; 535  :                                                   : _Min(_Fixnode); // smallest in relinked subtree
; 536  :             }
; 537  : 
; 538  :             if (_Myhead->_Right == _Erasednode) {

	mov	edx, DWORD PTR [ebx]
	cmp	DWORD PTR [edx+8], ebp
	jne	SHORT $LN17@Extract

; 539  :                 _Myhead->_Right = _Fixnode->_Isnil ? _Fixnodeparent // largest is parent of erased node

	cmp	BYTE PTR [edi+13], 0
	je	SHORT $LN44@Extract
	mov	ecx, esi
	mov	DWORD PTR [edx+8], ecx

; 540  :                                                    : _Max(_Fixnode); // largest in relinked subtree
; 541  :             }
; 542  :         } else { // erased has two subtrees, _Pnode is successor to erased

	mov	dl, BYTE PTR [ebp+12]
	jmp	SHORT $LN10@Extract
$LN44@Extract:

; 443  :         while (!_Pnode->_Right->_Isnil) {

	mov	eax, DWORD PTR [edi+8]

; 539  :                 _Myhead->_Right = _Fixnode->_Isnil ? _Fixnodeparent // largest is parent of erased node

	mov	ecx, edi

; 443  :         while (!_Pnode->_Right->_Isnil) {

	cmp	BYTE PTR [eax+13], 0
	jne	SHORT $LN52@Extract
$LL51@Extract:

; 444  :             _Pnode = _Pnode->_Right;

	mov	ecx, eax
	mov	eax, DWORD PTR [ecx+8]
	cmp	BYTE PTR [eax+13], 0
	je	SHORT $LL51@Extract
$LN52@Extract:

; 539  :                 _Myhead->_Right = _Fixnode->_Isnil ? _Fixnodeparent // largest is parent of erased node

	mov	DWORD PTR [edx+8], ecx
$LN17@Extract:

; 540  :                                                    : _Max(_Fixnode); // largest in relinked subtree
; 541  :             }
; 542  :         } else { // erased has two subtrees, _Pnode is successor to erased

	mov	dl, BYTE PTR [ebp+12]
	jmp	SHORT $LN10@Extract
$LN9@Extract:

; 543  :             _Erasednode->_Left->_Parent = _Pnode; // link left up

	mov	DWORD PTR [eax+4], ecx

; 544  :             _Pnode->_Left               = _Erasednode->_Left; // link successor down

	mov	eax, DWORD PTR [ebp]
	mov	DWORD PTR [ecx], eax

; 545  : 
; 546  :             if (_Pnode == _Erasednode->_Right) {

	cmp	ecx, DWORD PTR [ebp+8]
	jne	SHORT $LN18@Extract

; 547  :                 _Fixnodeparent = _Pnode; // successor is next to erased

	mov	esi, ecx

; 548  :             } else { // successor further down, link in place of erased

	jmp	SHORT $LN19@Extract
$LN18@Extract:

; 549  :                 _Fixnodeparent = _Pnode->_Parent; // parent is successor's
; 550  :                 if (!_Fixnode->_Isnil) {

	cmp	BYTE PTR [edi+13], 0
	mov	esi, DWORD PTR [ecx+4]
	jne	SHORT $LN20@Extract

; 551  :                     _Fixnode->_Parent = _Fixnodeparent; // link fix up

	mov	DWORD PTR [edi+4], esi
$LN20@Extract:

; 552  :                 }
; 553  : 
; 554  :                 _Fixnodeparent->_Left        = _Fixnode; // link fix down

	mov	DWORD PTR [esi], edi

; 555  :                 _Pnode->_Right               = _Erasednode->_Right; // link next down

	mov	eax, DWORD PTR [ebp+8]
	mov	DWORD PTR [ecx+8], eax

; 556  :                 _Erasednode->_Right->_Parent = _Pnode; // right up

	mov	eax, DWORD PTR [ebp+8]
	mov	DWORD PTR [eax+4], ecx
$LN19@Extract:

; 557  :             }
; 558  : 
; 559  :             if (_Myhead->_Parent == _Erasednode) {

	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+4], ebp
	jne	SHORT $LN21@Extract

; 560  :                 _Myhead->_Parent = _Pnode; // link down from root

	mov	DWORD PTR [eax+4], ecx
	jmp	SHORT $LN24@Extract
$LN21@Extract:

; 561  :             } else if (_Erasednode->_Parent->_Left == _Erasednode) {

	mov	eax, DWORD PTR [ebp+4]
	cmp	DWORD PTR [eax], ebp
	jne	SHORT $LN23@Extract

; 562  :                 _Erasednode->_Parent->_Left = _Pnode; // link down to left

	mov	DWORD PTR [eax], ecx

; 563  :             } else {

	jmp	SHORT $LN24@Extract
$LN23@Extract:

; 564  :                 _Erasednode->_Parent->_Right = _Pnode; // link down to right

	mov	DWORD PTR [eax+8], ecx
$LN24@Extract:

; 567  :             _Pnode->_Parent = _Erasednode->_Parent; // link successor up

	mov	eax, DWORD PTR [ebp+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	dl, BYTE PTR [ecx+12]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 567  :             _Pnode->_Parent = _Erasednode->_Parent; // link successor up

	mov	DWORD PTR [ecx+4], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 101  :     _Left    = _STD move(_Right);

	mov	al, BYTE PTR [ebp+12]
	mov	BYTE PTR [ecx+12], al

; 102  :     _Right   = _STD move(_Tmp);

	mov	BYTE PTR [ebp+12], dl
$LN10@Extract:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 571  :         if (_Erasednode->_Color == _Black) { // erasing black link, must recolor/rebalance tree

	cmp	dl, 1
	jne	$LN25@Extract

; 572  :             for (; _Fixnode != _Myhead->_Parent && _Fixnode->_Color == _Black; _Fixnodeparent = _Fixnode->_Parent) {

	mov	eax, DWORD PTR [ebx]
	cmp	edi, DWORD PTR [eax+4]
	je	$LN3@Extract
$LL4@Extract:
	cmp	BYTE PTR [edi+12], 1
	mov	ebp, esi
	jne	$LN93@Extract

; 573  :                 if (_Fixnode == _Fixnodeparent->_Left) { // fixup left subtree

	mov	ecx, DWORD PTR [esi]
	cmp	edi, ecx
	jne	$LN26@Extract

; 574  :                     _Pnode = _Fixnodeparent->_Right;

	mov	ecx, DWORD PTR [esi+8]

; 575  :                     if (_Pnode->_Color == _Red) { // rotate red up from right subtree

	cmp	BYTE PTR [ecx+12], 0
	jne	SHORT $LN87@Extract

; 576  :                         _Pnode->_Color         = _Black;

	mov	BYTE PTR [ecx+12], 1

; 459  :         _Nodeptr _Pnode    = _Wherenode->_Right;

	mov	ecx, DWORD PTR [esi+8]

; 577  :                         _Fixnodeparent->_Color = _Red;

	mov	BYTE PTR [esi+12], 0

; 460  :         _Wherenode->_Right = _Pnode->_Left;

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [esi+8], eax

; 461  : 
; 462  :         if (!_Pnode->_Left->_Isnil) {

	mov	eax, DWORD PTR [ecx]
	cmp	BYTE PTR [eax+13], 0
	jne	SHORT $LN57@Extract

; 463  :             _Pnode->_Left->_Parent = _Wherenode;

	mov	DWORD PTR [eax+4], esi
$LN57@Extract:

; 464  :         }
; 465  : 
; 466  :         _Pnode->_Parent = _Wherenode->_Parent;

	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [ecx+4], eax

; 467  : 
; 468  :         if (_Wherenode == _Myhead->_Parent) {

	mov	eax, DWORD PTR [ebx]
	cmp	esi, DWORD PTR [eax+4]
	jne	SHORT $LN58@Extract

; 469  :             _Myhead->_Parent = _Pnode;

	mov	DWORD PTR [eax+4], ecx
	jmp	SHORT $LN61@Extract
$LN58@Extract:

; 470  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

	mov	eax, DWORD PTR [esi+4]
	cmp	esi, DWORD PTR [eax]
	jne	SHORT $LN60@Extract

; 471  :             _Wherenode->_Parent->_Left = _Pnode;

	mov	DWORD PTR [eax], ecx

; 472  :         } else {

	jmp	SHORT $LN61@Extract
$LN60@Extract:

; 473  :             _Wherenode->_Parent->_Right = _Pnode;

	mov	DWORD PTR [eax+8], ecx
$LN61@Extract:

; 474  :         }
; 475  : 
; 476  :         _Pnode->_Left       = _Wherenode;

	mov	DWORD PTR [ecx], esi

; 477  :         _Wherenode->_Parent = _Pnode;

	mov	DWORD PTR [esi+4], ecx

; 578  :                         _Lrotate(_Fixnodeparent);
; 579  :                         _Pnode = _Fixnodeparent->_Right;

	mov	ecx, DWORD PTR [esi+8]
$LN87@Extract:

; 580  :                     }
; 581  : 
; 582  :                     if (_Pnode->_Isnil) {

	cmp	BYTE PTR [ecx+13], 0
	jne	$LN2@Extract

; 583  :                         _Fixnode = _Fixnodeparent; // shouldn't happen
; 584  :                     } else if (_Pnode->_Left->_Color == _Black
; 585  :                                && _Pnode->_Right->_Color == _Black) { // redden right subtree with black children

	mov	edx, DWORD PTR [ecx]
	cmp	BYTE PTR [edx+12], 1
	jne	SHORT $LN89@Extract
	mov	eax, DWORD PTR [ecx+8]
	cmp	BYTE PTR [eax+12], 1
	je	$LN94@Extract
$LN89@Extract:

; 586  :                         _Pnode->_Color = _Red;
; 587  :                         _Fixnode       = _Fixnodeparent;
; 588  :                     } else { // must rearrange right subtree
; 589  :                         if (_Pnode->_Right->_Color == _Black) { // rotate red up from left sub-subtree

	mov	eax, DWORD PTR [ecx+8]
	cmp	BYTE PTR [eax+12], 1
	jne	SHORT $LN33@Extract

; 590  :                             _Pnode->_Left->_Color = _Black;

	mov	BYTE PTR [edx+12], 1

; 591  :                             _Pnode->_Color        = _Red;

	mov	BYTE PTR [ecx+12], 0

; 592  :                             _Rrotate(_Pnode);

	push	ecx
	mov	ecx, ebx
	call	?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >::_Rrotate

; 593  :                             _Pnode = _Fixnodeparent->_Right;

	mov	ecx, DWORD PTR [esi+8]
$LN33@Extract:

; 594  :                         }
; 595  : 
; 596  :                         _Pnode->_Color         = _Fixnodeparent->_Color;

	mov	al, BYTE PTR [esi+12]
	mov	BYTE PTR [ecx+12], al

; 597  :                         _Fixnodeparent->_Color = _Black;

	mov	BYTE PTR [esi+12], 1

; 598  :                         _Pnode->_Right->_Color = _Black;

	mov	eax, DWORD PTR [ecx+8]

; 599  :                         _Lrotate(_Fixnodeparent);

	mov	ecx, ebx
	push	esi
	mov	BYTE PTR [eax+12], 1
	call	?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >::_Lrotate

; 600  :                         break; // tree now recolored/rebalanced

	jmp	SHORT $LN93@Extract
$LN26@Extract:

; 601  :                     }
; 602  :                 } else { // fixup right subtree
; 603  :                     _Pnode = _Fixnodeparent->_Left;
; 604  :                     if (_Pnode->_Color == _Red) { // rotate red up from left subtree

	cmp	BYTE PTR [ecx+12], 0
	jne	SHORT $LN88@Extract

; 605  :                         _Pnode->_Color         = _Black;

	mov	BYTE PTR [ecx+12], 1

; 481  :         _Nodeptr _Pnode   = _Wherenode->_Left;

	mov	ecx, DWORD PTR [esi]

; 606  :                         _Fixnodeparent->_Color = _Red;

	mov	BYTE PTR [esi+12], 0

; 482  :         _Wherenode->_Left = _Pnode->_Right;

	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [esi], eax

; 483  : 
; 484  :         if (!_Pnode->_Right->_Isnil) {

	mov	eax, DWORD PTR [ecx+8]
	cmp	BYTE PTR [eax+13], 0
	jne	SHORT $LN64@Extract

; 485  :             _Pnode->_Right->_Parent = _Wherenode;

	mov	DWORD PTR [eax+4], esi
$LN64@Extract:

; 486  :         }
; 487  : 
; 488  :         _Pnode->_Parent = _Wherenode->_Parent;

	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [ecx+4], eax

; 489  : 
; 490  :         if (_Wherenode == _Myhead->_Parent) {

	mov	eax, DWORD PTR [ebx]
	cmp	esi, DWORD PTR [eax+4]
	jne	SHORT $LN65@Extract

; 491  :             _Myhead->_Parent = _Pnode;

	mov	DWORD PTR [eax+4], ecx
	jmp	SHORT $LN68@Extract
$LN65@Extract:

; 492  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

	mov	eax, DWORD PTR [esi+4]
	cmp	esi, DWORD PTR [eax+8]
	jne	SHORT $LN67@Extract

; 493  :             _Wherenode->_Parent->_Right = _Pnode;

	mov	DWORD PTR [eax+8], ecx

; 494  :         } else {

	jmp	SHORT $LN68@Extract
$LN67@Extract:

; 495  :             _Wherenode->_Parent->_Left = _Pnode;

	mov	DWORD PTR [eax], ecx
$LN68@Extract:

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

	mov	DWORD PTR [ecx+8], esi

; 499  :         _Wherenode->_Parent = _Pnode;

	mov	DWORD PTR [esi+4], ecx

; 607  :                         _Rrotate(_Fixnodeparent);
; 608  :                         _Pnode = _Fixnodeparent->_Left;

	mov	ecx, DWORD PTR [esi]
$LN88@Extract:

; 609  :                     }
; 610  : 
; 611  :                     if (_Pnode->_Isnil) {

	cmp	BYTE PTR [ecx+13], 0
	jne	SHORT $LN2@Extract

; 612  :                         _Fixnode = _Fixnodeparent; // shouldn't happen
; 613  :                     } else if (_Pnode->_Right->_Color == _Black
; 614  :                                && _Pnode->_Left->_Color == _Black) { // redden left subtree with black children

	mov	edx, DWORD PTR [ecx+8]
	cmp	BYTE PTR [edx+12], 1
	jne	SHORT $LN90@Extract
	mov	eax, DWORD PTR [ecx]
	cmp	BYTE PTR [eax+12], 1
	jne	SHORT $LN90@Extract
$LN94@Extract:

; 572  :             for (; _Fixnode != _Myhead->_Parent && _Fixnode->_Color == _Black; _Fixnodeparent = _Fixnode->_Parent) {

	mov	BYTE PTR [ecx+12], 0
$LN2@Extract:
	mov	eax, DWORD PTR [ebx]
	mov	edi, ebp
	mov	esi, DWORD PTR [esi+4]
	cmp	ebp, DWORD PTR [eax+4]
	jne	$LL4@Extract
$LN93@Extract:

; 629  :                         break; // tree now recolored/rebalanced
; 630  :                     }
; 631  :                 }
; 632  :             }
; 633  : 
; 634  :             _Fixnode->_Color = _Black; // stopping node is black

	mov	ebp, DWORD PTR __Erasednode$1$[esp+24]
$LN3@Extract:
	mov	BYTE PTR [edi+12], 1
$LN25@Extract:

; 635  :         }
; 636  : 
; 637  :         if (0 < _Mysize) {

	mov	ecx, DWORD PTR [ebx+4]
	mov	eax, ebp
	test	ecx, ecx
	je	SHORT $LN40@Extract

; 638  :             --_Mysize;

	dec	ecx
	mov	DWORD PTR [ebx+4], ecx
$LN40@Extract:

; 639  :         }
; 640  : 
; 641  :         return _Erasednode;
; 642  :     }

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 8
	ret	4
$LN90@Extract:

; 615  :                         _Pnode->_Color = _Red;
; 616  :                         _Fixnode       = _Fixnodeparent;
; 617  :                     } else { // must rearrange left subtree
; 618  :                         if (_Pnode->_Left->_Color == _Black) { // rotate red up from right sub-subtree

	mov	eax, DWORD PTR [ecx]
	cmp	BYTE PTR [eax+12], 1
	jne	SHORT $LN39@Extract

; 619  :                             _Pnode->_Right->_Color = _Black;

	mov	BYTE PTR [edx+12], 1

; 620  :                             _Pnode->_Color         = _Red;

	mov	BYTE PTR [ecx+12], 0

; 621  :                             _Lrotate(_Pnode);

	push	ecx
	mov	ecx, ebx
	call	?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >::_Lrotate

; 622  :                             _Pnode = _Fixnodeparent->_Left;

	mov	ecx, DWORD PTR [esi]
$LN39@Extract:

; 623  :                         }
; 624  : 
; 625  :                         _Pnode->_Color         = _Fixnodeparent->_Color;

	mov	al, BYTE PTR [esi+12]
	mov	BYTE PTR [ecx+12], al

; 626  :                         _Fixnodeparent->_Color = _Black;

	mov	BYTE PTR [esi+12], 1

; 627  :                         _Pnode->_Left->_Color  = _Black;

	mov	eax, DWORD PTR [ecx]

; 628  :                         _Rrotate(_Fixnodeparent);

	mov	ecx, ebx
	push	esi
	mov	BYTE PTR [eax+12], 1
	call	?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >::_Rrotate
	jmp	SHORT $LN93@Extract
?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >::_Extract
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$xalloc@UModelDef@CModelPool@@@@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@$00@std@@QBEABV?$xalloc@UModelDef@CModelPool@@@@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$xalloc@UModelDef@CModelPool@@@@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@$00@std@@QBEABV?$xalloc@UModelDef@CModelPool@@@@XZ PROC ; std::_Compressed_pair<xalloc<CModelPool::ModelDef>,std::_Vector_val<std::_Simple_types<CModelPool::ModelDef> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1343 :         return *this;

	mov	eax, ecx

; 1344 :     }

	ret	0
?_Get_first@?$_Compressed_pair@V?$xalloc@UModelDef@CModelPool@@@@V?$_Vector_val@U?$_Simple_types@UModelDef@CModelPool@@@std@@@std@@$00@std@@QBEABV?$xalloc@UModelDef@CModelPool@@@@XZ ENDP ; std::_Compressed_pair<xalloc<CModelPool::ModelDef>,std::_Vector_val<std::_Simple_types<CModelPool::ModelDef> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ?max_size@?$xalloc@UModelDef@CModelPool@@@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$xalloc@UModelDef@CModelPool@@@@QBEIXZ PROC	; xalloc<CModelPool::ModelDef>::max_size, COMDAT
; _this$dead$ = ecx

; 86   : 							size_type				max_size		() const								{	size_type _Count = (size_type)(-1) / sizeof (T);	return (0 < _Count ? _Count : 1);	}

	mov	eax, 357913941				; 15555555H
	ret	0
?max_size@?$xalloc@UModelDef@CModelPool@@@@QBEIXZ ENDP	; xalloc<CModelPool::ModelDef>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >::_Rrotate, COMDAT
; _this$ = ecx

; 481  :         _Nodeptr _Pnode   = _Wherenode->_Left;

	mov	edx, DWORD PTR __Wherenode$[esp-4]
	push	esi
	mov	esi, DWORD PTR [edx]

; 482  :         _Wherenode->_Left = _Pnode->_Right;

	mov	eax, DWORD PTR [esi+8]
	mov	DWORD PTR [edx], eax

; 483  : 
; 484  :         if (!_Pnode->_Right->_Isnil) {

	mov	eax, DWORD PTR [esi+8]
	cmp	BYTE PTR [eax+13], 0
	jne	SHORT $LN2@Rrotate

; 485  :             _Pnode->_Right->_Parent = _Wherenode;

	mov	DWORD PTR [eax+4], edx
$LN2@Rrotate:

; 486  :         }
; 487  : 
; 488  :         _Pnode->_Parent = _Wherenode->_Parent;

	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [esi+4], eax

; 489  : 
; 490  :         if (_Wherenode == _Myhead->_Parent) {

	mov	eax, DWORD PTR [ecx]
	cmp	edx, DWORD PTR [eax+4]
	jne	SHORT $LN3@Rrotate

; 491  :             _Myhead->_Parent = _Pnode;

	mov	DWORD PTR [eax+4], esi

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;
; 499  :         _Wherenode->_Parent = _Pnode;
; 500  :     }

	mov	DWORD PTR [esi+8], edx
	mov	DWORD PTR [edx+4], esi
	pop	esi
	ret	4
$LN3@Rrotate:

; 492  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

	mov	eax, DWORD PTR [edx+4]
	cmp	edx, DWORD PTR [eax+8]
	jne	SHORT $LN5@Rrotate

; 493  :             _Wherenode->_Parent->_Right = _Pnode;

	mov	DWORD PTR [eax+8], esi

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;
; 499  :         _Wherenode->_Parent = _Pnode;
; 500  :     }

	mov	DWORD PTR [esi+8], edx
	mov	DWORD PTR [edx+4], esi
	pop	esi
	ret	4
$LN5@Rrotate:

; 494  :         } else {
; 495  :             _Wherenode->_Parent->_Left = _Pnode;

	mov	DWORD PTR [eax], esi

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;
; 499  :         _Wherenode->_Parent = _Pnode;
; 500  :     }

	mov	DWORD PTR [esi+8], edx
	mov	DWORD PTR [edx+4], esi
	pop	esi
	ret	4
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >::_Rrotate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >::_Lrotate, COMDAT
; _this$ = ecx

; 459  :         _Nodeptr _Pnode    = _Wherenode->_Right;

	mov	edx, DWORD PTR __Wherenode$[esp-4]
	push	esi
	mov	esi, DWORD PTR [edx+8]

; 460  :         _Wherenode->_Right = _Pnode->_Left;

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [edx+8], eax

; 461  : 
; 462  :         if (!_Pnode->_Left->_Isnil) {

	mov	eax, DWORD PTR [esi]
	cmp	BYTE PTR [eax+13], 0
	jne	SHORT $LN2@Lrotate

; 463  :             _Pnode->_Left->_Parent = _Wherenode;

	mov	DWORD PTR [eax+4], edx
$LN2@Lrotate:

; 464  :         }
; 465  : 
; 466  :         _Pnode->_Parent = _Wherenode->_Parent;

	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [esi+4], eax

; 467  : 
; 468  :         if (_Wherenode == _Myhead->_Parent) {

	mov	eax, DWORD PTR [ecx]
	cmp	edx, DWORD PTR [eax+4]
	jne	SHORT $LN3@Lrotate

; 469  :             _Myhead->_Parent = _Pnode;

	mov	DWORD PTR [eax+4], esi

; 474  :         }
; 475  : 
; 476  :         _Pnode->_Left       = _Wherenode;
; 477  :         _Wherenode->_Parent = _Pnode;
; 478  :     }

	mov	DWORD PTR [esi], edx
	mov	DWORD PTR [edx+4], esi
	pop	esi
	ret	4
$LN3@Lrotate:

; 470  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

	mov	eax, DWORD PTR [edx+4]
	cmp	edx, DWORD PTR [eax]
	jne	SHORT $LN5@Lrotate

; 471  :             _Wherenode->_Parent->_Left = _Pnode;

	mov	DWORD PTR [eax], esi

; 474  :         }
; 475  : 
; 476  :         _Pnode->_Left       = _Wherenode;
; 477  :         _Wherenode->_Parent = _Pnode;
; 478  :     }

	mov	DWORD PTR [esi], edx
	mov	DWORD PTR [edx+4], esi
	pop	esi
	ret	4
$LN5@Lrotate:

; 472  :         } else {
; 473  :             _Wherenode->_Parent->_Right = _Pnode;

	mov	DWORD PTR [eax+8], esi

; 474  :         }
; 475  : 
; 476  :         _Pnode->_Left       = _Wherenode;
; 477  :         _Wherenode->_Parent = _Pnode;
; 478  :     }

	mov	DWORD PTR [esi], edx
	mov	DWORD PTR [edx+4], esi
	pop	esi
	ret	4
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >::_Lrotate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >::_Max, COMDAT
; __Pnode$ = ecx

; 443  :         while (!_Pnode->_Right->_Isnil) {

	mov	eax, DWORD PTR [ecx+8]
	cmp	BYTE PTR [eax+13], 0
	jne	SHORT $LN9@Max
	npad	7
$LL2@Max:

; 444  :             _Pnode = _Pnode->_Right;

	mov	ecx, eax
	mov	eax, DWORD PTR [ecx+8]
	cmp	BYTE PTR [eax+13], 0
	je	SHORT $LL2@Max
$LN9@Max:

; 445  :         }
; 446  : 
; 447  :         return _Pnode;
; 448  :     }

	mov	eax, ecx
	ret	0
?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >::_Max
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >::_Rrotate, COMDAT
; _this$ = ecx

; 481  :         _Nodeptr _Pnode   = _Wherenode->_Left;

	mov	edx, DWORD PTR __Wherenode$[esp-4]
	push	esi
	mov	esi, DWORD PTR [edx]

; 482  :         _Wherenode->_Left = _Pnode->_Right;

	mov	eax, DWORD PTR [esi+8]
	mov	DWORD PTR [edx], eax

; 483  : 
; 484  :         if (!_Pnode->_Right->_Isnil) {

	mov	eax, DWORD PTR [esi+8]
	cmp	BYTE PTR [eax+13], 0
	jne	SHORT $LN2@Rrotate

; 485  :             _Pnode->_Right->_Parent = _Wherenode;

	mov	DWORD PTR [eax+4], edx
$LN2@Rrotate:

; 486  :         }
; 487  : 
; 488  :         _Pnode->_Parent = _Wherenode->_Parent;

	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [esi+4], eax

; 489  : 
; 490  :         if (_Wherenode == _Myhead->_Parent) {

	mov	eax, DWORD PTR [ecx]
	cmp	edx, DWORD PTR [eax+4]
	jne	SHORT $LN3@Rrotate

; 491  :             _Myhead->_Parent = _Pnode;

	mov	DWORD PTR [eax+4], esi

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;
; 499  :         _Wherenode->_Parent = _Pnode;
; 500  :     }

	mov	DWORD PTR [esi+8], edx
	mov	DWORD PTR [edx+4], esi
	pop	esi
	ret	4
$LN3@Rrotate:

; 492  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

	mov	eax, DWORD PTR [edx+4]
	cmp	edx, DWORD PTR [eax+8]
	jne	SHORT $LN5@Rrotate

; 493  :             _Wherenode->_Parent->_Right = _Pnode;

	mov	DWORD PTR [eax+8], esi

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;
; 499  :         _Wherenode->_Parent = _Pnode;
; 500  :     }

	mov	DWORD PTR [esi+8], edx
	mov	DWORD PTR [edx+4], esi
	pop	esi
	ret	4
$LN5@Rrotate:

; 494  :         } else {
; 495  :             _Wherenode->_Parent->_Left = _Pnode;

	mov	DWORD PTR [eax], esi

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;
; 499  :         _Wherenode->_Parent = _Pnode;
; 500  :     }

	mov	DWORD PTR [esi+8], edx
	mov	DWORD PTR [edx+4], esi
	pop	esi
	ret	4
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >::_Rrotate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >::_Lrotate, COMDAT
; _this$ = ecx

; 459  :         _Nodeptr _Pnode    = _Wherenode->_Right;

	mov	edx, DWORD PTR __Wherenode$[esp-4]
	push	esi
	mov	esi, DWORD PTR [edx+8]

; 460  :         _Wherenode->_Right = _Pnode->_Left;

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [edx+8], eax

; 461  : 
; 462  :         if (!_Pnode->_Left->_Isnil) {

	mov	eax, DWORD PTR [esi]
	cmp	BYTE PTR [eax+13], 0
	jne	SHORT $LN2@Lrotate

; 463  :             _Pnode->_Left->_Parent = _Wherenode;

	mov	DWORD PTR [eax+4], edx
$LN2@Lrotate:

; 464  :         }
; 465  : 
; 466  :         _Pnode->_Parent = _Wherenode->_Parent;

	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [esi+4], eax

; 467  : 
; 468  :         if (_Wherenode == _Myhead->_Parent) {

	mov	eax, DWORD PTR [ecx]
	cmp	edx, DWORD PTR [eax+4]
	jne	SHORT $LN3@Lrotate

; 469  :             _Myhead->_Parent = _Pnode;

	mov	DWORD PTR [eax+4], esi

; 474  :         }
; 475  : 
; 476  :         _Pnode->_Left       = _Wherenode;
; 477  :         _Wherenode->_Parent = _Pnode;
; 478  :     }

	mov	DWORD PTR [esi], edx
	mov	DWORD PTR [edx+4], esi
	pop	esi
	ret	4
$LN3@Lrotate:

; 470  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

	mov	eax, DWORD PTR [edx+4]
	cmp	edx, DWORD PTR [eax]
	jne	SHORT $LN5@Lrotate

; 471  :             _Wherenode->_Parent->_Left = _Pnode;

	mov	DWORD PTR [eax], esi

; 474  :         }
; 475  : 
; 476  :         _Pnode->_Left       = _Wherenode;
; 477  :         _Wherenode->_Parent = _Pnode;
; 478  :     }

	mov	DWORD PTR [esi], edx
	mov	DWORD PTR [edx+4], esi
	pop	esi
	ret	4
$LN5@Lrotate:

; 472  :         } else {
; 473  :             _Wherenode->_Parent->_Right = _Pnode;

	mov	DWORD PTR [eax+8], esi

; 474  :         }
; 475  : 
; 476  :         _Pnode->_Left       = _Wherenode;
; 477  :         _Wherenode->_Parent = _Pnode;
; 478  :     }

	mov	DWORD PTR [esi], edx
	mov	DWORD PTR [edx+4], esi
	pop	esi
	ret	4
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >::_Lrotate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >::_Max, COMDAT
; __Pnode$ = ecx

; 443  :         while (!_Pnode->_Right->_Isnil) {

	mov	eax, DWORD PTR [ecx+8]
	cmp	BYTE PTR [eax+13], 0
	jne	SHORT $LN9@Max
	npad	7
$LL2@Max:

; 444  :             _Pnode = _Pnode->_Right;

	mov	ecx, eax
	mov	eax, DWORD PTR [ecx+8]
	cmp	BYTE PTR [eax+13], 0
	je	SHORT $LL2@Max
$LN9@Max:

; 445  :         }
; 446  : 
; 447  :         return _Pnode;
; 448  :     }

	mov	eax, ecx
	ret	0
?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >::_Max
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >,1>::_Compressed_pair<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >,1><>, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 435  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

	mov	DWORD PTR [ecx], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1331 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

	mov	eax, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 435  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

	mov	DWORD PTR [ecx+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1331 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

	ret	4
??$?0$$V@?$_Compressed_pair@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >,1>::_Compressed_pair<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >,1><>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >,1>::_Compressed_pair<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >,1><>, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 435  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

	mov	DWORD PTR [ecx], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1331 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

	mov	eax, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 435  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

	mov	DWORD PTR [ecx+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1331 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

	ret	4
??$?0$$V@?$_Compressed_pair@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >,1>::_Compressed_pair<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >,1><>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$?0AAPAVIRender_Visual@@AAPAD$0A@@?$pair@PAVIRender_Visual@@PAD@std@@QAE@AAPAVIRender_Visual@@AAPAD@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAPAVIRender_Visual@@AAPAD$0A@@?$pair@PAVIRender_Visual@@PAD@std@@QAE@AAPAVIRender_Visual@@AAPAD@Z PROC ; std::pair<IRender_Visual *,char *>::pair<IRender_Visual *,char *><IRender_Visual * &,char * &,0>, COMDAT
; _this$ = ecx

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	eax, DWORD PTR __Val1$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR __Val2$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	ret	8
??$?0AAPAVIRender_Visual@@AAPAD$0A@@?$pair@PAVIRender_Visual@@PAD@std@@QAE@AAPAVIRender_Visual@@AAPAD@Z ENDP ; std::pair<IRender_Visual *,char *>::pair<IRender_Visual *,char *><IRender_Visual * &,char * &,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@U?$pair@PAVIRender_Visual@@PAD@std@@@std@@YA$$QAU?$pair@PAVIRender_Visual@@PAD@0@AAU10@@Z
_TEXT	SEGMENT
??$forward@U?$pair@PAVIRender_Visual@@PAD@std@@@std@@YA$$QAU?$pair@PAVIRender_Visual@@PAD@0@AAU10@@Z PROC ; std::forward<std::pair<IRender_Visual *,char *> >, COMDAT
; __Arg$ = ecx

; 1386 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, ecx

; 1387 : }

	ret	0
??$forward@U?$pair@PAVIRender_Visual@@PAD@std@@@std@@YA$$QAU?$pair@PAVIRender_Visual@@PAD@0@AAU10@@Z ENDP ; std::forward<std::pair<IRender_Visual *,char *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??$emplace@U?$pair@PAVIRender_Visual@@PAD@std@@@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@PAVIRender_Visual@@PAD@1@@Z
_TEXT	SEGMENT
__Loc$2$ = -16						; size = 4
$T2 = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Loc$3$ = 12						; size = 4
_<_Vals_0>$ = 12					; size = 4
??$emplace@U?$pair@PAVIRender_Visual@@PAD@std@@@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@PAVIRender_Visual@@PAD@1@@Z PROC ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::emplace<std::pair<IRender_Visual *,char *> >, COMDAT
; _this$ = ecx

; 1036 :     pair<iterator, bool> emplace(_Valtys&&... _Vals) {

	sub	esp, 20					; 00000014H
	push	ebx

; 1006 :             _Loc                = _Find_lower_bound(_Keyval);

	mov	ebx, DWORD PTR _<_Vals_0>$[esp+20]
	lea	eax, DWORD PTR $T2[esp+24]

; 1036 :     pair<iterator, bool> emplace(_Valtys&&... _Vals) {

	push	ebp
	push	esi
	push	edi

; 1006 :             _Loc                = _Find_lower_bound(_Keyval);

	push	ebx
	push	eax

; 1036 :     pair<iterator, bool> emplace(_Valtys&&... _Vals) {

	mov	edi, ecx

; 1006 :             _Loc                = _Find_lower_bound(_Keyval);

	call	??$_Find_lower_bound@PAVIRender_Visual@@@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@1@ABQAVIRender_Visual@@@Z ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::_Find_lower_bound<IRender_Visual *>
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Loc$2$[esp+36], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Loc$3$[esp+32], ecx
	mov	ecx, DWORD PTR [eax+8]

; 1591 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

	cmp	BYTE PTR [ecx+13], 0
	jne	SHORT $LN4@emplace
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

	mov	eax, DWORD PTR [ebx]
	cmp	eax, DWORD PTR [ecx+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1591 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

	jb	SHORT $LN4@emplace
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	eax, DWORD PTR ___$ReturnUdt$[esp+32]
	xor	dl, dl
	mov	DWORD PTR [eax], ecx
	mov	BYTE PTR [eax+4], dl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1039 :     }

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 20					; 00000014H
	ret	8
$LN4@emplace:

; 1615 :         if (max_size() == _Get_scary()->_Mysize) {

	cmp	DWORD PTR [edi+4], 178956970		; 0aaaaaaaH
	je	SHORT $LN89@emplace
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1012 :             _Inserted = _Tree_temp_node<_Alnode>(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...)._Release();

	mov	ebp, DWORD PTR [edi]
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	push	24					; 00000018H
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 242  :         : first(_STD forward<_Other1>(_Right.first)), second(_STD forward<_Other2>(_Right.second)) {}

	mov	ecx, DWORD PTR [ebx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 966  :         _Ptr = _Al.allocate(1);

	mov	esi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 242  :         : first(_STD forward<_Other1>(_Right.first)), second(_STD forward<_Other2>(_Right.second)) {}

	mov	DWORD PTR [esi+16], ecx
	mov	ecx, DWORD PTR [ebx+4]
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 52   : 	void				_set		(str_c rhs) 					{	str_value* v = g_pStringContainer->dock(rhs); if (0!=v) v->dwReference++; _dec(); p_ = v;	}

	push	ecx
	mov	ecx, DWORD PTR __imp_?g_pStringContainer@@3PAVstr_container@@A

; 58   : 						shared_str	(str_c rhs) 					{	p_ = 0;	_set(rhs);								}

	mov	DWORD PTR [esi+20], 0

; 52   : 	void				_set		(str_c rhs) 					{	str_value* v = g_pStringContainer->dock(rhs); if (0!=v) v->dwReference++; _dec(); p_ = v;	}

	mov	ecx, DWORD PTR [ecx]
	call	DWORD PTR __imp_?dock@str_container@@QAEPAUstr_value@@PBD@Z
	test	eax, eax
	je	SHORT $LN37@emplace
	inc	DWORD PTR [eax]
$LN37@emplace:

; 50   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	mov	ecx, DWORD PTR [esi+20]
	test	ecx, ecx
	je	SHORT $LN41@emplace
	dec	DWORD PTR [ecx]
$LN41@emplace:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1031 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

	push	esi
	push	DWORD PTR __Loc$3$[esp+36]
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 52   : 	void				_set		(str_c rhs) 					{	str_value* v = g_pStringContainer->dock(rhs); if (0!=v) v->dwReference++; _dec(); p_ = v;	}

	mov	DWORD PTR [esi+20], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1031 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

	mov	ecx, edi
	push	DWORD PTR __Loc$2$[esp+44]

; 806  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

	mov	DWORD PTR [esi], ebp

; 807  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

	mov	DWORD PTR [esi+4], ebp

; 808  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

	mov	DWORD PTR [esi+8], ebp

; 809  :         this->_Ptr->_Color = _Red;

	mov	WORD PTR [esi+12], 0

; 1031 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

	call	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >::_Insert_node

; 1039 :     }

	pop	edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	ecx, eax
	mov	dl, 1
	mov	eax, DWORD PTR ___$ReturnUdt$[esp+28]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1039 :     }

	pop	esi
	pop	ebp
	pop	ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	DWORD PTR [eax], ecx
	mov	BYTE PTR [eax+4], dl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1039 :     }

	add	esp, 20					; 00000014H
	ret	8
$LN89@emplace:

; 1616 :             _Throw_tree_length_error();

	call	?_Throw_tree_length_error@std@@YAXXZ	; std::_Throw_tree_length_error
$LN87@emplace:
	int	3
??$emplace@U?$pair@PAVIRender_Visual@@PAD@std@@@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@PAVIRender_Visual@@PAD@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::emplace<std::pair<IRender_Visual *,char *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$?0AAVshared_str@@AAPAVIRender_Visual@@$0A@@?$pair@Vshared_str@@PAVIRender_Visual@@@std@@QAE@AAVshared_str@@AAPAVIRender_Visual@@@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAVshared_str@@AAPAVIRender_Visual@@$0A@@?$pair@Vshared_str@@PAVIRender_Visual@@@std@@QAE@AAVshared_str@@AAPAVIRender_Visual@@@Z PROC ; std::pair<shared_str,IRender_Visual *>::pair<shared_str,IRender_Visual *><shared_str &,IRender_Visual * &,0>, COMDAT
; _this$ = ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	eax, DWORD PTR __Val1$[esp-4]

; 59   : 						shared_str	(shared_str const &rhs)			{	p_ = 0;	_set(rhs);								}

	mov	DWORD PTR [ecx], 0

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	eax, DWORD PTR [eax]
	test	eax, eax
	je	SHORT $LN10@pair
	inc	DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]

; 50   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	test	edx, edx
	je	SHORT $LN10@pair
	dec	DWORD PTR [edx]
$LN10@pair:

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	DWORD PTR [ecx], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	eax, DWORD PTR __Val2$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	ret	8
??$?0AAVshared_str@@AAPAVIRender_Visual@@$0A@@?$pair@Vshared_str@@PAVIRender_Visual@@@std@@QAE@AAVshared_str@@AAPAVIRender_Visual@@@Z ENDP ; std::pair<shared_str,IRender_Visual *>::pair<shared_str,IRender_Visual *><shared_str &,IRender_Visual * &,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@std@@YA$$QAU?$pair@Vshared_str@@PAVIRender_Visual@@@0@AAU10@@Z
_TEXT	SEGMENT
??$forward@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@std@@YA$$QAU?$pair@Vshared_str@@PAVIRender_Visual@@@0@AAU10@@Z PROC ; std::forward<std::pair<shared_str,IRender_Visual *> >, COMDAT
; __Arg$ = ecx

; 1386 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, ecx

; 1387 : }

	ret	0
??$forward@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@std@@YA$$QAU?$pair@Vshared_str@@PAVIRender_Visual@@@0@AAU10@@Z ENDP ; std::forward<std::pair<shared_str,IRender_Visual *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\map
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\modelpool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\map
;	COMDAT ??$emplace@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@?$multimap@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@1@$$QAU?$pair@Vshared_str@@PAVIRender_Visual@@@1@@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_<_Val_0>$ = 12						; size = 4
??$emplace@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@?$multimap@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@1@$$QAU?$pair@Vshared_str@@PAVIRender_Visual@@@1@@Z PROC ; std::multimap<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> > >::emplace<std::pair<shared_str,IRender_Visual *> >, COMDAT
; _this$ = ecx

; 497  :     iterator emplace(_Valty&&... _Val) {

	push	ecx
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	edi, ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	24					; 00000018H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\map

; 497  :     iterator emplace(_Valty&&... _Val) {

	mov	DWORD PTR _this$1$[esp+24], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1015 :             _Tree_temp_node<_Alnode> _Newnode(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...);

	mov	esi, DWORD PTR [edi]
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	edx, DWORD PTR _<_Val_0>$[esp+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 966  :         _Ptr = _Al.allocate(1);

	mov	ebp, eax
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 59   : 						shared_str	(shared_str const &rhs)			{	p_ = 0;	_set(rhs);								}

	mov	DWORD PTR [ebp+16], 0

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	ecx, DWORD PTR [edx]
	test	ecx, ecx
	je	SHORT $LN30@emplace
	inc	DWORD PTR [ecx]
	mov	eax, DWORD PTR [ebp+16]

; 50   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	test	eax, eax
	je	SHORT $LN30@emplace
	dec	DWORD PTR [eax]
$LN30@emplace:

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	DWORD PTR [ebp+16], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 242  :         : first(_STD forward<_Other1>(_Right.first)), second(_STD forward<_Other2>(_Right.second)) {}

	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ebp+20], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 806  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

	mov	DWORD PTR [ebp], esi

; 807  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

	mov	DWORD PTR [ebp+4], esi

; 808  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

	mov	DWORD PTR [ebp+8], esi

; 809  :         this->_Ptr->_Color = _Red;

	mov	WORD PTR [ebp+12], 0

; 1572 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

	mov	eax, DWORD PTR [edi]
	mov	ebx, DWORD PTR [eax+4]
	xor	eax, eax

; 1573 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1574 :         while (!_Trynode->_Isnil) {

	cmp	BYTE PTR [ebx+13], al
	jne	SHORT $LN34@emplace
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 73   : 	bool				equal		(const shared_str & rhs) const	{	return (p_ == rhs.p_);							}

	mov	edi, ecx
	mov	esi, ebx
$LL33@emplace:
	mov	eax, DWORD PTR [esi+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1575 :             _Result._Location._Parent = _Trynode;

	mov	ebx, esi
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 73   : 	bool				equal		(const shared_str & rhs) const	{	return (p_ == rhs.p_);							}

	cmp	edi, eax

; 104  : 	if (a.equal(b))		return 0;

	je	SHORT $LN35@emplace

; 65   : 	str_c				operator*	() const						{	return p_?p_->value:0;							}

	lea	ecx, DWORD PTR [eax+12]
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 183  : {	return (int)strcmp(S1,S2);  }

	mov	edx, edi
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 65   : 	str_c				operator*	() const						{	return p_?p_->value:0;							}

	neg	eax
	sbb	eax, eax
	and	eax, ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 183  : {	return (int)strcmp(S1,S2);  }

	neg	edx
	lea	ecx, DWORD PTR [edi+12]
	sbb	edx, edx
	and	edx, ecx
	npad	2
$LL105@emplace:
	mov	cl, BYTE PTR [edx]
	cmp	cl, BYTE PTR [eax]
	jne	SHORT $LN106@emplace
	test	cl, cl
	je	SHORT $LN107@emplace
	mov	cl, BYTE PTR [edx+1]
	cmp	cl, BYTE PTR [eax+1]
	jne	SHORT $LN106@emplace
	add	edx, 2
	add	eax, 2
	test	cl, cl
	jne	SHORT $LL105@emplace
$LN107@emplace:
	xor	eax, eax
	jmp	SHORT $LN108@emplace
$LN106@emplace:
	sbb	eax, eax
	or	eax, 1
$LN108@emplace:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\modelpool.h

; 22   : 		{	return xr_strcmp(x,y)<0;}

	test	eax, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1576 :             if (_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Trynode->_Myval))) {

	jns	SHORT $LN35@emplace

; 1577 :                 _Result._Location._Child = _Tree_child::_Left;
; 1578 :                 _Result._Bound           = _Trynode;
; 1579 :                 _Trynode                 = _Trynode->_Left;

	mov	esi, DWORD PTR [esi]
	mov	eax, 1

; 1580 :             } else {

	jmp	SHORT $LN36@emplace
$LN35@emplace:

; 1581 :                 _Result._Location._Child = _Tree_child::_Right;
; 1582 :                 _Trynode                 = _Trynode->_Right;

	mov	esi, DWORD PTR [esi+8]
	xor	eax, eax
$LN36@emplace:

; 1573 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1574 :         while (!_Trynode->_Isnil) {

	cmp	BYTE PTR [esi+13], 0
	je	SHORT $LL33@emplace
	mov	edi, DWORD PTR _this$1$[esp+20]
$LN34@emplace:

; 1615 :         if (max_size() == _Get_scary()->_Mysize) {

	cmp	DWORD PTR [edi+4], 178956970		; 0aaaaaaaH
	je	SHORT $LN111@emplace

; 1031 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

	push	ebp
	push	eax
	push	ebx
	mov	ecx, edi
	call	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >::_Insert_node
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\map

; 498  :         return _Mybase::emplace(_STD forward<_Valty>(_Val)...).first;

	mov	ecx, DWORD PTR ___$ReturnUdt$[esp+16]

; 499  :     }

	pop	edi
	pop	esi
	pop	ebp
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	pop	ebx
	pop	ecx
	ret	8
$LN111@emplace:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1616 :             _Throw_tree_length_error();

	call	?_Throw_tree_length_error@std@@YAXXZ	; std::_Throw_tree_length_error
$LN109@emplace:
	int	3
??$emplace@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@?$multimap@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@1@$$QAU?$pair@Vshared_str@@PAVIRender_Visual@@@1@@Z ENDP ; std::multimap<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> > >::emplace<std::pair<shared_str,IRender_Visual *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$move@AAUModelDef@CModelPool@@@std@@YA$$QAUModelDef@CModelPool@@AAU12@@Z
_TEXT	SEGMENT
??$move@AAUModelDef@CModelPool@@@std@@YA$$QAUModelDef@CModelPool@@AAU12@@Z PROC ; std::move<CModelPool::ModelDef &>, COMDAT
; __Arg$ = ecx

; 1397 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	eax, ecx

; 1398 : }

	ret	0
??$move@AAUModelDef@CModelPool@@@std@@YA$$QAUModelDef@CModelPool@@AAU12@@Z ENDP ; std::move<CModelPool::ModelDef &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??$_Find_lower_bound@PAVIRender_Visual@@@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@1@ABQAVIRender_Visual@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@PAVIRender_Visual@@@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@1@ABQAVIRender_Visual@@@Z PROC ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::_Find_lower_bound<IRender_Visual *>, COMDAT
; _this$ = ecx

; 1596 :         const auto _Scary = _Get_scary();
; 1597 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], ecx

; 1598 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1599 :         while (!_Trynode->_Isnil) {

	cmp	BYTE PTR [eax+13], 0
	jne	SHORT $LN12@Find_lower
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

	mov	ecx, DWORD PTR __Keyval$[esp-4]
	push	esi
	mov	esi, DWORD PTR [ecx]
$LL2@Find_lower:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1600 :             _Result._Location._Parent = _Trynode;

	mov	DWORD PTR [edx], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

	cmp	DWORD PTR [eax+16], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1601 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

	jae	SHORT $LN4@Find_lower

; 1602 :                 _Result._Location._Child = _Tree_child::_Right;
; 1603 :                 _Trynode                 = _Trynode->_Right;

	mov	eax, DWORD PTR [eax+8]
	xor	ecx, ecx

; 1604 :             } else {

	jmp	SHORT $LN5@Find_lower
$LN4@Find_lower:

; 1605 :                 _Result._Location._Child = _Tree_child::_Left;
; 1606 :                 _Result._Bound           = _Trynode;

	mov	DWORD PTR [edx+8], eax

; 1607 :                 _Trynode                 = _Trynode->_Left;

	mov	ecx, 1
	mov	eax, DWORD PTR [eax]
$LN5@Find_lower:

; 1598 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1599 :         while (!_Trynode->_Isnil) {

	mov	DWORD PTR [edx+4], ecx
	cmp	BYTE PTR [eax+13], 0
	je	SHORT $LL2@Find_lower

; 1608 :             }
; 1609 :         }
; 1610 : 
; 1611 :         return _Result;

	pop	esi
$LN12@Find_lower:

; 1612 :     }

	mov	eax, edx
	ret	8
??$_Find_lower_bound@PAVIRender_Visual@@@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@1@ABQAVIRender_Visual@@@Z ENDP ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::_Find_lower_bound<IRender_Visual *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??$_Lower_bound_duplicate@PAVIRender_Visual@@@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@IBE_NQAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@1@ABQAVIRender_Visual@@@Z
_TEXT	SEGMENT
__Bound$ = 8						; size = 4
__Keyval$ = 12						; size = 4
??$_Lower_bound_duplicate@PAVIRender_Visual@@@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@IBE_NQAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@1@ABQAVIRender_Visual@@@Z PROC ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::_Lower_bound_duplicate<IRender_Visual *>, COMDAT
; _this$dead$ = ecx

; 1591 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

	mov	ecx, DWORD PTR __Bound$[esp-4]
	cmp	BYTE PTR [ecx+13], 0
	jne	SHORT $LN3@Lower_boun
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

	mov	eax, DWORD PTR __Keyval$[esp-4]
	mov	eax, DWORD PTR [eax]
	cmp	eax, DWORD PTR [ecx+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1591 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

	jb	SHORT $LN3@Lower_boun
	mov	al, 1

; 1592 :     }

	ret	8
$LN3@Lower_boun:

; 1591 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

	xor	al, al

; 1592 :     }

	ret	8
??$_Lower_bound_duplicate@PAVIRender_Visual@@@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@IBE_NQAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@1@ABQAVIRender_Visual@@@Z ENDP ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::_Lower_bound_duplicate<IRender_Visual *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??$_Erase_tree@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@QAEXAAV?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@QAEXAAV?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >::_Erase_tree<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >, COMDAT
; _this$ = ecx

; 742  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

	push	ebx
	push	esi

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

	mov	esi, DWORD PTR __Rootnode$[esp+4]
	mov	ebx, ecx
	cmp	BYTE PTR [esi+13], 0
	jne	SHORT $LN3@Erase_tree
	push	ebp
	mov	ebp, DWORD PTR __Al$[esp+8]
	push	edi
	mov	edi, DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	npad	6
$LL2@Erase_tree:

; 744  :             _Erase_tree(_Al, _Rootnode->_Right);

	push	DWORD PTR [esi+8]
	mov	ecx, ebx
	push	ebp
	call	??$_Erase_tree@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@QAEXAAV?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >::_Erase_tree<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 602  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

	mov	eax, esi

; 603  :     _Val         = static_cast<_Other&&>(_New_val);

	mov	esi, DWORD PTR [esi]
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 50   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	mov	ecx, DWORD PTR [eax+20]
	test	ecx, ecx
	je	SHORT $LN468@Erase_tree
	dec	DWORD PTR [ecx]
	mov	ecx, DWORD PTR [eax+20]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN468@Erase_tree
	mov	DWORD PTR [eax+20], 0
$LN468@Erase_tree:
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	test	eax, eax
	je	SHORT $LN477@Erase_tree
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	edi
$LN477@Erase_tree:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

	cmp	BYTE PTR [esi+13], 0
	je	SHORT $LL2@Erase_tree
	pop	edi
	pop	ebp
$LN3@Erase_tree:
	pop	esi

; 745  :             _Alnode::value_type::_Freenode(_Al, _STD exchange(_Rootnode, _Rootnode->_Left));
; 746  :         }
; 747  :     }

	pop	ebx
	ret	8
??$_Erase_tree@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@QAEXAAV?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >::_Erase_tree<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??$_Freenode0@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@SAXAAV?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@PAU01@@Z
_TEXT	SEGMENT
??$_Freenode0@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@SAXAAV?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@PAU01@@Z PROC ; std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *>::_Freenode0<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >, COMDAT
; __Al$dead$ = ecx
; __Ptr$ = edx
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	test	edx, edx
	je	SHORT $LN8@Freenode0
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	edx
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN8@Freenode0:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 375  :     }

	ret	0
??$_Freenode0@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@SAXAAV?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@PAU01@@Z ENDP ; std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *>::_Freenode0<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\modelpool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??$_Find_lower_bound@Vshared_str@@@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@1@ABVshared_str@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@Vshared_str@@@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@1@ABVshared_str@@@Z PROC ; std::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >::_Find_lower_bound<shared_str>, COMDAT
; _this$ = ecx

; 1596 :         const auto _Scary = _Get_scary();
; 1597 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

	mov	eax, DWORD PTR [ecx]
	push	esi
	push	edi
	mov	edi, DWORD PTR ___$ReturnUdt$[esp+4]
	mov	esi, DWORD PTR [eax+4]
	mov	DWORD PTR [edi], esi

; 1598 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1599 :         while (!_Trynode->_Isnil) {

	cmp	BYTE PTR [esi+13], 0
	mov	DWORD PTR [edi+4], 0
	mov	DWORD PTR [edi+8], eax
	jne	SHORT $LN32@Find_lower
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 73   : 	bool				equal		(const shared_str & rhs) const	{	return (p_ == rhs.p_);							}

	mov	eax, DWORD PTR __Keyval$[esp+4]
	push	ebx
	mov	ebx, DWORD PTR [eax]
$LL2@Find_lower:
	mov	eax, DWORD PTR [esi+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1600 :             _Result._Location._Parent = _Trynode;

	mov	DWORD PTR [edi], esi
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 73   : 	bool				equal		(const shared_str & rhs) const	{	return (p_ == rhs.p_);							}

	cmp	eax, ebx

; 104  : 	if (a.equal(b))		return 0;

	je	SHORT $LN4@Find_lower

; 65   : 	str_c				operator*	() const						{	return p_?p_->value:0;							}

	mov	edx, ebx
	lea	ecx, DWORD PTR [ebx+12]
	neg	edx
	sbb	edx, edx
	and	edx, ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 183  : {	return (int)strcmp(S1,S2);  }

	lea	ecx, DWORD PTR [eax+12]
	neg	eax
	sbb	eax, eax
	and	eax, ecx
$LL28@Find_lower:
	mov	cl, BYTE PTR [eax]
	cmp	cl, BYTE PTR [edx]
	jne	SHORT $LN29@Find_lower
	test	cl, cl
	je	SHORT $LN30@Find_lower
	mov	cl, BYTE PTR [eax+1]
	cmp	cl, BYTE PTR [edx+1]
	jne	SHORT $LN29@Find_lower
	add	eax, 2
	add	edx, 2
	test	cl, cl
	jne	SHORT $LL28@Find_lower
$LN30@Find_lower:
	xor	eax, eax
	jmp	SHORT $LN31@Find_lower
$LN29@Find_lower:
	sbb	eax, eax
	or	eax, 1
$LN31@Find_lower:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\modelpool.h

; 22   : 		{	return xr_strcmp(x,y)<0;}

	test	eax, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1601 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

	jns	SHORT $LN4@Find_lower

; 1602 :                 _Result._Location._Child = _Tree_child::_Right;
; 1603 :                 _Trynode                 = _Trynode->_Right;

	mov	esi, DWORD PTR [esi+8]
	xor	eax, eax

; 1604 :             } else {

	jmp	SHORT $LN5@Find_lower
$LN4@Find_lower:

; 1605 :                 _Result._Location._Child = _Tree_child::_Left;
; 1606 :                 _Result._Bound           = _Trynode;

	mov	DWORD PTR [edi+8], esi

; 1607 :                 _Trynode                 = _Trynode->_Left;

	mov	eax, 1
	mov	esi, DWORD PTR [esi]
$LN5@Find_lower:

; 1598 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1599 :         while (!_Trynode->_Isnil) {

	mov	DWORD PTR [edi+4], eax
	cmp	BYTE PTR [esi+13], 0
	je	SHORT $LL2@Find_lower

; 1608 :             }
; 1609 :         }
; 1610 : 
; 1611 :         return _Result;

	pop	ebx
$LN32@Find_lower:

; 1612 :     }

	mov	eax, edi
	pop	edi
	pop	esi
	ret	8
??$_Find_lower_bound@Vshared_str@@@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@1@ABVshared_str@@@Z ENDP ; std::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >::_Find_lower_bound<shared_str>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\modelpool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??$_Lower_bound_duplicate@Vshared_str@@@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@IBE_NQAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@1@ABVshared_str@@@Z
_TEXT	SEGMENT
__Bound$ = 8						; size = 4
__Keyval$ = 12						; size = 4
??$_Lower_bound_duplicate@Vshared_str@@@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@IBE_NQAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@1@ABVshared_str@@@Z PROC ; std::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >::_Lower_bound_duplicate<shared_str>, COMDAT
; _this$dead$ = ecx

; 1591 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

	mov	ecx, DWORD PTR __Bound$[esp-4]
	cmp	BYTE PTR [ecx+13], 0
	jne	SHORT $LN3@Lower_boun
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 73   : 	bool				equal		(const shared_str & rhs) const	{	return (p_ == rhs.p_);							}

	mov	eax, DWORD PTR __Keyval$[esp-4]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx+16]
	cmp	edx, eax

; 104  : 	if (a.equal(b))		return 0;

	je	SHORT $LN23@Lower_boun

; 65   : 	str_c				operator*	() const						{	return p_?p_->value:0;							}

	lea	ecx, DWORD PTR [eax+12]
	neg	eax
	sbb	eax, eax
	and	eax, ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 183  : {	return (int)strcmp(S1,S2);  }

	lea	ecx, DWORD PTR [edx+12]
	neg	edx
	sbb	edx, edx
	and	edx, ecx
	npad	7
$LL24@Lower_boun:
	mov	cl, BYTE PTR [edx]
	cmp	cl, BYTE PTR [eax]
	jne	SHORT $LN25@Lower_boun
	test	cl, cl
	je	SHORT $LN26@Lower_boun
	mov	cl, BYTE PTR [edx+1]
	cmp	cl, BYTE PTR [eax+1]
	jne	SHORT $LN25@Lower_boun
	add	edx, 2
	add	eax, 2
	test	cl, cl
	jne	SHORT $LL24@Lower_boun
$LN26@Lower_boun:
	xor	eax, eax
	jmp	SHORT $LN27@Lower_boun
$LN25@Lower_boun:
	sbb	eax, eax
	or	eax, 1
$LN27@Lower_boun:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\modelpool.h

; 22   : 		{	return xr_strcmp(x,y)<0;}

	test	eax, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1591 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

	js	SHORT $LN3@Lower_boun
$LN23@Lower_boun:
	mov	al, 1

; 1592 :     }

	ret	8
$LN3@Lower_boun:

; 1591 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

	xor	al, al

; 1592 :     }

	ret	8
??$_Lower_bound_duplicate@Vshared_str@@@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@IBE_NQAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@1@ABVshared_str@@@Z ENDP ; std::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >::_Lower_bound_duplicate<shared_str>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$exchange@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@AAPAU12@@std@@YAPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@0@AAPAU10@0@Z
_TEXT	SEGMENT
??$exchange@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@AAPAU12@@std@@YAPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@0@AAPAU10@0@Z PROC ; std::exchange<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> *,std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> * &>, COMDAT
; __Val$ = ecx
; __New_val$ = edx

; 601  :     // assign _New_val to _Val, return previous _Val
; 602  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

	mov	eax, DWORD PTR [ecx]

; 603  :     _Val         = static_cast<_Other&&>(_New_val);

	mov	edx, DWORD PTR [edx]
	mov	DWORD PTR [ecx], edx

; 604  :     return _Old_val;
; 605  : }

	ret	0
??$exchange@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@AAPAU12@@std@@YAPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@0@AAPAU10@0@Z ENDP ; std::exchange<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> *,std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??$_Freenode@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@SAXAAV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@PAU01@@Z
_TEXT	SEGMENT
??$_Freenode@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@SAXAAV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@PAU01@@Z PROC ; std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *>::_Freenode<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >, COMDAT
; __Al$dead$ = ecx
; __Ptr$ = edx
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 50   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	mov	eax, DWORD PTR [edx+16]
	test	eax, eax
	je	SHORT $LN14@Freenode
	dec	DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+16]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN14@Freenode
	mov	DWORD PTR [edx+16], 0
$LN14@Freenode:
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	test	edx, edx
	je	SHORT $LN23@Freenode
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	edx
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN23@Freenode:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 382  :     }

	ret	0
??$_Freenode@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@SAXAAV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@PAU01@@Z ENDP ; std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *>::_Freenode<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??$_Freenode0@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@SAXAAV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@PAU01@@Z
_TEXT	SEGMENT
??$_Freenode0@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@SAXAAV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@PAU01@@Z PROC ; std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *>::_Freenode0<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >, COMDAT
; __Al$dead$ = ecx
; __Ptr$ = edx
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	test	edx, edx
	je	SHORT $LN8@Freenode0
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	edx
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN8@Freenode0:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 375  :     }

	ret	0
??$_Freenode0@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@SAXAAV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@PAU01@@Z ENDP ; std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *>::_Freenode0<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@ABU?$less@PAVIRender_Visual@@@std@@@std@@YAABU?$less@PAVIRender_Visual@@@0@ABU10@@Z
_TEXT	SEGMENT
??$forward@ABU?$less@PAVIRender_Visual@@@std@@@std@@YAABU?$less@PAVIRender_Visual@@@0@ABU10@@Z PROC ; std::forward<std::less<IRender_Visual *> const &>, COMDAT
; __Arg$ = ecx

; 1386 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, ecx

; 1387 : }

	ret	0
??$forward@ABU?$less@PAVIRender_Visual@@@std@@@std@@YAABU?$less@PAVIRender_Visual@@@0@ABU10@@Z ENDP ; std::forward<std::less<IRender_Visual *> const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@ABUstr_pred@CModelPool@@@std@@YAABUstr_pred@CModelPool@@ABU12@@Z
_TEXT	SEGMENT
??$forward@ABUstr_pred@CModelPool@@@std@@YAABUstr_pred@CModelPool@@ABU12@@Z PROC ; std::forward<CModelPool::str_pred const &>, COMDAT
; __Arg$ = ecx

; 1386 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, ecx

; 1387 : }

	ret	0
??$forward@ABUstr_pred@CModelPool@@@std@@YAABUstr_pred@CModelPool@@ABU12@@Z ENDP ; std::forward<CModelPool::str_pred const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@0@ABQAU10@@Z
_TEXT	SEGMENT
??$_Construct_in_place@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@0@ABQAU10@@Z PROC ; std::_Construct_in_place<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> *,std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> * const &>, COMDAT
; __Obj$ = ecx
; _<_Args_0>$ = edx

; 143  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 144  :     if (_STD is_constant_evaluated()) {
; 145  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 146  :     } else
; 147  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 148  :     {
; 149  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax

; 150  :     }
; 151  : }

	ret	0
??$_Construct_in_place@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@0@ABQAU10@@Z ENDP ; std::_Construct_in_place<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> *,std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> * const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@0@ABQAU10@@Z
_TEXT	SEGMENT
??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@0@ABQAU10@@Z PROC ; std::_Construct_in_place<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> *,std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> * const &>, COMDAT
; __Obj$ = ecx
; _<_Args_0>$ = edx

; 143  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 144  :     if (_STD is_constant_evaluated()) {
; 145  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 146  :     } else
; 147  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 148  :     {
; 149  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax

; 150  :     }
; 151  : }

	ret	0
??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@0@ABQAU10@@Z ENDP ; std::_Construct_in_place<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> *,std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> * const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAUModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@YAPAUModelDef@CModelPool@@QAU12@0PAU12@AAV?$xalloc@UModelDef@CModelPool@@@@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Al$dead$ = 12						; size = 4
??$_Uninitialized_move@PAUModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@YAPAUModelDef@CModelPool@@QAU12@0PAU12@AAV?$xalloc@UModelDef@CModelPool@@@@@Z PROC ; std::_Uninitialized_move<CModelPool::ModelDef *,xalloc<CModelPool::ModelDef> >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	eax, DWORD PTR __Dest$[esp-4]

; 1699 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

	push	ebx
	mov	ebx, edx

; 1700 :     // move [_First, _Last) to raw _Dest, using _Al
; 1701 :     // note: only called internally from elsewhere in the STL
; 1702 :     using _Ptrval     = typename _Alloc::value_type*;
; 1703 :     auto _UFirst      = _Get_unwrapped(_First);
; 1704 :     const auto _ULast = _Get_unwrapped(_Last);
; 1705 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1706 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1707 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1708 :         if (!_STD is_constant_evaluated())
; 1709 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1710 :         {
; 1711 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1712 :             return _Dest + (_ULast - _UFirst);
; 1713 :         }
; 1714 :     }
; 1715 : 
; 1716 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	cmp	ecx, ebx
	je	SHORT $LN3@Uninitiali

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	push	esi
	push	edi
	mov	edi, eax
	lea	esi, DWORD PTR [ecx+8]
	sub	edi, ecx
$LL4@Uninitiali:
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 59   : 						shared_str	(shared_str const &rhs)			{	p_ = 0;	_set(rhs);								}

	mov	DWORD PTR [eax], 0

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	ecx, DWORD PTR [esi-8]
	test	ecx, ecx
	je	SHORT $LN23@Uninitiali
	inc	DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax]

; 50   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	test	edx, edx
	je	SHORT $LN23@Uninitiali
	dec	DWORD PTR [edx]
$LN23@Uninitiali:

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [esi-4]
	mov	DWORD PTR [eax+4], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1621 :         ++_Last;

	add	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [edi+esi], ecx
	add	esi, 12					; 0000000cH

; 1700 :     // move [_First, _Last) to raw _Dest, using _Al
; 1701 :     // note: only called internally from elsewhere in the STL
; 1702 :     using _Ptrval     = typename _Alloc::value_type*;
; 1703 :     auto _UFirst      = _Get_unwrapped(_First);
; 1704 :     const auto _ULast = _Get_unwrapped(_Last);
; 1705 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1706 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1707 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1708 :         if (!_STD is_constant_evaluated())
; 1709 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1710 :         {
; 1711 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1712 :             return _Dest + (_ULast - _UFirst);
; 1713 :         }
; 1714 :     }
; 1715 : 
; 1716 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	lea	ecx, DWORD PTR [esi-8]
	cmp	ecx, ebx
	jne	SHORT $LL4@Uninitiali

; 1718 :         _Backout._Emplace_back(_STD move(*_UFirst));
; 1719 :     }
; 1720 : 
; 1721 :     return _Backout._Release();

	pop	edi
	pop	esi
$LN3@Uninitiali:

; 1722 : }

	pop	ebx
	ret	0
??$_Uninitialized_move@PAUModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@YAPAUModelDef@CModelPool@@QAU12@0PAU12@AAV?$xalloc@UModelDef@CModelPool@@@@@Z ENDP ; std::_Uninitialized_move<CModelPool::ModelDef *,xalloc<CModelPool::ModelDef> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Get_unwrapped@ABQAUModelDef@CModelPool@@@std@@YA?A_TABQAUModelDef@CModelPool@@@Z
_TEXT	SEGMENT
??$_Get_unwrapped@ABQAUModelDef@CModelPool@@@std@@YA?A_TABQAUModelDef@CModelPool@@@Z PROC ; std::_Get_unwrapped<CModelPool::ModelDef * const &>, COMDAT
; __It$ = ecx

; 1275 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1276 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1277 :         return _It + 0;

	mov	eax, DWORD PTR [ecx]

; 1278 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1279 :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 1280 :     } else {
; 1281 :         return static_cast<_Iter&&>(_It);
; 1282 :     }
; 1283 : }

	ret	0
??$_Get_unwrapped@ABQAUModelDef@CModelPool@@@std@@YA?A_TABQAUModelDef@CModelPool@@@Z ENDP ; std::_Get_unwrapped<CModelPool::ModelDef * const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAUModelDef@CModelPool@@@std@@YAXAAPAUModelDef@CModelPool@@@Z
_TEXT	SEGMENT
??$_Destroy_in_place@PAUModelDef@CModelPool@@@std@@YAXAAPAUModelDef@CModelPool@@@Z PROC ; std::_Destroy_in_place<CModelPool::ModelDef *>, COMDAT
; __Obj$dead$ = ecx

; 295  :     if constexpr (is_array_v<_Ty>) {
; 296  :         _Destroy_range(_Obj, _Obj + extent_v<_Ty>);
; 297  :     } else {
; 298  :         _Obj.~_Ty();
; 299  :     }
; 300  : }

	ret	0
??$_Destroy_in_place@PAUModelDef@CModelPool@@@std@@YAXAAPAUModelDef@CModelPool@@@Z ENDP ; std::_Destroy_in_place<CModelPool::ModelDef *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
;	COMDAT ??$xr_alloc@UModelDef@CModelPool@@@@YAPAUModelDef@CModelPool@@I@Z
_TEXT	SEGMENT
??$xr_alloc@UModelDef@CModelPool@@@@YAPAUModelDef@CModelPool@@I@Z PROC ; xr_alloc<CModelPool::ModelDef>, COMDAT
; _count$ = ecx

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	lea	eax, DWORD PTR [ecx+ecx*2]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	shl	eax, 2
	push	eax
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	ret	0
??$xr_alloc@UModelDef@CModelPool@@@@YAPAUModelDef@CModelPool@@I@Z ENDP ; xr_alloc<CModelPool::ModelDef>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??$_Freenode@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@SAXAAV?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@PAU01@@Z
_TEXT	SEGMENT
??$_Freenode@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@SAXAAV?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@PAU01@@Z PROC ; std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *>::_Freenode<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >, COMDAT
; __Al$dead$ = ecx
; __Ptr$ = edx
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 50   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	mov	eax, DWORD PTR [edx+20]
	test	eax, eax
	je	SHORT $LN14@Freenode
	dec	DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+20]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN14@Freenode
	mov	DWORD PTR [edx+20], 0
$LN14@Freenode:
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	test	edx, edx
	je	SHORT $LN23@Freenode
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	edx
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN23@Freenode:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 382  :     }

	ret	0
??$_Freenode@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@SAXAAV?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@PAU01@@Z ENDP ; std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *>::_Freenode<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
;	COMDAT ??$xr_alloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@YAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@I@Z
_TEXT	SEGMENT
??$xr_alloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@YAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@I@Z PROC ; xr_alloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> >, COMDAT
; _count$dead$ = ecx

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	24					; 00000018H
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	ret	0
??$xr_alloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@YAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@I@Z ENDP ; xr_alloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$addressof@$$CBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@YAPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@0@ABV10@@Z
_TEXT	SEGMENT
??$addressof@$$CBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@YAPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@0@ABV10@@Z PROC ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > > const >, COMDAT
; __Val$ = ecx

; 253  :     return __builtin_addressof(_Val);

	mov	eax, ecx

; 254  : }

	ret	0
??$addressof@$$CBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@YAPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@0@ABV10@@Z ENDP ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > > const >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
;	COMDAT ??$xr_alloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@YAPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@I@Z
_TEXT	SEGMENT
??$xr_alloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@YAPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@I@Z PROC ; xr_alloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> >, COMDAT
; _count$dead$ = ecx

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	24					; 00000018H
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	ret	0
??$xr_alloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@YAPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@I@Z ENDP ; xr_alloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Uninitialized_copy@PAUModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@YAPAUModelDef@CModelPool@@QAU12@0PAU12@AAV?$xalloc@UModelDef@CModelPool@@@@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Al$dead$ = 12						; size = 4
??$_Uninitialized_copy@PAUModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@YAPAUModelDef@CModelPool@@QAU12@0PAU12@AAV?$xalloc@UModelDef@CModelPool@@@@@Z PROC ; std::_Uninitialized_copy<CModelPool::ModelDef *,xalloc<CModelPool::ModelDef> >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	eax, DWORD PTR __Dest$[esp-4]

; 1637 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

	push	ebx
	mov	ebx, edx

; 1638 :     // copy [_First, _Last) to raw _Dest, using _Al
; 1639 :     // note: only called internally from elsewhere in the STL
; 1640 :     using _Ptrval = typename _Alloc::value_type*;
; 1641 : 
; 1642 :     auto _UFirst      = _Get_unwrapped(_First);
; 1643 :     const auto _ULast = _Get_unwrapped(_Last);
; 1644 : 
; 1645 :     if constexpr (conjunction_v<bool_constant<_Ptr_copy_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1646 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(*_UFirst)>>) {
; 1647 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1648 :         if (!_STD is_constant_evaluated())
; 1649 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1650 :         {
; 1651 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1652 :             _Dest += _ULast - _UFirst;
; 1653 :             return _Dest;
; 1654 :         }
; 1655 :     }
; 1656 : 
; 1657 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1658 :     for (; _UFirst != _ULast; ++_UFirst) {

	cmp	ecx, ebx
	je	SHORT $LN3@Uninitiali

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	push	esi
	push	edi
	mov	edi, eax
	lea	esi, DWORD PTR [ecx+8]
	sub	edi, ecx
$LL4@Uninitiali:
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 59   : 						shared_str	(shared_str const &rhs)			{	p_ = 0;	_set(rhs);								}

	mov	DWORD PTR [eax], 0

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	ecx, DWORD PTR [esi-8]
	test	ecx, ecx
	je	SHORT $LN23@Uninitiali
	inc	DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax]

; 50   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	test	edx, edx
	je	SHORT $LN23@Uninitiali
	dec	DWORD PTR [edx]
$LN23@Uninitiali:

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [esi-4]
	mov	DWORD PTR [eax+4], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1621 :         ++_Last;

	add	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [edi+esi], ecx
	add	esi, 12					; 0000000cH

; 1638 :     // copy [_First, _Last) to raw _Dest, using _Al
; 1639 :     // note: only called internally from elsewhere in the STL
; 1640 :     using _Ptrval = typename _Alloc::value_type*;
; 1641 : 
; 1642 :     auto _UFirst      = _Get_unwrapped(_First);
; 1643 :     const auto _ULast = _Get_unwrapped(_Last);
; 1644 : 
; 1645 :     if constexpr (conjunction_v<bool_constant<_Ptr_copy_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1646 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(*_UFirst)>>) {
; 1647 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1648 :         if (!_STD is_constant_evaluated())
; 1649 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1650 :         {
; 1651 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1652 :             _Dest += _ULast - _UFirst;
; 1653 :             return _Dest;
; 1654 :         }
; 1655 :     }
; 1656 : 
; 1657 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1658 :     for (; _UFirst != _ULast; ++_UFirst) {

	lea	ecx, DWORD PTR [esi-8]
	cmp	ecx, ebx
	jne	SHORT $LL4@Uninitiali

; 1659 :         _Backout._Emplace_back(*_UFirst);
; 1660 :     }
; 1661 : 
; 1662 :     return _Backout._Release();

	pop	edi
	pop	esi
$LN3@Uninitiali:

; 1663 : }

	pop	ebx
	ret	0
??$_Uninitialized_copy@PAUModelDef@CModelPool@@V?$xalloc@UModelDef@CModelPool@@@@@std@@YAPAUModelDef@CModelPool@@QAU12@0PAU12@AAV?$xalloc@UModelDef@CModelPool@@@@@Z ENDP ; std::_Uninitialized_copy<CModelPool::ModelDef *,xalloc<CModelPool::ModelDef> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$swap@D$0A@@std@@YAXAAD0@Z
_TEXT	SEGMENT
??$swap@D$0A@@std@@YAXAAD0@Z PROC			; std::swap<char,0>, COMDAT
; __Left$ = ecx
; __Right$ = edx

; 100  :     _Ty _Tmp = _STD move(_Left);
; 101  :     _Left    = _STD move(_Right);

	mov	al, BYTE PTR [edx]
	push	ebx
	mov	bl, BYTE PTR [ecx]
	mov	BYTE PTR [ecx], al

; 102  :     _Right   = _STD move(_Tmp);

	mov	BYTE PTR [edx], bl
	pop	ebx

; 103  : }

	ret	0
??$swap@D$0A@@std@@YAXAAD0@Z ENDP			; std::swap<char,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAEPAUModelDef@CModelPool@@XZ
_TEXT	SEGMENT
?_Release@?$_Uninitialized_backout_al@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAEPAUModelDef@CModelPool@@XZ PROC ; std::_Uninitialized_backout_al<xalloc<CModelPool::ModelDef> >::_Release, COMDAT
; _this$ = ecx

; 1625 :         _First = _Last;

	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [ecx], eax

; 1626 :         return _Last;
; 1627 :     }

	ret	0
?_Release@?$_Uninitialized_backout_al@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAEPAUModelDef@CModelPool@@XZ ENDP ; std::_Uninitialized_backout_al<xalloc<CModelPool::ModelDef> >::_Release
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Uninitialized_backout_al@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAE@XZ PROC ; std::_Uninitialized_backout_al<xalloc<CModelPool::ModelDef> >::~_Uninitialized_backout_al<xalloc<CModelPool::ModelDef> >, COMDAT
; _this$ = ecx

; 1615 :         _Destroy_range(_First, _Last, _Al);
; 1616 :     }

	ret	0
??1?$_Uninitialized_backout_al@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAE@XZ ENDP ; std::_Uninitialized_backout_al<xalloc<CModelPool::ModelDef> >::~_Uninitialized_backout_al<xalloc<CModelPool::ModelDef> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAE@PAUModelDef@CModelPool@@AAV?$xalloc@UModelDef@CModelPool@@@@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Al_$ = 12						; size = 4
??0?$_Uninitialized_backout_al@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAE@PAUModelDef@CModelPool@@AAV?$xalloc@UModelDef@CModelPool@@@@@Z PROC ; std::_Uninitialized_backout_al<xalloc<CModelPool::ModelDef> >::_Uninitialized_backout_al<xalloc<CModelPool::ModelDef> >, COMDAT
; _this$ = ecx

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	eax, DWORD PTR __Dest$[esp-4]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR __Al_$[esp-4]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, ecx
	ret	8
??0?$_Uninitialized_backout_al@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAE@PAUModelDef@CModelPool@@AAV?$xalloc@UModelDef@CModelPool@@@@@Z ENDP ; std::_Uninitialized_backout_al<xalloc<CModelPool::ModelDef> >::_Uninitialized_backout_al<xalloc<CModelPool::ModelDef> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >, COMDAT
; _this$ = ecx

; 435  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

	mov	DWORD PTR [ecx], 0
	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	ret	0
??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??R?$less@PAVIRender_Visual@@@std@@QBE_NABQAVIRender_Visual@@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??R?$less@PAVIRender_Visual@@@std@@QBE_NABQAVIRender_Visual@@0@Z PROC ; std::less<IRender_Visual *>::operator(), COMDAT
; _this$dead$ = ecx

; 117  :         return _Left < _Right;

	mov	eax, DWORD PTR __Left$[esp-4]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR __Right$[esp-4]
	cmp	ecx, DWORD PTR [eax]
	setb	al

; 118  :     }

	ret	8
??R?$less@PAVIRender_Visual@@@std@@QBE_NABQAVIRender_Visual@@0@Z ENDP ; std::less<IRender_Visual *>::operator()
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?_Getcomp@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@IBEABU?$less@PAVIRender_Visual@@@2@XZ
_TEXT	SEGMENT
?_Getcomp@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@IBEABU?$less@PAVIRender_Visual@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::_Getcomp, COMDAT
; _this$ = ecx

; 1931 :         return _Mypair._Get_first();

	mov	eax, ecx

; 1932 :     }

	ret	0
?_Getcomp@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@IBEABU?$less@PAVIRender_Visual@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::_Getcomp
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?deallocate@?$_Normal_allocator_traits@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@std@@SAXAAV?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@2@I@Z
_TEXT	SEGMENT
__Count$dead$ = 8					; size = 4
?deallocate@?$_Normal_allocator_traits@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@std@@SAXAAV?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@2@I@Z PROC ; std::_Normal_allocator_traits<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >::deallocate, COMDAT
; __Al$dead$ = ecx
; __Ptr$ = edx
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	test	edx, edx
	je	SHORT $LN6@deallocate
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	edx
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN6@deallocate:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 561  :     }

	ret	0
?deallocate@?$_Normal_allocator_traits@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@std@@SAXAAV?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@2@I@Z ENDP ; std::_Normal_allocator_traits<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ??0?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@QAE@XZ
_TEXT	SEGMENT
??0?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@QAE@XZ PROC ; xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> >::xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> >, COMDAT
; _this$ = ecx

; 76   : 													xalloc			()										{	}

	mov	eax, ecx
	ret	0
??0?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@QAE@XZ ENDP ; xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> >::xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >, COMDAT
; _this$ = ecx

; 435  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

	mov	DWORD PTR [ecx], 0
	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	ret	0
??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?_Getcomp@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@IBEABUstr_pred@CModelPool@@XZ
_TEXT	SEGMENT
?_Getcomp@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@IBEABUstr_pred@CModelPool@@XZ PROC ; std::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >::_Getcomp, COMDAT
; _this$ = ecx

; 1931 :         return _Mypair._Get_first();

	mov	eax, ecx

; 1932 :     }

	ret	0
?_Getcomp@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@IBEABUstr_pred@CModelPool@@XZ ENDP ; std::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >::_Getcomp
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?deallocate@?$_Normal_allocator_traits@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@std@@SAXAAV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@2@I@Z
_TEXT	SEGMENT
__Count$dead$ = 8					; size = 4
?deallocate@?$_Normal_allocator_traits@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@std@@SAXAAV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@2@I@Z PROC ; std::_Normal_allocator_traits<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >::deallocate, COMDAT
; __Al$dead$ = ecx
; __Ptr$ = edx
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	test	edx, edx
	je	SHORT $LN6@deallocate
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	edx
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN6@deallocate:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 561  :     }

	ret	0
?deallocate@?$_Normal_allocator_traits@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@std@@SAXAAV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@2@I@Z ENDP ; std::_Normal_allocator_traits<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ??0?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@QAE@XZ
_TEXT	SEGMENT
??0?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@QAE@XZ PROC ; xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> >::xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> >, COMDAT
; _this$ = ecx

; 76   : 													xalloc			()										{	}

	mov	eax, ecx
	ret	0
??0?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@QAE@XZ ENDP ; xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> >::xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$less@PAVIRender_Visual@@@std@@V?$_Compressed_pair@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@$00@2@$00@std@@QBEABU?$less@PAVIRender_Visual@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$less@PAVIRender_Visual@@@std@@V?$_Compressed_pair@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@$00@2@$00@std@@QBEABU?$less@PAVIRender_Visual@@@2@XZ PROC ; std::_Compressed_pair<std::less<IRender_Visual *>,std::_Compressed_pair<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >,1>,1>::_Get_first, COMDAT
; _this$ = ecx

; 1343 :         return *this;

	mov	eax, ecx

; 1344 :     }

	ret	0
?_Get_first@?$_Compressed_pair@U?$less@PAVIRender_Visual@@@std@@V?$_Compressed_pair@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@$00@2@$00@std@@QBEABU?$less@PAVIRender_Visual@@@2@XZ ENDP ; std::_Compressed_pair<std::less<IRender_Visual *>,std::_Compressed_pair<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >,1>,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ?deallocate@?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@QBEXPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@I@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
_n$dead$ = 12						; size = 4
?deallocate@?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@QBEXPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@I@Z PROC ; xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> >::deallocate, COMDAT
; _this$dead$ = ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	mov	eax, DWORD PTR _p$[esp-4]
	test	eax, eax
	je	SHORT $LN4@deallocate
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN4@deallocate:
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h

; 82   : 							void					deallocate		(pointer p, size_type n) const			{	xr_free	(p);				}

	ret	8
?deallocate@?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@QBEXPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@I@Z ENDP ; xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@Ustr_pred@CModelPool@@V?$_Compressed_pair@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@$00@std@@$00@std@@QBEABUstr_pred@CModelPool@@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@Ustr_pred@CModelPool@@V?$_Compressed_pair@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@$00@std@@$00@std@@QBEABUstr_pred@CModelPool@@XZ PROC ; std::_Compressed_pair<CModelPool::str_pred,std::_Compressed_pair<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >,1>,1>::_Get_first, COMDAT
; _this$ = ecx

; 1343 :         return *this;

	mov	eax, ecx

; 1344 :     }

	ret	0
?_Get_first@?$_Compressed_pair@Ustr_pred@CModelPool@@V?$_Compressed_pair@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@$00@std@@$00@std@@QBEABUstr_pred@CModelPool@@XZ ENDP ; std::_Compressed_pair<CModelPool::str_pred,std::_Compressed_pair<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >,1>,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ?deallocate@?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@QBEXPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@I@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
_n$dead$ = 12						; size = 4
?deallocate@?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@QBEXPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@I@Z PROC ; xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> >::deallocate, COMDAT
; _this$dead$ = ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	mov	eax, DWORD PTR _p$[esp-4]
	test	eax, eax
	je	SHORT $LN4@deallocate
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN4@deallocate:
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h

; 82   : 							void					deallocate		(pointer p, size_type n) const			{	xr_free	(p);				}

	ret	8
?deallocate@?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@QBEXPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@I@Z ENDP ; xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??$_Emplace@U?$pair@PAVIRender_Visual@@PAD@std@@@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@_N@1@$$QAU?$pair@PAVIRender_Visual@@PAD@1@@Z
_TEXT	SEGMENT
__Loc$2$ = -16						; size = 4
$T2 = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Loc$3$ = 12						; size = 4
_<_Vals_0>$ = 12					; size = 4
??$_Emplace@U?$pair@PAVIRender_Visual@@PAD@std@@@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@_N@1@$$QAU?$pair@PAVIRender_Visual@@PAD@1@@Z PROC ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::_Emplace<std::pair<IRender_Visual *,char *> >, COMDAT
; _this$ = ecx

; 999  :     pair<_Nodeptr, bool> _Emplace(_Valtys&&... _Vals) {

	sub	esp, 16					; 00000010H
	push	ebx

; 1000 :         using _In_place_key_extractor = typename _Traits::template _In_place_key_extractor<_Remove_cvref_t<_Valtys>...>;
; 1001 :         const auto _Scary             = _Get_scary();
; 1002 :         _Tree_find_result<_Nodeptr> _Loc;
; 1003 :         _Nodeptr _Inserted;
; 1004 :         if constexpr (!_Multi && _In_place_key_extractor::_Extractable) {
; 1005 :             const auto& _Keyval = _In_place_key_extractor::_Extract(_Vals...);
; 1006 :             _Loc                = _Find_lower_bound(_Keyval);

	mov	ebx, DWORD PTR _<_Vals_0>$[esp+16]
	lea	eax, DWORD PTR $T2[esp+20]
	push	ebp
	push	esi
	push	edi
	push	ebx
	push	eax
	mov	edi, ecx
	call	??$_Find_lower_bound@PAVIRender_Visual@@@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@1@ABQAVIRender_Visual@@@Z ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::_Find_lower_bound<IRender_Visual *>
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Loc$2$[esp+32], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Loc$3$[esp+28], ecx
	mov	ecx, DWORD PTR [eax+8]

; 1591 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

	cmp	BYTE PTR [ecx+13], 0
	jne	SHORT $LN2@Emplace
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

	mov	eax, DWORD PTR [ebx]
	cmp	eax, DWORD PTR [ecx+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1591 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

	jb	SHORT $LN2@Emplace
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	eax, DWORD PTR ___$ReturnUdt$[esp+28]
	mov	DWORD PTR [eax], ecx
	mov	BYTE PTR [eax+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1032 :     }

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 16					; 00000010H
	ret	8
$LN2@Emplace:

; 1615 :         if (max_size() == _Get_scary()->_Mysize) {

	cmp	DWORD PTR [edi+4], 178956970		; 0aaaaaaaH
	je	SHORT $LN78@Emplace
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1012 :             _Inserted = _Tree_temp_node<_Alnode>(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...)._Release();

	mov	ebp, DWORD PTR [edi]
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	push	24					; 00000018H
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 242  :         : first(_STD forward<_Other1>(_Right.first)), second(_STD forward<_Other2>(_Right.second)) {}

	mov	ecx, DWORD PTR [ebx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 966  :         _Ptr = _Al.allocate(1);

	mov	esi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 242  :         : first(_STD forward<_Other1>(_Right.first)), second(_STD forward<_Other2>(_Right.second)) {}

	mov	DWORD PTR [esi+16], ecx
	mov	ecx, DWORD PTR [ebx+4]
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 52   : 	void				_set		(str_c rhs) 					{	str_value* v = g_pStringContainer->dock(rhs); if (0!=v) v->dwReference++; _dec(); p_ = v;	}

	push	ecx
	mov	ecx, DWORD PTR __imp_?g_pStringContainer@@3PAVstr_container@@A

; 58   : 						shared_str	(str_c rhs) 					{	p_ = 0;	_set(rhs);								}

	mov	DWORD PTR [esi+20], 0

; 52   : 	void				_set		(str_c rhs) 					{	str_value* v = g_pStringContainer->dock(rhs); if (0!=v) v->dwReference++; _dec(); p_ = v;	}

	mov	ecx, DWORD PTR [ecx]
	call	DWORD PTR __imp_?dock@str_container@@QAEPAUstr_value@@PBD@Z
	test	eax, eax
	je	SHORT $LN35@Emplace
	inc	DWORD PTR [eax]
$LN35@Emplace:

; 50   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	mov	ecx, DWORD PTR [esi+20]
	test	ecx, ecx
	je	SHORT $LN39@Emplace
	dec	DWORD PTR [ecx]
$LN39@Emplace:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1031 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

	push	esi
	push	DWORD PTR __Loc$3$[esp+32]
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 52   : 	void				_set		(str_c rhs) 					{	str_value* v = g_pStringContainer->dock(rhs); if (0!=v) v->dwReference++; _dec(); p_ = v;	}

	mov	DWORD PTR [esi+20], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1031 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

	mov	ecx, edi
	push	DWORD PTR __Loc$2$[esp+40]

; 806  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

	mov	DWORD PTR [esi], ebp

; 807  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

	mov	DWORD PTR [esi+4], ebp

; 808  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

	mov	DWORD PTR [esi+8], ebp

; 809  :         this->_Ptr->_Color = _Red;

	mov	WORD PTR [esi+12], 0

; 1031 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

	call	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >::_Insert_node
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	ecx, DWORD PTR ___$ReturnUdt$[esp+28]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1032 :     }

	pop	edi
	pop	esi
	pop	ebp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	DWORD PTR [ecx], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1031 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

	mov	eax, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	BYTE PTR [ecx+4], 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1032 :     }

	pop	ebx
	add	esp, 16					; 00000010H
	ret	8
$LN78@Emplace:

; 1616 :             _Throw_tree_length_error();

	call	?_Throw_tree_length_error@std@@YAXXZ	; std::_Throw_tree_length_error
$LN76@Emplace:
	int	3
??$_Emplace@U?$pair@PAVIRender_Visual@@PAD@std@@@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@_N@1@$$QAU?$pair@PAVIRender_Visual@@PAD@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::_Emplace<std::pair<IRender_Visual *,char *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@std@@AB_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@1@AB_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@std@@AB_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@1@AB_N@Z PROC ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > > >,bool const &,0>, COMDAT
; _this$ = ecx

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	eax, DWORD PTR __Val1$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR __Val2$[esp-4]
	mov	al, BYTE PTR [eax]
	mov	BYTE PTR [ecx+4], al
	mov	eax, ecx
	ret	8
??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@std@@AB_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@1@AB_N@Z ENDP ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > > >,bool const &,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\modelpool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??$emplace@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@Vshared_str@@PAVIRender_Visual@@@1@@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_<_Vals_0>$ = 12					; size = 4
??$emplace@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@Vshared_str@@PAVIRender_Visual@@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >::emplace<std::pair<shared_str,IRender_Visual *> >, COMDAT
; _this$ = ecx

; 1036 :     pair<iterator, bool> emplace(_Valtys&&... _Vals) {

	push	ecx
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	edi, ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	24					; 00000018H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1036 :     pair<iterator, bool> emplace(_Valtys&&... _Vals) {

	mov	DWORD PTR _this$1$[esp+24], edi

; 1015 :             _Tree_temp_node<_Alnode> _Newnode(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...);

	mov	esi, DWORD PTR [edi]
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	edx, DWORD PTR _<_Vals_0>$[esp+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 966  :         _Ptr = _Al.allocate(1);

	mov	ebp, eax
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 59   : 						shared_str	(shared_str const &rhs)			{	p_ = 0;	_set(rhs);								}

	mov	DWORD PTR [ebp+16], 0

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	ecx, DWORD PTR [edx]
	test	ecx, ecx
	je	SHORT $LN28@emplace
	inc	DWORD PTR [ecx]
	mov	eax, DWORD PTR [ebp+16]

; 50   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	test	eax, eax
	je	SHORT $LN28@emplace
	dec	DWORD PTR [eax]
$LN28@emplace:

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	DWORD PTR [ebp+16], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 242  :         : first(_STD forward<_Other1>(_Right.first)), second(_STD forward<_Other2>(_Right.second)) {}

	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ebp+20], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 806  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

	mov	DWORD PTR [ebp], esi

; 807  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

	mov	DWORD PTR [ebp+4], esi

; 808  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

	mov	DWORD PTR [ebp+8], esi

; 809  :         this->_Ptr->_Color = _Red;

	mov	WORD PTR [ebp+12], 0

; 1572 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

	mov	eax, DWORD PTR [edi]
	mov	ebx, DWORD PTR [eax+4]
	xor	eax, eax

; 1573 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1574 :         while (!_Trynode->_Isnil) {

	cmp	BYTE PTR [ebx+13], al
	jne	SHORT $LN32@emplace
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 73   : 	bool				equal		(const shared_str & rhs) const	{	return (p_ == rhs.p_);							}

	mov	edi, ecx
	mov	esi, ebx
$LL31@emplace:
	mov	eax, DWORD PTR [esi+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1575 :             _Result._Location._Parent = _Trynode;

	mov	ebx, esi
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 73   : 	bool				equal		(const shared_str & rhs) const	{	return (p_ == rhs.p_);							}

	cmp	edi, eax

; 104  : 	if (a.equal(b))		return 0;

	je	SHORT $LN33@emplace

; 65   : 	str_c				operator*	() const						{	return p_?p_->value:0;							}

	lea	ecx, DWORD PTR [eax+12]
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 183  : {	return (int)strcmp(S1,S2);  }

	mov	edx, edi
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 65   : 	str_c				operator*	() const						{	return p_?p_->value:0;							}

	neg	eax
	sbb	eax, eax
	and	eax, ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 183  : {	return (int)strcmp(S1,S2);  }

	neg	edx
	lea	ecx, DWORD PTR [edi+12]
	sbb	edx, edx
	and	edx, ecx
	npad	2
$LL102@emplace:
	mov	cl, BYTE PTR [edx]
	cmp	cl, BYTE PTR [eax]
	jne	SHORT $LN103@emplace
	test	cl, cl
	je	SHORT $LN104@emplace
	mov	cl, BYTE PTR [edx+1]
	cmp	cl, BYTE PTR [eax+1]
	jne	SHORT $LN103@emplace
	add	edx, 2
	add	eax, 2
	test	cl, cl
	jne	SHORT $LL102@emplace
$LN104@emplace:
	xor	eax, eax
	jmp	SHORT $LN105@emplace
$LN103@emplace:
	sbb	eax, eax
	or	eax, 1
$LN105@emplace:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\modelpool.h

; 22   : 		{	return xr_strcmp(x,y)<0;}

	test	eax, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1576 :             if (_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Trynode->_Myval))) {

	jns	SHORT $LN33@emplace

; 1577 :                 _Result._Location._Child = _Tree_child::_Left;
; 1578 :                 _Result._Bound           = _Trynode;
; 1579 :                 _Trynode                 = _Trynode->_Left;

	mov	esi, DWORD PTR [esi]
	mov	eax, 1

; 1580 :             } else {

	jmp	SHORT $LN34@emplace
$LN33@emplace:

; 1581 :                 _Result._Location._Child = _Tree_child::_Right;
; 1582 :                 _Trynode                 = _Trynode->_Right;

	mov	esi, DWORD PTR [esi+8]
	xor	eax, eax
$LN34@emplace:

; 1573 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1574 :         while (!_Trynode->_Isnil) {

	cmp	BYTE PTR [esi+13], 0
	je	SHORT $LL31@emplace
	mov	edi, DWORD PTR _this$1$[esp+20]
$LN32@emplace:

; 1615 :         if (max_size() == _Get_scary()->_Mysize) {

	cmp	DWORD PTR [edi+4], 178956970		; 0aaaaaaaH
	je	SHORT $LN108@emplace

; 1031 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

	push	ebp
	push	eax
	push	ebx
	mov	ecx, edi
	call	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >::_Insert_node
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	ecx, DWORD PTR ___$ReturnUdt$[esp+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1039 :     }

	pop	edi
	pop	esi
	pop	ebp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	DWORD PTR [ecx], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1038 :         return {iterator(_Result.first, _Get_scary()), _Result.second};

	mov	eax, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	BYTE PTR [ecx+4], 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1039 :     }

	pop	ebx
	pop	ecx
	ret	8
$LN108@emplace:

; 1616 :             _Throw_tree_length_error();

	call	?_Throw_tree_length_error@std@@YAXXZ	; std::_Throw_tree_length_error
$LN106@emplace:
	int	3
??$emplace@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@Vshared_str@@PAVIRender_Visual@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >::emplace<std::pair<shared_str,IRender_Visual *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\map
;	COMDAT ??$_Kfn@QAVIRender_Visual@@Vshared_str@@@?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@SAABQAVIRender_Visual@@ABU?$pair@QAVIRender_Visual@@Vshared_str@@@1@@Z
_TEXT	SEGMENT
??$_Kfn@QAVIRender_Visual@@Vshared_str@@@?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@SAABQAVIRender_Visual@@ABU?$pair@QAVIRender_Visual@@Vshared_str@@@1@@Z PROC ; std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0>::_Kfn<IRender_Visual * const,shared_str>, COMDAT
; __Val$ = ecx

; 68   :         return _Val.first;

	mov	eax, ecx

; 69   :     }

	ret	0
??$_Kfn@QAVIRender_Visual@@Vshared_str@@@?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@SAABQAVIRender_Visual@@ABU?$pair@QAVIRender_Visual@@Vshared_str@@@1@@Z ENDP ; std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0>::_Kfn<IRender_Visual * const,shared_str>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$exchange@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@AAPAU12@@std@@YAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@0@AAPAU10@0@Z
_TEXT	SEGMENT
??$exchange@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@AAPAU12@@std@@YAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@0@AAPAU10@0@Z PROC ; std::exchange<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> *,std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> * &>, COMDAT
; __Val$ = ecx
; __New_val$ = edx

; 601  :     // assign _New_val to _Val, return previous _Val
; 602  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

	mov	eax, DWORD PTR [ecx]

; 603  :     _Val         = static_cast<_Other&&>(_New_val);

	mov	edx, DWORD PTR [edx]
	mov	DWORD PTR [ecx], edx

; 604  :     return _Old_val;
; 605  : }

	ret	0
??$exchange@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@AAPAU12@@std@@YAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@0@AAPAU10@0@Z ENDP ; std::exchange<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> *,std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@0@@Z
_TEXT	SEGMENT
??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@0@@Z PROC ; std::_Destroy_in_place<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> *>, COMDAT
; __Obj$dead$ = ecx

; 295  :     if constexpr (is_array_v<_Ty>) {
; 296  :         _Destroy_range(_Obj, _Obj + extent_v<_Ty>);
; 297  :     } else {
; 298  :         _Obj.~_Ty();
; 299  :     }
; 300  : }

	ret	0
??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@0@@Z ENDP ; std::_Destroy_in_place<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\map
;	COMDAT ??$_Kfn@$$CBVshared_str@@PAVIRender_Visual@@@?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@SAABVshared_str@@ABU?$pair@$$CBVshared_str@@PAVIRender_Visual@@@1@@Z
_TEXT	SEGMENT
??$_Kfn@$$CBVshared_str@@PAVIRender_Visual@@@?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@SAABVshared_str@@ABU?$pair@$$CBVshared_str@@PAVIRender_Visual@@@1@@Z PROC ; std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1>::_Kfn<shared_str const ,IRender_Visual *>, COMDAT
; __Val$ = ecx

; 68   :         return _Val.first;

	mov	eax, ecx

; 69   :     }

	ret	0
??$_Kfn@$$CBVshared_str@@PAVIRender_Visual@@@?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@SAABVshared_str@@ABU?$pair@$$CBVshared_str@@PAVIRender_Visual@@@1@@Z ENDP ; std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1>::_Kfn<shared_str const ,IRender_Visual *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$destroy@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@?$_Normal_allocator_traits@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@std@@SAXAAV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@PAU?$pair@$$CBVshared_str@@PAVIRender_Visual@@@1@@Z
_TEXT	SEGMENT
??$destroy@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@?$_Normal_allocator_traits@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@std@@SAXAAV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@PAU?$pair@$$CBVshared_str@@PAVIRender_Visual@@@1@@Z PROC ; std::_Normal_allocator_traits<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >::destroy<std::pair<shared_str const ,IRender_Visual *> >, COMDAT
; __Al$dead$ = ecx
; __Ptr$ = edx
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 50   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	mov	eax, DWORD PTR [edx]
	test	eax, eax
	je	SHORT $LN12@destroy
	dec	DWORD PTR [eax]
	mov	eax, DWORD PTR [edx]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN12@destroy
	mov	DWORD PTR [edx], 0
$LN12@destroy:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 588  :     }

	ret	0
??$destroy@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@?$_Normal_allocator_traits@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@std@@SAXAAV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@PAU?$pair@$$CBVshared_str@@PAVIRender_Visual@@@1@@Z ENDP ; std::_Normal_allocator_traits<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >::destroy<std::pair<shared_str const ,IRender_Visual *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@0@@Z
_TEXT	SEGMENT
??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@0@@Z PROC ; std::_Destroy_in_place<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> *>, COMDAT
; __Obj$dead$ = ecx

; 295  :     if constexpr (is_array_v<_Ty>) {
; 296  :         _Destroy_range(_Obj, _Obj + extent_v<_Ty>);
; 297  :     } else {
; 298  :         _Obj.~_Ty();
; 299  :     }
; 300  : }

	ret	0
??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@0@@Z ENDP ; std::_Destroy_in_place<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$addressof@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
??$addressof@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@0@AAPAU10@@Z PROC ; std::addressof<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> *>, COMDAT
; __Val$ = ecx

; 253  :     return __builtin_addressof(_Val);

	mov	eax, ecx

; 254  : }

	ret	0
??$addressof@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@0@AAPAU10@@Z ENDP ; std::addressof<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Voidify_iter@PAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@std@@YAPAXPAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@0@@Z
_TEXT	SEGMENT
??$_Voidify_iter@PAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@std@@YAPAXPAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@0@@Z PROC ; std::_Voidify_iter<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> * *>, COMDAT
; __It$ = ecx

; 124  :     if constexpr (is_pointer_v<_Iter>) {
; 125  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

	mov	eax, ecx

; 126  :     } else {
; 127  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 128  :     }
; 129  : }

	ret	0
??$_Voidify_iter@PAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@std@@YAPAXPAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@0@@Z ENDP ; std::_Voidify_iter<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@ABQAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@std@@YAABQAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@0@ABQAU10@@Z
_TEXT	SEGMENT
??$forward@ABQAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@std@@YAABQAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@0@ABQAU10@@Z PROC ; std::forward<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> * const &>, COMDAT
; __Arg$ = ecx

; 1386 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, ecx

; 1387 : }

	ret	0
??$forward@ABQAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@std@@YAABQAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@0@ABQAU10@@Z ENDP ; std::forward<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> * const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$addressof@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
??$addressof@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@0@AAPAU10@@Z PROC ; std::addressof<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> *>, COMDAT
; __Val$ = ecx

; 253  :     return __builtin_addressof(_Val);

	mov	eax, ecx

; 254  : }

	ret	0
??$addressof@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@0@AAPAU10@@Z ENDP ; std::addressof<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Voidify_iter@PAPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@std@@YAPAXPAPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@0@@Z
_TEXT	SEGMENT
??$_Voidify_iter@PAPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@std@@YAPAXPAPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@0@@Z PROC ; std::_Voidify_iter<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> * *>, COMDAT
; __It$ = ecx

; 124  :     if constexpr (is_pointer_v<_Iter>) {
; 125  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

	mov	eax, ecx

; 126  :     } else {
; 127  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 128  :     }
; 129  : }

	ret	0
??$_Voidify_iter@PAPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@std@@YAPAXPAPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@0@@Z ENDP ; std::_Voidify_iter<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@ABQAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@std@@YAABQAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@0@ABQAU10@@Z
_TEXT	SEGMENT
??$forward@ABQAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@std@@YAABQAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@0@ABQAU10@@Z PROC ; std::forward<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> * const &>, COMDAT
; __Arg$ = ecx

; 1386 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, ecx

; 1387 : }

	ret	0
??$forward@ABQAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@std@@YAABQAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@0@ABQAU10@@Z ENDP ; std::forward<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> * const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Emplace_back@UModelDef@CModelPool@@@?$_Uninitialized_backout_al@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAEX$$QAUModelDef@CModelPool@@@Z
_TEXT	SEGMENT
_<_Vals_0>$ = 8						; size = 4
??$_Emplace_back@UModelDef@CModelPool@@@?$_Uninitialized_backout_al@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAEX$$QAUModelDef@CModelPool@@@Z PROC ; std::_Uninitialized_backout_al<xalloc<CModelPool::ModelDef> >::_Emplace_back<CModelPool::ModelDef>, COMDAT
; _this$ = ecx

; 1619 :     _CONSTEXPR20_DYNALLOC void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

	push	esi
	mov	esi, ecx
	push	edi
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	edi, DWORD PTR _<_Vals_0>$[esp+4]
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h

; 84   : 							void					construct		(pointer p, const T& _Val)				{	::new((void*)p) value_type (_Val); }

	mov	edx, DWORD PTR [esi+4]
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 59   : 						shared_str	(shared_str const &rhs)			{	p_ = 0;	_set(rhs);								}

	mov	DWORD PTR [edx], 0

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	eax, DWORD PTR [edi]
	test	eax, eax
	je	SHORT $LN16@Emplace_ba
	inc	DWORD PTR [eax]
	mov	ecx, DWORD PTR [edx]

; 50   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	test	ecx, ecx
	je	SHORT $LN16@Emplace_ba
	dec	DWORD PTR [ecx]
$LN16@Emplace_ba:

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [edi+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [edi+8]
	mov	DWORD PTR [edx+8], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1621 :         ++_Last;

	add	DWORD PTR [esi+4], 12			; 0000000cH
	pop	edi
	pop	esi

; 1622 :     }

	ret	4
??$_Emplace_back@UModelDef@CModelPool@@@?$_Uninitialized_backout_al@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAEX$$QAUModelDef@CModelPool@@@Z ENDP ; std::_Uninitialized_backout_al<xalloc<CModelPool::ModelDef> >::_Emplace_back<CModelPool::ModelDef>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$destroy@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@?$_Normal_allocator_traits@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@std@@SAXAAV?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@PAU?$pair@QAVIRender_Visual@@Vshared_str@@@1@@Z
_TEXT	SEGMENT
??$destroy@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@?$_Normal_allocator_traits@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@std@@SAXAAV?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@PAU?$pair@QAVIRender_Visual@@Vshared_str@@@1@@Z PROC ; std::_Normal_allocator_traits<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >::destroy<std::pair<IRender_Visual * const,shared_str> >, COMDAT
; __Al$dead$ = ecx
; __Ptr$ = edx
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 50   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	mov	eax, DWORD PTR [edx+4]
	test	eax, eax
	je	SHORT $LN12@destroy
	dec	DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+4]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN12@destroy
	mov	DWORD PTR [edx+4], 0
$LN12@destroy:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 588  :     }

	ret	0
??$destroy@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@?$_Normal_allocator_traits@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@std@@SAXAAV?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@PAU?$pair@QAVIRender_Visual@@Vshared_str@@@1@@Z ENDP ; std::_Normal_allocator_traits<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >::destroy<std::pair<IRender_Visual * const,shared_str> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Emplace_back@AAUModelDef@CModelPool@@@?$_Uninitialized_backout_al@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAEXAAUModelDef@CModelPool@@@Z
_TEXT	SEGMENT
_<_Vals_0>$ = 8						; size = 4
??$_Emplace_back@AAUModelDef@CModelPool@@@?$_Uninitialized_backout_al@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAEXAAUModelDef@CModelPool@@@Z PROC ; std::_Uninitialized_backout_al<xalloc<CModelPool::ModelDef> >::_Emplace_back<CModelPool::ModelDef &>, COMDAT
; _this$ = ecx

; 1619 :     _CONSTEXPR20_DYNALLOC void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

	push	esi
	mov	esi, ecx
	push	edi
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	edi, DWORD PTR _<_Vals_0>$[esp+4]
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h

; 84   : 							void					construct		(pointer p, const T& _Val)				{	::new((void*)p) value_type (_Val); }

	mov	edx, DWORD PTR [esi+4]
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 59   : 						shared_str	(shared_str const &rhs)			{	p_ = 0;	_set(rhs);								}

	mov	DWORD PTR [edx], 0

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	eax, DWORD PTR [edi]
	test	eax, eax
	je	SHORT $LN16@Emplace_ba
	inc	DWORD PTR [eax]
	mov	ecx, DWORD PTR [edx]

; 50   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	test	ecx, ecx
	je	SHORT $LN16@Emplace_ba
	dec	DWORD PTR [ecx]
$LN16@Emplace_ba:

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [edi+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [edi+8]
	mov	DWORD PTR [edx+8], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1621 :         ++_Last;

	add	DWORD PTR [esi+4], 12			; 0000000cH
	pop	edi
	pop	esi

; 1622 :     }

	ret	4
??$_Emplace_back@AAUModelDef@CModelPool@@@?$_Uninitialized_backout_al@V?$xalloc@UModelDef@CModelPool@@@@@std@@QAEXAAUModelDef@CModelPool@@@Z ENDP ; std::_Uninitialized_backout_al<xalloc<CModelPool::ModelDef> >::_Emplace_back<CModelPool::ModelDef &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$move@AAD@std@@YA$$QADAAD@Z
_TEXT	SEGMENT
??$move@AAD@std@@YA$$QADAAD@Z PROC			; std::move<char &>, COMDAT
; __Arg$ = ecx

; 1397 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	eax, ecx

; 1398 : }

	ret	0
??$move@AAD@std@@YA$$QADAAD@Z ENDP			; std::move<char &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
;	COMDAT ??$xr_free@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@YAXAAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@Z
_TEXT	SEGMENT
??$xr_free@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@YAXAAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@Z PROC ; xr_free<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> >, COMDAT
; _P$ = ecx

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	push	esi
	mov	esi, ecx
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN2@xr_free
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	mov	DWORD PTR [esi], 0
$LN2@xr_free:
	pop	esi
	ret	0
??$xr_free@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@YAXAAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@Z ENDP ; xr_free<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
;	COMDAT ??$xr_free@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@YAXAAPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@Z
_TEXT	SEGMENT
??$xr_free@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@YAXAAPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@Z PROC ; xr_free<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> >, COMDAT
; _P$ = ecx

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	push	esi
	mov	esi, ecx
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN2@xr_free
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	mov	DWORD PTR [esi], 0
$LN2@xr_free:
	pop	esi
	ret	0
??$xr_free@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@YAXAAPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@Z ENDP ; xr_free<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
;	COMDAT ??_G?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$dead$ = 8					; size = 4
??_G?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@QAEPAXI@Z PROC ; std::pair<shared_str const ,IRender_Visual *>::`scalar deleting destructor', COMDAT
; _this$ = ecx

; 50   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	mov	eax, DWORD PTR [ecx]
	test	eax, eax
	je	SHORT $LN13@scalar
	dec	DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	cmp	DWORD PTR [eax], 0
	mov	eax, ecx
	jne	SHORT $LN10@scalar
	mov	DWORD PTR [ecx], 0
	ret	4
$LN13@scalar:
	mov	eax, ecx
$LN10@scalar:
	ret	4
??_G?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@QAEPAXI@Z ENDP ; std::pair<shared_str const ,IRender_Visual *>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
;	COMDAT ??_G?$pair@QAVIRender_Visual@@Vshared_str@@@std@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$dead$ = 8					; size = 4
??_G?$pair@QAVIRender_Visual@@Vshared_str@@@std@@QAEPAXI@Z PROC ; std::pair<IRender_Visual * const,shared_str>::`scalar deleting destructor', COMDAT
; _this$ = ecx

; 50   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	mov	eax, DWORD PTR [ecx+4]
	test	eax, eax
	je	SHORT $LN13@scalar
	dec	DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx+4]
	cmp	DWORD PTR [eax], 0
	mov	eax, ecx
	jne	SHORT $LN10@scalar
	mov	DWORD PTR [ecx+4], 0
	ret	4
$LN13@scalar:
	mov	eax, ecx
$LN10@scalar:
	ret	4
??_G?$pair@QAVIRender_Visual@@Vshared_str@@@std@@QAEPAXI@Z ENDP ; std::pair<IRender_Visual * const,shared_str>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
;	COMDAT ??1?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@QAE@XZ PROC ; std::pair<shared_str const ,IRender_Visual *>::~pair<shared_str const ,IRender_Visual *>, COMDAT
; _this$ = ecx

; 50   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	mov	eax, DWORD PTR [ecx]
	test	eax, eax
	je	SHORT $LN7@pair
	dec	DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN7@pair
	mov	DWORD PTR [ecx], 0
$LN7@pair:
	ret	0
??1?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@QAE@XZ ENDP ; std::pair<shared_str const ,IRender_Visual *>::~pair<shared_str const ,IRender_Visual *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
;	COMDAT ??1?$pair@QAVIRender_Visual@@Vshared_str@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$pair@QAVIRender_Visual@@Vshared_str@@@std@@QAE@XZ PROC ; std::pair<IRender_Visual * const,shared_str>::~pair<IRender_Visual * const,shared_str>, COMDAT
; _this$ = ecx

; 50   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	mov	eax, DWORD PTR [ecx+4]
	test	eax, eax
	je	SHORT $LN7@pair
	dec	DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx+4]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN7@pair
	mov	DWORD PTR [ecx+4], 0
$LN7@pair:
	ret	0
??1?$pair@QAVIRender_Visual@@Vshared_str@@@std@@QAE@XZ ENDP ; std::pair<IRender_Visual * const,shared_str>::~pair<IRender_Visual * const,shared_str>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??1?$_Tree_temp_node@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree_temp_node@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@std@@QAE@XZ PROC ; std::_Tree_temp_node<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >::~_Tree_temp_node<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >, COMDAT
; _this$ = ecx

; 817  :         if (this->_Ptr) {

	mov	edx, DWORD PTR [ecx+4]
	test	edx, edx
	je	SHORT $LN15@Tree_temp_
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 50   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	mov	eax, DWORD PTR [edx+20]
	test	eax, eax
	je	SHORT $LN15@Tree_temp_
	dec	DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+20]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN15@Tree_temp_
	mov	DWORD PTR [edx+20], 0
$LN15@Tree_temp_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 970  :         if (_Ptr) {

	mov	eax, DWORD PTR [ecx+4]
	test	eax, eax
	je	SHORT $LN25@Tree_temp_
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN25@Tree_temp_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 823  :     }

	ret	0
??1?$_Tree_temp_node@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@std@@QAE@XZ ENDP ; std::_Tree_temp_node<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >::~_Tree_temp_node<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Release@?$_Alloc_construct_ptr@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@std@@QAEPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Release@?$_Alloc_construct_ptr@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@std@@QAEPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@2@XZ PROC ; std::_Alloc_construct_ptr<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >::_Release, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 602  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

	mov	eax, DWORD PTR [ecx+4]

; 603  :     _Val         = static_cast<_Other&&>(_New_val);

	mov	DWORD PTR [ecx+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 962  :     }

	ret	0
?_Release@?$_Alloc_construct_ptr@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@std@@QAEPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@2@XZ ENDP ; std::_Alloc_construct_ptr<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >::_Release
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Extract@?$_In_place_key_extract_map@PAVIRender_Visual@@U?$pair@PAVIRender_Visual@@PAD@std@@@std@@SAABQAVIRender_Visual@@ABU?$pair@PAVIRender_Visual@@PAD@2@@Z
_TEXT	SEGMENT
?_Extract@?$_In_place_key_extract_map@PAVIRender_Visual@@U?$pair@PAVIRender_Visual@@PAD@std@@@std@@SAABQAVIRender_Visual@@ABU?$pair@PAVIRender_Visual@@PAD@2@@Z PROC ; std::_In_place_key_extract_map<IRender_Visual *,std::pair<IRender_Visual *,char *> >::_Extract, COMDAT
; __Val$ = ecx

; 1885 :         return _Val.first;

	mov	eax, ecx

; 1886 :     }

	ret	0
?_Extract@?$_In_place_key_extract_map@PAVIRender_Visual@@U?$pair@PAVIRender_Visual@@PAD@std@@@std@@SAABQAVIRender_Visual@@ABU?$pair@PAVIRender_Visual@@PAD@2@@Z ENDP ; std::_In_place_key_extract_map<IRender_Visual *,std::pair<IRender_Visual *,char *> >::_Extract
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Head$1$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >::_Insert_node, COMDAT
; _this$ = ecx

; 644  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

	sub	esp, 8

; 645  :         ++_Mysize;
; 646  :         const auto _Head  = _Myhead;
; 647  :         _Newnode->_Parent = _Loc._Parent;

	mov	edx, DWORD PTR __Loc$[esp+4]
	mov	eax, ecx
	push	ebp
	mov	ebp, DWORD PTR __Newnode$[esp+8]
	inc	DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR __Head$1$[esp+12], eax
	mov	DWORD PTR [ebp+4], edx

; 648  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

	cmp	edx, eax
	jne	SHORT $LN5@Insert_nod

; 649  :             _Head->_Left     = _Newnode;

	mov	DWORD PTR [eax], ebp

; 650  :             _Head->_Parent   = _Newnode;

	mov	DWORD PTR [eax+4], ebp

; 651  :             _Head->_Right    = _Newnode;

	mov	DWORD PTR [eax+8], ebp

; 710  :         return _Newnode;
; 711  :     }

	mov	eax, ebp
	mov	BYTE PTR [ebp+12], 1
	pop	ebp
	add	esp, 8
	ret	12					; 0000000cH
$LN5@Insert_nod:

; 652  :             _Newnode->_Color = _Black; // the root is black
; 653  :             return _Newnode;
; 654  :         }
; 655  : 
; 656  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 657  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

	cmp	DWORD PTR __Loc$[esp+12], 0
	jne	SHORT $LN6@Insert_nod

; 658  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 659  :             _Loc._Parent->_Right = _Newnode;

	mov	DWORD PTR [edx+8], ebp

; 660  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

	cmp	edx, DWORD PTR [eax+8]
	jne	SHORT $LN9@Insert_nod

; 661  :                 _Head->_Right = _Newnode;

	mov	DWORD PTR [eax+8], ebp

; 662  :             }
; 663  :         } else { // add to left of _Loc._Parent

	jmp	SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 664  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 665  :             _Loc._Parent->_Left = _Newnode;

	mov	DWORD PTR [edx], ebp

; 666  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

	cmp	edx, DWORD PTR [eax]
	jne	SHORT $LN9@Insert_nod

; 667  :                 _Head->_Left = _Newnode;

	mov	DWORD PTR [eax], ebp
$LN9@Insert_nod:

; 668  :             }
; 669  :         }
; 670  : 
; 671  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

	mov	eax, DWORD PTR [ebp+4]
	mov	edx, ebp
	cmp	BYTE PTR [eax+12], 0
	jne	$LN3@Insert_nod
	push	ebx
	push	esi
	mov	ebp, ecx
	push	edi
$LL2@Insert_nod:

; 672  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

	mov	ecx, DWORD PTR [edx+4]
	lea	edi, DWORD PTR [edx+4]
	mov	esi, DWORD PTR [ecx+4]
	lea	ebx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [esi]
	cmp	ecx, eax
	jne	$LN10@Insert_nod

; 673  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

	mov	eax, DWORD PTR [esi+8]

; 674  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

	cmp	BYTE PTR [eax+12], 0
	je	$LN54@Insert_nod

; 675  :                     _Pnode->_Parent->_Color          = _Black;
; 676  :                     _Parent_sibling->_Color          = _Black;
; 677  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 678  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 679  :                 } else { // parent's sibling has red and black children
; 680  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

	mov	esi, DWORD PTR [ecx+8]
	cmp	edx, esi
	jne	SHORT $LN51@Insert_nod

; 460  :         _Wherenode->_Right = _Pnode->_Left;

	mov	eax, DWORD PTR [esi]

; 681  :                         _Pnode = _Pnode->_Parent;

	mov	edx, ecx

; 460  :         _Wherenode->_Right = _Pnode->_Left;

	mov	DWORD PTR [edx+8], eax

; 461  : 
; 462  :         if (!_Pnode->_Left->_Isnil) {

	mov	eax, DWORD PTR [esi]
	cmp	BYTE PTR [eax+13], 0
	jne	SHORT $LN20@Insert_nod

; 463  :             _Pnode->_Left->_Parent = _Wherenode;

	mov	DWORD PTR [eax+4], edx
$LN20@Insert_nod:

; 464  :         }
; 465  : 
; 466  :         _Pnode->_Parent = _Wherenode->_Parent;

	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR [esi+4], eax

; 467  : 
; 468  :         if (_Wherenode == _Myhead->_Parent) {

	mov	eax, DWORD PTR [ebp]
	cmp	edx, DWORD PTR [eax+4]
	jne	SHORT $LN21@Insert_nod

; 469  :             _Myhead->_Parent = _Pnode;

	mov	DWORD PTR [eax+4], esi

; 477  :         _Wherenode->_Parent = _Pnode;

	mov	edi, ebx
	mov	DWORD PTR [esi], edx
	mov	DWORD PTR [ebx], esi
	jmp	SHORT $LN49@Insert_nod
$LN21@Insert_nod:

; 470  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

	mov	eax, DWORD PTR [ebx]
	cmp	edx, DWORD PTR [eax]
	jne	SHORT $LN23@Insert_nod

; 471  :             _Wherenode->_Parent->_Left = _Pnode;

	mov	DWORD PTR [eax], esi

; 477  :         _Wherenode->_Parent = _Pnode;

	mov	edi, ebx
	mov	DWORD PTR [esi], edx
	mov	DWORD PTR [ebx], esi
	jmp	SHORT $LN49@Insert_nod
$LN23@Insert_nod:

; 473  :             _Wherenode->_Parent->_Right = _Pnode;

	mov	DWORD PTR [eax+8], esi

; 477  :         _Wherenode->_Parent = _Pnode;

	mov	edi, ebx
	mov	DWORD PTR [esi], edx
	mov	DWORD PTR [ebx], esi
	jmp	SHORT $LN49@Insert_nod
$LN51@Insert_nod:
	mov	esi, ecx
$LN49@Insert_nod:

; 682  :                         _Lrotate(_Pnode);
; 683  :                     }
; 684  : 
; 685  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

	mov	BYTE PTR [esi+12], 1

; 686  :                     _Pnode->_Parent->_Parent->_Color = _Red;

	mov	eax, DWORD PTR [edi]
	mov	eax, DWORD PTR [eax+4]
	mov	BYTE PTR [eax+12], 0

; 687  :                     _Rrotate(_Pnode->_Parent->_Parent);

	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [eax+4]

; 481  :         _Nodeptr _Pnode   = _Wherenode->_Left;

	mov	esi, DWORD PTR [ecx]

; 482  :         _Wherenode->_Left = _Pnode->_Right;

	mov	eax, DWORD PTR [esi+8]
	mov	DWORD PTR [ecx], eax

; 483  : 
; 484  :         if (!_Pnode->_Right->_Isnil) {

	mov	eax, DWORD PTR [esi+8]
	cmp	BYTE PTR [eax+13], 0
	jne	SHORT $LN27@Insert_nod

; 485  :             _Pnode->_Right->_Parent = _Wherenode;

	mov	DWORD PTR [eax+4], ecx
$LN27@Insert_nod:

; 486  :         }
; 487  : 
; 488  :         _Pnode->_Parent = _Wherenode->_Parent;

	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [esi+4], eax

; 489  : 
; 490  :         if (_Wherenode == _Myhead->_Parent) {

	mov	eax, DWORD PTR [ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jne	SHORT $LN28@Insert_nod

; 491  :             _Myhead->_Parent = _Pnode;

	mov	DWORD PTR [eax+4], esi

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

	mov	DWORD PTR [esi+8], ecx

; 688  :                 }
; 689  :             } else { // fixup red-red in right subtree

	jmp	$LN53@Insert_nod
$LN28@Insert_nod:

; 492  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

	mov	eax, DWORD PTR [ecx+4]
	cmp	ecx, DWORD PTR [eax+8]
	jne	SHORT $LN30@Insert_nod

; 493  :             _Wherenode->_Parent->_Right = _Pnode;

	mov	DWORD PTR [eax+8], esi

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

	mov	DWORD PTR [esi+8], ecx

; 688  :                 }
; 689  :             } else { // fixup red-red in right subtree

	jmp	$LN53@Insert_nod
$LN30@Insert_nod:

; 495  :             _Wherenode->_Parent->_Left = _Pnode;

	mov	DWORD PTR [eax], esi

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

	mov	DWORD PTR [esi+8], ecx

; 688  :                 }
; 689  :             } else { // fixup red-red in right subtree

	jmp	$LN53@Insert_nod
$LN10@Insert_nod:

; 690  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
; 691  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

	cmp	BYTE PTR [eax+12], 0
	jne	SHORT $LN15@Insert_nod
$LN54@Insert_nod:

; 668  :             }
; 669  :         }
; 670  : 
; 671  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

	mov	BYTE PTR [ecx+12], 1
	mov	BYTE PTR [eax+12], 1
	mov	eax, DWORD PTR [edi]
	mov	eax, DWORD PTR [eax+4]
	mov	BYTE PTR [eax+12], 0
	mov	eax, DWORD PTR [edi]
	mov	edx, DWORD PTR [eax+4]
	jmp	$LN16@Insert_nod
$LN15@Insert_nod:

; 692  :                     _Pnode->_Parent->_Color          = _Black;
; 693  :                     _Parent_sibling->_Color          = _Black;
; 694  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 695  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 696  :                 } else { // parent's sibling has red and black children
; 697  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

	mov	eax, DWORD PTR [ecx]
	cmp	edx, eax
	jne	SHORT $LN17@Insert_nod

; 698  :                         _Pnode = _Pnode->_Parent;

	mov	edx, ecx

; 481  :         _Nodeptr _Pnode   = _Wherenode->_Left;

	mov	ecx, eax

; 482  :         _Wherenode->_Left = _Pnode->_Right;

	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx], eax

; 483  : 
; 484  :         if (!_Pnode->_Right->_Isnil) {

	mov	eax, DWORD PTR [ecx+8]
	cmp	BYTE PTR [eax+13], 0
	jne	SHORT $LN34@Insert_nod

; 485  :             _Pnode->_Right->_Parent = _Wherenode;

	mov	DWORD PTR [eax+4], edx
$LN34@Insert_nod:

; 486  :         }
; 487  : 
; 488  :         _Pnode->_Parent = _Wherenode->_Parent;

	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR [ecx+4], eax

; 489  : 
; 490  :         if (_Wherenode == _Myhead->_Parent) {

	mov	eax, DWORD PTR [ebp]
	cmp	edx, DWORD PTR [eax+4]
	jne	SHORT $LN35@Insert_nod

; 491  :             _Myhead->_Parent = _Pnode;

	mov	DWORD PTR [eax+4], ecx
	jmp	SHORT $LN38@Insert_nod
$LN35@Insert_nod:

; 492  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

	mov	eax, DWORD PTR [ebx]
	cmp	edx, DWORD PTR [eax+8]
	jne	SHORT $LN37@Insert_nod

; 493  :             _Wherenode->_Parent->_Right = _Pnode;

	mov	DWORD PTR [eax+8], ecx

; 494  :         } else {

	jmp	SHORT $LN38@Insert_nod
$LN37@Insert_nod:

; 495  :             _Wherenode->_Parent->_Left = _Pnode;

	mov	DWORD PTR [eax], ecx
$LN38@Insert_nod:

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

	mov	DWORD PTR [ecx+8], edx

; 499  :         _Wherenode->_Parent = _Pnode;

	mov	edi, ebx
	mov	DWORD PTR [ebx], ecx
$LN17@Insert_nod:

; 699  :                         _Rrotate(_Pnode);
; 700  :                     }
; 701  : 
; 702  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

	mov	BYTE PTR [ecx+12], 1

; 703  :                     _Pnode->_Parent->_Parent->_Color = _Red;

	mov	eax, DWORD PTR [edi]
	mov	eax, DWORD PTR [eax+4]
	mov	BYTE PTR [eax+12], 0

; 704  :                     _Lrotate(_Pnode->_Parent->_Parent);

	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [eax+4]

; 459  :         _Nodeptr _Pnode    = _Wherenode->_Right;

	mov	esi, DWORD PTR [ecx+8]

; 460  :         _Wherenode->_Right = _Pnode->_Left;

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [ecx+8], eax

; 461  : 
; 462  :         if (!_Pnode->_Left->_Isnil) {

	mov	eax, DWORD PTR [esi]
	cmp	BYTE PTR [eax+13], 0
	jne	SHORT $LN41@Insert_nod

; 463  :             _Pnode->_Left->_Parent = _Wherenode;

	mov	DWORD PTR [eax+4], ecx
$LN41@Insert_nod:

; 464  :         }
; 465  : 
; 466  :         _Pnode->_Parent = _Wherenode->_Parent;

	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [esi+4], eax

; 467  : 
; 468  :         if (_Wherenode == _Myhead->_Parent) {

	mov	eax, DWORD PTR [ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jne	SHORT $LN42@Insert_nod

; 469  :             _Myhead->_Parent = _Pnode;

	mov	DWORD PTR [eax+4], esi
	jmp	SHORT $LN45@Insert_nod
$LN42@Insert_nod:

; 470  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

	mov	eax, DWORD PTR [ecx+4]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN44@Insert_nod

; 471  :             _Wherenode->_Parent->_Left = _Pnode;

	mov	DWORD PTR [eax], esi

; 472  :         } else {

	jmp	SHORT $LN45@Insert_nod
$LN44@Insert_nod:

; 473  :             _Wherenode->_Parent->_Right = _Pnode;

	mov	DWORD PTR [eax+8], esi
$LN45@Insert_nod:

; 474  :         }
; 475  : 
; 476  :         _Pnode->_Left       = _Wherenode;

	mov	DWORD PTR [esi], ecx
$LN53@Insert_nod:

; 668  :             }
; 669  :         }
; 670  : 
; 671  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

	mov	DWORD PTR [ecx+4], esi
$LN16@Insert_nod:
	mov	eax, DWORD PTR [edx+4]
	cmp	BYTE PTR [eax+12], 0
	je	$LL2@Insert_nod
	mov	ebp, DWORD PTR __Newnode$[esp+20]
	pop	edi
	pop	esi
	pop	ebx
$LN3@Insert_nod:

; 705  :                 }
; 706  :             }
; 707  :         }
; 708  : 
; 709  :         _Head->_Parent->_Color = _Black; // root is always black

	mov	eax, DWORD PTR __Head$1$[esp+12]
	mov	eax, DWORD PTR [eax+4]
	mov	BYTE PTR [eax+12], 1

; 710  :         return _Newnode;
; 711  :     }

	mov	eax, ebp
	pop	ebp
	add	esp, 8
	ret	12					; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?_Check_grow_by_1@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Check_grow_by_1@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@IAEXXZ PROC ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::_Check_grow_by_1, COMDAT
; _this$ = ecx

; 1615 :         if (max_size() == _Get_scary()->_Mysize) {

	cmp	DWORD PTR [ecx+4], 178956970		; 0aaaaaaaH
	je	?_Throw_tree_length_error@std@@YAXXZ	; std::_Throw_tree_length_error

; 1616 :             _Throw_tree_length_error();
; 1617 :         }
; 1618 :     }

	ret	0
?_Check_grow_by_1@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@IAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::_Check_grow_by_1
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
;	COMDAT ??1?$_Tree_temp_node_alloc@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree_temp_node_alloc@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@std@@QAE@XZ PROC ; std::_Tree_temp_node_alloc<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >::~_Tree_temp_node_alloc<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 970  :         if (_Ptr) {

	mov	eax, DWORD PTR [ecx+4]
	test	eax, eax
	je	SHORT $LN9@Tree_temp_
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN9@Tree_temp_:
	ret	0
??1?$_Tree_temp_node_alloc@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@std@@QAE@XZ ENDP ; std::_Tree_temp_node_alloc<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >::~_Tree_temp_node_alloc<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >::~_Alloc_construct_ptr<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >, COMDAT
; _this$ = ecx

; 970  :         if (_Ptr) {

	mov	eax, DWORD PTR [ecx+4]
	test	eax, eax
	je	SHORT $LN7@Alloc_cons
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN7@Alloc_cons:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 973  :     }

	ret	0
??1?$_Alloc_construct_ptr@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >::~_Alloc_construct_ptr<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?max_size@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@QBEIXZ PROC ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::max_size, COMDAT
; _this$dead$ = ecx

; 1206 :         return (_STD min)(

	mov	eax, 178956970				; 0aaaaaaaH

; 1207 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alnode_traits::max_size(_Getal()));
; 1208 :     }

	ret	0
?max_size@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?_Getal@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@IBEABV?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@XZ
_TEXT	SEGMENT
?_Getal@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@IBEABV?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@XZ PROC ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::_Getal, COMDAT
; _this$ = ecx

; 1939 :         return _Mypair._Myval2._Get_first();

	mov	eax, ecx

; 1940 :     }

	ret	0
?_Getal@?$_Tree@V?$_Tmap_traits@PAVIRender_Visual@@Vshared_str@@U?$less@PAVIRender_Visual@@@std@@V?$xalloc@U?$pair@PAVIRender_Visual@@Vshared_str@@@std@@@@$0A@@std@@@std@@IBEABV?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@XZ ENDP ; std::_Tree<std::_Tmap_traits<IRender_Visual *,shared_str,std::less<IRender_Visual *>,xalloc<std::pair<IRender_Visual *,shared_str> >,0> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?max_size@?$_Normal_allocator_traits@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@std@@SAIABV?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@Z
_TEXT	SEGMENT
?max_size@?$_Normal_allocator_traits@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@std@@SAIABV?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@Z PROC ; std::_Normal_allocator_traits<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >::max_size, COMDAT
; __Al$dead$ = ecx

; 591  :         if constexpr (_Has_max_size<_Alloc>::value) {
; 592  :             return _Al.max_size();

	mov	eax, 178956970				; 0aaaaaaaH

; 593  :         } else {
; 594  :             return (numeric_limits<size_type>::max)() / sizeof(value_type);
; 595  :         }
; 596  :     }

	ret	0
?max_size@?$_Normal_allocator_traits@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@std@@SAIABV?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@Z ENDP ; std::_Normal_allocator_traits<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@$00@std@@QBEABV?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@$00@std@@QBEABV?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@XZ PROC ; std::_Compressed_pair<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1343 :         return *this;

	mov	eax, ecx

; 1344 :     }

	ret	0
?_Get_first@?$_Compressed_pair@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@$00@std@@QBEABV?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@XZ ENDP ; std::_Compressed_pair<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ?max_size@?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@QBEIXZ PROC ; xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> >::max_size, COMDAT
; _this$dead$ = ecx

; 86   : 							size_type				max_size		() const								{	size_type _Count = (size_type)(-1) / sizeof (T);	return (0 < _Count ? _Count : 1);	}

	mov	eax, 178956970				; 0aaaaaaaH
	ret	0
?max_size@?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@QBEIXZ ENDP ; xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$?0AAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@_N@std@@QAE@AAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@1@$$QA_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@_N@std@@QAE@AAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@1@$$QA_N@Z PROC ; std::pair<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> *,bool>::pair<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> *,bool><std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> * &,bool,0>, COMDAT
; _this$ = ecx

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	eax, DWORD PTR __Val1$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR __Val2$[esp-4]
	mov	al, BYTE PTR [eax]
	mov	BYTE PTR [ecx+4], al
	mov	eax, ecx
	ret	8
??$?0AAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@_N@std@@QAE@AAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@1@$$QA_N@Z ENDP ; std::pair<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> *,bool>::pair<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> *,bool><std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> * &,bool,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??$?0U?$pair@PAVIRender_Visual@@PAD@std@@@?$_Tree_temp_node@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@std@@QAE@AAV?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@1@$$QAU?$pair@PAVIRender_Visual@@PAD@1@@Z
_TEXT	SEGMENT
__Al_$ = 8						; size = 4
__Myhead$ = 12						; size = 4
_<_Vals_0>$ = 16					; size = 4
??$?0U?$pair@PAVIRender_Visual@@PAD@std@@@?$_Tree_temp_node@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@std@@QAE@AAV?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@1@$$QAU?$pair@PAVIRender_Visual@@PAD@1@@Z PROC ; std::_Tree_temp_node<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >::_Tree_temp_node<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > ><std::pair<IRender_Visual *,char *> >, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 958  :     _CONSTEXPR20_DYNALLOC explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

	mov	eax, DWORD PTR __Al_$[esp-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 804  :         : _Tree_temp_node_alloc<_Alnode>(_Al_) {

	push	esi
	mov	esi, ecx
	push	edi
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	push	24					; 00000018H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 958  :     _CONSTEXPR20_DYNALLOC explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

	mov	DWORD PTR [esi], eax

; 965  :         _Ptr = nullptr; // if allocate throws, prevents double-free

	mov	DWORD PTR [esi+4], 0
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 242  :         : first(_STD forward<_Other1>(_Right.first)), second(_STD forward<_Other2>(_Right.second)) {}

	mov	edx, DWORD PTR _<_Vals_0>$[esp+4]
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	mov	edi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 966  :         _Ptr = _Al.allocate(1);

	mov	DWORD PTR [esi+4], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 242  :         : first(_STD forward<_Other1>(_Right.first)), second(_STD forward<_Other2>(_Right.second)) {}

	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [edi+16], ecx
	mov	ecx, DWORD PTR [edx+4]
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 52   : 	void				_set		(str_c rhs) 					{	str_value* v = g_pStringContainer->dock(rhs); if (0!=v) v->dwReference++; _dec(); p_ = v;	}

	push	ecx
	mov	ecx, DWORD PTR __imp_?g_pStringContainer@@3PAVstr_container@@A

; 58   : 						shared_str	(str_c rhs) 					{	p_ = 0;	_set(rhs);								}

	mov	DWORD PTR [edi+20], 0

; 52   : 	void				_set		(str_c rhs) 					{	str_value* v = g_pStringContainer->dock(rhs); if (0!=v) v->dwReference++; _dec(); p_ = v;	}

	mov	ecx, DWORD PTR [ecx]
	call	DWORD PTR __imp_?dock@str_container@@QAEPAUstr_value@@PBD@Z
	test	eax, eax
	je	SHORT $LN20@pair
	inc	DWORD PTR [eax]
$LN20@pair:

; 50   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	mov	ecx, DWORD PTR [edi+20]
	test	ecx, ecx
	je	SHORT $LN24@pair
	dec	DWORD PTR [ecx]
$LN24@pair:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 806  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

	mov	ecx, DWORD PTR __Myhead$[esp+4]
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 52   : 	void				_set		(str_c rhs) 					{	str_value* v = g_pStringContainer->dock(rhs); if (0!=v) v->dwReference++; _dec(); p_ = v;	}

	mov	DWORD PTR [edi+20], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 806  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

	mov	eax, DWORD PTR [esi+4]

; 807  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);
; 808  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);
; 809  :         this->_Ptr->_Color = _Red;
; 810  :         this->_Ptr->_Isnil = false;
; 811  :     }

	pop	edi
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [eax+4], ecx
	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [eax+8], ecx
	mov	eax, DWORD PTR [esi+4]
	mov	BYTE PTR [eax+12], 0
	mov	eax, DWORD PTR [esi+4]
	mov	BYTE PTR [eax+13], 0
	mov	eax, esi
	pop	esi
	ret	12					; 0000000cH
??$?0U?$pair@PAVIRender_Visual@@PAD@std@@@?$_Tree_temp_node@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@std@@QAE@AAV?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@1@$$QAU?$pair@PAVIRender_Visual@@PAD@1@@Z ENDP ; std::_Tree_temp_node<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >::_Tree_temp_node<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > ><std::pair<IRender_Visual *,char *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$?0PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@_N@std@@QAE@$$QAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@1@$$QA_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@_N@std@@QAE@$$QAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@1@$$QA_N@Z PROC ; std::pair<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> *,bool>::pair<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> *,bool><std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> *,bool,0>, COMDAT
; _this$ = ecx

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	eax, DWORD PTR __Val1$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR __Val2$[esp-4]
	mov	al, BYTE PTR [eax]
	mov	BYTE PTR [ecx+4], al
	mov	eax, ecx
	ret	8
??$?0PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@_N@std@@QAE@$$QAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@1@$$QA_N@Z ENDP ; std::pair<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> *,bool>::pair<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> *,bool><std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> *,bool,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@0@AAV10@@Z PROC ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > > > >, COMDAT
; __Arg$ = ecx

; 1386 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, ecx

; 1387 : }

	ret	0
??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@@std@@@std@@@0@AAV10@@Z ENDP ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<IRender_Visual * const,shared_str> > > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@AB_N@std@@YAAB_NAB_N@Z
_TEXT	SEGMENT
??$forward@AB_N@std@@YAAB_NAB_N@Z PROC			; std::forward<bool const &>, COMDAT
; __Arg$ = ecx

; 1386 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, ecx

; 1387 : }

	ret	0
??$forward@AB_N@std@@YAAB_NAB_N@Z ENDP			; std::forward<bool const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\modelpool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??$_Emplace@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@_N@1@$$QAU?$pair@Vshared_str@@PAVIRender_Visual@@@1@@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_<_Vals_0>$ = 12					; size = 4
??$_Emplace@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@_N@1@$$QAU?$pair@Vshared_str@@PAVIRender_Visual@@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >::_Emplace<std::pair<shared_str,IRender_Visual *> >, COMDAT
; _this$ = ecx

; 999  :     pair<_Nodeptr, bool> _Emplace(_Valtys&&... _Vals) {

	push	ecx
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	edi, ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	24					; 00000018H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 999  :     pair<_Nodeptr, bool> _Emplace(_Valtys&&... _Vals) {

	mov	DWORD PTR _this$1$[esp+24], edi

; 1000 :         using _In_place_key_extractor = typename _Traits::template _In_place_key_extractor<_Remove_cvref_t<_Valtys>...>;
; 1001 :         const auto _Scary             = _Get_scary();
; 1002 :         _Tree_find_result<_Nodeptr> _Loc;
; 1003 :         _Nodeptr _Inserted;
; 1004 :         if constexpr (!_Multi && _In_place_key_extractor::_Extractable) {
; 1005 :             const auto& _Keyval = _In_place_key_extractor::_Extract(_Vals...);
; 1006 :             _Loc                = _Find_lower_bound(_Keyval);
; 1007 :             if (_Lower_bound_duplicate(_Loc._Bound, _Keyval)) {
; 1008 :                 return {_Loc._Bound, false};
; 1009 :             }
; 1010 : 
; 1011 :             _Check_grow_by_1();
; 1012 :             _Inserted = _Tree_temp_node<_Alnode>(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...)._Release();
; 1013 :             // nothrow hereafter
; 1014 :         } else {
; 1015 :             _Tree_temp_node<_Alnode> _Newnode(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...);

	mov	esi, DWORD PTR [edi]
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	edx, DWORD PTR _<_Vals_0>$[esp+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 966  :         _Ptr = _Al.allocate(1);

	mov	ebp, eax
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 59   : 						shared_str	(shared_str const &rhs)			{	p_ = 0;	_set(rhs);								}

	mov	DWORD PTR [ebp+16], 0

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	ecx, DWORD PTR [edx]
	test	ecx, ecx
	je	SHORT $LN26@Emplace
	inc	DWORD PTR [ecx]
	mov	eax, DWORD PTR [ebp+16]

; 50   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	test	eax, eax
	je	SHORT $LN26@Emplace
	dec	DWORD PTR [eax]
$LN26@Emplace:

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	DWORD PTR [ebp+16], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 242  :         : first(_STD forward<_Other1>(_Right.first)), second(_STD forward<_Other2>(_Right.second)) {}

	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ebp+20], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 806  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

	mov	DWORD PTR [ebp], esi

; 807  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

	mov	DWORD PTR [ebp+4], esi

; 808  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

	mov	DWORD PTR [ebp+8], esi

; 809  :         this->_Ptr->_Color = _Red;

	mov	WORD PTR [ebp+12], 0

; 1572 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

	mov	eax, DWORD PTR [edi]
	mov	ebx, DWORD PTR [eax+4]
	xor	eax, eax

; 1573 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1574 :         while (!_Trynode->_Isnil) {

	cmp	BYTE PTR [ebx+13], al
	jne	SHORT $LN30@Emplace
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 73   : 	bool				equal		(const shared_str & rhs) const	{	return (p_ == rhs.p_);							}

	mov	edi, ecx
	mov	esi, ebx
$LL29@Emplace:
	mov	eax, DWORD PTR [esi+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1575 :             _Result._Location._Parent = _Trynode;

	mov	ebx, esi
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 73   : 	bool				equal		(const shared_str & rhs) const	{	return (p_ == rhs.p_);							}

	cmp	edi, eax

; 104  : 	if (a.equal(b))		return 0;

	je	SHORT $LN31@Emplace

; 65   : 	str_c				operator*	() const						{	return p_?p_->value:0;							}

	lea	ecx, DWORD PTR [eax+12]
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 183  : {	return (int)strcmp(S1,S2);  }

	mov	edx, edi
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 65   : 	str_c				operator*	() const						{	return p_?p_->value:0;							}

	neg	eax
	sbb	eax, eax
	and	eax, ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 183  : {	return (int)strcmp(S1,S2);  }

	neg	edx
	lea	ecx, DWORD PTR [edi+12]
	sbb	edx, edx
	and	edx, ecx
	npad	2
$LL91@Emplace:
	mov	cl, BYTE PTR [edx]
	cmp	cl, BYTE PTR [eax]
	jne	SHORT $LN92@Emplace
	test	cl, cl
	je	SHORT $LN93@Emplace
	mov	cl, BYTE PTR [edx+1]
	cmp	cl, BYTE PTR [eax+1]
	jne	SHORT $LN92@Emplace
	add	edx, 2
	add	eax, 2
	test	cl, cl
	jne	SHORT $LL91@Emplace
$LN93@Emplace:
	xor	eax, eax
	jmp	SHORT $LN94@Emplace
$LN92@Emplace:
	sbb	eax, eax
	or	eax, 1
$LN94@Emplace:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\modelpool.h

; 22   : 		{	return xr_strcmp(x,y)<0;}

	test	eax, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1576 :             if (_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Trynode->_Myval))) {

	jns	SHORT $LN31@Emplace

; 1577 :                 _Result._Location._Child = _Tree_child::_Left;
; 1578 :                 _Result._Bound           = _Trynode;
; 1579 :                 _Trynode                 = _Trynode->_Left;

	mov	esi, DWORD PTR [esi]
	mov	eax, 1

; 1580 :             } else {

	jmp	SHORT $LN32@Emplace
$LN31@Emplace:

; 1581 :                 _Result._Location._Child = _Tree_child::_Right;
; 1582 :                 _Trynode                 = _Trynode->_Right;

	mov	esi, DWORD PTR [esi+8]
	xor	eax, eax
$LN32@Emplace:

; 1573 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1574 :         while (!_Trynode->_Isnil) {

	cmp	BYTE PTR [esi+13], 0
	je	SHORT $LL29@Emplace
	mov	edi, DWORD PTR _this$1$[esp+20]
$LN30@Emplace:

; 1615 :         if (max_size() == _Get_scary()->_Mysize) {

	cmp	DWORD PTR [edi+4], 178956970		; 0aaaaaaaH
	je	SHORT $LN97@Emplace

; 1031 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

	push	ebp
	push	eax
	push	ebx
	mov	ecx, edi
	call	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >::_Insert_node
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	ecx, DWORD PTR ___$ReturnUdt$[esp+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1032 :     }

	pop	edi
	pop	esi
	pop	ebp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	DWORD PTR [ecx], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1031 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

	mov	eax, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	BYTE PTR [ecx+4], 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1032 :     }

	pop	ebx
	pop	ecx
	ret	8
$LN97@Emplace:

; 1616 :             _Throw_tree_length_error();

	call	?_Throw_tree_length_error@std@@YAXXZ	; std::_Throw_tree_length_error
$LN95@Emplace:
	int	3
??$_Emplace@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@_N@1@$$QAU?$pair@Vshared_str@@PAVIRender_Visual@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >::_Emplace<std::pair<shared_str,IRender_Visual *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@AB_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@1@AB_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@AB_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@1@AB_N@Z PROC ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > > >,bool const &,0>, COMDAT
; _this$ = ecx

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	eax, DWORD PTR __Val1$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR __Val2$[esp-4]
	mov	al, BYTE PTR [eax]
	mov	BYTE PTR [ecx+4], al
	mov	eax, ecx
	ret	8
??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@AB_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@1@AB_N@Z ENDP ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > > >,bool const &,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@UModelDef@CModelPool@@@std@@YA$$QAUModelDef@CModelPool@@AAU12@@Z
_TEXT	SEGMENT
??$forward@UModelDef@CModelPool@@@std@@YA$$QAUModelDef@CModelPool@@AAU12@@Z PROC ; std::forward<CModelPool::ModelDef>, COMDAT
; __Arg$ = ecx

; 1386 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, ecx

; 1387 : }

	ret	0
??$forward@UModelDef@CModelPool@@@std@@YA$$QAUModelDef@CModelPool@@AAU12@@Z ENDP ; std::forward<CModelPool::ModelDef>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$construct@UModelDef@CModelPool@@U12@@?$_Normal_allocator_traits@V?$xalloc@UModelDef@CModelPool@@@@@std@@SAXAAV?$xalloc@UModelDef@CModelPool@@@@PAUModelDef@CModelPool@@$$QAU34@@Z
_TEXT	SEGMENT
_<_Args_0>$ = 8						; size = 4
??$construct@UModelDef@CModelPool@@U12@@?$_Normal_allocator_traits@V?$xalloc@UModelDef@CModelPool@@@@@std@@SAXAAV?$xalloc@UModelDef@CModelPool@@@@PAUModelDef@CModelPool@@$$QAU34@@Z PROC ; std::_Normal_allocator_traits<xalloc<CModelPool::ModelDef> >::construct<CModelPool::ModelDef,CModelPool::ModelDef>, COMDAT
; __Al$dead$ = ecx
; __Ptr$ = edx

; 564  :     static _CONSTEXPR20_DYNALLOC void construct(_Alloc& _Al, _Ty* _Ptr, _Types&&... _Args) {

	push	esi
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	esi, DWORD PTR _<_Args_0>$[esp]

; 59   : 						shared_str	(shared_str const &rhs)			{	p_ = 0;	_set(rhs);								}

	mov	DWORD PTR [edx], 0

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN14@construct
	inc	DWORD PTR [eax]
	mov	ecx, DWORD PTR [edx]

; 50   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	test	ecx, ecx
	je	SHORT $LN14@construct
	dec	DWORD PTR [ecx]
$LN14@construct:

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [esi+8]
	mov	DWORD PTR [edx+8], eax
	pop	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 575  :     }

	ret	0
??$construct@UModelDef@CModelPool@@U12@@?$_Normal_allocator_traits@V?$xalloc@UModelDef@CModelPool@@@@@std@@SAXAAV?$xalloc@UModelDef@CModelPool@@@@PAUModelDef@CModelPool@@$$QAU34@@Z ENDP ; std::_Normal_allocator_traits<xalloc<CModelPool::ModelDef> >::construct<CModelPool::ModelDef,CModelPool::ModelDef>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@AAUModelDef@CModelPool@@@std@@YAAAUModelDef@CModelPool@@AAU12@@Z
_TEXT	SEGMENT
??$forward@AAUModelDef@CModelPool@@@std@@YAAAUModelDef@CModelPool@@AAU12@@Z PROC ; std::forward<CModelPool::ModelDef &>, COMDAT
; __Arg$ = ecx

; 1386 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, ecx

; 1387 : }

	ret	0
??$forward@AAUModelDef@CModelPool@@@std@@YAAAUModelDef@CModelPool@@AAU12@@Z ENDP ; std::forward<CModelPool::ModelDef &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$construct@UModelDef@CModelPool@@AAU12@@?$_Normal_allocator_traits@V?$xalloc@UModelDef@CModelPool@@@@@std@@SAXAAV?$xalloc@UModelDef@CModelPool@@@@PAUModelDef@CModelPool@@AAU34@@Z
_TEXT	SEGMENT
_<_Args_0>$ = 8						; size = 4
??$construct@UModelDef@CModelPool@@AAU12@@?$_Normal_allocator_traits@V?$xalloc@UModelDef@CModelPool@@@@@std@@SAXAAV?$xalloc@UModelDef@CModelPool@@@@PAUModelDef@CModelPool@@AAU34@@Z PROC ; std::_Normal_allocator_traits<xalloc<CModelPool::ModelDef> >::construct<CModelPool::ModelDef,CModelPool::ModelDef &>, COMDAT
; __Al$dead$ = ecx
; __Ptr$ = edx

; 564  :     static _CONSTEXPR20_DYNALLOC void construct(_Alloc& _Al, _Ty* _Ptr, _Types&&... _Args) {

	push	esi
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	esi, DWORD PTR _<_Args_0>$[esp]

; 59   : 						shared_str	(shared_str const &rhs)			{	p_ = 0;	_set(rhs);								}

	mov	DWORD PTR [edx], 0

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN14@construct
	inc	DWORD PTR [eax]
	mov	ecx, DWORD PTR [edx]

; 50   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	test	ecx, ecx
	je	SHORT $LN14@construct
	dec	DWORD PTR [ecx]
$LN14@construct:

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [esi+8]
	mov	DWORD PTR [edx+8], eax
	pop	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 575  :     }

	ret	0
??$construct@UModelDef@CModelPool@@AAU12@@?$_Normal_allocator_traits@V?$xalloc@UModelDef@CModelPool@@@@@std@@SAXAAV?$xalloc@UModelDef@CModelPool@@@@PAUModelDef@CModelPool@@AAU34@@Z ENDP ; std::_Normal_allocator_traits<xalloc<CModelPool::ModelDef> >::construct<CModelPool::ModelDef,CModelPool::ModelDef &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$exchange@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@$$T@std@@YAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@0@AAPAU10@$$QA$$T@Z
_TEXT	SEGMENT
??$exchange@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@$$T@std@@YAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@0@AAPAU10@$$QA$$T@Z PROC ; std::exchange<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> *,std::nullptr_t>, COMDAT
; __Val$ = ecx
; __New_val$ = edx

; 601  :     // assign _New_val to _Val, return previous _Val
; 602  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

	mov	eax, DWORD PTR [ecx]

; 603  :     _Val         = static_cast<_Other&&>(_New_val);

	mov	edx, DWORD PTR [edx]
	mov	DWORD PTR [ecx], edx

; 604  :     return _Old_val;
; 605  : }

	ret	0
??$exchange@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@$$T@std@@YAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@0@AAPAU10@$$QA$$T@Z ENDP ; std::exchange<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> *,std::nullptr_t>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??1?$_Tree_temp_node@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree_temp_node@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@std@@QAE@XZ PROC ; std::_Tree_temp_node<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >::~_Tree_temp_node<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >, COMDAT
; _this$ = ecx

; 817  :         if (this->_Ptr) {

	mov	edx, DWORD PTR [ecx+4]
	test	edx, edx
	je	SHORT $LN15@Tree_temp_
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 50   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	mov	eax, DWORD PTR [edx+16]
	test	eax, eax
	je	SHORT $LN15@Tree_temp_
	dec	DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+16]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN15@Tree_temp_
	mov	DWORD PTR [edx+16], 0
$LN15@Tree_temp_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 970  :         if (_Ptr) {

	mov	eax, DWORD PTR [ecx+4]
	test	eax, eax
	je	SHORT $LN25@Tree_temp_
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN25@Tree_temp_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 823  :     }

	ret	0
??1?$_Tree_temp_node@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@std@@QAE@XZ ENDP ; std::_Tree_temp_node<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >::~_Tree_temp_node<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Release@?$_Alloc_construct_ptr@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Release@?$_Alloc_construct_ptr@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@2@XZ PROC ; std::_Alloc_construct_ptr<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >::_Release, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 602  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

	mov	eax, DWORD PTR [ecx+4]

; 603  :     _Val         = static_cast<_Other&&>(_New_val);

	mov	DWORD PTR [ecx+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 962  :     }

	ret	0
?_Release@?$_Alloc_construct_ptr@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@2@XZ ENDP ; std::_Alloc_construct_ptr<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >::_Release
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??0?$_Tree_temp_node_alloc@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@std@@QAE@AAV?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@Z
_TEXT	SEGMENT
__Al_$ = 8						; size = 4
??0?$_Tree_temp_node_alloc@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@std@@QAE@AAV?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@Z PROC ; std::_Tree_temp_node_alloc<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >::_Tree_temp_node_alloc<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 958  :     _CONSTEXPR20_DYNALLOC explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

	mov	eax, DWORD PTR __Al_$[esp-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 783  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

	push	esi
	mov	esi, ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	push	24					; 00000018H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 958  :     _CONSTEXPR20_DYNALLOC explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

	mov	DWORD PTR [esi], eax

; 965  :         _Ptr = nullptr; // if allocate throws, prevents double-free

	mov	DWORD PTR [esi+4], 0
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 966  :         _Ptr = _Al.allocate(1);

	mov	DWORD PTR [esi+4], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 785  :     }

	mov	eax, esi
	pop	esi
	ret	4
??0?$_Tree_temp_node_alloc@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@std@@QAE@AAV?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@Z ENDP ; std::_Tree_temp_node_alloc<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >::_Tree_temp_node_alloc<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Head$1$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >::_Insert_node, COMDAT
; _this$ = ecx

; 644  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

	sub	esp, 8

; 645  :         ++_Mysize;
; 646  :         const auto _Head  = _Myhead;
; 647  :         _Newnode->_Parent = _Loc._Parent;

	mov	edx, DWORD PTR __Loc$[esp+4]
	mov	eax, ecx
	push	ebp
	mov	ebp, DWORD PTR __Newnode$[esp+8]
	inc	DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR __Head$1$[esp+12], eax
	mov	DWORD PTR [ebp+4], edx

; 648  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

	cmp	edx, eax
	jne	SHORT $LN5@Insert_nod

; 649  :             _Head->_Left     = _Newnode;

	mov	DWORD PTR [eax], ebp

; 650  :             _Head->_Parent   = _Newnode;

	mov	DWORD PTR [eax+4], ebp

; 651  :             _Head->_Right    = _Newnode;

	mov	DWORD PTR [eax+8], ebp

; 710  :         return _Newnode;
; 711  :     }

	mov	eax, ebp
	mov	BYTE PTR [ebp+12], 1
	pop	ebp
	add	esp, 8
	ret	12					; 0000000cH
$LN5@Insert_nod:

; 652  :             _Newnode->_Color = _Black; // the root is black
; 653  :             return _Newnode;
; 654  :         }
; 655  : 
; 656  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 657  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

	cmp	DWORD PTR __Loc$[esp+12], 0
	jne	SHORT $LN6@Insert_nod

; 658  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 659  :             _Loc._Parent->_Right = _Newnode;

	mov	DWORD PTR [edx+8], ebp

; 660  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

	cmp	edx, DWORD PTR [eax+8]
	jne	SHORT $LN9@Insert_nod

; 661  :                 _Head->_Right = _Newnode;

	mov	DWORD PTR [eax+8], ebp

; 662  :             }
; 663  :         } else { // add to left of _Loc._Parent

	jmp	SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 664  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 665  :             _Loc._Parent->_Left = _Newnode;

	mov	DWORD PTR [edx], ebp

; 666  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

	cmp	edx, DWORD PTR [eax]
	jne	SHORT $LN9@Insert_nod

; 667  :                 _Head->_Left = _Newnode;

	mov	DWORD PTR [eax], ebp
$LN9@Insert_nod:

; 668  :             }
; 669  :         }
; 670  : 
; 671  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

	mov	eax, DWORD PTR [ebp+4]
	mov	edx, ebp
	cmp	BYTE PTR [eax+12], 0
	jne	$LN3@Insert_nod
	push	ebx
	push	esi
	mov	ebp, ecx
	push	edi
$LL2@Insert_nod:

; 672  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

	mov	ecx, DWORD PTR [edx+4]
	lea	edi, DWORD PTR [edx+4]
	mov	esi, DWORD PTR [ecx+4]
	lea	ebx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [esi]
	cmp	ecx, eax
	jne	$LN10@Insert_nod

; 673  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

	mov	eax, DWORD PTR [esi+8]

; 674  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

	cmp	BYTE PTR [eax+12], 0
	je	$LN54@Insert_nod

; 675  :                     _Pnode->_Parent->_Color          = _Black;
; 676  :                     _Parent_sibling->_Color          = _Black;
; 677  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 678  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 679  :                 } else { // parent's sibling has red and black children
; 680  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

	mov	esi, DWORD PTR [ecx+8]
	cmp	edx, esi
	jne	SHORT $LN51@Insert_nod

; 460  :         _Wherenode->_Right = _Pnode->_Left;

	mov	eax, DWORD PTR [esi]

; 681  :                         _Pnode = _Pnode->_Parent;

	mov	edx, ecx

; 460  :         _Wherenode->_Right = _Pnode->_Left;

	mov	DWORD PTR [edx+8], eax

; 461  : 
; 462  :         if (!_Pnode->_Left->_Isnil) {

	mov	eax, DWORD PTR [esi]
	cmp	BYTE PTR [eax+13], 0
	jne	SHORT $LN20@Insert_nod

; 463  :             _Pnode->_Left->_Parent = _Wherenode;

	mov	DWORD PTR [eax+4], edx
$LN20@Insert_nod:

; 464  :         }
; 465  : 
; 466  :         _Pnode->_Parent = _Wherenode->_Parent;

	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR [esi+4], eax

; 467  : 
; 468  :         if (_Wherenode == _Myhead->_Parent) {

	mov	eax, DWORD PTR [ebp]
	cmp	edx, DWORD PTR [eax+4]
	jne	SHORT $LN21@Insert_nod

; 469  :             _Myhead->_Parent = _Pnode;

	mov	DWORD PTR [eax+4], esi

; 477  :         _Wherenode->_Parent = _Pnode;

	mov	edi, ebx
	mov	DWORD PTR [esi], edx
	mov	DWORD PTR [ebx], esi
	jmp	SHORT $LN49@Insert_nod
$LN21@Insert_nod:

; 470  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

	mov	eax, DWORD PTR [ebx]
	cmp	edx, DWORD PTR [eax]
	jne	SHORT $LN23@Insert_nod

; 471  :             _Wherenode->_Parent->_Left = _Pnode;

	mov	DWORD PTR [eax], esi

; 477  :         _Wherenode->_Parent = _Pnode;

	mov	edi, ebx
	mov	DWORD PTR [esi], edx
	mov	DWORD PTR [ebx], esi
	jmp	SHORT $LN49@Insert_nod
$LN23@Insert_nod:

; 473  :             _Wherenode->_Parent->_Right = _Pnode;

	mov	DWORD PTR [eax+8], esi

; 477  :         _Wherenode->_Parent = _Pnode;

	mov	edi, ebx
	mov	DWORD PTR [esi], edx
	mov	DWORD PTR [ebx], esi
	jmp	SHORT $LN49@Insert_nod
$LN51@Insert_nod:
	mov	esi, ecx
$LN49@Insert_nod:

; 682  :                         _Lrotate(_Pnode);
; 683  :                     }
; 684  : 
; 685  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

	mov	BYTE PTR [esi+12], 1

; 686  :                     _Pnode->_Parent->_Parent->_Color = _Red;

	mov	eax, DWORD PTR [edi]
	mov	eax, DWORD PTR [eax+4]
	mov	BYTE PTR [eax+12], 0

; 687  :                     _Rrotate(_Pnode->_Parent->_Parent);

	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [eax+4]

; 481  :         _Nodeptr _Pnode   = _Wherenode->_Left;

	mov	esi, DWORD PTR [ecx]

; 482  :         _Wherenode->_Left = _Pnode->_Right;

	mov	eax, DWORD PTR [esi+8]
	mov	DWORD PTR [ecx], eax

; 483  : 
; 484  :         if (!_Pnode->_Right->_Isnil) {

	mov	eax, DWORD PTR [esi+8]
	cmp	BYTE PTR [eax+13], 0
	jne	SHORT $LN27@Insert_nod

; 485  :             _Pnode->_Right->_Parent = _Wherenode;

	mov	DWORD PTR [eax+4], ecx
$LN27@Insert_nod:

; 486  :         }
; 487  : 
; 488  :         _Pnode->_Parent = _Wherenode->_Parent;

	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [esi+4], eax

; 489  : 
; 490  :         if (_Wherenode == _Myhead->_Parent) {

	mov	eax, DWORD PTR [ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jne	SHORT $LN28@Insert_nod

; 491  :             _Myhead->_Parent = _Pnode;

	mov	DWORD PTR [eax+4], esi

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

	mov	DWORD PTR [esi+8], ecx

; 688  :                 }
; 689  :             } else { // fixup red-red in right subtree

	jmp	$LN53@Insert_nod
$LN28@Insert_nod:

; 492  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

	mov	eax, DWORD PTR [ecx+4]
	cmp	ecx, DWORD PTR [eax+8]
	jne	SHORT $LN30@Insert_nod

; 493  :             _Wherenode->_Parent->_Right = _Pnode;

	mov	DWORD PTR [eax+8], esi

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

	mov	DWORD PTR [esi+8], ecx

; 688  :                 }
; 689  :             } else { // fixup red-red in right subtree

	jmp	$LN53@Insert_nod
$LN30@Insert_nod:

; 495  :             _Wherenode->_Parent->_Left = _Pnode;

	mov	DWORD PTR [eax], esi

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

	mov	DWORD PTR [esi+8], ecx

; 688  :                 }
; 689  :             } else { // fixup red-red in right subtree

	jmp	$LN53@Insert_nod
$LN10@Insert_nod:

; 690  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
; 691  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

	cmp	BYTE PTR [eax+12], 0
	jne	SHORT $LN15@Insert_nod
$LN54@Insert_nod:

; 668  :             }
; 669  :         }
; 670  : 
; 671  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

	mov	BYTE PTR [ecx+12], 1
	mov	BYTE PTR [eax+12], 1
	mov	eax, DWORD PTR [edi]
	mov	eax, DWORD PTR [eax+4]
	mov	BYTE PTR [eax+12], 0
	mov	eax, DWORD PTR [edi]
	mov	edx, DWORD PTR [eax+4]
	jmp	$LN16@Insert_nod
$LN15@Insert_nod:

; 692  :                     _Pnode->_Parent->_Color          = _Black;
; 693  :                     _Parent_sibling->_Color          = _Black;
; 694  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 695  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 696  :                 } else { // parent's sibling has red and black children
; 697  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

	mov	eax, DWORD PTR [ecx]
	cmp	edx, eax
	jne	SHORT $LN17@Insert_nod

; 698  :                         _Pnode = _Pnode->_Parent;

	mov	edx, ecx

; 481  :         _Nodeptr _Pnode   = _Wherenode->_Left;

	mov	ecx, eax

; 482  :         _Wherenode->_Left = _Pnode->_Right;

	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx], eax

; 483  : 
; 484  :         if (!_Pnode->_Right->_Isnil) {

	mov	eax, DWORD PTR [ecx+8]
	cmp	BYTE PTR [eax+13], 0
	jne	SHORT $LN34@Insert_nod

; 485  :             _Pnode->_Right->_Parent = _Wherenode;

	mov	DWORD PTR [eax+4], edx
$LN34@Insert_nod:

; 486  :         }
; 487  : 
; 488  :         _Pnode->_Parent = _Wherenode->_Parent;

	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR [ecx+4], eax

; 489  : 
; 490  :         if (_Wherenode == _Myhead->_Parent) {

	mov	eax, DWORD PTR [ebp]
	cmp	edx, DWORD PTR [eax+4]
	jne	SHORT $LN35@Insert_nod

; 491  :             _Myhead->_Parent = _Pnode;

	mov	DWORD PTR [eax+4], ecx
	jmp	SHORT $LN38@Insert_nod
$LN35@Insert_nod:

; 492  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

	mov	eax, DWORD PTR [ebx]
	cmp	edx, DWORD PTR [eax+8]
	jne	SHORT $LN37@Insert_nod

; 493  :             _Wherenode->_Parent->_Right = _Pnode;

	mov	DWORD PTR [eax+8], ecx

; 494  :         } else {

	jmp	SHORT $LN38@Insert_nod
$LN37@Insert_nod:

; 495  :             _Wherenode->_Parent->_Left = _Pnode;

	mov	DWORD PTR [eax], ecx
$LN38@Insert_nod:

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

	mov	DWORD PTR [ecx+8], edx

; 499  :         _Wherenode->_Parent = _Pnode;

	mov	edi, ebx
	mov	DWORD PTR [ebx], ecx
$LN17@Insert_nod:

; 699  :                         _Rrotate(_Pnode);
; 700  :                     }
; 701  : 
; 702  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

	mov	BYTE PTR [ecx+12], 1

; 703  :                     _Pnode->_Parent->_Parent->_Color = _Red;

	mov	eax, DWORD PTR [edi]
	mov	eax, DWORD PTR [eax+4]
	mov	BYTE PTR [eax+12], 0

; 704  :                     _Lrotate(_Pnode->_Parent->_Parent);

	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [eax+4]

; 459  :         _Nodeptr _Pnode    = _Wherenode->_Right;

	mov	esi, DWORD PTR [ecx+8]

; 460  :         _Wherenode->_Right = _Pnode->_Left;

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [ecx+8], eax

; 461  : 
; 462  :         if (!_Pnode->_Left->_Isnil) {

	mov	eax, DWORD PTR [esi]
	cmp	BYTE PTR [eax+13], 0
	jne	SHORT $LN41@Insert_nod

; 463  :             _Pnode->_Left->_Parent = _Wherenode;

	mov	DWORD PTR [eax+4], ecx
$LN41@Insert_nod:

; 464  :         }
; 465  : 
; 466  :         _Pnode->_Parent = _Wherenode->_Parent;

	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [esi+4], eax

; 467  : 
; 468  :         if (_Wherenode == _Myhead->_Parent) {

	mov	eax, DWORD PTR [ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jne	SHORT $LN42@Insert_nod

; 469  :             _Myhead->_Parent = _Pnode;

	mov	DWORD PTR [eax+4], esi
	jmp	SHORT $LN45@Insert_nod
$LN42@Insert_nod:

; 470  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

	mov	eax, DWORD PTR [ecx+4]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN44@Insert_nod

; 471  :             _Wherenode->_Parent->_Left = _Pnode;

	mov	DWORD PTR [eax], esi

; 472  :         } else {

	jmp	SHORT $LN45@Insert_nod
$LN44@Insert_nod:

; 473  :             _Wherenode->_Parent->_Right = _Pnode;

	mov	DWORD PTR [eax+8], esi
$LN45@Insert_nod:

; 474  :         }
; 475  : 
; 476  :         _Pnode->_Left       = _Wherenode;

	mov	DWORD PTR [esi], ecx
$LN53@Insert_nod:

; 668  :             }
; 669  :         }
; 670  : 
; 671  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

	mov	DWORD PTR [ecx+4], esi
$LN16@Insert_nod:
	mov	eax, DWORD PTR [edx+4]
	cmp	BYTE PTR [eax+12], 0
	je	$LL2@Insert_nod
	mov	ebp, DWORD PTR __Newnode$[esp+20]
	pop	edi
	pop	esi
	pop	ebx
$LN3@Insert_nod:

; 705  :                 }
; 706  :             }
; 707  :         }
; 708  : 
; 709  :         _Head->_Parent->_Color = _Black; // root is always black

	mov	eax, DWORD PTR __Head$1$[esp+12]
	mov	eax, DWORD PTR [eax+4]
	mov	BYTE PTR [eax+12], 1

; 710  :         return _Newnode;
; 711  :     }

	mov	eax, ebp
	pop	ebp
	add	esp, 8
	ret	12					; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?_Check_grow_by_1@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Check_grow_by_1@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@IAEXXZ PROC ; std::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >::_Check_grow_by_1, COMDAT
; _this$ = ecx

; 1615 :         if (max_size() == _Get_scary()->_Mysize) {

	cmp	DWORD PTR [ecx+4], 178956970		; 0aaaaaaaH
	je	?_Throw_tree_length_error@std@@YAXXZ	; std::_Throw_tree_length_error

; 1616 :             _Throw_tree_length_error();
; 1617 :         }
; 1618 :     }

	ret	0
?_Check_grow_by_1@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@IAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >::_Check_grow_by_1
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
;	COMDAT ??1?$_Tree_temp_node_alloc@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree_temp_node_alloc@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@std@@QAE@XZ PROC ; std::_Tree_temp_node_alloc<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >::~_Tree_temp_node_alloc<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 970  :         if (_Ptr) {

	mov	eax, DWORD PTR [ecx+4]
	test	eax, eax
	je	SHORT $LN9@Tree_temp_
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN9@Tree_temp_:
	ret	0
??1?$_Tree_temp_node_alloc@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@std@@QAE@XZ ENDP ; std::_Tree_temp_node_alloc<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >::~_Tree_temp_node_alloc<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >::~_Alloc_construct_ptr<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >, COMDAT
; _this$ = ecx

; 970  :         if (_Ptr) {

	mov	eax, DWORD PTR [ecx+4]
	test	eax, eax
	je	SHORT $LN7@Alloc_cons
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN7@Alloc_cons:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 973  :     }

	ret	0
??1?$_Alloc_construct_ptr@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >::~_Alloc_construct_ptr<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Allocate@?$_Alloc_construct_ptr@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Allocate@?$_Alloc_construct_ptr@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@std@@QAEXXZ PROC ; std::_Alloc_construct_ptr<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >::_Allocate, COMDAT
; _this$ = ecx

; 964  :     _CONSTEXPR20_DYNALLOC void _Allocate() { // disengage *this, then allocate a new memory block

	push	esi
	mov	esi, ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	push	24					; 00000018H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 965  :         _Ptr = nullptr; // if allocate throws, prevents double-free

	mov	DWORD PTR [esi+4], 0
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 966  :         _Ptr = _Al.allocate(1);

	mov	DWORD PTR [esi+4], eax
	pop	esi

; 967  :     }

	ret	0
?_Allocate@?$_Alloc_construct_ptr@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@std@@QAEXXZ ENDP ; std::_Alloc_construct_ptr<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >::_Allocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??0?$_Alloc_construct_ptr@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@std@@QAE@AAV?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@Z
_TEXT	SEGMENT
__Al_$ = 8						; size = 4
??0?$_Alloc_construct_ptr@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@std@@QAE@AAV?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@Z PROC ; std::_Alloc_construct_ptr<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >::_Alloc_construct_ptr<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >, COMDAT
; _this$ = ecx

; 958  :     _CONSTEXPR20_DYNALLOC explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

	mov	eax, DWORD PTR __Al_$[esp-4]
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	ret	4
??0?$_Alloc_construct_ptr@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@std@@QAE@AAV?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@Z ENDP ; std::_Alloc_construct_ptr<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >::_Alloc_construct_ptr<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?max_size@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@QBEIXZ PROC ; std::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >::max_size, COMDAT
; _this$dead$ = ecx

; 1206 :         return (_STD min)(

	mov	eax, 178956970				; 0aaaaaaaH

; 1207 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alnode_traits::max_size(_Getal()));
; 1208 :     }

	ret	0
?max_size@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?_Getal@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@IBEABV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@XZ
_TEXT	SEGMENT
?_Getal@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@IBEABV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@XZ PROC ; std::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >::_Getal, COMDAT
; _this$ = ecx

; 1939 :         return _Mypair._Myval2._Get_first();

	mov	eax, ecx

; 1940 :     }

	ret	0
?_Getal@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@IBEABV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@XZ ENDP ; std::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?max_size@?$_Normal_allocator_traits@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@std@@SAIABV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@Z
_TEXT	SEGMENT
?max_size@?$_Normal_allocator_traits@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@std@@SAIABV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@Z PROC ; std::_Normal_allocator_traits<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >::max_size, COMDAT
; __Al$dead$ = ecx

; 591  :         if constexpr (_Has_max_size<_Alloc>::value) {
; 592  :             return _Al.max_size();

	mov	eax, 178956970				; 0aaaaaaaH

; 593  :         } else {
; 594  :             return (numeric_limits<size_type>::max)() / sizeof(value_type);
; 595  :         }
; 596  :     }

	ret	0
?max_size@?$_Normal_allocator_traits@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@std@@SAIABV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@Z ENDP ; std::_Normal_allocator_traits<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@$00@std@@QBEABV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@$00@std@@QBEABV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@XZ PROC ; std::_Compressed_pair<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1343 :         return *this;

	mov	eax, ecx

; 1344 :     }

	ret	0
?_Get_first@?$_Compressed_pair@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@$00@std@@QBEABV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@XZ ENDP ; std::_Compressed_pair<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ?max_size@?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@QBEIXZ PROC ; xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> >::max_size, COMDAT
; _this$dead$ = ecx

; 86   : 							size_type				max_size		() const								{	size_type _Count = (size_type)(-1) / sizeof (T);	return (0 < _Count ? _Count : 1);	}

	mov	eax, 178956970				; 0aaaaaaaH
	ret	0
?max_size@?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@QBEIXZ ENDP ; xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@AAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
??$forward@AAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@0@AAPAU10@@Z PROC ; std::forward<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> * &>, COMDAT
; __Arg$ = ecx

; 1386 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, ecx

; 1387 : }

	ret	0
??$forward@AAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@0@AAPAU10@@Z ENDP ; std::forward<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@_N@std@@YA$$QA_NAA_N@Z
_TEXT	SEGMENT
??$forward@_N@std@@YA$$QA_NAA_N@Z PROC			; std::forward<bool>, COMDAT
; __Arg$ = ecx

; 1386 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, ecx

; 1387 : }

	ret	0
??$forward@_N@std@@YA$$QA_NAA_N@Z ENDP			; std::forward<bool>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$construct@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@U?$pair@PAVIRender_Visual@@PAD@2@@?$_Normal_allocator_traits@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@std@@SAXAAV?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@PAU?$pair@QAVIRender_Visual@@Vshared_str@@@1@$$QAU?$pair@PAVIRender_Visual@@PAD@1@@Z
_TEXT	SEGMENT
_<_Args_0>$ = 8						; size = 4
??$construct@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@U?$pair@PAVIRender_Visual@@PAD@2@@?$_Normal_allocator_traits@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@std@@SAXAAV?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@PAU?$pair@QAVIRender_Visual@@Vshared_str@@@1@$$QAU?$pair@PAVIRender_Visual@@PAD@1@@Z PROC ; std::_Normal_allocator_traits<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >::construct<std::pair<IRender_Visual * const,shared_str>,std::pair<IRender_Visual *,char *> >, COMDAT
; __Al$dead$ = ecx
; __Ptr$ = edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 242  :         : first(_STD forward<_Other1>(_Right.first)), second(_STD forward<_Other2>(_Right.second)) {}

	mov	ecx, DWORD PTR _<_Args_0>$[esp-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 564  :     static _CONSTEXPR20_DYNALLOC void construct(_Alloc& _Al, _Ty* _Ptr, _Types&&... _Args) {

	push	esi
	mov	esi, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 242  :         : first(_STD forward<_Other1>(_Right.first)), second(_STD forward<_Other2>(_Right.second)) {}

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [esi], eax
	mov	eax, DWORD PTR [ecx+4]
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 52   : 	void				_set		(str_c rhs) 					{	str_value* v = g_pStringContainer->dock(rhs); if (0!=v) v->dwReference++; _dec(); p_ = v;	}

	mov	ecx, DWORD PTR __imp_?g_pStringContainer@@3PAVstr_container@@A

; 58   : 						shared_str	(str_c rhs) 					{	p_ = 0;	_set(rhs);								}

	mov	DWORD PTR [esi+4], 0

; 52   : 	void				_set		(str_c rhs) 					{	str_value* v = g_pStringContainer->dock(rhs); if (0!=v) v->dwReference++; _dec(); p_ = v;	}

	push	eax
	mov	ecx, DWORD PTR [ecx]
	call	DWORD PTR __imp_?dock@str_container@@QAEPAUstr_value@@PBD@Z
	test	eax, eax
	je	SHORT $LN8@construct
	inc	DWORD PTR [eax]
$LN8@construct:

; 50   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	mov	ecx, DWORD PTR [esi+4]
	test	ecx, ecx
	je	SHORT $LN14@construct
	dec	DWORD PTR [ecx]
$LN14@construct:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 575  :     }

	mov	DWORD PTR [esi+4], eax
	pop	esi
	ret	0
??$construct@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@U?$pair@PAVIRender_Visual@@PAD@2@@?$_Normal_allocator_traits@V?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@@std@@SAXAAV?$xalloc@U?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@@PAU?$pair@QAVIRender_Visual@@Vshared_str@@@1@$$QAU?$pair@PAVIRender_Visual@@PAD@1@@Z ENDP ; std::_Normal_allocator_traits<xalloc<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> > >::construct<std::pair<IRender_Visual * const,shared_str>,std::pair<IRender_Visual *,char *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@0@0@Z
_TEXT	SEGMENT
??$_Construct_in_place@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@0@0@Z PROC ; std::_Construct_in_place<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> *,std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> * &>, COMDAT
; __Obj$ = ecx
; _<_Args_0>$ = edx

; 143  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 144  :     if (_STD is_constant_evaluated()) {
; 145  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 146  :     } else
; 147  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 148  :     {
; 149  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax

; 150  :     }
; 151  : }

	ret	0
??$_Construct_in_place@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@0@0@Z ENDP ; std::_Construct_in_place<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> *,std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@std@@YA$$QAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
??$forward@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@std@@YA$$QAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@0@AAPAU10@@Z PROC ; std::forward<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> *>, COMDAT
; __Arg$ = ecx

; 1386 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, ecx

; 1387 : }

	ret	0
??$forward@PAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@std@@@std@@YA$$QAPAU?$_Tree_node@U?$pair@QAVIRender_Visual@@Vshared_str@@@std@@PAX@0@AAPAU10@@Z ENDP ; std::forward<std::_Tree_node<std::pair<IRender_Visual * const,shared_str>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??$?0U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@?$_Tree_temp_node@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@std@@QAE@AAV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@1@$$QAU?$pair@Vshared_str@@PAVIRender_Visual@@@1@@Z
_TEXT	SEGMENT
__Al_$ = 8						; size = 4
__Myhead$ = 12						; size = 4
_<_Vals_0>$ = 16					; size = 4
??$?0U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@?$_Tree_temp_node@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@std@@QAE@AAV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@1@$$QAU?$pair@Vshared_str@@PAVIRender_Visual@@@1@@Z PROC ; std::_Tree_temp_node<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >::_Tree_temp_node<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > ><std::pair<shared_str,IRender_Visual *> >, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 958  :     _CONSTEXPR20_DYNALLOC explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

	mov	eax, DWORD PTR __Al_$[esp-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 804  :         : _Tree_temp_node_alloc<_Alnode>(_Al_) {

	push	esi
	mov	esi, ecx
	push	edi
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	push	24					; 00000018H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 958  :     _CONSTEXPR20_DYNALLOC explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

	mov	DWORD PTR [esi], eax

; 965  :         _Ptr = nullptr; // if allocate throws, prevents double-free

	mov	DWORD PTR [esi+4], 0
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	edi, DWORD PTR _<_Vals_0>$[esp+4]
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	mov	ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 966  :         _Ptr = _Al.allocate(1);

	mov	DWORD PTR [esi+4], ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 59   : 						shared_str	(shared_str const &rhs)			{	p_ = 0;	_set(rhs);								}

	mov	DWORD PTR [ecx+16], 0

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	edx, DWORD PTR [edi]
	test	edx, edx
	je	SHORT $LN24@pair
	inc	DWORD PTR [edx]
	mov	eax, DWORD PTR [ecx+16]

; 50   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	test	eax, eax
	je	SHORT $LN24@pair
	dec	DWORD PTR [eax]
$LN24@pair:

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	DWORD PTR [ecx+16], edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 242  :         : first(_STD forward<_Other1>(_Right.first)), second(_STD forward<_Other2>(_Right.second)) {}

	mov	eax, DWORD PTR [edi+4]
	mov	DWORD PTR [ecx+20], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 806  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR __Myhead$[esp+4]

; 807  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);
; 808  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);
; 809  :         this->_Ptr->_Color = _Red;
; 810  :         this->_Ptr->_Isnil = false;
; 811  :     }

	pop	edi
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [eax+4], ecx
	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [eax+8], ecx
	mov	eax, DWORD PTR [esi+4]
	mov	BYTE PTR [eax+12], 0
	mov	eax, DWORD PTR [esi+4]
	mov	BYTE PTR [eax+13], 0
	mov	eax, esi
	pop	esi
	ret	12					; 0000000cH
??$?0U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@?$_Tree_temp_node@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@std@@QAE@AAV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@1@$$QAU?$pair@Vshared_str@@PAVIRender_Visual@@@1@@Z ENDP ; std::_Tree_temp_node<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >::_Tree_temp_node<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > ><std::pair<shared_str,IRender_Visual *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\modelpool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??$_Find_upper_bound@Vshared_str@@@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@1@ABVshared_str@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_upper_bound@Vshared_str@@@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@1@ABVshared_str@@@Z PROC ; std::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >::_Find_upper_bound<shared_str>, COMDAT
; _this$ = ecx

; 1571 :         const auto _Scary = _Get_scary();
; 1572 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

	mov	eax, DWORD PTR [ecx]
	push	esi
	push	edi
	mov	edi, DWORD PTR ___$ReturnUdt$[esp+4]
	mov	esi, DWORD PTR [eax+4]
	mov	DWORD PTR [edi], esi

; 1573 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1574 :         while (!_Trynode->_Isnil) {

	cmp	BYTE PTR [esi+13], 0
	mov	DWORD PTR [edi+4], 0
	mov	DWORD PTR [edi+8], eax
	jne	SHORT $LN32@Find_upper
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 73   : 	bool				equal		(const shared_str & rhs) const	{	return (p_ == rhs.p_);							}

	mov	eax, DWORD PTR __Keyval$[esp+4]
	push	ebx
	mov	ebx, DWORD PTR [eax]
$LL2@Find_upper:
	mov	eax, DWORD PTR [esi+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1575 :             _Result._Location._Parent = _Trynode;

	mov	DWORD PTR [edi], esi
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 73   : 	bool				equal		(const shared_str & rhs) const	{	return (p_ == rhs.p_);							}

	cmp	ebx, eax

; 104  : 	if (a.equal(b))		return 0;

	je	SHORT $LN4@Find_upper

; 65   : 	str_c				operator*	() const						{	return p_?p_->value:0;							}

	lea	ecx, DWORD PTR [eax+12]
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 183  : {	return (int)strcmp(S1,S2);  }

	mov	edx, ebx
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 65   : 	str_c				operator*	() const						{	return p_?p_->value:0;							}

	neg	eax
	sbb	eax, eax
	and	eax, ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 183  : {	return (int)strcmp(S1,S2);  }

	neg	edx
	lea	ecx, DWORD PTR [ebx+12]
	sbb	edx, edx
	and	edx, ecx
$LL28@Find_upper:
	mov	cl, BYTE PTR [edx]
	cmp	cl, BYTE PTR [eax]
	jne	SHORT $LN29@Find_upper
	test	cl, cl
	je	SHORT $LN30@Find_upper
	mov	cl, BYTE PTR [edx+1]
	cmp	cl, BYTE PTR [eax+1]
	jne	SHORT $LN29@Find_upper
	add	edx, 2
	add	eax, 2
	test	cl, cl
	jne	SHORT $LL28@Find_upper
$LN30@Find_upper:
	xor	eax, eax
	jmp	SHORT $LN31@Find_upper
$LN29@Find_upper:
	sbb	eax, eax
	or	eax, 1
$LN31@Find_upper:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\modelpool.h

; 22   : 		{	return xr_strcmp(x,y)<0;}

	test	eax, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 1576 :             if (_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Trynode->_Myval))) {

	jns	SHORT $LN4@Find_upper

; 1577 :                 _Result._Location._Child = _Tree_child::_Left;
; 1578 :                 _Result._Bound           = _Trynode;

	mov	DWORD PTR [edi+8], esi

; 1579 :                 _Trynode                 = _Trynode->_Left;

	mov	eax, 1
	mov	esi, DWORD PTR [esi]

; 1580 :             } else {

	jmp	SHORT $LN5@Find_upper
$LN4@Find_upper:

; 1581 :                 _Result._Location._Child = _Tree_child::_Right;
; 1582 :                 _Trynode                 = _Trynode->_Right;

	mov	esi, DWORD PTR [esi+8]
	xor	eax, eax
$LN5@Find_upper:

; 1573 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1574 :         while (!_Trynode->_Isnil) {

	mov	DWORD PTR [edi+4], eax
	cmp	BYTE PTR [esi+13], 0
	je	SHORT $LL2@Find_upper

; 1583 :             }
; 1584 :         }
; 1585 : 
; 1586 :         return _Result;

	pop	ebx
$LN32@Find_upper:

; 1587 :     }

	mov	eax, edi
	pop	edi
	pop	esi
	ret	8
??$_Find_upper_bound@Vshared_str@@@?$_Tree@V?$_Tmap_traits@Vshared_str@@PAVIRender_Visual@@Ustr_pred@CModelPool@@V?$xalloc@U?$pair@Vshared_str@@PAVIRender_Visual@@@std@@@@$00@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@1@ABVshared_str@@@Z ENDP ; std::_Tree<std::_Tmap_traits<shared_str,IRender_Visual *,CModelPool::str_pred,xalloc<std::pair<shared_str,IRender_Visual *> >,1> >::_Find_upper_bound<shared_str>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$?0PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@_N@std@@QAE@$$QAPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@1@$$QA_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@_N@std@@QAE@$$QAPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@1@$$QA_N@Z PROC ; std::pair<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> *,bool>::pair<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> *,bool><std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> *,bool,0>, COMDAT
; _this$ = ecx

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	eax, DWORD PTR __Val1$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR __Val2$[esp-4]
	mov	al, BYTE PTR [eax]
	mov	BYTE PTR [ecx+4], al
	mov	eax, ecx
	ret	8
??$?0PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@_N@std@@QAE@$$QAPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@1@$$QA_N@Z ENDP ; std::pair<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> *,bool>::pair<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> *,bool><std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> *,bool,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@0@AAV10@@Z PROC ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > > > >, COMDAT
; __Arg$ = ecx

; 1386 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, ecx

; 1387 : }

	ret	0
??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@@std@@@std@@@0@AAV10@@Z ENDP ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<shared_str const ,IRender_Visual *> > > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$exchange@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@$$T@std@@YAPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@0@AAPAU10@$$QA$$T@Z
_TEXT	SEGMENT
??$exchange@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@$$T@std@@YAPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@0@AAPAU10@$$QA$$T@Z PROC ; std::exchange<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> *,std::nullptr_t>, COMDAT
; __Val$ = ecx
; __New_val$ = edx

; 601  :     // assign _New_val to _Val, return previous _Val
; 602  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

	mov	eax, DWORD PTR [ecx]

; 603  :     _Val         = static_cast<_Other&&>(_New_val);

	mov	edx, DWORD PTR [edx]
	mov	DWORD PTR [ecx], edx

; 604  :     return _Old_val;
; 605  : }

	ret	0
??$exchange@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@$$T@std@@YAPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@0@AAPAU10@$$QA$$T@Z ENDP ; std::exchange<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> *,std::nullptr_t>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??0?$_Tree_temp_node_alloc@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@std@@QAE@AAV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@Z
_TEXT	SEGMENT
__Al_$ = 8						; size = 4
??0?$_Tree_temp_node_alloc@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@std@@QAE@AAV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@Z PROC ; std::_Tree_temp_node_alloc<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >::_Tree_temp_node_alloc<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 958  :     _CONSTEXPR20_DYNALLOC explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

	mov	eax, DWORD PTR __Al_$[esp-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 783  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

	push	esi
	mov	esi, ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	push	24					; 00000018H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 958  :     _CONSTEXPR20_DYNALLOC explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

	mov	DWORD PTR [esi], eax

; 965  :         _Ptr = nullptr; // if allocate throws, prevents double-free

	mov	DWORD PTR [esi+4], 0
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 966  :         _Ptr = _Al.allocate(1);

	mov	DWORD PTR [esi+4], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree

; 785  :     }

	mov	eax, esi
	pop	esi
	ret	4
??0?$_Tree_temp_node_alloc@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@std@@QAE@AAV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@Z ENDP ; std::_Tree_temp_node_alloc<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >::_Tree_temp_node_alloc<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Allocate@?$_Alloc_construct_ptr@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Allocate@?$_Alloc_construct_ptr@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@std@@QAEXXZ PROC ; std::_Alloc_construct_ptr<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >::_Allocate, COMDAT
; _this$ = ecx

; 964  :     _CONSTEXPR20_DYNALLOC void _Allocate() { // disengage *this, then allocate a new memory block

	push	esi
	mov	esi, ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	push	24					; 00000018H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 965  :         _Ptr = nullptr; // if allocate throws, prevents double-free

	mov	DWORD PTR [esi+4], 0
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 966  :         _Ptr = _Al.allocate(1);

	mov	DWORD PTR [esi+4], eax
	pop	esi

; 967  :     }

	ret	0
?_Allocate@?$_Alloc_construct_ptr@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@std@@QAEXXZ ENDP ; std::_Alloc_construct_ptr<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >::_Allocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??0?$_Alloc_construct_ptr@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@std@@QAE@AAV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@Z
_TEXT	SEGMENT
__Al_$ = 8						; size = 4
??0?$_Alloc_construct_ptr@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@std@@QAE@AAV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@Z PROC ; std::_Alloc_construct_ptr<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >::_Alloc_construct_ptr<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >, COMDAT
; _this$ = ecx

; 958  :     _CONSTEXPR20_DYNALLOC explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

	mov	eax, DWORD PTR __Al_$[esp-4]
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	ret	4
??0?$_Alloc_construct_ptr@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@std@@QAE@AAV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@Z ENDP ; std::_Alloc_construct_ptr<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >::_Alloc_construct_ptr<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$?0PAVIRender_Visual@@PAD$0A@@?$pair@QAVIRender_Visual@@Vshared_str@@@std@@QAE@$$QAU?$pair@PAVIRender_Visual@@PAD@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??$?0PAVIRender_Visual@@PAD$0A@@?$pair@QAVIRender_Visual@@Vshared_str@@@std@@QAE@$$QAU?$pair@PAVIRender_Visual@@PAD@1@@Z PROC ; std::pair<IRender_Visual * const,shared_str>::pair<IRender_Visual * const,shared_str><IRender_Visual *,char *,0>, COMDAT
; _this$ = ecx

; 242  :         : first(_STD forward<_Other1>(_Right.first)), second(_STD forward<_Other2>(_Right.second)) {}

	mov	edx, DWORD PTR __Right$[esp-4]
	push	esi
	mov	esi, ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 52   : 	void				_set		(str_c rhs) 					{	str_value* v = g_pStringContainer->dock(rhs); if (0!=v) v->dwReference++; _dec(); p_ = v;	}

	mov	ecx, DWORD PTR __imp_?g_pStringContainer@@3PAVstr_container@@A
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 242  :         : first(_STD forward<_Other1>(_Right.first)), second(_STD forward<_Other2>(_Right.second)) {}

	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [esi], eax
	mov	eax, DWORD PTR [edx+4]
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 58   : 						shared_str	(str_c rhs) 					{	p_ = 0;	_set(rhs);								}

	mov	DWORD PTR [esi+4], 0

; 52   : 	void				_set		(str_c rhs) 					{	str_value* v = g_pStringContainer->dock(rhs); if (0!=v) v->dwReference++; _dec(); p_ = v;	}

	mov	ecx, DWORD PTR [ecx]
	push	eax
	call	DWORD PTR __imp_?dock@str_container@@QAEPAUstr_value@@PBD@Z
	test	eax, eax
	je	SHORT $LN6@pair
	inc	DWORD PTR [eax]
$LN6@pair:

; 50   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	mov	ecx, DWORD PTR [esi+4]
	test	ecx, ecx
	je	SHORT $LN12@pair
	dec	DWORD PTR [ecx]
$LN12@pair:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 242  :         : first(_STD forward<_Other1>(_Right.first)), second(_STD forward<_Other2>(_Right.second)) {}

	mov	DWORD PTR [esi+4], eax
	mov	eax, esi
	pop	esi
	ret	4
??$?0PAVIRender_Visual@@PAD$0A@@?$pair@QAVIRender_Visual@@Vshared_str@@@std@@QAE@$$QAU?$pair@PAVIRender_Visual@@PAD@1@@Z ENDP ; std::pair<IRender_Visual * const,shared_str>::pair<IRender_Visual * const,shared_str><IRender_Visual *,char *,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$construct@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@U?$pair@Vshared_str@@PAVIRender_Visual@@@2@@?$_Normal_allocator_traits@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@std@@SAXAAV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@PAU?$pair@$$CBVshared_str@@PAVIRender_Visual@@@1@$$QAU?$pair@Vshared_str@@PAVIRender_Visual@@@1@@Z
_TEXT	SEGMENT
_<_Args_0>$ = 8						; size = 4
??$construct@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@U?$pair@Vshared_str@@PAVIRender_Visual@@@2@@?$_Normal_allocator_traits@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@std@@SAXAAV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@PAU?$pair@$$CBVshared_str@@PAVIRender_Visual@@@1@$$QAU?$pair@Vshared_str@@PAVIRender_Visual@@@1@@Z PROC ; std::_Normal_allocator_traits<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >::construct<std::pair<shared_str const ,IRender_Visual *>,std::pair<shared_str,IRender_Visual *> >, COMDAT
; __Al$dead$ = ecx
; __Ptr$ = edx

; 564  :     static _CONSTEXPR20_DYNALLOC void construct(_Alloc& _Al, _Ty* _Ptr, _Types&&... _Args) {

	push	esi
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	esi, DWORD PTR _<_Args_0>$[esp]

; 59   : 						shared_str	(shared_str const &rhs)			{	p_ = 0;	_set(rhs);								}

	mov	DWORD PTR [edx], 0

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN12@construct
	inc	DWORD PTR [eax]
	mov	ecx, DWORD PTR [edx]

; 50   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	test	ecx, ecx
	je	SHORT $LN12@construct
	dec	DWORD PTR [ecx]
$LN12@construct:

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	DWORD PTR [edx], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 242  :         : first(_STD forward<_Other1>(_Right.first)), second(_STD forward<_Other2>(_Right.second)) {}

	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [edx+4], eax
	pop	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 575  :     }

	ret	0
??$construct@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@U?$pair@Vshared_str@@PAVIRender_Visual@@@2@@?$_Normal_allocator_traits@V?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@@std@@SAXAAV?$xalloc@U?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@@PAU?$pair@$$CBVshared_str@@PAVIRender_Visual@@@1@$$QAU?$pair@Vshared_str@@PAVIRender_Visual@@@1@@Z ENDP ; std::_Normal_allocator_traits<xalloc<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> > >::construct<std::pair<shared_str const ,IRender_Visual *>,std::pair<shared_str,IRender_Visual *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@0@0@Z
_TEXT	SEGMENT
??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@0@0@Z PROC ; std::_Construct_in_place<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> *,std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> * &>, COMDAT
; __Obj$ = ecx
; _<_Args_0>$ = edx

; 143  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 144  :     if (_STD is_constant_evaluated()) {
; 145  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 146  :     } else
; 147  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 148  :     {
; 149  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax

; 150  :     }
; 151  : }

	ret	0
??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@0@0@Z ENDP ; std::_Construct_in_place<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> *,std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@std@@YA$$QAPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
??$forward@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@std@@YA$$QAPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@0@AAPAU10@@Z PROC ; std::forward<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> *>, COMDAT
; __Arg$ = ecx

; 1386 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, ecx

; 1387 : }

	ret	0
??$forward@PAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@std@@YA$$QAPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@0@AAPAU10@@Z ENDP ; std::forward<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$?0Vshared_str@@PAVIRender_Visual@@$0A@@?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@QAE@$$QAU?$pair@Vshared_str@@PAVIRender_Visual@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??$?0Vshared_str@@PAVIRender_Visual@@$0A@@?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@QAE@$$QAU?$pair@Vshared_str@@PAVIRender_Visual@@@1@@Z PROC ; std::pair<shared_str const ,IRender_Visual *>::pair<shared_str const ,IRender_Visual *><shared_str,IRender_Visual *,0>, COMDAT
; _this$ = ecx

; 242  :         : first(_STD forward<_Other1>(_Right.first)), second(_STD forward<_Other2>(_Right.second)) {}

	push	esi
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	esi, DWORD PTR __Right$[esp]

; 59   : 						shared_str	(shared_str const &rhs)			{	p_ = 0;	_set(rhs);								}

	mov	DWORD PTR [ecx], 0

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN10@pair
	inc	DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]

; 50   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	test	edx, edx
	je	SHORT $LN10@pair
	dec	DWORD PTR [edx]
$LN10@pair:

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	DWORD PTR [ecx], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 242  :         : first(_STD forward<_Other1>(_Right.first)), second(_STD forward<_Other2>(_Right.second)) {}

	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	pop	esi
	ret	4
??$?0Vshared_str@@PAVIRender_Visual@@$0A@@?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@QAE@$$QAU?$pair@Vshared_str@@PAVIRender_Visual@@@1@@Z ENDP ; std::pair<shared_str const ,IRender_Visual *>::pair<shared_str const ,IRender_Visual *><shared_str,IRender_Visual *,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@PAD@std@@YA$$QAPADAAPAD@Z
_TEXT	SEGMENT
??$forward@PAD@std@@YA$$QAPADAAPAD@Z PROC		; std::forward<char *>, COMDAT
; __Arg$ = ecx

; 1386 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, ecx

; 1387 : }

	ret	0
??$forward@PAD@std@@YA$$QAPADAAPAD@Z ENDP		; std::forward<char *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@AAPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
??$forward@AAPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@0@AAPAU10@@Z PROC ; std::forward<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> * &>, COMDAT
; __Arg$ = ecx

; 1386 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, ecx

; 1387 : }

	ret	0
??$forward@AAPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBVshared_str@@PAVIRender_Visual@@@std@@PAX@0@AAPAU10@@Z ENDP ; std::forward<std::_Tree_node<std::pair<shared_str const ,IRender_Visual *>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@Vshared_str@@@std@@YA$$QAVshared_str@@AAV1@@Z
_TEXT	SEGMENT
??$forward@Vshared_str@@@std@@YA$$QAVshared_str@@AAV1@@Z PROC ; std::forward<shared_str>, COMDAT
; __Arg$ = ecx

; 1386 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, ecx

; 1387 : }

	ret	0
??$forward@Vshared_str@@@std@@YA$$QAVshared_str@@AAV1@@Z ENDP ; std::forward<shared_str>
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??_ECSkeletonX_PM@@WEE@AEPAXI@Z
_TEXT	SEGMENT
??_ECSkeletonX_PM@@WEE@AEPAXI@Z PROC			; [thunk]:CSkeletonX_PM::`vector deleting destructor', COMDAT
	sub	ecx, 68					; 00000044H
	jmp	??_ECSkeletonX_PM@@UAEPAXI@Z
??_ECSkeletonX_PM@@WEE@AEPAXI@Z ENDP			; [thunk]:CSkeletonX_PM::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??_ECSkeletonX_ST@@WEE@AEPAXI@Z
_TEXT	SEGMENT
??_ECSkeletonX_ST@@WEE@AEPAXI@Z PROC			; [thunk]:CSkeletonX_ST::`vector deleting destructor', COMDAT
	sub	ecx, 68					; 00000044H
	jmp	??_ECSkeletonX_ST@@UAEPAXI@Z
??_ECSkeletonX_ST@@WEE@AEPAXI@Z ENDP			; [thunk]:CSkeletonX_ST::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?_Throw_tree_length_error@std@@YAXXZ
_TEXT	SEGMENT
?_Throw_tree_length_error@std@@YAXXZ PROC		; std::_Throw_tree_length_error, COMDAT

; 416  :     _Xlength_error("map/set too long");

	push	OFFSET ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN3@Throw_tree:
	int	3
?_Throw_tree_length_error@std@@YAXXZ ENDP		; std::_Throw_tree_length_error
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\modelpool.h
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\modelpool.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\modelpool.h
;	COMDAT ??Rstr_pred@CModelPool@@QBE_NABVshared_str@@0@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
??Rstr_pred@CModelPool@@QBE_NABVshared_str@@0@Z PROC	; CModelPool::str_pred::operator(), COMDAT
; _this$dead$ = ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 73   : 	bool				equal		(const shared_str & rhs) const	{	return (p_ == rhs.p_);							}

	mov	eax, DWORD PTR _x$[esp-4]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR _y$[esp-4]
	mov	eax, DWORD PTR [eax]
	cmp	edx, eax

; 104  : 	if (a.equal(b))		return 0;

	je	SHORT $LN21@operator

; 65   : 	str_c				operator*	() const						{	return p_?p_->value:0;							}

	lea	ecx, DWORD PTR [eax+12]
	neg	eax
	sbb	eax, eax
	and	eax, ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 183  : {	return (int)strcmp(S1,S2);  }

	lea	ecx, DWORD PTR [edx+12]
	neg	edx
	sbb	edx, edx
	and	edx, ecx
$LL19@operator:
	mov	cl, BYTE PTR [edx]
	cmp	cl, BYTE PTR [eax]
	jne	SHORT $LN20@operator
	test	cl, cl
	je	SHORT $LN21@operator
	mov	cl, BYTE PTR [edx+1]
	cmp	cl, BYTE PTR [eax+1]
	jne	SHORT $LN20@operator
	add	edx, 2
	add	eax, 2
	test	cl, cl
	jne	SHORT $LL19@operator
$LN21@operator:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\modelpool.h

; 22   : 		{	return xr_strcmp(x,y)<0;}

	mov	eax, 0
	ret	8
$LN20@operator:
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 183  : {	return (int)strcmp(S1,S2);  }

	sbb	eax, eax
	or	eax, 1
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\modelpool.h

; 22   : 		{	return xr_strcmp(x,y)<0;}

	shr	eax, 31					; 0000001fH
	ret	8
??Rstr_pred@CModelPool@@QBE_NABVshared_str@@0@Z ENDP	; CModelPool::str_pred::operator()
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@AAVshared_str@@@std@@YAAAVshared_str@@AAV1@@Z
_TEXT	SEGMENT
??$forward@AAVshared_str@@@std@@YAAAVshared_str@@AAV1@@Z PROC ; std::forward<shared_str &>, COMDAT
; __Arg$ = ecx

; 1386 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, ecx

; 1387 : }

	ret	0
??$forward@AAVshared_str@@@std@@YAAAVshared_str@@AAV1@@Z ENDP ; std::forward<shared_str &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT
; __Arg$ = ecx

; 1386 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, ecx

; 1387 : }

	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@AAPAVIRender_Visual@@@std@@YAAAPAVIRender_Visual@@AAPAV1@@Z
_TEXT	SEGMENT
??$forward@AAPAVIRender_Visual@@@std@@YAAAPAVIRender_Visual@@AAPAV1@@Z PROC ; std::forward<IRender_Visual * &>, COMDAT
; __Arg$ = ecx

; 1386 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, ecx

; 1387 : }

	ret	0
??$forward@AAPAVIRender_Visual@@@std@@YAAAPAVIRender_Visual@@AAPAV1@@Z ENDP ; std::forward<IRender_Visual * &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Getcont@_Iterator_base0@std@@QBEPBU_Container_base0@2@XZ
_TEXT	SEGMENT
?_Getcont@_Iterator_base0@std@@QBEPBU_Container_base0@2@XZ PROC ; std::_Iterator_base0::_Getcont, COMDAT
; _this$dead$ = ecx

; 991  :         return nullptr;

	xor	eax, eax

; 992  :     }

	ret	0
?_Getcont@_Iterator_base0@std@@QBEPBU_Container_base0@2@XZ ENDP ; std::_Iterator_base0::_Getcont
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
;	COMDAT ??4shared_str@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_rhs$ = 8						; size = 4
??4shared_str@@QAEAAV0@ABV0@@Z PROC			; shared_str::operator=, COMDAT
; _this$ = ecx

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	eax, DWORD PTR _rhs$[esp-4]
	mov	eax, DWORD PTR [eax]
	test	eax, eax
	je	SHORT $LN4@operator
	inc	DWORD PTR [eax]
$LN4@operator:

; 50   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	mov	edx, DWORD PTR [ecx]
	test	edx, edx
	je	SHORT $LN10@operator
	dec	DWORD PTR [edx]
$LN10@operator:

; 64   : 	shared_str&			operator=	(shared_str const &rhs)			{	_set(rhs);	return (shared_str&)*this;			}

	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	ret	4
??4shared_str@@QAEAAV0@ABV0@@Z ENDP			; shared_str::operator=
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<IRender_Visual *> >::_Vector_val<std::_Simple_types<IRender_Visual *> >, COMDAT
; _this$ = ecx

; 390  :     _CONSTEXPR20_CONTAINER _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

	mov	DWORD PTR [ecx], 0
	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	ret	0
??0?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<IRender_Visual *> >::_Vector_val<std::_Simple_types<IRender_Visual *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@U_Zero_then_variadic_args_t@std@@@std@@YA$$QAU_Zero_then_variadic_args_t@0@AAU10@@Z
_TEXT	SEGMENT
??$forward@U_Zero_then_variadic_args_t@std@@@std@@YA$$QAU_Zero_then_variadic_args_t@0@AAU10@@Z PROC ; std::forward<std::_Zero_then_variadic_args_t>, COMDAT
; __Arg$ = ecx

; 1386 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, ecx

; 1387 : }

	ret	0
??$forward@U_Zero_then_variadic_args_t@std@@@std@@YA$$QAU_Zero_then_variadic_args_t@0@AAU10@@Z ENDP ; std::forward<std::_Zero_then_variadic_args_t>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@std@@@std@@QAE@PAPAVIRender_Visual@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$dead$ = 12					; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@std@@@std@@QAE@PAPAVIRender_Visual@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<IRender_Visual *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<IRender_Visual *> > >, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR __Parg$[esp-4]
	mov	DWORD PTR [ecx], eax

; 42   :         this->_Adopt(_Pvector);
; 43   :     }

	mov	eax, ecx
	ret	8
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@std@@@std@@QAE@PAPAVIRender_Visual@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<IRender_Visual *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<IRender_Visual *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@std@@@std@@QAE@PAPAVIRender_Visual@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
___param0$ = 8						; size = 4
___param1$dead$ = 12					; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@std@@@std@@QAE@PAPAVIRender_Visual@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<IRender_Visual *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<IRender_Visual *> > >, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR ___param0$[esp-4]
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	ret	8
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@std@@@std@@QAE@PAPAVIRender_Visual@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<IRender_Visual *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<IRender_Visual *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$addressof@V?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
??$addressof@V?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@0@AAV10@@Z PROC ; std::addressof<std::_Vector_val<std::_Simple_types<IRender_Visual *> > >, COMDAT
; __Val$ = ecx

; 253  :     return __builtin_addressof(_Val);

	mov	eax, ecx

; 254  : }

	ret	0
??$addressof@V?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_Vector_val<std::_Simple_types<IRender_Visual *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?begin@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@std@@@2@XZ PROC ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::begin, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], ecx

; 1462 :         auto& _My_data = _Mypair._Myval2;
; 1463 :         return iterator(_My_data._Myfirst, _STD addressof(_My_data));
; 1464 :     }

	ret	4
?begin@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@std@@@2@XZ ENDP ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
;	COMDAT ?c_str@shared_str@@QBEPBDXZ
_TEXT	SEGMENT
?c_str@shared_str@@QBEPBDXZ PROC			; shared_str::c_str, COMDAT
; _this$ = ecx

; 68   : 	str_c				c_str		() const						{	return p_?p_->value:0;							}

	mov	eax, DWORD PTR [ecx]
	lea	ecx, DWORD PTR [eax+12]
	neg	eax
	sbb	eax, eax
	and	eax, ecx
	ret	0
?c_str@shared_str@@QBEPBDXZ ENDP			; shared_str::c_str
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\modelpool.h
;	COMDAT ?Logging@CModelPool@@QAEXH@Z
_TEXT	SEGMENT
_bEnable$ = 8						; size = 4
?Logging@CModelPool@@QAEXH@Z PROC			; CModelPool::Logging, COMDAT
; _this$ = ecx

; 65   : 	void					Logging				(BOOL bEnable)	{ bLogging=bEnable; }

	mov	eax, DWORD PTR _bEnable$[esp-4]
	mov	DWORD PTR [ecx+44], eax
	ret	4
?Logging@CModelPool@@QAEXH@Z ENDP			; CModelPool::Logging
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
;	COMDAT ?_get@shared_str@@QBEPBUstr_value@@XZ
_TEXT	SEGMENT
?_get@shared_str@@QBEPBUstr_value@@XZ PROC		; shared_str::_get, COMDAT
; _this$ = ecx

; 54   : 	const str_value*	_get		()	const						{	return p_;																					}

	mov	eax, DWORD PTR [ecx]
	ret	0
?_get@shared_str@@QBEPBUstr_value@@XZ ENDP		; shared_str::_get
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
;	COMDAT ??8@YA_NABVshared_str@@0@Z
_TEXT	SEGMENT
??8@YA_NABVshared_str@@0@Z PROC				; operator==, COMDAT
; _a$ = ecx
; _b$ = edx

; 93   : IC bool operator	==	(shared_str const & a, shared_str const & b)		{ return a._get() == b._get();					}

	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	sete	al
	ret	0
??8@YA_NABVshared_str@@0@Z ENDP				; operator==
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?size@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@QBEIXZ PROC ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::size, COMDAT
; _this$ = ecx

; 1535 :         auto& _My_data = _Mypair._Myval2;
; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2

; 1537 :     }

	ret	0
?size@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@QBEIXZ ENDP ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ?size@?$xr_vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@@QBEIXZ
_TEXT	SEGMENT
?size@?$xr_vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@@QBEIXZ PROC ; xr_vector<IRender_Visual *,xalloc<IRender_Visual *> >::size, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h

; 125  : 	u32		size				() const							{ return (u32)inherited::size();} 

	ret	0
?size@?$xr_vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@@QBEIXZ ENDP ; xr_vector<IRender_Visual *,xalloc<IRender_Visual *> >::size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Orphan_range@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@ABEXPAPAVIRender_Visual@@0@Z
_TEXT	SEGMENT
___formal$dead$ = 8					; size = 4
___formal$dead$ = 12					; size = 4
?_Orphan_range@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@ABEXPAPAVIRender_Visual@@0@Z PROC ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::_Orphan_range, COMDAT
; _this$dead$ = ecx

; 1801 :     _CONSTEXPR20_CONTAINER void _Orphan_range(pointer, pointer) const {}

	ret	8
?_Orphan_range@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@ABEXPAPAVIRender_Visual@@0@Z ENDP ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Emplace_back_with_unused_capacity@ABQAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@AAE?A_TABQAVIRender_Visual@@@Z
_TEXT	SEGMENT
_<_Val_0>$ = 8						; size = 4
??$_Emplace_back_with_unused_capacity@ABQAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@AAE?A_TABQAVIRender_Visual@@@Z PROC ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::_Emplace_back_with_unused_capacity<IRender_Visual * const &>, COMDAT
; _this$ = ecx

; 709  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 710  :         auto& _My_data   = _Mypair._Myval2;
; 711  :         pointer& _Mylast = _My_data._Mylast;
; 712  :         _STL_INTERNAL_CHECK(_Mylast != _My_data._Myend); // check that we have unused capacity
; 713  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _<_Val_0>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 714  :         _Orphan_range(_Mylast, _Mylast);
; 715  :         _Ty& _Result = *_Mylast;
; 716  :         ++_Mylast;

	add	DWORD PTR [ecx+4], 4

; 717  : #if _HAS_CXX17
; 718  :         return _Result;
; 719  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 720  :         (void) _Result;
; 721  : #endif // _HAS_CXX17
; 722  :     }

	ret	4
??$_Emplace_back_with_unused_capacity@ABQAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@AAE?A_TABQAVIRender_Visual@@@Z ENDP ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::_Emplace_back_with_unused_capacity<IRender_Visual * const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Xlength@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@CAXXZ PROC ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::_Xlength, COMDAT

; 1761 :         _Xlength_error("vector too long");

	push	OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN3@Xlength:
	int	3
?_Xlength@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@CAXXZ ENDP ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?capacity@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@QBEIXZ PROC ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::capacity, COMDAT
; _this$ = ecx

; 1545 :         auto& _My_data = _Mypair._Myval2;
; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2

; 1547 :     }

	ret	0
?capacity@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@QBEIXZ ENDP ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ?max_size@?$xalloc@PAVIRender_Visual@@@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$xalloc@PAVIRender_Visual@@@@QBEIXZ PROC	; xalloc<IRender_Visual *>::max_size, COMDAT
; _this$dead$ = ecx

; 86   : 							size_type				max_size		() const								{	size_type _Count = (size_type)(-1) / sizeof (T);	return (0 < _Count ? _Count : 1);	}

	mov	eax, 1073741823				; 3fffffffH
	ret	0
?max_size@?$xalloc@PAVIRender_Visual@@@@QBEIXZ ENDP	; xalloc<IRender_Visual *>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?max_size@?$_Normal_allocator_traits@V?$xalloc@PAVIRender_Visual@@@@@std@@SAIABV?$xalloc@PAVIRender_Visual@@@@@Z
_TEXT	SEGMENT
?max_size@?$_Normal_allocator_traits@V?$xalloc@PAVIRender_Visual@@@@@std@@SAIABV?$xalloc@PAVIRender_Visual@@@@@Z PROC ; std::_Normal_allocator_traits<xalloc<IRender_Visual *> >::max_size, COMDAT
; __Al$dead$ = ecx

; 591  :         if constexpr (_Has_max_size<_Alloc>::value) {
; 592  :             return _Al.max_size();

	mov	eax, 1073741823				; 3fffffffH

; 593  :         } else {
; 594  :             return (numeric_limits<size_type>::max)() / sizeof(value_type);
; 595  :         }
; 596  :     }

	ret	0
?max_size@?$_Normal_allocator_traits@V?$xalloc@PAVIRender_Visual@@@@@std@@SAIABV?$xalloc@PAVIRender_Visual@@@@@Z ENDP ; std::_Normal_allocator_traits<xalloc<IRender_Visual *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$xalloc@PAVIRender_Visual@@@@V?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@std@@$00@std@@QBEABV?$xalloc@PAVIRender_Visual@@@@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$xalloc@PAVIRender_Visual@@@@V?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@std@@$00@std@@QBEABV?$xalloc@PAVIRender_Visual@@@@XZ PROC ; std::_Compressed_pair<xalloc<IRender_Visual *>,std::_Vector_val<std::_Simple_types<IRender_Visual *> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1343 :         return *this;

	mov	eax, ecx

; 1344 :     }

	ret	0
?_Get_first@?$_Compressed_pair@V?$xalloc@PAVIRender_Visual@@@@V?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@std@@$00@std@@QBEABV?$xalloc@PAVIRender_Visual@@@@XZ ENDP ; std::_Compressed_pair<xalloc<IRender_Visual *>,std::_Vector_val<std::_Simple_types<IRender_Visual *> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Getal@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@ABEABV?$xalloc@PAVIRender_Visual@@@@XZ
_TEXT	SEGMENT
?_Getal@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@ABEABV?$xalloc@PAVIRender_Visual@@@@XZ PROC ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::_Getal, COMDAT
; _this$ = ecx

; 1809 :         return _Mypair._Get_first();

	mov	eax, ecx

; 1810 :     }

	ret	0
?_Getal@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@ABEABV?$xalloc@PAVIRender_Visual@@@@XZ ENDP ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?max_size@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@QBEIXZ PROC ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::max_size, COMDAT
; _this$dead$ = ecx

; 1540 :         return (_STD min)(

	mov	eax, 1073741823				; 3fffffffH

; 1541 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1542 :     }

	ret	0
?max_size@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@QBEIXZ ENDP ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Calculate_growth@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@ABEII@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Calculate_growth@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@ABEII@Z PROC ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	edx, DWORD PTR [ecx+8]
	sub	edx, DWORD PTR [ecx]

; 1671 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1672 :         const size_type _Oldcapacity = capacity();
; 1673 :         const auto _Max              = max_size();
; 1674 : 
; 1675 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	mov	ecx, 1073741823				; 3fffffffH

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	sar	edx, 2

; 1670 :     _CONSTEXPR20_CONTAINER size_type _Calculate_growth(const size_type _Newsize) const {

	push	esi

; 1671 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1672 :         const size_type _Oldcapacity = capacity();
; 1673 :         const auto _Max              = max_size();
; 1674 : 
; 1675 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	mov	esi, edx
	shr	esi, 1
	sub	ecx, esi
	cmp	edx, ecx
	jbe	SHORT $LN2@Calculate_

; 1676 :             return _Max; // geometric growth would overflow

	mov	eax, 1073741823				; 3fffffffH
	pop	esi

; 1682 :             return _Newsize; // geometric growth would be insufficient
; 1683 :         }
; 1684 : 
; 1685 :         return _Geometric; // geometric growth is sufficient
; 1686 :     }

	ret	4
$LN2@Calculate_:

; 1677 :         }
; 1678 : 
; 1679 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	lea	eax, DWORD PTR [esi+edx]

; 1680 : 
; 1681 :         if (_Geometric < _Newsize) {

	cmp	eax, DWORD PTR __Newsize$[esp]
	pop	esi
	cmovb	eax, DWORD PTR __Newsize$[esp-4]

; 1682 :             return _Newsize; // geometric growth would be insufficient
; 1683 :         }
; 1684 : 
; 1685 :         return _Geometric; // geometric growth is sufficient
; 1686 :     }

	ret	4
?_Calculate_growth@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@ABEII@Z ENDP ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
;	COMDAT ??$xr_alloc@PAVIRender_Visual@@@@YAPAPAVIRender_Visual@@I@Z
_TEXT	SEGMENT
??$xr_alloc@PAVIRender_Visual@@@@YAPAPAVIRender_Visual@@I@Z PROC ; xr_alloc<IRender_Visual *>, COMDAT
; _count$ = ecx

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	lea	eax, DWORD PTR [ecx*4]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	ret	0
??$xr_alloc@PAVIRender_Visual@@@@YAPAPAVIRender_Visual@@I@Z ENDP ; xr_alloc<IRender_Visual *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ?allocate@?$xalloc@PAVIRender_Visual@@@@QBEPAPAVIRender_Visual@@IPBX@Z
_TEXT	SEGMENT
_n$ = 8							; size = 4
_p$dead$ = 12						; size = 4
?allocate@?$xalloc@PAVIRender_Visual@@@@QBEPAPAVIRender_Visual@@IPBX@Z PROC ; xalloc<IRender_Visual *>::allocate, COMDAT
; _this$dead$ = ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	mov	eax, DWORD PTR _n$[esp-4]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	shl	eax, 2
	push	eax
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h

; 80   : 							pointer					allocate		(size_type n, const void* p=0) const	{	return xr_alloc<T>((u32)n);	}

	ret	8
?allocate@?$xalloc@PAVIRender_Visual@@@@QBEPAPAVIRender_Visual@@IPBX@Z ENDP ; xalloc<IRender_Visual *>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$construct@PAVIRender_Visual@@ABQAV1@@?$_Normal_allocator_traits@V?$xalloc@PAVIRender_Visual@@@@@std@@SAXAAV?$xalloc@PAVIRender_Visual@@@@PAPAVIRender_Visual@@ABQAV3@@Z
_TEXT	SEGMENT
_<_Args_0>$ = 8						; size = 4
??$construct@PAVIRender_Visual@@ABQAV1@@?$_Normal_allocator_traits@V?$xalloc@PAVIRender_Visual@@@@@std@@SAXAAV?$xalloc@PAVIRender_Visual@@@@PAPAVIRender_Visual@@ABQAV3@@Z PROC ; std::_Normal_allocator_traits<xalloc<IRender_Visual *> >::construct<IRender_Visual *,IRender_Visual * const &>, COMDAT
; __Al$dead$ = ecx
; __Ptr$ = edx

; 565  :         if constexpr (_Uses_default_construct<_Alloc, _Ty*, _Types...>::value) {
; 566  :             (void) _Al; // TRANSITION, DevCom-1004719
; 567  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 568  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 569  : #else // __cpp_lib_constexpr_dynamic_alloc
; 570  :             ::new (static_cast<void*>(_Ptr)) _Ty(_STD forward<_Types>(_Args)...);
; 571  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 572  :         } else {
; 573  :             _Al.construct(_Ptr, _STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR _<_Args_0>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 574  :         }
; 575  :     }

	ret	0
??$construct@PAVIRender_Visual@@ABQAV1@@?$_Normal_allocator_traits@V?$xalloc@PAVIRender_Visual@@@@@std@@SAXAAV?$xalloc@PAVIRender_Visual@@@@PAPAVIRender_Visual@@ABQAV3@@Z ENDP ; std::_Normal_allocator_traits<xalloc<IRender_Visual *> >::construct<IRender_Visual *,IRender_Visual * const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Umove_if_noexcept1@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@AAEXPAPAVIRender_Visual@@00U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
?_Umove_if_noexcept1@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@AAEXPAPAVIRender_Visual@@00U?$integral_constant@_N$00@2@@Z PROC ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::_Umove_if_noexcept1, COMDAT
; _this$dead$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1703 :     auto _UFirst      = _Get_unwrapped(_First);

	mov	eax, DWORD PTR __First$[esp-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1649 :     _CONSTEXPR20_CONTAINER void _Umove_if_noexcept1(pointer _First, pointer _Last, pointer _Dest, true_type) {

	push	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	mov	esi, DWORD PTR __Last$[esp]
	cmp	eax, esi
	je	SHORT $LN5@Umove_if_n

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	edx, DWORD PTR __Dest$[esp]
	sub	edx, eax
$LL6@Umove_if_n:

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx+eax], ecx

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	add	eax, 4
	cmp	eax, esi
	jne	SHORT $LL6@Umove_if_n
$LN5@Umove_if_n:
	pop	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1652 :     }

	ret	16					; 00000010H
?_Umove_if_noexcept1@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@AAEXPAPAVIRender_Visual@@00U?$integral_constant@_N$00@2@@Z ENDP ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::_Umove_if_noexcept1
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Umove_if_noexcept@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@AAEXPAPAVIRender_Visual@@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove_if_noexcept@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@AAEXPAPAVIRender_Visual@@00@Z PROC ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::_Umove_if_noexcept, COMDAT
; _this$dead$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1703 :     auto _UFirst      = _Get_unwrapped(_First);

	mov	eax, DWORD PTR __First$[esp-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1659 :     _CONSTEXPR20_CONTAINER void _Umove_if_noexcept(pointer _First, pointer _Last, pointer _Dest) {

	push	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	mov	esi, DWORD PTR __Last$[esp]
	cmp	eax, esi
	je	SHORT $LN7@Umove_if_n

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	edx, DWORD PTR __Dest$[esp]
	sub	edx, eax
$LL8@Umove_if_n:

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx+eax], ecx

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	add	eax, 4
	cmp	eax, esi
	jne	SHORT $LL8@Umove_if_n
$LN7@Umove_if_n:
	pop	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1663 :     }

	ret	12					; 0000000cH
?_Umove_if_noexcept@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@AAEXPAPAVIRender_Visual@@00@Z ENDP ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::_Umove_if_noexcept
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Get_unwrapped@ABQAPAVIRender_Visual@@@std@@YA?A_TABQAPAVIRender_Visual@@@Z
_TEXT	SEGMENT
??$_Get_unwrapped@ABQAPAVIRender_Visual@@@std@@YA?A_TABQAPAVIRender_Visual@@@Z PROC ; std::_Get_unwrapped<IRender_Visual * * const &>, COMDAT
; __It$ = ecx

; 1275 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1276 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1277 :         return _It + 0;

	mov	eax, DWORD PTR [ecx]

; 1278 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1279 :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 1280 :     } else {
; 1281 :         return static_cast<_Iter&&>(_It);
; 1282 :     }
; 1283 : }

	ret	0
??$_Get_unwrapped@ABQAPAVIRender_Visual@@@std@@YA?A_TABQAPAVIRender_Visual@@@Z ENDP ; std::_Get_unwrapped<IRender_Visual * * const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@V?$xalloc@PAVIRender_Visual@@@@@std@@QAE@PAPAVIRender_Visual@@AAV?$xalloc@PAVIRender_Visual@@@@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Al_$ = 12						; size = 4
??0?$_Uninitialized_backout_al@V?$xalloc@PAVIRender_Visual@@@@@std@@QAE@PAPAVIRender_Visual@@AAV?$xalloc@PAVIRender_Visual@@@@@Z PROC ; std::_Uninitialized_backout_al<xalloc<IRender_Visual *> >::_Uninitialized_backout_al<xalloc<IRender_Visual *> >, COMDAT
; _this$ = ecx

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	eax, DWORD PTR __Dest$[esp-4]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR __Al_$[esp-4]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, ecx
	ret	8
??0?$_Uninitialized_backout_al@V?$xalloc@PAVIRender_Visual@@@@@std@@QAE@PAPAVIRender_Visual@@AAV?$xalloc@PAVIRender_Visual@@@@@Z ENDP ; std::_Uninitialized_backout_al<xalloc<IRender_Visual *> >::_Uninitialized_backout_al<xalloc<IRender_Visual *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$xalloc@PAVIRender_Visual@@@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Uninitialized_backout_al@V?$xalloc@PAVIRender_Visual@@@@@std@@QAE@XZ PROC ; std::_Uninitialized_backout_al<xalloc<IRender_Visual *> >::~_Uninitialized_backout_al<xalloc<IRender_Visual *> >, COMDAT
; _this$ = ecx

; 1615 :         _Destroy_range(_First, _Last, _Al);
; 1616 :     }

	ret	0
??1?$_Uninitialized_backout_al@V?$xalloc@PAVIRender_Visual@@@@@std@@QAE@XZ ENDP ; std::_Uninitialized_backout_al<xalloc<IRender_Visual *> >::~_Uninitialized_backout_al<xalloc<IRender_Visual *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ?construct@?$xalloc@PAVIRender_Visual@@@@QAEXPAPAVIRender_Visual@@ABQAV2@@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
__Val$ = 12						; size = 4
?construct@?$xalloc@PAVIRender_Visual@@@@QAEXPAPAVIRender_Visual@@ABQAV2@@Z PROC ; xalloc<IRender_Visual *>::construct, COMDAT
; _this$dead$ = ecx

; 84   : 							void					construct		(pointer p, const T& _Val)				{	::new((void*)p) value_type (_Val); }

	mov	eax, DWORD PTR __Val$[esp-4]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR _p$[esp-4]
	mov	DWORD PTR [eax], ecx
	ret	8
?construct@?$xalloc@PAVIRender_Visual@@@@QAEXPAPAVIRender_Visual@@ABQAV2@@Z ENDP ; xalloc<IRender_Visual *>::construct
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$construct@PAVIRender_Visual@@PAV1@@?$_Normal_allocator_traits@V?$xalloc@PAVIRender_Visual@@@@@std@@SAXAAV?$xalloc@PAVIRender_Visual@@@@PAPAVIRender_Visual@@$$QAPAV3@@Z
_TEXT	SEGMENT
_<_Args_0>$ = 8						; size = 4
??$construct@PAVIRender_Visual@@PAV1@@?$_Normal_allocator_traits@V?$xalloc@PAVIRender_Visual@@@@@std@@SAXAAV?$xalloc@PAVIRender_Visual@@@@PAPAVIRender_Visual@@$$QAPAV3@@Z PROC ; std::_Normal_allocator_traits<xalloc<IRender_Visual *> >::construct<IRender_Visual *,IRender_Visual *>, COMDAT
; __Al$dead$ = ecx
; __Ptr$ = edx

; 565  :         if constexpr (_Uses_default_construct<_Alloc, _Ty*, _Types...>::value) {
; 566  :             (void) _Al; // TRANSITION, DevCom-1004719
; 567  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 568  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 569  : #else // __cpp_lib_constexpr_dynamic_alloc
; 570  :             ::new (static_cast<void*>(_Ptr)) _Ty(_STD forward<_Types>(_Args)...);
; 571  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 572  :         } else {
; 573  :             _Al.construct(_Ptr, _STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR _<_Args_0>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 574  :         }
; 575  :     }

	ret	0
??$construct@PAVIRender_Visual@@PAV1@@?$_Normal_allocator_traits@V?$xalloc@PAVIRender_Visual@@@@@std@@SAXAAV?$xalloc@PAVIRender_Visual@@@@PAPAVIRender_Visual@@$$QAPAV3@@Z ENDP ; std::_Normal_allocator_traits<xalloc<IRender_Visual *> >::construct<IRender_Visual *,IRender_Visual *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@PAVIRender_Visual@@@std@@YA$$QAPAVIRender_Visual@@AAPAV1@@Z
_TEXT	SEGMENT
??$forward@PAVIRender_Visual@@@std@@YA$$QAPAVIRender_Visual@@AAPAV1@@Z PROC ; std::forward<IRender_Visual *>, COMDAT
; __Arg$ = ecx

; 1386 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, ecx

; 1387 : }

	ret	0
??$forward@PAVIRender_Visual@@@std@@YA$$QAPAVIRender_Visual@@AAPAV1@@Z ENDP ; std::forward<IRender_Visual *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Emplace_back@PAVIRender_Visual@@@?$_Uninitialized_backout_al@V?$xalloc@PAVIRender_Visual@@@@@std@@QAEX$$QAPAVIRender_Visual@@@Z
_TEXT	SEGMENT
_<_Vals_0>$ = 8						; size = 4
??$_Emplace_back@PAVIRender_Visual@@@?$_Uninitialized_backout_al@V?$xalloc@PAVIRender_Visual@@@@@std@@QAEX$$QAPAVIRender_Visual@@@Z PROC ; std::_Uninitialized_backout_al<xalloc<IRender_Visual *> >::_Emplace_back<IRender_Visual *>, COMDAT
; _this$ = ecx

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _<_Vals_0>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 1621 :         ++_Last;

	add	DWORD PTR [ecx+4], 4

; 1622 :     }

	ret	4
??$_Emplace_back@PAVIRender_Visual@@@?$_Uninitialized_backout_al@V?$xalloc@PAVIRender_Visual@@@@@std@@QAEX$$QAPAVIRender_Visual@@@Z ENDP ; std::_Uninitialized_backout_al<xalloc<IRender_Visual *> >::_Emplace_back<IRender_Visual *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$move@AAPAVIRender_Visual@@@std@@YA$$QAPAVIRender_Visual@@AAPAV1@@Z
_TEXT	SEGMENT
??$move@AAPAVIRender_Visual@@@std@@YA$$QAPAVIRender_Visual@@AAPAV1@@Z PROC ; std::move<IRender_Visual * &>, COMDAT
; __Arg$ = ecx

; 1397 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	eax, ecx

; 1398 : }

	ret	0
??$move@AAPAVIRender_Visual@@@std@@YA$$QAPAVIRender_Visual@@AAPAV1@@Z ENDP ; std::move<IRender_Visual * &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@V?$xalloc@PAVIRender_Visual@@@@@std@@QAEPAPAVIRender_Visual@@XZ
_TEXT	SEGMENT
?_Release@?$_Uninitialized_backout_al@V?$xalloc@PAVIRender_Visual@@@@@std@@QAEPAPAVIRender_Visual@@XZ PROC ; std::_Uninitialized_backout_al<xalloc<IRender_Visual *> >::_Release, COMDAT
; _this$ = ecx

; 1625 :         _First = _Last;

	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [ecx], eax

; 1626 :         return _Last;
; 1627 :     }

	ret	0
?_Release@?$_Uninitialized_backout_al@V?$xalloc@PAVIRender_Visual@@@@@std@@QAEPAPAVIRender_Visual@@XZ ENDP ; std::_Uninitialized_backout_al<xalloc<IRender_Visual *> >::_Release
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAPAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@YAPAPAVIRender_Visual@@QAPAV1@0PAPAV1@AAV?$xalloc@PAVIRender_Visual@@@@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Al$dead$ = 12						; size = 4
??$_Uninitialized_move@PAPAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@YAPAPAVIRender_Visual@@QAPAV1@0PAPAV1@AAV?$xalloc@PAVIRender_Visual@@@@@Z PROC ; std::_Uninitialized_move<IRender_Visual * *,xalloc<IRender_Visual *> >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	eax, DWORD PTR __Dest$[esp-4]

; 1699 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

	push	esi
	mov	esi, edx

; 1700 :     // move [_First, _Last) to raw _Dest, using _Al
; 1701 :     // note: only called internally from elsewhere in the STL
; 1702 :     using _Ptrval     = typename _Alloc::value_type*;
; 1703 :     auto _UFirst      = _Get_unwrapped(_First);
; 1704 :     const auto _ULast = _Get_unwrapped(_Last);
; 1705 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1706 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1707 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1708 :         if (!_STD is_constant_evaluated())
; 1709 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1710 :         {
; 1711 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1712 :             return _Dest + (_ULast - _UFirst);
; 1713 :         }
; 1714 :     }
; 1715 : 
; 1716 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	cmp	ecx, esi
	je	SHORT $LN3@Uninitiali
	npad	5
$LL4@Uninitiali:

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	edx, DWORD PTR [ecx]

; 1621 :         ++_Last;

	add	ecx, 4
	mov	DWORD PTR [eax], edx
	add	eax, 4

; 1700 :     // move [_First, _Last) to raw _Dest, using _Al
; 1701 :     // note: only called internally from elsewhere in the STL
; 1702 :     using _Ptrval     = typename _Alloc::value_type*;
; 1703 :     auto _UFirst      = _Get_unwrapped(_First);
; 1704 :     const auto _ULast = _Get_unwrapped(_Last);
; 1705 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1706 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1707 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1708 :         if (!_STD is_constant_evaluated())
; 1709 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1710 :         {
; 1711 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1712 :             return _Dest + (_ULast - _UFirst);
; 1713 :         }
; 1714 :     }
; 1715 : 
; 1716 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	cmp	ecx, esi
	jne	SHORT $LL4@Uninitiali
$LN3@Uninitiali:
	pop	esi

; 1718 :         _Backout._Emplace_back(_STD move(*_UFirst));
; 1719 :     }
; 1720 : 
; 1721 :     return _Backout._Release();
; 1722 : }

	ret	0
??$_Uninitialized_move@PAPAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@YAPAPAVIRender_Visual@@QAPAV1@0PAPAV1@AAV?$xalloc@PAVIRender_Visual@@@@@Z ENDP ; std::_Uninitialized_move<IRender_Visual * *,xalloc<IRender_Visual *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Umove@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@AAEPAPAVIRender_Visual@@PAPAV3@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@AAEPAPAVIRender_Visual@@PAPAV3@00@Z PROC ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::_Umove, COMDAT
; _this$dead$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	mov	ecx, DWORD PTR __First$[esp-4]

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	eax, DWORD PTR __Dest$[esp-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1644 :     _CONSTEXPR20_CONTAINER pointer _Umove(pointer _First, pointer _Last, pointer _Dest) {

	push	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	mov	esi, DWORD PTR __Last$[esp]
	cmp	ecx, esi
	je	SHORT $LN5@Umove
$LL6@Umove:

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	edx, DWORD PTR [ecx]

; 1621 :         ++_Last;

	add	ecx, 4
	mov	DWORD PTR [eax], edx
	add	eax, 4

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	cmp	ecx, esi
	jne	SHORT $LL6@Umove
$LN5@Umove:
	pop	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1647 :     }

	ret	12					; 0000000cH
?_Umove@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@AAEPAPAVIRender_Visual@@PAPAV3@00@Z ENDP ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::_Umove
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAPAVIRender_Visual@@@std@@YAXAAPAPAVIRender_Visual@@@Z
_TEXT	SEGMENT
??$_Destroy_in_place@PAPAVIRender_Visual@@@std@@YAXAAPAPAVIRender_Visual@@@Z PROC ; std::_Destroy_in_place<IRender_Visual * *>, COMDAT
; __Obj$dead$ = ecx

; 295  :     if constexpr (is_array_v<_Ty>) {
; 296  :         _Destroy_range(_Obj, _Obj + extent_v<_Ty>);
; 297  :     } else {
; 298  :         _Obj.~_Ty();
; 299  :     }
; 300  : }

	ret	0
??$_Destroy_in_place@PAPAVIRender_Visual@@@std@@YAXAAPAPAVIRender_Visual@@@Z ENDP ; std::_Destroy_in_place<IRender_Visual * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ?destroy@?$xalloc@PAVIRender_Visual@@@@QAEXPAPAVIRender_Visual@@@Z
_TEXT	SEGMENT
_p$dead$ = 8						; size = 4
?destroy@?$xalloc@PAVIRender_Visual@@@@QAEXPAPAVIRender_Visual@@@Z PROC ; xalloc<IRender_Visual *>::destroy, COMDAT
; _this$dead$ = ecx

; 85   : 							void					destroy			(pointer p)								{	std::_Destroy_in_place(p);			}

	ret	4
?destroy@?$xalloc@PAVIRender_Visual@@@@QAEXPAPAVIRender_Visual@@@Z ENDP ; xalloc<IRender_Visual *>::destroy
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$destroy@PAVIRender_Visual@@@?$_Normal_allocator_traits@V?$xalloc@PAVIRender_Visual@@@@@std@@SAXAAV?$xalloc@PAVIRender_Visual@@@@PAPAVIRender_Visual@@@Z
_TEXT	SEGMENT
??$destroy@PAVIRender_Visual@@@?$_Normal_allocator_traits@V?$xalloc@PAVIRender_Visual@@@@@std@@SAXAAV?$xalloc@PAVIRender_Visual@@@@PAPAVIRender_Visual@@@Z PROC ; std::_Normal_allocator_traits<xalloc<IRender_Visual *> >::destroy<IRender_Visual *>, COMDAT
; __Al$dead$ = ecx
; __Ptr$dead$ = edx

; 579  :         if constexpr (_Uses_default_destroy<_Alloc, _Ty*>::value) {
; 580  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 581  :             _STD destroy_at(_Ptr);
; 582  : #else // __cpp_lib_constexpr_dynamic_alloc
; 583  :             _Ptr->~_Ty();
; 584  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 585  :         } else {
; 586  :             _Al.destroy(_Ptr);
; 587  :         }
; 588  :     }

	ret	0
??$destroy@PAVIRender_Visual@@@?$_Normal_allocator_traits@V?$xalloc@PAVIRender_Visual@@@@@std@@SAXAAV?$xalloc@PAVIRender_Visual@@@@PAPAVIRender_Visual@@@Z ENDP ; std::_Normal_allocator_traits<xalloc<IRender_Visual *> >::destroy<IRender_Visual *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$_Unfancy@PAVIRender_Visual@@@std@@YAPAPAVIRender_Visual@@PAPAV1@@Z
_TEXT	SEGMENT
??$_Unfancy@PAVIRender_Visual@@@std@@YAPAPAVIRender_Visual@@PAPAV1@@Z PROC ; std::_Unfancy<IRender_Visual *>, COMDAT
; __Ptr$ = ecx

; 266  :     return _Ptr;

	mov	eax, ecx

; 267  : }

	ret	0
??$_Unfancy@PAVIRender_Visual@@@std@@YAPAPAVIRender_Visual@@PAPAV1@@Z ENDP ; std::_Unfancy<IRender_Visual *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Destroy_range@V?$xalloc@PAVIRender_Visual@@@@@std@@YAXPAPAVIRender_Visual@@QAPAV1@AAV?$xalloc@PAVIRender_Visual@@@@@Z
_TEXT	SEGMENT
__Al$dead$ = 8						; size = 4
??$_Destroy_range@V?$xalloc@PAVIRender_Visual@@@@@std@@YAXPAPAVIRender_Visual@@QAPAV1@AAV?$xalloc@PAVIRender_Visual@@@@@Z PROC ; std::_Destroy_range<xalloc<IRender_Visual *> >, COMDAT
; __First$dead$ = ecx
; __Last$dead$ = edx

; 901  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 902  :     using _Ty = typename _Alloc::value_type;
; 903  :     if constexpr (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 904  :         for (; _First != _Last; ++_First) {
; 905  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 906  :         }
; 907  :     }
; 908  : }

	ret	0
??$_Destroy_range@V?$xalloc@PAVIRender_Visual@@@@@std@@YAXPAPAVIRender_Visual@@QAPAV1@AAV?$xalloc@PAVIRender_Visual@@@@@Z ENDP ; std::_Destroy_range<xalloc<IRender_Visual *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Destroy@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@AAEXPAPAVIRender_Visual@@0@Z
_TEXT	SEGMENT
__First$dead$ = 8					; size = 4
__Last$dead$ = 12					; size = 4
?_Destroy@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@AAEXPAPAVIRender_Visual@@0@Z PROC ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::_Destroy, COMDAT
; _this$dead$ = ecx

; 1666 :         // destroy [_First, _Last) using allocator
; 1667 :         _Destroy_range(_First, _Last, _Getal());
; 1668 :     }

	ret	8
?_Destroy@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@AAEXPAPAVIRender_Visual@@0@Z ENDP ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
;	COMDAT ??$xr_free@PAVIRender_Visual@@@@YAXAAPAPAVIRender_Visual@@@Z
_TEXT	SEGMENT
??$xr_free@PAVIRender_Visual@@@@YAXAAPAPAVIRender_Visual@@@Z PROC ; xr_free<IRender_Visual *>, COMDAT
; _P$ = ecx

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	push	esi
	mov	esi, ecx
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN2@xr_free
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	mov	DWORD PTR [esi], 0
$LN2@xr_free:
	pop	esi
	ret	0
??$xr_free@PAVIRender_Visual@@@@YAXAAPAPAVIRender_Visual@@@Z ENDP ; xr_free<IRender_Visual *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ?deallocate@?$xalloc@PAVIRender_Visual@@@@QBEXPAPAVIRender_Visual@@I@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
_n$dead$ = 12						; size = 4
?deallocate@?$xalloc@PAVIRender_Visual@@@@QBEXPAPAVIRender_Visual@@I@Z PROC ; xalloc<IRender_Visual *>::deallocate, COMDAT
; _this$dead$ = ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	mov	eax, DWORD PTR _p$[esp-4]
	test	eax, eax
	je	SHORT $LN4@deallocate
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN4@deallocate:
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h

; 82   : 							void					deallocate		(pointer p, size_type n) const			{	xr_free	(p);				}

	ret	8
?deallocate@?$xalloc@PAVIRender_Visual@@@@QBEXPAPAVIRender_Visual@@I@Z ENDP ; xalloc<IRender_Visual *>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$xalloc@PAVIRender_Visual@@@@V?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@std@@$00@std@@QAEAAV?$xalloc@PAVIRender_Visual@@@@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$xalloc@PAVIRender_Visual@@@@V?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@std@@$00@std@@QAEAAV?$xalloc@PAVIRender_Visual@@@@XZ PROC ; std::_Compressed_pair<xalloc<IRender_Visual *>,std::_Vector_val<std::_Simple_types<IRender_Visual *> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1339 :         return *this;

	mov	eax, ecx

; 1340 :     }

	ret	0
?_Get_first@?$_Compressed_pair@V?$xalloc@PAVIRender_Visual@@@@V?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@std@@$00@std@@QAEAAV?$xalloc@PAVIRender_Visual@@@@XZ ENDP ; std::_Compressed_pair<xalloc<IRender_Visual *>,std::_Vector_val<std::_Simple_types<IRender_Visual *> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Getal@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@AAEAAV?$xalloc@PAVIRender_Visual@@@@XZ
_TEXT	SEGMENT
?_Getal@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@AAEAAV?$xalloc@PAVIRender_Visual@@@@XZ PROC ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::_Getal, COMDAT
; _this$ = ecx

; 1805 :         return _Mypair._Get_first();

	mov	eax, ecx

; 1806 :     }

	ret	0
?_Getal@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@AAEAAV?$xalloc@PAVIRender_Visual@@@@XZ ENDP ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Change_array@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@AAEXQAPAVIRender_Visual@@II@Z
_TEXT	SEGMENT
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@AAEXQAPAVIRender_Visual@@II@Z PROC ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::_Change_array, COMDAT
; _this$ = ecx

; 1723 :         const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

	push	esi
	mov	esi, ecx

; 1724 :         // orphan all iterators, discard old array, acquire new array
; 1725 :         auto& _My_data    = _Mypair._Myval2;
; 1726 :         pointer& _Myfirst = _My_data._Myfirst;
; 1727 :         pointer& _Mylast  = _My_data._Mylast;
; 1728 :         pointer& _Myend   = _My_data._Myend;
; 1729 : 
; 1730 :         _My_data._Orphan_all();
; 1731 : 
; 1732 :         if (_Myfirst) { // destroy and deallocate old array

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN7@Change_arr
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN7@Change_arr:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1737 :         _Myfirst = _Newvec;

	mov	ecx, DWORD PTR __Newvec$[esp]

; 1738 :         _Mylast  = _Newvec + _Newsize;

	mov	eax, DWORD PTR __Newsize$[esp]
	mov	DWORD PTR [esi], ecx
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [esi+4], eax

; 1739 :         _Myend   = _Newvec + _Newcapacity;

	mov	eax, DWORD PTR __Newcapacity$[esp]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [esi+8], eax
	pop	esi

; 1740 :     }

	ret	12					; 0000000cH
?_Change_array@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@AAEXQAPAVIRender_Visual@@II@Z ENDP ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@QAEPAPAVIRender_Visual@@QAPAV2@ABQAV2@@Z
_TEXT	SEGMENT
__Newvec$ = -32						; size = 4
tv363 = -28						; size = 4
__Newsize$1$ = -24					; size = 4
tv362 = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@QAEPAPAVIRender_Visual@@QAPAV2@ABQAV2@@Z PROC ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::_Emplace_reallocate<IRender_Visual * const &>, COMDAT
; _this$ = ecx

; 752  :     _CONSTEXPR20_CONTAINER pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Emplace_reallocate@ABQAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@QAEPAPAVIRender_Visual@@QAPAV2@ABQAV2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 20					; 00000014H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	esi, ecx

; 753  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 754  :         _Alty& _Al        = _Getal();
; 755  :         auto& _My_data    = _Mypair._Myval2;
; 756  :         pointer& _Myfirst = _My_data._Myfirst;
; 757  :         pointer& _Mylast  = _My_data._Mylast;
; 758  : 
; 759  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 760  : 
; 761  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

	mov	edx, DWORD PTR [esi]
	mov	ebx, DWORD PTR __Whereptr$[ebp]
	sub	ebx, edx
	sar	ebx, 2

; 762  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

	mov	eax, DWORD PTR [esi+4]
	sub	eax, edx
	sar	eax, 2

; 763  : 
; 764  :         if (_Oldsize == max_size()) {

	cmp	eax, 1073741823				; 3fffffffH
	je	$LN32@Emplace_re

; 766  :         }
; 767  : 
; 768  :         const size_type _Newsize     = _Oldsize + 1;

	lea	edi, DWORD PTR [eax+1]
	mov	DWORD PTR __Newsize$1$[ebp], edi

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	ecx, DWORD PTR [esi+8]
	sub	ecx, edx
	sar	ecx, 2

; 1675 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	mov	edx, ecx
	shr	edx, 1
	mov	eax, 1073741823				; 3fffffffH
	sub	eax, edx
	cmp	ecx, eax
	jbe	SHORT $LN12@Emplace_re

; 1676 :             return _Max; // geometric growth would overflow

	mov	eax, 1073741823				; 3fffffffH
	jmp	SHORT $LN13@Emplace_re
$LN12@Emplace_re:

; 1677 :         }
; 1678 : 
; 1679 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	lea	eax, DWORD PTR [edx+ecx]

; 1680 : 
; 1681 :         if (_Geometric < _Newsize) {

	cmp	eax, edi
	cmovb	eax, edi
$LN13@Emplace_re:
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 107  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	shl	eax, 2
	mov	DWORD PTR tv363[ebp], eax
	push	eax
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 771  :         const pointer _Newvec           = _Al.allocate(_Newcapacity);

	mov	edi, eax
	mov	DWORD PTR __Newvec$[ebp], edi

; 772  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;
; 773  :         pointer _Constructed_first      = _Constructed_last;
; 774  : 
; 775  :         _TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 776  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

	lea	eax, DWORD PTR [edi+ebx*4]
	mov	DWORD PTR tv362[ebp], eax
	mov	ecx, DWORD PTR _<_Val_0>$[ebp]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], ecx

; 777  :         _Constructed_first = _Newvec + _Whereoff;
; 778  : 
; 779  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

	mov	ecx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi]
	mov	ebx, DWORD PTR __Whereptr$[ebp]
	push	edi
	cmp	ebx, ecx
	jne	SHORT $LN4@Emplace_re

; 780  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);

	push	ecx
	push	eax
	call	?_Umove_if_noexcept@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@AAEXPAPAVIRender_Visual@@00@Z ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::_Umove_if_noexcept

; 781  :         } else { // provide basic guarantee

	jmp	SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 782  :             _Umove(_Myfirst, _Whereptr, _Newvec);

	push	ebx
	push	eax
	call	?_Umove@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@AAEPAPAVIRender_Visual@@PAPAV3@00@Z ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::_Umove

; 783  :             _Constructed_first = _Newvec;
; 784  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

	mov	ecx, DWORD PTR tv362[ebp]
	lea	eax, DWORD PTR [ecx+4]
	push	eax
	push	DWORD PTR [esi+4]
	push	ebx
	call	?_Umove@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@AAEPAPAVIRender_Visual@@PAPAV3@00@Z ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::_Umove
$LN5@Emplace_re:
	mov	DWORD PTR __$EHRec$[ebp+12], -1

; 1732 :         if (_Myfirst) { // destroy and deallocate old array

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN27@Emplace_re
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory.h

; 109  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	push	eax
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN27@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1737 :         _Myfirst = _Newvec;

	mov	DWORD PTR [esi], edi

; 1738 :         _Mylast  = _Newvec + _Newsize;

	mov	eax, DWORD PTR __Newsize$1$[ebp]
	lea	ecx, DWORD PTR [edi+eax*4]
	mov	DWORD PTR [esi+4], ecx

; 1739 :         _Myend   = _Newvec + _Newcapacity;

	mov	ecx, DWORD PTR tv363[ebp]
	add	ecx, edi
	mov	DWORD PTR [esi+8], ecx

; 790  :         _CATCH_END
; 791  : 
; 792  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 793  :         return _Newvec + _Whereoff;

	mov	eax, DWORD PTR tv362[ebp]

; 794  :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
__catch$??$_Emplace_reallocate@ABQAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@QAEPAPAVIRender_Visual@@QAPAV2@ABQAV2@@Z$0:

; 785  :         }
; 786  :         _CATCH_ALL
; 787  :         _Destroy(_Constructed_first, _Constructed_last);
; 788  :         _Al.deallocate(_Newvec, _Newcapacity);

	push	ecx
	push	DWORD PTR __Newvec$[ebp]
	call	?deallocate@?$xalloc@PAVIRender_Visual@@@@QBEXPAPAVIRender_Visual@@I@Z ; xalloc<IRender_Visual *>::deallocate

; 789  :         _RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8
$LN32@Emplace_re:

; 765  :             _Xlength();

	call	?_Xlength@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@CAXXZ ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::_Xlength
$LN30@Emplace_re:
	int	3
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Emplace_reallocate@ABQAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@QAEPAPAVIRender_Visual@@QAPAV2@ABQAV2@@Z:
	npad	1
	npad	1
	mov	eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@ABQAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@QAEPAPAVIRender_Visual@@QAPAV2@ABQAV2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@ABQAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@QAEPAPAVIRender_Visual@@QAPAV2@ABQAV2@@Z ENDP ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::_Emplace_reallocate<IRender_Visual * const &>
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@ABQAVIRender_Visual@@@std@@YAABQAVIRender_Visual@@ABQAV1@@Z
_TEXT	SEGMENT
??$forward@ABQAVIRender_Visual@@@std@@YAABQAVIRender_Visual@@ABQAV1@@Z PROC ; std::forward<IRender_Visual * const &>, COMDAT
; __Arg$ = ecx

; 1386 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, ecx

; 1387 : }

	ret	0
??$forward@ABQAVIRender_Visual@@@std@@YAABQAVIRender_Visual@@ABQAV1@@Z ENDP ; std::forward<IRender_Visual * const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$emplace_back@ABQAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@QAE?A_TABQAVIRender_Visual@@@Z
_TEXT	SEGMENT
_<_Val_0>$ = 8						; size = 4
??$emplace_back@ABQAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@QAE?A_TABQAVIRender_Visual@@@Z PROC ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::emplace_back<IRender_Visual * const &>, COMDAT
; _this$ = ecx

; 727  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 728  :         auto& _My_data   = _Mypair._Myval2;
; 729  :         pointer& _Mylast = _My_data._Mylast;
; 730  :         if (_Mylast != _My_data._Myend) {

	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, DWORD PTR [ecx+8]
	je	SHORT $LN2@emplace_ba

; 713  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

	mov	eax, DWORD PTR _<_Val_0>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 714  :         _Orphan_range(_Mylast, _Mylast);
; 715  :         _Ty& _Result = *_Mylast;
; 716  :         ++_Mylast;

	add	DWORD PTR [ecx+4], 4

; 735  : #if _HAS_CXX17
; 736  :         return _Result;
; 737  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 738  :         (void) _Result;
; 739  : #endif // _HAS_CXX17
; 740  :     }

	ret	4
$LN2@emplace_ba:

; 731  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);
; 732  :         }
; 733  : 
; 734  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

	push	DWORD PTR _<_Val_0>$[esp-4]
	push	edx
	call	??$_Emplace_reallocate@ABQAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@QAEPAPAVIRender_Visual@@QAPAV2@ABQAV2@@Z ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::_Emplace_reallocate<IRender_Visual * const &>

; 735  : #if _HAS_CXX17
; 736  :         return _Result;
; 737  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 738  :         (void) _Result;
; 739  : #endif // _HAS_CXX17
; 740  :     }

	ret	4
??$emplace_back@ABQAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@QAE?A_TABQAVIRender_Visual@@@Z ENDP ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::emplace_back<IRender_Visual * const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?push_back@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@QAEXABQAVIRender_Visual@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@QAEXABQAVIRender_Visual@@@Z PROC ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::push_back, COMDAT
; _this$ = ecx

; 730  :         if (_Mylast != _My_data._Myend) {

	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, DWORD PTR [ecx+8]
	je	SHORT $LN4@push_back

; 713  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

	mov	eax, DWORD PTR __Val$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 714  :         _Orphan_range(_Mylast, _Mylast);
; 715  :         _Ty& _Result = *_Mylast;
; 716  :         ++_Mylast;

	add	DWORD PTR [ecx+4], 4

; 743  :         emplace_back(_Val);
; 744  :     }

	ret	4
$LN4@push_back:

; 734  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

	push	DWORD PTR __Val$[esp-4]
	push	edx
	call	??$_Emplace_reallocate@ABQAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@QAEPAPAVIRender_Visual@@QAPAV2@ABQAV2@@Z ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::_Emplace_reallocate<IRender_Visual * const &>

; 743  :         emplace_back(_Val);
; 744  :     }

	ret	4
?push_back@?$vector@PAVIRender_Visual@@V?$xalloc@PAVIRender_Visual@@@@@std@@QAEXABQAVIRender_Visual@@@Z ENDP ; std::vector<IRender_Visual *,xalloc<IRender_Visual *> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
;	COMDAT ??Ashared_str@@QAEDI@Z
_TEXT	SEGMENT
_id$dead$ = 8						; size = 4
??Ashared_str@@QAEDI@Z PROC				; shared_str::operator[], COMDAT
; _this$ = ecx

; 67   : 	char				operator[]	(size_t id)						{	return p_->value[id];							}

	mov	eax, DWORD PTR [ecx]
	mov	al, BYTE PTR [eax+12]
	ret	4
??Ashared_str@@QAEDI@Z ENDP				; shared_str::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\modelpool.h
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\modelpool.h
;	COMDAT ??0ModelDef@CModelPool@@QAE@XZ
_TEXT	SEGMENT
??0ModelDef@CModelPool@@QAE@XZ PROC			; CModelPool::ModelDef::ModelDef, COMDAT
; _this$ = ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 57   : 						shared_str	()								{	p_ = 0;											}

	mov	DWORD PTR [ecx], 0
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\modelpool.h

; 29   :         ModelDef()			{ refs=0;model=0; }

	mov	eax, ecx
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+4], 0
	ret	0
??0ModelDef@CModelPool@@QAE@XZ ENDP			; CModelPool::ModelDef::ModelDef
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
;	COMDAT ?strext@@YAPADPBD@Z
_TEXT	SEGMENT
?strext@@YAPADPBD@Z PROC				; strext, COMDAT
; _S$ = ecx

; 171  : {	return (char*) strrchr(S,'.');	}

	push	46					; 0000002eH
	push	ecx
	call	DWORD PTR __imp__strrchr
	add	esp, 8
	ret	0
?strext@@YAPADPBD@Z ENDP				; strext
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
;	COMDAT ??0shared_str@@QAE@PBD@Z
_TEXT	SEGMENT
_rhs$ = 8						; size = 4
??0shared_str@@QAE@PBD@Z PROC				; shared_str::shared_str, COMDAT
; _this$ = ecx

; 58   : 						shared_str	(str_c rhs) 					{	p_ = 0;	_set(rhs);								}

	push	esi

; 52   : 	void				_set		(str_c rhs) 					{	str_value* v = g_pStringContainer->dock(rhs); if (0!=v) v->dwReference++; _dec(); p_ = v;	}

	push	DWORD PTR _rhs$[esp]

; 58   : 						shared_str	(str_c rhs) 					{	p_ = 0;	_set(rhs);								}

	mov	esi, ecx

; 52   : 	void				_set		(str_c rhs) 					{	str_value* v = g_pStringContainer->dock(rhs); if (0!=v) v->dwReference++; _dec(); p_ = v;	}

	mov	ecx, DWORD PTR __imp_?g_pStringContainer@@3PAVstr_container@@A

; 58   : 						shared_str	(str_c rhs) 					{	p_ = 0;	_set(rhs);								}

	mov	DWORD PTR [esi], 0

; 52   : 	void				_set		(str_c rhs) 					{	str_value* v = g_pStringContainer->dock(rhs); if (0!=v) v->dwReference++; _dec(); p_ = v;	}

	mov	ecx, DWORD PTR [ecx]
	call	DWORD PTR __imp_?dock@str_container@@QAEPAUstr_value@@PBD@Z
	test	eax, eax
	je	SHORT $LN4@shared_str
	inc	DWORD PTR [eax]
$LN4@shared_str:

; 50   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN10@shared_str
	dec	DWORD PTR [ecx]
$LN10@shared_str:

; 58   : 						shared_str	(str_c rhs) 					{	p_ = 0;	_set(rhs);								}

	mov	DWORD PTR [esi], eax
	mov	eax, esi
	pop	esi
	ret	4
??0shared_str@@QAE@PBD@Z ENDP				; shared_str::shared_str
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
;	COMDAT ?equal@shared_str@@QBE_NABV1@@Z
_TEXT	SEGMENT
_rhs$ = 8						; size = 4
?equal@shared_str@@QBE_NABV1@@Z PROC			; shared_str::equal, COMDAT
; _this$ = ecx

; 73   : 	bool				equal		(const shared_str & rhs) const	{	return (p_ == rhs.p_);							}

	mov	eax, DWORD PTR _rhs$[esp-4]
	mov	ecx, DWORD PTR [ecx]
	cmp	ecx, DWORD PTR [eax]
	sete	al
	ret	4
?equal@shared_str@@QBE_NABV1@@Z ENDP			; shared_str::equal
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
;	COMDAT ?xr_strcmp@@YAHPBD0@Z
_TEXT	SEGMENT
?xr_strcmp@@YAHPBD0@Z PROC				; xr_strcmp, COMDAT
; _S1$ = ecx
; _S2$ = edx

; 183  : {	return (int)strcmp(S1,S2);  }

$LL3@xr_strcmp:
	mov	al, BYTE PTR [ecx]
	cmp	al, BYTE PTR [edx]
	jne	SHORT $LN4@xr_strcmp
	test	al, al
	je	SHORT $LN5@xr_strcmp
	mov	al, BYTE PTR [ecx+1]
	cmp	al, BYTE PTR [edx+1]
	jne	SHORT $LN4@xr_strcmp
	add	ecx, 2
	add	edx, 2
	test	al, al
	jne	SHORT $LL3@xr_strcmp
$LN5@xr_strcmp:
	xor	eax, eax
	ret	0
$LN4@xr_strcmp:
	sbb	eax, eax
	or	eax, 1
	ret	0
?xr_strcmp@@YAHPBD0@Z ENDP				; xr_strcmp
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
;	COMDAT ?xr_strcmp@@YAHABVshared_str@@0@Z
_TEXT	SEGMENT
?xr_strcmp@@YAHABVshared_str@@0@Z PROC			; xr_strcmp, COMDAT
; _a$ = ecx
; _b$ = edx

; 73   : 	bool				equal		(const shared_str & rhs) const	{	return (p_ == rhs.p_);							}

	mov	eax, DWORD PTR [edx]

; 103  : IC int	xr_strcmp		(const shared_str & a, const shared_str & b)		{ 

	push	esi

; 73   : 	bool				equal		(const shared_str & rhs) const	{	return (p_ == rhs.p_);							}

	mov	esi, DWORD PTR [ecx]
	cmp	esi, eax

; 104  : 	if (a.equal(b))		return 0;

	je	SHORT $LN19@xr_strcmp

; 65   : 	str_c				operator*	() const						{	return p_?p_->value:0;							}

	lea	ecx, DWORD PTR [eax+12]
	neg	eax
	sbb	eax, eax
	and	eax, ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 183  : {	return (int)strcmp(S1,S2);  }

	lea	ecx, DWORD PTR [esi+12]
	neg	esi
	sbb	esi, esi
	and	esi, ecx
	npad	5
$LL17@xr_strcmp:
	mov	cl, BYTE PTR [esi]
	cmp	cl, BYTE PTR [eax]
	jne	SHORT $LN18@xr_strcmp
	test	cl, cl
	je	SHORT $LN19@xr_strcmp
	mov	cl, BYTE PTR [esi+1]
	cmp	cl, BYTE PTR [eax+1]
	jne	SHORT $LN18@xr_strcmp
	add	esi, 2
	add	eax, 2
	test	cl, cl
	jne	SHORT $LL17@xr_strcmp
$LN19@xr_strcmp:
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 106  : }

	xor	eax, eax
	pop	esi
	ret	0
$LN18@xr_strcmp:
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 183  : {	return (int)strcmp(S1,S2);  }

	sbb	eax, eax
	or	eax, 1
	pop	esi
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 106  : }

	ret	0
?xr_strcmp@@YAHABVshared_str@@0@Z ENDP			; xr_strcmp
_TEXT	ENDS
END
