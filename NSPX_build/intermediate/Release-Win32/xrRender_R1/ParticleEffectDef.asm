; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30146.0 

	TITLE	i:\vitalya\mine\nsprojectx\nspx_build\intermediate\release-win32\xrrender_r1\particleeffectdef.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BB@FMONJHAC@PS?3?3CPEDef?3?3Load@	; `string'
PUBLIC	??_C@_0EB@BBEGCBBO@I?3?2Vitalya?2mine?2NSProjectX?2laye@ ; `string'
PUBLIC	??_C@_0CA@IDNJEKNI@F?4find_chunk?$CIPED_CHUNK_VERSION?$CJ@ ; `string'
PUBLIC	??_C@_0BN@ICOPLHOD@F?4find_chunk?$CIPED_CHUNK_NAME?$CJ@ ; `string'
PUBLIC	??_C@_0CD@OIEJMBGP@F?4find_chunk?$CIPED_CHUNK_EFFECTDA@ ; `string'
PUBLIC	??_C@_02IDNJGBJI@sz@				; `string'
PUBLIC	??_C@_0BP@JKHDECKB@F?4find_chunk?$CIPED_CHUNK_SPRITE?$CJ@ ; `string'
PUBLIC	??_C@_0BO@IKODAKGG@F?4find_chunk?$CIPED_CHUNK_FRAME?$CJ@ ; `string'
PUBLIC	??_C@_0CC@IDABNAON@F?4find_chunk?$CIPED_CHUNK_TIMELIMI@ ; `string'
PUBLIC	??_C@_0CC@DAMJKPGK@F?4find_chunk?$CIPED_CHUNK_COLLISIO@ ; `string'
PUBLIC	??_C@_0CC@OEJGKLDH@F?4find_chunk?$CIPED_CHUNK_VEL_SCAL@ ; `string'
EXTRN	__imp_?r_chunk@?$IReaderBase@VIReader@@@@QAEHIPAX@Z:PROC
EXTRN	__imp_?r_fvector3@?$IReaderBase@VIReader@@@@QAEXAAU?$_vector3@M@@@Z:PROC
EXTRN	__imp_?r_u16@?$IReaderBase@VIReader@@@@QAEGXZ:PROC
EXTRN	__imp_?_inc@?$resptr_base@UShader@@@@IAEXXZ:PROC
EXTRN	__imp_?w_fvector3@IWriter@@QAEXABU?$_vector3@M@@@Z:PROC
EXTRN	__imp_?w_float@IWriter@@QAEXM@Z:PROC
EXTRN	__imp_?w_chunk@IWriter@@QAEXIPAXI@Z:PROC
EXTRN	__imp_?w_stringZ@IWriter@@QAEXAAVshared_str@@@Z:PROC
EXTRN	__imp_?close_chunk@IWriter@@QAEXXZ:PROC
EXTRN	__imp_?w_u16@IWriter@@QAEXG@Z:PROC
EXTRN	__imp_?open_chunk@IWriter@@QAEXI@Z:PROC
EXTRN	__imp_?r_stringZ@IReader@@QAEXAAVshared_str@@@Z:PROC
EXTRN	__imp_?RayPick@CObjectSpace@@QAEHABU?$_vector3@M@@0MW4rq_target@collide@@AAUrq_result@4@PAVCObject@@@Z:PROC
EXTRN	__imp_??1CMemoryWriter@@UAE@XZ:PROC
EXTRN	__imp_??0CMemoryWriter@@QAE@XZ:PROC
;	COMDAT ?ignore_always@?DF@??Load@CPEDef@PS@@QAEHAAVIReader@@@Z@4_NA
_BSS	SEGMENT
?ignore_always@?DF@??Load@CPEDef@PS@@QAEHAAVIReader@@@Z@4_NA DB 01H DUP (?) ; `PS::CPEDef::Load'::`53'::ignore_always
_BSS	ENDS
;	COMDAT ?ignore_always@?CO@??Load@CPEDef@PS@@QAEHAAVIReader@@@Z@4_NA
_BSS	SEGMENT
?ignore_always@?CO@??Load@CPEDef@PS@@QAEHAAVIReader@@@Z@4_NA DB 01H DUP (?) ; `PS::CPEDef::Load'::`46'::ignore_always
_BSS	ENDS
;	COMDAT ?ignore_always@?CH@??Load@CPEDef@PS@@QAEHAAVIReader@@@Z@4_NA
_BSS	SEGMENT
?ignore_always@?CH@??Load@CPEDef@PS@@QAEHAAVIReader@@@Z@4_NA DB 01H DUP (?) ; `PS::CPEDef::Load'::`39'::ignore_always
_BSS	ENDS
;	COMDAT ?ignore_always@?CA@??Load@CPEDef@PS@@QAEHAAVIReader@@@Z@4_NA
_BSS	SEGMENT
?ignore_always@?CA@??Load@CPEDef@PS@@QAEHAAVIReader@@@Z@4_NA DB 01H DUP (?) ; `PS::CPEDef::Load'::`32'::ignore_always
_BSS	ENDS
;	COMDAT ?ignore_always@?BJ@??Load@CPEDef@PS@@QAEHAAVIReader@@@Z@4_NA
_BSS	SEGMENT
?ignore_always@?BJ@??Load@CPEDef@PS@@QAEHAAVIReader@@@Z@4_NA DB 01H DUP (?) ; `PS::CPEDef::Load'::`25'::ignore_always
_BSS	ENDS
;	COMDAT ?ignore_always@?BC@??Load@CPEDef@PS@@QAEHAAVIReader@@@Z@4_NA
_BSS	SEGMENT
?ignore_always@?BC@??Load@CPEDef@PS@@QAEHAAVIReader@@@Z@4_NA DB 01H DUP (?) ; `PS::CPEDef::Load'::`18'::ignore_always
_BSS	ENDS
;	COMDAT ?ignore_always@?O@??Load@CPEDef@PS@@QAEHAAVIReader@@@Z@4_NA
_BSS	SEGMENT
?ignore_always@?O@??Load@CPEDef@PS@@QAEHAAVIReader@@@Z@4_NA DB 01H DUP (?) ; `PS::CPEDef::Load'::`14'::ignore_always
_BSS	ENDS
;	COMDAT ?ignore_always@?9??Load@CPEDef@PS@@QAEHAAVIReader@@@Z@4_NA
_BSS	SEGMENT
?ignore_always@?9??Load@CPEDef@PS@@QAEHAAVIReader@@@Z@4_NA DB 01H DUP (?) ; `PS::CPEDef::Load'::`10'::ignore_always
_BSS	ENDS
;	COMDAT ?ignore_always@?3??Load@CPEDef@PS@@QAEHAAVIReader@@@Z@4_NA
_BSS	SEGMENT
?ignore_always@?3??Load@CPEDef@PS@@QAEHAAVIReader@@@Z@4_NA DB 01H DUP (?) ; `PS::CPEDef::Load'::`4'::ignore_always
_BSS	ENDS
;	COMDAT ??_C@_0CC@OEJGKLDH@F?4find_chunk?$CIPED_CHUNK_VEL_SCAL@
CONST	SEGMENT
??_C@_0CC@OEJGKLDH@F?4find_chunk?$CIPED_CHUNK_VEL_SCAL@ DB 'F.find_chunk('
	DB	'PED_CHUNK_VEL_SCALE)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@DAMJKPGK@F?4find_chunk?$CIPED_CHUNK_COLLISIO@
CONST	SEGMENT
??_C@_0CC@DAMJKPGK@F?4find_chunk?$CIPED_CHUNK_COLLISIO@ DB 'F.find_chunk('
	DB	'PED_CHUNK_COLLISION)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@IDABNAON@F?4find_chunk?$CIPED_CHUNK_TIMELIMI@
CONST	SEGMENT
??_C@_0CC@IDABNAON@F?4find_chunk?$CIPED_CHUNK_TIMELIMI@ DB 'F.find_chunk('
	DB	'PED_CHUNK_TIMELIMIT)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@IKODAKGG@F?4find_chunk?$CIPED_CHUNK_FRAME?$CJ@
CONST	SEGMENT
??_C@_0BO@IKODAKGG@F?4find_chunk?$CIPED_CHUNK_FRAME?$CJ@ DB 'F.find_chunk'
	DB	'(PED_CHUNK_FRAME)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@JKHDECKB@F?4find_chunk?$CIPED_CHUNK_SPRITE?$CJ@
CONST	SEGMENT
??_C@_0BP@JKHDECKB@F?4find_chunk?$CIPED_CHUNK_SPRITE?$CJ@ DB 'F.find_chun'
	DB	'k(PED_CHUNK_SPRITE)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02IDNJGBJI@sz@
CONST	SEGMENT
??_C@_02IDNJGBJI@sz@ DB 'sz', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@OIEJMBGP@F?4find_chunk?$CIPED_CHUNK_EFFECTDA@
CONST	SEGMENT
??_C@_0CD@OIEJMBGP@F?4find_chunk?$CIPED_CHUNK_EFFECTDA@ DB 'F.find_chunk('
	DB	'PED_CHUNK_EFFECTDATA)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@ICOPLHOD@F?4find_chunk?$CIPED_CHUNK_NAME?$CJ@
CONST	SEGMENT
??_C@_0BN@ICOPLHOD@F?4find_chunk?$CIPED_CHUNK_NAME?$CJ@ DB 'F.find_chunk('
	DB	'PED_CHUNK_NAME)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@IDNJEKNI@F?4find_chunk?$CIPED_CHUNK_VERSION?$CJ@
CONST	SEGMENT
??_C@_0CA@IDNJEKNI@F?4find_chunk?$CIPED_CHUNK_VERSION?$CJ@ DB 'F.find_chu'
	DB	'nk(PED_CHUNK_VERSION)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@BBEGCBBO@I?3?2Vitalya?2mine?2NSProjectX?2laye@
CONST	SEGMENT
??_C@_0EB@BBEGCBBO@I?3?2Vitalya?2mine?2NSProjectX?2laye@ DB 'I:\Vitalya\m'
	DB	'ine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FMONJHAC@PS?3?3CPEDef?3?3Load@
CONST	SEGMENT
??_C@_0BB@FMONJHAC@PS?3?3CPEDef?3?3Load@ DB 'PS::CPEDef::Load', 00H ; `string'
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
PUBLIC	?InitDefault@SFrame@PS@@QAEXXZ			; PS::SFrame::InitDefault
PUBLIC	?zero@?$_flags@I@@QAEAAU1@XZ			; _flags<unsigned int>::zero
PUBLIC	??0pVector@PAPI@@QAE@XZ				; PAPI::pVector::pVector
PUBLIC	??DpVector@PAPI@@QBEMABV01@@Z			; PAPI::pVector::operator*
PUBLIC	??DpVector@PAPI@@QBE?AV01@M@Z			; PAPI::pVector::operator*
PUBLIC	??0pVector@PAPI@@QAE@MMM@Z			; PAPI::pVector::pVector
PUBLIC	??GpVector@PAPI@@QBE?AV01@ABV01@@Z		; PAPI::pVector::operator-
PUBLIC	?length2@pVector@PAPI@@QBEMXZ			; PAPI::pVector::length2
PUBLIC	??4pVector@PAPI@@QAEAAV01@ABV01@@Z		; PAPI::pVector::operator=
PUBLIC	??HpVector@PAPI@@QBE?AV01@ABV01@@Z		; PAPI::pVector::operator+
PUBLIC	??0?$resptr_core@UShader@@Uresptrcode_shader@@@@QAE@PAUShader@@_N@Z ; resptr_core<Shader,resptrcode_shader>::resptr_core<Shader,resptrcode_shader>
PUBLIC	?is@?$_flags@G@@QBEHG@Z				; _flags<unsigned short>::is
PUBLIC	?Load@CPEDef@PS@@QAEHAAVIReader@@@Z		; PS::CPEDef::Load
PUBLIC	?DestroyShader@CPEDef@PS@@QAEXXZ		; PS::CPEDef::DestroyShader
PUBLIC	?CreateShader@CPEDef@PS@@QAEXXZ			; PS::CPEDef::CreateShader
PUBLIC	??1CPEDef@PS@@QAE@XZ				; PS::CPEDef::~CPEDef
PUBLIC	??0CPEDef@PS@@QAE@XZ				; PS::CPEDef::CPEDef
PUBLIC	?ExecuteAnimate@CPEDef@PS@@QAEXPAUParticle@PAPI@@IM@Z ; PS::CPEDef::ExecuteAnimate
PUBLIC	?ExecuteCollision@CPEDef@PS@@QAEXPAUParticle@PAPI@@IMPAVCParticleEffect@2@P6AH1AAU34@ABU?$_vector3@M@@3@Z@Z ; PS::CPEDef::ExecuteCollision
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp
; File I:\Vitalya\mine\NSProjectX\xrCDB\xrCDB.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp
; File I:\Vitalya\mine\NSProjectX\xrCDB\xrCDB.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp
; File I:\Vitalya\mine\NSProjectX\xrEngine\psystem.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp
; File I:\Vitalya\mine\NSProjectX\xrEngine\psystem.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp
; File I:\Vitalya\mine\NSProjectX\xrEngine\psystem.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp
; File I:\Vitalya\mine\NSProjectX\xrEngine\psystem.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp
; File I:\Vitalya\mine\NSProjectX\xrEngine\psystem.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp
; File I:\Vitalya\mine\NSProjectX\xrEngine\psystem.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrEngine\psystem.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrEngine\psystem.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp
; File I:\Vitalya\mine\NSProjectX\xrEngine\psystem.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp
; File I:\Vitalya\mine\NSProjectX\xrEngine\psystem.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp
_TEXT	SEGMENT
_i$1$ = -64						; size = 4
_this$1$ = -60						; size = 4
tv2208 = -56						; size = 4
tv2207 = -52						; size = 4
_n$ = -48						; size = 12
_dir$4 = -36						; size = 12
_RQ$5 = -24						; size = 12
_pt$ = -12						; size = 12
_n$2$ = 8						; size = 4
tv2175 = 8						; size = 4
_particles$ = 8						; size = 4
_n$1$ = 12						; size = 4
tv2177 = 12						; size = 4
_dist$6 = 12						; size = 4
_p_cnt$ = 12						; size = 4
_dt$dead$ = 16						; size = 4
_owner$ = 20						; size = 4
_cb$ = 24						; size = 4
?ExecuteCollision@CPEDef@PS@@QAEXPAUParticle@PAPI@@IMPAVCParticleEffect@2@P6AH1AAU34@ABU?$_vector3@M@@3@Z@Z PROC ; PS::CPEDef::ExecuteCollision
; _this$ = ecx

; 111  : {

	sub	esp, 64					; 00000040H
	push	esi
	mov	esi, ecx

; 114  : 	for(int i = p_cnt-1; i >= 0; i--){

	mov	ecx, DWORD PTR _p_cnt$[esp+64]
	sub	ecx, 1
	mov	DWORD PTR _this$1$[esp+68], esi
	mov	DWORD PTR _i$1$[esp+68], ecx
	js	$LN3@ExecuteCol
	mov	eax, DWORD PTR __imp_?ParticleManager@PAPI@@YAPAVIParticleManager@1@XZ
	lea	edx, DWORD PTR [ecx+ecx*8]
	movss	xmm7, DWORD PTR __real@3727c5ac
	push	ebx
	mov	ebx, DWORD PTR _particles$[esp+68]
	add	ebx, 28					; 0000001cH
	mov	DWORD PTR tv2207[esp+72], eax
	push	ebp
	push	edi
	lea	ebx, DWORD PTR [ebx+edx*8]
	mov	edx, DWORD PTR __imp_?RayPick@CObjectSpace@@QAEHABU?$_vector3@M@@0MW4rq_target@collide@@AAUrq_result@4@PAVCObject@@@Z
	mov	DWORD PTR tv2208[esp+80], edx
	npad	10
$LL4@ExecuteCol:

; 115  : 		Particle &m = particles[i];
; 116  : 
; 117  : 		bool pick_needed;
; 118  : 		int pick_cnt=0;

	movss	xmm3, DWORD PTR [ebx-28]
	xor	ebp, ebp
	movss	xmm5, DWORD PTR [ebx-16]
	movss	xmm4, DWORD PTR [ebx-24]
	movss	xmm6, DWORD PTR [ebx-12]
	movss	xmm2, DWORD PTR [ebx-20]
	movss	xmm0, DWORD PTR [ebx-8]
$LL7@ExecuteCol:
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 36   : 	ICF	SelfRef	sub(const Self &a, const Self &v)		{ x=a.x-v.x;y=a.y-v.y;	z=a.z-v.z;		return *this;	};

	subss	xmm3, xmm5
	subss	xmm4, xmm6
	subss	xmm2, xmm0
	lea	edi, DWORD PTR [ebx-16]
	movaps	xmm1, xmm3
	movss	DWORD PTR _dir$4[esp+80], xmm3
	movaps	xmm0, xmm4
	mulss	xmm1, xmm3
	mulss	xmm0, xmm4
	movss	DWORD PTR _dir$4[esp+84], xmm4
	movss	DWORD PTR _dir$4[esp+88], xmm2

; 167  : 		return x*x + y*y + z*z;

	addss	xmm1, xmm0
	movaps	xmm0, xmm2
	mulss	xmm0, xmm2
	addss	xmm1, xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 764  :             return (float)sqrt(_X);

	sqrtss	xmm0, xmm1
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp

; 124  : 			if (dist>=EPS){

	comiss	xmm0, xmm7
	movss	DWORD PTR _dist$6[esp+76], xmm0
	jb	$LN8@ExecuteCol
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h

; 23   : 	IC 	BOOL	is		(const T mask)						const	{ return mask==(flags&mask);			}

	mov	eax, DWORD PTR [esi+4]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp

; 131  : 				if (g_pGameLevel->ObjectSpace.RayPick(m.posB,dir,dist,RT,RQ,NULL)){	

	lea	ecx, DWORD PTR _RQ$5[esp+80]
	fld	DWORD PTR _dist$6[esp+76]
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h

; 23   : 	IC 	BOOL	is		(const T mask)						const	{ return mask==(flags&mask);			}

	and	eax, 524288				; 00080000H
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 45   : 	ICF SelfRef	div(T s)								{ x/=s;		y/=s;    z/=s;				return *this;	};

	divss	xmm3, xmm0
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp

; 131  : 				if (g_pGameLevel->ObjectSpace.RayPick(m.posB,dir,dist,RT,RQ,NULL)){	

	push	0
	push	ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h

; 23   : 	IC 	BOOL	is		(const T mask)						const	{ return mask==(flags&mask);			}

	or	eax, 1048576				; 00100000H
	shr	eax, 19					; 00000013H
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp

; 131  : 				if (g_pGameLevel->ObjectSpace.RayPick(m.posB,dir,dist,RT,RQ,NULL)){	

	push	eax
	push	ecx
	lea	eax, DWORD PTR _dir$4[esp+96]
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 45   : 	ICF SelfRef	div(T s)								{ x/=s;		y/=s;    z/=s;				return *this;	};

	divss	xmm4, xmm0
	divss	xmm2, xmm0
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp

; 131  : 				if (g_pGameLevel->ObjectSpace.RayPick(m.posB,dir,dist,RT,RQ,NULL)){	

	fstp	DWORD PTR [esp]
	push	eax
	mov	eax, DWORD PTR __imp_?g_pGameLevel@@3PAVIGame_Level@@A
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 45   : 	ICF SelfRef	div(T s)								{ x/=s;		y/=s;    z/=s;				return *this;	};

	movss	DWORD PTR _dir$4[esp+100], xmm3
	movss	DWORD PTR _dir$4[esp+104], xmm4
	movss	DWORD PTR _dir$4[esp+108], xmm2
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp

; 131  : 				if (g_pGameLevel->ObjectSpace.RayPick(m.posB,dir,dist,RT,RQ,NULL)){	

	mov	ecx, DWORD PTR [eax]
	push	edi
	add	ecx, 168				; 000000a8H
	call	edx
	test	eax, eax
	je	$LN6@ExecuteCol

; 133  : 					if (RQ.O){

	cmp	DWORD PTR _RQ$5[esp+80], 0
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 144  : 		x = p.x + d.x*m;

	movss	xmm1, DWORD PTR _RQ$5[esp+84]
	movss	xmm0, DWORD PTR _dir$4[esp+80]
	mulss	xmm0, xmm1
	addss	xmm0, DWORD PTR [edi]
	movss	DWORD PTR _pt$[esp+80], xmm0

; 145  : 		y = p.y + d.y*m;

	movss	xmm0, DWORD PTR _dir$4[esp+84]
	mulss	xmm0, xmm1
	addss	xmm0, DWORD PTR [ebx-12]
	movss	DWORD PTR _pt$[esp+84], xmm0

; 146  : 		z = p.z + d.z*m;

	movss	xmm0, DWORD PTR _dir$4[esp+88]
	mulss	xmm0, xmm1
	addss	xmm0, DWORD PTR [ebx-8]
	movss	DWORD PTR _pt$[esp+88], xmm0
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp

; 133  : 					if (RQ.O){

	je	SHORT $LN11@ExecuteCol
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	movss	xmm4, DWORD PTR __real@3f800000
	xorps	xmm3, xmm3
	movaps	xmm7, xmm3
	movss	DWORD PTR _n$[esp+80], xmm3
	movss	DWORD PTR _n$[esp+84], xmm4
	movss	DWORD PTR _n$[esp+88], xmm7
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp

; 135  : 					}else{

	jmp	$LN58@ExecuteCol
$LN11@ExecuteCol:
; File I:\Vitalya\mine\NSProjectX\xrCDB\xrCDB.h

; 86   : 		IC TRI*					get_tris		()			{ return tris;		}

	mov	eax, DWORD PTR __imp_?g_pGameLevel@@3PAVIGame_Level@@A
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp

; 136  : 						CDB::TRI*	T		=  	g_pGameLevel->ObjectSpace.GetStaticTris()+RQ.element;

	mov	ecx, DWORD PTR _RQ$5[esp+88]
	shl	ecx, 4
; File I:\Vitalya\mine\NSProjectX\xrCDB\xrCDB.h

; 86   : 		IC TRI*					get_tris		()			{ return tris;		}

	mov	eax, DWORD PTR [eax]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp

; 137  : 						Fvector*	verts	=	g_pGameLevel->ObjectSpace.GetStaticVerts();

	mov	edi, DWORD PTR [eax+192]
	add	ecx, DWORD PTR [eax+184]

; 138  : 						n.mknormal(verts[T->verts[0]],verts[T->verts[1]],verts[T->verts[2]]);

	mov	eax, DWORD PTR [ecx+8]
	lea	esi, DWORD PTR [eax+eax*2]
	mov	eax, DWORD PTR [ecx+4]
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 36   : 	ICF	SelfRef	sub(const Self &a, const Self &v)		{ x=a.x-v.x;y=a.y-v.y;	z=a.z-v.z;		return *this;	};

	movss	xmm7, DWORD PTR [edi+esi*4+4]
	movss	xmm1, DWORD PTR [edi+esi*4+8]
	movss	xmm4, DWORD PTR [edi+esi*4]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp

; 138  : 						n.mknormal(verts[T->verts[0]],verts[T->verts[1]],verts[T->verts[2]]);

	lea	edx, DWORD PTR [eax+eax*2]
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 201  : 		if (magnitude> std::numeric_limits<T>::min()) {

	mov	esi, DWORD PTR _this$1$[esp+80]

; 36   : 	ICF	SelfRef	sub(const Self &a, const Self &v)		{ x=a.x-v.x;y=a.y-v.y;	z=a.z-v.z;		return *this;	};

	subss	xmm1, DWORD PTR [edi+edx*4+8]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp

; 138  : 						n.mknormal(verts[T->verts[0]],verts[T->verts[1]],verts[T->verts[2]]);

	mov	eax, DWORD PTR [ecx]
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 36   : 	ICF	SelfRef	sub(const Self &a, const Self &v)		{ x=a.x-v.x;y=a.y-v.y;	z=a.z-v.z;		return *this;	};

	subss	xmm7, DWORD PTR [edi+edx*4+4]
	movss	xmm5, DWORD PTR [edi+edx*4+4]
	movss	xmm3, DWORD PTR [edi+edx*4+8]
	subss	xmm4, DWORD PTR [edi+edx*4]
	movss	xmm6, DWORD PTR [edi+edx*4]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp

; 138  : 						n.mknormal(verts[T->verts[0]],verts[T->verts[1]],verts[T->verts[2]]);

	lea	eax, DWORD PTR [eax+eax*2]
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 36   : 	ICF	SelfRef	sub(const Self &a, const Self &v)		{ x=a.x-v.x;y=a.y-v.y;	z=a.z-v.z;		return *this;	};

	subss	xmm5, DWORD PTR [edi+eax*4+4]
	subss	xmm3, DWORD PTR [edi+eax*4+8]
	subss	xmm6, DWORD PTR [edi+eax*4]
	movaps	xmm2, xmm1

; 201  : 		if (magnitude> std::numeric_limits<T>::min()) {

	lea	edi, DWORD PTR [ebx-16]

; 273  : 		x = v1.y  * v2.z  - v1.z  * v2.y ;

	movaps	xmm0, xmm7

; 36   : 	ICF	SelfRef	sub(const Self &a, const Self &v)		{ x=a.x-v.x;y=a.y-v.y;	z=a.z-v.z;		return *this;	};

	mulss	xmm2, xmm5

; 273  : 		x = v1.y  * v2.z  - v1.z  * v2.y ;

	mulss	xmm0, xmm3

; 274  : 		y = v1.z  * v2.x  - v1.x  * v2.z ;

	mulss	xmm1, xmm6
	subss	xmm2, xmm0
	mulss	xmm7, xmm6
	movaps	xmm0, xmm4

; 275  : 		z = v1.x  * v2.y  - v1.y  * v2.x ;

	mulss	xmm4, xmm5
	mulss	xmm0, xmm3
	subss	xmm7, xmm4
	movss	DWORD PTR _n$1$[esp+76], xmm2
	movss	DWORD PTR _n$[esp+80], xmm2
	subss	xmm0, xmm1
	movss	DWORD PTR _n$[esp+88], xmm7

; 200  : 		T magnitude=x*x + y*y + z*z;

	movaps	xmm4, xmm0

; 274  : 		y = v1.z  * v2.x  - v1.x  * v2.z ;

	movss	DWORD PTR _n$2$[esp+76], xmm0
	movss	DWORD PTR _n$[esp+84], xmm0

; 200  : 		T magnitude=x*x + y*y + z*z;

	movaps	xmm1, xmm4

; 275  : 		z = v1.x  * v2.y  - v1.y  * v2.x ;

	movaps	xmm0, xmm2

; 200  : 		T magnitude=x*x + y*y + z*z;

	mulss	xmm1, xmm4

; 275  : 		z = v1.x  * v2.y  - v1.y  * v2.x ;

	mulss	xmm0, xmm2

; 200  : 		T magnitude=x*x + y*y + z*z;

	addss	xmm1, xmm0
	movaps	xmm0, xmm7
	mulss	xmm0, xmm7
	addss	xmm1, xmm0

; 201  : 		if (magnitude> std::numeric_limits<T>::min()) {

	comiss	xmm1, DWORD PTR __real@00800000
	jbe	SHORT $LN146@ExecuteCol

; 202  : 			magnitude=_sqrt(1/magnitude);

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, xmm1
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 764  :             return (float)sqrt(_X);

	sqrtss	xmm0, xmm0
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 202  : 			magnitude=_sqrt(1/magnitude);

	mulss	xmm2, xmm0

; 203  : 			x *= magnitude;

	mulss	xmm4, xmm0

; 204  : 			y *= magnitude;

	mulss	xmm7, xmm0
	movss	DWORD PTR _n$1$[esp+76], xmm2
	movss	DWORD PTR _n$[esp+80], xmm2
	movss	DWORD PTR _n$[esp+84], xmm4

; 205  : 			z *= magnitude;

	movss	DWORD PTR _n$[esp+88], xmm7
$LN146@ExecuteCol:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp

; 141  : 					pick_cnt++;

	movss	xmm3, DWORD PTR _n$1$[esp+76]
$LN58@ExecuteCol:

; 142  : 					if (cb&&(pick_cnt==1)) if (!cb(owner,m,pt,n)) break;

	mov	ecx, DWORD PTR _cb$[esp+76]
	inc	ebp
	test	ecx, ecx
	je	SHORT $LN14@ExecuteCol
	cmp	ebp, 1
	jne	SHORT $LN14@ExecuteCol
	lea	eax, DWORD PTR _n$[esp+80]
	push	eax
	lea	eax, DWORD PTR _pt$[esp+84]
	push	eax
	lea	eax, DWORD PTR [ebx-28]
	push	eax
	push	DWORD PTR _owner$[esp+88]
	call	ecx
	add	esp, 16					; 00000010H
	test	eax, eax
	je	$LN6@ExecuteCol
	movss	xmm7, DWORD PTR _n$[esp+88]
	movss	xmm4, DWORD PTR _n$[esp+84]
	movss	xmm3, DWORD PTR _n$[esp+80]
$LN14@ExecuteCol:

; 143  : 					if (m_Flags.is(dfCollisionDel)){ 

	test	DWORD PTR [esi+4], 131072		; 00020000H
	jne	$LN143@ExecuteCol
; File I:\Vitalya\mine\NSProjectX\xrEngine\psystem.h

; 40   : 		IC float 	operator*	(const pVector& a) const { return x * a.x + y * a.y + z * a.z; }

	movss	xmm5, DWORD PTR [ebx-4]
	movaps	xmm1, xmm4
	movss	xmm6, DWORD PTR [ebx]
	movaps	xmm0, xmm5
	movss	xmm2, DWORD PTR [ebx+4]
	mulss	xmm0, xmm3
	mulss	xmm1, xmm6
	addss	xmm1, xmm0
	movaps	xmm0, xmm7
	mulss	xmm0, xmm2
	addss	xmm1, xmm0
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp

; 153  : 						if(vt.length2() <= m_fCollideSqrCutoff){

	movss	xmm0, DWORD PTR [esi+120]
; File I:\Vitalya\mine\NSProjectX\xrEngine\psystem.h

; 41   : 		IC pVector 	operator*	(const float s) const { return pVector(x * s, y * s, z * s); }

	mulss	xmm3, xmm1
	mulss	xmm4, xmm1
	mulss	xmm7, xmm1
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp

; 153  : 						if(vt.length2() <= m_fCollideSqrCutoff){

	movaps	xmm1, xmm0
	mulss	xmm1, xmm3
; File I:\Vitalya\mine\NSProjectX\xrEngine\psystem.h

; 44   : 		IC pVector 	operator-	(const pVector& a) const { return pVector(x - a.x, y - a.y, z - a.z); }

	subss	xmm5, xmm3
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp

; 153  : 						if(vt.length2() <= m_fCollideSqrCutoff){

	movaps	xmm3, xmm0
; File I:\Vitalya\mine\NSProjectX\xrEngine\psystem.h

; 44   : 		IC pVector 	operator-	(const pVector& a) const { return pVector(x - a.x, y - a.y, z - a.z); }

	subss	xmm6, xmm4
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp

; 153  : 						if(vt.length2() <= m_fCollideSqrCutoff){

	mulss	xmm0, xmm7
; File I:\Vitalya\mine\NSProjectX\xrEngine\psystem.h

; 44   : 		IC pVector 	operator-	(const pVector& a) const { return pVector(x - a.x, y - a.y, z - a.z); }

	subss	xmm2, xmm7
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp

; 153  : 						if(vt.length2() <= m_fCollideSqrCutoff){

	movss	DWORD PTR tv2175[esp+76], xmm1
	mulss	xmm3, xmm4
	movss	DWORD PTR tv2177[esp+76], xmm0
; File I:\Vitalya\mine\NSProjectX\xrEngine\psystem.h

; 39   : 		IC float 	length2() const { return (x * x + y * y + z * z); }

	movaps	xmm1, xmm6
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	movaps	xmm0, xmm5
; File I:\Vitalya\mine\NSProjectX\xrEngine\psystem.h

; 39   : 		IC float 	length2() const { return (x * x + y * y + z * z); }

	mulss	xmm1, xmm6
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	mulss	xmm0, xmm5
; File I:\Vitalya\mine\NSProjectX\xrEngine\psystem.h

; 39   : 		IC float 	length2() const { return (x * x + y * y + z * z); }

	addss	xmm1, xmm0
	movaps	xmm0, xmm2
	mulss	xmm0, xmm2
	addss	xmm1, xmm0
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp

; 153  : 						if(vt.length2() <= m_fCollideSqrCutoff){

	movss	xmm0, DWORD PTR [esi+124]
	comiss	xmm0, xmm1
	jae	SHORT $LN147@ExecuteCol

; 156  : 							m.vel = vt * m_fCollideOneMinusFriction - vn * m_fCollideResilience;

	movss	xmm1, DWORD PTR [esi+116]
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	movaps	xmm0, xmm1
	mulss	xmm2, xmm1
	mulss	xmm6, xmm0
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp

; 156  : 							m.vel = vt * m_fCollideOneMinusFriction - vn * m_fCollideResilience;

	mulss	xmm5, xmm1
$LN147@ExecuteCol:
; File I:\Vitalya\mine\NSProjectX\xrEngine\psystem.h

; 41   : 		IC pVector 	operator*	(const float s) const { return pVector(x * s, y * s, z * s); }

	subss	xmm6, xmm3
	subss	xmm5, DWORD PTR tv2175[esp+76]
	subss	xmm2, DWORD PTR tv2177[esp+76]
	movss	DWORD PTR [ebx-4], xmm5
	movss	DWORD PTR [ebx], xmm6
	movss	DWORD PTR [ebx+4], xmm2
	movss	xmm3, DWORD PTR [ebx-4]
	movss	xmm4, DWORD PTR [ebx]
	movss	xmm7, DWORD PTR __real@3d072b02

; 43   : 		IC pVector 	operator+	(const pVector& a) const { return pVector(x + a.x, y + a.y, z + a.z); }

	movss	xmm5, DWORD PTR [edi]
	movss	xmm6, DWORD PTR [ebx-12]
	movss	xmm0, DWORD PTR [ebx-8]

; 41   : 		IC pVector 	operator*	(const float s) const { return pVector(x * s, y * s, z * s); }

	mulss	xmm3, xmm7
	mulss	xmm4, xmm7
	mulss	xmm2, xmm7

; 43   : 		IC pVector 	operator+	(const pVector& a) const { return pVector(x + a.x, y + a.y, z + a.z); }

	addss	xmm3, xmm5
	addss	xmm4, xmm6
	addss	xmm2, xmm0

; 50   : 		IC pVector& operator=	(const pVector& a) { x = a.x; y = a.y; z = a.z; return *this; }

	movss	DWORD PTR [ebx-28], xmm3
	movss	DWORD PTR [ebx-24], xmm4
	movss	DWORD PTR [ebx-20], xmm2
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp

; 165  : 		}while(pick_needed&&(pick_cnt<2));

	cmp	ebp, 2
	jge	SHORT $LN6@ExecuteCol
	movss	xmm7, DWORD PTR __real@3727c5ac
	mov	edx, DWORD PTR tv2208[esp+80]
	jmp	$LL7@ExecuteCol
$LN143@ExecuteCol:

; 144  : 	                   	ParticleManager()->RemoveParticle(owner->m_HandleEffect,i);

	call	DWORD PTR tv2207[esp+80]
	mov	ecx, DWORD PTR _owner$[esp+76]
	push	DWORD PTR _i$1$[esp+80]
	mov	edx, DWORD PTR [eax]
	push	DWORD PTR [ecx+80]
	mov	ecx, eax
	call	DWORD PTR [edx+40]

; 145  : 					}else{

	jmp	SHORT $LN6@ExecuteCol
$LN8@ExecuteCol:
; File I:\Vitalya\mine\NSProjectX\xrEngine\psystem.h

; 50   : 		IC pVector& operator=	(const pVector& a) { x = a.x; y = a.y; z = a.z; return *this; }

	movss	DWORD PTR [ebx-28], xmm5
	movss	DWORD PTR [ebx-24], xmm6
	fld	DWORD PTR [ebx-8]
	fstp	DWORD PTR [ebx-20]
$LN6@ExecuteCol:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp

; 114  : 	for(int i = p_cnt-1; i >= 0; i--){

	mov	ecx, DWORD PTR _i$1$[esp+80]
	sub	ebx, 72					; 00000048H
	movss	xmm7, DWORD PTR __real@3727c5ac
	dec	ecx
	mov	edx, DWORD PTR tv2208[esp+80]
	mov	DWORD PTR _i$1$[esp+80], ecx
	test	ecx, ecx
	jns	$LL4@ExecuteCol
	pop	edi
	pop	ebp
	pop	ebx
$LN3@ExecuteCol:
	pop	esi

; 166  : 	}
; 167  : }

	add	esp, 64					; 00000040H
	ret	20					; 00000014H
?ExecuteCollision@CPEDef@PS@@QAEXPAUParticle@PAPI@@IMPAVCParticleEffect@2@P6AH1AAU34@ABU?$_vector3@M@@3@Z@Z ENDP ; PS::CPEDef::ExecuteCollision
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_bitwise.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp
_TEXT	SEGMENT
_a$1 = 8						; size = 4
_particles$ = 8						; size = 4
_p_cnt$ = 12						; size = 4
_dt$dead$ = 16						; size = 4
?ExecuteAnimate@CPEDef@PS@@QAEXPAUParticle@PAPI@@IM@Z PROC ; PS::CPEDef::ExecuteAnimate
; _this$ = ecx

; 101  : 	for(u32 i = 0; i < p_cnt; i++){

	cmp	DWORD PTR _p_cnt$[esp-4], 0
	push	ebp
	mov	ebp, ecx
	movss	xmm2, DWORD PTR [ebp+44]
	mulss	xmm2, DWORD PTR __real@3d072b02
	jbe	$LN3@ExecuteAni

; 100  : 	float speedFac = m_Frame.m_fSpeed * dt;

	movss	xmm3, DWORD PTR __real@bf800000
	xorps	xmm5, xmm5
	movss	xmm4, DWORD PTR __real@3f800000
	movss	xmm6, DWORD PTR __real@3b808081
	movss	xmm7, DWORD PTR __real@437f0000
	push	ebx
	mov	ebx, DWORD PTR _particles$[esp+4]
	push	esi
	push	edi
	add	ebx, 68					; 00000044H
$LL4@ExecuteAni:
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h

; 23   : 	IC 	BOOL	is		(const T mask)						const	{ return mask==(flags&mask);			}

	test	BYTE PTR [ebx+2], 1
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp

; 103  : 		float f						= (float(m.frame)/255.f+((m.flags.is(Particle::ANIMATE_CCW))?-1.f:1.f)*speedFac);

	je	SHORT $LN8@ExecuteAni
	movaps	xmm1, xmm3
	jmp	SHORT $LN9@ExecuteAni
$LN8@ExecuteAni:
	movaps	xmm1, xmm4
$LN9@ExecuteAni:
	movzx	eax, WORD PTR [ebx]
	mulss	xmm1, xmm2
	cvtsi2ss xmm0, eax
	mulss	xmm0, xmm6
	addss	xmm0, xmm1

; 104  : 		if (f>m_Frame.m_iFrameCount)f-=m_Frame.m_iFrameCount;

	cvtsi2ss xmm1, DWORD PTR [ebp+40]
	comiss	xmm0, xmm1
	jbe	SHORT $LN17@ExecuteAni
	subss	xmm0, xmm1
$LN17@ExecuteAni:

; 105  : 		if (f<0.f)					f+=m_Frame.m_iFrameCount;

	comiss	xmm5, xmm0
	jbe	SHORT $LN18@ExecuteAni
	addss	xmm0, xmm1
$LN18@ExecuteAni:

; 106  : 		m.frame						= (u16)iFloor(f*255.f);

	mulss	xmm0, xmm7
; File I:\Vitalya\mine\NSProjectX\xrCore\_bitwise.h

; 84   :     int exponent	= (127 + 31) - ((a >> 23) & 0xFF);

	mov	ecx, 158				; 0000009eH
	movss	DWORD PTR _a$1[esp+12], xmm0
	mov	esi, DWORD PTR _a$1[esp+12]
	mov	eax, esi
	sar	eax, 23					; 00000017H

; 85   :     int r			= (((u32)(a) << 8) | (1U << 31)) >> exponent;

	mov	edi, esi
	movzx	eax, al
	or	edi, -8388608				; ff800000H
	sub	ecx, eax
	shl	edi, 8
	shr	edi, cl

; 86   :     exponent		+= 31-127;
; 87   :     {
; 88   :         int imask	=	(!(((( (1<<(exponent)))-1)>>8)&a));
; 89   :         exponent	-=	(31-127)+32;
; 90   :         exponent	>>=	31;
; 91   :         a			>>=	31;

	mov	eax, esi
	sar	eax, 31					; 0000001fH
	sub	ecx, 96					; 00000060H
	movzx	edx, ax
	mov	eax, 1
	shl	eax, cl
	dec	eax
	sar	eax, 8
	and	eax, esi

; 92   :         r			-=	(imask&a);

	neg	eax
	sbb	eax, eax
	inc	eax
	and	ax, dx
	sub	di, ax
	lea	eax, DWORD PTR [ecx+64]
	sar	eax, 31					; 0000001fH

; 93   :         r			&=	exponent;

	and	di, ax
	xor	di, dx
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp

; 106  : 		m.frame						= (u16)iFloor(f*255.f);

	mov	WORD PTR [ebx], di
	add	ebx, 72					; 00000048H
	sub	DWORD PTR _p_cnt$[esp+12], 1
	jne	$LL4@ExecuteAni
	pop	edi
	pop	esi
	pop	ebx
$LN3@ExecuteAni:
	pop	ebp

; 107  : 	}
; 108  : }

	ret	12					; 0000000cH
?ExecuteAnimate@CPEDef@PS@@QAEXPAUParticle@PAPI@@IM@Z ENDP ; PS::CPEDef::ExecuteAnimate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File I:\Vitalya\mine\NSProjectX\xrCore\xr_resource.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xr_resource.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector2.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xr_resource.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp
_TEXT	SEGMENT
$T1 = -4						; size = 4
??0CPEDef@PS@@QAE@XZ PROC				; PS::CPEDef::CPEDef
; _this$ = ecx

; 17   : {                                          

	push	ecx
	push	esi
	push	edi
	mov	edi, ecx
	lea	ecx, DWORD PTR [edi+48]
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 57   : 						shared_str	()								{	p_ = 0;											}

	mov	DWORD PTR [edi], 0
	mov	DWORD PTR [edi+8], 0
	mov	DWORD PTR [edi+12], 0
; File I:\Vitalya\mine\NSProjectX\xrCore\xr_resource.h

; 61   : 						resptr_core		()												{	p_ = 0;						}

	mov	DWORD PTR [edi+16], 0
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp

; 17   : {                                          

	call	DWORD PTR __imp_??0CMemoryWriter@@QAE@XZ
; File I:\Vitalya\mine\NSProjectX\xrCore\xr_resource.h

; 46   : 	ICF		void		_set	(T * rhs) 							{	if (0!=rhs) rhs->dwReference++;	_dec(); p_ = rhs;											}

	lea	ecx, DWORD PTR [edi+16]
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector2.h

; 15   : 	IC SelfRef set(float _u, float _v)				{ x=T(_u); y=T(_v);				return *this;	}

	mov	DWORD PTR [edi+20], 1040187392		; 3e000000H
	mov	DWORD PTR [edi+24], 1056964608		; 3f000000H
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.h

; 42   : 			m_iFrameDimX 	= 8;

	mov	DWORD PTR [edi+36], 8

; 43   : 			m_iFrameCount 	= 16;

	mov	DWORD PTR [edi+40], 16			; 00000010H

; 44   : 			m_fSpeed		= 24.f;

	mov	DWORD PTR [edi+44], 1103101952		; 41c00000H
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp

; 19   :     m_MaxParticles		= 0;

	mov	DWORD PTR [edi+88], 0
; File I:\Vitalya\mine\NSProjectX\xrCore\xr_resource.h

; 62   : 						resptr_core		(T * p, bool add_ref = true) 					{	p_ = p;	if(add_ref)	_inc(); }

	mov	DWORD PTR $T1[esp+12], 0

; 46   : 	ICF		void		_set	(T * rhs) 							{	if (0!=rhs) rhs->dwReference++;	_dec(); p_ = rhs;											}

	call	DWORD PTR __imp_?_dec@?$resptr_base@UShader@@@@IAEXXZ

; 64   : 						~resptr_core	()												{	_dec();						}

	lea	ecx, DWORD PTR $T1[esp+12]

; 46   : 	ICF		void		_set	(T * rhs) 							{	if (0!=rhs) rhs->dwReference++;	_dec(); p_ = rhs;											}

	mov	DWORD PTR [edi+16], 0

; 64   : 						~resptr_core	()												{	_dec();						}

	call	DWORD PTR __imp_?_dec@?$resptr_base@UShader@@@@IAEXXZ
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp

; 21   : 	m_fTimeLimit		= 0.f;

	mov	DWORD PTR [edi+84], 0

; 32   : }

	mov	eax, edi
	mov	DWORD PTR [edi+116], 1065353216		; 3f800000H
	mov	DWORD PTR [edi+120], 0
	mov	DWORD PTR [edi+124], 0
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	mov	DWORD PTR [edi+92], 0
	mov	DWORD PTR [edi+96], 0
	mov	DWORD PTR [edi+100], 0
	mov	DWORD PTR [edi+104], -1077342245	; bfc90fdbH
	mov	DWORD PTR [edi+108], 0
	mov	DWORD PTR [edi+112], 0
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h

; 15   :     IC	SelfRef	zero	()											{ flags=T(0);	return *this;	}

	mov	DWORD PTR [edi+4], 0
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp

; 32   : }

	pop	edi
	pop	esi
	pop	ecx
	ret	0
??0CPEDef@PS@@QAE@XZ ENDP				; PS::CPEDef::CPEDef
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xr_resource.h
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp
_TEXT	SEGMENT
??1CPEDef@PS@@QAE@XZ PROC				; PS::CPEDef::~CPEDef
; _this$ = ecx

; 35   : {

	push	esi
	mov	esi, ecx

; 39   : }

	lea	ecx, DWORD PTR [esi+48]
	call	DWORD PTR __imp_??1CMemoryWriter@@UAE@XZ
	lea	ecx, DWORD PTR [esi+16]
; File I:\Vitalya\mine\NSProjectX\xrCore\xr_resource.h

; 64   : 						~resptr_core	()												{	_dec();						}

	call	DWORD PTR __imp_?_dec@?$resptr_base@UShader@@@@IAEXXZ
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 50   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	mov	eax, DWORD PTR [esi+12]
	test	eax, eax
	je	SHORT $LN9@CPEDef
	dec	DWORD PTR [eax]
	mov	eax, DWORD PTR [esi+12]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN9@CPEDef
	mov	DWORD PTR [esi+12], 0
$LN9@CPEDef:
	mov	eax, DWORD PTR [esi+8]
	test	eax, eax
	je	SHORT $LN15@CPEDef
	dec	DWORD PTR [eax]
	mov	eax, DWORD PTR [esi+8]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN15@CPEDef
	mov	DWORD PTR [esi+8], 0
$LN15@CPEDef:
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN21@CPEDef
	dec	DWORD PTR [eax]
	mov	eax, DWORD PTR [esi]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN21@CPEDef
	mov	DWORD PTR [esi], 0
$LN21@CPEDef:
	pop	esi
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp

; 39   : }

	ret	0
??1CPEDef@PS@@QAE@XZ ENDP				; PS::CPEDef::~CPEDef
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp
_TEXT	SEGMENT
?CreateShader@CPEDef@PS@@QAEXXZ PROC			; PS::CPEDef::CreateShader
; _this$ = ecx

; 41   : {

	push	esi
	mov	esi, ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 65   : 	str_c				operator*	() const						{	return p_?p_->value:0;							}

	mov	edx, DWORD PTR [esi+8]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp

; 42   :     if (*m_ShaderName&&*m_TextureName)	

	lea	eax, DWORD PTR [edx+12]
	neg	edx
	sbb	edx, edx
	and	edx, eax
	je	SHORT $LN2@CreateShad
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 65   : 	str_c				operator*	() const						{	return p_?p_->value:0;							}

	mov	ecx, DWORD PTR [esi+12]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp

; 42   :     if (*m_ShaderName&&*m_TextureName)	

	lea	eax, DWORD PTR [ecx+12]
	neg	ecx
	sbb	ecx, ecx
	and	ecx, eax
	je	SHORT $LN2@CreateShad

; 43   :         m_CachedShader.create(*m_ShaderName,*m_TextureName);

	push	0
	push	0
	push	ecx
	push	edx
	lea	ecx, DWORD PTR [esi+16]
	call	DWORD PTR __imp_?create@resptrcode_shader@@QAEXPBD000@Z
$LN2@CreateShad:

; 44   : }

	pop	esi
	ret	0
?CreateShader@CPEDef@PS@@QAEXXZ ENDP			; PS::CPEDef::CreateShader
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xr_resource.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp
_TEXT	SEGMENT
?DestroyShader@CPEDef@PS@@QAEXXZ PROC			; PS::CPEDef::DestroyShader
; _this$ = ecx

; 46   : {

	push	esi

; 47   :     m_CachedShader.destroy();

	lea	esi, DWORD PTR [ecx+16]
; File I:\Vitalya\mine\NSProjectX\xrCore\xr_resource.h

; 46   : 	ICF		void		_set	(T * rhs) 							{	if (0!=rhs) rhs->dwReference++;	_dec(); p_ = rhs;											}

	mov	ecx, esi
	call	DWORD PTR __imp_?_dec@?$resptr_base@UShader@@@@IAEXXZ
	mov	DWORD PTR [esi], 0
	pop	esi
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp

; 48   : }

	ret	0
?DestroyShader@CPEDef@PS@@QAEXXZ ENDP			; PS::CPEDef::DestroyShader
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\FS.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\FS.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp
_TEXT	SEGMENT
_F$ = 8							; size = 4
?Load@CPEDef@PS@@QAEHAAVIReader@@@Z PROC		; PS::CPEDef::Load
; _this$ = ecx

; 174  : 	R_ASSERT		(F.find_chunk(PED_CHUNK_VERSION));

	cmp	BYTE PTR ?ignore_always@?3??Load@CPEDef@PS@@QAEHAAVIReader@@@Z@4_NA, 0
	push	ebx
	push	esi
	mov	esi, DWORD PTR _F$[esp+4]
	mov	ebx, ecx
	push	edi
	mov	edi, DWORD PTR __imp_?fail@xrDebug@@QAEXPBD0H0AA_N@Z
	jne	SHORT $LN2@Load
	push	0
	push	1
	mov	ecx, esi
	call	DWORD PTR __imp_?find_chunk@?$IReaderBase@VIReader@@@@QAEIIPAH@Z
	test	eax, eax
	jne	SHORT $LN2@Load
	mov	ecx, DWORD PTR __imp_?Debug@@3VxrDebug@@A
	push	OFFSET ?ignore_always@?3??Load@CPEDef@PS@@QAEHAAVIReader@@@Z@4_NA
	push	OFFSET ??_C@_0BB@FMONJHAC@PS?3?3CPEDef?3?3Load@
	push	174					; 000000aeH
	push	OFFSET ??_C@_0EB@BBEGCBBO@I?3?2Vitalya?2mine?2NSProjectX?2laye@
	push	OFFSET ??_C@_0CA@IDNJEKNI@F?4find_chunk?$CIPED_CHUNK_VERSION?$CJ@
	call	edi
$LN2@Load:

; 175  : 	u16 version		= F.r_u16();

	mov	ecx, esi
	call	DWORD PTR __imp_?r_u16@?$IReaderBase@VIReader@@@@QAEGXZ

; 176  : 
; 177  : 	if (version!=PED_VERSION)

	cmp	ax, 1
	je	SHORT $LN7@Load

; 222  : 		}
; 223  : 	}
; 224  : 
; 225  : #ifdef _EDITOR
; 226  : 	if (F.find_chunk(PED_CHUNK_OWNER)){
; 227  : 		AnsiString tmp;
; 228  : 		F.r_stringZ	(m_OwnerName);
; 229  : 		F.r_stringZ	(m_ModifName);
; 230  : 		F.r			(&m_CreateTime,sizeof(m_CreateTime));
; 231  : 		F.r			(&m_ModifTime,sizeof(m_ModifTime));
; 232  : 	}
; 233  :     if (pCreateEAction&&F.find_chunk(PED_CHUNK_EDATA)){
; 234  :         m_EActionList.resize(F.r_u32());
; 235  :         for (EPAVecIt it=m_EActionList.begin(); it!=m_EActionList.end(); it++){
; 236  :             PAPI::PActionEnum type = (PAPI::PActionEnum)F.r_u32();
; 237  :             (*it)	= pCreateEAction(type);
; 238  :             (*it)->Load		(F);
; 239  :         }
; 240  :     } 
; 241  : #endif
; 242  : 
; 243  : 	return TRUE;
; 244  : }

	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx
	ret	4
$LN7@Load:

; 178  : 		return FALSE;
; 179  : 
; 180  : 	R_ASSERT		(F.find_chunk(PED_CHUNK_NAME));

	cmp	BYTE PTR ?ignore_always@?9??Load@CPEDef@PS@@QAEHAAVIReader@@@Z@4_NA, 0
	jne	SHORT $LN5@Load
	push	0
	push	2
	mov	ecx, esi
	call	DWORD PTR __imp_?find_chunk@?$IReaderBase@VIReader@@@@QAEIIPAH@Z
	test	eax, eax
	jne	SHORT $LN5@Load
	mov	ecx, DWORD PTR __imp_?Debug@@3VxrDebug@@A
	push	OFFSET ?ignore_always@?9??Load@CPEDef@PS@@QAEHAAVIReader@@@Z@4_NA
	push	OFFSET ??_C@_0BB@FMONJHAC@PS?3?3CPEDef?3?3Load@
	push	180					; 000000b4H
	push	OFFSET ??_C@_0EB@BBEGCBBO@I?3?2Vitalya?2mine?2NSProjectX?2laye@
	push	OFFSET ??_C@_0BN@ICOPLHOD@F?4find_chunk?$CIPED_CHUNK_NAME?$CJ@
	call	edi
$LN5@Load:

; 181  : 	F.r_stringZ		(m_Name);

	push	ebx
	mov	ecx, esi
	call	DWORD PTR __imp_?r_stringZ@IReader@@QAEXAAVshared_str@@@Z

; 182  : 
; 183  : 	R_ASSERT		(F.find_chunk(PED_CHUNK_EFFECTDATA));

	cmp	BYTE PTR ?ignore_always@?O@??Load@CPEDef@PS@@QAEHAAVIReader@@@Z@4_NA, 0
	jne	SHORT $LN8@Load
	push	0
	push	3
	mov	ecx, esi
	call	DWORD PTR __imp_?find_chunk@?$IReaderBase@VIReader@@@@QAEIIPAH@Z
	test	eax, eax
	jne	SHORT $LN8@Load
	mov	ecx, DWORD PTR __imp_?Debug@@3VxrDebug@@A
	push	OFFSET ?ignore_always@?O@??Load@CPEDef@PS@@QAEHAAVIReader@@@Z@4_NA
	push	OFFSET ??_C@_0BB@FMONJHAC@PS?3?3CPEDef?3?3Load@
	push	183					; 000000b7H
	push	OFFSET ??_C@_0EB@BBEGCBBO@I?3?2Vitalya?2mine?2NSProjectX?2laye@
	push	OFFSET ??_C@_0CD@OIEJMBGP@F?4find_chunk?$CIPED_CHUNK_EFFECTDA@
	call	edi
$LN8@Load:

; 184  : 	m_MaxParticles	= F.r_u32();

	push	ebp
	mov	ecx, esi
	call	DWORD PTR __imp_?r_u32@?$IReaderBase@VIReader@@@@QAEIXZ

; 185  : 
; 186  : 	u32 sz			= F.find_chunk(PED_CHUNK_ACTIONLIST); R_ASSERT(sz);

	push	0
	push	4
	mov	ecx, esi
	mov	DWORD PTR [ebx+88], eax
	call	DWORD PTR __imp_?find_chunk@?$IReaderBase@VIReader@@@@QAEIIPAH@Z
	cmp	BYTE PTR ?ignore_always@?BC@??Load@CPEDef@PS@@QAEHAAVIReader@@@Z@4_NA, 0
	mov	ebp, eax
	jne	SHORT $LN11@Load
	test	ebp, ebp
	jne	SHORT $LN11@Load
	mov	ecx, DWORD PTR __imp_?Debug@@3VxrDebug@@A
	push	OFFSET ?ignore_always@?BC@??Load@CPEDef@PS@@QAEHAAVIReader@@@Z@4_NA
	push	OFFSET ??_C@_0BB@FMONJHAC@PS?3?3CPEDef?3?3Load@
	push	186					; 000000baH
	push	OFFSET ??_C@_0EB@BBEGCBBO@I?3?2Vitalya?2mine?2NSProjectX?2laye@
	push	OFFSET ??_C@_02IDNJGBJI@sz@
	call	edi
$LN11@Load:
; File I:\Vitalya\mine\NSProjectX\xrCore\FS.h

; 264  : 	IC void*		pointer		()	const		{	return &(data[Pos]);	};

	mov	eax, DWORD PTR [esi+8]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp

; 187  : 	m_Actions.w		(F.pointer(),sz);

	lea	ecx, DWORD PTR [ebx+48]
	mov	edx, DWORD PTR [ecx]
; File I:\Vitalya\mine\NSProjectX\xrCore\FS.h

; 264  : 	IC void*		pointer		()	const		{	return &(data[Pos]);	};

	add	eax, DWORD PTR [esi+4]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp

; 187  : 	m_Actions.w		(F.pointer(),sz);

	push	ebp
	push	eax
	call	DWORD PTR [edx+12]

; 188  : 
; 189  : 	F.r_chunk		(PED_CHUNK_FLAGS,&m_Flags);

	lea	ebp, DWORD PTR [ebx+4]
	mov	ecx, esi
	push	ebp
	push	5
	call	DWORD PTR __imp_?r_chunk@?$IReaderBase@VIReader@@@@QAEHIPAX@Z
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h

; 23   : 	IC 	BOOL	is		(const T mask)						const	{ return mask==(flags&mask);			}

	mov	eax, DWORD PTR [ebp]
	test	al, 1
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp

; 191  : 	if (m_Flags.is(dfSprite)){

	je	SHORT $LN34@Load

; 192  : 		R_ASSERT	(F.find_chunk(PED_CHUNK_SPRITE));

	cmp	BYTE PTR ?ignore_always@?BJ@??Load@CPEDef@PS@@QAEHAAVIReader@@@Z@4_NA, 0
	jne	SHORT $LN14@Load
	push	0
	push	7
	mov	ecx, esi
	call	DWORD PTR __imp_?find_chunk@?$IReaderBase@VIReader@@@@QAEIIPAH@Z
	test	eax, eax
	jne	SHORT $LN14@Load
	mov	ecx, DWORD PTR __imp_?Debug@@3VxrDebug@@A
	push	OFFSET ?ignore_always@?BJ@??Load@CPEDef@PS@@QAEHAAVIReader@@@Z@4_NA
	push	OFFSET ??_C@_0BB@FMONJHAC@PS?3?3CPEDef?3?3Load@
	push	192					; 000000c0H
	push	OFFSET ??_C@_0EB@BBEGCBBO@I?3?2Vitalya?2mine?2NSProjectX?2laye@
	push	OFFSET ??_C@_0BP@JKHDECKB@F?4find_chunk?$CIPED_CHUNK_SPRITE?$CJ@
	call	edi
$LN14@Load:

; 193  : 		F.r_stringZ	(m_ShaderName);

	lea	eax, DWORD PTR [ebx+8]
	mov	ecx, esi
	push	eax
	call	DWORD PTR __imp_?r_stringZ@IReader@@QAEXAAVshared_str@@@Z

; 194  : 		F.r_stringZ	(m_TextureName);

	lea	eax, DWORD PTR [ebx+12]
	mov	ecx, esi
	push	eax
	call	DWORD PTR __imp_?r_stringZ@IReader@@QAEXAAVshared_str@@@Z
	mov	eax, DWORD PTR [ebp]
$LN34@Load:

; 195  : 	}
; 196  : 
; 197  : 	if (m_Flags.is(dfFramed)){

	test	eax, 1024				; 00000400H
	je	SHORT $LN36@Load

; 198  : 		R_ASSERT	(F.find_chunk(PED_CHUNK_FRAME));

	cmp	BYTE PTR ?ignore_always@?CA@??Load@CPEDef@PS@@QAEHAAVIReader@@@Z@4_NA, 0
	jne	SHORT $LN17@Load
	push	0
	push	6
	mov	ecx, esi
	call	DWORD PTR __imp_?find_chunk@?$IReaderBase@VIReader@@@@QAEIIPAH@Z
	test	eax, eax
	jne	SHORT $LN17@Load
	mov	ecx, DWORD PTR __imp_?Debug@@3VxrDebug@@A
	push	OFFSET ?ignore_always@?CA@??Load@CPEDef@PS@@QAEHAAVIReader@@@Z@4_NA
	push	OFFSET ??_C@_0BB@FMONJHAC@PS?3?3CPEDef?3?3Load@
	push	198					; 000000c6H
	push	OFFSET ??_C@_0EB@BBEGCBBO@I?3?2Vitalya?2mine?2NSProjectX?2laye@
	push	OFFSET ??_C@_0BO@IKODAKGG@F?4find_chunk?$CIPED_CHUNK_FRAME?$CJ@
	call	edi
$LN17@Load:

; 199  : 		F.r			(&m_Frame,sizeof(SFrame));

	push	28					; 0000001cH
	lea	eax, DWORD PTR [ebx+20]
	mov	ecx, esi
	push	eax
	call	DWORD PTR __imp_?r@IReader@@QAEXPAXH@Z
	mov	eax, DWORD PTR [ebp]
$LN36@Load:

; 200  : 	}
; 201  : 
; 202  : 	if (m_Flags.is(dfTimeLimit)){

	test	eax, 16384				; 00004000H
	je	SHORT $LN38@Load

; 203  : 		R_ASSERT(F.find_chunk(PED_CHUNK_TIMELIMIT));

	cmp	BYTE PTR ?ignore_always@?CH@??Load@CPEDef@PS@@QAEHAAVIReader@@@Z@4_NA, 0
	jne	SHORT $LN20@Load
	push	0
	push	8
	mov	ecx, esi
	call	DWORD PTR __imp_?find_chunk@?$IReaderBase@VIReader@@@@QAEIIPAH@Z
	test	eax, eax
	jne	SHORT $LN20@Load
	mov	ecx, DWORD PTR __imp_?Debug@@3VxrDebug@@A
	push	OFFSET ?ignore_always@?CH@??Load@CPEDef@PS@@QAEHAAVIReader@@@Z@4_NA
	push	OFFSET ??_C@_0BB@FMONJHAC@PS?3?3CPEDef?3?3Load@
	push	203					; 000000cbH
	push	OFFSET ??_C@_0EB@BBEGCBBO@I?3?2Vitalya?2mine?2NSProjectX?2laye@
	push	OFFSET ??_C@_0CC@IDABNAON@F?4find_chunk?$CIPED_CHUNK_TIMELIMI@
	call	edi
$LN20@Load:

; 204  : 		m_fTimeLimit= F.r_float();

	mov	ecx, esi
	call	DWORD PTR __imp_?r_float@?$IReaderBase@VIReader@@@@QAEMXZ
	mov	eax, DWORD PTR [ebp]
	fstp	DWORD PTR [ebx+84]
$LN38@Load:

; 205  : 	}
; 206  : 
; 207  : 	if (m_Flags.is(dfCollision)){

	test	eax, 65536				; 00010000H
	je	SHORT $LN40@Load

; 208  : 		R_ASSERT(F.find_chunk(PED_CHUNK_COLLISION));

	cmp	BYTE PTR ?ignore_always@?CO@??Load@CPEDef@PS@@QAEHAAVIReader@@@Z@4_NA, 0
	jne	SHORT $LN23@Load
	push	0
	push	33					; 00000021H
	mov	ecx, esi
	call	DWORD PTR __imp_?find_chunk@?$IReaderBase@VIReader@@@@QAEIIPAH@Z
	test	eax, eax
	jne	SHORT $LN23@Load
	mov	ecx, DWORD PTR __imp_?Debug@@3VxrDebug@@A
	push	OFFSET ?ignore_always@?CO@??Load@CPEDef@PS@@QAEHAAVIReader@@@Z@4_NA
	push	OFFSET ??_C@_0BB@FMONJHAC@PS?3?3CPEDef?3?3Load@
	push	208					; 000000d0H
	push	OFFSET ??_C@_0EB@BBEGCBBO@I?3?2Vitalya?2mine?2NSProjectX?2laye@
	push	OFFSET ??_C@_0CC@DAMJKPGK@F?4find_chunk?$CIPED_CHUNK_COLLISIO@
	call	edi
$LN23@Load:

; 209  : 		m_fCollideOneMinusFriction 	= F.r_float();

	mov	ecx, esi
	call	DWORD PTR __imp_?r_float@?$IReaderBase@VIReader@@@@QAEMXZ
	fstp	DWORD PTR [ebx+116]

; 210  : 		m_fCollideResilience		= F.r_float();

	mov	ecx, esi
	call	DWORD PTR __imp_?r_float@?$IReaderBase@VIReader@@@@QAEMXZ
	fstp	DWORD PTR [ebx+120]

; 211  : 		m_fCollideSqrCutoff			= F.r_float();

	mov	ecx, esi
	call	DWORD PTR __imp_?r_float@?$IReaderBase@VIReader@@@@QAEMXZ
	mov	eax, DWORD PTR [ebp]
	fstp	DWORD PTR [ebx+124]
$LN40@Load:

; 212  : 	}
; 213  : 
; 214  : 	if (m_Flags.is(dfVelocityScale)){

	test	eax, 262144				; 00040000H
	je	SHORT $LN42@Load

; 215  : 		R_ASSERT(F.find_chunk(PED_CHUNK_VEL_SCALE));

	cmp	BYTE PTR ?ignore_always@?DF@??Load@CPEDef@PS@@QAEHAAVIReader@@@Z@4_NA, 0
	jne	SHORT $LN26@Load
	push	0
	push	34					; 00000022H
	mov	ecx, esi
	call	DWORD PTR __imp_?find_chunk@?$IReaderBase@VIReader@@@@QAEIIPAH@Z
	test	eax, eax
	jne	SHORT $LN26@Load
	mov	ecx, DWORD PTR __imp_?Debug@@3VxrDebug@@A
	push	OFFSET ?ignore_always@?DF@??Load@CPEDef@PS@@QAEHAAVIReader@@@Z@4_NA
	push	OFFSET ??_C@_0BB@FMONJHAC@PS?3?3CPEDef?3?3Load@
	push	215					; 000000d7H
	push	OFFSET ??_C@_0EB@BBEGCBBO@I?3?2Vitalya?2mine?2NSProjectX?2laye@
	push	OFFSET ??_C@_0CC@OEJGKLDH@F?4find_chunk?$CIPED_CHUNK_VEL_SCAL@
	call	edi
$LN26@Load:

; 216  : 		F.r_fvector3				(m_VelocityScale); 

	lea	eax, DWORD PTR [ebx+92]
	mov	ecx, esi
	push	eax
	call	DWORD PTR __imp_?r_fvector3@?$IReaderBase@VIReader@@@@QAEXAAU?$_vector3@M@@@Z
	mov	eax, DWORD PTR [ebp]
$LN42@Load:

; 217  : 	}
; 218  : 
; 219  : 	if (m_Flags.is(dfAlignToPath)){

	pop	ebp
	test	eax, 32768				; 00008000H
	je	SHORT $LN45@Load

; 220  : 		if (F.find_chunk(PED_CHUNK_ALIGN_TO_PATH)){

	push	0
	push	37					; 00000025H
	mov	ecx, esi
	call	DWORD PTR __imp_?find_chunk@?$IReaderBase@VIReader@@@@QAEIIPAH@Z
	test	eax, eax
	je	SHORT $LN45@Load

; 221  : 			F.r_fvector3			(m_APDefaultRotation);

	lea	eax, DWORD PTR [ebx+104]
	mov	ecx, esi
	push	eax
	call	DWORD PTR __imp_?r_fvector3@?$IReaderBase@VIReader@@@@QAEXAAU?$_vector3@M@@@Z
$LN45@Load:

; 222  : 		}
; 223  : 	}
; 224  : 
; 225  : #ifdef _EDITOR
; 226  : 	if (F.find_chunk(PED_CHUNK_OWNER)){
; 227  : 		AnsiString tmp;
; 228  : 		F.r_stringZ	(m_OwnerName);
; 229  : 		F.r_stringZ	(m_ModifName);
; 230  : 		F.r			(&m_CreateTime,sizeof(m_CreateTime));
; 231  : 		F.r			(&m_ModifTime,sizeof(m_ModifTime));
; 232  : 	}
; 233  :     if (pCreateEAction&&F.find_chunk(PED_CHUNK_EDATA)){
; 234  :         m_EActionList.resize(F.r_u32());
; 235  :         for (EPAVecIt it=m_EActionList.begin(); it!=m_EActionList.end(); it++){
; 236  :             PAPI::PActionEnum type = (PAPI::PActionEnum)F.r_u32();
; 237  :             (*it)	= pCreateEAction(type);
; 238  :             (*it)->Load		(F);
; 239  :         }
; 240  :     } 
; 241  : #endif
; 242  : 
; 243  : 	return TRUE;
; 244  : }

	pop	edi
	pop	esi
	mov	eax, 1
	pop	ebx
	ret	4
?Load@CPEDef@PS@@QAEHAAVIReader@@@Z ENDP		; PS::CPEDef::Load
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h
;	COMDAT ?is@?$_flags@G@@QBEHG@Z
_TEXT	SEGMENT
_mask$dead$ = 8						; size = 2
?is@?$_flags@G@@QBEHG@Z PROC				; _flags<unsigned short>::is, COMDAT
; _this$ = ecx

; 23   : 	IC 	BOOL	is		(const T mask)						const	{ return mask==(flags&mask);			}

	movzx	eax, WORD PTR [ecx]
	and	eax, 1
	ret	4
?is@?$_flags@G@@QBEHG@Z ENDP				; _flags<unsigned short>::is
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\xr_resource.h
;	COMDAT ??0?$resptr_core@UShader@@Uresptrcode_shader@@@@QAE@PAUShader@@_N@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
_add_ref$dead$ = 12					; size = 1
??0?$resptr_core@UShader@@Uresptrcode_shader@@@@QAE@PAUShader@@_N@Z PROC ; resptr_core<Shader,resptrcode_shader>::resptr_core<Shader,resptrcode_shader>, COMDAT
; _this$ = ecx

; 62   : 						resptr_core		(T * p, bool add_ref = true) 					{	p_ = p;	if(add_ref)	_inc(); }

	mov	eax, DWORD PTR _p$[esp-4]
	mov	DWORD PTR [ecx], eax

; 43   : 	void				_inc	()									{	if (0==p_) return;	p_->dwReference++;														}

	test	eax, eax
	je	SHORT $LN7@resptr_cor
	inc	DWORD PTR [eax]
$LN7@resptr_cor:

; 62   : 						resptr_core		(T * p, bool add_ref = true) 					{	p_ = p;	if(add_ref)	_inc(); }

	mov	eax, ecx
	ret	8
??0?$resptr_core@UShader@@Uresptrcode_shader@@@@QAE@PAUShader@@_N@Z ENDP ; resptr_core<Shader,resptrcode_shader>::resptr_core<Shader,resptrcode_shader>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrEngine\psystem.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrEngine\psystem.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrEngine\psystem.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrEngine\psystem.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrEngine\psystem.h
;	COMDAT ??HpVector@PAPI@@QBE?AV01@ABV01@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_a$ = 12						; size = 4
??HpVector@PAPI@@QBE?AV01@ABV01@@Z PROC			; PAPI::pVector::operator+, COMDAT
; _this$ = ecx

; 43   : 		IC pVector 	operator+	(const pVector& a) const { return pVector(x + a.x, y + a.y, z + a.z); }

	mov	edx, DWORD PTR _a$[esp-4]
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
; File I:\Vitalya\mine\NSProjectX\xrEngine\psystem.h

; 43   : 		IC pVector 	operator+	(const pVector& a) const { return pVector(x + a.x, y + a.y, z + a.z); }

	movss	xmm0, DWORD PTR [edx]
	addss	xmm0, DWORD PTR [ecx]
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	movss	DWORD PTR [eax], xmm0
; File I:\Vitalya\mine\NSProjectX\xrEngine\psystem.h

; 43   : 		IC pVector 	operator+	(const pVector& a) const { return pVector(x + a.x, y + a.y, z + a.z); }

	movss	xmm0, DWORD PTR [edx+4]
	addss	xmm0, DWORD PTR [ecx+4]
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	movss	DWORD PTR [eax+4], xmm0
; File I:\Vitalya\mine\NSProjectX\xrEngine\psystem.h

; 43   : 		IC pVector 	operator+	(const pVector& a) const { return pVector(x + a.x, y + a.y, z + a.z); }

	movss	xmm0, DWORD PTR [edx+8]
	addss	xmm0, DWORD PTR [ecx+8]
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	movss	DWORD PTR [eax+8], xmm0
; File I:\Vitalya\mine\NSProjectX\xrEngine\psystem.h

; 43   : 		IC pVector 	operator+	(const pVector& a) const { return pVector(x + a.x, y + a.y, z + a.z); }

	ret	8
??HpVector@PAPI@@QBE?AV01@ABV01@@Z ENDP			; PAPI::pVector::operator+
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrEngine\psystem.h
;	COMDAT ??4pVector@PAPI@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
??4pVector@PAPI@@QAEAAV01@ABV01@@Z PROC			; PAPI::pVector::operator=, COMDAT
; _this$ = ecx

; 50   : 		IC pVector& operator=	(const pVector& a) { x = a.x; y = a.y; z = a.z; return *this; }

	mov	eax, DWORD PTR _a$[esp-4]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [ecx]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [ecx+4]
	fld	DWORD PTR [eax+8]
	mov	eax, ecx
	fstp	DWORD PTR [ecx+8]
	ret	4
??4pVector@PAPI@@QAEAAV01@ABV01@@Z ENDP			; PAPI::pVector::operator=
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrEngine\psystem.h
;	COMDAT ?length2@pVector@PAPI@@QBEMXZ
_TEXT	SEGMENT
?length2@pVector@PAPI@@QBEMXZ PROC			; PAPI::pVector::length2, COMDAT
; _this$ = ecx

; 39   : 		IC float 	length2() const { return (x * x + y * y + z * z); }

	fld	DWORD PTR [ecx+4]
	fld	DWORD PTR [ecx+8]
	fld	DWORD PTR [ecx]
	fmul	ST(0), ST(0)
	fxch	ST(2)
	fmul	ST(0), ST(0)
	faddp	ST(2), ST(0)
	fmul	ST(0), ST(0)
	faddp	ST(1), ST(0)
	ret	0
?length2@pVector@PAPI@@QBEMXZ ENDP			; PAPI::pVector::length2
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrEngine\psystem.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrEngine\psystem.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrEngine\psystem.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrEngine\psystem.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrEngine\psystem.h
;	COMDAT ??GpVector@PAPI@@QBE?AV01@ABV01@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_a$ = 12						; size = 4
??GpVector@PAPI@@QBE?AV01@ABV01@@Z PROC			; PAPI::pVector::operator-, COMDAT
; _this$ = ecx

; 44   : 		IC pVector 	operator-	(const pVector& a) const { return pVector(x - a.x, y - a.y, z - a.z); }

	mov	edx, DWORD PTR _a$[esp-4]
	movss	xmm0, DWORD PTR [ecx]
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
; File I:\Vitalya\mine\NSProjectX\xrEngine\psystem.h

; 44   : 		IC pVector 	operator-	(const pVector& a) const { return pVector(x - a.x, y - a.y, z - a.z); }

	subss	xmm0, DWORD PTR [edx]
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	movss	DWORD PTR [eax], xmm0
; File I:\Vitalya\mine\NSProjectX\xrEngine\psystem.h

; 44   : 		IC pVector 	operator-	(const pVector& a) const { return pVector(x - a.x, y - a.y, z - a.z); }

	movss	xmm0, DWORD PTR [ecx+4]
	subss	xmm0, DWORD PTR [edx+4]
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	movss	DWORD PTR [eax+4], xmm0
; File I:\Vitalya\mine\NSProjectX\xrEngine\psystem.h

; 44   : 		IC pVector 	operator-	(const pVector& a) const { return pVector(x - a.x, y - a.y, z - a.z); }

	movss	xmm0, DWORD PTR [ecx+8]
	subss	xmm0, DWORD PTR [edx+8]
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	movss	DWORD PTR [eax+8], xmm0
; File I:\Vitalya\mine\NSProjectX\xrEngine\psystem.h

; 44   : 		IC pVector 	operator-	(const pVector& a) const { return pVector(x - a.x, y - a.y, z - a.z); }

	ret	8
??GpVector@PAPI@@QBE?AV01@ABV01@@Z ENDP			; PAPI::pVector::operator-
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrEngine\psystem.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrEngine\psystem.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrEngine\psystem.h
;	COMDAT ??0pVector@PAPI@@QAE@MMM@Z
_TEXT	SEGMENT
_ax$ = 8						; size = 4
_ay$ = 12						; size = 4
_az$ = 16						; size = 4
??0pVector@PAPI@@QAE@MMM@Z PROC				; PAPI::pVector::pVector, COMDAT
; _this$ = ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	movss	xmm0, DWORD PTR _ax$[esp-4]
; File I:\Vitalya\mine\NSProjectX\xrEngine\psystem.h

; 36   : 		IC 			pVector(float ax, float ay, float az) { set(ax, ay, az); }

	mov	eax, ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR _ay$[esp-4]
	movss	DWORD PTR [ecx+4], xmm0
	movss	xmm0, DWORD PTR _az$[esp-4]
	movss	DWORD PTR [ecx+8], xmm0
; File I:\Vitalya\mine\NSProjectX\xrEngine\psystem.h

; 36   : 		IC 			pVector(float ax, float ay, float az) { set(ax, ay, az); }

	ret	12					; 0000000cH
??0pVector@PAPI@@QAE@MMM@Z ENDP				; PAPI::pVector::pVector
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrEngine\psystem.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrEngine\psystem.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrEngine\psystem.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrEngine\psystem.h
;	COMDAT ??DpVector@PAPI@@QBE?AV01@M@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_s$ = 12						; size = 4
??DpVector@PAPI@@QBE?AV01@M@Z PROC			; PAPI::pVector::operator*, COMDAT
; _this$ = ecx

; 41   : 		IC pVector 	operator*	(const float s) const { return pVector(x * s, y * s, z * s); }

	movss	xmm1, DWORD PTR _s$[esp-4]
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
; File I:\Vitalya\mine\NSProjectX\xrEngine\psystem.h

; 41   : 		IC pVector 	operator*	(const float s) const { return pVector(x * s, y * s, z * s); }

	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR [ecx]
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	movss	DWORD PTR [eax], xmm0
; File I:\Vitalya\mine\NSProjectX\xrEngine\psystem.h

; 41   : 		IC pVector 	operator*	(const float s) const { return pVector(x * s, y * s, z * s); }

	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR [ecx+4]
	mulss	xmm1, DWORD PTR [ecx+8]
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	movss	DWORD PTR [eax+4], xmm0
	movss	DWORD PTR [eax+8], xmm1
; File I:\Vitalya\mine\NSProjectX\xrEngine\psystem.h

; 41   : 		IC pVector 	operator*	(const float s) const { return pVector(x * s, y * s, z * s); }

	ret	8
??DpVector@PAPI@@QBE?AV01@M@Z ENDP			; PAPI::pVector::operator*
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrEngine\psystem.h
;	COMDAT ??DpVector@PAPI@@QBEMABV01@@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
??DpVector@PAPI@@QBEMABV01@@Z PROC			; PAPI::pVector::operator*, COMDAT
; _this$ = ecx

; 40   : 		IC float 	operator*	(const pVector& a) const { return x * a.x + y * a.y + z * a.z; }

	mov	eax, DWORD PTR _a$[esp-4]
	fld	DWORD PTR [eax+4]
	fmul	DWORD PTR [ecx+4]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR [ecx]
	faddp	ST(1), ST(0)
	fld	DWORD PTR [eax+8]
	fmul	DWORD PTR [ecx+8]
	faddp	ST(1), ST(0)
	ret	4
??DpVector@PAPI@@QBEMABV01@@Z ENDP			; PAPI::pVector::operator*
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrEngine\psystem.h
;	COMDAT ??0pVector@PAPI@@QAE@XZ
_TEXT	SEGMENT
??0pVector@PAPI@@QAE@XZ PROC				; PAPI::pVector::pVector, COMDAT
; _this$ = ecx

; 37   : 		IC 			pVector() {}

	mov	eax, ecx
	ret	0
??0pVector@PAPI@@QAE@XZ ENDP				; PAPI::pVector::pVector
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h
;	COMDAT ?zero@?$_flags@I@@QAEAAU1@XZ
_TEXT	SEGMENT
?zero@?$_flags@I@@QAEAAU1@XZ PROC			; _flags<unsigned int>::zero, COMDAT
; _this$ = ecx

; 15   :     IC	SelfRef	zero	()											{ flags=T(0);	return *this;	}

	mov	DWORD PTR [ecx], 0
	mov	eax, ecx
	ret	0
?zero@?$_flags@I@@QAEAAU1@XZ ENDP			; _flags<unsigned int>::zero
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector2.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.h
;	COMDAT ?InitDefault@SFrame@PS@@QAEXXZ
_TEXT	SEGMENT
?InitDefault@SFrame@PS@@QAEXXZ PROC			; PS::SFrame::InitDefault, COMDAT
; _this$ = ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector2.h

; 15   : 	IC SelfRef set(float _u, float _v)				{ x=T(_u); y=T(_v);				return *this;	}

	mov	DWORD PTR [ecx], 1040187392		; 3e000000H
	mov	DWORD PTR [ecx+4], 1056964608		; 3f000000H
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.h

; 42   : 			m_iFrameDimX 	= 8;

	mov	DWORD PTR [ecx+16], 8

; 43   : 			m_iFrameCount 	= 16;

	mov	DWORD PTR [ecx+20], 16			; 00000010H

; 44   : 			m_fSpeed		= 24.f;

	mov	DWORD PTR [ecx+24], 1103101952		; 41c00000H

; 45   : 		}

	ret	0
?InitDefault@SFrame@PS@@QAEXXZ ENDP			; PS::SFrame::InitDefault
_TEXT	ENDS
END
