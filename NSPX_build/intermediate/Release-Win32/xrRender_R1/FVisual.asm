; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30146.0 

	TITLE	i:\vitalya\mine\nsprojectx\nspx_build\intermediate\release-win32\xrrender_r1\fvisual.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0O@JMBJBGPM@Fvisual?3?3Load@		; `string'
PUBLIC	??_C@_0DH@MFPNNDBK@I?3?2Vitalya?2mine?2NSProjectX?2laye@ ; `string'
PUBLIC	??_C@_0BP@PCDMDILK@data?9?$DOfind_chunk?$CIOGF_VERTICES?$CJ@ ; `string'
PUBLIC	??_C@_0FK@KMMFAENG@HW?4pDevice?9?$DOCreateVertexBuffer?$CI@ ; `string'
PUBLIC	??_C@_0CK@NIHMBEKE@p_rm_Vertices?9?$DOLock?$CI0?00?0?$CIvoid?$CK?$CK@ ; `string'
PUBLIC	??_C@_0BO@CLHPEMLL@data?9?$DOfind_chunk?$CIOGF_INDICES?$CJ@ ; `string'
PUBLIC	??_C@_0FP@FNCCJNNP@HW?4pDevice?9?$DOCreateIndexBuffer?$CIi@ ; `string'
PUBLIC	??_C@_0CJ@IJNIPKCD@p_rm_Indices?9?$DOLock?$CI0?00?0?$CIvoid?$CK?$CK?$CJ@ ; `string'
PUBLIC	??_R4Fvisual@@6BIRender_Mesh@@@			; Fvisual::`RTTI Complete Object Locator'
PUBLIC	??_R4Fvisual@@6BIRender_Visual@@@		; Fvisual::`RTTI Complete Object Locator'
PUBLIC	??_7Fvisual@@6BIRender_Mesh@@@			; Fvisual::`vftable'
PUBLIC	??_7Fvisual@@6BIRender_Visual@@@		; Fvisual::`vftable'
EXTRN	__imp__D3DXGetFVFVertexSize@4:PROC
EXTRN	__imp__D3DXDeclaratorFromFVF@8:PROC
;	COMDAT ?ignore_always@?DH@??Load@Fvisual@@UAEXPBDPAVIReader@@I@Z@4_NA
_BSS	SEGMENT
?ignore_always@?DH@??Load@Fvisual@@UAEXPBDPAVIReader@@I@Z@4_NA DB 01H DUP (?) ; `Fvisual::Load'::`55'::ignore_always
_BSS	ENDS
;	COMDAT ?ignore_always@?DD@??Load@Fvisual@@UAEXPBDPAVIReader@@I@Z@4_NA
_BSS	SEGMENT
?ignore_always@?DD@??Load@Fvisual@@UAEXPBDPAVIReader@@I@Z@4_NA DB 01H DUP (?) ; `Fvisual::Load'::`51'::ignore_always
_BSS	ENDS
;	COMDAT ?ignore_always@?CN@??Load@Fvisual@@UAEXPBDPAVIReader@@I@Z@4_NA
_BSS	SEGMENT
?ignore_always@?CN@??Load@Fvisual@@UAEXPBDPAVIReader@@I@Z@4_NA DB 01H DUP (?) ; `Fvisual::Load'::`45'::ignore_always
_BSS	ENDS
;	COMDAT ?ignore_always@?BP@??Load@Fvisual@@UAEXPBDPAVIReader@@I@Z@4_NA
_BSS	SEGMENT
?ignore_always@?BP@??Load@Fvisual@@UAEXPBDPAVIReader@@I@Z@4_NA DB 01H DUP (?) ; `Fvisual::Load'::`31'::ignore_always
_BSS	ENDS
;	COMDAT ?ignore_always@?BL@??Load@Fvisual@@UAEXPBDPAVIReader@@I@Z@4_NA
_BSS	SEGMENT
?ignore_always@?BL@??Load@Fvisual@@UAEXPBDPAVIReader@@I@Z@4_NA DB 01H DUP (?) ; `Fvisual::Load'::`27'::ignore_always
_BSS	ENDS
;	COMDAT ?ignore_always@?BF@??Load@Fvisual@@UAEXPBDPAVIReader@@I@Z@4_NA
_BSS	SEGMENT
?ignore_always@?BF@??Load@Fvisual@@UAEXPBDPAVIReader@@I@Z@4_NA DB 01H DUP (?) ; `Fvisual::Load'::`21'::ignore_always
_BSS	ENDS
;	COMDAT ??_7Fvisual@@6BIRender_Visual@@@
CONST	SEGMENT
??_7Fvisual@@6BIRender_Visual@@@ DD FLAT:??_R4Fvisual@@6BIRender_Visual@@@ ; Fvisual::`vftable'
	DD	FLAT:?Render@Fvisual@@UAEXM@Z
	DD	FLAT:?Load@Fvisual@@UAEXPBDPAVIReader@@I@Z
	DD	FLAT:?Release@Fvisual@@UAEXXZ
	DD	FLAT:?Copy@Fvisual@@UAEXPAVIRender_Visual@@@Z
	DD	FLAT:?Spawn@IRender_Visual@@UAEXXZ
	DD	FLAT:?Depart@IRender_Visual@@UAEXXZ
	DD	FLAT:?dcast_PKinematics@IRender_Visual@@UAEPAVCKinematics@@XZ
	DD	FLAT:?dcast_PKinematicsAnimated@IRender_Visual@@UAEPAVCKinematicsAnimated@@XZ
	DD	FLAT:?dcast_ParticleCustom@IRender_Visual@@UAEPAVIParticleCustom@@XZ
	DD	FLAT:??_EFvisual@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7Fvisual@@6BIRender_Mesh@@@
CONST	SEGMENT
??_7Fvisual@@6BIRender_Mesh@@@ DD FLAT:??_R4Fvisual@@6BIRender_Mesh@@@ ; Fvisual::`vftable'
	DD	FLAT:??_EFvisual@@WEE@AEPAXI@Z
CONST	ENDS
;	COMDAT ??_R4Fvisual@@6BIRender_Visual@@@
rdata$r	SEGMENT
??_R4Fvisual@@6BIRender_Visual@@@ DD 00H		; Fvisual::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVFvisual@@@8
	DD	FLAT:??_R3Fvisual@@8
rdata$r	ENDS
;	COMDAT ??_R4Fvisual@@6BIRender_Mesh@@@
rdata$r	SEGMENT
??_R4Fvisual@@6BIRender_Mesh@@@ DD 00H			; Fvisual::`RTTI Complete Object Locator'
	DD	044H
	DD	00H
	DD	FLAT:??_R0?AVFvisual@@@8
	DD	FLAT:??_R3Fvisual@@8
rdata$r	ENDS
;	COMDAT ??_C@_0CJ@IJNIPKCD@p_rm_Indices?9?$DOLock?$CI0?00?0?$CIvoid?$CK?$CK?$CJ@
CONST	SEGMENT
??_C@_0CJ@IJNIPKCD@p_rm_Indices?9?$DOLock?$CI0?00?0?$CIvoid?$CK?$CK?$CJ@ DB 'p'
	DB	'_rm_Indices->Lock(0,0,(void**)&bytes,0)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FP@FNCCJNNP@HW?4pDevice?9?$DOCreateIndexBuffer?$CIi@
CONST	SEGMENT
??_C@_0FP@FNCCJNNP@HW?4pDevice?9?$DOCreateIndexBuffer?$CIi@ DB 'HW.pDevic'
	DB	'e->CreateIndexBuffer(iCount*2,dwUsage,D3DFMT_INDEX16,D3DPOOL_'
	DB	'MANAGED,&p_rm_Indices,0)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@CLHPEMLL@data?9?$DOfind_chunk?$CIOGF_INDICES?$CJ@
CONST	SEGMENT
??_C@_0BO@CLHPEMLL@data?9?$DOfind_chunk?$CIOGF_INDICES?$CJ@ DB 'data->fin'
	DB	'd_chunk(OGF_INDICES)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@NIHMBEKE@p_rm_Vertices?9?$DOLock?$CI0?00?0?$CIvoid?$CK?$CK@
CONST	SEGMENT
??_C@_0CK@NIHMBEKE@p_rm_Vertices?9?$DOLock?$CI0?00?0?$CIvoid?$CK?$CK@ DB 'p'
	DB	'_rm_Vertices->Lock(0,0,(void**)&bytes,0)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FK@KMMFAENG@HW?4pDevice?9?$DOCreateVertexBuffer?$CI@
CONST	SEGMENT
??_C@_0FK@KMMFAENG@HW?4pDevice?9?$DOCreateVertexBuffer?$CI@ DB 'HW.pDevic'
	DB	'e->CreateVertexBuffer(vCount*vStride,dwUsage,0,D3DPOOL_MANAGE'
	DB	'D,&p_rm_Vertices,0)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@PCDMDILK@data?9?$DOfind_chunk?$CIOGF_VERTICES?$CJ@
CONST	SEGMENT
??_C@_0BP@PCDMDILK@data?9?$DOfind_chunk?$CIOGF_VERTICES?$CJ@ DB 'data->fi'
	DB	'nd_chunk(OGF_VERTICES)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@MFPNNDBK@I?3?2Vitalya?2mine?2NSProjectX?2laye@
CONST	SEGMENT
??_C@_0DH@MFPNNDBK@I?3?2Vitalya?2mine?2NSProjectX?2laye@ DB 'I:\Vitalya\m'
	DB	'ine\NSProjectX\layers\xrRender\FVisual.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@JMBJBGPM@Fvisual?3?3Load@
CONST	SEGMENT
??_C@_0O@JMBJBGPM@Fvisual?3?3Load@ DB 'Fvisual::Load', 00H ; `string'
PUBLIC	??_EFvisual@@WEE@AEPAXI@Z			; [thunk]:Fvisual::`vector deleting destructor'
PUBLIC	??R?$xr_special_free@$00UIRender_Mesh@@@@QAEXAAPAUIRender_Mesh@@@Z ; xr_special_free<1,IRender_Mesh>::operator()
PUBLIC	??$xr_delete@UIRender_Mesh@@@@YAXAAPAUIRender_Mesh@@@Z ; xr_delete<IRender_Mesh>
PUBLIC	?Render@Fvisual@@UAEXM@Z			; Fvisual::Render
PUBLIC	??_GFvisual@@UAEPAXI@Z				; Fvisual::`scalar deleting destructor'
PUBLIC	??0Fvisual@@QAE@XZ				; Fvisual::Fvisual
PUBLIC	??1Fvisual@@UAE@XZ				; Fvisual::~Fvisual
PUBLIC	?Release@Fvisual@@UAEXXZ			; Fvisual::Release
PUBLIC	?Load@Fvisual@@UAEXPBDPAVIReader@@I@Z		; Fvisual::Load
PUBLIC	?Copy@Fvisual@@UAEXPAVIRender_Visual@@@Z	; Fvisual::Copy
EXTRN	??_EFvisual@@UAEPAXI@Z:PROC			; Fvisual::`vector deleting destructor'
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xr_resource.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp
_TEXT	SEGMENT
_pSrc$ = 8						; size = 4
?Copy@Fvisual@@UAEXPAVIRender_Visual@@@Z PROC		; Fvisual::Copy
; _this$ = ecx

; 193  : {

	push	ebx
	push	ebp
	push	esi

; 194  : 	IRender_Visual::Copy		(pSrc);

	mov	esi, DWORD PTR _pSrc$[esp+8]
	push	edi
	push	esi
	mov	edi, ecx
	call	DWORD PTR __imp_?Copy@IRender_Visual@@UAEXPAV1@@Z

; 195  : 
; 196  : 	Fvisual	*pFrom				= dynamic_cast<Fvisual*> (pSrc);

	push	0
	push	OFFSET ??_R0?AVFvisual@@@8
	push	OFFSET ??_R0?AVIRender_Visual@@@8
	push	0
	push	esi
	call	___RTDynamicCast
	mov	esi, eax
	add	esp, 20					; 00000014H
; File I:\Vitalya\mine\NSProjectX\xrCore\xr_resource.h

; 48   : 	ICF		T *			_get	() const							{	return p_;																					}

	mov	ebx, DWORD PTR [esi+72]

; 46   : 	ICF		void		_set	(T * rhs) 							{	if (0!=rhs) rhs->dwReference++;	_dec(); p_ = rhs;											}

	test	ebx, ebx
	je	SHORT $LN12@Copy
	inc	DWORD PTR [ebx]
$LN12@Copy:
	lea	ecx, DWORD PTR [edi+72]
	call	DWORD PTR __imp_?_dec@?$resptr_base@USGeometry@@@@IAEXXZ
	mov	DWORD PTR [edi+72], ebx
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp

; 200  : 	PCOPY	(p_rm_Vertices); if (p_rm_Vertices) p_rm_Vertices->AddRef();

	mov	ecx, DWORD PTR [esi+76]
	mov	DWORD PTR [edi+76], ecx
	test	ecx, ecx
	je	SHORT $LN2@Copy
	mov	eax, DWORD PTR [ecx]
	push	ecx
	call	DWORD PTR [eax+4]
$LN2@Copy:

; 201  : 	PCOPY	(vBase);

	mov	eax, DWORD PTR [esi+80]
	mov	DWORD PTR [edi+80], eax

; 202  : 	PCOPY	(vCount);

	mov	eax, DWORD PTR [esi+84]
	mov	DWORD PTR [edi+84], eax

; 203  : 
; 204  : 	PCOPY	(p_rm_Indices); if (p_rm_Indices) p_rm_Indices->AddRef();

	mov	ecx, DWORD PTR [esi+88]
	mov	DWORD PTR [edi+88], ecx
	test	ecx, ecx
	je	SHORT $LN3@Copy
	mov	eax, DWORD PTR [ecx]
	push	ecx
	call	DWORD PTR [eax+4]
$LN3@Copy:

; 205  : 	PCOPY	(iBase);

	mov	eax, DWORD PTR [esi+92]
	mov	DWORD PTR [edi+92], eax

; 206  : 	PCOPY	(iCount);

	mov	eax, DWORD PTR [esi+96]
	mov	DWORD PTR [edi+96], eax

; 207  : 	PCOPY	(dwPrimitives);

	mov	eax, DWORD PTR [esi+100]
	mov	DWORD PTR [edi+100], eax

; 208  : 
; 209  : 	PCOPY	(m_fast);

	mov	eax, DWORD PTR [esi+104]
	mov	DWORD PTR [edi+104], eax
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 210  : }

	ret	4
?Copy@Fvisual@@UAEXPAVIRender_Visual@@@Z ENDP		; Fvisual::Copy
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\FS.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\FS.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp
_TEXT	SEGMENT
_vStride$1$ = -532					; size = 4
_bytes$1 = -532						; size = 4
$T2 = -528						; size = 4
_bytes$3 = -528						; size = 4
tv1314 = -524						; size = 4
_dcl$ = -520						; size = 520
_N$ = 8							; size = 4
_data$ = 12						; size = 4
_dwFlags$ = 16						; size = 4
?Load@Fvisual@@UAEXPBDPAVIReader@@I@Z PROC		; Fvisual::Load
; _this$ = ecx

; 35   : {

	sub	esp, 532				; 00000214H
	push	ebx

; 36   : 	IRender_Visual::Load		(N,data,dwFlags);

	mov	ebx, DWORD PTR _data$[esp+532]
	push	ebp
	push	esi
	push	edi
	push	DWORD PTR _dwFlags$[esp+544]
	mov	edi, ecx
	push	ebx
	push	DWORD PTR _N$[esp+552]
	call	DWORD PTR __imp_?Load@IRender_Visual@@UAEXPBDPAVIReader@@I@Z

; 37   : 
; 38   : 	D3DVERTEXELEMENT9	dcl		[MAX_FVF_DECL_SIZE];
; 39   : 	D3DVERTEXELEMENT9*	vFormat	= 0;

	xor	ebp, ebp

; 40   : 	dwPrimitives				= 0;
; 41   : 	BOOL				loaded_v=false;
; 42   : 
; 43   : 	if (data->find_chunk(OGF_GCONTAINER)) {

	mov	ecx, ebx
	push	ebp
	push	21					; 00000015H
	mov	DWORD PTR [edi+100], ebp
	call	DWORD PTR __imp_?find_chunk@?$IReaderBase@VIReader@@@@QAEIIPAH@Z
	test	eax, eax
	je	SHORT $LN196@Load

; 44   : #ifndef _EDITOR
; 45   : 		// verts
; 46   : 		u32 ID				= data->r_u32					();

	mov	ecx, ebx
	call	DWORD PTR __imp_?r_u32@?$IReaderBase@VIReader@@@@QAEIXZ

; 47   : 		vBase				= data->r_u32					();

	mov	ecx, ebx
	mov	esi, eax
	call	DWORD PTR __imp_?r_u32@?$IReaderBase@VIReader@@@@QAEIXZ

; 48   : 		vCount				= data->r_u32					();

	mov	ecx, ebx
	mov	DWORD PTR [edi+80], eax
	call	DWORD PTR __imp_?r_u32@?$IReaderBase@VIReader@@@@QAEIXZ
	mov	DWORD PTR [edi+84], eax

; 49   : 
; 50   : 		VERIFY				(NULL==p_rm_Vertices);
; 51   : 
; 52   : 		p_rm_Vertices		= RImplementation.getVB			(ID);

	mov	ecx, DWORD PTR ?RImplementation@@3VCRender@@A+920
	mov	ecx, DWORD PTR [ecx+esi*4]
	mov	DWORD PTR [edi+76], ecx

; 53   : 		p_rm_Vertices->AddRef	();

	push	ecx
	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 119  :         _Ptr += _Off;

	imul	ebp, esi, 524
	add	ebp, DWORD PTR ?RImplementation@@3VCRender@@A+908
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp

; 104  : 	if (!loaded_v && (dwFlags&VLOAD_NOVERTICES)==0) {

	jmp	$LN200@Load
$LN196@Load:
	mov	eax, DWORD PTR _dwFlags$[esp+544]
	mov	esi, DWORD PTR __imp_?error@xrDebug@@QAEXJPBD0H0AA_N@Z
	test	al, 1
	jne	$LN195@Load

; 105  : 		if (data->find_chunk(OGF_VCONTAINER)) {

	push	0
	push	7
	mov	ecx, ebx
	call	DWORD PTR __imp_?find_chunk@?$IReaderBase@VIReader@@@@QAEIIPAH@Z
	test	eax, eax
	je	SHORT $LN13@Load

; 106  : #ifndef _EDITOR
; 107  : 			u32 ID				= data->r_u32				();

	mov	ecx, ebx
	call	DWORD PTR __imp_?r_u32@?$IReaderBase@VIReader@@@@QAEIXZ

; 108  : 			vBase				= data->r_u32				();

	mov	ecx, ebx
	mov	esi, eax
	call	DWORD PTR __imp_?r_u32@?$IReaderBase@VIReader@@@@QAEIXZ

; 109  : 			vCount				= data->r_u32				();

	mov	ecx, ebx
	mov	DWORD PTR [edi+80], eax
	call	DWORD PTR __imp_?r_u32@?$IReaderBase@VIReader@@@@QAEIXZ
	mov	DWORD PTR [edi+84], eax

; 110  : 			VERIFY				(NULL==p_rm_Vertices);
; 111  : 			p_rm_Vertices		= RImplementation.getVB			(ID);

	mov	ecx, DWORD PTR ?RImplementation@@3VCRender@@A+920
	mov	ecx, DWORD PTR [ecx+esi*4]
	mov	DWORD PTR [edi+76], ecx

; 112  : 			p_rm_Vertices->AddRef();

	push	ecx
	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 119  :         _Ptr += _Off;

	imul	ebp, esi, 524
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp

; 115  : 		} else {

	mov	esi, DWORD PTR __imp_?error@xrDebug@@QAEXJPBD0H0AA_N@Z
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 119  :         _Ptr += _Off;

	add	ebp, DWORD PTR ?RImplementation@@3VCRender@@A+908
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp

; 115  : 		} else {

	jmp	$LN199@Load
$LN13@Load:

; 116  : 			R_ASSERT			(data->find_chunk(OGF_VERTICES));

	cmp	BYTE PTR ?ignore_always@?BF@??Load@Fvisual@@UAEXPBDPAVIReader@@I@Z@4_NA, 0
	jne	SHORT $LN11@Load
	push	0
	push	3
	mov	ecx, ebx
	call	DWORD PTR __imp_?find_chunk@?$IReaderBase@VIReader@@@@QAEIIPAH@Z
	test	eax, eax
	jne	SHORT $LN11@Load
	mov	ecx, DWORD PTR __imp_?Debug@@3VxrDebug@@A
	push	OFFSET ?ignore_always@?BF@??Load@Fvisual@@UAEXPBDPAVIReader@@I@Z@4_NA
	push	OFFSET ??_C@_0O@JMBJBGPM@Fvisual?3?3Load@
	push	116					; 00000074H
	push	OFFSET ??_C@_0DH@MFPNNDBK@I?3?2Vitalya?2mine?2NSProjectX?2laye@
	push	OFFSET ??_C@_0BP@PCDMDILK@data?9?$DOfind_chunk?$CIOGF_VERTICES?$CJ@
	call	DWORD PTR __imp_?fail@xrDebug@@QAEXPBD0H0AA_N@Z
$LN11@Load:

; 117  : 			vBase				= 0;
; 118  : 			u32 fvf				= data->r_u32				();

	mov	ecx, ebx
	mov	DWORD PTR [edi+80], ebp
	call	DWORD PTR __imp_?r_u32@?$IReaderBase@VIReader@@@@QAEIXZ
	mov	esi, eax

; 119  : 			CHK_DX				(D3DXDeclaratorFromFVF(fvf,dcl));

	lea	eax, DWORD PTR _dcl$[esp+548]
	push	eax
	push	esi
	call	DWORD PTR __imp__D3DXDeclaratorFromFVF@8

; 120  : 			vFormat				= dcl;
; 121  : 			vCount				= data->r_u32				();

	mov	ecx, ebx
	lea	ebp, DWORD PTR _dcl$[esp+548]
	call	DWORD PTR __imp_?r_u32@?$IReaderBase@VIReader@@@@QAEIXZ

; 122  : 			u32 vStride			= D3DXGetFVFVertexSize		(fvf);

	push	esi
	mov	DWORD PTR [edi+84], eax
	call	DWORD PTR __imp__D3DXGetFVFVertexSize@4

; 123  : 
; 124  : 			BOOL	bSoft		= HW.Caps.geometry.bSoftware || (dwFlags&VLOAD_FORCESOFTWARE);

	mov	edx, DWORD PTR __imp_?HW@@3VCHW@@A
	mov	DWORD PTR _vStride$1$[esp+548], eax
	test	BYTE PTR [edx+56], 1
	jne	SHORT $LN55@Load
	test	BYTE PTR _dwFlags$[esp+544], 4
	mov	esi, 8
	je	SHORT $LN56@Load
$LN55@Load:
	mov	esi, 24					; 00000018H
$LN56@Load:

; 125  : 			u32		dwUsage		= D3DUSAGE_WRITEONLY | (bSoft?D3DUSAGE_SOFTWAREPROCESSING:0);
; 126  : 			BYTE*	bytes		= 0;
; 127  : 			VERIFY				(NULL==p_rm_Vertices);
; 128  : 			R_CHK				(HW.pDevice->CreateVertexBuffer(vCount*vStride,dwUsage,0,D3DPOOL_MANAGED,&p_rm_Vertices,0));

	push	0
	lea	eax, DWORD PTR [edi+76]
	mov	DWORD PTR _bytes$3[esp+552], 0
	mov	edx, DWORD PTR [edx+8]
	push	eax
	mov	eax, DWORD PTR [edi+84]
	imul	eax, DWORD PTR _vStride$1$[esp+556]
	mov	ecx, DWORD PTR [edx]
	push	1
	push	0
	push	esi
	push	eax
	push	edx
	call	DWORD PTR [ecx+104]
	cmp	BYTE PTR ?ignore_always@?BL@??Load@Fvisual@@UAEXPBDPAVIReader@@I@Z@4_NA, 0
	mov	esi, DWORD PTR __imp_?error@xrDebug@@QAEXJPBD0H0AA_N@Z
	jne	SHORT $LN17@Load
	test	eax, eax
	jns	SHORT $LN17@Load
	mov	ecx, DWORD PTR __imp_?Debug@@3VxrDebug@@A
	push	OFFSET ?ignore_always@?BL@??Load@Fvisual@@UAEXPBDPAVIReader@@I@Z@4_NA
	push	OFFSET ??_C@_0O@JMBJBGPM@Fvisual?3?3Load@
	push	128					; 00000080H
	push	OFFSET ??_C@_0DH@MFPNNDBK@I?3?2Vitalya?2mine?2NSProjectX?2laye@
	push	OFFSET ??_C@_0FK@KMMFAENG@HW?4pDevice?9?$DOCreateVertexBuffer?$CI@
	push	eax
	call	esi
$LN17@Load:

; 129  : 			R_CHK				(p_rm_Vertices->Lock(0,0,(void**)&bytes,0));

	mov	eax, DWORD PTR [edi+76]
	lea	edx, DWORD PTR _bytes$3[esp+548]
	push	0
	push	edx
	push	0
	mov	ecx, DWORD PTR [eax]
	push	0
	push	eax
	call	DWORD PTR [ecx+44]
	cmp	BYTE PTR ?ignore_always@?BP@??Load@Fvisual@@UAEXPBDPAVIReader@@I@Z@4_NA, 0
	jne	SHORT $LN20@Load
	test	eax, eax
	jns	SHORT $LN20@Load
	mov	ecx, DWORD PTR __imp_?Debug@@3VxrDebug@@A
	push	OFFSET ?ignore_always@?BP@??Load@Fvisual@@UAEXPBDPAVIReader@@I@Z@4_NA
	push	OFFSET ??_C@_0O@JMBJBGPM@Fvisual?3?3Load@
	push	129					; 00000081H
	push	OFFSET ??_C@_0DH@MFPNNDBK@I?3?2Vitalya?2mine?2NSProjectX?2laye@
	push	OFFSET ??_C@_0CK@NIHMBEKE@p_rm_Vertices?9?$DOLock?$CI0?00?0?$CIvoid?$CK?$CK@
	push	eax
	call	esi
$LN20@Load:

; 130  : 			CopyMemory			(bytes, data->pointer(), vCount*vStride);

	mov	eax, DWORD PTR [edi+84]
	imul	eax, DWORD PTR _vStride$1$[esp+548]
	push	eax
; File I:\Vitalya\mine\NSProjectX\xrCore\FS.h

; 264  : 	IC void*		pointer		()	const		{	return &(data[Pos]);	};

	mov	eax, DWORD PTR [ebx+8]
	add	eax, DWORD PTR [ebx+4]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp

; 130  : 			CopyMemory			(bytes, data->pointer(), vCount*vStride);

	push	eax
	push	DWORD PTR _bytes$3[esp+556]
	call	_memcpy

; 131  : 			p_rm_Vertices->Unlock	();

	mov	eax, DWORD PTR [edi+76]
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+48]
$LN199@Load:

; 132  : 		}
; 133  : 	}
; 134  : 
; 135  : 	// indices
; 136  : 	if (!loaded_v && (dwFlags&VLOAD_NOINDICES)==0) {

	mov	eax, DWORD PTR _dwFlags$[esp+544]
$LN195@Load:
	test	al, 2
	jne	$LN47@Load

; 137  : 		dwPrimitives = 0;
; 138  : 		if (data->find_chunk(OGF_ICONTAINER)) {

	push	0
	push	8
	mov	ecx, ebx
	mov	DWORD PTR [edi+100], 0
	call	DWORD PTR __imp_?find_chunk@?$IReaderBase@VIReader@@@@QAEIIPAH@Z
	test	eax, eax
	je	SHORT $LN28@Load
$LN200@Load:

; 163  : 		}
; 164  : 	}
; 165  : 
; 166  : 	if (dwFlags&VLOAD_NOVERTICES || dwFlags&VLOAD_NOINDICES)	return;

	mov	ecx, ebx
	call	DWORD PTR __imp_?r_u32@?$IReaderBase@VIReader@@@@QAEIXZ
	mov	ecx, ebx
	mov	esi, eax
	call	DWORD PTR __imp_?r_u32@?$IReaderBase@VIReader@@@@QAEIXZ
	mov	ecx, ebx
	mov	DWORD PTR [edi+92], eax
	call	DWORD PTR __imp_?r_u32@?$IReaderBase@VIReader@@@@QAEIXZ
	mov	ecx, eax
	mov	eax, -1431655765			; aaaaaaabH
	mul	ecx
	mov	DWORD PTR [edi+96], ecx
	shr	edx, 1
	mov	DWORD PTR [edi+100], edx
	mov	eax, DWORD PTR ?RImplementation@@3VCRender@@A+932
	mov	ecx, DWORD PTR [eax+esi*4]
	mov	DWORD PTR [edi+88], ecx
	push	ecx
	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+4]
	jmp	$LN47@Load
$LN28@Load:

; 139  : #ifndef _EDITOR
; 140  : 			u32 ID				= data->r_u32			();
; 141  : 			iBase				= data->r_u32			();
; 142  : 			iCount				= data->r_u32			();
; 143  : 			dwPrimitives		= iCount/3;
; 144  : 			VERIFY				(NULL==p_rm_Indices);
; 145  : 			p_rm_Indices		= RImplementation.getIB	(ID);
; 146  : 			p_rm_Indices->AddRef	();
; 147  : #endif
; 148  : 		} else {
; 149  : 			R_ASSERT			(data->find_chunk(OGF_INDICES));

	cmp	BYTE PTR ?ignore_always@?CN@??Load@Fvisual@@UAEXPBDPAVIReader@@I@Z@4_NA, 0
	jne	SHORT $LN26@Load
	push	0
	push	4
	mov	ecx, ebx
	call	DWORD PTR __imp_?find_chunk@?$IReaderBase@VIReader@@@@QAEIIPAH@Z
	test	eax, eax
	jne	SHORT $LN26@Load
	mov	ecx, DWORD PTR __imp_?Debug@@3VxrDebug@@A
	push	OFFSET ?ignore_always@?CN@??Load@Fvisual@@UAEXPBDPAVIReader@@I@Z@4_NA
	push	OFFSET ??_C@_0O@JMBJBGPM@Fvisual?3?3Load@
	push	149					; 00000095H
	push	OFFSET ??_C@_0DH@MFPNNDBK@I?3?2Vitalya?2mine?2NSProjectX?2laye@
	push	OFFSET ??_C@_0BO@CLHPEMLL@data?9?$DOfind_chunk?$CIOGF_INDICES?$CJ@
	call	DWORD PTR __imp_?fail@xrDebug@@QAEXPBD0H0AA_N@Z
$LN26@Load:

; 150  : 			iBase				= 0;
; 151  : 			iCount				= data->r_u32();

	mov	ecx, ebx
	mov	DWORD PTR [edi+92], 0
	call	DWORD PTR __imp_?r_u32@?$IReaderBase@VIReader@@@@QAEIXZ
	mov	ecx, eax

; 152  : 			dwPrimitives		= iCount/3;

	mov	eax, -1431655765			; aaaaaaabH
	mul	ecx
	mov	DWORD PTR [edi+96], ecx
	shr	edx, 1
	mov	DWORD PTR [edi+100], edx

; 153  : 
; 154  : 			BOOL	bSoft		= HW.Caps.geometry.bSoftware || (dwFlags&VLOAD_FORCESOFTWARE);

	mov	edx, DWORD PTR __imp_?HW@@3VCHW@@A
	mov	DWORD PTR tv1314[esp+548], ecx
	test	BYTE PTR [edx+56], 1
	jne	SHORT $LN57@Load
	test	BYTE PTR _dwFlags$[esp+544], 4
	mov	DWORD PTR $T2[esp+548], 0
	je	SHORT $LN58@Load
$LN57@Load:
	mov	DWORD PTR $T2[esp+548], 16		; 00000010H
$LN58@Load:

; 155  : 			u32		dwUsage		= /*D3DUSAGE_WRITEONLY |*/ (bSoft?D3DUSAGE_SOFTWAREPROCESSING:0);	// indices are read in model-wallmarks code
; 156  : 			BYTE*	bytes		= 0;
; 157  : 
; 158  : 			VERIFY				(NULL==p_rm_Indices);
; 159  : 			R_CHK				(HW.pDevice->CreateIndexBuffer(iCount*2,dwUsage,D3DFMT_INDEX16,D3DPOOL_MANAGED,&p_rm_Indices,0));

	push	0
	lea	eax, DWORD PTR [edi+88]
	mov	DWORD PTR _bytes$1[esp+552], 0
	mov	edx, DWORD PTR [edx+8]
	push	eax
	mov	eax, DWORD PTR tv1314[esp+556]
	push	1
	mov	ecx, DWORD PTR [edx]
	add	eax, eax
	push	101					; 00000065H
	push	DWORD PTR $T2[esp+564]
	push	eax
	push	edx
	call	DWORD PTR [ecx+108]
	cmp	BYTE PTR ?ignore_always@?DD@??Load@Fvisual@@UAEXPBDPAVIReader@@I@Z@4_NA, 0
	jne	SHORT $LN32@Load
	test	eax, eax
	jns	SHORT $LN32@Load
	mov	ecx, DWORD PTR __imp_?Debug@@3VxrDebug@@A
	push	OFFSET ?ignore_always@?DD@??Load@Fvisual@@UAEXPBDPAVIReader@@I@Z@4_NA
	push	OFFSET ??_C@_0O@JMBJBGPM@Fvisual?3?3Load@
	push	159					; 0000009fH
	push	OFFSET ??_C@_0DH@MFPNNDBK@I?3?2Vitalya?2mine?2NSProjectX?2laye@
	push	OFFSET ??_C@_0FP@FNCCJNNP@HW?4pDevice?9?$DOCreateIndexBuffer?$CIi@
	push	eax
	call	esi
$LN32@Load:

; 160  : 			R_CHK				(p_rm_Indices->Lock(0,0,(void**)&bytes,0));

	mov	eax, DWORD PTR [edi+88]
	lea	edx, DWORD PTR _bytes$1[esp+548]
	push	0
	push	edx
	push	0
	mov	ecx, DWORD PTR [eax]
	push	0
	push	eax
	call	DWORD PTR [ecx+44]
	cmp	BYTE PTR ?ignore_always@?DH@??Load@Fvisual@@UAEXPBDPAVIReader@@I@Z@4_NA, 0
	jne	SHORT $LN35@Load
	test	eax, eax
	jns	SHORT $LN35@Load
	mov	ecx, DWORD PTR __imp_?Debug@@3VxrDebug@@A
	push	OFFSET ?ignore_always@?DH@??Load@Fvisual@@UAEXPBDPAVIReader@@I@Z@4_NA
	push	OFFSET ??_C@_0O@JMBJBGPM@Fvisual?3?3Load@
	push	160					; 000000a0H
	push	OFFSET ??_C@_0DH@MFPNNDBK@I?3?2Vitalya?2mine?2NSProjectX?2laye@
	push	OFFSET ??_C@_0CJ@IJNIPKCD@p_rm_Indices?9?$DOLock?$CI0?00?0?$CIvoid?$CK?$CK?$CJ@
	push	eax
	call	esi
$LN35@Load:

; 161  : 			CopyMemory		(bytes, data->pointer(), iCount*2);

	mov	eax, DWORD PTR [edi+96]
	add	eax, eax
	push	eax
; File I:\Vitalya\mine\NSProjectX\xrCore\FS.h

; 264  : 	IC void*		pointer		()	const		{	return &(data[Pos]);	};

	mov	eax, DWORD PTR [ebx+8]
	add	eax, DWORD PTR [ebx+4]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp

; 161  : 			CopyMemory		(bytes, data->pointer(), iCount*2);

	push	eax
	push	DWORD PTR _bytes$1[esp+556]
	call	_memcpy

; 162  : 			p_rm_Indices->Unlock	();

	mov	eax, DWORD PTR [edi+88]
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+48]
$LN47@Load:

; 163  : 		}
; 164  : 	}
; 165  : 
; 166  : 	if (dwFlags&VLOAD_NOVERTICES || dwFlags&VLOAD_NOINDICES)	return;

	test	BYTE PTR _dwFlags$[esp+544], 3
	jne	SHORT $LN53@Load

; 167  : 	else	
; 168  : 		rm_geom.create		(vFormat,p_rm_Vertices,p_rm_Indices);

	push	DWORD PTR [edi+88]
	lea	ecx, DWORD PTR [edi+72]
	push	DWORD PTR [edi+76]
	push	ebp
	call	DWORD PTR __imp_?create@resptrcode_geom@@QAEXPAU_D3DVERTEXELEMENT9@@PAUIDirect3DVertexBuffer9@@PAUIDirect3DIndexBuffer9@@@Z
$LN53@Load:

; 169  : }

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 532				; 00000214H
	ret	12					; 0000000cH
?Load@Fvisual@@UAEXPBDPAVIReader@@I@Z ENDP		; Fvisual::Load
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp
_TEXT	SEGMENT
?Release@Fvisual@@UAEXXZ PROC				; Fvisual::Release
; _this$ = ecx

; 31   : 	IRender_Visual::Release	();

	jmp	DWORD PTR __imp_?Release@IRender_Visual@@UAEXXZ
?Release@Fvisual@@UAEXXZ ENDP				; Fvisual::Release
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp
_TEXT	SEGMENT
??1Fvisual@@UAE@XZ PROC					; Fvisual::~Fvisual
; _this$ = ecx

; 25   : {

	push	ebx
	push	edi
	mov	edi, ecx
	mov	DWORD PTR [edi], OFFSET ??_7Fvisual@@6BIRender_Visual@@@
	mov	DWORD PTR [edi+68], OFFSET ??_7Fvisual@@6BIRender_Mesh@@@
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h

; 151  : 	if (ptr) 

	mov	eax, DWORD PTR [edi+104]
	test	eax, eax
	je	SHORT $LN4@Fvisual

; 132  : 		void*	_real_ptr	= dynamic_cast<void*>(ptr);

	push	esi
	push	eax
	call	___RTCastToVoid

; 133  : 		ptr->~T			();

	mov	ecx, DWORD PTR [edi+104]
	add	esp, 4
	mov	esi, eax
	mov	edx, DWORD PTR [ecx]
	push	0
	call	DWORD PTR [edx]

; 134  : 		Memory.mem_free	(_real_ptr);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	esi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z

; 154  : 		ptr = nullptr;

	mov	DWORD PTR [edi+104], 0
	pop	esi
$LN4@Fvisual:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp

; 27   : }

	lea	ecx, DWORD PTR [edi+68]
	call	DWORD PTR __imp_??1IRender_Mesh@@UAE@XZ
	mov	ecx, edi
	pop	edi
	pop	ebx
	jmp	DWORD PTR __imp_??1IRender_Visual@@UAE@XZ
??1Fvisual@@UAE@XZ ENDP					; Fvisual::~Fvisual
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp
_TEXT	SEGMENT
??0Fvisual@@QAE@XZ PROC					; Fvisual::Fvisual
; _this$ = ecx

; 20   : {

	push	esi
	push	edi
	mov	edi, ecx
	call	DWORD PTR __imp_??0IRender_Visual@@QAE@XZ
	lea	ecx, DWORD PTR [edi+68]
	call	DWORD PTR __imp_??0IRender_Mesh@@QAE@XZ
	mov	DWORD PTR [edi], OFFSET ??_7Fvisual@@6BIRender_Visual@@@

; 21   : 	m_fast	=	0;
; 22   : }

	mov	eax, edi
	mov	DWORD PTR [edi+68], OFFSET ??_7Fvisual@@6BIRender_Mesh@@@
	mov	DWORD PTR [edi+104], 0
	pop	edi
	pop	esi
	ret	0
??0Fvisual@@QAE@XZ ENDP					; Fvisual::Fvisual
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp
;	COMDAT ??_GFvisual@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GFvisual@@UAEPAXI@Z PROC				; Fvisual::`scalar deleting destructor', COMDAT
; _this$ = ecx

; 25   : {

	push	ebx
	push	edi
	mov	edi, ecx
	mov	DWORD PTR [edi], OFFSET ??_7Fvisual@@6BIRender_Visual@@@
	mov	DWORD PTR [edi+68], OFFSET ??_7Fvisual@@6BIRender_Mesh@@@
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h

; 151  : 	if (ptr) 

	mov	eax, DWORD PTR [edi+104]
	test	eax, eax
	je	SHORT $LN7@scalar

; 132  : 		void*	_real_ptr	= dynamic_cast<void*>(ptr);

	push	esi
	push	eax
	call	___RTCastToVoid

; 133  : 		ptr->~T			();

	mov	ecx, DWORD PTR [edi+104]
	add	esp, 4
	mov	esi, eax
	mov	edx, DWORD PTR [ecx]
	push	0
	call	DWORD PTR [edx]

; 134  : 		Memory.mem_free	(_real_ptr);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	esi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z

; 154  : 		ptr = nullptr;

	mov	DWORD PTR [edi+104], 0
	pop	esi
$LN7@scalar:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp

; 27   : }

	lea	ecx, DWORD PTR [edi+68]
	call	DWORD PTR __imp_??1IRender_Mesh@@UAE@XZ
	mov	ecx, edi
	call	DWORD PTR __imp_??1IRender_Visual@@UAE@XZ
	test	BYTE PTR ___flags$[esp+4], 1
	je	SHORT $LN11@scalar
	push	108					; 0000006cH
	push	edi
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN11@scalar:
	mov	eax, edi
	pop	edi
	pop	ebx
	ret	4
??_GFvisual@@UAEPAXI@Z ENDP				; Fvisual::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xr_resource.h
; File I:\Vitalya\mine\NSProjectX\xrEngine\R_Backend_Runtime.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp
; File I:\Vitalya\mine\NSProjectX\xrEngine\R_Backend_Runtime.h
; File I:\Vitalya\mine\NSProjectX\xrEngine\r_constants_cache.h
; File I:\Vitalya\mine\NSProjectX\xrEngine\R_Backend_Runtime.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp
; File I:\Vitalya\mine\NSProjectX\xrEngine\R_Backend.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp
_TEXT	SEGMENT
_baseV$1$ = -4						; size = 4
___formal$ = 8						; size = 4
?Render@Fvisual@@UAEXM@Z PROC				; Fvisual::Render
; _this$ = ecx

; 172  : {

	push	ecx
	push	ebx
	push	ebp
	mov	ebx, ecx
	push	esi

; 173  : #if RENDER==R_R2
; 174  : 	if (m_fast && RImplementation.phase==CRender::PHASE_SMAP)
; 175  : 	{
; 176  : 		RCache.set_Geometry		(m_fast->rm_geom);
; 177  : 		RCache.Render			(D3DPT_TRIANGLELIST,m_fast->vBase,0,m_fast->vCount,m_fast->iBase,m_fast->dwPrimitives);
; 178  : 		RCache.stat.r.s_static.add	(m_fast->vCount);
; 179  : 	} else {
; 180  : 		RCache.set_Geometry		(rm_geom);
; 181  : 		RCache.Render			(D3DPT_TRIANGLELIST,vBase,0,vCount,iBase,dwPrimitives);
; 182  : 		RCache.stat.r.s_static.add	(vCount);
; 183  : 	}
; 184  : #else
; 185  : 	RCache.set_Geometry			(rm_geom);

	mov	esi, DWORD PTR __imp_?RCache@@3VCBackend@@A
	push	edi
; File I:\Vitalya\mine\NSProjectX\xrCore\xr_resource.h

; 70   : 	T &					operator*() const												{	return *p_;	}

	mov	edi, DWORD PTR [ebx+72]
; File I:\Vitalya\mine\NSProjectX\xrEngine\R_Backend_Runtime.h

; 224  : 	set_Format(_geom->dcl._get()->dcl);

	mov	eax, DWORD PTR [edi+8]
	mov	edx, DWORD PTR [eax+8]

; 131  : 	if (decl != _decl)

	cmp	DWORD PTR [esi+592], edx
	je	SHORT $LN12@Render

; 132  : 	{
; 133  : 		PGO(Msg("PGO:v_format:%x", _decl));
; 134  : #ifdef DEBUG
; 135  : 		stat.decl++;
; 136  : #endif
; 137  : 		decl = _decl;

	mov	DWORD PTR [esi+592], edx

; 138  : 		CHK_DX(HW.pDevice->SetVertexDeclaration(decl));

	mov	eax, DWORD PTR __imp_?HW@@3VCHW@@A
	push	edx
	mov	eax, DWORD PTR [eax+8]
	push	eax
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR [ecx+348]
$LN12@Render:

; 225  : 	set_Vertices(_geom->vb, _geom->vb_stride);

	mov	ebp, DWORD PTR [edi+12]
	mov	edx, DWORD PTR [edi+20]

; 172  : 	if ((vb != _vb) || (vb_stride != _vb_stride))

	cmp	DWORD PTR [esi+596], ebp
	jne	SHORT $LN16@Render
	cmp	DWORD PTR [esi+604], edx
	je	SHORT $LN15@Render
$LN16@Render:

; 173  : 	{
; 174  : 		PGO(Msg("PGO:VB:%x,%d", _vb, _vb_stride));
; 175  : #ifdef DEBUG
; 176  : 		stat.vb++;
; 177  : #endif
; 178  : 		vb = _vb;

	mov	DWORD PTR [esi+596], ebp

; 179  : 		vb_stride = _vb_stride;

	mov	DWORD PTR [esi+604], edx

; 180  : 		CHK_DX(HW.pDevice->SetStreamSource(0, vb, 0, vb_stride));

	mov	eax, DWORD PTR __imp_?HW@@3VCHW@@A
	push	edx
	push	0
	push	ebp
	mov	eax, DWORD PTR [eax+8]
	push	0
	push	eax
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR [ecx+400]
$LN15@Render:

; 226  : 	set_Indices(_geom->ib);

	mov	edx, DWORD PTR [edi+16]

; 186  : 	if (ib != _ib)

	cmp	DWORD PTR [esi+600], edx
	je	SHORT $LN19@Render

; 187  : 	{
; 188  : 		PGO(Msg("PGO:IB:%x", _ib));
; 189  : #ifdef DEBUG
; 190  : 		stat.ib++;
; 191  : #endif
; 192  : 		ib = _ib;

	mov	DWORD PTR [esi+600], edx

; 193  : 		CHK_DX(HW.pDevice->SetIndices(ib));

	mov	eax, DWORD PTR __imp_?HW@@3VCHW@@A
	push	edx
	mov	eax, DWORD PTR [eax+8]
	push	eax
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR [ecx+416]
$LN19@Render:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp

; 186  : 	RCache.Render				(D3DPT_TRIANGLELIST,vBase,0,vCount,iBase,dwPrimitives);

	mov	eax, DWORD PTR [ebx+80]
	mov	esi, DWORD PTR [ebx+100]
	mov	ebp, DWORD PTR [ebx+92]
	mov	edi, DWORD PTR [ebx+84]
	mov	DWORD PTR _baseV$1$[esp+20], eax
	mov	eax, DWORD PTR __imp_?RCache@@3VCBackend@@A
; File I:\Vitalya\mine\NSProjectX\xrEngine\R_Backend_Runtime.h

; 202  : 	constants.flush();

	lea	ecx, DWORD PTR [eax+608]
	inc	DWORD PTR [eax+9024]
	add	DWORD PTR [eax+9020], edi
	add	DWORD PTR [eax+9016], esi
; File I:\Vitalya\mine\NSProjectX\xrEngine\r_constants_cache.h

; 172  : 		if (a_pixel.b_dirty || a_vertex.b_dirty)	flush_cache();

	cmp	DWORD PTR [ecx+4112], 0
	jne	SHORT $LN25@Render
	cmp	DWORD PTR [ecx+8240], 0
	je	SHORT $LN24@Render
$LN25@Render:
	call	DWORD PTR __imp_?flush_cache@R_constants@@QAEXXZ
$LN24@Render:
; File I:\Vitalya\mine\NSProjectX\xrEngine\R_Backend_Runtime.h

; 203  : 	CHK_DX(HW.pDevice->DrawIndexedPrimitive(T, baseV, startV, countV, startI, PC));

	mov	eax, DWORD PTR __imp_?HW@@3VCHW@@A
	push	esi
	push	ebp
	push	edi
	mov	eax, DWORD PTR [eax+8]
	push	0
	push	DWORD PTR _baseV$1$[esp+36]
	mov	ecx, DWORD PTR [eax]
	push	4
	push	eax
	call	DWORD PTR [ecx+328]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp

; 187  : 	RCache.stat.r.s_static.add	(vCount);

	mov	ecx, DWORD PTR __imp_?RCache@@3VCBackend@@A
; File I:\Vitalya\mine\NSProjectX\xrEngine\R_Backend.h

; 27   : 	ICF		void	add(u32 _verts) { verts += _verts; dips++; }

	mov	eax, DWORD PTR [ebx+84]
	pop	edi
	pop	esi
	add	DWORD PTR [ecx+9048], eax
	inc	DWORD PTR [ecx+9052]
	pop	ebp
	pop	ebx
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\FVisual.cpp

; 189  : }

	pop	ecx
	ret	4
?Render@Fvisual@@UAEXM@Z ENDP				; Fvisual::Render
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h
;	COMDAT ??$xr_delete@UIRender_Mesh@@@@YAXAAPAUIRender_Mesh@@@Z
_TEXT	SEGMENT
??$xr_delete@UIRender_Mesh@@@@YAXAAPAUIRender_Mesh@@@Z PROC ; xr_delete<IRender_Mesh>, COMDAT
; _ptr$ = ecx

; 150  : {

	push	edi
	mov	edi, ecx

; 151  : 	if (ptr) 

	mov	eax, DWORD PTR [edi]
	test	eax, eax
	je	SHORT $LN2@xr_delete

; 132  : 		void*	_real_ptr	= dynamic_cast<void*>(ptr);

	push	esi
	push	eax
	call	___RTCastToVoid

; 133  : 		ptr->~T			();

	mov	ecx, DWORD PTR [edi]
	add	esp, 4
	mov	esi, eax
	mov	edx, DWORD PTR [ecx]
	push	0
	call	DWORD PTR [edx]

; 134  : 		Memory.mem_free	(_real_ptr);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	esi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z

; 152  : 	{
; 153  : 		xr_special_free<is_polymorphic<T>::result,T>()(ptr);
; 154  : 		ptr = nullptr;

	mov	DWORD PTR [edi], 0
	pop	esi
$LN2@xr_delete:

; 155  : 	}
; 156  : }

	pop	edi
	ret	0
??$xr_delete@UIRender_Mesh@@@@YAXAAPAUIRender_Mesh@@@Z ENDP ; xr_delete<IRender_Mesh>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\xrMemory_subst_msvc.h
;	COMDAT ??R?$xr_special_free@$00UIRender_Mesh@@@@QAEXAAPAUIRender_Mesh@@@Z
_TEXT	SEGMENT
_ptr$ = 8						; size = 4
??R?$xr_special_free@$00UIRender_Mesh@@@@QAEXAAPAUIRender_Mesh@@@Z PROC ; xr_special_free<1,IRender_Mesh>::operator(), COMDAT
; _this$dead$ = ecx

; 131  : 	{

	push	esi

; 132  : 		void*	_real_ptr	= dynamic_cast<void*>(ptr);

	mov	esi, DWORD PTR _ptr$[esp]
	push	edi
	push	DWORD PTR [esi]
	call	___RTCastToVoid

; 133  : 		ptr->~T			();

	mov	ecx, DWORD PTR [esi]
	add	esp, 4
	mov	edi, eax
	mov	edx, DWORD PTR [ecx]
	push	0
	call	DWORD PTR [edx]

; 134  : 		Memory.mem_free	(_real_ptr);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	edi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	pop	edi
	pop	esi

; 135  : 	}

	ret	4
??R?$xr_special_free@$00UIRender_Mesh@@@@QAEXAAPAUIRender_Mesh@@@Z ENDP ; xr_special_free<1,IRender_Mesh>::operator()
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??_EFvisual@@WEE@AEPAXI@Z
_TEXT	SEGMENT
??_EFvisual@@WEE@AEPAXI@Z PROC				; [thunk]:Fvisual::`vector deleting destructor', COMDAT
	sub	ecx, 68					; 00000044H
	jmp	??_EFvisual@@UAEPAXI@Z
??_EFvisual@@WEE@AEPAXI@Z ENDP				; [thunk]:Fvisual::`vector deleting destructor'
_TEXT	ENDS
END
