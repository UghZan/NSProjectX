; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30146.0 

	TITLE	i:\vitalya\mine\nsprojectx\nspx_build\intermediate\release-win32\xrrender_r1\blender_vertex_aref.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BJ@JNJGHNDC@LEVEL?3?5diffuse?$CKbase?4aref@ ; `string'
PUBLIC	??_C@_0BL@NIHOAKEC@CBlender_Vertex_aref?3?3Load@ ; `string'
PUBLIC	??_C@_0EI@MOOIAPBI@I?3?2Vitalya?2mine?2NSProjectX?2laye@ ; `string'
PUBLIC	??_R2CBlender_Vertex_aref@@8			; CBlender_Vertex_aref::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CBlender_Vertex_aref@@8		; CBlender_Vertex_aref::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3CBlender_Vertex_aref@@8			; CBlender_Vertex_aref::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AVCBlender_Vertex_aref@@@8		; CBlender_Vertex_aref `RTTI Type Descriptor'
PUBLIC	??_R4CBlender_Vertex_aref@@6B@			; CBlender_Vertex_aref::`RTTI Complete Object Locator'
PUBLIC	??_7CBlender_Vertex_aref@@6B@			; CBlender_Vertex_aref::`vftable'
;	COMDAT ?ignore_always@?BF@??Load@CBlender_Vertex_aref@@UAEXAAVIReader@@G@Z@4_NA
_BSS	SEGMENT
?ignore_always@?BF@??Load@CBlender_Vertex_aref@@UAEXAAVIReader@@G@Z@4_NA DB 01H DUP (?) ; `CBlender_Vertex_aref::Load'::`21'::ignore_always
_BSS	ENDS
;	COMDAT ?ignore_always@?O@??Load@CBlender_Vertex_aref@@UAEXAAVIReader@@G@Z@4_NA
_BSS	SEGMENT
?ignore_always@?O@??Load@CBlender_Vertex_aref@@UAEXAAVIReader@@G@Z@4_NA DB 01H DUP (?) ; `CBlender_Vertex_aref::Load'::`14'::ignore_always
_BSS	ENDS
;	COMDAT ?ignore_always@?6??Load@CBlender_Vertex_aref@@UAEXAAVIReader@@G@Z@4_NA
_BSS	SEGMENT
?ignore_always@?6??Load@CBlender_Vertex_aref@@UAEXAAVIReader@@G@Z@4_NA DB 01H DUP (?) ; `CBlender_Vertex_aref::Load'::`7'::ignore_always
_BSS	ENDS
;	COMDAT ??_7CBlender_Vertex_aref@@6B@
CONST	SEGMENT
??_7CBlender_Vertex_aref@@6B@ DD FLAT:??_R4CBlender_Vertex_aref@@6B@ ; CBlender_Vertex_aref::`vftable'
	DD	FLAT:?getName@IBlender@@UAEPBDXZ
	DD	FLAT:?getComment@CBlender_Vertex_aref@@UAEPBDXZ
	DD	FLAT:?Save@CBlender_Vertex_aref@@UAEXAAVIWriter@@@Z
	DD	FLAT:?Load@CBlender_Vertex_aref@@UAEXAAVIReader@@G@Z
	DD	FLAT:?canBeDetailed@IBlender@@UAEHXZ
	DD	FLAT:?canBeLMAPped@CBlender_Vertex_aref@@UAEHXZ
	DD	FLAT:?Compile@CBlender_Vertex_aref@@UAEXAAVCBlender_Compile@@@Z
	DD	FLAT:??_ECBlender_Vertex_aref@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R4CBlender_Vertex_aref@@6B@
rdata$r	SEGMENT
??_R4CBlender_Vertex_aref@@6B@ DD 00H			; CBlender_Vertex_aref::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCBlender_Vertex_aref@@@8
	DD	FLAT:??_R3CBlender_Vertex_aref@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCBlender_Vertex_aref@@@8
data$rs	SEGMENT
??_R0?AVCBlender_Vertex_aref@@@8 DD FLAT:??_7type_info@@6B@ ; CBlender_Vertex_aref `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCBlender_Vertex_aref@@', 00H
data$rs	ENDS
;	COMDAT ??_R3CBlender_Vertex_aref@@8
rdata$r	SEGMENT
??_R3CBlender_Vertex_aref@@8 DD 00H			; CBlender_Vertex_aref::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CBlender_Vertex_aref@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CBlender_Vertex_aref@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CBlender_Vertex_aref@@8 DD FLAT:??_R0?AVCBlender_Vertex_aref@@@8 ; CBlender_Vertex_aref::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CBlender_Vertex_aref@@8
rdata$r	ENDS
;	COMDAT ??_R2CBlender_Vertex_aref@@8
rdata$r	SEGMENT
??_R2CBlender_Vertex_aref@@8 DD FLAT:??_R1A@?0A@EA@CBlender_Vertex_aref@@8 ; CBlender_Vertex_aref::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IBlender@@8
	DD	FLAT:??_R1A@?0A@EA@CPropertyBase@@8
rdata$r	ENDS
;	COMDAT ??_C@_0EI@MOOIAPBI@I?3?2Vitalya?2mine?2NSProjectX?2laye@
CONST	SEGMENT
??_C@_0EI@MOOIAPBI@I?3?2Vitalya?2mine?2NSProjectX?2laye@ DB 'I:\Vitalya\m'
	DB	'ine\NSProjectX\layers\xrRenderPC_R1\Blender_Vertex_aref.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@NIHOAKEC@CBlender_Vertex_aref?3?3Load@
CONST	SEGMENT
??_C@_0BL@NIHOAKEC@CBlender_Vertex_aref?3?3Load@ DB 'CBlender_Vertex_aref'
	DB	'::Load', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@JNJGHNDC@LEVEL?3?5diffuse?$CKbase?4aref@
CONST	SEGMENT
??_C@_0BJ@JNJGHNDC@LEVEL?3?5diffuse?$CKbase?4aref@ DB 'LEVEL: diffuse*bas'
	DB	'e.aref', 00H				; `string'
PUBLIC	?Compile@CBlender_Vertex_aref@@UAEXAAVCBlender_Compile@@@Z ; CBlender_Vertex_aref::Compile
PUBLIC	?Load@CBlender_Vertex_aref@@UAEXAAVIReader@@G@Z	; CBlender_Vertex_aref::Load
PUBLIC	?Save@CBlender_Vertex_aref@@UAEXAAVIWriter@@@Z	; CBlender_Vertex_aref::Save
PUBLIC	??1CBlender_Vertex_aref@@UAE@XZ			; CBlender_Vertex_aref::~CBlender_Vertex_aref
PUBLIC	??_GCBlender_Vertex_aref@@UAEPAXI@Z		; CBlender_Vertex_aref::`scalar deleting destructor'
PUBLIC	??0CBlender_Vertex_aref@@QAE@XZ			; CBlender_Vertex_aref::CBlender_Vertex_aref
PUBLIC	?canBeLMAPped@CBlender_Vertex_aref@@UAEHXZ	; CBlender_Vertex_aref::canBeLMAPped
PUBLIC	?getComment@CBlender_Vertex_aref@@UAEPBDXZ	; CBlender_Vertex_aref::getComment
EXTRN	??_ECBlender_Vertex_aref@@UAEPAXI@Z:PROC	; CBlender_Vertex_aref::`vector deleting destructor'
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\Blender_Vertex_aref.h
;	COMDAT ?getComment@CBlender_Vertex_aref@@UAEPBDXZ
_TEXT	SEGMENT
?getComment@CBlender_Vertex_aref@@UAEPBDXZ PROC		; CBlender_Vertex_aref::getComment, COMDAT
; _this$ = ecx

; 15   : 	virtual		LPCSTR		getComment()	{ return "LEVEL: diffuse*base.aref";	}

	mov	eax, OFFSET ??_C@_0BJ@JNJGHNDC@LEVEL?3?5diffuse?$CKbase?4aref@
	ret	0
?getComment@CBlender_Vertex_aref@@UAEPBDXZ ENDP		; CBlender_Vertex_aref::getComment
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\Blender_Vertex_aref.h
;	COMDAT ?canBeLMAPped@CBlender_Vertex_aref@@UAEHXZ
_TEXT	SEGMENT
?canBeLMAPped@CBlender_Vertex_aref@@UAEHXZ PROC		; CBlender_Vertex_aref::canBeLMAPped, COMDAT
; _this$ = ecx

; 16   : 	virtual		BOOL		canBeLMAPped()	{ return FALSE; }

	xor	eax, eax
	ret	0
?canBeLMAPped@CBlender_Vertex_aref@@UAEHXZ ENDP		; CBlender_Vertex_aref::canBeLMAPped
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\Blender_Vertex_aref.cpp
; File I:\Vitalya\mine\NSProjectX\xrEngine\properties.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\Blender_Vertex_aref.cpp
_TEXT	SEGMENT
??0CBlender_Vertex_aref@@QAE@XZ PROC			; CBlender_Vertex_aref::CBlender_Vertex_aref
; _this$ = ecx

; 15   : {

	push	esi
	mov	esi, ecx
	call	DWORD PTR __imp_??0IBlender@@QAE@XZ
	mov	DWORD PTR [esi], OFFSET ??_7CBlender_Vertex_aref@@6B@

; 17   : 	description.version	= 1;

	mov	eax, 1
; File I:\Vitalya\mine\NSProjectX\xrEngine\properties.h

; 37   : 	xrP_Integer() : value(0), min(0), max(255) {}

	mov	DWORD PTR [esi+328], 0
	mov	DWORD PTR [esi+332], 255		; 000000ffH
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\Blender_Vertex_aref.cpp

; 17   : 	description.version	= 1;

	mov	WORD PTR [esi+176], ax

; 18   : 	oAREF.value			= 32;
; 19   : 	oAREF.min			= 0;
; 20   : 	oAREF.max			= 255;
; 21   : 	oBlend.value		= FALSE;
; 22   : }

	mov	eax, esi
	mov	DWORD PTR [esi+4], 1162223648		; 45462020H
	mov	DWORD PTR [esi+8], 1449083218		; 565f4152H
	mov	DWORD PTR [esi+324], 32			; 00000020H
	mov	DWORD PTR [esi+328], 0
	mov	DWORD PTR [esi+332], 255		; 000000ffH
	mov	DWORD PTR [esi+336], 0
	pop	esi
	ret	0
??0CBlender_Vertex_aref@@QAE@XZ ENDP			; CBlender_Vertex_aref::CBlender_Vertex_aref
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\Blender_Vertex_aref.cpp
;	COMDAT ??_GCBlender_Vertex_aref@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCBlender_Vertex_aref@@UAEPAXI@Z PROC		; CBlender_Vertex_aref::`scalar deleting destructor', COMDAT
; _this$ = ecx

; 25   : {

	push	esi
	mov	esi, ecx
	mov	DWORD PTR [esi], OFFSET ??_7CBlender_Vertex_aref@@6B@

; 26   : 
; 27   : }

	call	DWORD PTR __imp_??1IBlender@@UAE@XZ
	test	BYTE PTR ___flags$[esp], 1
	je	SHORT $LN6@scalar
	push	340					; 00000154H
	push	esi
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN6@scalar:
	mov	eax, esi
	pop	esi
	ret	4
??_GCBlender_Vertex_aref@@UAEPAXI@Z ENDP		; CBlender_Vertex_aref::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\Blender_Vertex_aref.cpp
_TEXT	SEGMENT
??1CBlender_Vertex_aref@@UAE@XZ PROC			; CBlender_Vertex_aref::~CBlender_Vertex_aref
; _this$ = ecx

; 25   : {

	mov	DWORD PTR [ecx], OFFSET ??_7CBlender_Vertex_aref@@6B@

; 26   : 
; 27   : }

	jmp	DWORD PTR __imp_??1IBlender@@UAE@XZ
??1CBlender_Vertex_aref@@UAE@XZ ENDP			; CBlender_Vertex_aref::~CBlender_Vertex_aref
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\Blender_Vertex_aref.cpp
; File I:\Vitalya\mine\NSProjectX\xrEngine\properties.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\Blender_Vertex_aref.cpp
; File I:\Vitalya\mine\NSProjectX\xrEngine\properties.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\Blender_Vertex_aref.cpp
; File I:\Vitalya\mine\NSProjectX\xrEngine\properties.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\Blender_Vertex_aref.cpp
_TEXT	SEGMENT
_fs$ = 8						; size = 4
?Save@CBlender_Vertex_aref@@UAEXAAVIWriter@@@Z PROC	; CBlender_Vertex_aref::Save
; _this$ = ecx

; 30   : {

	push	ebx
	push	esi

; 31   : 	IBlender::Save		(fs);

	mov	esi, DWORD PTR _fs$[esp+4]
	push	edi
	push	esi
	mov	edi, ecx
	call	DWORD PTR __imp_?Save@IBlender@@UAEXAAVIWriter@@@Z
; File I:\Vitalya\mine\NSProjectX\xrEngine\properties.h

; 101  : 	fs.w_u32(ID);

	push	4
	mov	ecx, esi
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\Blender_Vertex_aref.cpp

; 32   : 	xrPWRITE_PROP		(fs,"Alpha ref",	xrPID_INTEGER,	oAREF);

	lea	ebx, DWORD PTR [edi+324]
; File I:\Vitalya\mine\NSProjectX\xrEngine\properties.h

; 101  : 	fs.w_u32(ID);

	call	DWORD PTR __imp_?w_u32@IWriter@@QAEXI@Z

; 102  : 	fs.w_stringZ(name);

	push	OFFSET ??_C@_09HNLHEELD@Alpha?5ref@
	mov	ecx, esi
	call	DWORD PTR __imp_?w_stringZ@IWriter@@QAEXPBD@Z

; 103  : 	if (data && size)	fs.w(data, size);

	test	ebx, ebx
	je	SHORT $LN4@Save
	mov	eax, DWORD PTR [esi]
	mov	ecx, esi
	push	12					; 0000000cH
	push	ebx
	call	DWORD PTR [eax+12]
$LN4@Save:

; 101  : 	fs.w_u32(ID);

	push	6
	mov	ecx, esi
	call	DWORD PTR __imp_?w_u32@IWriter@@QAEXI@Z

; 102  : 	fs.w_stringZ(name);

	push	OFFSET ??_C@_0M@IACFODAI@Alpha?9blend@
	mov	ecx, esi
	call	DWORD PTR __imp_?w_stringZ@IWriter@@QAEXPBD@Z
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\Blender_Vertex_aref.cpp

; 33   : 	xrPWRITE_PROP		(fs,"Alpha-blend",	xrPID_BOOL,		oBlend);

	add	edi, 336				; 00000150H
; File I:\Vitalya\mine\NSProjectX\xrEngine\properties.h

; 103  : 	if (data && size)	fs.w(data, size);

	je	SHORT $LN7@Save
	mov	eax, DWORD PTR [esi]
	mov	ecx, esi
	push	4
	push	edi
	call	DWORD PTR [eax+12]
$LN7@Save:
	pop	edi
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\Blender_Vertex_aref.cpp

; 34   : }

	pop	esi
	pop	ebx
	ret	4
?Save@CBlender_Vertex_aref@@UAEXAAVIWriter@@@Z ENDP	; CBlender_Vertex_aref::Save
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\Blender_Vertex_aref.cpp
; File I:\Vitalya\mine\NSProjectX\xrEngine\properties.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\Blender_Vertex_aref.cpp
; File I:\Vitalya\mine\NSProjectX\xrEngine\properties.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\Blender_Vertex_aref.cpp
; File I:\Vitalya\mine\NSProjectX\xrEngine\properties.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\Blender_Vertex_aref.cpp
_TEXT	SEGMENT
_fs$ = 8						; size = 4
_version$ = 12						; size = 2
?Load@CBlender_Vertex_aref@@UAEXAAVIReader@@G@Z PROC	; CBlender_Vertex_aref::Load
; _this$ = ecx

; 37   : {

	push	ebx
	push	esi

; 38   : 	IBlender::Load		(fs,version);

	mov	esi, DWORD PTR _version$[esp+4]
	mov	ebx, ecx
	push	edi
	mov	edi, DWORD PTR _fs$[esp+8]
	push	esi
	push	edi
	call	DWORD PTR __imp_?Load@IBlender@@UAEXAAVIReader@@G@Z

; 39   : 
; 40   : 	switch (version)	

	movzx	eax, si
	sub	eax, 0
	je	$LN6@Load

; 48   : 		xrPREAD_PROP	(fs,xrPID_INTEGER,	oAREF);

	cmp	BYTE PTR ?ignore_always@?O@??Load@CBlender_Vertex_aref@@UAEXAAVIReader@@G@Z@4_NA, 0
	jne	SHORT $LN9@Load
; File I:\Vitalya\mine\NSProjectX\xrEngine\properties.h

; 118  : 	u32 T = fs.r_u32();

	mov	ecx, edi
	call	DWORD PTR __imp_?r_u32@?$IReaderBase@VIReader@@@@QAEIXZ

; 119  : 	fs.skip_stringZ();

	mov	ecx, edi
	mov	esi, eax
	call	DWORD PTR __imp_?skip_stringZ@IReader@@QAEXXZ
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\Blender_Vertex_aref.cpp

; 48   : 		xrPREAD_PROP	(fs,xrPID_INTEGER,	oAREF);

	cmp	esi, 4
	je	SHORT $LN9@Load
	mov	ecx, DWORD PTR __imp_?Debug@@3VxrDebug@@A
	push	OFFSET ?ignore_always@?O@??Load@CBlender_Vertex_aref@@UAEXAAVIReader@@G@Z@4_NA
	push	OFFSET ??_C@_0BL@NIHOAKEC@CBlender_Vertex_aref?3?3Load@
	push	48					; 00000030H
	push	OFFSET ??_C@_0EI@MOOIAPBI@I?3?2Vitalya?2mine?2NSProjectX?2laye@
	push	OFFSET ??_C@_0BL@OMCBIJFA@xrPID_INTEGER?$DN?$DNxrPREAD?$CIfs?$CJ@
	call	DWORD PTR __imp_?fail@xrDebug@@QAEXPBD0H0AA_N@Z
$LN9@Load:
	push	12					; 0000000cH
	lea	eax, DWORD PTR [ebx+324]
	mov	ecx, edi
	push	eax
	call	DWORD PTR __imp_?r@IReader@@QAEXPAXH@Z

; 49   : 		xrPREAD_PROP	(fs,xrPID_BOOL,		oBlend);

	cmp	BYTE PTR ?ignore_always@?BF@??Load@CBlender_Vertex_aref@@UAEXAAVIReader@@G@Z@4_NA, 0
	jne	SHORT $LN14@Load
; File I:\Vitalya\mine\NSProjectX\xrEngine\properties.h

; 118  : 	u32 T = fs.r_u32();

	mov	ecx, edi
	call	DWORD PTR __imp_?r_u32@?$IReaderBase@VIReader@@@@QAEIXZ

; 119  : 	fs.skip_stringZ();

	mov	ecx, edi
	mov	esi, eax
	call	DWORD PTR __imp_?skip_stringZ@IReader@@QAEXXZ
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\Blender_Vertex_aref.cpp

; 49   : 		xrPREAD_PROP	(fs,xrPID_BOOL,		oBlend);

	cmp	esi, 6
	je	SHORT $LN14@Load
	mov	ecx, DWORD PTR __imp_?Debug@@3VxrDebug@@A
	push	OFFSET ?ignore_always@?BF@??Load@CBlender_Vertex_aref@@UAEXAAVIReader@@G@Z@4_NA
	push	OFFSET ??_C@_0BL@NIHOAKEC@CBlender_Vertex_aref?3?3Load@
	push	49					; 00000031H
	push	OFFSET ??_C@_0EI@MOOIAPBI@I?3?2Vitalya?2mine?2NSProjectX?2laye@
	push	OFFSET ??_C@_0BI@FFCKKNMB@xrPID_BOOL?$DN?$DNxrPREAD?$CIfs?$CJ@
	call	DWORD PTR __imp_?fail@xrDebug@@QAEXPBD0H0AA_N@Z
$LN14@Load:
	push	4
	lea	eax, DWORD PTR [ebx+336]
	mov	ecx, edi
	push	eax
	call	DWORD PTR __imp_?r@IReader@@QAEXPAXH@Z
	pop	edi

; 50   : 		break;
; 51   : 	}
; 52   : }

	pop	esi
	pop	ebx
	ret	8
$LN6@Load:

; 43   : 		xrPREAD_PROP	(fs,xrPID_INTEGER,	oAREF);

	cmp	BYTE PTR ?ignore_always@?6??Load@CBlender_Vertex_aref@@UAEXAAVIReader@@G@Z@4_NA, 0
	jne	SHORT $LN4@Load
; File I:\Vitalya\mine\NSProjectX\xrEngine\properties.h

; 118  : 	u32 T = fs.r_u32();

	mov	ecx, edi
	call	DWORD PTR __imp_?r_u32@?$IReaderBase@VIReader@@@@QAEIXZ

; 119  : 	fs.skip_stringZ();

	mov	ecx, edi
	mov	esi, eax
	call	DWORD PTR __imp_?skip_stringZ@IReader@@QAEXXZ
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\Blender_Vertex_aref.cpp

; 43   : 		xrPREAD_PROP	(fs,xrPID_INTEGER,	oAREF);

	cmp	esi, 4
	je	SHORT $LN4@Load
	mov	ecx, DWORD PTR __imp_?Debug@@3VxrDebug@@A
	push	OFFSET ?ignore_always@?6??Load@CBlender_Vertex_aref@@UAEXAAVIReader@@G@Z@4_NA
	push	OFFSET ??_C@_0BL@NIHOAKEC@CBlender_Vertex_aref?3?3Load@
	push	43					; 0000002bH
	push	OFFSET ??_C@_0EI@MOOIAPBI@I?3?2Vitalya?2mine?2NSProjectX?2laye@
	push	OFFSET ??_C@_0BL@OMCBIJFA@xrPID_INTEGER?$DN?$DNxrPREAD?$CIfs?$CJ@
	call	DWORD PTR __imp_?fail@xrDebug@@QAEXPBD0H0AA_N@Z
$LN4@Load:
	push	12					; 0000000cH
	lea	eax, DWORD PTR [ebx+324]
	mov	ecx, edi
	push	eax
	call	DWORD PTR __imp_?r@IReader@@QAEXPAXH@Z
	pop	edi

; 50   : 		break;
; 51   : 	}
; 52   : }

	pop	esi
	mov	DWORD PTR [ebx+336], 0
	pop	ebx
	ret	8
?Load@CBlender_Vertex_aref@@UAEXAAVIReader@@G@Z ENDP	; CBlender_Vertex_aref::Load
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\Blender_Vertex_aref.cpp
_TEXT	SEGMENT
_C$ = 8							; size = 4
?Compile@CBlender_Vertex_aref@@UAEXAAVCBlender_Compile@@@Z PROC ; CBlender_Vertex_aref::Compile
; _this$ = ecx

; 55   : {

	push	esi
	push	edi

; 56   : 	IBlender::Compile		(C);

	mov	edi, DWORD PTR _C$[esp+4]
	mov	esi, ecx
	push	edi
	call	DWORD PTR __imp_?Compile@IBlender@@UAEXAAVCBlender_Compile@@@Z

; 57   : 	
; 58   : 	if (C.bEditor)

	cmp	DWORD PTR [edi+44], 0
	je	$LN4@Compile

; 59   : 	{
; 60   : 		C.PassBegin		();

	mov	ecx, edi
	call	DWORD PTR __imp_?PassBegin@CBlender_Compile@@QAEXXZ

; 61   : 		{
; 62   : 			C.PassSET_ZB		(TRUE,TRUE);

	push	0
	push	1
	push	1
	mov	ecx, edi
	call	DWORD PTR __imp_?PassSET_ZB@CBlender_Compile@@QAEXHHH@Z

; 63   : 			if (oBlend.value)	C.PassSET_Blend			(TRUE, D3DBLEND_SRCALPHA,D3DBLEND_INVSRCALPHA,	TRUE,oAREF.value);

	cmp	DWORD PTR [esi+336], 0
	mov	ecx, edi
	mov	eax, DWORD PTR [esi+324]
	push	eax
	push	1
	je	SHORT $LN6@Compile
	push	6
	push	5
	jmp	SHORT $LN105@Compile
$LN6@Compile:

; 64   : 			else				C.PassSET_Blend			(TRUE, D3DBLEND_ONE, D3DBLEND_ZERO,				TRUE,oAREF.value);

	push	1
	push	2
$LN105@Compile:

; 65   : 			C.PassSET_LightFog	(TRUE,TRUE);

	push	1
	call	DWORD PTR __imp_?PassSET_Blend@CBlender_Compile@@QAEXHIIHI@Z
	push	1
	push	1
	mov	ecx, edi
	call	DWORD PTR __imp_?PassSET_LightFog@CBlender_Compile@@QAEXHH@Z

; 66   : 			
; 67   : 			// Stage1 - Base texture
; 68   : 			C.StageBegin		();

	mov	ecx, edi
	call	DWORD PTR __imp_?StageBegin@CBlender_Compile@@QAEXXZ

; 69   : 			C.StageSET_Color	(D3DTA_TEXTURE,	  D3DTOP_MODULATE,	D3DTA_DIFFUSE);

	push	0
	push	4
	push	2
	mov	ecx, edi
	call	DWORD PTR __imp_?StageSET_Color@CBlender_Compile@@QAEXIII@Z

; 70   : 			C.StageSET_Alpha	(D3DTA_TEXTURE,	  D3DTOP_MODULATE,	D3DTA_DIFFUSE);

	push	0
	push	4
	push	2
	mov	ecx, edi
	call	DWORD PTR __imp_?StageSET_Alpha@CBlender_Compile@@QAEXIII@Z

; 71   : 			C.Stage_Texture		(oT_Name);

	push	2
	push	2
	push	2
	push	1
	lea	eax, DWORD PTR [esi+196]
	mov	ecx, edi
	push	eax
	call	DWORD PTR __imp_?Stage_Texture@CBlender_Compile@@QAEXPBDIIII@Z

; 72   : 			C.Stage_Matrix		(oT_xform,	0);

	push	0
	lea	eax, DWORD PTR [esi+260]
	mov	ecx, edi
	push	eax
	call	DWORD PTR __imp_?Stage_Matrix@CBlender_Compile@@QAEXPBDH@Z

; 73   : 			C.Stage_Constant	("$null");

	push	OFFSET ??_C@_05CAGGJGBB@$null@
	mov	ecx, edi
	call	DWORD PTR __imp_?Stage_Constant@CBlender_Compile@@QAEXPBD@Z

; 74   : 			C.StageEnd			();

	mov	ecx, edi
	call	DWORD PTR __imp_?StageEnd@CBlender_Compile@@QAEXXZ

; 75   : 		}
; 76   : 		C.PassEnd			();

	mov	ecx, edi
	call	DWORD PTR __imp_?PassEnd@CBlender_Compile@@QAEXXZ

; 119  : 			C.r_Sampler		("s_base",C.L_textures[0]);
; 120  : 			C.r_End			();
; 121  : 			break;
; 122  : 		}
; 123  : 	}
; 124  : }

	pop	edi
	pop	esi
	ret	4
$LN4@Compile:

; 77   : 	} else {
; 78   : 		switch (C.iElement)

	mov	eax, DWORD PTR [edi+60]
	cmp	eax, 4
	ja	$LN2@Compile
	jmp	DWORD PTR $LN104@Compile[eax*4]
$LN8@Compile:

; 79   : 		{
; 80   : 		case SE_R1_NORMAL_HQ:
; 81   : 			// Level view
; 82   : 			{
; 83   : 				LPCSTR					sname	= "vert";
; 84   : 				if (C.bDetail_Diffuse)	sname	= "vert_dt";
; 85   : 				if (oBlend.value)	C.r_Pass	(sname,sname,TRUE,TRUE,TRUE,TRUE,D3DBLEND_SRCALPHA,	D3DBLEND_INVSRCALPHA,	TRUE,oAREF.value);

	cmp	DWORD PTR [edi+52], 0
	mov	ecx, OFFSET ??_C@_07PEDHPBPM@vert_dt@
	mov	eax, OFFSET ??_C@_04FPJBBKHA@vert@
	cmovne	eax, ecx
	cmp	DWORD PTR [esi+336], 0
	mov	ecx, DWORD PTR [esi+324]
	push	ecx
	push	1
	mov	ecx, edi
	je	SHORT $LN10@Compile
	push	6
	push	5
	jmp	SHORT $LN106@Compile
$LN10@Compile:

; 86   : 				else				C.r_Pass	(sname,sname,TRUE,TRUE,TRUE,TRUE,D3DBLEND_ONE,		D3DBLEND_ZERO,			TRUE,oAREF.value);

	push	1
	push	2
$LN106@Compile:

; 87   : 				C.r_Sampler		("s_base",	C.L_textures[0]);

	push	1
	push	1
	push	1
	push	1
	push	eax
	push	eax
	call	DWORD PTR __imp_?r_Pass@CBlender_Compile@@QAEXPBD0_NHHHW4_D3DBLEND@@2HI@Z
	push	2
	push	2
	push	2
	push	1
	push	0
	push	ecx
	mov	ecx, esp
	push	DWORD PTR [edi]
	call	??0shared_str@@QAE@ABV0@@Z		; shared_str::shared_str
	push	OFFSET ??_C@_06GMJOKNLF@s_base@
	mov	ecx, edi
	call	DWORD PTR __imp_?r_Sampler@CBlender_Compile@@QAEIPBDVshared_str@@_NIIII@Z

; 88   : 				C.r_Sampler		("s_detail",C.detail_texture);

	push	2
	push	2
	push	2
	push	1
	push	0
	push	DWORD PTR [edi+36]
	mov	ecx, edi
	push	OFFSET ??_C@_08HKJIABFJ@s_detail@
	call	DWORD PTR __imp_?r_Sampler@CBlender_Compile@@QAEIPBD0_NIIII@Z

; 119  : 			C.r_Sampler		("s_base",C.L_textures[0]);
; 120  : 			C.r_End			();
; 121  : 			break;
; 122  : 		}
; 123  : 	}
; 124  : }

	mov	ecx, edi
	call	DWORD PTR __imp_?r_End@CBlender_Compile@@QAEXXZ
	pop	edi
	pop	esi
	ret	4
$LN12@Compile:

; 89   : 				C.r_End			();
; 90   : 			}
; 91   : 			break;
; 92   : 		case SE_R1_NORMAL_LQ:
; 93   : 			// Level view
; 94   : 			{
; 95   : 				LPCSTR				sname		= "vert";
; 96   : 				if (oBlend.value)	C.r_Pass	(sname,sname,TRUE,TRUE,TRUE,TRUE,D3DBLEND_SRCALPHA,	D3DBLEND_INVSRCALPHA,	TRUE,oAREF.value);

	cmp	DWORD PTR [esi+336], 0
	mov	ecx, edi
	mov	eax, DWORD PTR [esi+324]
	push	eax
	push	1
	je	SHORT $LN13@Compile
	push	6
	push	5
	jmp	SHORT $LN108@Compile
$LN13@Compile:

; 97   : 				else				C.r_Pass	(sname,sname,TRUE,TRUE,TRUE,TRUE,D3DBLEND_ONE,		D3DBLEND_ZERO,			TRUE,oAREF.value);

	push	1
	push	2
$LN108@Compile:

; 98   : 				C.r_Sampler		("s_base",	C.L_textures[0]);

	push	1
	push	1
	push	1
	push	1
	push	OFFSET ??_C@_04FPJBBKHA@vert@
	push	OFFSET ??_C@_04FPJBBKHA@vert@

; 99   : 				C.r_End			();
; 100  : 			}
; 101  : 			break;

	jmp	$LN109@Compile
$LN15@Compile:

; 102  : 		case SE_R1_LPOINT:
; 103  : 			C.r_Pass		("vert_point","add_point",FALSE,TRUE,FALSE,TRUE,D3DBLEND_ONE,D3DBLEND_ONE,TRUE,oAREF.value);

	push	DWORD PTR [esi+324]
	mov	ecx, edi
	push	1
	push	2
	push	2
	push	1
	push	0
	push	1
	push	0
	push	OFFSET ??_C@_09PNJHBAHM@add_point@
	push	OFFSET ??_C@_0L@MJIHPLPM@vert_point@
	call	DWORD PTR __imp_?r_Pass@CBlender_Compile@@QAEXPBD0_NHHHW4_D3DBLEND@@2HI@Z

; 104  : 			C.r_Sampler		("s_base",	C.L_textures[0]);

	push	2
	push	2
	push	2
	push	1
	push	0
	push	ecx
	mov	ecx, esp
	push	DWORD PTR [edi]
	call	??0shared_str@@QAE@ABV0@@Z		; shared_str::shared_str
	push	OFFSET ??_C@_06GMJOKNLF@s_base@
	mov	ecx, edi
	call	DWORD PTR __imp_?r_Sampler@CBlender_Compile@@QAEIPBDVshared_str@@_NIIII@Z

; 105  : 			C.r_Sampler_clf	("s_lmap",	TEX_POINT_ATT		);

	mov	esi, DWORD PTR __imp_?r_Sampler_clf@CBlender_Compile@@QAEXPBD0_N@Z
	mov	ecx, edi
	push	0
	push	OFFSET ??_C@_0CB@JJPBGPCM@internal?2internal_light_attpoin@
	push	OFFSET ??_C@_06LBGPDNGG@s_lmap@
	call	esi

; 106  : 			C.r_Sampler_clf	("s_att",	TEX_POINT_ATT		);

	push	0
	push	OFFSET ??_C@_0CB@JJPBGPCM@internal?2internal_light_attpoin@
	push	OFFSET ??_C@_05OCPJJFDB@s_att@
	mov	ecx, edi
	call	esi

; 119  : 			C.r_Sampler		("s_base",C.L_textures[0]);
; 120  : 			C.r_End			();
; 121  : 			break;
; 122  : 		}
; 123  : 	}
; 124  : }

	mov	ecx, edi
	call	DWORD PTR __imp_?r_End@CBlender_Compile@@QAEXXZ
	pop	edi
	pop	esi
	ret	4
$LN16@Compile:

; 107  : 			C.r_End			();
; 108  : 			break;
; 109  : 		case SE_R1_LSPOT:
; 110  : 			C.r_Pass		("vert_spot","add_spot",FALSE,TRUE,FALSE,TRUE,D3DBLEND_ONE,D3DBLEND_ONE,TRUE,oAREF.value);

	push	DWORD PTR [esi+324]
	mov	ecx, edi
	push	1
	push	2
	push	2
	push	1
	push	0
	push	1
	push	0
	push	OFFSET ??_C@_08FJPLAIEP@add_spot@
	push	OFFSET ??_C@_09CHMJHECG@vert_spot@
	call	DWORD PTR __imp_?r_Pass@CBlender_Compile@@QAEXPBD0_NHHHW4_D3DBLEND@@2HI@Z

; 111  : 			C.r_Sampler		("s_base",	C.L_textures[0]);

	push	2
	push	2
	push	2
	push	1
	push	0
	push	ecx
	mov	ecx, esp
	push	DWORD PTR [edi]
	call	??0shared_str@@QAE@ABV0@@Z		; shared_str::shared_str
	push	OFFSET ??_C@_06GMJOKNLF@s_base@
	mov	ecx, edi
	call	DWORD PTR __imp_?r_Sampler@CBlender_Compile@@QAEIPBDVshared_str@@_NIIII@Z

; 112  : 			C.r_Sampler_clf	("s_lmap",	"internal\\internal_light_att",		true);

	mov	esi, DWORD PTR __imp_?r_Sampler_clf@CBlender_Compile@@QAEXPBD0_N@Z
	mov	ecx, edi
	push	1
	push	OFFSET ??_C@_0BM@EOCKFCCB@internal?2internal_light_att@
	push	OFFSET ??_C@_06LBGPDNGG@s_lmap@
	call	esi

; 113  : 			C.r_Sampler_clf	("s_att",	TEX_SPOT_ATT		);

	push	0
	push	OFFSET ??_C@_0CA@EOOCFOEF@internal?2internal_light_attclip@
	push	OFFSET ??_C@_05OCPJJFDB@s_att@
	mov	ecx, edi
	call	esi

; 119  : 			C.r_Sampler		("s_base",C.L_textures[0]);
; 120  : 			C.r_End			();
; 121  : 			break;
; 122  : 		}
; 123  : 	}
; 124  : }

	mov	ecx, edi
	call	DWORD PTR __imp_?r_End@CBlender_Compile@@QAEXXZ
	pop	edi
	pop	esi
	ret	4
$LN17@Compile:

; 114  : 			C.r_End			();
; 115  : 			break;
; 116  : 		case SE_R1_LMODELS:
; 117  : 			// Lighting only
; 118  : 			C.r_Pass		("vert_l","vert_l",FALSE);

	push	0
	push	0
	push	1
	push	2
	push	0
	push	1
	push	1
	push	0
	push	OFFSET ??_C@_06HMPFJCDL@vert_l@
	push	OFFSET ??_C@_06HMPFJCDL@vert_l@
	mov	ecx, edi
$LN109@Compile:

; 119  : 			C.r_Sampler		("s_base",C.L_textures[0]);
; 120  : 			C.r_End			();
; 121  : 			break;
; 122  : 		}
; 123  : 	}
; 124  : }

	call	DWORD PTR __imp_?r_Pass@CBlender_Compile@@QAEXPBD0_NHHHW4_D3DBLEND@@2HI@Z
	push	2
	push	2
	push	2
	push	1
	push	0
	push	ecx
	mov	ecx, esp
	push	DWORD PTR [edi]
	call	??0shared_str@@QAE@ABV0@@Z		; shared_str::shared_str
	push	OFFSET ??_C@_06GMJOKNLF@s_base@
	mov	ecx, edi
	call	DWORD PTR __imp_?r_Sampler@CBlender_Compile@@QAEIPBDVshared_str@@_NIIII@Z
	mov	ecx, edi
	call	DWORD PTR __imp_?r_End@CBlender_Compile@@QAEXXZ
$LN2@Compile:
	pop	edi
	pop	esi
	ret	4
	npad	2
$LN104@Compile:
	DD	$LN8@Compile
	DD	$LN12@Compile
	DD	$LN15@Compile
	DD	$LN16@Compile
	DD	$LN17@Compile
?Compile@CBlender_Vertex_aref@@UAEXAAVCBlender_Compile@@@Z ENDP ; CBlender_Vertex_aref::Compile
_TEXT	ENDS
END
