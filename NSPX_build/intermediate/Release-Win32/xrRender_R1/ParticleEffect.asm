; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30146.0 

	TITLE	i:\vitalya\mine\nsprojectx\nspx_build\intermediate\release-win32\xrrender_r1\particleeffect.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BK@JDIEOOPC@PS?3?3CParticleEffect?3?3Copy@ ; `string'
PUBLIC	??_C@_0DO@EBEFINPI@I?3?2Vitalya?2mine?2NSProjectX?2laye@ ; `string'
PUBLIC	??_R2CParticleEffect@PS@@8			; PS::CParticleEffect::`RTTI Base Class Array'
PUBLIC	??_R2IParticleCustom@@8				; IParticleCustom::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CParticleEffect@PS@@8		; PS::CParticleEffect::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@IParticleCustom@@8		; IParticleCustom::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3IParticleCustom@@8				; IParticleCustom::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AVIParticleCustom@@@8			; IParticleCustom `RTTI Type Descriptor'
PUBLIC	??_R3CParticleEffect@PS@@8			; PS::CParticleEffect::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AVCParticleEffect@PS@@@8			; PS::CParticleEffect `RTTI Type Descriptor'
PUBLIC	??_R4CParticleEffect@PS@@6B@			; PS::CParticleEffect::`RTTI Complete Object Locator'
PUBLIC	??_C@_0DC@EAPNALPN@Can?8t?5duplicate?5particle?5system@ ; `string'
PUBLIC	??_7CParticleEffect@PS@@6B@			; PS::CParticleEffect::`vftable'
PUBLIC	?fDT_STEP@PS@@3MB				; PS::fDT_STEP
EXTRN	__imp_??0IParticleCustom@@QAE@XZ:PROC
EXTRN	__imp_?_set@?$resptr_base@UShader@@@@QAEXABV1@@Z:PROC
EXTRN	__imp_?_get@?$resptr_base@UShader@@@@QBEPAUShader@@XZ:PROC
EXTRN	?IsLooped@IParticleCustom@@UAEHXZ:PROC		; IParticleCustom::IsLooped
EXTRN	__imp_?IsLooped@IParticleCustom@@UAEHXZ:PROC
EXTRN	?dcast_ParticleCustom@IParticleCustom@@UAEPAV1@XZ:PROC ; IParticleCustom::dcast_ParticleCustom
EXTRN	__imp_?dcast_ParticleCustom@IParticleCustom@@UAEPAV1@XZ:PROC
EXTRN	__imp_??1IReader@@UAE@XZ:PROC
EXTRN	__imp_?pointer@CMemoryWriter@@QAEPAEXZ:PROC
EXTRN	__imp_?size@CMemoryWriter@@QBEIXZ:PROC
EXTRN	__imp_??0?$IReaderBase@VIReader@@@@QAE@XZ:PROC
EXTRN	__imp_??_7?$IReaderBase@VIReader@@@@6B@:QWORD
EXTRN	__imp_??1?$IReaderBase@VIReader@@@@UAE@XZ:PROC
EXTRN	__imp_??_7IReader@@6B@:QWORD
EXTRN	__imp_??0IReader@@QAE@PAXHH@Z:PROC
EXTRN	__imp_?ParticleManager@PAPI@@YAPAVIParticleManager@1@XZ:PROC
EXTRN	__imp_??1IParticleCustom@@UAE@XZ:PROC
;	COMDAT ??_7CParticleEffect@PS@@6B@
CONST	SEGMENT
??_7CParticleEffect@PS@@6B@ DD FLAT:??_R4CParticleEffect@PS@@6B@ ; PS::CParticleEffect::`vftable'
	DD	FLAT:?Render@CParticleEffect@PS@@UAEXM@Z
	DD	FLAT:?Load@IRender_Visual@@UAEXPBDPAVIReader@@I@Z
	DD	FLAT:?Release@IRender_Visual@@UAEXXZ
	DD	FLAT:?Copy@CParticleEffect@PS@@UAEXPAVIRender_Visual@@@Z
	DD	FLAT:?Spawn@IRender_Visual@@UAEXXZ
	DD	FLAT:?Depart@IRender_Visual@@UAEXXZ
	DD	FLAT:?dcast_PKinematics@IRender_Visual@@UAEPAVCKinematics@@XZ
	DD	FLAT:?dcast_PKinematicsAnimated@IRender_Visual@@UAEPAVCKinematicsAnimated@@XZ
	DD	FLAT:?dcast_ParticleCustom@IParticleCustom@@UAEPAV1@XZ
	DD	FLAT:??_ECParticleEffect@PS@@UAEPAXI@Z
	DD	FLAT:?OnDeviceCreate@CParticleEffect@PS@@UAEXXZ
	DD	FLAT:?OnDeviceDestroy@CParticleEffect@PS@@UAEXXZ
	DD	FLAT:?UpdateParent@CParticleEffect@PS@@UAEXABU?$_matrix@M@@ABU?$_vector3@M@@H@Z
	DD	FLAT:?OnFrame@CParticleEffect@PS@@UAEXI@Z
	DD	FLAT:?Play@CParticleEffect@PS@@UAEXXZ
	DD	FLAT:?Stop@CParticleEffect@PS@@UAEXH@Z
	DD	FLAT:?IsPlaying@CParticleEffect@PS@@UAEHXZ
	DD	FLAT:?ParticlesCount@CParticleEffect@PS@@UAEIXZ
	DD	FLAT:?GetTimeLimit@CParticleEffect@PS@@UAEMXZ
	DD	FLAT:?IsLooped@IParticleCustom@@UAEHXZ
	DD	FLAT:?Name@CParticleEffect@PS@@UAE?BVshared_str@@XZ
CONST	ENDS
;	COMDAT ??_C@_0DC@EAPNALPN@Can?8t?5duplicate?5particle?5system@
CONST	SEGMENT
??_C@_0DC@EAPNALPN@Can?8t?5duplicate?5particle?5system@ DB 'Can''t duplic'
	DB	'ate particle system - NOT IMPLEMENTED', 00H	; `string'
CONST	ENDS
;	COMDAT ??_R4CParticleEffect@PS@@6B@
rdata$r	SEGMENT
??_R4CParticleEffect@PS@@6B@ DD 00H			; PS::CParticleEffect::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCParticleEffect@PS@@@8
	DD	FLAT:??_R3CParticleEffect@PS@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCParticleEffect@PS@@@8
data$rs	SEGMENT
??_R0?AVCParticleEffect@PS@@@8 DD FLAT:??_7type_info@@6B@ ; PS::CParticleEffect `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCParticleEffect@PS@@', 00H
data$rs	ENDS
;	COMDAT ??_R3CParticleEffect@PS@@8
rdata$r	SEGMENT
??_R3CParticleEffect@PS@@8 DD 00H			; PS::CParticleEffect::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CParticleEffect@PS@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVIParticleCustom@@@8
data$rs	SEGMENT
??_R0?AVIParticleCustom@@@8 DD FLAT:??_7type_info@@6B@	; IParticleCustom `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVIParticleCustom@@', 00H
data$rs	ENDS
;	COMDAT ??_R3IParticleCustom@@8
rdata$r	SEGMENT
??_R3IParticleCustom@@8 DD 00H				; IParticleCustom::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2IParticleCustom@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@IParticleCustom@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IParticleCustom@@8 DD FLAT:??_R0?AVIParticleCustom@@@8 ; IParticleCustom::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IParticleCustom@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CParticleEffect@PS@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CParticleEffect@PS@@8 DD FLAT:??_R0?AVCParticleEffect@PS@@@8 ; PS::CParticleEffect::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CParticleEffect@PS@@8
rdata$r	ENDS
;	COMDAT ??_R2IParticleCustom@@8
rdata$r	SEGMENT
??_R2IParticleCustom@@8 DD FLAT:??_R1A@?0A@EA@IParticleCustom@@8 ; IParticleCustom::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IRender_Visual@@8
rdata$r	ENDS
;	COMDAT ??_R2CParticleEffect@PS@@8
rdata$r	SEGMENT
??_R2CParticleEffect@PS@@8 DD FLAT:??_R1A@?0A@EA@CParticleEffect@PS@@8 ; PS::CParticleEffect::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IParticleCustom@@8
	DD	FLAT:??_R1A@?0A@EA@IRender_Visual@@8
rdata$r	ENDS
;	COMDAT ??_C@_0DO@EBEFINPI@I?3?2Vitalya?2mine?2NSProjectX?2laye@
CONST	SEGMENT
??_C@_0DO@EBEFINPI@I?3?2Vitalya?2mine?2NSProjectX?2laye@ DB 'I:\Vitalya\m'
	DB	'ine\NSProjectX\layers\xrRender\ParticleEffect.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@JDIEOOPC@PS?3?3CParticleEffect?3?3Copy@
CONST	SEGMENT
??_C@_0BK@JDIEOOPC@PS?3?3CParticleEffect?3?3Copy@ DB 'PS::CParticleEffect'
	DB	'::Copy', 00H				; `string'
?fDT_STEP@PS@@3MB DD 03d072b02r			; 0.033	; PS::fDT_STEP
PUBLIC	?GetDefinition@CParticleEffect@PS@@QAEPAVCPEDef@2@XZ ; PS::CParticleEffect::GetDefinition
PUBLIC	?zero@?$_flags@E@@QAEAAU1@XZ			; _flags<unsigned char>::zero
PUBLIC	?is@?$_flags@E@@QBEHE@Z				; _flags<unsigned char>::is
PUBLIC	?set@LIT@FVF@@QAEXMMMIMM@Z			; FVF::LIT::set
PUBLIC	?CalculateTC@SFrame@PS@@QAEXHAAU?$_vector2@M@@0@Z ; PS::SFrame::CalculateTC
PUBLIC	?IsPlaying@CParticleEffect@PS@@UAEHXZ		; PS::CParticleEffect::IsPlaying
PUBLIC	?GetTimeLimit@CParticleEffect@PS@@UAEMXZ	; PS::CParticleEffect::GetTimeLimit
PUBLIC	?Name@CParticleEffect@PS@@UAE?BVshared_str@@XZ	; PS::CParticleEffect::Name
PUBLIC	?setHPB@?$_matrix@M@@QAEAAU1@MMM@Z		; _matrix<float>::setHPB
PUBLIC	?div@?$_vector3@M@@QAEAAU1@ABU1@M@Z		; _vector3<float>::div
PUBLIC	?invert@?$_vector3@M@@QAEAAU1@ABU1@@Z		; _vector3<float>::invert
PUBLIC	?setHP@?$_vector3@M@@QAEAAU1@MM@Z		; _vector3<float>::setHP
PUBLIC	?set@?$_flags@E@@QAEAAU1@EH@Z			; _flags<unsigned char>::set
PUBLIC	?set@?$_matrix@M@@QAEAAU1@ABU1@@Z		; _matrix<float>::set
PUBLIC	?mulA_43@?$_matrix@M@@QAEAAU1@ABU1@@Z		; _matrix<float>::mulA_43
PUBLIC	?transform_dir@?$_matrix@M@@QBEXAAU?$_vector3@M@@ABU2@@Z ; _matrix<float>::transform_dir
PUBLIC	?setXYZ@?$_matrix@M@@QAEAAU1@AAU?$_vector3@M@@@Z ; _matrix<float>::setXYZ
PUBLIC	??4?$resptr_core@UShader@@Uresptrcode_shader@@@@QAEAAV0@ABV0@@Z ; resptr_core<Shader,resptrcode_shader>::operator=
PUBLIC	?set@?$_flags@G@@QAEAAU1@GH@Z			; _flags<unsigned short>::set
PUBLIC	?Render@CParticleEffect@PS@@UAEXM@Z		; PS::CParticleEffect::Render
PUBLIC	?FillSprite@@YAXAAPAULIT@FVF@@ABU?$_vector3@M@@1ABU?$_vector2@M@@2MMIM@Z ; FillSprite
PUBLIC	?FillSprite@@YAXAAPAULIT@FVF@@ABU?$_vector3@M@@11ABU?$_vector2@M@@2MMIM@Z ; FillSprite
PUBLIC	?OnDeviceDestroy@CParticleEffect@PS@@UAEXXZ	; PS::CParticleEffect::OnDeviceDestroy
PUBLIC	?OnDeviceCreate@CParticleEffect@PS@@UAEXXZ	; PS::CParticleEffect::OnDeviceCreate
PUBLIC	?Copy@CParticleEffect@PS@@UAEXPAVIRender_Visual@@@Z ; PS::CParticleEffect::Copy
PUBLIC	?ParticlesCount@CParticleEffect@PS@@UAEIXZ	; PS::CParticleEffect::ParticlesCount
PUBLIC	?SetBirthDeadCB@CParticleEffect@PS@@QAEXP6AXPAXIAAUParticle@PAPI@@I@Z20I@Z ; PS::CParticleEffect::SetBirthDeadCB
PUBLIC	?OnFrame@CParticleEffect@PS@@UAEXI@Z		; PS::CParticleEffect::OnFrame
PUBLIC	?UpdateParent@CParticleEffect@PS@@UAEXABU?$_matrix@M@@ABU?$_vector3@M@@H@Z ; PS::CParticleEffect::UpdateParent
PUBLIC	?RefreshShader@CParticleEffect@PS@@IAEXXZ	; PS::CParticleEffect::RefreshShader
PUBLIC	?Stop@CParticleEffect@PS@@UAEXH@Z		; PS::CParticleEffect::Stop
PUBLIC	?Play@CParticleEffect@PS@@UAEXXZ		; PS::CParticleEffect::Play
PUBLIC	??1CParticleEffect@PS@@UAE@XZ			; PS::CParticleEffect::~CParticleEffect
PUBLIC	??_GCParticleEffect@PS@@UAEPAXI@Z		; PS::CParticleEffect::`scalar deleting destructor'
PUBLIC	?OnEffectParticleDead@PS@@YAXPAXIAAUParticle@PAPI@@I@Z ; PS::OnEffectParticleDead
PUBLIC	?OnEffectParticleBirth@PS@@YAXPAXIAAUParticle@PAPI@@I@Z ; PS::OnEffectParticleBirth
PUBLIC	?Compile@CParticleEffect@PS@@QAEHPAVCPEDef@2@@Z	; PS::CParticleEffect::Compile
PUBLIC	??0CParticleEffect@PS@@QAE@XZ			; PS::CParticleEffect::CParticleEffect
EXTRN	??_ECParticleEffect@PS@@UAEPAXI@Z:PROC		; PS::CParticleEffect::`vector deleting destructor'
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
_TEXT	SEGMENT
??0CParticleEffect@PS@@QAE@XZ PROC			; PS::CParticleEffect::CParticleEffect
; _this$ = ecx

; 52   : {

	push	edi
	mov	edi, ecx
	call	DWORD PTR __imp_??0IParticleCustom@@QAE@XZ
	mov	DWORD PTR [edi], OFFSET ??_7CParticleEffect@PS@@6B@

; 53   : 	m_HandleEffect 			= ParticleManager()->CreateEffect(1);		VERIFY(m_HandleEffect>=0);

	call	DWORD PTR __imp_?ParticleManager@PAPI@@YAPAVIParticleManager@1@XZ
	push	1
	mov	ecx, eax
	mov	edx, DWORD PTR [eax]
	call	DWORD PTR [edx+4]
	mov	DWORD PTR [edi+80], eax

; 54   : 	m_HandleActionList		= ParticleManager()->CreateActionList();	VERIFY(m_HandleActionList>=0);

	call	DWORD PTR __imp_?ParticleManager@PAPI@@YAPAVIParticleManager@1@XZ
	mov	ecx, eax
	mov	edx, DWORD PTR [eax]
	call	DWORD PTR [edx+12]
	mov	DWORD PTR [edi+84], eax

; 63   : }

	mov	eax, edi
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h

; 15   :     IC	SelfRef	zero	()											{ flags=T(0);	return *this;	}

	mov	BYTE PTR [edi+176], 0
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 56   : 	m_Def					= 0;

	mov	DWORD PTR [edi+72], 0

; 57   : 	m_fElapsedLimit			= 0.f;

	mov	DWORD PTR [edi+76], 0

; 58   : 	m_MemDT					= 0;

	mov	DWORD PTR [edi+88], 0
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	mov	DWORD PTR [edi+92], 0
	mov	DWORD PTR [edi+96], 0
	mov	DWORD PTR [edi+100], 0
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 60   : 	m_DestroyCallback		= 0;

	mov	DWORD PTR [edi+168], 0

; 61   : 	m_CollisionCallback		= 0;

	mov	DWORD PTR [edi+172], 0
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 72   : 		_11=1; _12=0; _13=0; _14=0;

	mov	DWORD PTR [edi+104], 1065353216		; 3f800000H
	mov	DWORD PTR [edi+108], 0
	mov	DWORD PTR [edi+112], 0
	mov	DWORD PTR [edi+116], 0

; 73   : 		_21=0; _22=1; _23=0; _24=0;

	mov	DWORD PTR [edi+120], 0
	mov	DWORD PTR [edi+124], 1065353216		; 3f800000H
	mov	DWORD PTR [edi+128], 0
	mov	DWORD PTR [edi+132], 0

; 74   : 		_31=0; _32=0; _33=1; _34=0;

	mov	DWORD PTR [edi+136], 0
	mov	DWORD PTR [edi+140], 0
	mov	DWORD PTR [edi+144], 1065353216		; 3f800000H
	mov	DWORD PTR [edi+148], 0

; 75   : 		_41=0; _42=0; _43=0; _44=1;

	mov	DWORD PTR [edi+152], 0
	mov	DWORD PTR [edi+156], 0
	mov	DWORD PTR [edi+160], 0
	mov	DWORD PTR [edi+164], 1065353216		; 3f800000H
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 63   : }

	pop	edi
	ret	0
??0CParticleEffect@PS@@QAE@XZ ENDP			; PS::CParticleEffect::CParticleEffect
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\FS.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\FS.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xr_resource.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
_TEXT	SEGMENT
_F$1 = -20						; size = 20
_def$ = 8						; size = 4
?Compile@CParticleEffect@PS@@QAEHPAVCPEDef@2@@Z PROC	; PS::CParticleEffect::Compile
; _this$ = ecx

; 166  : {

	sub	esp, 20					; 00000014H
	push	ebx

; 167  : 	m_Def 						= def;

	mov	ebx, DWORD PTR _def$[esp+20]
	push	edi
	mov	edi, ecx
	mov	DWORD PTR [edi+72], ebx

; 168  : 	if (m_Def){

	test	ebx, ebx
	je	$LN31@Compile

; 89   : 	OnDeviceDestroy();

	mov	eax, DWORD PTR [edi]
	push	esi
	call	DWORD PTR [eax+44]

; 90   : 	OnDeviceCreate();

	mov	eax, DWORD PTR [edi]
	mov	ecx, edi
	call	DWORD PTR [eax+40]
; File I:\Vitalya\mine\NSProjectX\xrCore\FS.h

; 119  : 	IC u32			size		() const 	{	return file_size;			}

	mov	eax, DWORD PTR [edi+72]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 174  :         ParticleManager()->LoadActions		(m_HandleActionList,F);

	mov	esi, DWORD PTR __imp_?ParticleManager@PAPI@@YAPAVIParticleManager@1@XZ
; File I:\Vitalya\mine\NSProjectX\xrCore\FS.h

; 119  : 	IC u32			size		() const 	{	return file_size;			}

	mov	edx, DWORD PTR [eax+80]

; 118  : 	IC u8*			pointer		()			{	return data;				}

	mov	ecx, DWORD PTR [eax+68]

; 241  : 	IC				IReader			(void *_data, int _size, int _iterpos=0)

	mov	eax, DWORD PTR __imp_??_7IReader@@6B@
	mov	DWORD PTR _F$1[esp+32], eax

; 242  : 	{
; 243  : 		data		= (char *)_data	;

	mov	DWORD PTR _F$1[esp+36], ecx

; 244  : 		Size		= _size			;

	mov	DWORD PTR _F$1[esp+44], edx

; 245  : 		Pos			= 0				;

	mov	DWORD PTR _F$1[esp+40], 0

; 246  : 		iterpos		= _iterpos		;

	mov	DWORD PTR _F$1[esp+48], 0
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 174  :         ParticleManager()->LoadActions		(m_HandleActionList,F);

	call	esi
	lea	ecx, DWORD PTR _F$1[esp+32]
	push	ecx
	push	DWORD PTR [edi+84]
	mov	edx, DWORD PTR [eax]
	mov	ecx, eax
	call	DWORD PTR [edx+64]

; 175  :         ParticleManager()->SetMaxParticles	(m_HandleEffect,m_Def->m_MaxParticles);

	call	esi
	mov	ecx, DWORD PTR [edi+72]
	mov	edx, DWORD PTR [eax]
	push	DWORD PTR [ecx+88]
	mov	ecx, eax
	push	DWORD PTR [edi+80]
	call	DWORD PTR [edx+44]

; 176  :         ParticleManager()->SetCallback		(m_HandleEffect,OnEffectParticleBirth,OnEffectParticleDead,this,0);

	call	esi
	push	0
	push	edi
	push	OFFSET ?OnEffectParticleDead@PS@@YAXPAXIAAUParticle@PAPI@@I@Z ; PS::OnEffectParticleDead
	mov	edx, DWORD PTR [eax]
	mov	ecx, eax
	push	OFFSET ?OnEffectParticleBirth@PS@@YAXPAXIAAUParticle@PAPI@@I@Z ; PS::OnEffectParticleBirth
	push	DWORD PTR [edi+80]
	call	DWORD PTR [edx+48]
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h

; 23   : 	IC 	BOOL	is		(const T mask)						const	{ return mask==(flags&mask);			}

	mov	eax, DWORD PTR [edi+72]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 178  : 		if (m_Def->m_Flags.is(CPEDef::dfTimeLimit))

	test	DWORD PTR [eax+4], 16384		; 00004000H
	je	SHORT $LN3@Compile

; 179  : 			m_fElapsedLimit 	= m_Def->m_fTimeLimit;

	fld	DWORD PTR [eax+84]
	fstp	DWORD PTR [edi+76]
$LN3@Compile:
; File I:\Vitalya\mine\NSProjectX\xrCore\xr_resource.h

; 48   : 	ICF		T *			_get	() const							{	return p_;																					}

	mov	esi, DWORD PTR [ebx+16]

; 46   : 	ICF		void		_set	(T * rhs) 							{	if (0!=rhs) rhs->dwReference++;	_dec(); p_ = rhs;											}

	test	esi, esi
	je	SHORT $LN29@Compile
	inc	DWORD PTR [esi]
$LN29@Compile:
	lea	ecx, DWORD PTR [edi+64]
	call	DWORD PTR __imp_?_dec@?$resptr_base@UShader@@@@IAEXXZ
	mov	DWORD PTR [edi+64], esi
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 182  : 	return TRUE;

	pop	esi
$LN31@Compile:

; 183  : }

	pop	edi
	mov	eax, 1
	pop	ebx
	add	esp, 20					; 00000014H
	ret	4
?Compile@CParticleEffect@PS@@QAEHPAVCPEDef@2@@Z ENDP	; PS::CParticleEffect::Compile
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_random.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_random.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_bitwise.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_random.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_bitwise.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_random.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
_TEXT	SEGMENT
_a$1 = 8						; size = 4
_owner$ = 8						; size = 4
___formal$ = 12						; size = 4
_m$ = 16						; size = 4
___formal$ = 20						; size = 4
?OnEffectParticleBirth@PS@@YAXPAXIAAUParticle@PAPI@@I@Z PROC ; PS::OnEffectParticleBirth

; 35   : 	CParticleEffect* PE = static_cast<CParticleEffect*>(owner); VERIFY(PE);
; 36   :     CPEDef* PED			= PE->GetDefinition(); 

	mov	eax, DWORD PTR _owner$[esp-4]
	push	ebx
	mov	ebx, DWORD PTR [eax+72]

; 37   :     if (PED){

	test	ebx, ebx
	je	$LN29@OnEffectPa
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h

; 23   : 	IC 	BOOL	is		(const T mask)						const	{ return mask==(flags&mask);			}

	mov	eax, DWORD PTR [ebx+4]
	push	ebp
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 38   :         if (PED->m_Flags.is(CPEDef::dfRandomFrame))

	mov	ebp, DWORD PTR _m$[esp+4]
	test	eax, 4096				; 00001000H
	je	SHORT $LN6@OnEffectPa
; File I:\Vitalya\mine\NSProjectX\xrCore\_random.h

; 33   : 	IC 	s32		randI	(s32 max)					{ VERIFY(max);  return randI()%max; }

	mov	ecx, DWORD PTR __imp_?Random@@3VCRandom@@A
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 39   :             m.frame	= (u16)iFloor(Random.randI(PED->m_Frame.m_iFrameCount)*255.f);

	push	esi
	mov	esi, DWORD PTR [ebx+40]
	push	edi
; File I:\Vitalya\mine\NSProjectX\xrCore\_random.h

; 33   : 	IC 	s32		randI	(s32 max)					{ VERIFY(max);  return randI()%max; }

	call	?randI@CRandom@@QAEHXZ			; CRandom::randI
	cdq
; File I:\Vitalya\mine\NSProjectX\xrCore\_bitwise.h

; 84   :     int exponent	= (127 + 31) - ((a >> 23) & 0xFF);

	mov	ecx, 158				; 0000009eH
; File I:\Vitalya\mine\NSProjectX\xrCore\_random.h

; 33   : 	IC 	s32		randI	(s32 max)					{ VERIFY(max);  return randI()%max; }

	idiv	esi
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 39   :             m.frame	= (u16)iFloor(Random.randI(PED->m_Frame.m_iFrameCount)*255.f);

	cvtsi2ss xmm0, edx
	mulss	xmm0, DWORD PTR __real@437f0000
; File I:\Vitalya\mine\NSProjectX\xrCore\_bitwise.h

; 83   :     int a			= *(const int*)(&x);

	movss	DWORD PTR _a$1[esp+12], xmm0

; 84   :     int exponent	= (127 + 31) - ((a >> 23) & 0xFF);

	mov	esi, DWORD PTR _a$1[esp+12]
	mov	eax, esi
	sar	eax, 23					; 00000017H

; 85   :     int r			= (((u32)(a) << 8) | (1U << 31)) >> exponent;

	mov	edi, esi
	movzx	eax, al
	or	edi, -8388608				; ff800000H
	sub	ecx, eax
	shl	edi, 8
	shr	edi, cl

; 86   :     exponent		+= 31-127;
; 87   :     {
; 88   :         int imask	=	(!(((( (1<<(exponent)))-1)>>8)&a));
; 89   :         exponent	-=	(31-127)+32;
; 90   :         exponent	>>=	31;
; 91   :         a			>>=	31;

	mov	eax, esi
	sar	eax, 31					; 0000001fH
	sub	ecx, 96					; 00000060H
	movzx	edx, ax
	mov	eax, 1
	shl	eax, cl
	dec	eax
	sar	eax, 8
	and	eax, esi

; 92   :         r			-=	(imask&a);

	neg	eax
	sbb	eax, eax
	inc	eax
	and	ax, dx
	sub	di, ax
	lea	eax, DWORD PTR [ecx+64]
	sar	eax, 31					; 0000001fH

; 93   :         r			&=	exponent;

	and	di, ax
	xor	di, dx
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 39   :             m.frame	= (u16)iFloor(Random.randI(PED->m_Frame.m_iFrameCount)*255.f);

	mov	WORD PTR [ebp+68], di
	mov	eax, DWORD PTR [ebx+4]
	pop	edi
	pop	esi
$LN6@OnEffectPa:

; 40   :         if (PED->m_Flags.is(CPEDef::dfAnimated)&&PED->m_Flags.is(CPEDef::dfRandomPlayback)&&Random.randI(2))

	test	eax, 2048				; 00000800H
	je	SHORT $LN31@OnEffectPa
	test	eax, 8192				; 00002000H
	je	SHORT $LN31@OnEffectPa
; File I:\Vitalya\mine\NSProjectX\xrCore\_random.h

; 33   : 	IC 	s32		randI	(s32 max)					{ VERIFY(max);  return randI()%max; }

	mov	ecx, DWORD PTR __imp_?Random@@3VCRandom@@A
	call	?randI@CRandom@@QAEHXZ			; CRandom::randI
	and	eax, -2147483647			; 80000001H
	jns	SHORT $LN32@OnEffectPa
	dec	eax
	or	eax, -2					; fffffffeH
	add	eax, 1
$LN32@OnEffectPa:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 40   :         if (PED->m_Flags.is(CPEDef::dfAnimated)&&PED->m_Flags.is(CPEDef::dfRandomPlayback)&&Random.randI(2))

	je	SHORT $LN31@OnEffectPa
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h

; 22   : 	IC	SelfRef	set		(const T mask,	BOOL value)					{ if (value) flags|=mask; else flags&=~mask; return *this; }

	or	WORD PTR [ebp+70], 1
$LN31@OnEffectPa:
	pop	ebp
$LN29@OnEffectPa:
	pop	ebx
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 43   : }

	ret	0
?OnEffectParticleBirth@PS@@YAXPAXIAAUParticle@PAPI@@I@Z ENDP ; PS::OnEffectParticleBirth
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
?OnEffectParticleDead@PS@@YAXPAXIAAUParticle@PAPI@@I@Z PROC ; PS::OnEffectParticleDead

; 46   : //	CPEDef* PE = static_cast<CPEDef*>(owner);
; 47   : }

	ret	0
?OnEffectParticleDead@PS@@YAXPAXIAAUParticle@PAPI@@I@Z ENDP ; PS::OnEffectParticleDead
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xr_resource.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
;	COMDAT ??_GCParticleEffect@PS@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCParticleEffect@PS@@UAEPAXI@Z PROC			; PS::CParticleEffect::`scalar deleting destructor', COMDAT
; _this$ = ecx

; 65   : {

	push	esi
	push	edi
	mov	edi, ecx

; 215  : 	if (m_Def){

	mov	eax, DWORD PTR [edi+72]

; 65   : {

	mov	DWORD PTR [edi], OFFSET ??_7CParticleEffect@PS@@6B@

; 215  : 	if (m_Def){

	test	eax, eax
	je	SHORT $LN8@scalar
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h

; 23   : 	IC 	BOOL	is		(const T mask)						const	{ return mask==(flags&mask);			}

	test	BYTE PTR [eax+4], 1
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 216  : 		if (m_Def->m_Flags.is(CPEDef::dfSprite)){

	je	SHORT $LN8@scalar
; File I:\Vitalya\mine\NSProjectX\xrCore\xr_resource.h

; 46   : 	ICF		void		_set	(T * rhs) 							{	if (0!=rhs) rhs->dwReference++;	_dec(); p_ = rhs;											}

	lea	ecx, DWORD PTR [edi+68]
	call	DWORD PTR __imp_?_dec@?$resptr_base@USGeometry@@@@IAEXXZ
	lea	ecx, DWORD PTR [edi+64]
	mov	DWORD PTR [edi+68], 0
	call	DWORD PTR __imp_?_dec@?$resptr_base@UShader@@@@IAEXXZ
	mov	DWORD PTR [edi+64], 0
$LN8@scalar:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 68   : 	ParticleManager()->DestroyEffect		(m_HandleEffect);

	mov	esi, DWORD PTR __imp_?ParticleManager@PAPI@@YAPAVIParticleManager@1@XZ
	call	esi
	push	DWORD PTR [edi+80]
	mov	ecx, eax
	mov	edx, DWORD PTR [eax]
	call	DWORD PTR [edx+8]

; 69   : 	ParticleManager()->DestroyActionList	(m_HandleActionList);

	call	esi
	push	DWORD PTR [edi+84]
	mov	ecx, eax
	mov	edx, DWORD PTR [eax]
	call	DWORD PTR [edx+16]

; 70   : }

	mov	ecx, edi
	call	DWORD PTR __imp_??1IParticleCustom@@UAE@XZ
	test	BYTE PTR ___flags$[esp+4], 1
	je	SHORT $LN22@scalar
	push	180					; 000000b4H
	push	edi
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN22@scalar:
	mov	eax, edi
	pop	edi
	pop	esi
	ret	4
??_GCParticleEffect@PS@@UAEPAXI@Z ENDP			; PS::CParticleEffect::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xr_resource.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
_TEXT	SEGMENT
??1CParticleEffect@PS@@UAE@XZ PROC			; PS::CParticleEffect::~CParticleEffect
; _this$ = ecx

; 65   : {

	push	esi
	push	edi
	mov	edi, ecx

; 215  : 	if (m_Def){

	mov	eax, DWORD PTR [edi+72]

; 65   : {

	mov	DWORD PTR [edi], OFFSET ??_7CParticleEffect@PS@@6B@

; 215  : 	if (m_Def){

	test	eax, eax
	je	SHORT $LN5@CParticleE
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h

; 23   : 	IC 	BOOL	is		(const T mask)						const	{ return mask==(flags&mask);			}

	test	BYTE PTR [eax+4], 1
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 216  : 		if (m_Def->m_Flags.is(CPEDef::dfSprite)){

	je	SHORT $LN5@CParticleE
; File I:\Vitalya\mine\NSProjectX\xrCore\xr_resource.h

; 46   : 	ICF		void		_set	(T * rhs) 							{	if (0!=rhs) rhs->dwReference++;	_dec(); p_ = rhs;											}

	lea	ecx, DWORD PTR [edi+68]
	call	DWORD PTR __imp_?_dec@?$resptr_base@USGeometry@@@@IAEXXZ
	lea	ecx, DWORD PTR [edi+64]
	mov	DWORD PTR [edi+68], 0
	call	DWORD PTR __imp_?_dec@?$resptr_base@UShader@@@@IAEXXZ
	mov	DWORD PTR [edi+64], 0
$LN5@CParticleE:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 68   : 	ParticleManager()->DestroyEffect		(m_HandleEffect);

	mov	esi, DWORD PTR __imp_?ParticleManager@PAPI@@YAPAVIParticleManager@1@XZ
	call	esi
	push	DWORD PTR [edi+80]
	mov	ecx, eax
	mov	edx, DWORD PTR [eax]
	call	DWORD PTR [edx+8]

; 69   : 	ParticleManager()->DestroyActionList	(m_HandleActionList);

	call	esi
	push	DWORD PTR [edi+84]
	mov	ecx, eax
	mov	edx, DWORD PTR [eax]
	call	DWORD PTR [edx+16]

; 70   : }

	mov	ecx, edi
	pop	edi
	pop	esi
	jmp	DWORD PTR __imp_??1IParticleCustom@@UAE@XZ
??1CParticleEffect@PS@@UAE@XZ ENDP			; PS::CParticleEffect::~CParticleEffect
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
_TEXT	SEGMENT
?Play@CParticleEffect@PS@@UAEXXZ PROC			; PS::CParticleEffect::Play
; _this$ = ecx

; 73   : {

	push	esi
	mov	esi, ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h

; 22   : 	IC	SelfRef	set		(const T mask,	BOOL value)					{ if (value) flags|=mask; else flags&=~mask; return *this; }

	mov	al, BYTE PTR [esi+176]
	and	al, 253					; 000000fdH
	or	al, 1
	mov	BYTE PTR [esi+176], al
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 76   :     ParticleManager()->PlayEffect(m_HandleEffect,m_HandleActionList);

	call	DWORD PTR __imp_?ParticleManager@PAPI@@YAPAVIParticleManager@1@XZ
	push	DWORD PTR [esi+84]
	mov	ecx, eax
	push	DWORD PTR [esi+80]
	mov	edx, DWORD PTR [eax]
	call	DWORD PTR [edx+20]
	pop	esi

; 77   : }

	ret	0
?Play@CParticleEffect@PS@@UAEXXZ ENDP			; PS::CParticleEffect::Play
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
_TEXT	SEGMENT
_bDefferedStop$ = 8					; size = 4
?Stop@CParticleEffect@PS@@UAEXH@Z PROC			; PS::CParticleEffect::Stop
; _this$ = ecx

; 79   : {

	push	edi
	mov	edi, ecx

; 80   :     ParticleManager()->StopEffect(m_HandleEffect,m_HandleActionList,bDefferedStop);

	call	DWORD PTR __imp_?ParticleManager@PAPI@@YAPAVIParticleManager@1@XZ
	push	DWORD PTR _bDefferedStop$[esp]
	mov	ecx, eax
	push	DWORD PTR [edi+84]
	mov	edx, DWORD PTR [eax]
	push	DWORD PTR [edi+80]
	call	DWORD PTR [edx+24]

; 81   : 	if (bDefferedStop){

	cmp	DWORD PTR _bDefferedStop$[esp], 0
	je	SHORT $LN2@Stop
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h

; 22   : 	IC	SelfRef	set		(const T mask,	BOOL value)					{ if (value) flags|=mask; else flags&=~mask; return *this; }

	or	BYTE PTR [edi+176], 2
	pop	edi
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 86   : }

	ret	4
$LN2@Stop:
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h

; 22   : 	IC	SelfRef	set		(const T mask,	BOOL value)					{ if (value) flags|=mask; else flags&=~mask; return *this; }

	and	BYTE PTR [edi+176], 254			; 000000feH
	pop	edi
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 86   : }

	ret	4
?Stop@CParticleEffect@PS@@UAEXH@Z ENDP			; PS::CParticleEffect::Stop
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
_TEXT	SEGMENT
?RefreshShader@CParticleEffect@PS@@IAEXXZ PROC		; PS::CParticleEffect::RefreshShader
; _this$ = ecx

; 88   : {

	push	esi
	mov	esi, ecx

; 89   : 	OnDeviceDestroy();

	mov	eax, DWORD PTR [esi]
	call	DWORD PTR [eax+44]

; 90   : 	OnDeviceCreate();

	mov	eax, DWORD PTR [esi]
	mov	ecx, esi
	pop	esi
	jmp	DWORD PTR [eax+40]
?RefreshShader@CParticleEffect@PS@@IAEXXZ ENDP		; PS::CParticleEffect::RefreshShader
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
_TEXT	SEGMENT
_m$ = 8							; size = 4
_velocity$ = 12						; size = 4
_bXFORM$ = 16						; size = 4
?UpdateParent@CParticleEffect@PS@@UAEXABU?$_matrix@M@@ABU?$_vector3@M@@H@Z PROC ; PS::CParticleEffect::UpdateParent
; _this$ = ecx

; 94   : {

	push	edi
	mov	edi, ecx

; 95   : 	m_RT_Flags.set			(flRT_XFORM, bXFORM);
; 96   : 	if (bXFORM)				m_XFORM.set	(m);

	mov	ecx, DWORD PTR _bXFORM$[esp]
	mov	dl, BYTE PTR [edi+176]
	mov	al, dl
	or	dl, 4
	and	al, 251					; 000000fbH
	movzx	edx, dl
	test	ecx, ecx
	movzx	eax, al
	cmove	edx, eax
	mov	BYTE PTR [edi+176], dl
	je	$LN2@UpdatePare
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 24   : 	ICF SelfRef	set(const _vector3<float> &v)			{ x = T(v.x);	y = T(v.y);	z = T(v.z);	return *this;	};

	mov	eax, DWORD PTR _m$[esp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [edi+104]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [edi+108]
	fld	DWORD PTR [eax+8]
	fstp	DWORD PTR [edi+112]
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 56   : 		i.set(a.i); _14_=a._14;

	fld	DWORD PTR [eax+12]
	fstp	DWORD PTR [edi+116]
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 24   : 	ICF SelfRef	set(const _vector3<float> &v)			{ x = T(v.x);	y = T(v.y);	z = T(v.z);	return *this;	};

	fld	DWORD PTR [eax+16]
	fstp	DWORD PTR [edi+120]
	fld	DWORD PTR [eax+20]
	fstp	DWORD PTR [edi+124]
	fld	DWORD PTR [eax+24]
	fstp	DWORD PTR [edi+128]
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 57   : 		j.set(a.j); _24_=a._24;

	fld	DWORD PTR [eax+28]
	fstp	DWORD PTR [edi+132]
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 24   : 	ICF SelfRef	set(const _vector3<float> &v)			{ x = T(v.x);	y = T(v.y);	z = T(v.z);	return *this;	};

	fld	DWORD PTR [eax+32]
	fstp	DWORD PTR [edi+136]
	fld	DWORD PTR [eax+36]
	fstp	DWORD PTR [edi+140]
	fld	DWORD PTR [eax+40]
	fstp	DWORD PTR [edi+144]
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 58   : 		k.set(a.k); _34_=a._34;

	fld	DWORD PTR [eax+44]
	fstp	DWORD PTR [edi+148]
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 24   : 	ICF SelfRef	set(const _vector3<float> &v)			{ x = T(v.x);	y = T(v.y);	z = T(v.z);	return *this;	};

	fld	DWORD PTR [eax+48]
	fstp	DWORD PTR [edi+152]
	fld	DWORD PTR [eax+52]
	fstp	DWORD PTR [edi+156]
	fld	DWORD PTR [eax+56]
	fstp	DWORD PTR [edi+160]
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 59   : 		c.set(a.c); _44_=a._44;

	fld	DWORD PTR [eax+60]
	fstp	DWORD PTR [edi+164]
	pop	edi
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 101  : }

	ret	12					; 0000000cH
$LN2@UpdatePare:
	push	esi

; 97   : 	else{
; 98   : 		m_InitialPosition	= m.c;

	mov	esi, DWORD PTR _m$[esp+4]
	mov	eax, DWORD PTR [esi+48]
	mov	DWORD PTR [edi+92], eax
	mov	eax, DWORD PTR [esi+52]
	mov	DWORD PTR [edi+96], eax
	mov	eax, DWORD PTR [esi+56]
	mov	DWORD PTR [edi+100], eax

; 99   :         ParticleManager()->Transform(m_HandleActionList,m,velocity);

	call	DWORD PTR __imp_?ParticleManager@PAPI@@YAPAVIParticleManager@1@XZ
	push	DWORD PTR _velocity$[esp+4]
	mov	ecx, eax
	push	esi
	mov	edx, DWORD PTR [eax]
	push	DWORD PTR [edi+84]
	call	DWORD PTR [edx+36]
	pop	esi
	pop	edi

; 101  : }

	ret	12					; 0000000cH
?UpdateParent@CParticleEffect@PS@@UAEXABU?$_matrix@M@@ABU?$_vector3@M@@H@Z ENDP ; PS::CParticleEffect::UpdateParent
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\vector.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_bitwise.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
_TEXT	SEGMENT
$T1 = -21						; size = 1
_p_cnt$2 = -20						; size = 4
_particles$3 = -16					; size = 4
_StepCount$1$ = -12					; size = 4
_this$1$ = -8						; size = 4
_a$4 = -8						; size = 4
_this$1$ = -4						; size = 4
_p_cnt$1$ = 8						; size = 4
_frame_dt$ = 8						; size = 4
?OnFrame@CParticleEffect@PS@@UAEXI@Z PROC		; PS::CParticleEffect::OnFrame
; _this$ = ecx

; 104  : {

	sub	esp, 24					; 00000018H
	push	ebx
	mov	ebx, ecx
	mov	DWORD PTR _this$1$[esp+28], ebx

; 105  : 	if (m_Def && m_RT_Flags.is(flRT_Playing)){

	cmp	DWORD PTR [ebx+72], 0
	je	$LN8@OnFrame
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h

; 23   : 	IC 	BOOL	is		(const T mask)						const	{ return mask==(flags&mask);			}

	mov	al, BYTE PTR [ebx+176]
	mov	BYTE PTR $T1[esp+28], al
	test	al, 1
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 105  : 	if (m_Def && m_RT_Flags.is(flRT_Playing)){

	je	$LN8@OnFrame

; 106  : 		m_MemDT			+= frame_dt;

	mov	eax, DWORD PTR _frame_dt$[esp+24]
	add	DWORD PTR [ebx+88], eax
	mov	eax, DWORD PTR [ebx+88]

; 107  : 
; 108  : 		int	StepCount	= 0;
; 109  : 		if (m_MemDT>=uDT_STEP)	{

	cmp	eax, 33					; 00000021H
	jb	$LN9@OnFrame

; 110  : 			// allow maximum of three steps (99ms) to avoid slowdown after loading
; 111  : 			// it will really skip updates at less than 10fps, which is unplayable
; 112  : 			StepCount	= m_MemDT/uDT_STEP;

	xor	edx, edx
	mov	ecx, 33					; 00000021H
	div	ecx
	push	ebp
	mov	ebp, eax

; 113  : 			m_MemDT		= m_MemDT%uDT_STEP;

	mov	DWORD PTR [ebx+88], edx
	mov	DWORD PTR _StepCount$1$[esp+32], ebp
; File I:\Vitalya\mine\NSProjectX\xrCore\vector.h

; 92   : 	if( val<_low ) val = _low; else if( val>_high ) val = _high;

	test	ebp, ebp
	js	$LN165@OnFrame
	cmp	ebp, 3
	jle	SHORT $LN27@OnFrame
	mov	DWORD PTR _StepCount$1$[esp+32], 3
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 117  : 		for (;StepCount; StepCount--)	{

	jmp	SHORT $LN162@OnFrame
$LN27@OnFrame:
	test	ebp, ebp
	je	$LN165@OnFrame
$LN162@OnFrame:
	mov	al, BYTE PTR $T1[esp+32]
	push	esi
	push	edi
$LN168@OnFrame:
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h

; 23   : 	IC 	BOOL	is		(const T mask)						const	{ return mask==(flags&mask);			}

	mov	ecx, DWORD PTR [ebx+72]
	mov	ebp, DWORD PTR __imp_?ParticleManager@PAPI@@YAPAVIParticleManager@1@XZ
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 118  : 			if (m_Def->m_Flags.is(CPEDef::dfTimeLimit)){ 

	test	DWORD PTR [ecx+4], 16384		; 00004000H
	je	SHORT $LN13@OnFrame

; 119  : 				if (!m_RT_Flags.is(flRT_DefferedStop)){

	test	al, 2
	jne	SHORT $LN13@OnFrame

; 120  : 					m_fElapsedLimit -= fDT_STEP;

	movss	xmm0, DWORD PTR [ebx+76]

; 121  : 					if (m_fElapsedLimit<0.f){

	xorps	xmm1, xmm1
	subss	xmm0, DWORD PTR __real@3d072b02
	comiss	xmm1, xmm0
	movss	DWORD PTR [ebx+76], xmm0
	ja	$LN149@OnFrame
$LN13@OnFrame:

; 124  :                         break;
; 125  : 					}
; 126  : 				}
; 127  : 			}
; 128  :             ParticleManager()->Update(m_HandleEffect,m_HandleActionList,fDT_STEP);

	call	ebp
	fld	DWORD PTR __real@3d072b02
	push	ecx
	fstp	DWORD PTR [esp]
	push	DWORD PTR [ebx+84]
	mov	edx, DWORD PTR [eax]
	mov	ecx, eax
	push	DWORD PTR [ebx+80]
	call	DWORD PTR [edx+28]

; 129  : 
; 130  :             PAPI::Particle* particles;
; 131  :             u32 p_cnt;
; 132  :             ParticleManager()->GetParticles(m_HandleEffect,particles,p_cnt);

	call	ebp
	lea	ecx, DWORD PTR _p_cnt$2[esp+40]
	push	ecx
	lea	ecx, DWORD PTR _particles$3[esp+44]
	mov	edx, DWORD PTR [eax]
	push	ecx
	push	DWORD PTR [ebx+80]
	mov	ecx, eax
	call	DWORD PTR [edx+52]
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h

; 23   : 	IC 	BOOL	is		(const T mask)						const	{ return mask==(flags&mask);			}

	mov	edx, DWORD PTR [ebx+72]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 135  : 			if (m_Def->m_Flags.is(CPEDef::dfFramed|CPEDef::dfAnimated))	m_Def->ExecuteAnimate	(particles,p_cnt,fDT_STEP);

	mov	ecx, DWORD PTR _p_cnt$2[esp+40]
	mov	DWORD PTR _p_cnt$1$[esp+36], ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h

; 23   : 	IC 	BOOL	is		(const T mask)						const	{ return mask==(flags&mask);			}

	mov	eax, DWORD PTR [edx+4]
	and	eax, 3072				; 00000c00H
	cmp	eax, 3072				; 00000c00H
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 135  : 			if (m_Def->m_Flags.is(CPEDef::dfFramed|CPEDef::dfAnimated))	m_Def->ExecuteAnimate	(particles,p_cnt,fDT_STEP);

	jne	$LN37@OnFrame
	mov	eax, edx
	mov	DWORD PTR _this$1$[esp+40], eax
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp

; 100  : 	float speedFac = m_Frame.m_fSpeed * dt;

	movss	xmm2, DWORD PTR [eax+44]
	mulss	xmm2, DWORD PTR __real@3d072b02

; 101  : 	for(u32 i = 0; i < p_cnt; i++){

	test	ecx, ecx
	je	$LN37@OnFrame
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 135  : 			if (m_Def->m_Flags.is(CPEDef::dfFramed|CPEDef::dfAnimated))	m_Def->ExecuteAnimate	(particles,p_cnt,fDT_STEP);

	mov	ebp, DWORD PTR _particles$3[esp+40]
	xorps	xmm3, xmm3
	movss	xmm4, DWORD PTR __real@3b808081
	add	ebp, 68					; 00000044H
	mov	ebx, edx
$LL38@OnFrame:
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h

; 23   : 	IC 	BOOL	is		(const T mask)						const	{ return mask==(flags&mask);			}

	test	BYTE PTR [ebp+2], 1
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp

; 103  : 		float f						= (float(m.frame)/255.f+((m.flags.is(Particle::ANIMATE_CCW))?-1.f:1.f)*speedFac);

	je	SHORT $LN42@OnFrame
	movss	xmm1, DWORD PTR __real@bf800000
	jmp	SHORT $LN43@OnFrame
$LN42@OnFrame:
	movss	xmm1, DWORD PTR __real@3f800000
$LN43@OnFrame:
	movzx	eax, WORD PTR [ebp]
	mulss	xmm1, xmm2
	cvtsi2ss xmm0, eax
	mulss	xmm0, xmm4
	addss	xmm0, xmm1

; 104  : 		if (f>m_Frame.m_iFrameCount)f-=m_Frame.m_iFrameCount;

	cvtsi2ss xmm1, DWORD PTR [ebx+40]
	comiss	xmm0, xmm1
	jbe	SHORT $LN157@OnFrame
	subss	xmm0, xmm1
$LN157@OnFrame:

; 105  : 		if (f<0.f)					f+=m_Frame.m_iFrameCount;

	comiss	xmm3, xmm0
	jbe	SHORT $LN158@OnFrame
	addss	xmm0, xmm1
$LN158@OnFrame:

; 106  : 		m.frame						= (u16)iFloor(f*255.f);

	mulss	xmm0, DWORD PTR __real@437f0000
; File I:\Vitalya\mine\NSProjectX\xrCore\_bitwise.h

; 84   :     int exponent	= (127 + 31) - ((a >> 23) & 0xFF);

	mov	ecx, 158				; 0000009eH
	movss	DWORD PTR _a$4[esp+40], xmm0
	mov	esi, DWORD PTR _a$4[esp+40]
	mov	eax, esi
	sar	eax, 23					; 00000017H

; 85   :     int r			= (((u32)(a) << 8) | (1U << 31)) >> exponent;

	mov	edi, esi
	movzx	eax, al
	or	edi, -8388608				; ff800000H
	sub	ecx, eax
	shl	edi, 8
	shr	edi, cl

; 86   :     exponent		+= 31-127;
; 87   :     {
; 88   :         int imask	=	(!(((( (1<<(exponent)))-1)>>8)&a));
; 89   :         exponent	-=	(31-127)+32;
; 90   :         exponent	>>=	31;
; 91   :         a			>>=	31;

	mov	eax, esi
	sar	eax, 31					; 0000001fH
	sub	ecx, 96					; 00000060H
	movzx	edx, ax
	mov	eax, 1
	shl	eax, cl
	dec	eax
	sar	eax, 8
	and	eax, esi

; 92   :         r			-=	(imask&a);

	neg	eax
	sbb	eax, eax
	inc	eax
	and	ax, dx
	sub	di, ax
	lea	eax, DWORD PTR [ecx+64]
	sar	eax, 31					; 0000001fH

; 93   :         r			&=	exponent;

	and	di, ax
	xor	di, dx
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp

; 106  : 		m.frame						= (u16)iFloor(f*255.f);

	mov	WORD PTR [ebp], di
	add	ebp, 72					; 00000048H
	sub	DWORD PTR _p_cnt$1$[esp+36], 1
	jne	$LL38@OnFrame
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 135  : 			if (m_Def->m_Flags.is(CPEDef::dfFramed|CPEDef::dfAnimated))	m_Def->ExecuteAnimate	(particles,p_cnt,fDT_STEP);

	mov	ebx, DWORD PTR _this$1$[esp+40]
	mov	ecx, DWORD PTR _p_cnt$2[esp+40]
	mov	DWORD PTR _p_cnt$1$[esp+36], ecx
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.cpp

; 105  : 		if (f<0.f)					f+=m_Frame.m_iFrameCount;

	mov	edx, DWORD PTR [ebx+72]
$LN37@OnFrame:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 136  : 			if (m_Def->m_Flags.is(CPEDef::dfCollision)) 				m_Def->ExecuteCollision	(particles,p_cnt,fDT_STEP,this,m_CollisionCallback);

	test	DWORD PTR [edx+4], 65536		; 00010000H
	je	SHORT $LN15@OnFrame
	push	DWORD PTR [ebx+172]
	push	ebx
	push	ecx
	push	ecx
	push	DWORD PTR _particles$3[esp+56]
	mov	ecx, edx
	call	?ExecuteCollision@CPEDef@PS@@QAEXPAUParticle@PAPI@@IMPAVCParticleEffect@2@P6AH1AAU34@ABU?$_vector3@M@@3@Z@Z ; PS::CPEDef::ExecuteCollision
	mov	ecx, DWORD PTR _p_cnt$2[esp+40]
	mov	DWORD PTR _p_cnt$1$[esp+36], ecx
$LN15@OnFrame:

; 137  : 
; 138  : 			//-move action
; 139  : 			if (p_cnt)	

	test	ecx, ecx
	je	$LN16@OnFrame

; 141  : 				vis.box.invalidate	();

	mov	edx, DWORD PTR _particles$3[esp+40]

; 142  : 				float p_size = 0.f;

	xorps	xmm5, xmm5
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	mov	DWORD PTR [ebx+24], 2139095039		; 7f7fffffH
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 141  : 				vis.box.invalidate	();

	add	edx, 8
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	mov	DWORD PTR [ebx+28], 2139095039		; 7f7fffffH
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 141  : 				vis.box.invalidate	();

	mov	esi, ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	mov	DWORD PTR [ebx+32], 2139095039		; 7f7fffffH
	mov	DWORD PTR [ebx+36], -8388609		; ff7fffffH
	mov	DWORD PTR [ebx+40], -8388609		; ff7fffffH
	mov	DWORD PTR [ebx+44], -8388609		; ff7fffffH
	npad	11
$LL7@OnFrame:

; 53   : 	IC	SelfRef	min(const Self &v)						{ x = _min(x,v.x);	y = _min(y,v.y);	z = _min(z,v.z);			return *this;	}

	movss	xmm0, DWORD PTR [ebx+24]
	movss	xmm1, DWORD PTR [edx-8]
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 93   : template <class T>	IC T		_min	(T a, T b)	{ return a<b?a:b;	}

	comiss	xmm1, xmm0
	ja	SHORT $LN75@OnFrame
	movaps	xmm0, xmm1
$LN75@OnFrame:
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 53   : 	IC	SelfRef	min(const Self &v)						{ x = _min(x,v.x);	y = _min(y,v.y);	z = _min(z,v.z);			return *this;	}

	movss	DWORD PTR [ebx+24], xmm0
	movss	xmm0, DWORD PTR [ebx+28]
	movss	xmm1, DWORD PTR [edx-4]
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 93   : template <class T>	IC T		_min	(T a, T b)	{ return a<b?a:b;	}

	comiss	xmm1, xmm0
	ja	SHORT $LN79@OnFrame
	movaps	xmm0, xmm1
$LN79@OnFrame:
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 53   : 	IC	SelfRef	min(const Self &v)						{ x = _min(x,v.x);	y = _min(y,v.y);	z = _min(z,v.z);			return *this;	}

	movss	DWORD PTR [ebx+28], xmm0
	lea	ecx, DWORD PTR [ebx+32]
	movss	xmm0, DWORD PTR [edx]
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 93   : template <class T>	IC T		_min	(T a, T b)	{ return a<b?a:b;	}

	mov	eax, edx
	comiss	xmm0, DWORD PTR [ecx]
	cmova	eax, ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 53   : 	IC	SelfRef	min(const Self &v)						{ x = _min(x,v.x);	y = _min(y,v.y);	z = _min(z,v.z);			return *this;	}

	fld	DWORD PTR [eax]
	fstp	DWORD PTR [ecx]

; 55   : 	IC	SelfRef	max(const Self &v)						{ x = _max(x,v.x);	y = _max(y,v.y);	z = _max(z,v.z);			return *this;	}

	movss	xmm0, DWORD PTR [ebx+36]
	movss	xmm1, DWORD PTR [edx-8]
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 94   : template <class T>	IC T		_max	(T a, T b)	{ return a>b?a:b;	}

	comiss	xmm0, xmm1
	ja	SHORT $LN89@OnFrame
	movaps	xmm0, xmm1
$LN89@OnFrame:
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 55   : 	IC	SelfRef	max(const Self &v)						{ x = _max(x,v.x);	y = _max(y,v.y);	z = _max(z,v.z);			return *this;	}

	movss	DWORD PTR [ebx+36], xmm0
	movss	xmm0, DWORD PTR [ebx+40]
	movss	xmm1, DWORD PTR [edx-4]
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 94   : template <class T>	IC T		_max	(T a, T b)	{ return a>b?a:b;	}

	comiss	xmm0, xmm1
	ja	SHORT $LN93@OnFrame
	movaps	xmm0, xmm1
$LN93@OnFrame:
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 55   : 	IC	SelfRef	max(const Self &v)						{ x = _max(x,v.x);	y = _max(y,v.y);	z = _max(z,v.z);			return *this;	}

	movss	DWORD PTR [ebx+40], xmm0
	lea	ecx, DWORD PTR [ebx+44]
	movss	xmm0, DWORD PTR [ecx]
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 94   : template <class T>	IC T		_max	(T a, T b)	{ return a>b?a:b;	}

	mov	eax, edx
	comiss	xmm0, DWORD PTR [edx]
	cmova	eax, ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 55   : 	IC	SelfRef	max(const Self &v)						{ x = _max(x,v.x);	y = _max(y,v.y);	z = _max(z,v.z);			return *this;	}

	fld	DWORD PTR [eax]
	fstp	DWORD PTR [ecx]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 146  : 					if (m.size.x>p_size) p_size = m.size.x;

	movss	xmm0, DWORD PTR [edx+28]
	comiss	xmm0, xmm5
	jbe	SHORT $LN17@OnFrame
	movaps	xmm5, xmm0
$LN17@OnFrame:

; 147  : 					if (m.size.y>p_size) p_size = m.size.y;

	movss	xmm0, DWORD PTR [edx+32]
	comiss	xmm0, xmm5
	jbe	SHORT $LN18@OnFrame
	movaps	xmm5, xmm0
$LN18@OnFrame:

; 148  : 					if (m.size.z>p_size) p_size = m.size.z;

	movss	xmm0, DWORD PTR [edx+36]
	comiss	xmm0, xmm5
	jbe	SHORT $LN5@OnFrame
	movaps	xmm5, xmm0
$LN5@OnFrame:

; 143  : 				for(u32 i = 0; i < p_cnt; i++){

	add	edx, 72					; 00000048H
	sub	esi, 1
	jne	$LL7@OnFrame
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 35   : 	ICF SelfRef	sub(T s)								{ x-=s;		y-=s;		z-=s;			return *this;	};

	movss	xmm4, DWORD PTR [ebx+24]

; 30   : 	ICF SelfRef	add(T s)								{ x+=s;		y+=s;		z+=s;			return *this;	};

	movaps	xmm0, xmm5

; 35   : 	ICF SelfRef	sub(T s)								{ x-=s;		y-=s;		z-=s;			return *this;	};

	movss	xmm3, DWORD PTR [ebx+28]
	subss	xmm4, xmm5

; 30   : 	ICF SelfRef	add(T s)								{ x+=s;		y+=s;		z+=s;			return *this;	};

	addss	xmm0, DWORD PTR [ebx+36]

; 35   : 	ICF SelfRef	sub(T s)								{ x-=s;		y-=s;		z-=s;			return *this;	};

	movss	xmm2, DWORD PTR [ebx+32]
	subss	xmm3, xmm5
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h

; 97   : 		C.x = (min.x + max.x) * 0.5f;

	movss	xmm6, DWORD PTR __real@3f000000
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 35   : 	ICF SelfRef	sub(T s)								{ x-=s;		y-=s;		z-=s;			return *this;	};

	subss	xmm2, xmm5

; 30   : 	ICF SelfRef	add(T s)								{ x+=s;		y+=s;		z+=s;			return *this;	};

	movaps	xmm1, xmm5
	mov	ecx, DWORD PTR _p_cnt$1$[esp+36]
	addss	xmm1, DWORD PTR [ebx+40]
	addss	xmm5, DWORD PTR [ebx+44]

; 35   : 	ICF SelfRef	sub(T s)								{ x-=s;		y-=s;		z-=s;			return *this;	};

	movss	DWORD PTR [ebx+28], xmm3
	movss	DWORD PTR [ebx+24], xmm4
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h

; 97   : 		C.x = (min.x + max.x) * 0.5f;

	addss	xmm4, xmm0
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 35   : 	ICF SelfRef	sub(T s)								{ x-=s;		y-=s;		z-=s;			return *this;	};

	movss	DWORD PTR [ebx+32], xmm2
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h

; 98   : 		C.y = (min.y + max.y) * 0.5f;

	addss	xmm3, xmm1
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 30   : 	ICF SelfRef	add(T s)								{ x+=s;		y+=s;		z+=s;			return *this;	};

	movss	DWORD PTR [ebx+36], xmm0
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h

; 99   : 		C.z = (min.z + max.z) * 0.5f;

	addss	xmm2, xmm5
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 30   : 	ICF SelfRef	add(T s)								{ x+=s;		y+=s;		z+=s;			return *this;	};

	movss	DWORD PTR [ebx+40], xmm1
	movss	DWORD PTR [ebx+44], xmm5
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h

; 97   : 		C.x = (min.x + max.x) * 0.5f;

	mulss	xmm4, xmm6

; 98   : 		C.y = (min.y + max.y) * 0.5f;

	mulss	xmm3, xmm6
	movss	DWORD PTR [ebx+8], xmm4
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 287  : 	{	return (x-v.x)*(x-v.x) + (y-v.y)*(y-v.y) + (z-v.z)*(z-v.z);	}

	subss	xmm4, xmm0
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h

; 99   : 		C.z = (min.z + max.z) * 0.5f;

	mulss	xmm2, xmm6
	movss	DWORD PTR [ebx+12], xmm3
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 287  : 	{	return (x-v.x)*(x-v.x) + (y-v.y)*(y-v.y) + (z-v.z)*(z-v.z);	}

	subss	xmm3, xmm1
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h

; 99   : 		C.z = (min.z + max.z) * 0.5f;

	movss	DWORD PTR [ebx+16], xmm2
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 287  : 	{	return (x-v.x)*(x-v.x) + (y-v.y)*(y-v.y) + (z-v.z)*(z-v.z);	}

	subss	xmm2, xmm5
	mulss	xmm4, xmm4
	mulss	xmm3, xmm3
	mulss	xmm2, xmm2
	addss	xmm3, xmm4
	addss	xmm3, xmm2
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 764  :             return (float)sqrt(_X);

	sqrtss	xmm0, xmm3
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h

; 116  : 		R = C.distance_to	(max);

	movss	DWORD PTR [ebx+20], xmm0
$LN16@OnFrame:
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h

; 23   : 	IC 	BOOL	is		(const T mask)						const	{ return mask==(flags&mask);			}

	mov	al, BYTE PTR [ebx+176]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 153  : 			if (m_RT_Flags.is(flRT_DefferedStop)&&(0==p_cnt)){

	test	al, 2
	je	SHORT $LN2@OnFrame
	test	ecx, ecx
	je	SHORT $LN150@OnFrame
$LN2@OnFrame:

; 117  : 		for (;StepCount; StepCount--)	{

	sub	DWORD PTR _StepCount$1$[esp+40], 1
	jne	$LN168@OnFrame
	pop	edi
	pop	esi
$LN165@OnFrame:
	pop	ebp
$LN9@OnFrame:
	pop	ebx

; 163  : }

	add	esp, 24					; 00000018H
	ret	4
$LN149@OnFrame:

; 122  : 						m_fElapsedLimit = m_Def->m_fTimeLimit;

	fld	DWORD PTR [ecx+84]

; 123  : 						Stop		(true);

	mov	ecx, ebx
	mov	eax, DWORD PTR [ebx]
	push	1
	fstp	DWORD PTR [ebx+76]
	call	DWORD PTR [eax+60]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 163  : }

	add	esp, 24					; 00000018H
	ret	4
$LN150@OnFrame:
	pop	edi
	pop	esi
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h

; 22   : 	IC	SelfRef	set		(const T mask,	BOOL value)					{ if (value) flags|=mask; else flags&=~mask; return *this; }

	and	al, 252					; 000000fcH
	pop	ebp
	mov	BYTE PTR [ebx+176], al
	pop	ebx
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 163  : }

	add	esp, 24					; 00000018H
	ret	4
$LN8@OnFrame:
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 24   : 	ICF SelfRef	set(const _vector3<float> &v)			{ x = T(v.x);	y = T(v.y);	z = T(v.z);	return *this;	};

	movss	xmm1, DWORD PTR [ebx+92]

; 35   : 	ICF SelfRef	sub(T s)								{ x-=s;		y-=s;		z-=s;			return *this;	};

	movss	xmm0, DWORD PTR __real@3a83126f

; 24   : 	ICF SelfRef	set(const _vector3<float> &v)			{ x = T(v.x);	y = T(v.y);	z = T(v.z);	return *this;	};

	movss	DWORD PTR [ebx+24], xmm1

; 35   : 	ICF SelfRef	sub(T s)								{ x-=s;		y-=s;		z-=s;			return *this;	};

	subss	xmm1, xmm0

; 24   : 	ICF SelfRef	set(const _vector3<float> &v)			{ x = T(v.x);	y = T(v.y);	z = T(v.z);	return *this;	};

	movss	xmm6, DWORD PTR [ebx+96]
	movss	DWORD PTR [ebx+28], xmm6

; 35   : 	ICF SelfRef	sub(T s)								{ x-=s;		y-=s;		z-=s;			return *this;	};

	subss	xmm6, xmm0

; 24   : 	ICF SelfRef	set(const _vector3<float> &v)			{ x = T(v.x);	y = T(v.y);	z = T(v.z);	return *this;	};

	movss	xmm5, DWORD PTR [ebx+100]
	movss	DWORD PTR [ebx+32], xmm5

; 35   : 	ICF SelfRef	sub(T s)								{ x-=s;		y-=s;		z-=s;			return *this;	};

	subss	xmm5, xmm0

; 24   : 	ICF SelfRef	set(const _vector3<float> &v)			{ x = T(v.x);	y = T(v.y);	z = T(v.z);	return *this;	};

	movss	xmm4, DWORD PTR [ebx+92]
	movss	DWORD PTR [ebx+36], xmm4

; 30   : 	ICF SelfRef	add(T s)								{ x+=s;		y+=s;		z+=s;			return *this;	};

	addss	xmm4, xmm0

; 24   : 	ICF SelfRef	set(const _vector3<float> &v)			{ x = T(v.x);	y = T(v.y);	z = T(v.z);	return *this;	};

	movss	xmm2, DWORD PTR [ebx+96]
	movss	DWORD PTR [ebx+40], xmm2

; 30   : 	ICF SelfRef	add(T s)								{ x+=s;		y+=s;		z+=s;			return *this;	};

	addss	xmm2, xmm0

; 24   : 	ICF SelfRef	set(const _vector3<float> &v)			{ x = T(v.x);	y = T(v.y);	z = T(v.z);	return *this;	};

	movss	xmm3, DWORD PTR [ebx+100]

; 30   : 	ICF SelfRef	add(T s)								{ x+=s;		y+=s;		z+=s;			return *this;	};

	addss	xmm3, xmm0

; 35   : 	ICF SelfRef	sub(T s)								{ x-=s;		y-=s;		z-=s;			return *this;	};

	movss	DWORD PTR [ebx+28], xmm6
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h

; 97   : 		C.x = (min.x + max.x) * 0.5f;

	movss	xmm0, DWORD PTR __real@3f000000
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 35   : 	ICF SelfRef	sub(T s)								{ x-=s;		y-=s;		z-=s;			return *this;	};

	movss	DWORD PTR [ebx+32], xmm5

; 30   : 	ICF SelfRef	add(T s)								{ x+=s;		y+=s;		z+=s;			return *this;	};

	movss	DWORD PTR [ebx+36], xmm4
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h

; 98   : 		C.y = (min.y + max.y) * 0.5f;

	addss	xmm6, xmm2
	addss	xmm4, xmm1
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 35   : 	ICF SelfRef	sub(T s)								{ x-=s;		y-=s;		z-=s;			return *this;	};

	movss	DWORD PTR [ebx+24], xmm1
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h

; 99   : 		C.z = (min.z + max.z) * 0.5f;

	addss	xmm5, xmm3
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 30   : 	ICF SelfRef	add(T s)								{ x+=s;		y+=s;		z+=s;			return *this;	};

	movss	DWORD PTR [ebx+40], xmm2
	movss	DWORD PTR [ebx+44], xmm3
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h

; 98   : 		C.y = (min.y + max.y) * 0.5f;

	mulss	xmm6, xmm0
	mulss	xmm4, xmm0

; 99   : 		C.z = (min.z + max.z) * 0.5f;

	mulss	xmm5, xmm0
	movss	DWORD PTR [ebx+12], xmm6
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 287  : 	{	return (x-v.x)*(x-v.x) + (y-v.y)*(y-v.y) + (z-v.z)*(z-v.z);	}

	subss	xmm6, xmm2
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h

; 97   : 		C.x = (min.x + max.x) * 0.5f;

	movss	DWORD PTR [ebx+8], xmm4

; 99   : 		C.z = (min.z + max.z) * 0.5f;

	movss	DWORD PTR [ebx+16], xmm5
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 287  : 	{	return (x-v.x)*(x-v.x) + (y-v.y)*(y-v.y) + (z-v.z)*(z-v.z);	}

	subss	xmm5, xmm3
	subss	xmm4, DWORD PTR [ebx+36]
	mulss	xmm6, xmm6
	mulss	xmm5, xmm5
	mulss	xmm4, xmm4
	addss	xmm6, xmm4
	addss	xmm6, xmm5
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 764  :             return (float)sqrt(_X);

	sqrtss	xmm0, xmm6
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h

; 116  : 		R = C.distance_to	(max);

	movss	DWORD PTR [ebx+20], xmm0
	pop	ebx
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 163  : }

	add	esp, 24					; 00000018H
	ret	4
?OnFrame@CParticleEffect@PS@@UAEXI@Z ENDP		; PS::CParticleEffect::OnFrame
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
_TEXT	SEGMENT
_bc$dead$ = 8						; size = 4
_dc$dead$ = 12						; size = 4
_owner$ = 16						; size = 4
_p$ = 20						; size = 4
?SetBirthDeadCB@CParticleEffect@PS@@QAEXP6AXPAXIAAUParticle@PAPI@@I@Z20I@Z PROC ; PS::CParticleEffect::SetBirthDeadCB
; _this$ = ecx

; 186  : {

	push	esi
	mov	esi, ecx

; 187  :     ParticleManager()->SetCallback		(m_HandleEffect,bc,dc,owner,p);

	call	DWORD PTR __imp_?ParticleManager@PAPI@@YAPAVIParticleManager@1@XZ
	push	DWORD PTR _p$[esp]
	mov	ecx, eax
	push	DWORD PTR _owner$[esp+4]
	mov	edx, DWORD PTR [eax]
	push	OFFSET ?OnGroupParticleDead@@YAXPAXIAAUParticle@PAPI@@I@Z ; OnGroupParticleDead
	push	OFFSET ?OnGroupParticleBirth@@YAXPAXIAAUParticle@PAPI@@I@Z ; OnGroupParticleBirth
	push	DWORD PTR [esi+80]
	call	DWORD PTR [edx+48]
	pop	esi

; 188  : }

	ret	16					; 00000010H
?SetBirthDeadCB@CParticleEffect@PS@@QAEXP6AXPAXIAAUParticle@PAPI@@I@Z20I@Z ENDP ; PS::CParticleEffect::SetBirthDeadCB
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
_TEXT	SEGMENT
?ParticlesCount@CParticleEffect@PS@@UAEIXZ PROC		; PS::CParticleEffect::ParticlesCount
; _this$ = ecx

; 191  : {

	push	esi
	mov	esi, ecx

; 192  : 	return ParticleManager()->GetParticlesCount(m_HandleEffect);

	call	DWORD PTR __imp_?ParticleManager@PAPI@@YAPAVIParticleManager@1@XZ
	push	DWORD PTR [esi+80]
	mov	ecx, eax
	mov	edx, DWORD PTR [eax]
	call	DWORD PTR [edx+56]
	pop	esi

; 193  : }

	ret	0
?ParticlesCount@CParticleEffect@PS@@UAEIXZ ENDP		; PS::CParticleEffect::ParticlesCount
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?Copy@CParticleEffect@PS@@UAEXPAVIRender_Visual@@@Z PROC ; PS::CParticleEffect::Copy
; _this$ = ecx

; 200  : 	FATAL	("Can't duplicate particle system - NOT IMPLEMENTED");

	push	OFFSET ??_C@_0DC@EAPNALPN@Can?8t?5duplicate?5particle?5system@
	push	OFFSET ??_C@_0BK@JDIEOOPC@PS?3?3CParticleEffect?3?3Copy@
	push	200					; 000000c8H
	push	OFFSET ??_C@_0DO@EBEFINPI@I?3?2Vitalya?2mine?2NSProjectX?2laye@
	push	DWORD PTR __imp_?Debug@@3VxrDebug@@A
	call	DWORD PTR __imp_?fatal@xrDebug@@QAAXPBDH00ZZ
	add	esp, 20					; 00000014H

; 201  : }

	ret	4
?Copy@CParticleEffect@PS@@UAEXPAVIRender_Visual@@@Z ENDP ; PS::CParticleEffect::Copy
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xr_resource.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
_TEXT	SEGMENT
?OnDeviceCreate@CParticleEffect@PS@@UAEXXZ PROC		; PS::CParticleEffect::OnDeviceCreate
; _this$ = ecx

; 204  : {

	push	esi
	mov	esi, ecx

; 205  : 	if (m_Def){

	mov	eax, DWORD PTR [esi+72]
	test	eax, eax
	je	SHORT $LN4@OnDeviceCr
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h

; 23   : 	IC 	BOOL	is		(const T mask)						const	{ return mask==(flags&mask);			}

	test	BYTE PTR [eax+4], 1
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 206  : 		if (m_Def->m_Flags.is(CPEDef::dfSprite)){

	je	SHORT $LN4@OnDeviceCr

; 207  : 			geom.create			(FVF::F_LIT, RCache.Vertex.Buffer(), RCache.QuadIB);

	mov	eax, DWORD PTR __imp_?RCache@@3VCBackend@@A
	lea	ecx, DWORD PTR [esi+68]
	push	DWORD PTR [eax+40]
	push	DWORD PTR [eax]
	push	322					; 00000142H
	call	DWORD PTR __imp_?create@resptrcode_geom@@QAEXIPAUIDirect3DVertexBuffer9@@PAUIDirect3DIndexBuffer9@@@Z

; 208  : 			if (m_Def) shader	= m_Def->m_CachedShader;

	mov	eax, DWORD PTR [esi+72]
	test	eax, eax
	je	SHORT $LN4@OnDeviceCr
	push	edi
	lea	edi, DWORD PTR [esi+64]
; File I:\Vitalya\mine\NSProjectX\xrCore\xr_resource.h

; 48   : 	ICF		T *			_get	() const							{	return p_;																					}

	mov	esi, DWORD PTR [eax+16]

; 46   : 	ICF		void		_set	(T * rhs) 							{	if (0!=rhs) rhs->dwReference++;	_dec(); p_ = rhs;											}

	test	esi, esi
	je	SHORT $LN17@OnDeviceCr
	inc	DWORD PTR [esi]
$LN17@OnDeviceCr:
	mov	ecx, edi
	call	DWORD PTR __imp_?_dec@?$resptr_base@UShader@@@@IAEXXZ
	mov	DWORD PTR [edi], esi
	pop	edi
$LN4@OnDeviceCr:
	pop	esi
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 211  : }

	ret	0
?OnDeviceCreate@CParticleEffect@PS@@UAEXXZ ENDP		; PS::CParticleEffect::OnDeviceCreate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xr_resource.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
_TEXT	SEGMENT
?OnDeviceDestroy@CParticleEffect@PS@@UAEXXZ PROC	; PS::CParticleEffect::OnDeviceDestroy
; _this$ = ecx

; 214  : {

	push	edi
	mov	edi, ecx

; 215  : 	if (m_Def){

	mov	eax, DWORD PTR [edi+72]
	test	eax, eax
	je	SHORT $LN3@OnDeviceDe
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h

; 23   : 	IC 	BOOL	is		(const T mask)						const	{ return mask==(flags&mask);			}

	test	BYTE PTR [eax+4], 1
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 216  : 		if (m_Def->m_Flags.is(CPEDef::dfSprite)){

	je	SHORT $LN3@OnDeviceDe

; 217  : 			geom.destroy		();

	push	esi
; File I:\Vitalya\mine\NSProjectX\xrCore\xr_resource.h

; 46   : 	ICF		void		_set	(T * rhs) 							{	if (0!=rhs) rhs->dwReference++;	_dec(); p_ = rhs;											}

	lea	ecx, DWORD PTR [edi+68]
	call	DWORD PTR __imp_?_dec@?$resptr_base@USGeometry@@@@IAEXXZ
	lea	ecx, DWORD PTR [edi+64]
	mov	DWORD PTR [edi+68], 0
	call	DWORD PTR __imp_?_dec@?$resptr_base@UShader@@@@IAEXXZ
	mov	DWORD PTR [edi+64], 0
	pop	esi
$LN3@OnDeviceDe:
	pop	edi
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 221  : }

	ret	0
?OnDeviceDestroy@CParticleEffect@PS@@UAEXXZ ENDP	; PS::CParticleEffect::OnDeviceDestroy
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrEngine\fvf.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector2.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrEngine\fvf.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector2.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector2.h
; File I:\Vitalya\mine\NSProjectX\xrEngine\fvf.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector2.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector2.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrEngine\fvf.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector2.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrEngine\fvf.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector2.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
;	COMDAT ?FillSprite@@YAXAAPAULIT@FVF@@ABU?$_vector3@M@@11ABU?$_vector2@M@@2MMIM@Z
_TEXT	SEGMENT
tv851 = -8						; size = 4
_ca$ = -8						; size = 4
tv873 = -4						; size = 4
_sa$ = -4						; size = 4
_y$1$ = 8						; size = 4
_R$ = 8							; size = 4
_pos$ = 12						; size = 4
_lt$ = 16						; size = 4
_rb$ = 20						; size = 4
_z$1$ = 24						; size = 4
_r1$ = 24						; size = 4
tv859 = 28						; size = 4
_r2$ = 28						; size = 4
_clr$ = 32						; size = 4
tv839 = 36						; size = 4
_angle$ = 36						; size = 4
?FillSprite@@YAXAAPAULIT@FVF@@ABU?$_vector3@M@@11ABU?$_vector2@M@@2MMIM@Z PROC ; FillSprite, COMDAT
; _pv$ = ecx
; _T$ = edx

; 224  : {

	sub	esp, 8
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 754  :             return (float)sin(_X);

	fld	DWORD PTR _angle$[esp+4]
	fld	ST(0)
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 228  : 	Vr.x 		= T.x*r1*sa+R.x*r1*ca;

	mov	eax, DWORD PTR _R$[esp+4]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 754  :             return (float)sin(_X);

	fsin
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 224  : {

	push	ebx
	mov	ebx, ecx
	push	esi

; 240  : 	pv->set		(d.x+pos.x,d.y+pos.y,d.z+pos.z, clr, lt.x,rb.y);	pv++;

	mov	esi, DWORD PTR _pos$[esp+12]
	push	edi
	mov	edi, DWORD PTR [ebx]
	movss	xmm1, DWORD PTR _r1$[esp+16]
	fstp	DWORD PTR _sa$[esp+20]
	movss	xmm4, DWORD PTR [eax]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 653  :             return (float)cos(_X);

	fcos
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 228  : 	Vr.x 		= T.x*r1*sa+R.x*r1*ca;

	movss	xmm6, DWORD PTR _sa$[esp+20]
	movaps	xmm2, xmm4
	movss	xmm0, DWORD PTR [edx]
	mulss	xmm2, xmm1

; 229  : 	Vr.y 		= T.y*r1*sa+R.y*r1*ca;

	movss	xmm3, DWORD PTR [eax+4]
	mulss	xmm0, xmm1
	fstp	DWORD PTR _ca$[esp+20]
	movss	xmm7, DWORD PTR _ca$[esp+20]
	mulss	xmm2, xmm7
	mulss	xmm0, xmm6

; 230  : 	Vr.z 		= T.z*r1*sa+R.z*r1*ca;

	movss	xmm5, DWORD PTR [edx+8]
	movss	DWORD PTR _z$1$[esp+16], xmm5
	addss	xmm2, xmm0
	mulss	xmm5, xmm1
	movaps	xmm0, xmm3
	mulss	xmm0, xmm1
	movss	DWORD PTR tv873[esp+20], xmm2
	movss	xmm2, DWORD PTR [edx+4]
	movss	DWORD PTR _y$1$[esp+16], xmm2
	mulss	xmm2, xmm1
	mulss	xmm0, xmm7
	mulss	xmm2, xmm6
	mulss	xmm5, xmm6
	addss	xmm2, xmm0
	movss	DWORD PTR tv851[esp+20], xmm2
	movss	xmm2, DWORD PTR [eax+8]
	movaps	xmm0, xmm2
	mulss	xmm0, xmm1

; 231  : 	Vt.x 		= T.x*r2*ca-R.x*r2*sa;

	movss	xmm1, DWORD PTR [edx]
	mulss	xmm0, xmm7
	addss	xmm5, xmm0
	movss	xmm0, DWORD PTR _r2$[esp+16]
	mulss	xmm1, xmm0
	mulss	xmm4, xmm0
	mulss	xmm1, xmm7
	mulss	xmm4, xmm6

; 232  : 	Vt.y 		= T.y*r2*ca-R.y*r2*sa;

	mulss	xmm3, xmm0
	subss	xmm1, xmm4

; 233  : 	Vt.z 		= T.z*r2*ca-R.z*r2*sa;

	mulss	xmm2, xmm0
	movss	xmm4, DWORD PTR _z$1$[esp+16]
	mulss	xmm4, xmm0
	movss	DWORD PTR tv839[esp+16], xmm1
	movss	xmm1, DWORD PTR _y$1$[esp+16]
	mulss	xmm1, xmm0
	mulss	xmm3, xmm6
	mulss	xmm1, xmm7
	mulss	xmm2, xmm6
	mulss	xmm4, xmm7
	subss	xmm1, xmm3
	movss	xmm3, DWORD PTR tv839[esp+16]
	movaps	xmm0, xmm3
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 36   : 	ICF	SelfRef	sub(const Self &a, const Self &v)		{ x=a.x-v.x;y=a.y-v.y;	z=a.z-v.z;		return *this;	};

	addss	xmm3, DWORD PTR tv873[esp+20]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 233  : 	Vt.z 		= T.z*r2*ca-R.z*r2*sa;

	subss	xmm0, DWORD PTR tv873[esp+20]
	subss	xmm4, xmm2
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 36   : 	ICF	SelfRef	sub(const Self &a, const Self &v)		{ x=a.x-v.x;y=a.y-v.y;	z=a.z-v.z;		return *this;	};

	movaps	xmm2, xmm1
	movaps	xmm6, xmm2

; 31   : 	ICF SelfRef	add(const Self &a, const Self &v)		{ x=a.x+v.x;y=a.y+v.y;	z=a.z+v.z;		return *this;	};

	addss	xmm2, DWORD PTR tv851[esp+20]

; 36   : 	ICF	SelfRef	sub(const Self &a, const Self &v)		{ x=a.x-v.x;y=a.y-v.y;	z=a.z-v.z;		return *this;	};

	subss	xmm6, DWORD PTR tv851[esp+20]
	movss	DWORD PTR tv839[esp+16], xmm3
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 240  : 	pv->set		(d.x+pos.x,d.y+pos.y,d.z+pos.z, clr, lt.x,rb.y);	pv++;

	movss	xmm3, DWORD PTR [esi+4]
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 36   : 	ICF	SelfRef	sub(const Self &a, const Self &v)		{ x=a.x-v.x;y=a.y-v.y;	z=a.z-v.z;		return *this;	};

	movaps	xmm7, xmm4

; 31   : 	ICF SelfRef	add(const Self &a, const Self &v)		{ x=a.x+v.x;y=a.y+v.y;	z=a.z+v.z;		return *this;	};

	addss	xmm4, xmm5
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 233  : 	Vt.z 		= T.z*r2*ca-R.z*r2*sa;

	movss	DWORD PTR tv859[esp+16], xmm0
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 36   : 	ICF	SelfRef	sub(const Self &a, const Self &v)		{ x=a.x-v.x;y=a.y-v.y;	z=a.z-v.z;		return *this;	};

	subss	xmm7, xmm5

; 31   : 	ICF SelfRef	add(const Self &a, const Self &v)		{ x=a.x+v.x;y=a.y+v.y;	z=a.z+v.z;		return *this;	};

	movss	DWORD PTR _y$1$[esp+16], xmm2
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 240  : 	pv->set		(d.x+pos.x,d.y+pos.y,d.z+pos.z, clr, lt.x,rb.y);	pv++;

	subss	xmm3, xmm2
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 31   : 	ICF SelfRef	add(const Self &a, const Self &v)		{ x=a.x+v.x;y=a.y+v.y;	z=a.z+v.z;		return *this;	};

	movss	DWORD PTR _z$1$[esp+16], xmm4
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 240  : 	pv->set		(d.x+pos.x,d.y+pos.y,d.z+pos.z, clr, lt.x,rb.y);	pv++;

	movss	xmm1, DWORD PTR [esi+8]
	movss	xmm0, DWORD PTR [esi]
	subss	xmm1, xmm4
	mov	eax, DWORD PTR _rb$[esp+16]
	subss	xmm0, DWORD PTR tv839[esp+16]
	mov	edx, DWORD PTR _lt$[esp+16]
; File I:\Vitalya\mine\NSProjectX\xrEngine\fvf.h

; 31   : 		IC void		set(float x, float y, float z, u32 C, float u, float v) { p.set(x, y, z); color = C; t.set(u, v); }

	mov	ecx, DWORD PTR _clr$[esp+16]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 240  : 	pv->set		(d.x+pos.x,d.y+pos.y,d.z+pos.z, clr, lt.x,rb.y);	pv++;

	movss	xmm2, DWORD PTR [eax+4]

; 243  : 	pv->set		(b.x+pos.x,b.y+pos.y,b.z+pos.z,	clr, rb.x,lt.y);	pv++;

	movss	xmm5, DWORD PTR _z$1$[esp+16]
	movss	xmm4, DWORD PTR [edx]
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector2.h

; 15   : 	IC SelfRef set(float _u, float _v)				{ x=T(_u); y=T(_v);				return *this;	}

	movss	DWORD PTR [edi+20], xmm2
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 241  : 	pv->set		(a.x+pos.x,a.y+pos.y,a.z+pos.z, clr, lt.x,lt.y);	pv++;

	movaps	xmm2, xmm6
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	movss	DWORD PTR [edi], xmm0
	movss	DWORD PTR [edi+8], xmm1
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 241  : 	pv->set		(a.x+pos.x,a.y+pos.y,a.z+pos.z, clr, lt.x,lt.y);	pv++;

	movaps	xmm1, xmm7
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	movss	DWORD PTR [edi+4], xmm3
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 241  : 	pv->set		(a.x+pos.x,a.y+pos.y,a.z+pos.z, clr, lt.x,lt.y);	pv++;

	movss	xmm0, DWORD PTR tv859[esp+16]
; File I:\Vitalya\mine\NSProjectX\xrEngine\fvf.h

; 31   : 		IC void		set(float x, float y, float z, u32 C, float u, float v) { p.set(x, y, z); color = C; t.set(u, v); }

	mov	DWORD PTR [edi+12], ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector2.h

; 15   : 	IC SelfRef set(float _u, float _v)				{ x=T(_u); y=T(_v);				return *this;	}

	movss	DWORD PTR [edi+16], xmm4
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 241  : 	pv->set		(a.x+pos.x,a.y+pos.y,a.z+pos.z, clr, lt.x,lt.y);	pv++;

	addss	xmm2, DWORD PTR [esi+4]
	addss	xmm1, DWORD PTR [esi+8]
	addss	xmm0, DWORD PTR [esi]
	movss	xmm4, DWORD PTR [edx]
	movss	xmm3, DWORD PTR [edx+4]
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	movss	DWORD PTR [edi+28], xmm2
	movss	DWORD PTR [edi+32], xmm1
	movss	DWORD PTR [edi+24], xmm0
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector2.h

; 15   : 	IC SelfRef set(float _u, float _v)				{ x=T(_u); y=T(_v);				return *this;	}

	movss	DWORD PTR [edi+44], xmm3
; File I:\Vitalya\mine\NSProjectX\xrEngine\fvf.h

; 31   : 		IC void		set(float x, float y, float z, u32 C, float u, float v) { p.set(x, y, z); color = C; t.set(u, v); }

	mov	DWORD PTR [edi+36], ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector2.h

; 15   : 	IC SelfRef set(float _u, float _v)				{ x=T(_u); y=T(_v);				return *this;	}

	movss	DWORD PTR [edi+40], xmm4
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 242  : 	pv->set		(c.x+pos.x,c.y+pos.y,c.z+pos.z, clr, rb.x,rb.y);	pv++;

	movss	xmm2, DWORD PTR [esi+4]
	movss	xmm1, DWORD PTR [esi+8]
	subss	xmm2, xmm6
	movss	xmm0, DWORD PTR [esi]
	subss	xmm1, xmm7
	movss	xmm3, DWORD PTR [eax]
	movss	xmm4, DWORD PTR [eax+4]
	subss	xmm0, DWORD PTR tv859[esp+16]
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	movss	DWORD PTR [edi+52], xmm2
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 243  : 	pv->set		(b.x+pos.x,b.y+pos.y,b.z+pos.z,	clr, rb.x,lt.y);	pv++;

	movss	xmm2, DWORD PTR _y$1$[esp+16]
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector2.h

; 15   : 	IC SelfRef set(float _u, float _v)				{ x=T(_u); y=T(_v);				return *this;	}

	movss	DWORD PTR [edi+64], xmm3
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 243  : 	pv->set		(b.x+pos.x,b.y+pos.y,b.z+pos.z,	clr, rb.x,lt.y);	pv++;

	movss	xmm3, DWORD PTR tv839[esp+16]
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	movss	DWORD PTR [edi+48], xmm0
	movss	DWORD PTR [edi+56], xmm1
; File I:\Vitalya\mine\NSProjectX\xrEngine\fvf.h

; 31   : 		IC void		set(float x, float y, float z, u32 C, float u, float v) { p.set(x, y, z); color = C; t.set(u, v); }

	mov	DWORD PTR [edi+60], ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector2.h

; 15   : 	IC SelfRef set(float _u, float _v)				{ x=T(_u); y=T(_v);				return *this;	}

	movss	DWORD PTR [edi+68], xmm4
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 243  : 	pv->set		(b.x+pos.x,b.y+pos.y,b.z+pos.z,	clr, rb.x,lt.y);	pv++;

	addss	xmm2, DWORD PTR [esi+4]
	addss	xmm5, DWORD PTR [esi+8]
	addss	xmm3, DWORD PTR [esi]
	movss	xmm0, DWORD PTR [eax]
	lea	eax, DWORD PTR [edi+96]
	movss	xmm1, DWORD PTR [edx+4]
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	movss	DWORD PTR [edi+76], xmm2
	movss	DWORD PTR [edi+80], xmm5
	movss	DWORD PTR [edi+72], xmm3
; File I:\Vitalya\mine\NSProjectX\xrEngine\fvf.h

; 31   : 		IC void		set(float x, float y, float z, u32 C, float u, float v) { p.set(x, y, z); color = C; t.set(u, v); }

	mov	DWORD PTR [edi+84], ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector2.h

; 15   : 	IC SelfRef set(float _u, float _v)				{ x=T(_u); y=T(_v);				return *this;	}

	movss	DWORD PTR [edi+88], xmm0
	movss	DWORD PTR [edi+92], xmm1
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 243  : 	pv->set		(b.x+pos.x,b.y+pos.y,b.z+pos.z,	clr, rb.x,lt.y);	pv++;

	pop	edi
	pop	esi
	mov	DWORD PTR [ebx], eax
	pop	ebx

; 244  : }

	add	esp, 8
	ret	0
?FillSprite@@YAXAAPAULIT@FVF@@ABU?$_vector3@M@@11ABU?$_vector2@M@@2MMIM@Z ENDP ; FillSprite
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrEngine\fvf.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrEngine\fvf.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector2.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector2.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector2.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector2.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrEngine\fvf.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector2.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector2.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrEngine\fvf.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrEngine\fvf.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector2.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
;	COMDAT ?FillSprite@@YAXAAPAULIT@FVF@@ABU?$_vector3@M@@1ABU?$_vector2@M@@2MMIM@Z
_TEXT	SEGMENT
_z$1$ = -12						; size = 4
_sa$ = -12						; size = 4
_R$$sroa$543$1$ = -8					; size = 4
_ca$ = -4						; size = 4
_R$$sroa$544$1$ = 8					; size = 4
tv1043 = 8						; size = 4
_dir$ = 8						; size = 4
_lt$ = 12						; size = 4
_rb$ = 16						; size = 4
_y$1$ = 20						; size = 4
_r1$ = 20						; size = 4
tv1042 = 24						; size = 4
_r2$ = 24						; size = 4
_clr$ = 28						; size = 4
tv1021 = 32						; size = 4
_angle$ = 32						; size = 4
?FillSprite@@YAXAAPAULIT@FVF@@ABU?$_vector3@M@@1ABU?$_vector2@M@@2MMIM@Z PROC ; FillSprite, COMDAT
; _pv$ = ecx
; _pos$ = edx

; 247  : {

	sub	esp, 12					; 0000000cH
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 754  :             return (float)sin(_X);

	fld	DWORD PTR _angle$[esp+8]
	fld	ST(0)
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 273  : 		x = v1.y  * v2.z  - v1.z  * v2.y ;

	mov	eax, DWORD PTR _dir$[esp+8]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 754  :             return (float)sin(_X);

	fsin
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 247  : {

	push	ebx
	mov	ebx, ecx

; 250  : 	const Fvector& T 	= dir;
; 251  : 	Fvector R; 	R.crossproduct(T,Device.vCameraDirection).normalize_safe();

	mov	ecx, DWORD PTR __imp_?Device@@3VCRenderDevice@@A
	push	esi
	push	edi
	mov	edi, edx
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 273  : 		x = v1.y  * v2.z  - v1.z  * v2.y ;

	movss	xmm5, DWORD PTR [eax+8]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 248  : 	float sa	= _sin(angle);  

	fstp	DWORD PTR _sa$[esp+24]
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 273  : 		x = v1.y  * v2.z  - v1.z  * v2.y ;

	movss	xmm6, DWORD PTR [eax+4]
	movaps	xmm0, xmm5
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 653  :             return (float)cos(_X);

	fcos
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 273  : 		x = v1.y  * v2.z  - v1.z  * v2.y ;

	movss	xmm2, DWORD PTR [ecx+508]
	movaps	xmm7, xmm6
	movss	xmm3, DWORD PTR [ecx+504]

; 274  : 		y = v1.z  * v2.x  - v1.x  * v2.z ;

	movss	xmm4, DWORD PTR [eax]
	movss	xmm1, DWORD PTR [ecx+500]
	mulss	xmm0, xmm3
	mulss	xmm7, xmm2
	mulss	xmm5, xmm1
	subss	xmm7, xmm0
	movaps	xmm0, xmm4
	mulss	xmm0, xmm2

; 275  : 		z = v1.x  * v2.y  - v1.y  * v2.x ;

	movaps	xmm2, xmm4
	mulss	xmm2, xmm3
	subss	xmm5, xmm0
	movaps	xmm0, xmm6
	mulss	xmm0, xmm1
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 249  : 	float ca	= _cos(angle);  

	fstp	DWORD PTR _ca$[esp+24]
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 275  : 		z = v1.x  * v2.y  - v1.y  * v2.x ;

	subss	xmm2, xmm0
	movss	DWORD PTR _R$$sroa$543$1$[esp+24], xmm5

; 200  : 		T magnitude=x*x + y*y + z*z;

	movaps	xmm0, xmm7

; 275  : 		z = v1.x  * v2.y  - v1.y  * v2.x ;

	movaps	xmm1, xmm5

; 200  : 		T magnitude=x*x + y*y + z*z;

	mulss	xmm0, xmm7

; 275  : 		z = v1.x  * v2.y  - v1.y  * v2.x ;

	mulss	xmm1, xmm5
	movss	DWORD PTR _R$$sroa$544$1$[esp+20], xmm2

; 200  : 		T magnitude=x*x + y*y + z*z;

	addss	xmm1, xmm0
	movaps	xmm0, xmm2
	mulss	xmm0, xmm2
	addss	xmm1, xmm0

; 201  : 		if (magnitude> std::numeric_limits<T>::min()) {

	comiss	xmm1, DWORD PTR __real@00800000
	jbe	SHORT $LN14@FillSprite

; 202  : 			magnitude=_sqrt(1/magnitude);

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, xmm1
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 764  :             return (float)sqrt(_X);

	sqrtss	xmm0, xmm0
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 203  : 			x *= magnitude;

	mulss	xmm5, xmm0

; 204  : 			y *= magnitude;

	mulss	xmm2, xmm0
	mulss	xmm7, xmm0
	movss	DWORD PTR _R$$sroa$543$1$[esp+24], xmm5
	movss	DWORD PTR _R$$sroa$544$1$[esp+20], xmm2
$LN14@FillSprite:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 253  : 	Vr.x 		= T.x*r1*sa+R.x*r1*ca;

	movss	xmm1, DWORD PTR _r1$[esp+20]
	movaps	xmm0, xmm7
	movss	xmm3, DWORD PTR _sa$[esp+24]
	movss	xmm2, DWORD PTR _ca$[esp+24]
	mulss	xmm0, xmm1

; 265  : 	pv->set		(d.x+pos.x,d.y+pos.y,d.z+pos.z, clr, lt.x,rb.y);	pv++;

	mov	esi, DWORD PTR [ebx]
	mulss	xmm4, xmm1
	mov	edx, DWORD PTR _lt$[esp+20]
	mulss	xmm0, xmm2
; File I:\Vitalya\mine\NSProjectX\xrEngine\fvf.h

; 31   : 		IC void		set(float x, float y, float z, u32 C, float u, float v) { p.set(x, y, z); color = C; t.set(u, v); }

	mov	ecx, DWORD PTR _clr$[esp+20]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 254  : 	Vr.y 		= T.y*r1*sa+R.y*r1*ca;

	mulss	xmm6, xmm1
	mulss	xmm4, xmm3
	mulss	xmm6, xmm3
	addss	xmm4, xmm0
	movaps	xmm0, xmm5

; 255  : 	Vr.z 		= T.z*r1*sa+R.z*r1*ca;

	movss	xmm5, DWORD PTR [eax+8]
	mulss	xmm0, xmm1
	mulss	xmm5, xmm1
	mulss	xmm0, xmm2
	mulss	xmm5, xmm3
	addss	xmm6, xmm0
	movss	xmm0, DWORD PTR _R$$sroa$544$1$[esp+20]
	mulss	xmm0, xmm1

; 256  : 	Vt.x 		= T.x*r2*ca-R.x*r2*sa;
; 257  : 	Vt.y 		= T.y*r2*ca-R.y*r2*sa;

	movss	xmm1, DWORD PTR _R$$sroa$543$1$[esp+24]
	mulss	xmm0, xmm2
	movss	DWORD PTR _y$1$[esp+20], xmm6
	addss	xmm5, xmm0
	movss	xmm0, DWORD PTR _r2$[esp+20]
	mulss	xmm7, xmm0
	mulss	xmm1, xmm0
	movss	DWORD PTR _z$1$[esp+24], xmm5
	movss	xmm5, DWORD PTR [eax]
	mulss	xmm5, xmm0
	mulss	xmm7, xmm3
	mulss	xmm5, xmm2
	mulss	xmm1, xmm3
	subss	xmm5, xmm7
	movss	xmm7, DWORD PTR [eax+4]
	mulss	xmm7, xmm0
	mulss	xmm7, xmm2
	movss	DWORD PTR tv1021[esp+20], xmm5
	subss	xmm7, xmm1

; 258  : 	Vt.z 		= T.z*r2*ca-R.z*r2*sa;

	movss	xmm1, DWORD PTR _R$$sroa$544$1$[esp+20]
	mulss	xmm1, xmm0
	movss	DWORD PTR tv1042[esp+20], xmm7
	movss	xmm7, DWORD PTR [eax+8]
	mulss	xmm7, xmm0

; 265  : 	pv->set		(d.x+pos.x,d.y+pos.y,d.z+pos.z, clr, lt.x,rb.y);	pv++;

	mov	eax, DWORD PTR _rb$[esp+20]
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 36   : 	ICF	SelfRef	sub(const Self &a, const Self &v)		{ x=a.x-v.x;y=a.y-v.y;	z=a.z-v.z;		return *this;	};

	movss	xmm0, DWORD PTR _z$1$[esp+24]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 258  : 	Vt.z 		= T.z*r2*ca-R.z*r2*sa;

	mulss	xmm1, xmm3

; 265  : 	pv->set		(d.x+pos.x,d.y+pos.y,d.z+pos.z, clr, lt.x,rb.y);	pv++;

	movss	xmm3, DWORD PTR [edi+4]
	mulss	xmm7, xmm2
	movss	xmm2, DWORD PTR [eax+4]
	subss	xmm7, xmm1
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 36   : 	ICF	SelfRef	sub(const Self &a, const Self &v)		{ x=a.x-v.x;y=a.y-v.y;	z=a.z-v.z;		return *this;	};

	movss	xmm1, DWORD PTR tv1021[esp+20]
	addss	xmm1, xmm4
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 258  : 	Vt.z 		= T.z*r2*ca-R.z*r2*sa;

	movss	DWORD PTR tv1043[esp+20], xmm7
	movaps	xmm7, xmm5
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 36   : 	ICF	SelfRef	sub(const Self &a, const Self &v)		{ x=a.x-v.x;y=a.y-v.y;	z=a.z-v.z;		return *this;	};

	movss	xmm5, DWORD PTR tv1042[esp+20]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 258  : 	Vt.z 		= T.z*r2*ca-R.z*r2*sa;

	subss	xmm7, xmm4

; 265  : 	pv->set		(d.x+pos.x,d.y+pos.y,d.z+pos.z, clr, lt.x,rb.y);	pv++;

	movss	xmm4, DWORD PTR [edx]
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 36   : 	ICF	SelfRef	sub(const Self &a, const Self &v)		{ x=a.x-v.x;y=a.y-v.y;	z=a.z-v.z;		return *this;	};

	subss	xmm5, xmm6
	movss	xmm6, DWORD PTR tv1043[esp+20]
	movss	DWORD PTR tv1021[esp+20], xmm1
	subss	xmm6, xmm0

; 31   : 	ICF SelfRef	add(const Self &a, const Self &v)		{ x=a.x+v.x;y=a.y+v.y;	z=a.z+v.z;		return *this;	};

	movss	xmm1, DWORD PTR _y$1$[esp+20]
	addss	xmm1, DWORD PTR tv1042[esp+20]
	addss	xmm0, DWORD PTR tv1043[esp+20]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 265  : 	pv->set		(d.x+pos.x,d.y+pos.y,d.z+pos.z, clr, lt.x,rb.y);	pv++;

	subss	xmm3, xmm1
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 31   : 	ICF SelfRef	add(const Self &a, const Self &v)		{ x=a.x+v.x;y=a.y+v.y;	z=a.z+v.z;		return *this;	};

	movss	DWORD PTR _y$1$[esp+20], xmm1
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 265  : 	pv->set		(d.x+pos.x,d.y+pos.y,d.z+pos.z, clr, lt.x,rb.y);	pv++;

	movss	xmm1, DWORD PTR [edi+8]
	subss	xmm1, xmm0
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 31   : 	ICF SelfRef	add(const Self &a, const Self &v)		{ x=a.x+v.x;y=a.y+v.y;	z=a.z+v.z;		return *this;	};

	movss	DWORD PTR _z$1$[esp+24], xmm0
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 265  : 	pv->set		(d.x+pos.x,d.y+pos.y,d.z+pos.z, clr, lt.x,rb.y);	pv++;

	movss	xmm0, DWORD PTR [edi]
	subss	xmm0, DWORD PTR tv1021[esp+20]
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	movss	DWORD PTR [esi+4], xmm3
; File I:\Vitalya\mine\NSProjectX\xrEngine\fvf.h

; 31   : 		IC void		set(float x, float y, float z, u32 C, float u, float v) { p.set(x, y, z); color = C; t.set(u, v); }

	mov	DWORD PTR [esi+12], ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	movss	DWORD PTR [esi+8], xmm1
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector2.h

; 15   : 	IC SelfRef set(float _u, float _v)				{ x=T(_u); y=T(_v);				return *this;	}

	movss	DWORD PTR [esi+16], xmm4
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	movss	DWORD PTR [esi], xmm0
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector2.h

; 15   : 	IC SelfRef set(float _u, float _v)				{ x=T(_u); y=T(_v);				return *this;	}

	movss	DWORD PTR [esi+20], xmm2
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 266  : 	pv->set		(a.x+pos.x,a.y+pos.y,a.z+pos.z, clr, lt.x,lt.y);	pv++;

	movss	xmm4, DWORD PTR [edx]
	movaps	xmm2, xmm5
	addss	xmm2, DWORD PTR [edi+4]
	movss	xmm3, DWORD PTR [edx+4]
	movaps	xmm1, xmm6
	addss	xmm1, DWORD PTR [edi+8]
	movaps	xmm0, xmm7
	addss	xmm0, DWORD PTR [edi]
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	movss	DWORD PTR [esi+28], xmm2
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector2.h

; 15   : 	IC SelfRef set(float _u, float _v)				{ x=T(_u); y=T(_v);				return *this;	}

	movss	DWORD PTR [esi+40], xmm4
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	movss	DWORD PTR [esi+32], xmm1
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector2.h

; 15   : 	IC SelfRef set(float _u, float _v)				{ x=T(_u); y=T(_v);				return *this;	}

	movss	DWORD PTR [esi+44], xmm3
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	movss	DWORD PTR [esi+24], xmm0
; File I:\Vitalya\mine\NSProjectX\xrEngine\fvf.h

; 31   : 		IC void		set(float x, float y, float z, u32 C, float u, float v) { p.set(x, y, z); color = C; t.set(u, v); }

	mov	DWORD PTR [esi+36], ecx
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 267  : 	pv->set		(c.x+pos.x,c.y+pos.y,c.z+pos.z, clr, rb.x,rb.y);	pv++;

	movss	xmm2, DWORD PTR [edi+4]
	movss	xmm1, DWORD PTR [edi+8]
	subss	xmm2, xmm5
	movss	xmm0, DWORD PTR [edi]
	subss	xmm1, xmm6
	movss	xmm3, DWORD PTR [eax]
	subss	xmm0, xmm7
	movss	xmm4, DWORD PTR [eax+4]
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector2.h

; 15   : 	IC SelfRef set(float _u, float _v)				{ x=T(_u); y=T(_v);				return *this;	}

	movss	DWORD PTR [esi+64], xmm3
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 268  : 	pv->set		(b.x+pos.x,b.y+pos.y,b.z+pos.z,	clr, rb.x,lt.y);	pv++;

	movss	xmm3, DWORD PTR _y$1$[esp+20]
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	movss	DWORD PTR [esi+52], xmm2
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 268  : 	pv->set		(b.x+pos.x,b.y+pos.y,b.z+pos.z,	clr, rb.x,lt.y);	pv++;

	movss	xmm2, DWORD PTR _z$1$[esp+24]
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector2.h

; 15   : 	IC SelfRef set(float _u, float _v)				{ x=T(_u); y=T(_v);				return *this;	}

	movss	DWORD PTR [esi+68], xmm4
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 268  : 	pv->set		(b.x+pos.x,b.y+pos.y,b.z+pos.z,	clr, rb.x,lt.y);	pv++;

	movss	xmm4, DWORD PTR tv1021[esp+20]
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	movss	DWORD PTR [esi+48], xmm0
	movss	DWORD PTR [esi+56], xmm1
; File I:\Vitalya\mine\NSProjectX\xrEngine\fvf.h

; 31   : 		IC void		set(float x, float y, float z, u32 C, float u, float v) { p.set(x, y, z); color = C; t.set(u, v); }

	mov	DWORD PTR [esi+60], ecx
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 268  : 	pv->set		(b.x+pos.x,b.y+pos.y,b.z+pos.z,	clr, rb.x,lt.y);	pv++;

	addss	xmm3, DWORD PTR [edi+4]
	addss	xmm2, DWORD PTR [edi+8]
	addss	xmm4, DWORD PTR [edi]
	movss	xmm0, DWORD PTR [eax]
	lea	eax, DWORD PTR [esi+96]
	movss	xmm1, DWORD PTR [edx+4]
	pop	edi
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	movss	DWORD PTR [esi+76], xmm3
	movss	DWORD PTR [esi+72], xmm4
	movss	DWORD PTR [esi+80], xmm2
; File I:\Vitalya\mine\NSProjectX\xrEngine\fvf.h

; 31   : 		IC void		set(float x, float y, float z, u32 C, float u, float v) { p.set(x, y, z); color = C; t.set(u, v); }

	mov	DWORD PTR [esi+84], ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector2.h

; 15   : 	IC SelfRef set(float _u, float _v)				{ x=T(_u); y=T(_v);				return *this;	}

	movss	DWORD PTR [esi+88], xmm0
	movss	DWORD PTR [esi+92], xmm1
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 268  : 	pv->set		(b.x+pos.x,b.y+pos.y,b.z+pos.z,	clr, rb.x,lt.y);	pv++;

	pop	esi
	mov	DWORD PTR [ebx], eax
	pop	ebx

; 269  : }

	add	esp, 12					; 0000000cH
	ret	0
?FillSprite@@YAXAAPAULIT@FVF@@ABU?$_vector3@M@@1ABU?$_vector2@M@@2MMIM@Z ENDP ; FillSprite
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector2.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector2.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_bitwise.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_bitwise.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_bitwise.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xr_resource.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xr_resource.h
; File I:\Vitalya\mine\NSProjectX\xrEngine\R_Backend_Runtime.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrEngine\R_Backend_Runtime.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrEngine\R_Backend_Runtime.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrEngine\R_Backend_Runtime.h
; File I:\Vitalya\mine\NSProjectX\xrEngine\r_constants_cache.h
; File I:\Vitalya\mine\NSProjectX\xrEngine\R_Backend_Runtime.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
; File I:\Vitalya\mine\NSProjectX\xrEngine\R_Backend_Runtime.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp
_TEXT	SEGMENT
$T1 = -232						; size = 4
_M$2$ = -232						; size = 4
_i$1$ = -232						; size = 4
tv3803 = -232						; size = 4
$T2 = -232						; size = 4
__sb$3 = -232						; size = 4
$T4 = -228						; size = 4
tv3895 = -228						; size = 4
__sp$5 = -228						; size = 4
__sb$1$ = -224						; size = 4
tv3899 = -224						; size = 4
$T6 = -224						; size = 4
__sh$7 = -224						; size = 4
_a$8 = -224						; size = 4
$T9 = -220						; size = 4
tv3897 = -220						; size = 4
__cb$10 = -220						; size = 4
_r_y$11 = -216						; size = 4
_r_x$12 = -212						; size = 4
_pv$13 = -208						; size = 4
tv3916 = -204						; size = 4
tv3816 = -204						; size = 4
__cp$14 = -204						; size = 4
__cp$1$ = -200						; size = 4
tv4286 = -200						; size = 4
$T15 = -200						; size = 4
__ch$16 = -200						; size = 4
tv3942 = -196						; size = 4
tv3807 = -196						; size = 4
__sc$1$ = -192						; size = 4
tv3936 = -192						; size = 4
__cb$1$ = -188						; size = 4
tv3939 = -188						; size = 4
_M$1$ = -184						; size = 4
__ss$1$ = -184						; size = 4
$T17 = -180						; size = 4
tv4259 = -180						; size = 4
_rb$18 = -176						; size = 8
_lt$19 = -168						; size = 8
_p_cnt$ = -160						; size = 4
__vb$1$ = -156						; size = 4
_pv_start$1$ = -156					; size = 4
_M$20 = -152						; size = 64
_M$21 = -152						; size = 64
_dir$22 = -84						; size = 12
_particles$ = -72					; size = 4
_this$1$ = -68						; size = 4
_dwOffset$ = -64					; size = 4
_p$23 = -60						; size = 12
_p$24 = -48						; size = 12
_d$25 = -36						; size = 12
_p$26 = -24						; size = 12
_p$27 = -12						; size = 12
___formal$ = 8						; size = 4
?Render@CParticleEffect@PS@@UAEXM@Z PROC		; PS::CParticleEffect::Render
; _this$ = ecx

; 271  : {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 236				; 000000ecH
	push	ebx
	push	esi
	mov	esi, ecx
	push	edi
	mov	DWORD PTR _this$1$[esp+248], esi

; 272  : 	u32			dwOffset,dwCount;
; 273  : 	// Get a pointer to the particles in gp memory
; 274  :     PAPI::Particle* particles;
; 275  :     u32 			p_cnt;
; 276  :     ParticleManager()->GetParticles(m_HandleEffect,particles,p_cnt);

	call	DWORD PTR __imp_?ParticleManager@PAPI@@YAPAVIParticleManager@1@XZ
	lea	ecx, DWORD PTR _p_cnt$[esp+248]
	push	ecx
	lea	ecx, DWORD PTR _particles$[esp+252]
	mov	edx, DWORD PTR [eax]
	push	ecx
	push	DWORD PTR [esi+80]
	mov	ecx, eax
	call	DWORD PTR [edx+52]

; 277  :     
; 278  : 	if(p_cnt>0){

	mov	ecx, DWORD PTR _p_cnt$[esp+248]
	test	ecx, ecx
	je	$LN242@Render

; 279  : 		if (m_Def&&m_Def->m_Flags.is(CPEDef::dfSprite)){

	mov	eax, DWORD PTR [esi+72]
	test	eax, eax
	je	$LN242@Render
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h

; 23   : 	IC 	BOOL	is		(const T mask)						const	{ return mask==(flags&mask);			}

	test	BYTE PTR [eax+4], 1
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 279  : 		if (m_Def&&m_Def->m_Flags.is(CPEDef::dfSprite)){

	je	$LN242@Render

; 280  : 			FVF::LIT* pv_start	= (FVF::LIT*)RCache.Vertex.Lock(p_cnt*4*4,geom->vb_stride,dwOffset);

	lea	eax, DWORD PTR _dwOffset$[esp+248]
	shl	ecx, 4
	push	eax
	mov	eax, DWORD PTR [esi+68]
	push	DWORD PTR [eax+20]
	push	ecx
	mov	ecx, DWORD PTR __imp_?RCache@@3VCBackend@@A
	call	DWORD PTR __imp_?Lock@_VertexStream@@QAEPAXIIAAI@Z

; 281  : 			FVF::LIT* pv		= pv_start;
; 282  : 
; 283  : 			for(u32 i = 0; i < p_cnt; i++){

	xor	edi, edi
	mov	DWORD PTR _pv_start$1$[esp+248], eax
	mov	ecx, eax
	mov	DWORD PTR _i$1$[esp+248], edi
	mov	DWORD PTR _pv$13[esp+248], ecx
	cmp	DWORD PTR _p_cnt$[esp+248], edi
	jbe	$LN3@Render

; 280  : 			FVF::LIT* pv_start	= (FVF::LIT*)RCache.Vertex.Lock(p_cnt*4*4,geom->vb_stride,dwOffset);

	movss	xmm6, DWORD PTR __real@3f800000
	xor	ecx, ecx
	movss	xmm5, DWORD PTR __real@3f000000
	mov	DWORD PTR tv4259[esp+248], ecx
$LL4@Render:

; 284  : 				PAPI::Particle &m = particles[i];

	mov	ebx, DWORD PTR _particles$[esp+248]
	add	ebx, ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector2.h

; 15   : 	IC SelfRef set(float _u, float _v)				{ x=T(_u); y=T(_v);				return *this;	}

	mov	DWORD PTR _lt$19[esp+248], 0
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h

; 23   : 	IC 	BOOL	is		(const T mask)						const	{ return mask==(flags&mask);			}

	mov	ecx, DWORD PTR [esi+72]
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector2.h

; 15   : 	IC SelfRef set(float _u, float _v)				{ x=T(_u); y=T(_v);				return *this;	}

	mov	DWORD PTR _lt$19[esp+252], 0
	mov	DWORD PTR _rb$18[esp+248], 1065353216	; 3f800000H
	mov	DWORD PTR _rb$18[esp+252], 1065353216	; 3f800000H
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h

; 23   : 	IC 	BOOL	is		(const T mask)						const	{ return mask==(flags&mask);			}

	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR tv4286[esp+248], ecx
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 289  : 				if (m_Def->m_Flags.is(CPEDef::dfFramed)) m_Def->m_Frame.CalculateTC(iFloor(float(m.frame)/255.f),lt,rb);

	test	eax, 1024				; 00000400H
	je	$LN7@Render
	movzx	eax, WORD PTR [ebx+68]
; File I:\Vitalya\mine\NSProjectX\xrCore\_bitwise.h

; 84   :     int exponent	= (127 + 31) - ((a >> 23) & 0xFF);

	mov	ecx, 158				; 0000009eH

; 85   :     int r			= (((u32)(a) << 8) | (1U << 31)) >> exponent;
; 86   :     exponent		+= 31-127;
; 87   :     {
; 88   :         int imask	=	(!(((( (1<<(exponent)))-1)>>8)&a));

	mov	edx, 1
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 289  : 				if (m_Def->m_Flags.is(CPEDef::dfFramed)) m_Def->m_Frame.CalculateTC(iFloor(float(m.frame)/255.f),lt,rb);

	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3b808081
; File I:\Vitalya\mine\NSProjectX\xrCore\_bitwise.h

; 83   :     int a			= *(const int*)(&x);

	movss	DWORD PTR _a$8[esp+248], xmm0

; 84   :     int exponent	= (127 + 31) - ((a >> 23) & 0xFF);

	mov	edi, DWORD PTR _a$8[esp+248]
	mov	eax, edi
	sar	eax, 23					; 00000017H

; 91   :         a			>>=	31;

	mov	esi, edi
	movzx	eax, al
	sub	ecx, eax
	sar	esi, 31					; 0000001fH
	mov	eax, edi
	or	eax, -8388608				; ff800000H
	shl	eax, 8
	shr	eax, cl
	sub	ecx, 96					; 00000060H
	shl	edx, cl
	dec	edx
	sar	edx, 8
	and	edx, edi
	mov	edi, DWORD PTR _i$1$[esp+248]

; 85   :     int r			= (((u32)(a) << 8) | (1U << 31)) >> exponent;
; 86   :     exponent		+= 31-127;
; 87   :     {
; 88   :         int imask	=	(!(((( (1<<(exponent)))-1)>>8)&a));

	neg	edx
	sbb	edx, edx

; 89   :         exponent	-=	(31-127)+32;

	add	ecx, 64					; 00000040H
	inc	edx

; 90   :         exponent	>>=	31;

	sar	ecx, 31					; 0000001fH

; 91   :         a			>>=	31;

	and	edx, esi

; 92   :         r			-=	(imask&a);

	sub	eax, edx

; 93   :         r			&=	exponent;

	and	eax, ecx
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.h

; 48   : 			lt.x       	 	= (frame%m_iFrameDimX)*m_fTexSize.x;

	mov	ecx, DWORD PTR tv4286[esp+248]
; File I:\Vitalya\mine\NSProjectX\xrCore\_bitwise.h

; 93   :         r			&=	exponent;

	xor	eax, esi
	mov	esi, DWORD PTR _this$1$[esp+248]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.h

; 48   : 			lt.x       	 	= (frame%m_iFrameDimX)*m_fTexSize.x;

	cdq
	idiv	DWORD PTR [ecx+36]

; 49   : 			lt.y        	= (frame/m_iFrameDimX)*m_fTexSize.y;

	cvtsi2ss xmm0, eax

; 50   : 			rb.x        	= lt.x+m_fTexSize.x;
; 51   : 			rb.y        	= lt.y+m_fTexSize.y;

	mov	eax, DWORD PTR [ecx+4]
	cvtsi2ss xmm2, edx
	mulss	xmm0, DWORD PTR [ecx+24]
	mulss	xmm2, DWORD PTR [ecx+20]
	movss	DWORD PTR _lt$19[esp+252], xmm0
	addss	xmm0, DWORD PTR [ecx+24]
	movss	DWORD PTR _lt$19[esp+248], xmm2
	addss	xmm2, DWORD PTR [ecx+20]
	movss	DWORD PTR _rb$18[esp+252], xmm0
	movss	DWORD PTR _rb$18[esp+248], xmm2
$LN7@Render:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 290  : 				float r_x		= m.size.x*0.5f;

	movss	xmm3, DWORD PTR [ebx+36]

; 291  : 				float r_y		= m.size.y*0.5f;

	movss	xmm4, DWORD PTR [ebx+40]
	mulss	xmm3, xmm5
	mulss	xmm4, xmm5
	movss	DWORD PTR _r_x$12[esp+248], xmm3
	movss	DWORD PTR _r_y$11[esp+248], xmm4

; 292  : 				if (m_Def->m_Flags.is(CPEDef::dfVelocityScale)){

	test	eax, 262144				; 00040000H
	je	SHORT $LN250@Render
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 167  : 		return x*x + y*y + z*z;

	movss	xmm1, DWORD PTR [ebx+28]
	movss	xmm2, DWORD PTR [ebx+24]
	movss	xmm0, DWORD PTR [ebx+32]
	mulss	xmm1, xmm1
	mulss	xmm2, xmm2
	mulss	xmm0, xmm0
	addss	xmm2, xmm1
	addss	xmm2, xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 764  :             return (float)sqrt(_X);

	sqrtss	xmm1, xmm2
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 294  : 					r_x			+= speed*m_Def->m_VelocityScale.x;

	movaps	xmm0, xmm1

; 295  : 					r_y			+= speed*m_Def->m_VelocityScale.y;

	mulss	xmm1, DWORD PTR [ecx+96]
	mulss	xmm0, DWORD PTR [ecx+92]
	addss	xmm1, xmm4
	addss	xmm0, xmm3
	movss	DWORD PTR _r_y$11[esp+248], xmm1
	movss	DWORD PTR _r_x$12[esp+248], xmm0
$LN250@Render:

; 296  : 				}
; 297  : 				if (m_Def->m_Flags.is(CPEDef::dfAlignToPath)){

	test	eax, 32768				; 00008000H
	je	$LN9@Render
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 167  : 		return x*x + y*y + z*z;

	movss	xmm2, DWORD PTR [ebx+28]
	movss	xmm3, DWORD PTR [ebx+24]
	movaps	xmm0, xmm2
	movss	xmm5, DWORD PTR [ebx+32]
	movaps	xmm1, xmm3
	mulss	xmm0, xmm2
	mulss	xmm1, xmm3
	addss	xmm1, xmm0
	movaps	xmm0, xmm5
	mulss	xmm0, xmm5
	addss	xmm1, xmm0
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 299  :                     if ((speed<EPS_S)&&m_Def->m_Flags.is(CPEDef::dfWorldAlign)){

	movss	xmm0, DWORD PTR __real@33d6bf95
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 764  :             return (float)sqrt(_X);

	sqrtss	xmm1, xmm1
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 299  :                     if ((speed<EPS_S)&&m_Def->m_Flags.is(CPEDef::dfWorldAlign)){

	comiss	xmm0, xmm1
	jbe	$LN249@Render
	test	eax, 1048576				; 00100000H
	je	$LN249@Render

; 302  :                         if (m_RT_Flags.is(flRT_XFORM)){

	test	BYTE PTR [esi+176], 4
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 569  : 	IC	SelfRef	setXYZ	(Tvector& xyz)	{return setHPB(xyz.y,xyz.x,xyz.z);}

	fld	DWORD PTR [ecx+108]
	fld	DWORD PTR [ecx+104]
	fld	DWORD PTR [ecx+112]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 754  :             return (float)sin(_X);

	fld	ST(2)
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 562  :         i.set(_cc-_sp*_ss,	-_cp*_sb,	_sp*_cs+_sc	);	_14_=0;

	mov	DWORD PTR _M$21[esp+260], 0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 754  :             return (float)sin(_X);

	fsin
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 563  :         j.set(_sp*_sc+_cs,	_cp*_cb, 	_ss-_sp*_cc	);	_24_=0;

	mov	DWORD PTR _M$21[esp+276], 0

; 564  :         k.set(-_cp*_sh,    	_sp,		_cp*_ch		);	_34_=0;

	mov	DWORD PTR _M$21[esp+292], 0
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	mov	DWORD PTR _M$21[esp+296], 0
	mov	DWORD PTR _M$21[esp+300], 0
	mov	DWORD PTR _M$21[esp+304], 0
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 565  :         c.set(0,			0,			0			);  _44_=1;

	mov	DWORD PTR _M$21[esp+308], 1065353216	; 3f800000H
	fstp	DWORD PTR __sh$7[esp+248]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 653  :             return (float)cos(_X);

	fxch	ST(2)
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 560  :         _cc = _ch*_cb; _cs = _ch*_sb; _sc = _sh*_cb; _ss = _sh*_sb;

	movss	xmm2, DWORD PTR __sh$7[esp+248]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 653  :             return (float)cos(_X);

	fcos
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 557  :         _sh = _sin(h); _ch = _cos(h);

	fstp	DWORD PTR __ch$16[esp+248]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 754  :             return (float)sin(_X);

	fld	ST(0)
	fsin
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 558  :         _sp = _sin(p); _cp = _cos(p);

	fstp	DWORD PTR __sp$5[esp+248]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 653  :             return (float)cos(_X);

	fcos
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 558  :         _sp = _sin(p); _cp = _cos(p);

	fstp	DWORD PTR __cp$14[esp+248]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 754  :             return (float)sin(_X);

	fld	ST(0)
	fsin
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 559  :         _sb = _sin(b); _cb = _cos(b);

	fstp	DWORD PTR __sb$3[esp+248]

; 560  :         _cc = _ch*_cb; _cs = _ch*_sb; _sc = _sh*_cb; _ss = _sh*_sb;

	movss	xmm6, DWORD PTR __sb$3[esp+248]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 653  :             return (float)cos(_X);

	fcos
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 560  :         _cc = _ch*_cb; _cs = _ch*_sb; _sc = _sh*_cb; _ss = _sh*_sb;

	movaps	xmm7, xmm6
	movaps	xmm1, xmm6
	mulss	xmm1, DWORD PTR __ch$16[esp+248]
	fstp	DWORD PTR __cb$10[esp+248]
	movss	xmm3, DWORD PTR __cb$10[esp+248]
	mulss	xmm3, DWORD PTR __ch$16[esp+248]
	movss	xmm5, DWORD PTR __cb$10[esp+248]
	mulss	xmm7, xmm2

; 562  :         i.set(_cc-_sp*_ss,	-_cp*_sb,	_sp*_cs+_sc	);	_14_=0;

	movaps	xmm4, xmm3
	mulss	xmm5, xmm2
	movaps	xmm0, xmm7
	mulss	xmm0, DWORD PTR __sp$5[esp+248]
	subss	xmm4, xmm0
	movss	xmm0, DWORD PTR __cp$14[esp+248]
	mulss	xmm6, xmm0
	xorps	xmm6, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv3803[esp+248], xmm4
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	movss	DWORD PTR _M$21[esp+248], xmm4
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 562  :         i.set(_cc-_sp*_ss,	-_cp*_sb,	_sp*_cs+_sc	);	_14_=0;

	movaps	xmm4, xmm1
	movss	DWORD PTR __sb$1$[esp+248], xmm6
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	movss	DWORD PTR _M$21[esp+252], xmm6
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 562  :         i.set(_cc-_sp*_ss,	-_cp*_sb,	_sp*_cs+_sc	);	_14_=0;

	movss	xmm6, DWORD PTR __sp$5[esp+248]
	mulss	xmm4, xmm6

; 563  :         j.set(_sp*_sc+_cs,	_cp*_cb, 	_ss-_sp*_cc	);	_24_=0;

	mulss	xmm3, xmm6
	addss	xmm4, xmm5
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	movss	DWORD PTR _M$21[esp+284], xmm6
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 563  :         j.set(_sp*_sc+_cs,	_cp*_cb, 	_ss-_sp*_cc	);	_24_=0;

	mulss	xmm5, xmm6
	subss	xmm7, xmm3
	addss	xmm5, xmm1
	movss	DWORD PTR tv3807[esp+248], xmm4
	movss	xmm1, DWORD PTR __cb$10[esp+248]
	mulss	xmm1, xmm0
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	movss	DWORD PTR _M$21[esp+256], xmm4
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 563  :         j.set(_sp*_sc+_cs,	_cp*_cb, 	_ss-_sp*_cc	);	_24_=0;

	movss	DWORD PTR __sc$1$[esp+248], xmm5
	movss	DWORD PTR __cb$1$[esp+248], xmm1
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	movss	DWORD PTR _M$21[esp+268], xmm1
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 564  :         k.set(-_cp*_sh,    	_sp,		_cp*_ch		);	_34_=0;

	movaps	xmm1, xmm0
	mulss	xmm0, DWORD PTR __ch$16[esp+248]
	mulss	xmm1, xmm2
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	movss	DWORD PTR _M$21[esp+264], xmm5
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 563  :         j.set(_sp*_sc+_cs,	_cp*_cb, 	_ss-_sp*_cc	);	_24_=0;

	movss	DWORD PTR __ss$1$[esp+248], xmm7

; 564  :         k.set(-_cp*_sh,    	_sp,		_cp*_ch		);	_34_=0;

	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	movss	DWORD PTR _M$21[esp+272], xmm7
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 564  :         k.set(-_cp*_sh,    	_sp,		_cp*_ch		);	_34_=0;

	movss	DWORD PTR tv3816[esp+248], xmm1
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	movss	DWORD PTR _M$21[esp+280], xmm1
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 564  :         k.set(-_cp*_sh,    	_sp,		_cp*_ch		);	_34_=0;

	movss	DWORD PTR __cp$1$[esp+248], xmm0
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	movss	DWORD PTR _M$21[esp+288], xmm0
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 302  :                         if (m_RT_Flags.is(flRT_XFORM)){

	je	$LN13@Render
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 499  : 		dest.x = v.x*_11 + v.y*_21 + v.z*_31 + _41;

	movss	xmm3, DWORD PTR [ebx+4]
	movss	xmm4, DWORD PTR [ebx]
	movaps	xmm0, xmm3
	mulss	xmm0, DWORD PTR [esi+120]
	movaps	xmm1, xmm4
	mulss	xmm1, DWORD PTR [esi+104]
	movss	xmm2, DWORD PTR [ebx+8]

; 501  : 		dest.z = v.x*_13 + v.y*_23 + v.z*_33 + _43;

	movss	xmm7, DWORD PTR [esi+128]
	addss	xmm1, xmm0
	movss	xmm5, DWORD PTR [esi+112]
	movaps	xmm0, xmm2
	movss	xmm6, DWORD PTR [esi+144]
	mulss	xmm0, DWORD PTR [esi+136]
	addss	xmm0, DWORD PTR [esi+152]
	addss	xmm1, xmm0
	movaps	xmm0, xmm3
	mulss	xmm0, DWORD PTR [esi+124]
	mulss	xmm3, xmm7
	movss	DWORD PTR _p$23[esp+248], xmm1
	movaps	xmm1, xmm4
	mulss	xmm1, DWORD PTR [esi+108]
	mulss	xmm4, xmm5
	addss	xmm1, xmm0
	movaps	xmm0, xmm2
	mulss	xmm0, DWORD PTR [esi+140]
	mulss	xmm2, xmm6
	addss	xmm4, xmm3
	addss	xmm0, DWORD PTR [esi+156]

; 112  : 		m[0][1] = A.m[0][1] * B.m[0][0] + A.m[1][1] * B.m[0][1] + A.m[2][1] * B.m[0][2];

	movss	xmm3, DWORD PTR [esi+140]

; 501  : 		dest.z = v.x*_13 + v.y*_23 + v.z*_33 + _43;

	addss	xmm2, DWORD PTR [esi+160]
	addss	xmm1, xmm0

; 111  : 		m[0][0] = A.m[0][0] * B.m[0][0] + A.m[1][0] * B.m[0][1] + A.m[2][0] * B.m[0][2];

	movss	xmm0, DWORD PTR [esi+120]
	mulss	xmm0, DWORD PTR __sb$1$[esp+248]

; 501  : 		dest.z = v.x*_13 + v.y*_23 + v.z*_33 + _43;

	addss	xmm4, xmm2

; 112  : 		m[0][1] = A.m[0][1] * B.m[0][0] + A.m[1][1] * B.m[0][1] + A.m[2][1] * B.m[0][2];

	movss	xmm2, DWORD PTR [esi+108]

; 500  : 		dest.y = v.x*_12 + v.y*_22 + v.z*_32 + _42;

	movss	DWORD PTR _p$23[esp+252], xmm1

; 111  : 		m[0][0] = A.m[0][0] * B.m[0][0] + A.m[1][0] * B.m[0][1] + A.m[2][0] * B.m[0][2];

	movss	xmm1, DWORD PTR [esi+104]
	mulss	xmm1, DWORD PTR tv3803[esp+248]

; 501  : 		dest.z = v.x*_13 + v.y*_23 + v.z*_33 + _43;

	movss	DWORD PTR _p$23[esp+256], xmm4

; 112  : 		m[0][1] = A.m[0][1] * B.m[0][0] + A.m[1][1] * B.m[0][1] + A.m[2][1] * B.m[0][2];

	movss	xmm4, DWORD PTR [esi+124]
	addss	xmm1, xmm0
	movss	xmm0, DWORD PTR [esi+136]
	mulss	xmm0, DWORD PTR tv3807[esp+248]
	addss	xmm1, xmm0
	movaps	xmm0, xmm2
	mulss	xmm0, DWORD PTR tv3803[esp+248]
	movss	DWORD PTR _M$21[esp+248], xmm1
	movaps	xmm1, xmm4
	mulss	xmm1, DWORD PTR __sb$1$[esp+248]
	addss	xmm1, xmm0
	movaps	xmm0, xmm3
	mulss	xmm0, DWORD PTR tv3807[esp+248]
	addss	xmm1, xmm0

; 113  : 		m[0][2] = A.m[0][2] * B.m[0][0] + A.m[1][2] * B.m[0][1] + A.m[2][2] * B.m[0][2];

	movaps	xmm0, xmm5
	mulss	xmm0, DWORD PTR tv3803[esp+248]
	movss	DWORD PTR _M$21[esp+252], xmm1
	movaps	xmm1, xmm7
	mulss	xmm1, DWORD PTR __sb$1$[esp+248]
	addss	xmm1, xmm0
	movaps	xmm0, xmm6
	mulss	xmm0, DWORD PTR tv3807[esp+248]
	addss	xmm1, xmm0

; 114  : 		m[0][3] = 0;
; 115  : 
; 116  : 		m[1][0] = A.m[0][0] * B.m[1][0] + A.m[1][0] * B.m[1][1] + A.m[2][0] * B.m[1][2];

	movss	xmm0, DWORD PTR [esi+120]
	mulss	xmm0, DWORD PTR __cb$1$[esp+248]
	movss	DWORD PTR _M$21[esp+256], xmm1
	movss	xmm1, DWORD PTR [esi+104]
	mulss	xmm1, DWORD PTR __sc$1$[esp+248]
	addss	xmm1, xmm0
	movss	xmm0, DWORD PTR [esi+136]
	mulss	xmm0, DWORD PTR __ss$1$[esp+248]
	addss	xmm1, xmm0

; 117  : 		m[1][1] = A.m[0][1] * B.m[1][0] + A.m[1][1] * B.m[1][1] + A.m[2][1] * B.m[1][2];

	movaps	xmm0, xmm4
	mulss	xmm0, DWORD PTR __cb$1$[esp+248]
	movss	DWORD PTR _M$21[esp+264], xmm1
	movaps	xmm1, xmm2
	mulss	xmm1, DWORD PTR __sc$1$[esp+248]
	addss	xmm1, xmm0
	movaps	xmm0, xmm3
	mulss	xmm0, DWORD PTR __ss$1$[esp+248]
	addss	xmm1, xmm0
	movss	DWORD PTR _M$21[esp+268], xmm1
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 306  :                             FillSprite		(pv,M.k,M.i,p,lt,rb,r_x,r_y,m.color,m.rot.x);

	fld	DWORD PTR [ebx+48]
	lea	eax, DWORD PTR _rb$18[esp+248]
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 118  : 		m[1][2] = A.m[0][2] * B.m[1][0] + A.m[1][2] * B.m[1][1] + A.m[2][2] * B.m[1][2];

	movaps	xmm0, xmm7

; 122  : 		m[2][1] = A.m[0][1] * B.m[2][0] + A.m[1][1] * B.m[2][1] + A.m[2][1] * B.m[2][2];

	mulss	xmm4, DWORD PTR __sp$5[esp+248]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 306  :                             FillSprite		(pv,M.k,M.i,p,lt,rb,r_x,r_y,m.color,m.rot.x);

	lea	edx, DWORD PTR _M$21[esp+280]
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 118  : 		m[1][2] = A.m[0][2] * B.m[1][0] + A.m[1][2] * B.m[1][1] + A.m[2][2] * B.m[1][2];

	mulss	xmm0, DWORD PTR __cb$1$[esp+248]
	movaps	xmm1, xmm5
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 306  :                             FillSprite		(pv,M.k,M.i,p,lt,rb,r_x,r_y,m.color,m.rot.x);

	push	ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 118  : 		m[1][2] = A.m[0][2] * B.m[1][0] + A.m[1][2] * B.m[1][1] + A.m[2][2] * B.m[1][2];

	mulss	xmm1, DWORD PTR __sc$1$[esp+252]

; 123  : 		m[2][2] = A.m[0][2] * B.m[2][0] + A.m[1][2] * B.m[2][1] + A.m[2][2] * B.m[2][2];

	mulss	xmm7, DWORD PTR __sp$5[esp+252]
	addss	xmm1, xmm0
	mulss	xmm2, DWORD PTR tv3816[esp+252]
	mulss	xmm5, DWORD PTR tv3816[esp+252]
	movaps	xmm0, xmm6
	mulss	xmm0, DWORD PTR __ss$1$[esp+252]
	addss	xmm4, xmm2
	mulss	xmm3, DWORD PTR __cp$1$[esp+252]
	addss	xmm7, xmm5
	mulss	xmm6, DWORD PTR __cp$1$[esp+252]
	addss	xmm1, xmm0
	movss	xmm0, DWORD PTR [esi+104]
	addss	xmm4, xmm3
	mulss	xmm0, DWORD PTR tv3816[esp+252]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 306  :                             FillSprite		(pv,M.k,M.i,p,lt,rb,r_x,r_y,m.color,m.rot.x);

	fstp	DWORD PTR [esp]
	push	DWORD PTR [ebx+60]
	fld	DWORD PTR _r_y$11[esp+256]
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 123  : 		m[2][2] = A.m[0][2] * B.m[2][0] + A.m[1][2] * B.m[2][1] + A.m[2][2] * B.m[2][2];

	addss	xmm7, xmm6
	movss	DWORD PTR _M$21[esp+280], xmm1
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 306  :                             FillSprite		(pv,M.k,M.i,p,lt,rb,r_x,r_y,m.color,m.rot.x);

	sub	esp, 8
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 121  : 		m[2][0] = A.m[0][0] * B.m[2][0] + A.m[1][0] * B.m[2][1] + A.m[2][0] * B.m[2][2];

	movss	xmm1, DWORD PTR [esi+120]
	mulss	xmm1, DWORD PTR __sp$5[esp+264]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 306  :                             FillSprite		(pv,M.k,M.i,p,lt,rb,r_x,r_y,m.color,m.rot.x);

	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _r_x$12[esp+264]
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 121  : 		m[2][0] = A.m[0][0] * B.m[2][0] + A.m[1][0] * B.m[2][1] + A.m[2][0] * B.m[2][2];

	addss	xmm1, xmm0

; 122  : 		m[2][1] = A.m[0][1] * B.m[2][0] + A.m[1][1] * B.m[2][1] + A.m[2][1] * B.m[2][2];

	movss	DWORD PTR _M$21[esp+300], xmm4
	movss	xmm0, DWORD PTR [esi+136]
	mulss	xmm0, DWORD PTR __cp$1$[esp+264]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 306  :                             FillSprite		(pv,M.k,M.i,p,lt,rb,r_x,r_y,m.color,m.rot.x);

	fstp	DWORD PTR [esp]
	push	eax
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 121  : 		m[2][0] = A.m[0][0] * B.m[2][0] + A.m[1][0] * B.m[2][1] + A.m[2][0] * B.m[2][2];

	addss	xmm1, xmm0

; 123  : 		m[2][2] = A.m[0][2] * B.m[2][0] + A.m[1][2] * B.m[2][1] + A.m[2][2] * B.m[2][2];

	movss	DWORD PTR _M$21[esp+308], xmm7

; 126  : 		m[3][0] = A.m[0][0] * B.m[3][0] + A.m[1][0] * B.m[3][1] + A.m[2][0] * B.m[3][2] + A.m[3][0];

	movss	xmm0, DWORD PTR [esi+152]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 306  :                             FillSprite		(pv,M.k,M.i,p,lt,rb,r_x,r_y,m.color,m.rot.x);

	lea	eax, DWORD PTR _lt$19[esp+268]
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 126  : 		m[3][0] = A.m[0][0] * B.m[3][0] + A.m[1][0] * B.m[3][1] + A.m[2][0] * B.m[3][2] + A.m[3][0];

	movss	DWORD PTR _M$21[esp+316], xmm0

; 127  : 		m[3][1] = A.m[0][1] * B.m[3][0] + A.m[1][1] * B.m[3][1] + A.m[2][1] * B.m[3][2] + A.m[3][1];

	movss	xmm0, DWORD PTR [esi+156]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 306  :                             FillSprite		(pv,M.k,M.i,p,lt,rb,r_x,r_y,m.color,m.rot.x);

	push	eax
	lea	eax, DWORD PTR _p$23[esp+272]
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 127  : 		m[3][1] = A.m[0][1] * B.m[3][0] + A.m[1][1] * B.m[3][1] + A.m[2][1] * B.m[3][2] + A.m[3][1];

	movss	DWORD PTR _M$21[esp+324], xmm0

; 128  : 		m[3][2] = A.m[0][2] * B.m[3][0] + A.m[1][2] * B.m[3][1] + A.m[2][2] * B.m[3][2] + A.m[3][2];

	movss	xmm0, DWORD PTR [esi+160]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 306  :                             FillSprite		(pv,M.k,M.i,p,lt,rb,r_x,r_y,m.color,m.rot.x);

	push	eax
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 121  : 		m[2][0] = A.m[0][0] * B.m[2][0] + A.m[1][0] * B.m[2][1] + A.m[2][0] * B.m[2][2];

	movss	DWORD PTR _M$21[esp+308], xmm1
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 306  :                             FillSprite		(pv,M.k,M.i,p,lt,rb,r_x,r_y,m.color,m.rot.x);

	lea	eax, DWORD PTR _M$21[esp+276]
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 128  : 		m[3][2] = A.m[0][2] * B.m[3][0] + A.m[1][2] * B.m[3][1] + A.m[2][2] * B.m[3][2] + A.m[3][2];

	movss	DWORD PTR _M$21[esp+332], xmm0
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 307  :                         }else{

	jmp	$LN252@Render
$LN13@Render:

; 308  :                             FillSprite		(pv,M.k,M.i,m.pos,lt,rb,r_x,r_y,m.color,m.rot.x);

	fld	DWORD PTR [ebx+48]
	lea	eax, DWORD PTR _rb$18[esp+248]
	push	ecx
	fstp	DWORD PTR [esp]
	push	DWORD PTR [ebx+60]
	fld	DWORD PTR _r_y$11[esp+256]
	lea	edx, DWORD PTR _M$21[esp+288]
	sub	esp, 8
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _r_x$12[esp+264]
	fstp	DWORD PTR [esp]
	push	eax
	lea	eax, DWORD PTR _lt$19[esp+268]
	push	eax
	lea	eax, DWORD PTR _M$21[esp+272]

; 309  :                         }

	jmp	$LN253@Render
$LN249@Render:

; 310  :                     }else if ((speed>=EPS_S)&&m_Def->m_Flags.is(CPEDef::dfFaceAlign)){

	comiss	xmm1, xmm0
	jb	$LN20@Render
	test	eax, 2097152				; 00200000H
	je	$LN15@Render
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 47   : 	ICF SelfRef	div(const Self &a, T s)					{ x=a.x/s;  y=a.y/s;	z=a.z/s;		return *this;	};

	movaps	xmm4, xmm6
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 72   : 		_11=1; _12=0; _13=0; _14=0;

	mov	DWORD PTR _M$20[esp+260], 0
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 47   : 	ICF SelfRef	div(const Self &a, T s)					{ x=a.x/s;  y=a.y/s;	z=a.z/s;		return *this;	};

	divss	xmm4, xmm1
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 73   : 		_21=0; _22=1; _23=0; _24=0;

	mov	DWORD PTR _M$20[esp+276], 0

; 74   : 		_31=0; _32=0; _33=1; _34=0;

	mov	DWORD PTR _M$20[esp+292], 0

; 75   : 		_41=0; _42=0; _43=0; _44=1;

	mov	DWORD PTR _M$20[esp+296], 0
	mov	DWORD PTR _M$20[esp+300], 0
	mov	DWORD PTR _M$20[esp+304], 0
	mov	DWORD PTR _M$20[esp+308], 1065353216	; 3f800000H
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 47   : 	ICF SelfRef	div(const Self &a, T s)					{ x=a.x/s;  y=a.y/s;	z=a.z/s;		return *this;	};

	movaps	xmm7, xmm4
	movaps	xmm1, xmm4
	mulss	xmm7, xmm2
	mulss	xmm1, xmm3
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 313  :                         M.j.set 			(0,1,0);	if (_abs(M.j.dotproduct(M.k))>.99f)  M.j.set(0,0,1);

	movss	xmm3, DWORD PTR __real@3f800000
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 676  :             return (float)fabs(_X);

	movaps	xmm0, xmm7
	andps	xmm0, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 313  :                         M.j.set 			(0,1,0);	if (_abs(M.j.dotproduct(M.k))>.99f)  M.j.set(0,0,1);

	comiss	xmm0, DWORD PTR __real@3f7d70a4
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 47   : 	ICF SelfRef	div(const Self &a, T s)					{ x=a.x/s;  y=a.y/s;	z=a.z/s;		return *this;	};

	mulss	xmm4, xmm5

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	movaps	xmm5, xmm6

; 47   : 	ICF SelfRef	div(const Self &a, T s)					{ x=a.x/s;  y=a.y/s;	z=a.z/s;		return *this;	};

	movss	DWORD PTR tv3895[esp+248], xmm1

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	xorps	xmm6, xmm6

; 47   : 	ICF SelfRef	div(const Self &a, T s)					{ x=a.x/s;  y=a.y/s;	z=a.z/s;		return *this;	};

	movss	DWORD PTR _M$20[esp+280], xmm1
	movss	DWORD PTR tv3897[esp+248], xmm7
	movss	DWORD PTR _M$20[esp+284], xmm7
	movss	DWORD PTR tv3899[esp+248], xmm4
	movss	DWORD PTR _M$20[esp+288], xmm4
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 313  :                         M.j.set 			(0,1,0);	if (_abs(M.j.dotproduct(M.k))>.99f)  M.j.set(0,0,1);

	jbe	SHORT $LN17@Render
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	movaps	xmm5, xmm6
	movaps	xmm6, xmm3
$LN17@Render:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 316  :                         if (m_RT_Flags.is(flRT_XFORM)){

	test	BYTE PTR [esi+176], 4
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 273  : 		x = v1.y  * v2.z  - v1.z  * v2.y ;

	movaps	xmm2, xmm5

; 275  : 		z = v1.x  * v2.y  - v1.y  * v2.x ;

	mulss	xmm5, xmm1
	movaps	xmm0, xmm6
	mulss	xmm0, xmm7
	xorps	xmm5, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm6, xmm1
	mulss	xmm2, xmm4
	movaps	xmm1, xmm6
	mulss	xmm1, xmm6
	subss	xmm2, xmm0

; 190  : 		T mag=_sqrt(T(1)/(x*x + y*y + z*z));

	movaps	xmm0, xmm2
	mulss	xmm0, xmm2
	addss	xmm1, xmm0
	movaps	xmm0, xmm5
	mulss	xmm0, xmm5
	addss	xmm1, xmm0
	divss	xmm3, xmm1
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 764  :             return (float)sqrt(_X);

	sqrtss	xmm0, xmm3
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 191  : 		x *= mag;

	mulss	xmm6, xmm0
	movaps	xmm1, xmm0

; 192  : 		y *= mag;

	mulss	xmm5, xmm0
	mulss	xmm1, xmm2

; 273  : 		x = v1.y  * v2.z  - v1.z  * v2.y ;

	movaps	xmm0, xmm6
	mulss	xmm0, xmm4

; 193  : 		z *= mag;

	movaps	xmm2, xmm5

; 273  : 		x = v1.y  * v2.z  - v1.z  * v2.y ;

	movaps	xmm3, xmm1

; 193  : 		z *= mag;

	mulss	xmm2, xmm7

; 273  : 		x = v1.y  * v2.z  - v1.z  * v2.y ;

	mulss	xmm3, xmm4

; 274  : 		y = v1.z  * v2.x  - v1.x  * v2.z ;

	movaps	xmm4, xmm6
	mulss	xmm4, DWORD PTR tv3895[esp+248]
	subss	xmm2, xmm0
	movaps	xmm0, xmm5

; 190  : 		T mag=_sqrt(T(1)/(x*x + y*y + z*z));

	movss	DWORD PTR tv3916[esp+248], xmm1

; 274  : 		y = v1.z  * v2.x  - v1.x  * v2.z ;

	mulss	xmm0, DWORD PTR tv3895[esp+248]

; 191  : 		x *= mag;

	movss	DWORD PTR _M$20[esp+248], xmm1
	movss	DWORD PTR _M$2$[esp+248], xmm6

; 274  : 		y = v1.z  * v2.x  - v1.x  * v2.z ;

	subss	xmm3, xmm0

; 192  : 		y *= mag;

	movss	DWORD PTR _M$20[esp+252], xmm6

; 275  : 		z = v1.x  * v2.y  - v1.y  * v2.x ;

	movaps	xmm0, xmm1

; 192  : 		y *= mag;

	movss	DWORD PTR _M$1$[esp+248], xmm5

; 275  : 		z = v1.x  * v2.y  - v1.y  * v2.x ;

	mulss	xmm0, xmm7

; 193  : 		z *= mag;

	movss	DWORD PTR _M$20[esp+256], xmm5

; 275  : 		z = v1.x  * v2.y  - v1.y  * v2.x ;

	movaps	xmm1, xmm3
	subss	xmm4, xmm0
	mulss	xmm1, xmm3

; 190  : 		T mag=_sqrt(T(1)/(x*x + y*y + z*z));

	movaps	xmm0, xmm2
	mulss	xmm0, xmm2
	addss	xmm1, xmm0
	movaps	xmm0, xmm4
	mulss	xmm0, xmm4
	addss	xmm1, xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, xmm1
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 764  :             return (float)sqrt(_X);

	sqrtss	xmm0, xmm0
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 190  : 		T mag=_sqrt(T(1)/(x*x + y*y + z*z));

	movaps	xmm1, xmm0
	mulss	xmm1, xmm2
	movss	DWORD PTR tv3936[esp+248], xmm1

; 191  : 		x *= mag;

	movss	DWORD PTR _M$20[esp+264], xmm1
	movaps	xmm1, xmm0
	mulss	xmm1, xmm3

; 192  : 		y *= mag;

	mulss	xmm0, xmm4
	movss	DWORD PTR tv3939[esp+248], xmm1
	movss	DWORD PTR _M$20[esp+268], xmm1
	movss	DWORD PTR tv3942[esp+248], xmm0

; 193  : 		z *= mag;

	movss	DWORD PTR _M$20[esp+272], xmm0
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 316  :                         if (m_RT_Flags.is(flRT_XFORM)){

	je	$LN18@Render
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 499  : 		dest.x = v.x*_11 + v.y*_21 + v.z*_31 + _41;

	movss	xmm4, DWORD PTR [ebx+4]
	movss	xmm3, DWORD PTR [ebx]
	movss	xmm1, DWORD PTR [esi+104]
	movss	xmm0, DWORD PTR [esi+120]
	mulss	xmm0, xmm4
	movss	xmm2, DWORD PTR [ebx+8]
	mulss	xmm1, xmm3

; 501  : 		dest.z = v.x*_13 + v.y*_23 + v.z*_33 + _43;

	movss	xmm7, DWORD PTR [esi+128]
	movss	xmm5, DWORD PTR [esi+112]
	addss	xmm1, xmm0
	movss	xmm6, DWORD PTR [esi+144]
	movss	xmm0, DWORD PTR [esi+136]
	mulss	xmm0, xmm2
	addss	xmm0, DWORD PTR [esi+152]
	addss	xmm1, xmm0
	movss	xmm0, DWORD PTR [esi+124]
	mulss	xmm0, xmm4
	movss	DWORD PTR _p$24[esp+248], xmm1
	movss	xmm1, DWORD PTR [esi+108]
	mulss	xmm1, xmm3
	addss	xmm1, xmm0
	movss	xmm0, DWORD PTR [esi+140]
	mulss	xmm0, xmm2
	addss	xmm0, DWORD PTR [esi+156]
	addss	xmm1, xmm0
	movaps	xmm0, xmm7
	mulss	xmm0, xmm4

; 112  : 		m[0][1] = A.m[0][1] * B.m[0][0] + A.m[1][1] * B.m[0][1] + A.m[2][1] * B.m[0][2];

	movss	xmm4, DWORD PTR [esi+140]

; 500  : 		dest.y = v.x*_12 + v.y*_22 + v.z*_32 + _42;

	movss	DWORD PTR _p$24[esp+252], xmm1

; 501  : 		dest.z = v.x*_13 + v.y*_23 + v.z*_33 + _43;

	movaps	xmm1, xmm5
	mulss	xmm1, xmm3

; 112  : 		m[0][1] = A.m[0][1] * B.m[0][0] + A.m[1][1] * B.m[0][1] + A.m[2][1] * B.m[0][2];

	movss	xmm3, DWORD PTR [esi+108]

; 501  : 		dest.z = v.x*_13 + v.y*_23 + v.z*_33 + _43;

	addss	xmm1, xmm0
	movaps	xmm0, xmm6
	mulss	xmm0, xmm2
	movss	xmm2, DWORD PTR [esi+160]
	addss	xmm0, xmm2
	addss	xmm1, xmm0

; 111  : 		m[0][0] = A.m[0][0] * B.m[0][0] + A.m[1][0] * B.m[0][1] + A.m[2][0] * B.m[0][2];

	movss	xmm0, DWORD PTR [esi+120]
	mulss	xmm0, DWORD PTR _M$2$[esp+248]

; 501  : 		dest.z = v.x*_13 + v.y*_23 + v.z*_33 + _43;

	movss	DWORD PTR _p$24[esp+256], xmm1

; 111  : 		m[0][0] = A.m[0][0] * B.m[0][0] + A.m[1][0] * B.m[0][1] + A.m[2][0] * B.m[0][2];

	movss	xmm1, DWORD PTR [esi+104]
	mulss	xmm1, DWORD PTR tv3916[esp+248]
	addss	xmm1, xmm0
	movss	xmm0, DWORD PTR [esi+136]
	mulss	xmm0, DWORD PTR _M$1$[esp+248]
	addss	xmm1, xmm0

; 112  : 		m[0][1] = A.m[0][1] * B.m[0][0] + A.m[1][1] * B.m[0][1] + A.m[2][1] * B.m[0][2];

	movaps	xmm0, xmm3
	mulss	xmm0, DWORD PTR tv3916[esp+248]
	movss	DWORD PTR _M$20[esp+248], xmm1
	movss	xmm1, DWORD PTR [esi+124]
	mulss	xmm1, DWORD PTR _M$2$[esp+248]
	addss	xmm1, xmm0
	movaps	xmm0, xmm4
	mulss	xmm0, DWORD PTR _M$1$[esp+248]
	addss	xmm1, xmm0

; 113  : 		m[0][2] = A.m[0][2] * B.m[0][0] + A.m[1][2] * B.m[0][1] + A.m[2][2] * B.m[0][2];

	movaps	xmm0, xmm5
	mulss	xmm0, DWORD PTR tv3916[esp+248]
	movss	DWORD PTR _M$20[esp+252], xmm1
	movaps	xmm1, xmm7
	mulss	xmm1, DWORD PTR _M$2$[esp+248]
	addss	xmm1, xmm0
	movaps	xmm0, xmm6
	mulss	xmm0, DWORD PTR _M$1$[esp+248]
	addss	xmm1, xmm0

; 114  : 		m[0][3] = 0;
; 115  : 
; 116  : 		m[1][0] = A.m[0][0] * B.m[1][0] + A.m[1][0] * B.m[1][1] + A.m[2][0] * B.m[1][2];

	movss	xmm0, DWORD PTR [esi+104]
	mulss	xmm0, DWORD PTR tv3936[esp+248]
	movss	DWORD PTR _M$20[esp+256], xmm1
	movss	xmm1, DWORD PTR [esi+120]
	mulss	xmm1, DWORD PTR tv3939[esp+248]
	addss	xmm1, xmm0
	movss	xmm0, DWORD PTR [esi+136]
	mulss	xmm0, DWORD PTR tv3942[esp+248]
	addss	xmm1, xmm0

; 117  : 		m[1][1] = A.m[0][1] * B.m[1][0] + A.m[1][1] * B.m[1][1] + A.m[2][1] * B.m[1][2];

	movaps	xmm0, xmm3
	mulss	xmm0, DWORD PTR tv3936[esp+248]
	movss	DWORD PTR _M$20[esp+264], xmm1
	movss	xmm1, DWORD PTR [esi+124]
	mulss	xmm1, DWORD PTR tv3939[esp+248]
	addss	xmm1, xmm0
	movaps	xmm0, xmm4
	mulss	xmm0, DWORD PTR tv3942[esp+248]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 320  :                             FillSprite		(pv,M.j,M.i,p,lt,rb,r_x,r_y,m.color,m.rot.x);

	lea	eax, DWORD PTR _rb$18[esp+248]
	lea	edx, DWORD PTR _M$20[esp+264]
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 122  : 		m[2][1] = A.m[0][1] * B.m[2][0] + A.m[1][1] * B.m[2][1] + A.m[2][1] * B.m[2][2];

	mulss	xmm3, DWORD PTR tv3895[esp+248]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 320  :                             FillSprite		(pv,M.j,M.i,p,lt,rb,r_x,r_y,m.color,m.rot.x);

	push	ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 117  : 		m[1][1] = A.m[0][1] * B.m[1][0] + A.m[1][1] * B.m[1][1] + A.m[2][1] * B.m[1][2];

	addss	xmm1, xmm0
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 320  :                             FillSprite		(pv,M.j,M.i,p,lt,rb,r_x,r_y,m.color,m.rot.x);

	fld	DWORD PTR [ebx+48]
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 118  : 		m[1][2] = A.m[0][2] * B.m[1][0] + A.m[1][2] * B.m[1][1] + A.m[2][2] * B.m[1][2];

	movaps	xmm0, xmm5

; 122  : 		m[2][1] = A.m[0][1] * B.m[2][0] + A.m[1][1] * B.m[2][1] + A.m[2][1] * B.m[2][2];

	mulss	xmm4, DWORD PTR tv3899[esp+252]
	mulss	xmm0, DWORD PTR tv3936[esp+252]
	movss	DWORD PTR _M$20[esp+272], xmm1
	movaps	xmm1, xmm7
	mulss	xmm1, DWORD PTR tv3939[esp+252]

; 123  : 		m[2][2] = A.m[0][2] * B.m[2][0] + A.m[1][2] * B.m[2][1] + A.m[2][2] * B.m[2][2];

	mulss	xmm7, DWORD PTR tv3897[esp+252]
	addss	xmm1, xmm0
	mulss	xmm5, DWORD PTR tv3895[esp+252]
	movaps	xmm0, xmm6

; 128  : 		m[3][2] = A.m[0][2] * B.m[3][0] + A.m[1][2] * B.m[3][1] + A.m[2][2] * B.m[3][2] + A.m[3][2];

	movss	DWORD PTR _M$20[esp+308], xmm2
	mulss	xmm0, DWORD PTR tv3942[esp+252]
	mulss	xmm6, DWORD PTR tv3899[esp+252]
	addss	xmm7, xmm5
	addss	xmm1, xmm0
	movss	xmm0, DWORD PTR [esi+104]
	mulss	xmm0, DWORD PTR tv3895[esp+252]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 320  :                             FillSprite		(pv,M.j,M.i,p,lt,rb,r_x,r_y,m.color,m.rot.x);

	fstp	DWORD PTR [esp]
	push	DWORD PTR [ebx+60]
	fld	DWORD PTR _r_y$11[esp+256]
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 123  : 		m[2][2] = A.m[0][2] * B.m[2][0] + A.m[1][2] * B.m[2][1] + A.m[2][2] * B.m[2][2];

	addss	xmm7, xmm6
	movss	DWORD PTR _M$20[esp+280], xmm1
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 320  :                             FillSprite		(pv,M.j,M.i,p,lt,rb,r_x,r_y,m.color,m.rot.x);

	sub	esp, 8
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 121  : 		m[2][0] = A.m[0][0] * B.m[2][0] + A.m[1][0] * B.m[2][1] + A.m[2][0] * B.m[2][2];

	movss	xmm1, DWORD PTR [esi+120]
	mulss	xmm1, DWORD PTR tv3897[esp+264]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 320  :                             FillSprite		(pv,M.j,M.i,p,lt,rb,r_x,r_y,m.color,m.rot.x);

	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _r_x$12[esp+264]
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 121  : 		m[2][0] = A.m[0][0] * B.m[2][0] + A.m[1][0] * B.m[2][1] + A.m[2][0] * B.m[2][2];

	addss	xmm1, xmm0

; 123  : 		m[2][2] = A.m[0][2] * B.m[2][0] + A.m[1][2] * B.m[2][1] + A.m[2][2] * B.m[2][2];

	movss	DWORD PTR _M$20[esp+304], xmm7
	movss	xmm0, DWORD PTR [esi+136]
	mulss	xmm0, DWORD PTR tv3899[esp+264]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 320  :                             FillSprite		(pv,M.j,M.i,p,lt,rb,r_x,r_y,m.color,m.rot.x);

	fstp	DWORD PTR [esp]
	push	eax
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 121  : 		m[2][0] = A.m[0][0] * B.m[2][0] + A.m[1][0] * B.m[2][1] + A.m[2][0] * B.m[2][2];

	addss	xmm1, xmm0

; 122  : 		m[2][1] = A.m[0][1] * B.m[2][0] + A.m[1][1] * B.m[2][1] + A.m[2][1] * B.m[2][2];

	movss	xmm0, DWORD PTR [esi+124]
	mulss	xmm0, DWORD PTR tv3897[esp+268]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 320  :                             FillSprite		(pv,M.j,M.i,p,lt,rb,r_x,r_y,m.color,m.rot.x);

	lea	eax, DWORD PTR _lt$19[esp+268]
	push	eax
	lea	eax, DWORD PTR _p$24[esp+272]
	push	eax
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 122  : 		m[2][1] = A.m[0][1] * B.m[2][0] + A.m[1][1] * B.m[2][1] + A.m[2][1] * B.m[2][2];

	addss	xmm0, xmm3
	movss	DWORD PTR _M$20[esp+308], xmm1
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 320  :                             FillSprite		(pv,M.j,M.i,p,lt,rb,r_x,r_y,m.color,m.rot.x);

	lea	eax, DWORD PTR _M$20[esp+276]
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 122  : 		m[2][1] = A.m[0][1] * B.m[2][0] + A.m[1][1] * B.m[2][1] + A.m[2][1] * B.m[2][2];

	addss	xmm0, xmm4
	movss	DWORD PTR _M$20[esp+312], xmm0

; 126  : 		m[3][0] = A.m[0][0] * B.m[3][0] + A.m[1][0] * B.m[3][1] + A.m[2][0] * B.m[3][2] + A.m[3][0];

	movss	xmm0, DWORD PTR [esi+152]
	movss	DWORD PTR _M$20[esp+324], xmm0

; 127  : 		m[3][1] = A.m[0][1] * B.m[3][0] + A.m[1][1] * B.m[3][1] + A.m[2][1] * B.m[3][2] + A.m[3][1];

	movss	xmm0, DWORD PTR [esi+156]
	movss	DWORD PTR _M$20[esp+328], xmm0
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 321  :                         }else{

	jmp	$LN252@Render
$LN18@Render:

; 322  :                             FillSprite		(pv,M.j,M.i,m.pos,lt,rb,r_x,r_y,m.color,m.rot.x);

	fld	DWORD PTR [ebx+48]
	lea	eax, DWORD PTR _rb$18[esp+248]
	push	ecx
	fstp	DWORD PTR [esp]
	push	DWORD PTR [ebx+60]
	fld	DWORD PTR _r_y$11[esp+256]
	lea	edx, DWORD PTR _M$20[esp+272]
	sub	esp, 8
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _r_x$12[esp+264]
	fstp	DWORD PTR [esp]
	push	eax
	lea	eax, DWORD PTR _lt$19[esp+268]
	push	eax
	lea	eax, DWORD PTR _M$20[esp+272]

; 323  :                         }
; 324  :                     }else{

	jmp	$LN253@Render
$LN15@Render:
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 47   : 	ICF SelfRef	div(const Self &a, T s)					{ x=a.x/s;  y=a.y/s;	z=a.z/s;		return *this;	};

	movaps	xmm0, xmm6
	divss	xmm0, xmm1
	movaps	xmm1, xmm0
	mulss	xmm1, xmm3
	movss	DWORD PTR $T4[esp+248], xmm1
	movss	DWORD PTR _dir$22[esp+248], xmm1
	movaps	xmm1, xmm0
	mulss	xmm1, xmm2
	mulss	xmm0, xmm5
	movss	DWORD PTR $T9[esp+248], xmm1
	movss	DWORD PTR _dir$22[esp+252], xmm1
	movss	DWORD PTR $T1[esp+248], xmm0
	movss	DWORD PTR _dir$22[esp+256], xmm0
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 326  :                         if (speed>=EPS_S)	dir.div	(m.vel,speed);

	jmp	SHORT $LN21@Render
$LN20@Render:

; 327  :                         else				dir.setHP(-m_Def->m_APDefaultRotation.y,-m_Def->m_APDefaultRotation.x);

	fld	DWORD PTR [ecx+108]
	fchs
	fld	DWORD PTR [ecx+104]
	fchs
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 653  :             return (float)cos(_X);

	fld	ST(0)
	fcos

; 754  :             return (float)sin(_X);

	fld	ST(2)
	fsin
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 332  :         x = -_cp*_sh;

	fmul	ST(0), ST(1)
	fchs
	fst	DWORD PTR _dir$22[esp+248]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 754  :             return (float)sin(_X);

	fxch	ST(2)
	fsin
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 333  :         y = _sp;

	fst	DWORD PTR _dir$22[esp+252]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 653  :             return (float)cos(_X);

	fxch	ST(3)
	fcos
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 334  :         z = _cp*_ch;

	fmulp	ST(1), ST(0)
	fst	DWORD PTR _dir$22[esp+256]
	fstp	DWORD PTR $T2[esp+248]
	movss	xmm0, DWORD PTR $T2[esp+248]
	fstp	DWORD PTR $T15[esp+248]
	movss	DWORD PTR $T1[esp+248], xmm0
	fstp	DWORD PTR $T6[esp+248]
	movss	xmm0, DWORD PTR $T6[esp+248]
	movss	DWORD PTR $T9[esp+248], xmm0
	movss	xmm0, DWORD PTR $T15[esp+248]
	movss	DWORD PTR $T4[esp+248], xmm0
$LN21@Render:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 328  :                         if (m_RT_Flags.is(flRT_XFORM)){

	test	BYTE PTR [esi+176], 4
	je	$LN22@Render
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 499  : 		dest.x = v.x*_11 + v.y*_21 + v.z*_31 + _41;

	movss	xmm2, DWORD PTR [ebx+4]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 332  :                             FillSprite	(pv,p,d,lt,rb,r_x,r_y,m.color,m.rot.x);

	lea	eax, DWORD PTR _rb$18[esp+248]
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 499  : 		dest.x = v.x*_11 + v.y*_21 + v.z*_31 + _41;

	movss	xmm1, DWORD PTR [ebx]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 332  :                             FillSprite	(pv,p,d,lt,rb,r_x,r_y,m.color,m.rot.x);

	lea	edx, DWORD PTR _p$26[esp+248]
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 499  : 		dest.x = v.x*_11 + v.y*_21 + v.z*_31 + _41;

	mulss	xmm1, DWORD PTR [esi+104]
	movaps	xmm0, xmm2
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 332  :                             FillSprite	(pv,p,d,lt,rb,r_x,r_y,m.color,m.rot.x);

	push	ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 499  : 		dest.x = v.x*_11 + v.y*_21 + v.z*_31 + _41;

	mulss	xmm0, DWORD PTR [esi+120]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 332  :                             FillSprite	(pv,p,d,lt,rb,r_x,r_y,m.color,m.rot.x);

	lea	ecx, DWORD PTR _pv$13[esp+252]
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 499  : 		dest.x = v.x*_11 + v.y*_21 + v.z*_31 + _41;

	movss	xmm6, DWORD PTR [ebx+8]

; 500  : 		dest.y = v.x*_12 + v.y*_22 + v.z*_32 + _42;

	movss	xmm7, DWORD PTR [esi+140]
	addss	xmm1, xmm0

; 501  : 		dest.z = v.x*_13 + v.y*_23 + v.z*_33 + _43;

	movss	xmm4, DWORD PTR [esi+128]
	movaps	xmm0, xmm6
	movss	xmm3, DWORD PTR [esi+144]
	mulss	xmm0, DWORD PTR [esi+136]

; 517  : 		dest.y = v.x*_12 + v.y*_22 + v.z*_32;

	movss	xmm5, DWORD PTR $T9[esp+252]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 332  :                             FillSprite	(pv,p,d,lt,rb,r_x,r_y,m.color,m.rot.x);

	fld	DWORD PTR [ebx+48]
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 499  : 		dest.x = v.x*_11 + v.y*_21 + v.z*_31 + _41;

	addss	xmm0, DWORD PTR [esi+152]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 332  :                             FillSprite	(pv,p,d,lt,rb,r_x,r_y,m.color,m.rot.x);

	fstp	DWORD PTR [esp]
	push	DWORD PTR [ebx+60]
	fld	DWORD PTR _r_y$11[esp+256]
	sub	esp, 8
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 499  : 		dest.x = v.x*_11 + v.y*_21 + v.z*_31 + _41;

	addss	xmm1, xmm0

; 500  : 		dest.y = v.x*_12 + v.y*_22 + v.z*_32 + _42;

	movaps	xmm0, xmm2
	mulss	xmm0, DWORD PTR [esi+124]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 332  :                             FillSprite	(pv,p,d,lt,rb,r_x,r_y,m.color,m.rot.x);

	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _r_x$12[esp+264]
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 499  : 		dest.x = v.x*_11 + v.y*_21 + v.z*_31 + _41;

	movss	DWORD PTR _p$26[esp+264], xmm1

; 500  : 		dest.y = v.x*_12 + v.y*_22 + v.z*_32 + _42;

	movss	xmm1, DWORD PTR [ebx]
	mulss	xmm1, DWORD PTR [esi+108]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 332  :                             FillSprite	(pv,p,d,lt,rb,r_x,r_y,m.color,m.rot.x);

	fstp	DWORD PTR [esp]
	push	eax
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 500  : 		dest.y = v.x*_12 + v.y*_22 + v.z*_32 + _42;

	addss	xmm1, xmm0
	movaps	xmm0, xmm6
	mulss	xmm0, xmm7
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 332  :                             FillSprite	(pv,p,d,lt,rb,r_x,r_y,m.color,m.rot.x);

	lea	eax, DWORD PTR _lt$19[esp+268]
	push	eax
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 501  : 		dest.z = v.x*_13 + v.y*_23 + v.z*_33 + _43;

	mulss	xmm6, xmm3
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 332  :                             FillSprite	(pv,p,d,lt,rb,r_x,r_y,m.color,m.rot.x);

	lea	eax, DWORD PTR _d$25[esp+272]
	push	eax
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 500  : 		dest.y = v.x*_12 + v.y*_22 + v.z*_32 + _42;

	addss	xmm0, DWORD PTR [esi+156]

; 501  : 		dest.z = v.x*_13 + v.y*_23 + v.z*_33 + _43;

	addss	xmm6, DWORD PTR [esi+160]
	addss	xmm1, xmm0
	movaps	xmm0, xmm2
	mulss	xmm0, xmm4
	movss	DWORD PTR _p$26[esp+280], xmm1
	movss	xmm1, DWORD PTR [ebx]
	mulss	xmm1, DWORD PTR [esi+112]
	addss	xmm1, xmm0

; 516  : 		dest.x = v.x*_11 + v.y*_21 + v.z*_31;

	movss	xmm0, DWORD PTR $T9[esp+276]
	mulss	xmm0, DWORD PTR [esi+120]

; 501  : 		dest.z = v.x*_13 + v.y*_23 + v.z*_33 + _43;

	addss	xmm1, xmm6

; 516  : 		dest.x = v.x*_11 + v.y*_21 + v.z*_31;

	movss	xmm6, DWORD PTR $T1[esp+276]

; 501  : 		dest.z = v.x*_13 + v.y*_23 + v.z*_33 + _43;

	movss	DWORD PTR _p$26[esp+284], xmm1

; 516  : 		dest.x = v.x*_11 + v.y*_21 + v.z*_31;

	movss	xmm1, DWORD PTR $T4[esp+276]
	mulss	xmm1, DWORD PTR [esi+104]
	addss	xmm1, xmm0
	movaps	xmm0, xmm6
	mulss	xmm0, DWORD PTR [esi+136]
	addss	xmm1, xmm0

; 517  : 		dest.y = v.x*_12 + v.y*_22 + v.z*_32;

	movaps	xmm0, xmm5
	mulss	xmm0, DWORD PTR [esi+124]

; 518  : 		dest.z = v.x*_13 + v.y*_23 + v.z*_33;

	mulss	xmm5, xmm4
	movss	DWORD PTR _d$25[esp+276], xmm1
	movss	xmm1, DWORD PTR $T4[esp+276]
	mulss	xmm1, DWORD PTR [esi+108]
	addss	xmm1, xmm0
	movaps	xmm0, xmm6
	mulss	xmm0, xmm7
	mulss	xmm6, xmm3
	addss	xmm1, xmm0
	movss	xmm0, DWORD PTR $T4[esp+276]
	mulss	xmm0, DWORD PTR [esi+112]
	addss	xmm0, xmm5
	movss	DWORD PTR _d$25[esp+280], xmm1
	addss	xmm0, xmm6
	movss	DWORD PTR _d$25[esp+284], xmm0
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 332  :                             FillSprite	(pv,p,d,lt,rb,r_x,r_y,m.color,m.rot.x);

	call	?FillSprite@@YAXAAPAULIT@FVF@@ABU?$_vector3@M@@1ABU?$_vector2@M@@2MMIM@Z ; FillSprite
	add	esp, 28					; 0000001cH

; 333  :                         }else{

	jmp	$LN2@Render
$LN22@Render:

; 334  :                             FillSprite	(pv,m.pos,dir,lt,rb,r_x,r_y,m.color,m.rot.x);

	fld	DWORD PTR [ebx+48]
	lea	eax, DWORD PTR _rb$18[esp+248]
	push	ecx
	fstp	DWORD PTR [esp]
	push	DWORD PTR [ebx+60]
	fld	DWORD PTR _r_y$11[esp+256]
	lea	ecx, DWORD PTR _pv$13[esp+256]
	sub	esp, 8
	mov	edx, ebx
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _r_x$12[esp+264]
	fstp	DWORD PTR [esp]
	push	eax
	lea	eax, DWORD PTR _lt$19[esp+268]
	push	eax
	lea	eax, DWORD PTR _dir$22[esp+272]
	push	eax
	call	?FillSprite@@YAXAAPAULIT@FVF@@ABU?$_vector3@M@@1ABU?$_vector2@M@@2MMIM@Z ; FillSprite
	add	esp, 28					; 0000001cH

; 335  :                         }
; 336  :                     }
; 337  : 				}else{

	jmp	$LN2@Render
$LN9@Render:

; 338  : 					if (m_RT_Flags.is(flRT_XFORM)){

	test	BYTE PTR [esi+176], 4
	je	$LN24@Render
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 499  : 		dest.x = v.x*_11 + v.y*_21 + v.z*_31 + _41;

	movss	xmm2, DWORD PTR [ebx+4]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 341  : 						FillSprite	(pv,Device.vCameraTop,Device.vCameraRight,p,lt,rb,r_x,r_y,m.color,m.rot.x);

	lea	eax, DWORD PTR _rb$18[esp+248]
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 499  : 		dest.x = v.x*_11 + v.y*_21 + v.z*_31 + _41;

	movss	xmm4, DWORD PTR [ebx]
	movaps	xmm1, xmm2
	mulss	xmm1, DWORD PTR [esi+120]
	movaps	xmm0, xmm4
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 341  : 						FillSprite	(pv,Device.vCameraTop,Device.vCameraRight,p,lt,rb,r_x,r_y,m.color,m.rot.x);

	mov	edx, DWORD PTR __imp_?Device@@3VCRenderDevice@@A
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 499  : 		dest.x = v.x*_11 + v.y*_21 + v.z*_31 + _41;

	mulss	xmm0, DWORD PTR [esi+104]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 341  : 						FillSprite	(pv,Device.vCameraTop,Device.vCameraRight,p,lt,rb,r_x,r_y,m.color,m.rot.x);

	push	ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 499  : 		dest.x = v.x*_11 + v.y*_21 + v.z*_31 + _41;

	movss	xmm3, DWORD PTR [ebx+8]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 341  : 						FillSprite	(pv,Device.vCameraTop,Device.vCameraRight,p,lt,rb,r_x,r_y,m.color,m.rot.x);

	fld	DWORD PTR [ebx+48]
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 499  : 		dest.x = v.x*_11 + v.y*_21 + v.z*_31 + _41;

	addss	xmm1, xmm0
	movaps	xmm0, xmm3
	mulss	xmm0, DWORD PTR [esi+136]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 341  : 						FillSprite	(pv,Device.vCameraTop,Device.vCameraRight,p,lt,rb,r_x,r_y,m.color,m.rot.x);

	fstp	DWORD PTR [esp]
	push	DWORD PTR [ebx+60]
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 499  : 		dest.x = v.x*_11 + v.y*_21 + v.z*_31 + _41;

	addss	xmm0, DWORD PTR [esi+152]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 341  : 						FillSprite	(pv,Device.vCameraTop,Device.vCameraRight,p,lt,rb,r_x,r_y,m.color,m.rot.x);

	fld	DWORD PTR _r_y$11[esp+256]
	sub	esp, 8
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 499  : 		dest.x = v.x*_11 + v.y*_21 + v.z*_31 + _41;

	addss	xmm1, xmm0

; 500  : 		dest.y = v.x*_12 + v.y*_22 + v.z*_32 + _42;

	movaps	xmm0, xmm2
	mulss	xmm0, DWORD PTR [esi+124]

; 501  : 		dest.z = v.x*_13 + v.y*_23 + v.z*_33 + _43;

	mulss	xmm2, DWORD PTR [esi+128]
	movss	DWORD PTR _p$27[esp+264], xmm1
	movaps	xmm1, xmm4
	mulss	xmm1, DWORD PTR [esi+108]
	mulss	xmm4, DWORD PTR [esi+112]
	addss	xmm1, xmm0
	movaps	xmm0, xmm3
	mulss	xmm0, DWORD PTR [esi+140]
	mulss	xmm3, DWORD PTR [esi+144]
	addss	xmm4, xmm2
	addss	xmm0, DWORD PTR [esi+156]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 341  : 						FillSprite	(pv,Device.vCameraTop,Device.vCameraRight,p,lt,rb,r_x,r_y,m.color,m.rot.x);

	fstp	DWORD PTR [esp+4]
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 501  : 		dest.z = v.x*_13 + v.y*_23 + v.z*_33 + _43;

	addss	xmm3, DWORD PTR [esi+160]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 341  : 						FillSprite	(pv,Device.vCameraTop,Device.vCameraRight,p,lt,rb,r_x,r_y,m.color,m.rot.x);

	fld	DWORD PTR _r_x$12[esp+264]
	fstp	DWORD PTR [esp]
	push	eax
	lea	eax, DWORD PTR _lt$19[esp+268]
	push	eax
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 500  : 		dest.y = v.x*_12 + v.y*_22 + v.z*_32 + _42;

	addss	xmm1, xmm0

; 501  : 		dest.z = v.x*_13 + v.y*_23 + v.z*_33 + _43;

	addss	xmm4, xmm3
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 341  : 						FillSprite	(pv,Device.vCameraTop,Device.vCameraRight,p,lt,rb,r_x,r_y,m.color,m.rot.x);

	lea	eax, DWORD PTR _p$27[esp+272]
	push	eax
	lea	eax, DWORD PTR [edx+524]
	add	edx, 512				; 00000200H
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 500  : 		dest.y = v.x*_12 + v.y*_22 + v.z*_32 + _42;

	movss	DWORD PTR _p$27[esp+280], xmm1

; 501  : 		dest.z = v.x*_13 + v.y*_23 + v.z*_33 + _43;

	movss	DWORD PTR _p$27[esp+284], xmm4
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 342  : 					}else{

	jmp	SHORT $LN252@Render
$LN24@Render:

; 343  : 						FillSprite	(pv,Device.vCameraTop,Device.vCameraRight,m.pos,lt,rb,r_x,r_y,m.color,m.rot.x);

	fld	DWORD PTR [ebx+48]
	lea	eax, DWORD PTR _rb$18[esp+248]
	mov	edx, DWORD PTR __imp_?Device@@3VCRenderDevice@@A
	push	ecx
	fstp	DWORD PTR [esp]
	push	DWORD PTR [ebx+60]
	fld	DWORD PTR _r_y$11[esp+256]
	sub	esp, 8
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _r_x$12[esp+264]
	fstp	DWORD PTR [esp]
	push	eax
	lea	eax, DWORD PTR _lt$19[esp+268]
	push	eax
	lea	eax, DWORD PTR [edx+524]
	add	edx, 512				; 00000200H
$LN253@Render:

; 281  : 			FVF::LIT* pv		= pv_start;
; 282  : 
; 283  : 			for(u32 i = 0; i < p_cnt; i++){

	push	ebx
$LN252@Render:
	push	eax
	lea	ecx, DWORD PTR _pv$13[esp+280]
	call	?FillSprite@@YAXAAPAULIT@FVF@@ABU?$_vector3@M@@11ABU?$_vector2@M@@2MMIM@Z ; FillSprite
	add	esp, 32					; 00000020H
$LN2@Render:
	mov	ecx, DWORD PTR tv4259[esp+248]
	inc	edi
	movss	xmm6, DWORD PTR __real@3f800000
	add	ecx, 72					; 00000048H
	movss	xmm5, DWORD PTR __real@3f000000
	mov	DWORD PTR _i$1$[esp+248], edi
	mov	DWORD PTR tv4259[esp+248], ecx
	cmp	edi, DWORD PTR _p_cnt$[esp+248]
	jb	$LL4@Render
	mov	ecx, DWORD PTR _pv$13[esp+248]
	mov	eax, DWORD PTR _pv_start$1$[esp+248]
$LN3@Render:

; 344  : 					}
; 345  : 				}
; 346  : 			}
; 347  : 			dwCount 			= u32(pv-pv_start);

	sub	ecx, eax

; 348  : 			RCache.Vertex.Unlock(dwCount,geom->vb_stride);

	mov	eax, DWORD PTR [esi+68]
	sar	ecx, 3
	imul	ebx, ecx, -1431655765
	mov	ecx, DWORD PTR __imp_?RCache@@3VCBackend@@A
	push	DWORD PTR [eax+20]
	push	ebx
	call	DWORD PTR __imp_?Unlock@_VertexStream@@QAEXII@Z

; 349  : 			if (dwCount)    {

	test	ebx, ebx
	je	$LN242@Render

; 350  : 				RCache.set_xform_world	(Fidentity);

	push	DWORD PTR __imp_?Fidentity@@3U?$_matrix@M@@A
	mov	ecx, DWORD PTR __imp_?RCache@@3VCBackend@@A
	call	DWORD PTR __imp_?set_xform_world@CBackend@@QAEXABU?$_matrix@M@@@Z
; File I:\Vitalya\mine\NSProjectX\xrCore\xr_resource.h

; 70   : 	T &					operator*() const												{	return *p_;	}

	mov	ecx, DWORD PTR [esi+68]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 351  : 				RCache.set_Geometry		(geom);

	mov	edi, DWORD PTR __imp_?RCache@@3VCBackend@@A
; File I:\Vitalya\mine\NSProjectX\xrCore\xr_resource.h

; 70   : 	T &					operator*() const												{	return *p_;	}

	mov	DWORD PTR $T17[esp+248], ecx
; File I:\Vitalya\mine\NSProjectX\xrEngine\R_Backend_Runtime.h

; 224  : 	set_Format(_geom->dcl._get()->dcl);

	mov	eax, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR [eax+8]

; 131  : 	if (decl != _decl)

	cmp	DWORD PTR [edi+592], edx
	je	SHORT $LN219@Render

; 132  : 	{
; 133  : 		PGO(Msg("PGO:v_format:%x", _decl));
; 134  : #ifdef DEBUG
; 135  : 		stat.decl++;
; 136  : #endif
; 137  : 		decl = _decl;

	mov	DWORD PTR [edi+592], edx

; 138  : 		CHK_DX(HW.pDevice->SetVertexDeclaration(decl));

	mov	eax, DWORD PTR __imp_?HW@@3VCHW@@A
	push	edx
	mov	eax, DWORD PTR [eax+8]
	push	eax
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR [ecx+348]
	mov	ecx, DWORD PTR $T17[esp+248]
$LN219@Render:

; 225  : 	set_Vertices(_geom->vb, _geom->vb_stride);

	mov	eax, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR __vb$1$[esp+248], eax

; 172  : 	if ((vb != _vb) || (vb_stride != _vb_stride))

	cmp	DWORD PTR [edi+596], eax
	jne	SHORT $LN223@Render
	cmp	DWORD PTR [edi+604], edx
	je	SHORT $LN222@Render
$LN223@Render:

; 173  : 	{
; 174  : 		PGO(Msg("PGO:VB:%x,%d", _vb, _vb_stride));
; 175  : #ifdef DEBUG
; 176  : 		stat.vb++;
; 177  : #endif
; 178  : 		vb = _vb;

	mov	DWORD PTR [edi+596], eax

; 179  : 		vb_stride = _vb_stride;

	mov	DWORD PTR [edi+604], edx

; 180  : 		CHK_DX(HW.pDevice->SetStreamSource(0, vb, 0, vb_stride));

	mov	eax, DWORD PTR __imp_?HW@@3VCHW@@A
	push	edx
	push	0
	push	DWORD PTR __vb$1$[esp+256]
	mov	eax, DWORD PTR [eax+8]
	push	0
	push	eax
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR [ecx+400]
	mov	ecx, DWORD PTR $T17[esp+248]
$LN222@Render:

; 226  : 	set_Indices(_geom->ib);

	mov	edx, DWORD PTR [ecx+16]

; 186  : 	if (ib != _ib)

	cmp	DWORD PTR [edi+600], edx
	je	SHORT $LN226@Render

; 187  : 	{
; 188  : 		PGO(Msg("PGO:IB:%x", _ib));
; 189  : #ifdef DEBUG
; 190  : 		stat.ib++;
; 191  : #endif
; 192  : 		ib = _ib;

	mov	DWORD PTR [edi+600], edx

; 193  : 		CHK_DX(HW.pDevice->SetIndices(ib));

	mov	eax, DWORD PTR __imp_?HW@@3VCHW@@A
	push	edx
	mov	eax, DWORD PTR [eax+8]
	push	eax
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR [ecx+416]
$LN226@Render:
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h

; 23   : 	IC 	BOOL	is		(const T mask)						const	{ return mask==(flags&mask);			}

	mov	eax, DWORD PTR [esi+72]
	mov	edx, DWORD PTR [eax+4]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 354  :                 RCache.set_CullMode		(m_Def->m_Flags.is(CPEDef::dfCulling)?(m_Def->m_Flags.is(CPEDef::dfCullCCW)?CULL_CCW:CULL_CW):CULL_NONE);

	test	edx, 4194304				; 00400000H
	je	SHORT $LN28@Render
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h

; 23   : 	IC 	BOOL	is		(const T mask)						const	{ return mask==(flags&mask);			}

	and	edx, 8388608				; 00800000H
	or	edx, 16777216				; 01000000H
	shr	edx, 23					; 00000017H
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 354  :                 RCache.set_CullMode		(m_Def->m_Flags.is(CPEDef::dfCulling)?(m_Def->m_Flags.is(CPEDef::dfCullCCW)?CULL_CCW:CULL_CW):CULL_NONE);

	jmp	SHORT $LN29@Render
$LN28@Render:
	mov	edx, 1
$LN29@Render:
	mov	eax, DWORD PTR __imp_?RCache@@3VCBackend@@A
; File I:\Vitalya\mine\NSProjectX\xrEngine\R_Backend_Runtime.h

; 266  : 	if (cull_mode != _mode) { cull_mode = _mode;			CHK_DX(HW.pDevice->SetRenderState(D3DRS_CULLMODE, _mode)); }

	cmp	DWORD PTR [eax+8916], edx
	je	SHORT $LN233@Render
	mov	DWORD PTR [eax+8916], edx
	mov	eax, DWORD PTR __imp_?HW@@3VCHW@@A
	push	edx
	push	22					; 00000016H
	mov	eax, DWORD PTR [eax+8]
	push	eax
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR [ecx+228]
$LN233@Render:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 355  : 				RCache.Render	   		(D3DPT_TRIANGLELIST,dwOffset,0,dwCount,0,dwCount/2);

	mov	eax, DWORD PTR __imp_?RCache@@3VCBackend@@A
	mov	esi, ebx
	mov	edi, DWORD PTR _dwOffset$[esp+248]
; File I:\Vitalya\mine\NSProjectX\xrEngine\R_Backend_Runtime.h

; 202  : 	constants.flush();

	lea	ecx, DWORD PTR [eax+608]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 355  : 				RCache.Render	   		(D3DPT_TRIANGLELIST,dwOffset,0,dwCount,0,dwCount/2);

	shr	esi, 1
; File I:\Vitalya\mine\NSProjectX\xrEngine\R_Backend_Runtime.h

; 199  : 	stat.calls++;

	inc	DWORD PTR [eax+9024]

; 200  : 	stat.verts += countV;

	add	DWORD PTR [eax+9020], ebx

; 201  : 	stat.polys += PC;

	add	DWORD PTR [eax+9016], esi
; File I:\Vitalya\mine\NSProjectX\xrEngine\r_constants_cache.h

; 172  : 		if (a_pixel.b_dirty || a_vertex.b_dirty)	flush_cache();

	cmp	DWORD PTR [ecx+4112], 0
	jne	SHORT $LN239@Render
	cmp	DWORD PTR [ecx+8240], 0
	je	SHORT $LN238@Render
$LN239@Render:
	call	DWORD PTR __imp_?flush_cache@R_constants@@QAEXXZ
$LN238@Render:
; File I:\Vitalya\mine\NSProjectX\xrEngine\R_Backend_Runtime.h

; 203  : 	CHK_DX(HW.pDevice->DrawIndexedPrimitive(T, baseV, startV, countV, startI, PC));

	mov	eax, DWORD PTR __imp_?HW@@3VCHW@@A
	push	esi
	push	0
	push	ebx
	mov	eax, DWORD PTR [eax+8]
	push	0
	push	edi
	push	4
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+328]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 356  :                 RCache.set_CullMode		(CULL_CCW	); 

	mov	eax, DWORD PTR __imp_?RCache@@3VCBackend@@A
; File I:\Vitalya\mine\NSProjectX\xrEngine\R_Backend_Runtime.h

; 266  : 	if (cull_mode != _mode) { cull_mode = _mode;			CHK_DX(HW.pDevice->SetRenderState(D3DRS_CULLMODE, _mode)); }

	cmp	DWORD PTR [eax+8916], 3
	je	SHORT $LN242@Render
	mov	DWORD PTR [eax+8916], 3
	mov	eax, DWORD PTR __imp_?HW@@3VCHW@@A
	push	3
	push	22					; 00000016H
	mov	eax, DWORD PTR [eax+8]
	push	eax
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR [ecx+228]
$LN242@Render:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.cpp

; 360  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Render@CParticleEffect@PS@@UAEXM@Z ENDP		; PS::CParticleEffect::Render
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h
;	COMDAT ?set@?$_flags@G@@QAEAAU1@GH@Z
_TEXT	SEGMENT
_mask$dead$ = 8						; size = 2
_value$dead$ = 12					; size = 4
?set@?$_flags@G@@QAEAAU1@GH@Z PROC			; _flags<unsigned short>::set, COMDAT
; _this$ = ecx

; 22   : 	IC	SelfRef	set		(const T mask,	BOOL value)					{ if (value) flags|=mask; else flags&=~mask; return *this; }

	or	WORD PTR [ecx], 1
	mov	eax, ecx
	ret	8
?set@?$_flags@G@@QAEAAU1@GH@Z ENDP			; _flags<unsigned short>::set
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\xr_resource.h
;	COMDAT ??4?$resptr_core@UShader@@Uresptrcode_shader@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_rhs$ = 8						; size = 4
??4?$resptr_core@UShader@@Uresptrcode_shader@@@@QAEAAV0@ABV0@@Z PROC ; resptr_core<Shader,resptrcode_shader>::operator=, COMDAT
; _this$ = ecx

; 48   : 	ICF		T *			_get	() const							{	return p_;																					}

	mov	eax, DWORD PTR _rhs$[esp-4]

; 67   : 	self &				operator=		(const self & rhs)								{	_set(rhs);	return (self&)*this;	}

	push	esi
	push	edi
	mov	edi, ecx

; 48   : 	ICF		T *			_get	() const							{	return p_;																					}

	mov	esi, DWORD PTR [eax]

; 46   : 	ICF		void		_set	(T * rhs) 							{	if (0!=rhs) rhs->dwReference++;	_dec(); p_ = rhs;											}

	test	esi, esi
	je	SHORT $LN8@operator
	inc	DWORD PTR [esi]
$LN8@operator:
	call	DWORD PTR __imp_?_dec@?$resptr_base@UShader@@@@IAEXXZ
	mov	DWORD PTR [edi], esi

; 67   : 	self &				operator=		(const self & rhs)								{	_set(rhs);	return (self&)*this;	}

	mov	eax, edi
	pop	edi
	pop	esi
	ret	4
??4?$resptr_core@UShader@@Uresptrcode_shader@@@@QAEAAV0@ABV0@@Z ENDP ; resptr_core<Shader,resptrcode_shader>::operator=
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
;	COMDAT ?setXYZ@?$_matrix@M@@QAEAAU1@AAU?$_vector3@M@@@Z
_TEXT	SEGMENT
__cp$1 = -20						; size = 4
__sp$2 = -16						; size = 4
__sh$3 = -12						; size = 4
__sb$4 = -8						; size = 4
__cb$5 = -4						; size = 4
__ch$6 = 8						; size = 4
_xyz$ = 8						; size = 4
?setXYZ@?$_matrix@M@@QAEAAU1@AAU?$_vector3@M@@@Z PROC	; _matrix<float>::setXYZ, COMDAT
; _this$ = ecx

; 569  : 	IC	SelfRef	setXYZ	(Tvector& xyz)	{return setHPB(xyz.y,xyz.x,xyz.z);}

	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR _xyz$[esp+16]
	fld	DWORD PTR [eax+4]
	fld	DWORD PTR [eax]
	fld	DWORD PTR [eax+8]
	mov	eax, ecx
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 754  :             return (float)sin(_X);

	fld	ST(2)
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 562  :         i.set(_cc-_sp*_ss,	-_cp*_sb,	_sp*_cs+_sc	);	_14_=0;

	mov	DWORD PTR [ecx+12], 0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 754  :             return (float)sin(_X);

	fsin
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 563  :         j.set(_sp*_sc+_cs,	_cp*_cb, 	_ss-_sp*_cc	);	_24_=0;

	mov	DWORD PTR [ecx+28], 0

; 564  :         k.set(-_cp*_sh,    	_sp,		_cp*_ch		);	_34_=0;

	mov	DWORD PTR [ecx+44], 0
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	mov	DWORD PTR [ecx+48], 0
	mov	DWORD PTR [ecx+52], 0
	mov	DWORD PTR [ecx+56], 0
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 565  :         c.set(0,			0,			0			);  _44_=1;

	mov	DWORD PTR [ecx+60], 1065353216		; 3f800000H
	fstp	DWORD PTR __sh$3[esp+20]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 653  :             return (float)cos(_X);

	fxch	ST(2)
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 560  :         _cc = _ch*_cb; _cs = _ch*_sb; _sc = _sh*_cb; _ss = _sh*_sb;

	movss	xmm6, DWORD PTR __sh$3[esp+20]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 653  :             return (float)cos(_X);

	fcos
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 557  :         _sh = _sin(h); _ch = _cos(h);

	fstp	DWORD PTR __ch$6[esp+16]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 754  :             return (float)sin(_X);

	fld	ST(0)
	fsin
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 558  :         _sp = _sin(p); _cp = _cos(p);

	fstp	DWORD PTR __sp$2[esp+20]

; 562  :         i.set(_cc-_sp*_ss,	-_cp*_sb,	_sp*_cs+_sc	);	_14_=0;

	movss	xmm4, DWORD PTR __sp$2[esp+20]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 653  :             return (float)cos(_X);

	fcos
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	movss	DWORD PTR [ecx+36], xmm4
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 558  :         _sp = _sin(p); _cp = _cos(p);

	fst	DWORD PTR __cp$1[esp+20]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 754  :             return (float)sin(_X);

	fld	ST(1)
	fsin
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 559  :         _sb = _sin(b); _cb = _cos(b);

	fst	DWORD PTR __sb$4[esp+20]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 653  :             return (float)cos(_X);

	fxch	ST(2)
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 560  :         _cc = _ch*_cb; _cs = _ch*_sb; _sc = _sh*_cb; _ss = _sh*_sb;

	movss	xmm5, DWORD PTR __sb$4[esp+20]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 653  :             return (float)cos(_X);

	fcos
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 560  :         _cc = _ch*_cb; _cs = _ch*_sb; _sc = _sh*_cb; _ss = _sh*_sb;

	movaps	xmm2, xmm5
	mulss	xmm5, xmm6
	mulss	xmm2, DWORD PTR __ch$6[esp+16]
	fst	DWORD PTR __cb$5[esp+20]
	movss	xmm3, DWORD PTR __cb$5[esp+20]

; 562  :         i.set(_cc-_sp*_ss,	-_cp*_sb,	_sp*_cs+_sc	);	_14_=0;

	movaps	xmm1, xmm5
	movaps	xmm7, xmm3
	mulss	xmm1, xmm4
	mulss	xmm7, DWORD PTR __ch$6[esp+16]
	fxch	ST(2)
	mulss	xmm3, xmm6
	movaps	xmm0, xmm7
	fmul	ST(0), ST(1)
	subss	xmm0, xmm1

; 563  :         j.set(_sp*_sc+_cs,	_cp*_cb, 	_ss-_sp*_cc	);	_24_=0;

	mulss	xmm7, xmm4

; 564  :         k.set(-_cp*_sh,    	_sp,		_cp*_ch		);	_34_=0;

	movss	xmm1, DWORD PTR __cp$1[esp+20]
	fchs
	subss	xmm5, xmm7
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	movss	DWORD PTR [ecx], xmm0
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 562  :         i.set(_cc-_sp*_ss,	-_cp*_sb,	_sp*_cs+_sc	);	_14_=0;

	movaps	xmm0, xmm2
	mulss	xmm0, xmm4
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	fstp	DWORD PTR [ecx+4]
	movss	DWORD PTR [ecx+24], xmm5
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 562  :         i.set(_cc-_sp*_ss,	-_cp*_sb,	_sp*_cs+_sc	);	_14_=0;

	addss	xmm0, xmm3

; 563  :         j.set(_sp*_sc+_cs,	_cp*_cb, 	_ss-_sp*_cc	);	_24_=0;

	fmulp	ST(1), ST(0)
	mulss	xmm3, xmm4
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	movss	DWORD PTR [ecx+8], xmm0
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 563  :         j.set(_sp*_sc+_cs,	_cp*_cb, 	_ss-_sp*_cc	);	_24_=0;

	addss	xmm3, xmm2

; 564  :         k.set(-_cp*_sh,    	_sp,		_cp*_ch		);	_34_=0;

	movaps	xmm0, xmm1
	mulss	xmm1, DWORD PTR __ch$6[esp+16]
	mulss	xmm0, xmm6
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	fstp	DWORD PTR [ecx+20]
	movss	DWORD PTR [ecx+16], xmm3
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 564  :         k.set(-_cp*_sh,    	_sp,		_cp*_ch		);	_34_=0;

	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	movss	DWORD PTR [ecx+32], xmm0
	movss	DWORD PTR [ecx+40], xmm1
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 569  : 	IC	SelfRef	setXYZ	(Tvector& xyz)	{return setHPB(xyz.y,xyz.x,xyz.z);}

	add	esp, 20					; 00000014H
	ret	4
?setXYZ@?$_matrix@M@@QAEAAU1@AAU?$_vector3@M@@@Z ENDP	; _matrix<float>::setXYZ
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
;	COMDAT ?transform_dir@?$_matrix@M@@QBEXAAU?$_vector3@M@@ABU2@@Z
_TEXT	SEGMENT
_dest$ = 8						; size = 4
_v$ = 12						; size = 4
?transform_dir@?$_matrix@M@@QBEXAAU?$_vector3@M@@ABU2@@Z PROC ; _matrix<float>::transform_dir, COMDAT
; _this$ = ecx

; 516  : 		dest.x = v.x*_11 + v.y*_21 + v.z*_31;

	mov	edx, DWORD PTR _v$[esp-4]
	movss	xmm1, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _dest$[esp-4]
	mulss	xmm1, DWORD PTR [edx+4]
	movss	xmm0, DWORD PTR [edx]
	mulss	xmm0, DWORD PTR [ecx]
	addss	xmm1, xmm0
	movss	xmm0, DWORD PTR [ecx+32]
	mulss	xmm0, DWORD PTR [edx+8]
	addss	xmm1, xmm0
	movss	DWORD PTR [eax], xmm1

; 517  : 		dest.y = v.x*_12 + v.y*_22 + v.z*_32;

	movss	xmm1, DWORD PTR [ecx+4]
	mulss	xmm1, DWORD PTR [edx]
	movss	xmm0, DWORD PTR [ecx+20]
	mulss	xmm0, DWORD PTR [edx+4]
	addss	xmm1, xmm0
	movss	xmm0, DWORD PTR [ecx+36]
	mulss	xmm0, DWORD PTR [edx+8]
	addss	xmm1, xmm0
	movss	DWORD PTR [eax+4], xmm1

; 518  : 		dest.z = v.x*_13 + v.y*_23 + v.z*_33;

	movss	xmm0, DWORD PTR [ecx+24]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm0, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [edx]
	addss	xmm1, xmm0
	movss	xmm0, DWORD PTR [ecx+40]
	mulss	xmm0, DWORD PTR [edx+8]
	addss	xmm1, xmm0
	movss	DWORD PTR [eax+8], xmm1

; 519  : 	}

	ret	8
?transform_dir@?$_matrix@M@@QBEXAAU?$_vector3@M@@ABU2@@Z ENDP ; _matrix<float>::transform_dir
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
;	COMDAT ?mulA_43@?$_matrix@M@@QAEAAU1@ABU1@@Z
_TEXT	SEGMENT
tv1079 = -24						; size = 4
tv1077 = -20						; size = 4
tv1078 = -16						; size = 4
tv1089 = -12						; size = 4
tv1087 = -8						; size = 4
tv1088 = -4						; size = 4
_A$ = 8							; size = 4
?mulA_43@?$_matrix@M@@QAEAAU1@ABU1@@Z PROC		; _matrix<float>::mulA_43, COMDAT
; _this$ = ecx

; 111  : 		m[0][0] = A.m[0][0] * B.m[0][0] + A.m[1][0] * B.m[0][1] + A.m[2][0] * B.m[0][2];

	mov	eax, DWORD PTR _A$[esp-4]

; 143  : 	{

	sub	esp, 24					; 00000018H
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 24   : 	ICF SelfRef	set(const _vector3<float> &v)			{ x = T(v.x);	y = T(v.y);	z = T(v.z);	return *this;	};

	movss	xmm4, DWORD PTR [ecx]
	movss	xmm3, DWORD PTR [ecx+4]
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 111  : 		m[0][0] = A.m[0][0] * B.m[0][0] + A.m[1][0] * B.m[0][1] + A.m[2][0] * B.m[0][2];

	movaps	xmm0, xmm4
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 24   : 	ICF SelfRef	set(const _vector3<float> &v)			{ x = T(v.x);	y = T(v.y);	z = T(v.z);	return *this;	};

	movss	xmm2, DWORD PTR [ecx+8]
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 111  : 		m[0][0] = A.m[0][0] * B.m[0][0] + A.m[1][0] * B.m[0][1] + A.m[2][0] * B.m[0][2];

	movaps	xmm1, xmm3
	mulss	xmm0, DWORD PTR [eax]
	mulss	xmm1, DWORD PTR [eax+16]
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 24   : 	ICF SelfRef	set(const _vector3<float> &v)			{ x = T(v.x);	y = T(v.y);	z = T(v.z);	return *this;	};

	movss	xmm7, DWORD PTR [ecx+16]
	movss	xmm5, DWORD PTR [ecx+20]
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 111  : 		m[0][0] = A.m[0][0] * B.m[0][0] + A.m[1][0] * B.m[0][1] + A.m[2][0] * B.m[0][2];

	addss	xmm1, xmm0
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 24   : 	ICF SelfRef	set(const _vector3<float> &v)			{ x = T(v.x);	y = T(v.y);	z = T(v.z);	return *this;	};

	movss	xmm6, DWORD PTR [ecx+24]
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 111  : 		m[0][0] = A.m[0][0] * B.m[0][0] + A.m[1][0] * B.m[0][1] + A.m[2][0] * B.m[0][2];

	movaps	xmm0, xmm2
	mulss	xmm0, DWORD PTR [eax+32]
	addss	xmm1, xmm0

; 112  : 		m[0][1] = A.m[0][1] * B.m[0][0] + A.m[1][1] * B.m[0][1] + A.m[2][1] * B.m[0][2];

	movaps	xmm0, xmm3
	movss	DWORD PTR [ecx], xmm1
	movaps	xmm1, xmm4
	mulss	xmm0, DWORD PTR [eax+20]
	mulss	xmm1, DWORD PTR [eax+4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm2
	mulss	xmm0, DWORD PTR [eax+36]
	addss	xmm1, xmm0

; 113  : 		m[0][2] = A.m[0][2] * B.m[0][0] + A.m[1][2] * B.m[0][1] + A.m[2][2] * B.m[0][2];
; 114  : 		m[0][3] = 0;
; 115  : 
; 116  : 		m[1][0] = A.m[0][0] * B.m[1][0] + A.m[1][0] * B.m[1][1] + A.m[2][0] * B.m[1][2];

	movaps	xmm0, xmm5
	movss	DWORD PTR [ecx+4], xmm1
	movaps	xmm1, xmm7
	mulss	xmm4, DWORD PTR [eax+8]
	mulss	xmm3, DWORD PTR [eax+24]
	mulss	xmm2, DWORD PTR [eax+40]
	mov	DWORD PTR [ecx+12], 0
	addss	xmm4, xmm3
	addss	xmm4, xmm2
	movss	DWORD PTR [ecx+8], xmm4
	mulss	xmm0, DWORD PTR [eax+16]
	mulss	xmm1, DWORD PTR [eax]
	addss	xmm1, xmm0
	movaps	xmm0, xmm6
	mulss	xmm0, DWORD PTR [eax+32]
	addss	xmm1, xmm0

; 117  : 		m[1][1] = A.m[0][1] * B.m[1][0] + A.m[1][1] * B.m[1][1] + A.m[2][1] * B.m[1][2];

	movaps	xmm0, xmm7
	movss	DWORD PTR [ecx+16], xmm1
	movaps	xmm1, xmm5
	mulss	xmm0, DWORD PTR [eax+4]
	mulss	xmm1, DWORD PTR [eax+20]
	addss	xmm1, xmm0
	movaps	xmm0, xmm6
	mulss	xmm0, DWORD PTR [eax+36]
	addss	xmm1, xmm0
	movss	DWORD PTR [ecx+20], xmm1

; 118  : 		m[1][2] = A.m[0][2] * B.m[1][0] + A.m[1][2] * B.m[1][1] + A.m[2][2] * B.m[1][2];

	mulss	xmm7, DWORD PTR [eax+8]
	mulss	xmm5, DWORD PTR [eax+24]
	mulss	xmm6, DWORD PTR [eax+40]

; 119  : 		m[1][3] = 0;

	mov	DWORD PTR [ecx+28], 0
	addss	xmm7, xmm5
	addss	xmm7, xmm6
	movss	DWORD PTR [ecx+24], xmm7

; 120  : 
; 121  : 		m[2][0] = A.m[0][0] * B.m[2][0] + A.m[1][0] * B.m[2][1] + A.m[2][0] * B.m[2][2];

	movss	xmm4, DWORD PTR [ecx+32]
	movss	xmm2, DWORD PTR [ecx+36]
	movaps	xmm1, xmm4
	mulss	xmm1, DWORD PTR [eax]
	movaps	xmm0, xmm2
	mulss	xmm0, DWORD PTR [eax+16]
	movss	xmm3, DWORD PTR [ecx+40]
	addss	xmm1, xmm0
	movaps	xmm0, xmm3
	mulss	xmm0, DWORD PTR [eax+32]
	addss	xmm1, xmm0

; 122  : 		m[2][1] = A.m[0][1] * B.m[2][0] + A.m[1][1] * B.m[2][1] + A.m[2][1] * B.m[2][2];

	movaps	xmm0, xmm4
	movss	DWORD PTR [ecx+32], xmm1
	movaps	xmm1, xmm2
	mulss	xmm0, DWORD PTR [eax+4]
	mulss	xmm1, DWORD PTR [eax+20]
	addss	xmm1, xmm0
	movaps	xmm0, xmm3
	mulss	xmm0, DWORD PTR [eax+36]
	addss	xmm1, xmm0
	movss	DWORD PTR [ecx+36], xmm1

; 123  : 		m[2][2] = A.m[0][2] * B.m[2][0] + A.m[1][2] * B.m[2][1] + A.m[2][2] * B.m[2][2];

	mulss	xmm4, DWORD PTR [eax+8]
	mulss	xmm2, DWORD PTR [eax+24]
	mulss	xmm3, DWORD PTR [eax+40]
	addss	xmm4, xmm2

; 124  : 		m[2][3] = 0;

	mov	DWORD PTR [ecx+44], 0
	addss	xmm4, xmm3
	movss	DWORD PTR [ecx+40], xmm4

; 125  : 
; 126  : 		m[3][0] = A.m[0][0] * B.m[3][0] + A.m[1][0] * B.m[3][1] + A.m[2][0] * B.m[3][2] + A.m[3][0];

	movss	xmm4, DWORD PTR [ecx+48]
	movss	xmm2, DWORD PTR [ecx+52]
	movaps	xmm1, xmm4
	mulss	xmm1, DWORD PTR [eax]
	movaps	xmm0, xmm2
	mulss	xmm0, DWORD PTR [eax+16]
	movss	xmm3, DWORD PTR [ecx+56]
	addss	xmm1, xmm0
	movaps	xmm0, xmm3
	mulss	xmm0, DWORD PTR [eax+32]
	addss	xmm0, DWORD PTR [eax+48]
	addss	xmm1, xmm0

; 127  : 		m[3][1] = A.m[0][1] * B.m[3][0] + A.m[1][1] * B.m[3][1] + A.m[2][1] * B.m[3][2] + A.m[3][1];

	movaps	xmm0, xmm4
	movss	DWORD PTR [ecx+48], xmm1
	movaps	xmm1, xmm2
	mulss	xmm0, DWORD PTR [eax+4]
	mulss	xmm1, DWORD PTR [eax+20]
	addss	xmm1, xmm0
	movaps	xmm0, xmm3
	mulss	xmm0, DWORD PTR [eax+36]
	addss	xmm0, DWORD PTR [eax+52]
	addss	xmm1, xmm0
	movss	DWORD PTR [ecx+52], xmm1

; 128  : 		m[3][2] = A.m[0][2] * B.m[3][0] + A.m[1][2] * B.m[3][1] + A.m[2][2] * B.m[3][2] + A.m[3][2];

	mulss	xmm4, DWORD PTR [eax+8]
	mulss	xmm2, DWORD PTR [eax+24]
	mulss	xmm3, DWORD PTR [eax+40]
	addss	xmm4, xmm2
	addss	xmm3, DWORD PTR [eax+56]

; 129  : 		m[3][3] = 1;

	mov	DWORD PTR [ecx+60], 1065353216		; 3f800000H

; 144  :     	Self B; B.set( *this ); 	mul_43	( A, B );
; 145  : 		return *this;

	mov	eax, ecx

; 128  : 		m[3][2] = A.m[0][2] * B.m[3][0] + A.m[1][2] * B.m[3][1] + A.m[2][2] * B.m[3][2] + A.m[3][2];

	addss	xmm4, xmm3
	movss	DWORD PTR [ecx+56], xmm4

; 146  :     };

	add	esp, 24					; 00000018H
	ret	4
?mulA_43@?$_matrix@M@@QAEAAU1@ABU1@@Z ENDP		; _matrix<float>::mulA_43
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
;	COMDAT ?set@?$_matrix@M@@QAEAAU1@ABU1@@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
?set@?$_matrix@M@@QAEAAU1@ABU1@@Z PROC			; _matrix<float>::set, COMDAT
; _this$ = ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 24   : 	ICF SelfRef	set(const _vector3<float> &v)			{ x = T(v.x);	y = T(v.y);	z = T(v.z);	return *this;	};

	mov	eax, DWORD PTR _a$[esp-4]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [ecx]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [ecx+4]
	fld	DWORD PTR [eax+8]
	fstp	DWORD PTR [ecx+8]
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 56   : 		i.set(a.i); _14_=a._14;

	fld	DWORD PTR [eax+12]
	fstp	DWORD PTR [ecx+12]
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 24   : 	ICF SelfRef	set(const _vector3<float> &v)			{ x = T(v.x);	y = T(v.y);	z = T(v.z);	return *this;	};

	fld	DWORD PTR [eax+16]
	fstp	DWORD PTR [ecx+16]
	fld	DWORD PTR [eax+20]
	fstp	DWORD PTR [ecx+20]
	fld	DWORD PTR [eax+24]
	fstp	DWORD PTR [ecx+24]
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 57   : 		j.set(a.j); _24_=a._24;

	fld	DWORD PTR [eax+28]
	fstp	DWORD PTR [ecx+28]
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 24   : 	ICF SelfRef	set(const _vector3<float> &v)			{ x = T(v.x);	y = T(v.y);	z = T(v.z);	return *this;	};

	fld	DWORD PTR [eax+32]
	fstp	DWORD PTR [ecx+32]
	fld	DWORD PTR [eax+36]
	fstp	DWORD PTR [ecx+36]
	fld	DWORD PTR [eax+40]
	fstp	DWORD PTR [ecx+40]
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 58   : 		k.set(a.k); _34_=a._34;

	fld	DWORD PTR [eax+44]
	fstp	DWORD PTR [ecx+44]
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 24   : 	ICF SelfRef	set(const _vector3<float> &v)			{ x = T(v.x);	y = T(v.y);	z = T(v.z);	return *this;	};

	fld	DWORD PTR [eax+48]
	fstp	DWORD PTR [ecx+48]
	fld	DWORD PTR [eax+52]
	fstp	DWORD PTR [ecx+52]
	fld	DWORD PTR [eax+56]
	fstp	DWORD PTR [ecx+56]
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 59   : 		c.set(a.c); _44_=a._44;

	fld	DWORD PTR [eax+60]

; 60   : 		return *this;

	mov	eax, ecx
	fstp	DWORD PTR [ecx+60]

; 61   : 	}

	ret	4
?set@?$_matrix@M@@QAEAAU1@ABU1@@Z ENDP			; _matrix<float>::set
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h
;	COMDAT ?set@?$_flags@E@@QAEAAU1@EH@Z
_TEXT	SEGMENT
_mask$ = 8						; size = 1
_value$ = 12						; size = 4
?set@?$_flags@E@@QAEAAU1@EH@Z PROC			; _flags<unsigned char>::set, COMDAT
; _this$ = ecx

; 22   : 	IC	SelfRef	set		(const T mask,	BOOL value)					{ if (value) flags|=mask; else flags&=~mask; return *this; }

	cmp	DWORD PTR _value$[esp-4], 0
	mov	dl, BYTE PTR [ecx]
	je	SHORT $LN2@set
	or	dl, BYTE PTR _mask$[esp-4]
	mov	eax, ecx
	mov	BYTE PTR [ecx], dl
	ret	8
$LN2@set:
	mov	al, BYTE PTR _mask$[esp-4]
	not	al
	and	al, dl
	mov	BYTE PTR [ecx], al
	mov	eax, ecx
	ret	8
?set@?$_flags@E@@QAEAAU1@EH@Z ENDP			; _flags<unsigned char>::set
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
;	COMDAT ?setHP@?$_vector3@M@@QAEAAU1@MM@Z
_TEXT	SEGMENT
_h$ = 8							; size = 4
_p$ = 12						; size = 4
?setHP@?$_vector3@M@@QAEAAU1@MM@Z PROC			; _vector3<float>::setHP, COMDAT
; _this$ = ecx
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 653  :             return (float)cos(_X);

	fld	DWORD PTR _p$[esp-4]
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 335  : 		return *this;	

	mov	eax, ecx
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 653  :             return (float)cos(_X);

	fld	ST(0)
	fcos

; 754  :             return (float)sin(_X);

	fld	DWORD PTR _h$[esp-4]
	fld	ST(0)
	fsin
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 332  :         x = -_cp*_sh;

	fmul	ST(0), ST(2)
	fchs
	fstp	DWORD PTR [ecx]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 754  :             return (float)sin(_X);

	fxch	ST(2)
	fsin
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 333  :         y = _sp;

	fstp	DWORD PTR [ecx+4]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 653  :             return (float)cos(_X);

	fxch	ST(1)
	fcos
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 334  :         z = _cp*_ch;

	fmulp	ST(1), ST(0)
	fstp	DWORD PTR [ecx+8]

; 336  :     }

	ret	8
?setHP@?$_vector3@M@@QAEAAU1@MM@Z ENDP			; _vector3<float>::setHP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
;	COMDAT ?invert@?$_vector3@M@@QAEAAU1@ABU1@@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
?invert@?$_vector3@M@@QAEAAU1@ABU1@@Z PROC		; _vector3<float>::invert, COMDAT
; _this$ = ecx

; 50   : 	IC	SelfRef	invert(const Self &a)					{ x=-a.x; y=-a.y; z=-a.z;				return *this;	}

	mov	eax, DWORD PTR _a$[esp-4]
	movss	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm0, DWORD PTR [eax]
	xorps	xmm0, xmm1
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	xorps	xmm0, xmm1
	movss	DWORD PTR [ecx+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	mov	eax, ecx
	xorps	xmm0, xmm1
	movss	DWORD PTR [ecx+8], xmm0
	ret	4
?invert@?$_vector3@M@@QAEAAU1@ABU1@@Z ENDP		; _vector3<float>::invert
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
;	COMDAT ?div@?$_vector3@M@@QAEAAU1@ABU1@M@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_s$ = 12						; size = 4
?div@?$_vector3@M@@QAEAAU1@ABU1@M@Z PROC		; _vector3<float>::div, COMDAT
; _this$ = ecx

; 47   : 	ICF SelfRef	div(const Self &a, T s)					{ x=a.x/s;  y=a.y/s;	z=a.z/s;		return *this;	};

	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, DWORD PTR _s$[esp-4]
	mov	eax, DWORD PTR _a$[esp-4]
	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [ecx], xmm0
	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR [ecx+4], xmm0
	mulss	xmm1, DWORD PTR [eax+8]
	mov	eax, ecx
	movss	DWORD PTR [ecx+8], xmm1
	ret	8
?div@?$_vector3@M@@QAEAAU1@ABU1@M@Z ENDP		; _vector3<float>::div
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
;	COMDAT ?setHPB@?$_matrix@M@@QAEAAU1@MMM@Z
_TEXT	SEGMENT
__cp$ = -12						; size = 4
__sp$ = -8						; size = 4
__sh$ = -4						; size = 4
__ch$ = 8						; size = 4
_h$ = 8							; size = 4
__cb$ = 12						; size = 4
_p$ = 12						; size = 4
__sb$ = 16						; size = 4
_b$ = 16						; size = 4
?setHPB@?$_matrix@M@@QAEAAU1@MMM@Z PROC			; _matrix<float>::setHPB, COMDAT
; _this$ = ecx

; 554  : 	{

	sub	esp, 12					; 0000000cH
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 754  :             return (float)sin(_X);

	fld	DWORD PTR _h$[esp+8]
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 566  : 		return *this; 

	mov	eax, ecx
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 754  :             return (float)sin(_X);

	fld	ST(0)
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 562  :         i.set(_cc-_sp*_ss,	-_cp*_sb,	_sp*_cs+_sc	);	_14_=0;

	mov	DWORD PTR [ecx+12], 0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 754  :             return (float)sin(_X);

	fsin
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 563  :         j.set(_sp*_sc+_cs,	_cp*_cb, 	_ss-_sp*_cc	);	_24_=0;

	mov	DWORD PTR [ecx+28], 0

; 564  :         k.set(-_cp*_sh,    	_sp,		_cp*_ch		);	_34_=0;

	mov	DWORD PTR [ecx+44], 0
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	mov	DWORD PTR [ecx+48], 0
	mov	DWORD PTR [ecx+52], 0
	mov	DWORD PTR [ecx+56], 0
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 565  :         c.set(0,			0,			0			);  _44_=1;

	mov	DWORD PTR [ecx+60], 1065353216		; 3f800000H
	fstp	DWORD PTR __sh$[esp+12]
	movss	xmm6, DWORD PTR __sh$[esp+12]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 653  :             return (float)cos(_X);

	fcos
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 557  :         _sh = _sin(h); _ch = _cos(h);

	fstp	DWORD PTR __ch$[esp+8]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 754  :             return (float)sin(_X);

	fld	DWORD PTR _p$[esp+8]
	fld	ST(0)
	fsin
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 558  :         _sp = _sin(p); _cp = _cos(p);

	fstp	DWORD PTR __sp$[esp+12]

; 562  :         i.set(_cc-_sp*_ss,	-_cp*_sb,	_sp*_cs+_sc	);	_14_=0;

	movss	xmm4, DWORD PTR __sp$[esp+12]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 653  :             return (float)cos(_X);

	fcos
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	movss	DWORD PTR [ecx+36], xmm4
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 558  :         _sp = _sin(p); _cp = _cos(p);

	fst	DWORD PTR __cp$[esp+12]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 754  :             return (float)sin(_X);

	fld	DWORD PTR _b$[esp+8]
	fld	ST(0)
	fsin
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 559  :         _sb = _sin(b); _cb = _cos(b);

	fst	DWORD PTR __sb$[esp+8]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 653  :             return (float)cos(_X);

	fxch	ST(1)
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 560  :         _cc = _ch*_cb; _cs = _ch*_sb; _sc = _sh*_cb; _ss = _sh*_sb;

	movss	xmm5, DWORD PTR __sb$[esp+8]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 653  :             return (float)cos(_X);

	fcos
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 560  :         _cc = _ch*_cb; _cs = _ch*_sb; _sc = _sh*_cb; _ss = _sh*_sb;

	movaps	xmm2, xmm5
	mulss	xmm5, xmm6
	mulss	xmm2, DWORD PTR __ch$[esp+8]
	fst	DWORD PTR __cb$[esp+8]
	movss	xmm3, DWORD PTR __cb$[esp+8]

; 562  :         i.set(_cc-_sp*_ss,	-_cp*_sb,	_sp*_cs+_sc	);	_14_=0;

	movaps	xmm1, xmm5
	movaps	xmm7, xmm3
	mulss	xmm1, xmm4
	mulss	xmm7, DWORD PTR __ch$[esp+8]
	fxch	ST(1)
	mulss	xmm3, xmm6
	movaps	xmm0, xmm7
	fmul	ST(0), ST(2)
	subss	xmm0, xmm1

; 563  :         j.set(_sp*_sc+_cs,	_cp*_cb, 	_ss-_sp*_cc	);	_24_=0;

	mulss	xmm7, xmm4

; 564  :         k.set(-_cp*_sh,    	_sp,		_cp*_ch		);	_34_=0;

	movss	xmm1, DWORD PTR __cp$[esp+12]
	fchs
	subss	xmm5, xmm7
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	movss	DWORD PTR [ecx], xmm0
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 562  :         i.set(_cc-_sp*_ss,	-_cp*_sb,	_sp*_cs+_sc	);	_14_=0;

	movaps	xmm0, xmm2
	mulss	xmm0, xmm4
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	fstp	DWORD PTR [ecx+4]
	movss	DWORD PTR [ecx+24], xmm5
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 562  :         i.set(_cc-_sp*_ss,	-_cp*_sb,	_sp*_cs+_sc	);	_14_=0;

	addss	xmm0, xmm3

; 563  :         j.set(_sp*_sc+_cs,	_cp*_cb, 	_ss-_sp*_cc	);	_24_=0;

	fmulp	ST(1), ST(0)
	mulss	xmm3, xmm4
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	movss	DWORD PTR [ecx+8], xmm0
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 563  :         j.set(_sp*_sc+_cs,	_cp*_cb, 	_ss-_sp*_cc	);	_24_=0;

	addss	xmm3, xmm2

; 564  :         k.set(-_cp*_sh,    	_sp,		_cp*_ch		);	_34_=0;

	movaps	xmm0, xmm1
	mulss	xmm1, DWORD PTR __ch$[esp+8]
	mulss	xmm0, xmm6
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	fstp	DWORD PTR [ecx+20]
	movss	DWORD PTR [ecx+16], xmm3
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 564  :         k.set(-_cp*_sh,    	_sp,		_cp*_ch		);	_34_=0;

	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	movss	DWORD PTR [ecx+32], xmm0
	movss	DWORD PTR [ecx+40], xmm1
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 567  :     }

	add	esp, 12					; 0000000cH
	ret	12					; 0000000cH
?setHPB@?$_matrix@M@@QAEAAU1@MMM@Z ENDP			; _matrix<float>::setHPB
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.h
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.h
;	COMDAT ?Name@CParticleEffect@PS@@UAE?BVshared_str@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?Name@CParticleEffect@PS@@UAE?BVshared_str@@XZ PROC	; PS::CParticleEffect::Name, COMDAT
; _this$ = ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	eax, DWORD PTR [ecx+72]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	DWORD PTR [eax], ecx
	test	ecx, ecx
	je	SHORT $LN9@Name
	inc	DWORD PTR [ecx]
$LN9@Name:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.h

; 68   : 		virtual const shared_str	Name			(){VERIFY(m_Def); return m_Def->m_Name;}

	ret	4
?Name@CParticleEffect@PS@@UAE?BVshared_str@@XZ ENDP	; PS::CParticleEffect::Name
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.h
;	COMDAT ?GetTimeLimit@CParticleEffect@PS@@UAEMXZ
_TEXT	SEGMENT
tv73 = -4						; size = 4
?GetTimeLimit@CParticleEffect@PS@@UAEMXZ PROC		; PS::CParticleEffect::GetTimeLimit, COMDAT
; _this$ = ecx

; 66   : 		virtual float		GetTimeLimit		(){VERIFY(m_Def); return m_Def->m_Flags.is(CPEDef::dfTimeLimit)?m_Def->m_fTimeLimit:-1.f;}

	push	ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h

; 23   : 	IC 	BOOL	is		(const T mask)						const	{ return mask==(flags&mask);			}

	mov	eax, DWORD PTR [ecx+72]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.h

; 66   : 		virtual float		GetTimeLimit		(){VERIFY(m_Def); return m_Def->m_Flags.is(CPEDef::dfTimeLimit)?m_Def->m_fTimeLimit:-1.f;}

	test	DWORD PTR [eax+4], 16384		; 00004000H
	je	SHORT $LN6@GetTimeLim
	movss	xmm0, DWORD PTR [eax+84]
	movss	DWORD PTR tv73[esp+4], xmm0
	fld	DWORD PTR tv73[esp+4]
	pop	ecx
	ret	0
$LN6@GetTimeLim:
	mov	DWORD PTR tv73[esp+4], -1082130432	; bf800000H
	fld	DWORD PTR tv73[esp+4]
	pop	ecx
	ret	0
?GetTimeLimit@CParticleEffect@PS@@UAEMXZ ENDP		; PS::CParticleEffect::GetTimeLimit
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.h
;	COMDAT ?IsPlaying@CParticleEffect@PS@@UAEHXZ
_TEXT	SEGMENT
?IsPlaying@CParticleEffect@PS@@UAEHXZ PROC		; PS::CParticleEffect::IsPlaying, COMDAT
; _this$ = ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h

; 23   : 	IC 	BOOL	is		(const T mask)						const	{ return mask==(flags&mask);			}

	movzx	eax, BYTE PTR [ecx+176]
	and	eax, 1
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.h

; 64   : 		virtual BOOL		IsPlaying			(){return m_RT_Flags.is(flRT_Playing);}

	ret	0
?IsPlaying@CParticleEffect@PS@@UAEHXZ ENDP		; PS::CParticleEffect::IsPlaying
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffectDef.h
;	COMDAT ?CalculateTC@SFrame@PS@@QAEXHAAU?$_vector2@M@@0@Z
_TEXT	SEGMENT
_frame$ = 8						; size = 4
_lt$ = 12						; size = 4
_rb$ = 16						; size = 4
?CalculateTC@SFrame@PS@@QAEXHAAU?$_vector2@M@@0@Z PROC	; PS::SFrame::CalculateTC, COMDAT
; _this$ = ecx

; 48   : 			lt.x       	 	= (frame%m_iFrameDimX)*m_fTexSize.x;

	mov	eax, DWORD PTR _frame$[esp-4]
	push	edi
	mov	edi, ecx
	cdq
	mov	ecx, DWORD PTR _lt$[esp]
	idiv	DWORD PTR [edi+16]

; 49   : 			lt.y        	= (frame/m_iFrameDimX)*m_fTexSize.y;

	mov	eax, DWORD PTR _frame$[esp]
	cvtsi2ss xmm1, edx
	cdq
	mulss	xmm1, DWORD PTR [edi]
	movss	DWORD PTR [ecx], xmm1
	idiv	DWORD PTR [edi+16]
	cvtsi2ss xmm0, eax

; 50   : 			rb.x        	= lt.x+m_fTexSize.x;

	mov	eax, DWORD PTR _rb$[esp]
	mulss	xmm0, DWORD PTR [edi+4]
	movss	DWORD PTR [ecx+4], xmm0
	addss	xmm1, DWORD PTR [edi]
	movss	DWORD PTR [eax], xmm1

; 51   : 			rb.y        	= lt.y+m_fTexSize.y;

	movss	xmm0, DWORD PTR [ecx+4]
	addss	xmm0, DWORD PTR [edi+4]
	pop	edi
	movss	DWORD PTR [eax+4], xmm0

; 52   : 		}

	ret	12					; 0000000cH
?CalculateTC@SFrame@PS@@QAEXHAAU?$_vector2@M@@0@Z ENDP	; PS::SFrame::CalculateTC
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrEngine\fvf.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrEngine\fvf.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector2.h
; File I:\Vitalya\mine\NSProjectX\xrEngine\fvf.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector2.h
; File I:\Vitalya\mine\NSProjectX\xrEngine\fvf.h
;	COMDAT ?set@LIT@FVF@@QAEXMMMIMM@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
_C$ = 20						; size = 4
_u$ = 24						; size = 4
_v$ = 28						; size = 4
?set@LIT@FVF@@QAEXMMMIMM@Z PROC				; FVF::LIT::set, COMDAT
; _this$ = ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	movss	xmm0, DWORD PTR _x$[esp-4]
; File I:\Vitalya\mine\NSProjectX\xrEngine\fvf.h

; 31   : 		IC void		set(float x, float y, float z, u32 C, float u, float v) { p.set(x, y, z); color = C; t.set(u, v); }

	mov	eax, DWORD PTR _C$[esp-4]
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR _y$[esp-4]
	movss	DWORD PTR [ecx+4], xmm0
	movss	xmm0, DWORD PTR _z$[esp-4]
	movss	DWORD PTR [ecx+8], xmm0
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector2.h

; 15   : 	IC SelfRef set(float _u, float _v)				{ x=T(_u); y=T(_v);				return *this;	}

	movss	xmm0, DWORD PTR _u$[esp-4]
	movss	DWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR _v$[esp-4]
; File I:\Vitalya\mine\NSProjectX\xrEngine\fvf.h

; 31   : 		IC void		set(float x, float y, float z, u32 C, float u, float v) { p.set(x, y, z); color = C; t.set(u, v); }

	mov	DWORD PTR [ecx+12], eax
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector2.h

; 15   : 	IC SelfRef set(float _u, float _v)				{ x=T(_u); y=T(_v);				return *this;	}

	movss	DWORD PTR [ecx+20], xmm0
; File I:\Vitalya\mine\NSProjectX\xrEngine\fvf.h

; 31   : 		IC void		set(float x, float y, float z, u32 C, float u, float v) { p.set(x, y, z); color = C; t.set(u, v); }

	ret	24					; 00000018H
?set@LIT@FVF@@QAEXMMMIMM@Z ENDP				; FVF::LIT::set
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h
;	COMDAT ?is@?$_flags@E@@QBEHE@Z
_TEXT	SEGMENT
_mask$ = 8						; size = 1
?is@?$_flags@E@@QBEHE@Z PROC				; _flags<unsigned char>::is, COMDAT
; _this$ = ecx

; 23   : 	IC 	BOOL	is		(const T mask)						const	{ return mask==(flags&mask);			}

	mov	dl, BYTE PTR [ecx]
	xor	eax, eax
	and	dl, BYTE PTR _mask$[esp-4]
	cmp	BYTE PTR _mask$[esp-4], dl
	sete	al
	ret	4
?is@?$_flags@E@@QBEHE@Z ENDP				; _flags<unsigned char>::is
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_flags.h
;	COMDAT ?zero@?$_flags@E@@QAEAAU1@XZ
_TEXT	SEGMENT
?zero@?$_flags@E@@QAEAAU1@XZ PROC			; _flags<unsigned char>::zero, COMDAT
; _this$ = ecx

; 15   :     IC	SelfRef	zero	()											{ flags=T(0);	return *this;	}

	mov	BYTE PTR [ecx], 0
	mov	eax, ecx
	ret	0
?zero@?$_flags@E@@QAEAAU1@XZ ENDP			; _flags<unsigned char>::zero
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\ParticleEffect.h
;	COMDAT ?GetDefinition@CParticleEffect@PS@@QAEPAVCPEDef@2@XZ
_TEXT	SEGMENT
?GetDefinition@CParticleEffect@PS@@QAEPAVCPEDef@2@XZ PROC ; PS::CParticleEffect::GetDefinition, COMDAT
; _this$ = ecx

; 58   : 		IC CPEDef*			GetDefinition		(){return m_Def;}

	mov	eax, DWORD PTR [ecx+72]
	ret	0
?GetDefinition@CParticleEffect@PS@@QAEPAVCPEDef@2@XZ ENDP ; PS::CParticleEffect::GetDefinition
_TEXT	ENDS
END
