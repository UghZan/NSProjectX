; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30146.0 

	TITLE	i:\vitalya\mine\nsprojectx\nspx_build\intermediate\release-win32\xrrender_r1\r__dsgraph_render.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

EXTRN	__imp_?psHUD_FOV@@3MA:DWORD
EXTRN	__imp_??A?$xr_vector@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@V?$xalloc@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@@@@QAEAAU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@I@Z:PROC
EXTRN	__imp_?end@?$vector@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@V?$xalloc@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@std@@@std@@@2@XZ:PROC
EXTRN	__imp_?begin@?$vector@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@V?$xalloc@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@std@@@std@@@2@XZ:PROC
EXTRN	__imp_?_get@?$resptr_base@VCTexture@@@@QBEPAVCTexture@@XZ:PROC
EXTRN	__imp_?testSphere_dirty@CFrustum@@QBEHAAU?$_vector3@M@@M@Z:PROC
EXTRN	__imp_?q_frustum@ISpatial_DB@@QAEXAAV?$xr_vector@PAVISpatial@@V?$xalloc@PAVISpatial@@@@@@IIABVCFrustum@@@Z:PROC
EXTRN	__imp_?set_Frustum@IRender_interface@@QAEXPAVCFrustum@@@Z:PROC
EXTRN	__imp_?set_xform_project@CBackend@@QAEXABU?$_matrix@M@@@Z:PROC
EXTRN	__imp_?size@?$vector@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@V?$xalloc@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@@@std@@QBEIXZ:PROC
EXTRN	__imp_?size@?$xr_vector@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@V?$xalloc@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@@@@QBEIXZ:PROC
EXTRN	__imp_?set_States@CBackend@@QAEXPAUIDirect3DStateBlock9@@@Z:PROC
EXTRN	__imp_?set_PS@CBackend@@QAEXPAUIDirect3DPixelShader9@@PBD@Z:PROC
EXTRN	__imp_?set_VS@CBackend@@QAEXPAUIDirect3DVertexShader9@@PBD@Z:PROC
EXTRN	__imp_?set_Constants@CBackend@@QAEXPAVR_constant_table@@@Z:PROC
EXTRN	__imp_?set_Textures@CBackend@@QAEXPAUSTextureList@@@Z:PROC
EXTRN	__imp_?set_Element@CBackend@@QAEXPAUShaderElement@@I@Z:PROC
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
PUBLIC	?begin@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ ; FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::begin
PUBLIC	?begin@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ ; FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::begin
PUBLIC	?clear@?$xr_vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ ; xr_vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::clear
PUBLIC	?clear_and_free@?$xr_vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ ; xr_vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::clear_and_free
PUBLIC	?clear@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::clear
PUBLIC	?_Destroy@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Destroy
PUBLIC	?_Getal@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Getal
PUBLIC	?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ; std::_Compressed_pair<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *>,std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >,1>::_Get_first
PUBLIC	??$_Destroy_range@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ; std::_Destroy_range<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >
PUBLIC	??$_Unfancy@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z ; std::_Unfancy<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *>
PUBLIC	??$destroy@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::destroy<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *>
PUBLIC	?destroy@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *>::destroy
PUBLIC	??$_Destroy_in_place@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAXAAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; std::_Destroy_in_place<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *>
PUBLIC	?clear@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ ; xr_vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::clear
PUBLIC	?clear_and_free@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ ; xr_vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::clear_and_free
PUBLIC	?clear@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::clear
PUBLIC	?_Destroy@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::_Destroy
PUBLIC	?_Getal@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::_Getal
PUBLIC	?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ; std::_Compressed_pair<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *>,std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >,1>::_Get_first
PUBLIC	??$_Destroy_range@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ; std::_Destroy_range<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >
PUBLIC	??$_Unfancy@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z ; std::_Unfancy<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *>
PUBLIC	??$destroy@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::destroy<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *>
PUBLIC	?destroy@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *>::destroy
PUBLIC	??$_Destroy_in_place@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAXAAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; std::_Destroy_in_place<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *>
PUBLIC	?clear@?$xr_vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ ; xr_vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::clear
PUBLIC	?clear_and_free@?$xr_vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ ; xr_vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::clear_and_free
PUBLIC	?clear@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::clear
PUBLIC	?_Destroy@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::_Destroy
PUBLIC	?_Getal@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::_Getal
PUBLIC	?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ; std::_Compressed_pair<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *>,std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >,1>::_Get_first
PUBLIC	??$_Destroy_range@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ; std::_Destroy_range<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >
PUBLIC	??$_Unfancy@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z ; std::_Unfancy<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *>
PUBLIC	??$destroy@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::destroy<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *>
PUBLIC	?destroy@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *>::destroy
PUBLIC	??$_Destroy_in_place@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAXAAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; std::_Destroy_in_place<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *>
PUBLIC	?clear@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ ; xr_vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::clear
PUBLIC	?clear_and_free@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ ; xr_vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::clear_and_free
PUBLIC	?clear@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::clear
PUBLIC	?_Destroy@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::_Destroy
PUBLIC	?_Getal@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::_Getal
PUBLIC	?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ; std::_Compressed_pair<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *>,std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >,1>::_Get_first
PUBLIC	??$_Destroy_range@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ; std::_Destroy_range<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >
PUBLIC	??$_Unfancy@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z ; std::_Unfancy<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *>
PUBLIC	??$destroy@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::destroy<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *>
PUBLIC	?destroy@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *>::destroy
PUBLIC	??$_Destroy_in_place@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAXAAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; std::_Destroy_in_place<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *>
PUBLIC	?clear@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ ; xr_vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::clear
PUBLIC	?clear_and_free@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ ; xr_vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::clear_and_free
PUBLIC	?clear@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::clear
PUBLIC	?_Destroy@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::_Destroy
PUBLIC	?_Getal@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::_Getal
PUBLIC	?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ; std::_Compressed_pair<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *>,std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >,1>::_Get_first
PUBLIC	??$_Destroy_range@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ; std::_Destroy_range<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >
PUBLIC	??$_Unfancy@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z ; std::_Unfancy<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *>
PUBLIC	??$destroy@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::destroy<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *>
PUBLIC	?destroy@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *>::destroy
PUBLIC	??$_Destroy_in_place@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAXAAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; std::_Destroy_in_place<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *>
PUBLIC	?clear@?$xr_vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ ; xr_vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::clear
PUBLIC	?clear_and_free@?$xr_vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ ; xr_vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::clear_and_free
PUBLIC	?clear@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::clear
PUBLIC	?_Destroy@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Destroy
PUBLIC	?_Getal@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Getal
PUBLIC	?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ; std::_Compressed_pair<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *>,std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >,1>::_Get_first
PUBLIC	??$_Destroy_range@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ; std::_Destroy_range<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >
PUBLIC	??$_Unfancy@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z ; std::_Unfancy<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *>
PUBLIC	??$destroy@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::destroy<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *>
PUBLIC	?destroy@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *>::destroy
PUBLIC	??$_Destroy_in_place@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAXAAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; std::_Destroy_in_place<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *>
PUBLIC	?clear@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ ; xr_vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::clear
PUBLIC	?clear_and_free@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ ; xr_vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::clear_and_free
PUBLIC	?clear@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::clear
PUBLIC	?_Destroy@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::_Destroy
PUBLIC	?_Getal@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::_Getal
PUBLIC	?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ; std::_Compressed_pair<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *>,std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >,1>::_Get_first
PUBLIC	??$_Destroy_range@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ; std::_Destroy_range<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >
PUBLIC	??$_Unfancy@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z ; std::_Unfancy<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *>
PUBLIC	??$destroy@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::destroy<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *>
PUBLIC	?destroy@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *>::destroy
PUBLIC	??$_Destroy_in_place@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAXAAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; std::_Destroy_in_place<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *>
PUBLIC	?clear@?$xr_vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ ; xr_vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::clear
PUBLIC	?clear_and_free@?$xr_vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ ; xr_vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::clear_and_free
PUBLIC	?clear@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::clear
PUBLIC	?_Destroy@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::_Destroy
PUBLIC	?_Getal@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::_Getal
PUBLIC	?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ; std::_Compressed_pair<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *>,std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >,1>::_Get_first
PUBLIC	??$_Destroy_range@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ; std::_Destroy_range<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >
PUBLIC	??$_Unfancy@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z ; std::_Unfancy<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *>
PUBLIC	??$destroy@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::destroy<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *>
PUBLIC	?destroy@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *>::destroy
PUBLIC	??$_Destroy_in_place@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAXAAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; std::_Destroy_in_place<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *>
PUBLIC	?clear@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ ; xr_vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::clear
PUBLIC	?clear_and_free@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ ; xr_vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::clear_and_free
PUBLIC	?clear@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::clear
PUBLIC	?_Destroy@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::_Destroy
PUBLIC	?_Getal@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::_Getal
PUBLIC	?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ; std::_Compressed_pair<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *>,std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >,1>::_Get_first
PUBLIC	??$_Destroy_range@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ; std::_Destroy_range<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >
PUBLIC	??$_Unfancy@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z ; std::_Unfancy<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *>
PUBLIC	??$destroy@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::destroy<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *>
PUBLIC	?destroy@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *>::destroy
PUBLIC	??$_Destroy_in_place@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAXAAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; std::_Destroy_in_place<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *>
PUBLIC	?clear@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ ; xr_vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::clear
PUBLIC	?clear_and_free@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ ; xr_vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::clear_and_free
PUBLIC	?clear@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::clear
PUBLIC	?_Destroy@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::_Destroy
PUBLIC	?_Getal@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::_Getal
PUBLIC	?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ; std::_Compressed_pair<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *>,std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >,1>::_Get_first
PUBLIC	??$_Destroy_range@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ; std::_Destroy_range<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >
PUBLIC	??$_Unfancy@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z ; std::_Unfancy<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *>
PUBLIC	??$destroy@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::destroy<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *>
PUBLIC	?destroy@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *>::destroy
PUBLIC	??$_Destroy_in_place@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAXAAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; std::_Destroy_in_place<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *>
PUBLIC	?root@CSector@@QAEPAVIRender_Visual@@XZ		; CSector::root
PUBLIC	?clear@?$xr_vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@@QAEXXZ ; xr_vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::clear
PUBLIC	?clear_and_free@?$xr_vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@@QAEXXZ ; xr_vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::clear_and_free
PUBLIC	?clear@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAEXXZ ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::clear
PUBLIC	?_Destroy@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@AAEXPAPAVIRender_Visual@@0@Z ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::_Destroy
PUBLIC	?_Getal@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@AAEAAV?$doug_lea_alloc@PAVIRender_Visual@@@@XZ ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::_Getal
PUBLIC	?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAVIRender_Visual@@@@V?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@std@@$00@std@@QAEAAV?$doug_lea_alloc@PAVIRender_Visual@@@@XZ ; std::_Compressed_pair<doug_lea_alloc<IRender_Visual *>,std::_Vector_val<std::_Simple_types<IRender_Visual *> >,1>::_Get_first
PUBLIC	??$_Destroy_range@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@YAXPAPAVIRender_Visual@@QAPAV1@AAV?$doug_lea_alloc@PAVIRender_Visual@@@@@Z ; std::_Destroy_range<doug_lea_alloc<IRender_Visual *> >
PUBLIC	??$destroy@PAVIRender_Visual@@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@SAXAAV?$doug_lea_alloc@PAVIRender_Visual@@@@PAPAVIRender_Visual@@@Z ; std::_Normal_allocator_traits<doug_lea_alloc<IRender_Visual *> >::destroy<IRender_Visual *>
PUBLIC	?destroy@?$doug_lea_alloc@PAVIRender_Visual@@@@QAEXPAPAVIRender_Visual@@@Z ; doug_lea_alloc<IRender_Visual *>::destroy
PUBLIC	?size@?$svector@V?$resptr_core@USPass@@V?$resptr_base@USPass@@@@@@$01@@QBEIXZ ; svector<resptr_core<SPass,resptr_base<SPass> >,2>::size
PUBLIC	?begin@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ ; FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::begin
PUBLIC	?begin@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ ; FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::begin
PUBLIC	?begin@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ ; FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::begin
PUBLIC	?begin@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ ; FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::begin
PUBLIC	?begin@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ ; FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::begin
PUBLIC	?begin@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ ; FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::begin
PUBLIC	?begin@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ ; FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::begin
PUBLIC	?begin@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ ; FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::begin
PUBLIC	?deallocate@?$doug_lea_alloc@PAVIRender_Visual@@@@QBEXPAPAVIRender_Visual@@I@Z ; doug_lea_alloc<IRender_Visual *>::deallocate
PUBLIC	?deallocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@I@Z ; doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *>::deallocate
PUBLIC	?deallocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@I@Z ; doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *>::deallocate
PUBLIC	?deallocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@I@Z ; doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *>::deallocate
PUBLIC	?deallocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@I@Z ; doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *>::deallocate
PUBLIC	?deallocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@I@Z ; doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *>::deallocate
PUBLIC	?deallocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@I@Z ; doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *>::deallocate
PUBLIC	?deallocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@I@Z ; doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *>::deallocate
PUBLIC	?deallocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@I@Z ; doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *>::deallocate
PUBLIC	?deallocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@I@Z ; doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *>::deallocate
PUBLIC	?deallocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@I@Z ; doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *>::deallocate
PUBLIC	??$construct@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU34@@Z ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::construct<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * &>
PUBLIC	??$forward@AAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAAAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z ; std::forward<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * &>
PUBLIC	??$construct@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU34@@Z ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::construct<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * &>
PUBLIC	??$forward@AAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAAAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z ; std::forward<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * &>
PUBLIC	?construct@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@ABQAU23@@Z ; doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *>::construct
PUBLIC	?construct@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@ABQAU23@@Z ; doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *>::construct
PUBLIC	?construct@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@ABQAU23@@Z ; doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *>::construct
PUBLIC	?construct@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@ABQAU23@@Z ; doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *>::construct
PUBLIC	?construct@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@ABQAU23@@Z ; doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *>::construct
PUBLIC	?construct@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@ABQAU23@@Z ; doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *>::construct
PUBLIC	?construct@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@ABQAU23@@Z ; doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *>::construct
PUBLIC	?construct@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@ABQAU23@@Z ; doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *>::construct
PUBLIC	??$construct@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@$$QAPAU34@@Z ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::construct<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *>
PUBLIC	??$construct@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@$$QAPAU34@@Z ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::construct<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *>
PUBLIC	??$construct@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@$$QAPAU34@@Z ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::construct<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *>
PUBLIC	??$construct@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@$$QAPAU34@@Z ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::construct<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *>
PUBLIC	??$construct@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@$$QAPAU34@@Z ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::construct<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *>
PUBLIC	??$construct@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@$$QAPAU34@@Z ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::construct<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *>
PUBLIC	??$construct@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@$$QAPAU34@@Z ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::construct<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *>
PUBLIC	??$construct@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@$$QAPAU34@@Z ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::construct<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *>
PUBLIC	??$forward@AAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAAAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU12@@Z ; std::forward<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * * &>
PUBLIC	??$swap@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@$0A@@std@@YAXAAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; std::swap<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,0>
PUBLIC	??$_Med3_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z ; std::_Med3_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Pop_heap_hole_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@00$$QAPAU12@P6A_NPAU12@2@Z@Z ; std::_Pop_heap_hole_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Push_heap_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ; std::_Push_heap_by_index<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *)>
PUBLIC	??$forward@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z ; std::forward<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *>
PUBLIC	??$_Copy_backward_memmove@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z ; std::_Copy_backward_memmove<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *>
PUBLIC	??$forward@AAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAAAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU12@@Z ; std::forward<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * * &>
PUBLIC	??$swap@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@$0A@@std@@YAXAAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; std::swap<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,0>
PUBLIC	??$_Med3_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z ; std::_Med3_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Pop_heap_hole_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@00$$QAPAU12@P6A_NPAU12@2@Z@Z ; std::_Pop_heap_hole_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Push_heap_by_index@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ; std::_Push_heap_by_index<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *)>
PUBLIC	??$forward@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z ; std::forward<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *>
PUBLIC	??$_Copy_backward_memmove@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z ; std::_Copy_backward_memmove<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *>
PUBLIC	??$forward@AAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAAAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU12@@Z ; std::forward<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * * &>
PUBLIC	??$swap@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@$0A@@std@@YAXAAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; std::swap<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,0>
PUBLIC	??$_Med3_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z ; std::_Med3_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Pop_heap_hole_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@00$$QAPAU12@P6A_NPAU12@2@Z@Z ; std::_Pop_heap_hole_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Push_heap_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ; std::_Push_heap_by_index<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *)>
PUBLIC	??$forward@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z ; std::forward<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *>
PUBLIC	??$_Copy_backward_memmove@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z ; std::_Copy_backward_memmove<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *>
PUBLIC	??$forward@AAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAAAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU12@@Z ; std::forward<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * * &>
PUBLIC	??$swap@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@$0A@@std@@YAXAAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; std::swap<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,0>
PUBLIC	??$_Med3_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z ; std::_Med3_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Pop_heap_hole_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@00$$QAPAU12@P6A_NPAU12@2@Z@Z ; std::_Pop_heap_hole_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Push_heap_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ; std::_Push_heap_by_index<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *)>
PUBLIC	??$forward@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z ; std::forward<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *>
PUBLIC	??$_Copy_backward_memmove@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z ; std::_Copy_backward_memmove<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *>
PUBLIC	??$forward@AAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAAAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU12@@Z ; std::forward<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * * &>
PUBLIC	??$swap@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@$0A@@std@@YAXAAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; std::swap<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,0>
PUBLIC	??$_Med3_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z ; std::_Med3_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Pop_heap_hole_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@00$$QAPAU12@P6A_NPAU12@2@Z@Z ; std::_Pop_heap_hole_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Push_heap_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ; std::_Push_heap_by_index<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *)>
PUBLIC	??$forward@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z ; std::forward<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *>
PUBLIC	??$_Copy_backward_memmove@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z ; std::_Copy_backward_memmove<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *>
PUBLIC	??$forward@AAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAAAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU12@@Z ; std::forward<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * * &>
PUBLIC	??$swap@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@$0A@@std@@YAXAAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; std::swap<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,0>
PUBLIC	??$_Med3_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z ; std::_Med3_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Pop_heap_hole_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@00$$QAPAU12@P6A_NPAU12@2@Z@Z ; std::_Pop_heap_hole_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Push_heap_by_index@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ; std::_Push_heap_by_index<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *)>
PUBLIC	??$forward@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z ; std::forward<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *>
PUBLIC	??$_Copy_backward_memmove@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z ; std::_Copy_backward_memmove<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *>
PUBLIC	??$forward@AAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAAAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU12@@Z ; std::forward<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * * &>
PUBLIC	??$swap@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@$0A@@std@@YAXAAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; std::swap<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,0>
PUBLIC	??$_Med3_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z ; std::_Med3_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Pop_heap_hole_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@00$$QAPAU12@P6A_NPAU12@2@Z@Z ; std::_Pop_heap_hole_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Push_heap_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ; std::_Push_heap_by_index<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *)>
PUBLIC	??$forward@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z ; std::forward<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *>
PUBLIC	??$_Copy_backward_memmove@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z ; std::_Copy_backward_memmove<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *>
PUBLIC	??$forward@AAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAAAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU12@@Z ; std::forward<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * * &>
PUBLIC	??$swap@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@$0A@@std@@YAXAAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; std::swap<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,0>
PUBLIC	??$_Med3_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z ; std::_Med3_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Pop_heap_hole_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@00$$QAPAU12@P6A_NPAU12@2@Z@Z ; std::_Pop_heap_hole_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Push_heap_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ; std::_Push_heap_by_index<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *)>
PUBLIC	??$forward@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z ; std::forward<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *>
PUBLIC	??$_Copy_backward_memmove@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z ; std::_Copy_backward_memmove<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *>
PUBLIC	??$_Emplace_back@AAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXAAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Emplace_back<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * &>
PUBLIC	??$forward@AAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAAAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU12@@Z ; std::forward<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * * &>
PUBLIC	??$swap@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@$0A@@std@@YAXAAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; std::swap<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,0>
PUBLIC	??$_Med3_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z ; std::_Med3_unchecked<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Pop_heap_hole_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@00$$QAPAU12@P6A_NPAU12@2@Z@Z ; std::_Pop_heap_hole_unchecked<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Push_heap_by_index@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ; std::_Push_heap_by_index<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Emplace_back@AAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXAAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Emplace_back<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * &>
PUBLIC	??$forward@AAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAAAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU12@@Z ; std::forward<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * * &>
PUBLIC	??$swap@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@$0A@@std@@YAXAAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; std::swap<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,0>
PUBLIC	??$_Med3_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z ; std::_Med3_unchecked<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Pop_heap_hole_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@00$$QAPAU12@P6A_NPAU12@2@Z@Z ; std::_Pop_heap_hole_unchecked<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Push_heap_by_index@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ; std::_Push_heap_by_index<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *)>
PUBLIC	??$forward@AAPAU_MatrixItem@R_dsgraph@@@std@@YAAAPAU_MatrixItem@R_dsgraph@@AAPAU12@@Z ; std::forward<R_dsgraph::_MatrixItem * &>
PUBLIC	??$swap@U_MatrixItem@R_dsgraph@@$0A@@std@@YAXAAU_MatrixItem@R_dsgraph@@0@Z ; std::swap<R_dsgraph::_MatrixItem,0>
PUBLIC	??$_Med3_unchecked@PAU_MatrixItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_MatrixItem@R_dsgraph@@00P6A_NABU12@1@Z@Z ; std::_Med3_unchecked<R_dsgraph::_MatrixItem *,bool (__cdecl*)(R_dsgraph::_MatrixItem const &,R_dsgraph::_MatrixItem const &)>
PUBLIC	??$_Pop_heap_hole_unchecked@PAU_MatrixItem@R_dsgraph@@U12@P6A_NABU12@0@Z@std@@YAXPAU_MatrixItem@R_dsgraph@@00$$QAU12@P6A_NABU12@2@Z@Z ; std::_Pop_heap_hole_unchecked<R_dsgraph::_MatrixItem *,R_dsgraph::_MatrixItem,bool (__cdecl*)(R_dsgraph::_MatrixItem const &,R_dsgraph::_MatrixItem const &)>
PUBLIC	??$_Push_heap_by_index@PAU_MatrixItem@R_dsgraph@@U12@P6A_NABU12@0@Z@std@@YAXPAU_MatrixItem@R_dsgraph@@HH$$QAU12@P6A_NABU12@2@Z@Z ; std::_Push_heap_by_index<R_dsgraph::_MatrixItem *,R_dsgraph::_MatrixItem,bool (__cdecl*)(R_dsgraph::_MatrixItem const &,R_dsgraph::_MatrixItem const &)>
PUBLIC	??$_To_address@PAU_MatrixItem@R_dsgraph@@@std@@YA?A_PABQAU_MatrixItem@R_dsgraph@@@Z ; std::_To_address<R_dsgraph::_MatrixItem *>
PUBLIC	??$_Copy_backward_memmove@PAU_MatrixItem@R_dsgraph@@PAU12@@std@@YAPAU_MatrixItem@R_dsgraph@@PAU12@00@Z ; std::_Copy_backward_memmove<R_dsgraph::_MatrixItem *,R_dsgraph::_MatrixItem *>
PUBLIC	??$forward@AAPAU_NormalItem@R_dsgraph@@@std@@YAAAPAU_NormalItem@R_dsgraph@@AAPAU12@@Z ; std::forward<R_dsgraph::_NormalItem * &>
PUBLIC	??$swap@U_NormalItem@R_dsgraph@@$0A@@std@@YAXAAU_NormalItem@R_dsgraph@@0@Z ; std::swap<R_dsgraph::_NormalItem,0>
PUBLIC	??$_Med3_unchecked@PAU_NormalItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_NormalItem@R_dsgraph@@00P6A_NABU12@1@Z@Z ; std::_Med3_unchecked<R_dsgraph::_NormalItem *,bool (__cdecl*)(R_dsgraph::_NormalItem const &,R_dsgraph::_NormalItem const &)>
PUBLIC	??$_Pop_heap_hole_unchecked@PAU_NormalItem@R_dsgraph@@U12@P6A_NABU12@0@Z@std@@YAXPAU_NormalItem@R_dsgraph@@00$$QAU12@P6A_NABU12@2@Z@Z ; std::_Pop_heap_hole_unchecked<R_dsgraph::_NormalItem *,R_dsgraph::_NormalItem,bool (__cdecl*)(R_dsgraph::_NormalItem const &,R_dsgraph::_NormalItem const &)>
PUBLIC	??$_Push_heap_by_index@PAU_NormalItem@R_dsgraph@@U12@P6A_NABU12@0@Z@std@@YAXPAU_NormalItem@R_dsgraph@@HH$$QAU12@P6A_NABU12@2@Z@Z ; std::_Push_heap_by_index<R_dsgraph::_NormalItem *,R_dsgraph::_NormalItem,bool (__cdecl*)(R_dsgraph::_NormalItem const &,R_dsgraph::_NormalItem const &)>
PUBLIC	??$_To_address@PAU_NormalItem@R_dsgraph@@@std@@YA?A_PABQAU_NormalItem@R_dsgraph@@@Z ; std::_To_address<R_dsgraph::_NormalItem *>
PUBLIC	??$_Copy_backward_memmove@PAU_NormalItem@R_dsgraph@@PAU12@@std@@YAPAU_NormalItem@R_dsgraph@@PAU12@00@Z ; std::_Copy_backward_memmove<R_dsgraph::_NormalItem *,R_dsgraph::_NormalItem *>
PUBLIC	??$_Emplace_back@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEX$$QAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::_Emplace_back<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *>
PUBLIC	??$_Emplace_back@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEX$$QAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::_Emplace_back<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *>
PUBLIC	??$_Emplace_back@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEX$$QAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::_Emplace_back<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *>
PUBLIC	??$_Emplace_back@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEX$$QAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::_Emplace_back<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *>
PUBLIC	??$_Emplace_back@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEX$$QAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::_Emplace_back<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *>
PUBLIC	??$_Emplace_back@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEX$$QAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::_Emplace_back<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *>
PUBLIC	??$_Emplace_back@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEX$$QAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::_Emplace_back<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *>
PUBLIC	??$_Emplace_back@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEX$$QAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::_Emplace_back<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *>
PUBLIC	??$construct@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@$$V@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::construct<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *>
PUBLIC	??$construct@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@$$V@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::construct<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *>
PUBLIC	??$construct@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@$$V@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::construct<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *>
PUBLIC	??$construct@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@$$V@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::construct<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *>
PUBLIC	??$construct@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@$$V@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::construct<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *>
PUBLIC	??$construct@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@$$QAPAU34@@Z ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::construct<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *>
PUBLIC	??$forward@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z ; std::forward<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *>
PUBLIC	??$construct@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@$$V@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::construct<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *>
PUBLIC	??$construct@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@$$V@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::construct<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *>
PUBLIC	??$construct@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@$$V@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::construct<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *>
PUBLIC	??$construct@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@$$V@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::construct<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *>
PUBLIC	??$construct@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@$$V@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::construct<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *>
PUBLIC	??$construct@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@$$QAPAU34@@Z ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::construct<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *>
PUBLIC	??$forward@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z ; std::forward<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *>
PUBLIC	??$?0AAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU01@$0A@@?$pair@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@QAE@AAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; std::pair<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *>::pair<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *><FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * * &,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * * &,0>
PUBLIC	??$iter_swap@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; std::iter_swap<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *>
PUBLIC	??$_Next_iter@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z ; std::_Next_iter<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *>
PUBLIC	??$_Guess_median_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z ; std::_Guess_median_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Prev_iter@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z ; std::_Prev_iter<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *>
PUBLIC	??$_Pop_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z ; std::_Pop_heap_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ; std::_Pop_heap_hole_by_index<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Move_backward_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z ; std::_Move_backward_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *>
PUBLIC	??$move@AAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z ; std::move<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * &>
PUBLIC	??$?0AAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU01@$0A@@?$pair@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@QAE@AAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; std::pair<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *>::pair<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *><FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * * &,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * * &,0>
PUBLIC	??$iter_swap@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; std::iter_swap<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *>
PUBLIC	??$_Next_iter@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z ; std::_Next_iter<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *>
PUBLIC	??$_Guess_median_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z ; std::_Guess_median_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Prev_iter@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z ; std::_Prev_iter<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *>
PUBLIC	??$_Pop_heap_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z ; std::_Pop_heap_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ; std::_Pop_heap_hole_by_index<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Move_backward_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z ; std::_Move_backward_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *>
PUBLIC	??$move@AAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z ; std::move<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * &>
PUBLIC	??$?0AAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU01@$0A@@?$pair@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@QAE@AAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; std::pair<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *>::pair<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *><FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * * &,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * * &,0>
PUBLIC	??$iter_swap@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; std::iter_swap<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *>
PUBLIC	??$_Next_iter@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z ; std::_Next_iter<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *>
PUBLIC	??$_Guess_median_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z ; std::_Guess_median_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Prev_iter@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z ; std::_Prev_iter<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *>
PUBLIC	??$_Pop_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z ; std::_Pop_heap_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ; std::_Pop_heap_hole_by_index<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Move_backward_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z ; std::_Move_backward_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *>
PUBLIC	??$move@AAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z ; std::move<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * &>
PUBLIC	??$?0AAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU01@$0A@@?$pair@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@QAE@AAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; std::pair<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *>::pair<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *><FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * * &,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * * &,0>
PUBLIC	??$iter_swap@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; std::iter_swap<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *>
PUBLIC	??$_Next_iter@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z ; std::_Next_iter<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *>
PUBLIC	??$_Guess_median_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z ; std::_Guess_median_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Prev_iter@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z ; std::_Prev_iter<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *>
PUBLIC	??$_Pop_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z ; std::_Pop_heap_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ; std::_Pop_heap_hole_by_index<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Move_backward_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z ; std::_Move_backward_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *>
PUBLIC	??$move@AAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z ; std::move<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * &>
PUBLIC	??$?0AAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU01@$0A@@?$pair@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@QAE@AAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; std::pair<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *>::pair<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *><FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * * &,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * * &,0>
PUBLIC	??$iter_swap@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; std::iter_swap<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *>
PUBLIC	??$_Next_iter@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z ; std::_Next_iter<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *>
PUBLIC	??$_Guess_median_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z ; std::_Guess_median_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Prev_iter@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z ; std::_Prev_iter<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *>
PUBLIC	??$_Pop_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z ; std::_Pop_heap_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ; std::_Pop_heap_hole_by_index<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Move_backward_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z ; std::_Move_backward_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *>
PUBLIC	??$move@AAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z ; std::move<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * &>
PUBLIC	??$?0AAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU01@$0A@@?$pair@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@QAE@AAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; std::pair<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *>::pair<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *><FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * * &,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * * &,0>
PUBLIC	??$iter_swap@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; std::iter_swap<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *>
PUBLIC	??$_Next_iter@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z ; std::_Next_iter<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *>
PUBLIC	??$_Guess_median_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z ; std::_Guess_median_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Prev_iter@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z ; std::_Prev_iter<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *>
PUBLIC	??$_Pop_heap_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z ; std::_Pop_heap_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ; std::_Pop_heap_hole_by_index<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Move_backward_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z ; std::_Move_backward_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *>
PUBLIC	??$move@AAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z ; std::move<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * &>
PUBLIC	??$?0AAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU01@$0A@@?$pair@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@QAE@AAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; std::pair<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *>::pair<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *><FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * * &,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * * &,0>
PUBLIC	??$iter_swap@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; std::iter_swap<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *>
PUBLIC	??$_Next_iter@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z ; std::_Next_iter<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *>
PUBLIC	??$_Guess_median_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z ; std::_Guess_median_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Prev_iter@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z ; std::_Prev_iter<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *>
PUBLIC	??$_Pop_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z ; std::_Pop_heap_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ; std::_Pop_heap_hole_by_index<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Move_backward_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z ; std::_Move_backward_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *>
PUBLIC	??$move@AAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z ; std::move<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * &>
PUBLIC	??$?0AAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU01@$0A@@?$pair@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@QAE@AAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; std::pair<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *>::pair<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *><FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * * &,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * * &,0>
PUBLIC	??$iter_swap@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; std::iter_swap<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *>
PUBLIC	??$_Next_iter@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z ; std::_Next_iter<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *>
PUBLIC	??$_Guess_median_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z ; std::_Guess_median_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Prev_iter@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z ; std::_Prev_iter<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *>
PUBLIC	??$_Pop_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z ; std::_Pop_heap_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ; std::_Pop_heap_hole_by_index<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Move_backward_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z ; std::_Move_backward_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *>
PUBLIC	??$move@AAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z ; std::move<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * &>
PUBLIC	??$_Copy_memmove@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z ; std::_Copy_memmove<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *>
PUBLIC	??$_Copy_backward_memmove@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z ; std::_Copy_backward_memmove<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *>
PUBLIC	??$_Uninitialized_copy@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0PAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ; std::_Uninitialized_copy<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >
PUBLIC	??$?0AAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU01@$0A@@?$pair@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@QAE@AAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; std::pair<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *>::pair<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *><FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * * &,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * * &,0>
PUBLIC	??$iter_swap@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; std::iter_swap<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *>
PUBLIC	??$_Next_iter@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z ; std::_Next_iter<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *>
PUBLIC	??$_Guess_median_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z ; std::_Guess_median_unchecked<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Prev_iter@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z ; std::_Prev_iter<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *>
PUBLIC	??$_Pop_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z ; std::_Pop_heap_unchecked<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ; std::_Pop_heap_hole_by_index<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Copy_memmove@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z ; std::_Copy_memmove<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *>
PUBLIC	??$_Copy_backward_memmove@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z ; std::_Copy_backward_memmove<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *>
PUBLIC	??$_Uninitialized_copy@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0PAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ; std::_Uninitialized_copy<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >
PUBLIC	??$?0AAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU01@$0A@@?$pair@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@QAE@AAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; std::pair<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *>::pair<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *><FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * * &,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * * &,0>
PUBLIC	??$iter_swap@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; std::iter_swap<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *>
PUBLIC	??$_Next_iter@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z ; std::_Next_iter<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *>
PUBLIC	??$_Guess_median_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z ; std::_Guess_median_unchecked<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Prev_iter@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z ; std::_Prev_iter<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *>
PUBLIC	??$_Pop_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z ; std::_Pop_heap_unchecked<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ; std::_Pop_heap_hole_by_index<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *)>
PUBLIC	??$?RAAU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@AAU01@@?$less@X@std@@QBE_NAAU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@1@0@Z ; std::less<void>::operator()<std::pair<unsigned int,resptr_core<CTexture,resptrcode_texture> > &,std::pair<unsigned int,resptr_core<CTexture,resptrcode_texture> > &>
PUBLIC	??$?0AAPAU_MatrixItem@R_dsgraph@@AAPAU01@$0A@@?$pair@PAU_MatrixItem@R_dsgraph@@PAU12@@std@@QAE@AAPAU_MatrixItem@R_dsgraph@@0@Z ; std::pair<R_dsgraph::_MatrixItem *,R_dsgraph::_MatrixItem *>::pair<R_dsgraph::_MatrixItem *,R_dsgraph::_MatrixItem *><R_dsgraph::_MatrixItem * &,R_dsgraph::_MatrixItem * &,0>
PUBLIC	??$iter_swap@PAU_MatrixItem@R_dsgraph@@PAU12@@std@@YAXPAU_MatrixItem@R_dsgraph@@0@Z ; std::iter_swap<R_dsgraph::_MatrixItem *,R_dsgraph::_MatrixItem *>
PUBLIC	??$_Next_iter@PAU_MatrixItem@R_dsgraph@@@std@@YAPAU_MatrixItem@R_dsgraph@@PAU12@@Z ; std::_Next_iter<R_dsgraph::_MatrixItem *>
PUBLIC	??$_Guess_median_unchecked@PAU_MatrixItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_MatrixItem@R_dsgraph@@00P6A_NABU12@1@Z@Z ; std::_Guess_median_unchecked<R_dsgraph::_MatrixItem *,bool (__cdecl*)(R_dsgraph::_MatrixItem const &,R_dsgraph::_MatrixItem const &)>
PUBLIC	??$_Prev_iter@PAU_MatrixItem@R_dsgraph@@@std@@YAPAU_MatrixItem@R_dsgraph@@PAU12@@Z ; std::_Prev_iter<R_dsgraph::_MatrixItem *>
PUBLIC	??$_Pop_heap_unchecked@PAU_MatrixItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_MatrixItem@R_dsgraph@@0P6A_NABU12@1@Z@Z ; std::_Pop_heap_unchecked<R_dsgraph::_MatrixItem *,bool (__cdecl*)(R_dsgraph::_MatrixItem const &,R_dsgraph::_MatrixItem const &)>
PUBLIC	??$_Pop_heap_hole_by_index@PAU_MatrixItem@R_dsgraph@@U12@P6A_NABU12@0@Z@std@@YAXPAU_MatrixItem@R_dsgraph@@HH$$QAU12@P6A_NABU12@2@Z@Z ; std::_Pop_heap_hole_by_index<R_dsgraph::_MatrixItem *,R_dsgraph::_MatrixItem,bool (__cdecl*)(R_dsgraph::_MatrixItem const &,R_dsgraph::_MatrixItem const &)>
PUBLIC	??$_Move_backward_unchecked@PAU_MatrixItem@R_dsgraph@@PAU12@@std@@YAPAU_MatrixItem@R_dsgraph@@PAU12@00@Z ; std::_Move_backward_unchecked<R_dsgraph::_MatrixItem *,R_dsgraph::_MatrixItem *>
PUBLIC	??$?0AAPAU_NormalItem@R_dsgraph@@AAPAU01@$0A@@?$pair@PAU_NormalItem@R_dsgraph@@PAU12@@std@@QAE@AAPAU_NormalItem@R_dsgraph@@0@Z ; std::pair<R_dsgraph::_NormalItem *,R_dsgraph::_NormalItem *>::pair<R_dsgraph::_NormalItem *,R_dsgraph::_NormalItem *><R_dsgraph::_NormalItem * &,R_dsgraph::_NormalItem * &,0>
PUBLIC	??$iter_swap@PAU_NormalItem@R_dsgraph@@PAU12@@std@@YAXPAU_NormalItem@R_dsgraph@@0@Z ; std::iter_swap<R_dsgraph::_NormalItem *,R_dsgraph::_NormalItem *>
PUBLIC	??$_Next_iter@PAU_NormalItem@R_dsgraph@@@std@@YAPAU_NormalItem@R_dsgraph@@PAU12@@Z ; std::_Next_iter<R_dsgraph::_NormalItem *>
PUBLIC	??$_Guess_median_unchecked@PAU_NormalItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_NormalItem@R_dsgraph@@00P6A_NABU12@1@Z@Z ; std::_Guess_median_unchecked<R_dsgraph::_NormalItem *,bool (__cdecl*)(R_dsgraph::_NormalItem const &,R_dsgraph::_NormalItem const &)>
PUBLIC	??$_Prev_iter@PAU_NormalItem@R_dsgraph@@@std@@YAPAU_NormalItem@R_dsgraph@@PAU12@@Z ; std::_Prev_iter<R_dsgraph::_NormalItem *>
PUBLIC	??$_Pop_heap_unchecked@PAU_NormalItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_NormalItem@R_dsgraph@@0P6A_NABU12@1@Z@Z ; std::_Pop_heap_unchecked<R_dsgraph::_NormalItem *,bool (__cdecl*)(R_dsgraph::_NormalItem const &,R_dsgraph::_NormalItem const &)>
PUBLIC	??$_Pop_heap_hole_by_index@PAU_NormalItem@R_dsgraph@@U12@P6A_NABU12@0@Z@std@@YAXPAU_NormalItem@R_dsgraph@@HH$$QAU12@P6A_NABU12@2@Z@Z ; std::_Pop_heap_hole_by_index<R_dsgraph::_NormalItem *,R_dsgraph::_NormalItem,bool (__cdecl*)(R_dsgraph::_NormalItem const &,R_dsgraph::_NormalItem const &)>
PUBLIC	??$_Move_backward_unchecked@PAU_NormalItem@R_dsgraph@@PAU12@@std@@YAPAU_NormalItem@R_dsgraph@@PAU12@00@Z ; std::_Move_backward_unchecked<R_dsgraph::_NormalItem *,R_dsgraph::_NormalItem *>
PUBLIC	??$_Get_unwrapped@ABQAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_TABQAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; std::_Get_unwrapped<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * * const &>
PUBLIC	??$_Uninitialized_move@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0PAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ; std::_Uninitialized_move<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >
PUBLIC	??$_Get_unwrapped@ABQAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_TABQAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; std::_Get_unwrapped<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * * const &>
PUBLIC	??$_Uninitialized_move@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0PAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ; std::_Uninitialized_move<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >
PUBLIC	??$_Get_unwrapped@ABQAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_TABQAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; std::_Get_unwrapped<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * * const &>
PUBLIC	??$_Uninitialized_move@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0PAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ; std::_Uninitialized_move<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >
PUBLIC	??$_Get_unwrapped@ABQAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_TABQAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; std::_Get_unwrapped<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * * const &>
PUBLIC	??$_Uninitialized_move@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0PAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ; std::_Uninitialized_move<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >
PUBLIC	??$_Get_unwrapped@ABQAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_TABQAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; std::_Get_unwrapped<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * * const &>
PUBLIC	??$_Uninitialized_move@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0PAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ; std::_Uninitialized_move<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >
PUBLIC	??$_Get_unwrapped@ABQAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_TABQAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; std::_Get_unwrapped<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * * const &>
PUBLIC	??$_Uninitialized_move@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0PAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ; std::_Uninitialized_move<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >
PUBLIC	??$_Get_unwrapped@ABQAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_TABQAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; std::_Get_unwrapped<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * * const &>
PUBLIC	??$_Uninitialized_move@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0PAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ; std::_Uninitialized_move<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >
PUBLIC	??$_Get_unwrapped@ABQAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_TABQAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; std::_Get_unwrapped<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * * const &>
PUBLIC	??$_Uninitialized_move@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0PAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ; std::_Uninitialized_move<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >
PUBLIC	??$_Unfancy@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@std@@YAPAU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@0@PAU10@@Z ; std::_Unfancy<std::pair<unsigned int,resptr_core<CTexture,resptrcode_texture> > >
PUBLIC	??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::_Emplace_back<>
PUBLIC	??$_To_address@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_PABQAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; std::_To_address<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *>
PUBLIC	??$_Zero_range@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0@Z ; std::_Zero_range<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *>
PUBLIC	??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::_Emplace_back<>
PUBLIC	??$_To_address@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_PABQAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; std::_To_address<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *>
PUBLIC	??$_Zero_range@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0@Z ; std::_Zero_range<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *>
PUBLIC	??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::_Emplace_back<>
PUBLIC	??$_To_address@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_PABQAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; std::_To_address<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *>
PUBLIC	??$_Zero_range@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0@Z ; std::_Zero_range<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *>
PUBLIC	??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::_Emplace_back<>
PUBLIC	??$_To_address@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_PABQAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; std::_To_address<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *>
PUBLIC	??$_Zero_range@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0@Z ; std::_Zero_range<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *>
PUBLIC	??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Emplace_back<>
PUBLIC	??$_To_address@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_PABQAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; std::_To_address<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *>
PUBLIC	??$_Zero_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0@Z ; std::_Zero_range<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *>
PUBLIC	??$_Emplace_back@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEX$$QAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Emplace_back<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *>
PUBLIC	??$move@AAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z ; std::move<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * &>
PUBLIC	??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::_Emplace_back<>
PUBLIC	??$_To_address@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_PABQAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; std::_To_address<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *>
PUBLIC	??$_Zero_range@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0@Z ; std::_Zero_range<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *>
PUBLIC	??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::_Emplace_back<>
PUBLIC	??$_To_address@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_PABQAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; std::_To_address<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *>
PUBLIC	??$_Zero_range@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0@Z ; std::_Zero_range<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *>
PUBLIC	??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::_Emplace_back<>
PUBLIC	??$_To_address@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_PABQAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; std::_To_address<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *>
PUBLIC	??$_Zero_range@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0@Z ; std::_Zero_range<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *>
PUBLIC	??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::_Emplace_back<>
PUBLIC	??$_To_address@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_PABQAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; std::_To_address<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *>
PUBLIC	??$_Zero_range@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0@Z ; std::_Zero_range<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *>
PUBLIC	??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Emplace_back<>
PUBLIC	??$_To_address@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_PABQAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; std::_To_address<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *>
PUBLIC	??$_Zero_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0@Z ; std::_Zero_range<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *>
PUBLIC	??$_Emplace_back@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEX$$QAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Emplace_back<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *>
PUBLIC	??$move@AAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z ; std::move<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * &>
PUBLIC	??$_Emplace_back@PAVIRender_Visual@@@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAEX$$QAPAVIRender_Visual@@@Z ; std::_Uninitialized_backout_al<doug_lea_alloc<IRender_Visual *> >::_Emplace_back<IRender_Visual *>
PUBLIC	??$_Partition_by_median_guess_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YA?AU?$pair@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@0@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU23@1@Z@Z ; std::_Partition_by_median_guess_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Sort_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z ; std::_Sort_heap_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Make_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z ; std::_Make_heap_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Insertion_sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0P6A_NPAU12@1@Z@Z ; std::_Insertion_sort_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Partition_by_median_guess_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YA?AU?$pair@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@0@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU23@1@Z@Z ; std::_Partition_by_median_guess_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Sort_heap_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z ; std::_Sort_heap_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Make_heap_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z ; std::_Make_heap_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Insertion_sort_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0P6A_NPAU12@1@Z@Z ; std::_Insertion_sort_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Partition_by_median_guess_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YA?AU?$pair@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@0@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU23@1@Z@Z ; std::_Partition_by_median_guess_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Sort_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z ; std::_Sort_heap_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Make_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z ; std::_Make_heap_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Insertion_sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0P6A_NPAU12@1@Z@Z ; std::_Insertion_sort_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Partition_by_median_guess_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YA?AU?$pair@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@0@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU23@1@Z@Z ; std::_Partition_by_median_guess_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Sort_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z ; std::_Sort_heap_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Make_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z ; std::_Make_heap_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Insertion_sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0P6A_NPAU12@1@Z@Z ; std::_Insertion_sort_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Partition_by_median_guess_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YA?AU?$pair@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@0@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU23@1@Z@Z ; std::_Partition_by_median_guess_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Sort_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z ; std::_Sort_heap_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Make_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z ; std::_Make_heap_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Insertion_sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0P6A_NPAU12@1@Z@Z ; std::_Insertion_sort_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Partition_by_median_guess_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YA?AU?$pair@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@0@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU23@1@Z@Z ; std::_Partition_by_median_guess_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Sort_heap_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z ; std::_Sort_heap_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Make_heap_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z ; std::_Make_heap_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Insertion_sort_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0P6A_NPAU12@1@Z@Z ; std::_Insertion_sort_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Partition_by_median_guess_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YA?AU?$pair@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@0@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU23@1@Z@Z ; std::_Partition_by_median_guess_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Sort_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z ; std::_Sort_heap_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Make_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z ; std::_Make_heap_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Insertion_sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0P6A_NPAU12@1@Z@Z ; std::_Insertion_sort_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Partition_by_median_guess_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YA?AU?$pair@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@0@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU23@1@Z@Z ; std::_Partition_by_median_guess_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Sort_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z ; std::_Sort_heap_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Make_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z ; std::_Make_heap_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Insertion_sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0P6A_NPAU12@1@Z@Z ; std::_Insertion_sort_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Move_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z ; std::_Move_unchecked<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *>
PUBLIC	??$_Move_backward_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z ; std::_Move_backward_unchecked<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *>
PUBLIC	??$_Ucopy@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU23@00@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Ucopy<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *>
PUBLIC	??$distance@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAHPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; std::distance<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *>
PUBLIC	??$_Partition_by_median_guess_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YA?AU?$pair@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@0@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU23@1@Z@Z ; std::_Partition_by_median_guess_unchecked<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Sort_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z ; std::_Sort_heap_unchecked<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Make_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z ; std::_Make_heap_unchecked<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Insertion_sort_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0P6A_NPAU12@1@Z@Z ; std::_Insertion_sort_unchecked<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Move_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z ; std::_Move_unchecked<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *>
PUBLIC	??$_Move_backward_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z ; std::_Move_backward_unchecked<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *>
PUBLIC	??$_Ucopy@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU23@00@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Ucopy<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *>
PUBLIC	??$distance@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAHPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; std::distance<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *>
PUBLIC	??$_Partition_by_median_guess_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YA?AU?$pair@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@0@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU23@1@Z@Z ; std::_Partition_by_median_guess_unchecked<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Sort_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z ; std::_Sort_heap_unchecked<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Make_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z ; std::_Make_heap_unchecked<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Insertion_sort_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0P6A_NPAU12@1@Z@Z ; std::_Insertion_sort_unchecked<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Lex_compare_unchecked@PAU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@PAU12@U?$less@X@2@@std@@YA_NPAU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@0@000U?$less@X@0@U?$_Lex_compare_optimize@X@0@@Z ; std::_Lex_compare_unchecked<std::pair<unsigned int,resptr_core<CTexture,resptrcode_texture> > *,std::pair<unsigned int,resptr_core<CTexture,resptrcode_texture> > *,std::less<void> >
PUBLIC	??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@std@@@std@@@0@0@Z ; std::_Adl_verify_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<unsigned int,resptr_core<CTexture,resptrcode_texture> > > > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<unsigned int,resptr_core<CTexture,resptrcode_texture> > > > > >
PUBLIC	??$_Partition_by_median_guess_unchecked@PAU_MatrixItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YA?AU?$pair@PAU_MatrixItem@R_dsgraph@@PAU12@@0@PAU_MatrixItem@R_dsgraph@@0P6A_NABU23@1@Z@Z ; std::_Partition_by_median_guess_unchecked<R_dsgraph::_MatrixItem *,bool (__cdecl*)(R_dsgraph::_MatrixItem const &,R_dsgraph::_MatrixItem const &)>
PUBLIC	??$_Sort_heap_unchecked@PAU_MatrixItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_MatrixItem@R_dsgraph@@0P6A_NABU12@1@Z@Z ; std::_Sort_heap_unchecked<R_dsgraph::_MatrixItem *,bool (__cdecl*)(R_dsgraph::_MatrixItem const &,R_dsgraph::_MatrixItem const &)>
PUBLIC	??$_Make_heap_unchecked@PAU_MatrixItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_MatrixItem@R_dsgraph@@0P6A_NABU12@1@Z@Z ; std::_Make_heap_unchecked<R_dsgraph::_MatrixItem *,bool (__cdecl*)(R_dsgraph::_MatrixItem const &,R_dsgraph::_MatrixItem const &)>
PUBLIC	??$_Insertion_sort_unchecked@PAU_MatrixItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAPAU_MatrixItem@R_dsgraph@@QAU12@0P6A_NABU12@1@Z@Z ; std::_Insertion_sort_unchecked<R_dsgraph::_MatrixItem *,bool (__cdecl*)(R_dsgraph::_MatrixItem const &,R_dsgraph::_MatrixItem const &)>
PUBLIC	??$_Partition_by_median_guess_unchecked@PAU_NormalItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YA?AU?$pair@PAU_NormalItem@R_dsgraph@@PAU12@@0@PAU_NormalItem@R_dsgraph@@0P6A_NABU23@1@Z@Z ; std::_Partition_by_median_guess_unchecked<R_dsgraph::_NormalItem *,bool (__cdecl*)(R_dsgraph::_NormalItem const &,R_dsgraph::_NormalItem const &)>
PUBLIC	??$_Sort_heap_unchecked@PAU_NormalItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_NormalItem@R_dsgraph@@0P6A_NABU12@1@Z@Z ; std::_Sort_heap_unchecked<R_dsgraph::_NormalItem *,bool (__cdecl*)(R_dsgraph::_NormalItem const &,R_dsgraph::_NormalItem const &)>
PUBLIC	??$_Make_heap_unchecked@PAU_NormalItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_NormalItem@R_dsgraph@@0P6A_NABU12@1@Z@Z ; std::_Make_heap_unchecked<R_dsgraph::_NormalItem *,bool (__cdecl*)(R_dsgraph::_NormalItem const &,R_dsgraph::_NormalItem const &)>
PUBLIC	??$_Insertion_sort_unchecked@PAU_NormalItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAPAU_NormalItem@R_dsgraph@@QAU12@0P6A_NABU12@1@Z@Z ; std::_Insertion_sort_unchecked<R_dsgraph::_NormalItem *,bool (__cdecl*)(R_dsgraph::_NormalItem const &,R_dsgraph::_NormalItem const &)>
PUBLIC	?max_size@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEIXZ ; doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *>::max_size
PUBLIC	?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QBEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ; std::_Compressed_pair<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *>,std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >,1>::_Get_first
PUBLIC	?max_size@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEIXZ ; doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *>::max_size
PUBLIC	?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QBEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ; std::_Compressed_pair<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *>,std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >,1>::_Get_first
PUBLIC	?max_size@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEIXZ ; doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *>::max_size
PUBLIC	?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QBEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ; std::_Compressed_pair<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *>,std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >,1>::_Get_first
PUBLIC	?max_size@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEIXZ ; doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *>::max_size
PUBLIC	?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QBEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ; std::_Compressed_pair<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *>,std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >,1>::_Get_first
PUBLIC	?max_size@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEIXZ ; doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *>::max_size
PUBLIC	?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QBEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ; std::_Compressed_pair<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *>,std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >,1>::_Get_first
PUBLIC	?max_size@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEIXZ ; doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *>::max_size
PUBLIC	?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QBEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ; std::_Compressed_pair<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *>,std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >,1>::_Get_first
PUBLIC	?max_size@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEIXZ ; doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *>::max_size
PUBLIC	?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QBEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ; std::_Compressed_pair<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *>,std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >,1>::_Get_first
PUBLIC	?max_size@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEIXZ ; doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *>::max_size
PUBLIC	?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QBEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ; std::_Compressed_pair<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *>,std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >,1>::_Get_first
PUBLIC	?max_size@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAIABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::max_size
PUBLIC	?capacity@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::capacity
PUBLIC	?_Umove_if_noexcept1@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@00U?$integral_constant@_N$00@2@@Z ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::_Umove_if_noexcept1
PUBLIC	?_Getal@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::_Getal
PUBLIC	?max_size@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAIABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::max_size
PUBLIC	?capacity@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::capacity
PUBLIC	?_Umove_if_noexcept1@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@00U?$integral_constant@_N$00@2@@Z ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::_Umove_if_noexcept1
PUBLIC	?_Getal@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::_Getal
PUBLIC	?max_size@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAIABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::max_size
PUBLIC	?capacity@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::capacity
PUBLIC	?_Umove_if_noexcept1@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@00U?$integral_constant@_N$00@2@@Z ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::_Umove_if_noexcept1
PUBLIC	?_Getal@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::_Getal
PUBLIC	?max_size@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAIABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::max_size
PUBLIC	?capacity@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::capacity
PUBLIC	?_Umove_if_noexcept1@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@00U?$integral_constant@_N$00@2@@Z ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::_Umove_if_noexcept1
PUBLIC	?_Getal@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::_Getal
PUBLIC	?max_size@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAIABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::max_size
PUBLIC	?capacity@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::capacity
PUBLIC	?_Umove_if_noexcept1@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@00U?$integral_constant@_N$00@2@@Z ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::_Umove_if_noexcept1
PUBLIC	?_Getal@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::_Getal
PUBLIC	?max_size@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAIABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::max_size
PUBLIC	?capacity@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::capacity
PUBLIC	?_Umove_if_noexcept1@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@00U?$integral_constant@_N$00@2@@Z ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::_Umove_if_noexcept1
PUBLIC	?_Getal@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::_Getal
PUBLIC	?max_size@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAIABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::max_size
PUBLIC	?capacity@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::capacity
PUBLIC	?_Umove_if_noexcept1@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@00U?$integral_constant@_N$00@2@@Z ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::_Umove_if_noexcept1
PUBLIC	?_Getal@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::_Getal
PUBLIC	?max_size@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAIABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::max_size
PUBLIC	?capacity@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::capacity
PUBLIC	?_Umove_if_noexcept1@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@00U?$integral_constant@_N$00@2@@Z ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::_Umove_if_noexcept1
PUBLIC	?_Getal@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::_Getal
PUBLIC	?allocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@IPBX@Z ; doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *>::allocate
PUBLIC	?max_size@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::max_size
PUBLIC	?_Umove_if_noexcept@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@00@Z ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::_Umove_if_noexcept
PUBLIC	?_Calculate_growth@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEII@Z ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::_Calculate_growth
PUBLIC	?_Change_array@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXQAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@II@Z ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::_Change_array
PUBLIC	?_Xlength@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@CAXXZ ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::_Xlength
PUBLIC	?allocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@IPBX@Z ; doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *>::allocate
PUBLIC	?max_size@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::max_size
PUBLIC	?_Umove_if_noexcept@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@00@Z ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::_Umove_if_noexcept
PUBLIC	?_Calculate_growth@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEII@Z ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::_Calculate_growth
PUBLIC	?_Change_array@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXQAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@II@Z ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::_Change_array
PUBLIC	?_Xlength@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@CAXXZ ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::_Xlength
PUBLIC	?allocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@IPBX@Z ; doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *>::allocate
PUBLIC	?max_size@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::max_size
PUBLIC	?_Umove_if_noexcept@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@00@Z ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::_Umove_if_noexcept
PUBLIC	?_Calculate_growth@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEII@Z ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::_Calculate_growth
PUBLIC	?_Change_array@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXQAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@II@Z ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::_Change_array
PUBLIC	?_Xlength@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@CAXXZ ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::_Xlength
PUBLIC	?allocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@IPBX@Z ; doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *>::allocate
PUBLIC	?max_size@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::max_size
PUBLIC	?_Umove_if_noexcept@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@00@Z ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::_Umove_if_noexcept
PUBLIC	?_Calculate_growth@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEII@Z ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::_Calculate_growth
PUBLIC	?_Change_array@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXQAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@II@Z ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::_Change_array
PUBLIC	?_Xlength@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@CAXXZ ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::_Xlength
PUBLIC	?allocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@IPBX@Z ; doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *>::allocate
PUBLIC	?max_size@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::max_size
PUBLIC	?_Umove_if_noexcept@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@00@Z ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::_Umove_if_noexcept
PUBLIC	?_Calculate_growth@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEII@Z ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::_Calculate_growth
PUBLIC	?_Change_array@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXQAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@II@Z ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::_Change_array
PUBLIC	?_Xlength@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@CAXXZ ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::_Xlength
PUBLIC	?allocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@IPBX@Z ; doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *>::allocate
PUBLIC	?max_size@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::max_size
PUBLIC	?_Umove_if_noexcept@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@00@Z ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::_Umove_if_noexcept
PUBLIC	?_Calculate_growth@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEII@Z ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::_Calculate_growth
PUBLIC	?_Change_array@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXQAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@II@Z ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::_Change_array
PUBLIC	?_Xlength@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@CAXXZ ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::_Xlength
PUBLIC	?allocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@IPBX@Z ; doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *>::allocate
PUBLIC	?max_size@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::max_size
PUBLIC	?_Umove_if_noexcept@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@00@Z ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::_Umove_if_noexcept
PUBLIC	?_Calculate_growth@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEII@Z ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::_Calculate_growth
PUBLIC	?_Change_array@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXQAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@II@Z ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::_Change_array
PUBLIC	?_Xlength@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@CAXXZ ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::_Xlength
PUBLIC	?allocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@IPBX@Z ; doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *>::allocate
PUBLIC	?max_size@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::max_size
PUBLIC	?_Umove_if_noexcept@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@00@Z ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::_Umove_if_noexcept
PUBLIC	?_Calculate_growth@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEII@Z ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::_Calculate_growth
PUBLIC	?_Change_array@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXQAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@II@Z ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::_Change_array
PUBLIC	?_Xlength@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@CAXXZ ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::_Xlength
PUBLIC	?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@std@@@std@@@std@@QBEPAU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@2@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<unsigned int,resptr_core<CTexture,resptrcode_texture> > > > >::_Unwrapped
PUBLIC	??R?$less@PAVCTexture@@@std@@QBE_NABQAVCTexture@@0@Z ; std::less<CTexture *>::operator()
PUBLIC	??0?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAE@PAPAVIRender_Visual@@AAV?$doug_lea_alloc@PAVIRender_Visual@@@@@Z ; std::_Uninitialized_backout_al<doug_lea_alloc<IRender_Visual *> >::_Uninitialized_backout_al<doug_lea_alloc<IRender_Visual *> >
PUBLIC	??1?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<doug_lea_alloc<IRender_Visual *> >::~_Uninitialized_backout_al<doug_lea_alloc<IRender_Visual *> >
PUBLIC	?_Release@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAEPAPAVIRender_Visual@@XZ ; std::_Uninitialized_backout_al<doug_lea_alloc<IRender_Visual *> >::_Release
PUBLIC	??0?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >
PUBLIC	??1?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::~_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >
PUBLIC	?_Release@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@XZ ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Release
PUBLIC	??0?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >
PUBLIC	??1?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::~_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >
PUBLIC	?_Release@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@XZ ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::_Release
PUBLIC	??0?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >
PUBLIC	??1?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::~_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >
PUBLIC	?_Release@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@XZ ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::_Release
PUBLIC	??0?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >
PUBLIC	??1?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::~_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >
PUBLIC	?_Release@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@XZ ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::_Release
PUBLIC	??0?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >
PUBLIC	??1?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::~_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >
PUBLIC	?_Release@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@XZ ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::_Release
PUBLIC	??0?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >
PUBLIC	??1?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::~_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >
PUBLIC	?_Release@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@XZ ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Release
PUBLIC	??0?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >
PUBLIC	??1?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::~_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >
PUBLIC	?_Release@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@XZ ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::_Release
PUBLIC	??0?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >
PUBLIC	??1?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::~_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >
PUBLIC	?_Release@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@XZ ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::_Release
PUBLIC	??0?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >
PUBLIC	??1?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::~_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >
PUBLIC	?_Release@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@XZ ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::_Release
PUBLIC	??0?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >
PUBLIC	??1?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::~_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >
PUBLIC	?_Release@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@XZ ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::_Release
PUBLIC	??$_Uninitialized_value_construct_n@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@IAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ; std::_Uninitialized_value_construct_n<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >
PUBLIC	??$_Uninitialized_value_construct_n@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@IAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ; std::_Uninitialized_value_construct_n<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >
PUBLIC	??$_Uninitialized_value_construct_n@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@IAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ; std::_Uninitialized_value_construct_n<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >
PUBLIC	??$_Uninitialized_value_construct_n@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@IAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ; std::_Uninitialized_value_construct_n<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >
PUBLIC	??$_Uninitialized_value_construct_n@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@IAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ; std::_Uninitialized_value_construct_n<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >
PUBLIC	??$_Get_unwrapped@ABQAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_TABQAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; std::_Get_unwrapped<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * * const &>
PUBLIC	??$_Uninitialized_move@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0PAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ; std::_Uninitialized_move<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >
PUBLIC	??$_Uninitialized_value_construct_n@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@IAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ; std::_Uninitialized_value_construct_n<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >
PUBLIC	??$_Uninitialized_value_construct_n@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@IAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ; std::_Uninitialized_value_construct_n<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >
PUBLIC	??$_Uninitialized_value_construct_n@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@IAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ; std::_Uninitialized_value_construct_n<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >
PUBLIC	??$_Uninitialized_value_construct_n@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@IAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ; std::_Uninitialized_value_construct_n<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >
PUBLIC	??$_Uninitialized_value_construct_n@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@IAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ; std::_Uninitialized_value_construct_n<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >
PUBLIC	??$_Get_unwrapped@ABQAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_TABQAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; std::_Get_unwrapped<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * * const &>
PUBLIC	??$_Uninitialized_move@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0PAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ; std::_Uninitialized_move<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >
PUBLIC	??$_Uninitialized_move@PAPAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@YAPAPAVIRender_Visual@@QAPAV1@0PAPAV1@AAV?$doug_lea_alloc@PAVIRender_Visual@@@@@Z ; std::_Uninitialized_move<IRender_Visual * *,doug_lea_alloc<IRender_Visual *> >
PUBLIC	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::_Resize_reallocate<std::_Value_init_tag>
PUBLIC	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::_Resize_reallocate<std::_Value_init_tag>
PUBLIC	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::_Resize_reallocate<std::_Value_init_tag>
PUBLIC	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::_Resize_reallocate<std::_Value_init_tag>
PUBLIC	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Resize_reallocate<std::_Value_init_tag>
PUBLIC	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::_Resize_reallocate<std::_Value_init_tag>
PUBLIC	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::_Resize_reallocate<std::_Value_init_tag>
PUBLIC	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::_Resize_reallocate<std::_Value_init_tag>
PUBLIC	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::_Resize_reallocate<std::_Value_init_tag>
PUBLIC	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Resize_reallocate<std::_Value_init_tag>
PUBLIC	??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z ; std::_Sort_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Pass_fn@P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@Z$0A@@std@@YAP6A_NPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@ZP6A_N00@Z@Z ; std::_Pass_fn<bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *),0>
PUBLIC	??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0@Z ; std::_Adl_verify_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> > > >
PUBLIC	??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z ; std::_Sort_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Pass_fn@P6A_NPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@0@Z$0A@@std@@YAP6A_NPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@0@ZP6A_N00@Z@Z ; std::_Pass_fn<bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *),0>
PUBLIC	??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0@Z ; std::_Adl_verify_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> > > >
PUBLIC	??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z ; std::_Sort_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Pass_fn@P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z$0A@@std@@YAP6A_NPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@0@ZP6A_N00@Z@Z ; std::_Pass_fn<bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *),0>
PUBLIC	??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0@Z ; std::_Adl_verify_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> > > >
PUBLIC	??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z ; std::_Sort_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Pass_fn@P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z$0A@@std@@YAP6A_NPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@0@ZP6A_N00@Z@Z ; std::_Pass_fn<bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *),0>
PUBLIC	??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0@Z ; std::_Adl_verify_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> > > >
PUBLIC	??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z ; std::_Sort_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Pass_fn@P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@Z$0A@@std@@YAP6A_NPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@ZP6A_N00@Z@Z ; std::_Pass_fn<bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *),0>
PUBLIC	??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0@Z ; std::_Adl_verify_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> > > >
PUBLIC	??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z ; std::_Sort_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Pass_fn@P6A_NPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@0@Z$0A@@std@@YAP6A_NPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@0@ZP6A_N00@Z@Z ; std::_Pass_fn<bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *),0>
PUBLIC	??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0@Z ; std::_Adl_verify_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> > > >
PUBLIC	??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z ; std::_Sort_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Pass_fn@P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z$0A@@std@@YAP6A_NPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@0@ZP6A_N00@Z@Z ; std::_Pass_fn<bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *),0>
PUBLIC	??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0@Z ; std::_Adl_verify_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> > > >
PUBLIC	??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z ; std::_Sort_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Pass_fn@P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z$0A@@std@@YAP6A_NPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@0@ZP6A_N00@Z@Z ; std::_Pass_fn<bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *),0>
PUBLIC	??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0@Z ; std::_Adl_verify_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> > > >
PUBLIC	??$_Insert_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@1Uforward_iterator_tag@1@@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Insert_range<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *>
PUBLIC	??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z ; std::_Sort_unchecked<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Pass_fn@P6A_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z$0A@@std@@YAP6A_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0@ZP6A_N00@Z@Z ; std::_Pass_fn<bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *),0>
PUBLIC	??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0@Z ; std::_Adl_verify_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> > > >
PUBLIC	??$_Insert_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@1Uforward_iterator_tag@1@@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Insert_range<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *>
PUBLIC	??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z ; std::_Sort_unchecked<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Pass_fn@P6A_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z$0A@@std@@YAP6A_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0@ZP6A_N00@Z@Z ; std::_Pass_fn<bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *),0>
PUBLIC	??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0@Z ; std::_Adl_verify_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> > > >
PUBLIC	??$_Lex_compare_memcmp_classify@PAU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@PAU12@X$0A@@std@@YA?A_PABQAU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@0@0ABU?$less@X@0@@Z ; std::_Lex_compare_memcmp_classify<std::pair<unsigned int,resptr_core<CTexture,resptrcode_texture> > *,std::pair<unsigned int,resptr_core<CTexture,resptrcode_texture> > *,void,0>
PUBLIC	??$_Get_unwrapped@AAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@std@@@std@@@std@@@std@@YA?A_TAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@std@@@std@@@0@@Z ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<unsigned int,resptr_core<CTexture,resptrcode_texture> > > > > &>
PUBLIC	??$lexicographical_compare@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@std@@@std@@@std@@V12@U?$less@X@2@@std@@YA_NV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@std@@@std@@@0@000U?$less@X@0@@Z ; std::lexicographical_compare<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<unsigned int,resptr_core<CTexture,resptrcode_texture> > > > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<unsigned int,resptr_core<CTexture,resptrcode_texture> > > > >,std::less<void> >
PUBLIC	??$?MVCTexture@@Uresptrcode_texture@@@@YA_NABV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@0@Z ; operator<<CTexture,resptrcode_texture>
PUBLIC	??$_Sort_unchecked@PAU_MatrixItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_MatrixItem@R_dsgraph@@0HP6A_NABU12@1@Z@Z ; std::_Sort_unchecked<R_dsgraph::_MatrixItem *,bool (__cdecl*)(R_dsgraph::_MatrixItem const &,R_dsgraph::_MatrixItem const &)>
PUBLIC	??$_Pass_fn@P6A_NABU_MatrixItem@R_dsgraph@@0@Z$0A@@std@@YAP6A_NABU_MatrixItem@R_dsgraph@@0@ZP6A_N00@Z@Z ; std::_Pass_fn<bool (__cdecl*)(R_dsgraph::_MatrixItem const &,R_dsgraph::_MatrixItem const &),0>
PUBLIC	??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_MatrixItem@R_dsgraph@@@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_MatrixItem@R_dsgraph@@@std@@@std@@@0@0@Z ; std::_Adl_verify_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<R_dsgraph::_MatrixItem> > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<R_dsgraph::_MatrixItem> > > >
PUBLIC	??$_Sort_unchecked@PAU_NormalItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_NormalItem@R_dsgraph@@0HP6A_NABU12@1@Z@Z ; std::_Sort_unchecked<R_dsgraph::_NormalItem *,bool (__cdecl*)(R_dsgraph::_NormalItem const &,R_dsgraph::_NormalItem const &)>
PUBLIC	??$_Pass_fn@P6A_NABU_NormalItem@R_dsgraph@@0@Z$0A@@std@@YAP6A_NABU_NormalItem@R_dsgraph@@0@ZP6A_N00@Z@Z ; std::_Pass_fn<bool (__cdecl*)(R_dsgraph::_NormalItem const &,R_dsgraph::_NormalItem const &),0>
PUBLIC	??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_NormalItem@R_dsgraph@@@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_NormalItem@R_dsgraph@@@std@@@std@@@0@0@Z ; std::_Adl_verify_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<R_dsgraph::_NormalItem> > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<R_dsgraph::_NormalItem> > > >
PUBLIC	?max_size@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEIXZ ; doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *>::max_size
PUBLIC	?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QBEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ; std::_Compressed_pair<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *>,std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >,1>::_Get_first
PUBLIC	?max_size@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEIXZ ; doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *>::max_size
PUBLIC	?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QBEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ; std::_Compressed_pair<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *>,std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >,1>::_Get_first
PUBLIC	?max_size@?$doug_lea_alloc@PAVIRender_Visual@@@@QBEIXZ ; doug_lea_alloc<IRender_Visual *>::max_size
PUBLIC	?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAVIRender_Visual@@@@V?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@std@@$00@std@@QBEABV?$doug_lea_alloc@PAVIRender_Visual@@@@XZ ; std::_Compressed_pair<doug_lea_alloc<IRender_Visual *>,std::_Vector_val<std::_Simple_types<IRender_Visual *> >,1>::_Get_first
PUBLIC	?max_size@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAIABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::max_size
PUBLIC	?capacity@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::capacity
PUBLIC	?_Umove_if_noexcept1@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@00U?$integral_constant@_N$00@2@@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Umove_if_noexcept1
PUBLIC	?_Getal@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Getal
PUBLIC	?max_size@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAIABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::max_size
PUBLIC	?capacity@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::capacity
PUBLIC	?_Umove_if_noexcept1@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@00U?$integral_constant@_N$00@2@@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Umove_if_noexcept1
PUBLIC	?_Getal@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Getal
PUBLIC	?max_size@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@SAIABV?$doug_lea_alloc@PAVIRender_Visual@@@@@Z ; std::_Normal_allocator_traits<doug_lea_alloc<IRender_Visual *> >::max_size
PUBLIC	?capacity@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QBEIXZ ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::capacity
PUBLIC	?_Umove_if_noexcept1@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@AAEXPAPAVIRender_Visual@@00U?$integral_constant@_N$00@2@@Z ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::_Umove_if_noexcept1
PUBLIC	?_Getal@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@ABEABV?$doug_lea_alloc@PAVIRender_Visual@@@@XZ ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::_Getal
PUBLIC	?_Ufill@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU34@IU_Value_init_tag@2@@Z ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::_Ufill
PUBLIC	?_Orphan_range@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::_Orphan_range
PUBLIC	?_Ufill@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU34@IU_Value_init_tag@2@@Z ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::_Ufill
PUBLIC	?_Orphan_range@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::_Orphan_range
PUBLIC	?_Ufill@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU34@IU_Value_init_tag@2@@Z ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::_Ufill
PUBLIC	?_Orphan_range@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::_Orphan_range
PUBLIC	?_Ufill@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU34@IU_Value_init_tag@2@@Z ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::_Ufill
PUBLIC	?_Orphan_range@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::_Orphan_range
PUBLIC	?allocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@IPBX@Z ; doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *>::allocate
PUBLIC	?construct@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@ABQAU23@@Z ; doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *>::construct
PUBLIC	?max_size@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::max_size
PUBLIC	?_Ufill@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU34@IU_Value_init_tag@2@@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Ufill
PUBLIC	?_Umove@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU34@00@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Umove
PUBLIC	?_Umove_if_noexcept@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@00@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Umove_if_noexcept
PUBLIC	?_Calculate_growth@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEII@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Calculate_growth
PUBLIC	?_Change_array@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXQAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@II@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Change_array
PUBLIC	?_Xlength@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@CAXXZ ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Xlength
PUBLIC	?_Make_iterator_offset@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@I@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Make_iterator_offset
PUBLIC	?_Ufill@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU34@IU_Value_init_tag@2@@Z ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::_Ufill
PUBLIC	?_Orphan_range@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::_Orphan_range
PUBLIC	?_Ufill@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU34@IU_Value_init_tag@2@@Z ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::_Ufill
PUBLIC	?_Orphan_range@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::_Orphan_range
PUBLIC	?_Ufill@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU34@IU_Value_init_tag@2@@Z ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::_Ufill
PUBLIC	?_Orphan_range@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::_Orphan_range
PUBLIC	?_Ufill@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU34@IU_Value_init_tag@2@@Z ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::_Ufill
PUBLIC	?_Orphan_range@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::_Orphan_range
PUBLIC	?allocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@IPBX@Z ; doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *>::allocate
PUBLIC	?construct@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@ABQAU23@@Z ; doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *>::construct
PUBLIC	?max_size@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::max_size
PUBLIC	?_Ufill@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU34@IU_Value_init_tag@2@@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Ufill
PUBLIC	?_Umove@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU34@00@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Umove
PUBLIC	?_Umove_if_noexcept@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@00@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Umove_if_noexcept
PUBLIC	?_Calculate_growth@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEII@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Calculate_growth
PUBLIC	?_Change_array@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXQAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@II@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Change_array
PUBLIC	?_Xlength@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@CAXXZ ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Xlength
PUBLIC	?_Make_iterator_offset@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@I@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Make_iterator_offset
PUBLIC	?allocate@?$doug_lea_alloc@PAVIRender_Visual@@@@QBEPAPAVIRender_Visual@@IPBX@Z ; doug_lea_alloc<IRender_Visual *>::allocate
PUBLIC	?construct@?$doug_lea_alloc@PAVIRender_Visual@@@@QAEXPAPAVIRender_Visual@@ABQAV2@@Z ; doug_lea_alloc<IRender_Visual *>::construct
PUBLIC	?max_size@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QBEIXZ ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::max_size
PUBLIC	?_Umove@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@AAEPAPAVIRender_Visual@@PAPAV3@00@Z ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::_Umove
PUBLIC	?_Umove_if_noexcept@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@AAEXPAPAVIRender_Visual@@00@Z ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::_Umove_if_noexcept
PUBLIC	?_Calculate_growth@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@ABEII@Z ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::_Calculate_growth
PUBLIC	?_Change_array@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@AAEXQAPAVIRender_Visual@@II@Z ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::_Change_array
PUBLIC	?_Xlength@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@CAXXZ ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::_Xlength
PUBLIC	?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_NormalItem@R_dsgraph@@@std@@@std@@@std@@QBEPAU_NormalItem@R_dsgraph@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<R_dsgraph::_NormalItem> > >::_Unwrapped
PUBLIC	?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_MatrixItem@R_dsgraph@@@std@@@std@@@std@@QBEPAU_MatrixItem@R_dsgraph@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<R_dsgraph::_MatrixItem> > >::_Unwrapped
PUBLIC	?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> > >::_Unwrapped
PUBLIC	?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> > >::_Unwrapped
PUBLIC	?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> > >::_Unwrapped
PUBLIC	?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> > >::_Unwrapped
PUBLIC	?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> > >::_Unwrapped
PUBLIC	?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> > >::_Unwrapped
PUBLIC	?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> > >::_Unwrapped
PUBLIC	?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> > >::_Unwrapped
PUBLIC	?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> > >::_Unwrapped
PUBLIC	?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> > >::_Unwrapped
PUBLIC	??$addressof@V?$_Vector_val@U?$_Simple_types@VCFrustum@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@VCFrustum@@@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<CFrustum> > >
PUBLIC	??$addressof@V?$_Vector_val@U?$_Simple_types@PAVIRender_Sector@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAVIRender_Sector@@@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<IRender_Sector *> > >
PUBLIC	??$_Resize@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::_Resize<std::_Value_init_tag>
PUBLIC	??$_Resize@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::_Resize<std::_Value_init_tag>
PUBLIC	??$_Resize@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::_Resize<std::_Value_init_tag>
PUBLIC	??$_Resize@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::_Resize<std::_Value_init_tag>
PUBLIC	??$_Resize@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Resize<std::_Value_init_tag>
PUBLIC	??$_Resize@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::_Resize<std::_Value_init_tag>
PUBLIC	??$_Resize@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::_Resize<std::_Value_init_tag>
PUBLIC	??$_Resize@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::_Resize<std::_Value_init_tag>
PUBLIC	??$_Resize@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::_Resize<std::_Value_init_tag>
PUBLIC	??$_Resize@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Resize<std::_Value_init_tag>
PUBLIC	??$addressof@V?$_Vector_val@U?$_Simple_types@PAVIRender_Portal@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAVIRender_Portal@@@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<IRender_Portal *> > >
PUBLIC	??$addressof@V?$_Vector_val@U?$_Simple_types@U_NormalItem@R_dsgraph@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@U_NormalItem@R_dsgraph@@@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<R_dsgraph::_NormalItem> > >
PUBLIC	??$addressof@V?$_Vector_val@U?$_Simple_types@U_MatrixItem@R_dsgraph@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@U_MatrixItem@R_dsgraph@@@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<R_dsgraph::_MatrixItem> > >
PUBLIC	??$addressof@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> > >
PUBLIC	??$addressof@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> > >
PUBLIC	??$addressof@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> > >
PUBLIC	??$addressof@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> > >
PUBLIC	??$_Emplace_reallocate@ABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU23@ABQAU23@@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Emplace_reallocate<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * const &>
PUBLIC	??$construct@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@ABQAU12@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@ABQAU34@@Z ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::construct<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * const &>
PUBLIC	??$forward@ABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@ABQAU12@@Z ; std::forward<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * const &>
PUBLIC	??$addressof@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> > >
PUBLIC	??$addressof@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> > >
PUBLIC	??$addressof@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> > >
PUBLIC	??$addressof@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> > >
PUBLIC	??$addressof@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> > >
PUBLIC	??$_Emplace_reallocate@ABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU23@ABQAU23@@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Emplace_reallocate<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * const &>
PUBLIC	??$construct@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@ABQAU12@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@ABQAU34@@Z ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::construct<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * const &>
PUBLIC	??$forward@ABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@ABQAU12@@Z ; std::forward<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * const &>
PUBLIC	??$addressof@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> > >
PUBLIC	??$_Emplace_reallocate@ABQAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAEPAPAVIRender_Visual@@QAPAV2@ABQAV2@@Z ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::_Emplace_reallocate<IRender_Visual * const &>
PUBLIC	??$construct@PAVIRender_Visual@@ABQAV1@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@SAXAAV?$doug_lea_alloc@PAVIRender_Visual@@@@PAPAVIRender_Visual@@ABQAV3@@Z ; std::_Normal_allocator_traits<doug_lea_alloc<IRender_Visual *> >::construct<IRender_Visual *,IRender_Visual * const &>
PUBLIC	??$_Emplace_reallocate@PAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAEPAPAVIRender_Visual@@QAPAV2@$$QAPAV2@@Z ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::_Emplace_reallocate<IRender_Visual *>
PUBLIC	??$construct@PAVIRender_Visual@@PAV1@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@SAXAAV?$doug_lea_alloc@PAVIRender_Visual@@@@PAPAVIRender_Visual@@$$QAPAV3@@Z ; std::_Normal_allocator_traits<doug_lea_alloc<IRender_Visual *> >::construct<IRender_Visual *,IRender_Visual *>
PUBLIC	??$_Get_unwrapped@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@@std@@YA?A_TABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@@Z ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> > > const &>
PUBLIC	??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@Z@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@1@Z@Z ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> > >,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Get_unwrapped@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@@std@@YA?A_TABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@@Z ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> > > const &>
PUBLIC	??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@P6A_NPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@0@Z@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0P6A_NPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@1@Z@Z ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> > >,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Get_unwrapped@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@@std@@YA?A_TABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@@Z ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> > > const &>
PUBLIC	??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@1@Z@Z ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> > >,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Get_unwrapped@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@@std@@YA?A_TABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@@Z ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> > > const &>
PUBLIC	??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@1@Z@Z ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> > >,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Get_unwrapped@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@@std@@YA?A_TABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@@Z ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> > > const &>
PUBLIC	??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@Z@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@1@Z@Z ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> > >,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Get_unwrapped@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@@std@@YA?A_TABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@@Z ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> > > const &>
PUBLIC	??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@P6A_NPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@0@Z@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0P6A_NPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@1@Z@Z ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> > >,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Get_unwrapped@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@@std@@YA?A_TABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@@Z ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> > > const &>
PUBLIC	??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@1@Z@Z ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> > >,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Get_unwrapped@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@@std@@YA?A_TABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@@Z ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> > > const &>
PUBLIC	??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@1@Z@Z ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> > >,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Get_unwrapped@AAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@@std@@YA?A_TAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@@Z ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> > > &>
PUBLIC	??$insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@$0A@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@V21@1@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::insert<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> > >,0>
PUBLIC	??$_Get_unwrapped@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@@std@@YA?A_TABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@@Z ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> > > const &>
PUBLIC	??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@P6A_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0P6A_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@1@Z@Z ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> > >,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *)>
PUBLIC	??$_Get_unwrapped@AAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@@std@@YA?A_TAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@@Z ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> > > &>
PUBLIC	??$insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@$0A@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@V21@1@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::insert<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> > >,0>
PUBLIC	??$_Get_unwrapped@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@@std@@YA?A_TABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@@Z ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> > > const &>
PUBLIC	??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@P6A_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0P6A_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@1@Z@Z ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> > >,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *)>
PUBLIC	??$lexicographical_compare@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@std@@@std@@@std@@V12@@std@@YA_NV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@std@@@std@@@0@000@Z ; std::lexicographical_compare<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<unsigned int,resptr_core<CTexture,resptrcode_texture> > > > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<unsigned int,resptr_core<CTexture,resptrcode_texture> > > > > >
PUBLIC	??$?OIV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@YA_NABU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@0@0@Z ; std::operator><unsigned int,resptr_core<CTexture,resptrcode_texture> >
PUBLIC	??$?MIV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@YA_NABU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@0@0@Z ; std::operator<<unsigned int,resptr_core<CTexture,resptrcode_texture> >
PUBLIC	??$_Get_unwrapped@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_MatrixItem@R_dsgraph@@@std@@@std@@@std@@@std@@YA?A_TABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_MatrixItem@R_dsgraph@@@std@@@std@@@0@@Z ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<R_dsgraph::_MatrixItem> > > const &>
PUBLIC	??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_MatrixItem@R_dsgraph@@@std@@@std@@@std@@P6A_NABU_MatrixItem@R_dsgraph@@0@Z@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_MatrixItem@R_dsgraph@@@std@@@std@@@0@0P6A_NABU_MatrixItem@R_dsgraph@@1@Z@Z ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<R_dsgraph::_MatrixItem> > >,bool (__cdecl*)(R_dsgraph::_MatrixItem const &,R_dsgraph::_MatrixItem const &)>
PUBLIC	??$_Get_unwrapped@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_NormalItem@R_dsgraph@@@std@@@std@@@std@@@std@@YA?A_TABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_NormalItem@R_dsgraph@@@std@@@std@@@0@@Z ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<R_dsgraph::_NormalItem> > > const &>
PUBLIC	??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_NormalItem@R_dsgraph@@@std@@@std@@@std@@P6A_NABU_NormalItem@R_dsgraph@@0@Z@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_NormalItem@R_dsgraph@@@std@@@std@@@0@0P6A_NABU_NormalItem@R_dsgraph@@1@Z@Z ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<R_dsgraph::_NormalItem> > >,bool (__cdecl*)(R_dsgraph::_NormalItem const &,R_dsgraph::_NormalItem const &)>
PUBLIC	?_Verify_offset@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEXH@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> > >::_Verify_offset
PUBLIC	?_Verify_offset@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEXH@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> > >::_Verify_offset
PUBLIC	?_Verify_offset@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEXH@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> > >::_Verify_offset
PUBLIC	?_Verify_offset@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEXH@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> > >::_Verify_offset
PUBLIC	?_Verify_offset@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEXH@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> > >::_Verify_offset
PUBLIC	?_Verify_offset@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEXH@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> > >::_Verify_offset
PUBLIC	?_Verify_offset@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEXH@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> > >::_Verify_offset
PUBLIC	?_Verify_offset@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEXH@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> > >::_Verify_offset
PUBLIC	?_Verify_offset@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEXH@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> > >::_Verify_offset
PUBLIC	?_Verify_offset@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEXH@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> > >::_Verify_offset
PUBLIC	?_Verify_offset@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Portal@@@std@@@std@@@std@@QBEXH@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<IRender_Portal *> > >::_Verify_offset
PUBLIC	?_Verify_offset@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Sector@@@std@@@std@@@std@@QBEXH@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<IRender_Sector *> > >::_Verify_offset
PUBLIC	?_Verify_offset@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCFrustum@@@std@@@std@@@std@@QBEXH@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CFrustum> > >::_Verify_offset
PUBLIC	??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> > >::operator+=
PUBLIC	??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> > >::operator+=
PUBLIC	??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> > >::operator+=
PUBLIC	??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> > >::operator+=
PUBLIC	??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> > >::operator+=
PUBLIC	??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> > >::operator+=
PUBLIC	??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> > >::operator+=
PUBLIC	??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> > >::operator+=
PUBLIC	??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> > >::operator+=
PUBLIC	??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> > >::operator+=
PUBLIC	??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Portal@@@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<IRender_Portal *> > >::operator+=
PUBLIC	??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Sector@@@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<IRender_Sector *> > >::operator+=
PUBLIC	??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCFrustum@@@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CFrustum> > >::operator+=
PUBLIC	?clear@?$vector@U_NormalItem@R_dsgraph@@V?$doug_lea_alloc@U_NormalItem@R_dsgraph@@@@@std@@QAEXXZ ; std::vector<R_dsgraph::_NormalItem,doug_lea_alloc<R_dsgraph::_NormalItem> >::clear
PUBLIC	?clear@?$vector@U_MatrixItem@R_dsgraph@@V?$doug_lea_alloc@U_MatrixItem@R_dsgraph@@@@@std@@QAEXXZ ; std::vector<R_dsgraph::_MatrixItem,doug_lea_alloc<R_dsgraph::_MatrixItem> >::clear
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> > >::operator*
PUBLIC	??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> > >::operator+=
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> > >::operator*
PUBLIC	??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> > >::operator+=
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEABQAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> > >::operator*
PUBLIC	??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> > >::operator+=
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEABQAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> > >::operator*
PUBLIC	??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> > >::operator+=
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEABQAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> > >::operator*
PUBLIC	??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> > >::operator+=
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEABQAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> > >::operator*
PUBLIC	??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> > >::operator+=
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEABQAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> > >::operator*
PUBLIC	??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> > >::operator+=
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEABQAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> > >::operator*
PUBLIC	??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> > >::operator+=
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEABQAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> > >::operator*
PUBLIC	??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> > >::operator+=
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEABQAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> > >::operator*
PUBLIC	??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> > >::operator+=
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Portal@@@std@@@std@@@std@@QAE@PAPAVIRender_Portal@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<IRender_Portal *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<IRender_Portal *> > >
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Portal@@@std@@@std@@@std@@QBEABQAVIRender_Portal@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<IRender_Portal *> > >::operator*
PUBLIC	??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Portal@@@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<IRender_Portal *> > >::operator+=
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Sector@@@std@@@std@@@std@@QAE@PAPAVIRender_Sector@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<IRender_Sector *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<IRender_Sector *> > >
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Sector@@@std@@@std@@@std@@QBEABQAVIRender_Sector@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<IRender_Sector *> > >::operator*
PUBLIC	??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Sector@@@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<IRender_Sector *> > >::operator+=
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCFrustum@@@std@@@std@@@std@@QAE@PAVCFrustum@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CFrustum> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CFrustum> > >
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCFrustum@@@std@@@std@@@std@@QBEABVCFrustum@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CFrustum> > >::operator*
PUBLIC	??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VCFrustum@@@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CFrustum> > >::operator+=
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VCFrustum@@@std@@@std@@@std@@QAE@PAVCFrustum@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CFrustum> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<CFrustum> > >
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Sector@@@std@@@std@@@std@@QAE@PAPAVIRender_Sector@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<IRender_Sector *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<IRender_Sector *> > >
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Portal@@@std@@@std@@@std@@QAE@PAPAVIRender_Portal@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<IRender_Portal *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<IRender_Portal *> > >
PUBLIC	?build_projection_HAT@?$_matrix@M@@QAEAAU1@MMMM@Z ; _matrix<float>::build_projection_HAT
PUBLIC	?clear_and_free@?$xr_vector@U_NormalItem@R_dsgraph@@V?$doug_lea_alloc@U_NormalItem@R_dsgraph@@@@@@QAEXXZ ; xr_vector<R_dsgraph::_NormalItem,doug_lea_alloc<R_dsgraph::_NormalItem> >::clear_and_free
PUBLIC	?size@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@QAEIXZ ; FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::size
PUBLIC	?end@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ ; FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::end
PUBLIC	?size@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAEIXZ ; FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::size
PUBLIC	?end@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ ; FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::end
PUBLIC	?size@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@QAEIXZ ; FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::size
PUBLIC	?end@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ ; FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::end
PUBLIC	?size@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@QAEIXZ ; FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::size
PUBLIC	?end@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ ; FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::end
PUBLIC	?size@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@QAEIXZ ; FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::size
PUBLIC	?clear_and_free@?$xr_vector@U_MatrixItem@R_dsgraph@@V?$doug_lea_alloc@U_MatrixItem@R_dsgraph@@@@@@QAEXXZ ; xr_vector<R_dsgraph::_MatrixItem,doug_lea_alloc<R_dsgraph::_MatrixItem> >::clear_and_free
PUBLIC	?size@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@QAEIXZ ; FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::size
PUBLIC	?end@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ ; FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::end
PUBLIC	?size@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAEIXZ ; FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::size
PUBLIC	?end@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ ; FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::end
PUBLIC	?size@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@QAEIXZ ; FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::size
PUBLIC	?end@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ ; FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::end
PUBLIC	?size@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@QAEIXZ ; FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::size
PUBLIC	?end@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ ; FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::end
PUBLIC	?size@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@QAEIXZ ; FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::size
PUBLIC	?recurseLR@?$FixedMAP@MU_MatrixItemS@R_dsgraph@@Udoug_lea_allocator@@@@AAEXPAUTNode@1@P6IX0@Z@Z ; FixedMAP<float,R_dsgraph::_MatrixItemS,doug_lea_allocator>::recurseLR
PUBLIC	?recurseRL@?$FixedMAP@MU_MatrixItemS@R_dsgraph@@Udoug_lea_allocator@@@@AAEXPAUTNode@1@P6IX0@Z@Z ; FixedMAP<float,R_dsgraph::_MatrixItemS,doug_lea_allocator>::recurseRL
PUBLIC	?begin@?$vector@VCFrustum@@V?$xalloc@VCFrustum@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VCFrustum@@@std@@@std@@@2@XZ ; std::vector<CFrustum,xalloc<CFrustum> >::begin
PUBLIC	?size@?$vector@VCFrustum@@V?$xalloc@VCFrustum@@@@@std@@QBEIXZ ; std::vector<CFrustum,xalloc<CFrustum> >::size
PUBLIC	?begin@?$vector@PAVIRender_Sector@@V?$xalloc@PAVIRender_Sector@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Sector@@@std@@@std@@@2@XZ ; std::vector<IRender_Sector *,xalloc<IRender_Sector *> >::begin
PUBLIC	?size@?$vector@PAVIRender_Sector@@V?$xalloc@PAVIRender_Sector@@@@@std@@QBEIXZ ; std::vector<IRender_Sector *,xalloc<IRender_Sector *> >::size
PUBLIC	?resize@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXI@Z ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::resize
PUBLIC	?size@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::size
PUBLIC	?resize@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXI@Z ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::resize
PUBLIC	?size@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::size
PUBLIC	?resize@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXI@Z ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::resize
PUBLIC	?size@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::size
PUBLIC	?resize@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXI@Z ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::resize
PUBLIC	?size@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::size
PUBLIC	?resize@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXI@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::resize
PUBLIC	?size@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::size
PUBLIC	?_Orphan_range@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Orphan_range
PUBLIC	?resize@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXI@Z ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::resize
PUBLIC	?size@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::size
PUBLIC	?resize@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXI@Z ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::resize
PUBLIC	?size@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::size
PUBLIC	?resize@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXI@Z ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::resize
PUBLIC	?size@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::size
PUBLIC	?resize@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXI@Z ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::resize
PUBLIC	?size@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::size
PUBLIC	?resize@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXI@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::resize
PUBLIC	?size@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::size
PUBLIC	?_Orphan_range@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Orphan_range
PUBLIC	?begin@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@std@@@2@XZ ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::begin
PUBLIC	?size@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QBEIXZ ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::size
PUBLIC	?_Orphan_range@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@ABEXPAPAVIRender_Visual@@0@Z ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::_Orphan_range
PUBLIC	?begin@?$vector@PAVIRender_Portal@@V?$xalloc@PAVIRender_Portal@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Portal@@@std@@@std@@@2@XZ ; std::vector<IRender_Portal *,xalloc<IRender_Portal *> >::begin
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_NormalItem@R_dsgraph@@@std@@@std@@@std@@QAE@PAU_NormalItem@R_dsgraph@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<R_dsgraph::_NormalItem> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<R_dsgraph::_NormalItem> > >
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_NormalItem@R_dsgraph@@@std@@@std@@@std@@QBEABU_NormalItem@R_dsgraph@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<R_dsgraph::_NormalItem> > >::operator*
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_MatrixItem@R_dsgraph@@@std@@@std@@@std@@QAE@PAU_MatrixItem@R_dsgraph@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<R_dsgraph::_MatrixItem> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<R_dsgraph::_MatrixItem> > >
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_MatrixItem@R_dsgraph@@@std@@@std@@@std@@QBEABU_MatrixItem@R_dsgraph@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<R_dsgraph::_MatrixItem> > >::operator*
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> > >
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEAAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> > >::operator*
PUBLIC	??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> > >::operator+
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> > >
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEAAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> > >::operator*
PUBLIC	??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> > >::operator+
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> > >
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEAAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> > >::operator*
PUBLIC	??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> > >::operator+
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> > >
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEAAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> > >::operator*
PUBLIC	??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> > >::operator+
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> > >
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEAAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> > >::operator*
PUBLIC	??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> > >::operator+
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> > >
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEAAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> > >::operator*
PUBLIC	??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> > >::operator+
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> > >
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEAAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> > >::operator*
PUBLIC	??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> > >::operator+
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> > >
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEAAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> > >::operator*
PUBLIC	??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> > >::operator+
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> > >
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEAAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> > >::operator*
PUBLIC	??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> > >::operator+
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> > >
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEAAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> > >::operator*
PUBLIC	??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> > >::operator+
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Portal@@@std@@@std@@@std@@QBEAAPAVIRender_Portal@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<IRender_Portal *> > >::operator*
PUBLIC	??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Portal@@@std@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<IRender_Portal *> > >::operator+
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Sector@@@std@@@std@@@std@@QBEAAPAVIRender_Sector@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<IRender_Sector *> > >::operator*
PUBLIC	??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Sector@@@std@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<IRender_Sector *> > >::operator+
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VCFrustum@@@std@@@std@@@std@@QBEAAVCFrustum@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CFrustum> > >::operator*
PUBLIC	??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VCFrustum@@@std@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CFrustum> > >::operator+
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_NormalItem@R_dsgraph@@@std@@@std@@@std@@QAE@PAU_NormalItem@R_dsgraph@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<R_dsgraph::_NormalItem> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<R_dsgraph::_NormalItem> > >
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_MatrixItem@R_dsgraph@@@std@@@std@@@std@@QAE@PAU_MatrixItem@R_dsgraph@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<R_dsgraph::_MatrixItem> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<R_dsgraph::_MatrixItem> > >
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> > >
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> > >
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> > >
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> > >
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> > >
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> > >
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> > >
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> > >
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> > >
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> > >
PUBLIC	?build_projection@?$_matrix@M@@QAEAAU1@MMMM@Z	; _matrix<float>::build_projection
PUBLIC	?_get@?$resptr_base@UShaderElement@@@@QBEPAUShaderElement@@XZ ; resptr_base<ShaderElement>::_get
PUBLIC	?intersect@?$_box3@M@@QAEHABV1@@Z		; _box3<float>::intersect
PUBLIC	?begin@?$vector@U_NormalItem@R_dsgraph@@V?$doug_lea_alloc@U_NormalItem@R_dsgraph@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_NormalItem@R_dsgraph@@@std@@@std@@@2@XZ ; std::vector<R_dsgraph::_NormalItem,doug_lea_alloc<R_dsgraph::_NormalItem> >::begin
PUBLIC	?end@?$vector@U_NormalItem@R_dsgraph@@V?$doug_lea_alloc@U_NormalItem@R_dsgraph@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_NormalItem@R_dsgraph@@@std@@@std@@@2@XZ ; std::vector<R_dsgraph::_NormalItem,doug_lea_alloc<R_dsgraph::_NormalItem> >::end
PUBLIC	?clear@?$xr_vector@U_NormalItem@R_dsgraph@@V?$doug_lea_alloc@U_NormalItem@R_dsgraph@@@@@@QAEXXZ ; xr_vector<R_dsgraph::_NormalItem,doug_lea_alloc<R_dsgraph::_NormalItem> >::clear
PUBLIC	?clear@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@QAEXXZ ; FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::clear
PUBLIC	?end@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ ; FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::end
PUBLIC	?getANY_P@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@QAEXAAV?$xr_vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@@@Z ; FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::getANY_P
PUBLIC	?clear@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAEXXZ ; FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::clear
PUBLIC	?getANY_P@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAEXAAV?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@@@Z ; FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::getANY_P
PUBLIC	?clear@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@QAEXXZ ; FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::clear
PUBLIC	?getANY_P@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@QAEXAAV?$xr_vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@@@Z ; FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::getANY_P
PUBLIC	?clear@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@QAEXXZ ; FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::clear
PUBLIC	?getANY_P@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@QAEXAAV?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@@Z ; FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::getANY_P
PUBLIC	?clear@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@QAEXXZ ; FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::clear
PUBLIC	?getANY_P@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@QAEXAAV?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@@Z ; FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::getANY_P
PUBLIC	?begin@?$vector@U_MatrixItem@R_dsgraph@@V?$doug_lea_alloc@U_MatrixItem@R_dsgraph@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_MatrixItem@R_dsgraph@@@std@@@std@@@2@XZ ; std::vector<R_dsgraph::_MatrixItem,doug_lea_alloc<R_dsgraph::_MatrixItem> >::begin
PUBLIC	?end@?$vector@U_MatrixItem@R_dsgraph@@V?$doug_lea_alloc@U_MatrixItem@R_dsgraph@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_MatrixItem@R_dsgraph@@@std@@@std@@@2@XZ ; std::vector<R_dsgraph::_MatrixItem,doug_lea_alloc<R_dsgraph::_MatrixItem> >::end
PUBLIC	?clear@?$xr_vector@U_MatrixItem@R_dsgraph@@V?$doug_lea_alloc@U_MatrixItem@R_dsgraph@@@@@@QAEXXZ ; xr_vector<R_dsgraph::_MatrixItem,doug_lea_alloc<R_dsgraph::_MatrixItem> >::clear
PUBLIC	?clear@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@QAEXXZ ; FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::clear
PUBLIC	?end@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ ; FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::end
PUBLIC	?getANY_P@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@QAEXAAV?$xr_vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@@@Z ; FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::getANY_P
PUBLIC	?clear@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAEXXZ ; FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::clear
PUBLIC	?getANY_P@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAEXAAV?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@@@Z ; FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::getANY_P
PUBLIC	?clear@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@QAEXXZ ; FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::clear
PUBLIC	?getANY_P@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@QAEXAAV?$xr_vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@@@Z ; FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::getANY_P
PUBLIC	?clear@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@QAEXXZ ; FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::clear
PUBLIC	?getANY_P@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@QAEXAAV?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@@Z ; FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::getANY_P
PUBLIC	?clear@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@QAEXXZ ; FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::clear
PUBLIC	?getANY_P@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@QAEXAAV?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@@Z ; FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::getANY_P
PUBLIC	?clear@?$FixedMAP@MU_MatrixItemS@R_dsgraph@@Udoug_lea_allocator@@@@QAEXXZ ; FixedMAP<float,R_dsgraph::_MatrixItemS,doug_lea_allocator>::clear
PUBLIC	?traverseLR@?$FixedMAP@MU_MatrixItemS@R_dsgraph@@Udoug_lea_allocator@@@@QAEXP6IXPAUTNode@1@@Z@Z ; FixedMAP<float,R_dsgraph::_MatrixItemS,doug_lea_allocator>::traverseLR
PUBLIC	?traverseRL@?$FixedMAP@MU_MatrixItemS@R_dsgraph@@Udoug_lea_allocator@@@@QAEXP6IXPAUTNode@1@@Z@Z ; FixedMAP<float,R_dsgraph::_MatrixItemS,doug_lea_allocator>::traverseRL
PUBLIC	?size@?$xr_vector@VCFrustum@@V?$xalloc@VCFrustum@@@@@@QBEIXZ ; xr_vector<CFrustum,xalloc<CFrustum> >::size
PUBLIC	??A?$xr_vector@VCFrustum@@V?$xalloc@VCFrustum@@@@@@QAEAAVCFrustum@@I@Z ; xr_vector<CFrustum,xalloc<CFrustum> >::operator[]
PUBLIC	?size@?$xr_vector@PAVIRender_Sector@@V?$xalloc@PAVIRender_Sector@@@@@@QBEIXZ ; xr_vector<IRender_Sector *,xalloc<IRender_Sector *> >::size
PUBLIC	??A?$xr_vector@PAVIRender_Sector@@V?$xalloc@PAVIRender_Sector@@@@@@QAEAAPAVIRender_Sector@@I@Z ; xr_vector<IRender_Sector *,xalloc<IRender_Sector *> >::operator[]
PUBLIC	?begin@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::begin
PUBLIC	?end@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::end
PUBLIC	?size@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QBEIXZ ; xr_vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::size
PUBLIC	??A?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEAAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@I@Z ; xr_vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::operator[]
PUBLIC	?begin@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::begin
PUBLIC	?end@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::end
PUBLIC	?size@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QBEIXZ ; xr_vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::size
PUBLIC	??A?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEAAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@I@Z ; xr_vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::operator[]
PUBLIC	?begin@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::begin
PUBLIC	?end@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::end
PUBLIC	?size@?$xr_vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QBEIXZ ; xr_vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::size
PUBLIC	??A?$xr_vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEAAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@I@Z ; xr_vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::operator[]
PUBLIC	?begin@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::begin
PUBLIC	?end@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::end
PUBLIC	?size@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QBEIXZ ; xr_vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::size
PUBLIC	??A?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEAAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@I@Z ; xr_vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::operator[]
PUBLIC	??$_Emplace_back_with_unused_capacity@ABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAE?A_TABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Emplace_back_with_unused_capacity<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * const &>
PUBLIC	??$emplace_back@ABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?A_TABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::emplace_back<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * const &>
PUBLIC	?push_back@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::push_back
PUBLIC	?begin@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::begin
PUBLIC	?end@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::end
PUBLIC	?size@?$xr_vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QBEIXZ ; xr_vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::size
PUBLIC	??A?$xr_vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEAAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@I@Z ; xr_vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::operator[]
PUBLIC	?begin@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::begin
PUBLIC	?end@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::end
PUBLIC	?size@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QBEIXZ ; xr_vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::size
PUBLIC	??A?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEAAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@I@Z ; xr_vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::operator[]
PUBLIC	?begin@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::begin
PUBLIC	?end@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::end
PUBLIC	?size@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QBEIXZ ; xr_vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::size
PUBLIC	??A?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEAAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@I@Z ; xr_vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::operator[]
PUBLIC	?begin@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::begin
PUBLIC	?end@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::end
PUBLIC	?size@?$xr_vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QBEIXZ ; xr_vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::size
PUBLIC	??A?$xr_vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEAAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@I@Z ; xr_vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::operator[]
PUBLIC	?begin@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::begin
PUBLIC	?end@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::end
PUBLIC	?size@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QBEIXZ ; xr_vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::size
PUBLIC	??A?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEAAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@I@Z ; xr_vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::operator[]
PUBLIC	??$_Emplace_back_with_unused_capacity@ABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAE?A_TABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Emplace_back_with_unused_capacity<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * const &>
PUBLIC	??$emplace_back@ABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?A_TABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::emplace_back<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * const &>
PUBLIC	?push_back@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::push_back
PUBLIC	?begin@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::begin
PUBLIC	?end@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::end
PUBLIC	?size@?$xr_vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QBEIXZ ; xr_vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::size
PUBLIC	??A?$xr_vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEAAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@I@Z ; xr_vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::operator[]
PUBLIC	??$_Emplace_back_with_unused_capacity@ABQAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@AAE?A_TABQAVIRender_Visual@@@Z ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::_Emplace_back_with_unused_capacity<IRender_Visual * const &>
PUBLIC	??$emplace_back@ABQAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAE?A_TABQAVIRender_Visual@@@Z ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::emplace_back<IRender_Visual * const &>
PUBLIC	?push_back@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAEXABQAVIRender_Visual@@@Z ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::push_back
PUBLIC	??$_Emplace_back_with_unused_capacity@PAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@AAE?A_T$$QAPAVIRender_Visual@@@Z ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::_Emplace_back_with_unused_capacity<IRender_Visual *>
PUBLIC	??$emplace_back@PAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAE?A_T$$QAPAVIRender_Visual@@@Z ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::emplace_back<IRender_Visual *>
PUBLIC	?push_back@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAEX$$QAPAVIRender_Visual@@@Z ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::push_back
PUBLIC	?size@?$xr_vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@@QBEIXZ ; xr_vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::size
PUBLIC	??A?$xr_vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@@QAEAAPAVIRender_Visual@@I@Z ; xr_vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::operator[]
PUBLIC	??A?$xr_vector@PAVIRender_Portal@@V?$xalloc@PAVIRender_Portal@@@@@@QAEAAPAVIRender_Portal@@I@Z ; xr_vector<IRender_Portal *,xalloc<IRender_Portal *> >::operator[]
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_NormalItem@R_dsgraph@@@std@@@std@@@std@@QBEAAU_NormalItem@R_dsgraph@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<R_dsgraph::_NormalItem> > >::operator*
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_MatrixItem@R_dsgraph@@@std@@@std@@@std@@QBEAAU_MatrixItem@R_dsgraph@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<R_dsgraph::_MatrixItem> > >::operator*
PUBLIC	?r_dsgraph_render_R1_box@R_dsgraph_structure@@QAEXPAVIRender_Sector@@AAV?$_box3@M@@H@Z ; R_dsgraph_structure::r_dsgraph_render_R1_box
PUBLIC	?r_dsgraph_render_subspace@R_dsgraph_structure@@QAEXPAVIRender_Sector@@PAVCFrustum@@AAU?$_matrix@M@@AAU?$_vector3@M@@HH@Z ; R_dsgraph_structure::r_dsgraph_render_subspace
PUBLIC	?r_dsgraph_render_subspace@R_dsgraph_structure@@QAEXPAVIRender_Sector@@AAU?$_matrix@M@@AAU?$_vector3@M@@HH@Z ; R_dsgraph_structure::r_dsgraph_render_subspace
PUBLIC	?r_dsgraph_render_distort@R_dsgraph_structure@@QAEXXZ ; R_dsgraph_structure::r_dsgraph_render_distort
PUBLIC	?r_dsgraph_render_wmarks@R_dsgraph_structure@@QAEXXZ ; R_dsgraph_structure::r_dsgraph_render_wmarks
PUBLIC	?r_dsgraph_render_sorted@R_dsgraph_structure@@QAEXXZ ; R_dsgraph_structure::r_dsgraph_render_sorted
PUBLIC	?r_dsgraph_render_hud@R_dsgraph_structure@@QAEXXZ ; R_dsgraph_structure::r_dsgraph_render_hud
PUBLIC	?r_dsgraph_render_graph@R_dsgraph_structure@@QAEXI_N@Z ; R_dsgraph_structure::r_dsgraph_render_graph
PUBLIC	?sort_tlist_mat@@YAXAAV?$xr_vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@@0AAUmapMatrixTextures@R_dsgraph@@H@Z ; sort_tlist_mat
PUBLIC	?sort_tlist_nrm@@YAXAAV?$xr_vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@@0AAUmapNormalTextures@R_dsgraph@@H@Z ; sort_tlist_nrm
PUBLIC	?cmp_textures_ssa_mat@@YA_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; cmp_textures_ssa_mat
PUBLIC	?cmp_textures_ssa_nrm@@YA_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; cmp_textures_ssa_nrm
PUBLIC	?cmp_textures_lexN_mat@@YA_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; cmp_textures_lexN_mat
PUBLIC	?cmp_textures_lexN_nrm@@YA_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; cmp_textures_lexN_nrm
PUBLIC	?cmp_textures_lex3_mat@@YA_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; cmp_textures_lex3_mat
PUBLIC	?cmp_textures_lex3_nrm@@YA_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; cmp_textures_lex3_nrm
PUBLIC	?cmp_textures_lex2_mat@@YA_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; cmp_textures_lex2_mat
PUBLIC	?cmp_textures_lex2_nrm@@YA_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; cmp_textures_lex2_nrm
PUBLIC	?cmp_states_mat@@YA_NPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; cmp_states_mat
PUBLIC	?cmp_states_nrm@@YA_NPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; cmp_states_nrm
PUBLIC	?cmp_cs_mat@@YA_NPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; cmp_cs_mat
PUBLIC	?cmp_cs_nrm@@YA_NPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; cmp_cs_nrm
PUBLIC	?cmp_ps_mat@@YA_NPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; cmp_ps_mat
PUBLIC	?cmp_ps_nrm@@YA_NPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; cmp_ps_nrm
PUBLIC	?cmp_vs_mat@@YA_NPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; cmp_vs_mat
PUBLIC	?cmp_vs_nrm@@YA_NPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; cmp_vs_nrm
PUBLIC	?sorted_L1@@YIXPAUTNode@?$FixedMAP@MU_MatrixItemS@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; sorted_L1
PUBLIC	?mapMatrix_Render@@YIXAAUmapMatrixItems@R_dsgraph@@@Z ; mapMatrix_Render
PUBLIC	?cmp_matrix_items@@YA_NABU_MatrixItem@R_dsgraph@@0@Z ; cmp_matrix_items
PUBLIC	?mapNormal_Render@@YIXAAUmapNormalItems@R_dsgraph@@@Z ; mapNormal_Render
PUBLIC	?cmp_normal_items@@YA_NABU_NormalItem@R_dsgraph@@0@Z ; cmp_normal_items
PUBLIC	?calcLOD@@YAMMM@Z				; calcLOD
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Emplace_reallocate@PAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAEPAPAVIRender_Visual@@QAPAV2@$$QAPAV2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@PAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAEPAPAVIRender_Visual@@QAPAV2@$$QAPAV2@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Emplace_reallocate@PAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAEPAPAVIRender_Visual@@QAPAV2@$$QAPAV2@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??$_Emplace_reallocate@PAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAEPAPAVIRender_Visual@@QAPAV2@$$QAPAV2@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Emplace_reallocate@PAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAEPAPAVIRender_Visual@@QAPAV2@$$QAPAV2@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Emplace_reallocate@PAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAEPAPAVIRender_Visual@@QAPAV2@$$QAPAV2@@Z$2
__catchsym$??$_Emplace_reallocate@PAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAEPAPAVIRender_Visual@@QAPAV2@$$QAPAV2@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Emplace_reallocate@PAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAEPAPAVIRender_Visual@@QAPAV2@$$QAPAV2@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Emplace_reallocate@ABQAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAEPAPAVIRender_Visual@@QAPAV2@ABQAV2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@ABQAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAEPAPAVIRender_Visual@@QAPAV2@ABQAV2@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Emplace_reallocate@ABQAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAEPAPAVIRender_Visual@@QAPAV2@ABQAV2@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??$_Emplace_reallocate@ABQAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAEPAPAVIRender_Visual@@QAPAV2@ABQAV2@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Emplace_reallocate@ABQAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAEPAPAVIRender_Visual@@QAPAV2@ABQAV2@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Emplace_reallocate@ABQAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAEPAPAVIRender_Visual@@QAPAV2@ABQAV2@@Z$2
__catchsym$??$_Emplace_reallocate@ABQAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAEPAPAVIRender_Visual@@QAPAV2@ABQAV2@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Emplace_reallocate@ABQAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAEPAPAVIRender_Visual@@QAPAV2@ABQAV2@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Emplace_reallocate@ABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU23@ABQAU23@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@ABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU23@ABQAU23@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Emplace_reallocate@ABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU23@ABQAU23@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??$_Emplace_reallocate@ABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU23@ABQAU23@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Emplace_reallocate@ABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU23@ABQAU23@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Emplace_reallocate@ABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU23@ABQAU23@@Z$2
__catchsym$??$_Emplace_reallocate@ABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU23@ABQAU23@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Emplace_reallocate@ABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU23@ABQAU23@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Emplace_reallocate@ABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU23@ABQAU23@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@ABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU23@ABQAU23@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Emplace_reallocate@ABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU23@ABQAU23@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??$_Emplace_reallocate@ABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU23@ABQAU23@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Emplace_reallocate@ABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU23@ABQAU23@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Emplace_reallocate@ABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU23@ABQAU23@@Z$2
__catchsym$??$_Emplace_reallocate@ABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU23@ABQAU23@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Emplace_reallocate@ABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU23@ABQAU23@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Insert_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@1Uforward_iterator_tag@1@@Z DD 019930522H
	DD	0aH
	DD	FLAT:__unwindtable$??$_Insert_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@1Uforward_iterator_tag@1@@Z
	DD	05H
	DD	FLAT:__tryblocktable$??$_Insert_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@1Uforward_iterator_tag@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
	ORG $+4
__unwindtable$??$_Insert_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@1Uforward_iterator_tag@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	03H
	DD	00H
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	07H
	DD	00H
	DD	07H
	DD	00H
__tryblocktable$??$_Insert_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@1Uforward_iterator_tag@1@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Insert_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@1Uforward_iterator_tag@1@@Z$10
	DD	04H
	DD	04H
	DD	05H
	DD	01H
	DD	FLAT:__catchsym$??$_Insert_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@1Uforward_iterator_tag@1@@Z$11
	DD	02H
	DD	02H
	DD	05H
	DD	01H
	DD	FLAT:__catchsym$??$_Insert_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@1Uforward_iterator_tag@1@@Z$12
	DD	08H
	DD	08H
	DD	09H
	DD	01H
	DD	FLAT:__catchsym$??$_Insert_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@1Uforward_iterator_tag@1@@Z$13
	DD	06H
	DD	06H
	DD	09H
	DD	01H
	DD	FLAT:__catchsym$??$_Insert_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@1Uforward_iterator_tag@1@@Z$14
__catchsym$??$_Insert_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@1Uforward_iterator_tag@1@@Z$10 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Insert_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@1Uforward_iterator_tag@1@@Z$0
__catchsym$??$_Insert_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@1Uforward_iterator_tag@1@@Z$11 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Insert_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@1Uforward_iterator_tag@1@@Z$3
__catchsym$??$_Insert_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@1Uforward_iterator_tag@1@@Z$12 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Insert_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@1Uforward_iterator_tag@1@@Z$2
__catchsym$??$_Insert_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@1Uforward_iterator_tag@1@@Z$13 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Insert_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@1Uforward_iterator_tag@1@@Z$7
__catchsym$??$_Insert_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@1Uforward_iterator_tag@1@@Z$14 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Insert_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@1Uforward_iterator_tag@1@@Z$6
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Insert_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@1Uforward_iterator_tag@1@@Z DD 019930522H
	DD	0aH
	DD	FLAT:__unwindtable$??$_Insert_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@1Uforward_iterator_tag@1@@Z
	DD	05H
	DD	FLAT:__tryblocktable$??$_Insert_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@1Uforward_iterator_tag@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
	ORG $+4
__unwindtable$??$_Insert_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@1Uforward_iterator_tag@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	03H
	DD	00H
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	07H
	DD	00H
	DD	07H
	DD	00H
__tryblocktable$??$_Insert_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@1Uforward_iterator_tag@1@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Insert_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@1Uforward_iterator_tag@1@@Z$10
	DD	04H
	DD	04H
	DD	05H
	DD	01H
	DD	FLAT:__catchsym$??$_Insert_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@1Uforward_iterator_tag@1@@Z$11
	DD	02H
	DD	02H
	DD	05H
	DD	01H
	DD	FLAT:__catchsym$??$_Insert_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@1Uforward_iterator_tag@1@@Z$12
	DD	08H
	DD	08H
	DD	09H
	DD	01H
	DD	FLAT:__catchsym$??$_Insert_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@1Uforward_iterator_tag@1@@Z$13
	DD	06H
	DD	06H
	DD	09H
	DD	01H
	DD	FLAT:__catchsym$??$_Insert_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@1Uforward_iterator_tag@1@@Z$14
__catchsym$??$_Insert_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@1Uforward_iterator_tag@1@@Z$10 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Insert_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@1Uforward_iterator_tag@1@@Z$0
__catchsym$??$_Insert_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@1Uforward_iterator_tag@1@@Z$11 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Insert_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@1Uforward_iterator_tag@1@@Z$3
__catchsym$??$_Insert_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@1Uforward_iterator_tag@1@@Z$12 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Insert_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@1Uforward_iterator_tag@1@@Z$2
__catchsym$??$_Insert_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@1Uforward_iterator_tag@1@@Z$13 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Insert_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@1Uforward_iterator_tag@1@@Z$7
__catchsym$??$_Insert_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@1Uforward_iterator_tag@1@@Z$14 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Insert_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@1Uforward_iterator_tag@1@@Z$6
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z$2
__catchsym$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z$2
__catchsym$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z$2
__catchsym$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z$2
__catchsym$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z$2
__catchsym$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z$2
__catchsym$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z$2
__catchsym$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z$2
__catchsym$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z$2
__catchsym$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z$2
__catchsym$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z$0
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\vector.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\vector.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\vector.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
;	COMDAT ?calcLOD@@YAMMM@Z
_TEXT	SEGMENT
$T1 = 8							; size = 4
_ssa$ = 8						; size = 4
_R$dead$ = 12						; size = 4
?calcLOD@@YAMMM@Z PROC					; calcLOD, COMDAT

; 17   : 	return			_sqrt(clampr((ssa - r_ssaGLOD_end)/(r_ssaGLOD_start-r_ssaGLOD_end),0.f,1.f));

	movss	xmm0, DWORD PTR ?r_ssaGLOD_start@@3MA
	movss	xmm2, DWORD PTR _ssa$[esp-4]
	subss	xmm0, DWORD PTR ?r_ssaGLOD_end@@3MA
	subss	xmm2, DWORD PTR ?r_ssaGLOD_end@@3MA
	divss	xmm2, xmm0
; File I:\Vitalya\mine\NSProjectX\xrCore\vector.h

; 96   : 	if		( val<_low	)	return _low; 

	xorps	xmm0, xmm0
	comiss	xmm0, xmm2
	jbe	SHORT $LN4@calcLOD
	mov	DWORD PTR $T1[esp-4], 0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 764  :             return (float)sqrt(_X);

	fld	DWORD PTR $T1[esp-4]
	fsqrt
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 18   : }

	ret	0
$LN4@calcLOD:
; File I:\Vitalya\mine\NSProjectX\xrCore\vector.h

; 97   : 	else if	( val>_high )	return _high;

	comiss	xmm2, DWORD PTR __real@3f800000
	jbe	SHORT $LN6@calcLOD
	mov	DWORD PTR $T1[esp-4], 1065353216	; 3f800000H
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 764  :             return (float)sqrt(_X);

	fld	DWORD PTR $T1[esp-4]
	fsqrt
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 18   : }

	ret	0
$LN6@calcLOD:
; File I:\Vitalya\mine\NSProjectX\xrCore\vector.h

; 98   : 	else					return val;

	movss	DWORD PTR $T1[esp-4], xmm2
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 764  :             return (float)sqrt(_X);

	fld	DWORD PTR $T1[esp-4]
	fsqrt
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 18   : }

	ret	0
?calcLOD@@YAMMM@Z ENDP					; calcLOD
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
;	COMDAT ?cmp_normal_items@@YA_NABU_NormalItem@R_dsgraph@@0@Z
_TEXT	SEGMENT
_N1$ = 8						; size = 4
_N2$ = 12						; size = 4
?cmp_normal_items@@YA_NABU_NormalItem@R_dsgraph@@0@Z PROC ; cmp_normal_items, COMDAT

; 22   : {	return (N1.ssa > N2.ssa);		}

	mov	eax, DWORD PTR _N1$[esp-4]
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _N2$[esp-4]
	comiss	xmm0, DWORD PTR [eax]
	jbe	SHORT $LN3@cmp_normal
	mov	al, 1
	ret	0
$LN3@cmp_normal:
	xor	al, al
	ret	0
?cmp_normal_items@@YA_NABU_NormalItem@R_dsgraph@@0@Z ENDP ; cmp_normal_items
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\vector.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
_TEXT	SEGMENT
?mapNormal_Render@@YIXAAUmapNormalItems@R_dsgraph@@@Z PROC ; mapNormal_Render
; _N$ = ecx

; 25   : {

	push	ecx
	push	esi
	mov	esi, ecx
	push	edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7080 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

	push	OFFSET ?cmp_normal_items@@YA_NABU_NormalItem@R_dsgraph@@0@Z ; cmp_normal_items
	mov	edx, DWORD PTR [esi+4]
	mov	eax, edx
	mov	ecx, DWORD PTR [esi]
	sub	eax, ecx
	sar	eax, 3
	push	eax
	call	??$_Sort_unchecked@PAU_NormalItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_NormalItem@R_dsgraph@@0HP6A_NABU12@1@Z@Z ; std::_Sort_unchecked<R_dsgraph::_NormalItem *,bool (__cdecl*)(R_dsgraph::_NormalItem const &,R_dsgraph::_NormalItem const &)>
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 28   : 	_NormalItem				*I=&*N.begin(), *E = &*N.end();

	mov	edi, DWORD PTR [esi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7080 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

	add	esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1463 :         return iterator(_My_data._Myfirst, _STD addressof(_My_data));

	mov	esi, DWORD PTR [esi]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 29   : 	for (; I!=E; I++)		{

	cmp	esi, edi
	je	SHORT $LN3@mapNormal_
	movss	xmm3, DWORD PTR __real@3f800000
$LL4@mapNormal_:

; 17   : 	return			_sqrt(clampr((ssa - r_ssaGLOD_end)/(r_ssaGLOD_start-r_ssaGLOD_end),0.f,1.f));

	movss	xmm0, DWORD PTR ?r_ssaGLOD_start@@3MA
	movss	xmm2, DWORD PTR [esi]
	subss	xmm0, DWORD PTR ?r_ssaGLOD_end@@3MA
	subss	xmm2, DWORD PTR ?r_ssaGLOD_end@@3MA
	divss	xmm2, xmm0
; File I:\Vitalya\mine\NSProjectX\xrCore\vector.h

; 96   : 	if		( val<_low	)	return _low; 

	xorps	xmm0, xmm0
	comiss	xmm0, xmm2
	jbe	SHORT $LN37@mapNormal_
	movaps	xmm2, xmm0
	jmp	SHORT $LN39@mapNormal_
$LN37@mapNormal_:

; 97   : 	else if	( val>_high )	return _high;

	comiss	xmm2, xmm3
	jbe	SHORT $LN39@mapNormal_
	movaps	xmm2, xmm3
$LN39@mapNormal_:
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 764  :             return (float)sqrt(_X);

	sqrtss	xmm0, xmm2
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 31   : 		Ni.pVisual->Render	(calcLOD(Ni.ssa,Ni.pVisual->vis.sphere.R));

	mov	ecx, DWORD PTR [esi+4]
	push	ecx
	mov	eax, DWORD PTR [ecx]
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR [eax]
	movss	xmm3, DWORD PTR __real@3f800000
	add	esi, 8
	cmp	esi, edi
	jne	SHORT $LL4@mapNormal_
$LN3@mapNormal_:

; 32   : 	}
; 33   : }

	pop	edi
	pop	esi
	pop	ecx
	ret	0
?mapNormal_Render@@YIXAAUmapNormalItems@R_dsgraph@@@Z ENDP ; mapNormal_Render
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
;	COMDAT ?cmp_matrix_items@@YA_NABU_MatrixItem@R_dsgraph@@0@Z
_TEXT	SEGMENT
_N1$ = 8						; size = 4
_N2$ = 12						; size = 4
?cmp_matrix_items@@YA_NABU_MatrixItem@R_dsgraph@@0@Z PROC ; cmp_matrix_items, COMDAT

; 37   : {	return (N1.ssa > N2.ssa);		}

	mov	eax, DWORD PTR _N1$[esp-4]
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _N2$[esp-4]
	comiss	xmm0, DWORD PTR [eax]
	jbe	SHORT $LN3@cmp_matrix
	mov	al, 1
	ret	0
$LN3@cmp_matrix:
	xor	al, al
	ret	0
?cmp_matrix_items@@YA_NABU_MatrixItem@R_dsgraph@@0@Z ENDP ; cmp_matrix_items
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\FStaticRender.cpp
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\LightTrack.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\LightTrack.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\vector.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\LightTrack.cpp
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\FStaticRender.cpp
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\lighttrack.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\FStaticRender.cpp
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\lighttrack.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\FStaticRender.cpp
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\lighttrack.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\LightTrack.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\vector.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\LightTrack.cpp
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\FStaticRender.cpp
; File I:\Vitalya\mine\NSProjectX\xrEngine\R_Backend.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\FStaticRender.cpp
; File I:\Vitalya\mine\NSProjectX\xrEngine\R_Backend.h
; File I:\Vitalya\mine\NSProjectX\xrCore\xr_resource.h
; File I:\Vitalya\mine\NSProjectX\xrEngine\R_Backend.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector4.h
; File I:\Vitalya\mine\NSProjectX\xrEngine\r_constants_cache.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector4.h
; File I:\Vitalya\mine\NSProjectX\xrEngine\r_constants_cache.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector4.h
; File I:\Vitalya\mine\NSProjectX\xrEngine\r_constants_cache.h
; File I:\Vitalya\mine\NSProjectX\xrCore\xr_resource.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\FStaticRender.cpp
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\vector.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
_TEXT	SEGMENT
_o_sun$1$ = -40						; size = 4
_o_hemi$1$ = -36					; size = 4
$T1 = -32						; size = 4
_O$1$ = -28						; size = 4
_E$1$ = -24						; size = 4
_N$1$ = -20						; size = 4
_data$2 = -16						; size = 16
?mapMatrix_Render@@YIXAAUmapMatrixItems@R_dsgraph@@@Z PROC ; mapMatrix_Render
; _N$ = ecx

; 40   : {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 40					; 00000028H
	push	ebx
	push	ebp
	push	esi
	mov	esi, ecx
	push	edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7080 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

	push	OFFSET ?cmp_matrix_items@@YA_NABU_MatrixItem@R_dsgraph@@0@Z ; cmp_matrix_items
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 40   : {

	mov	DWORD PTR _N$1$[esp+60], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7079 :     const auto _ULast  = _Get_unwrapped(_Last);

	mov	edx, DWORD PTR [esi+4]

; 7080 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

	mov	eax, edx
	mov	ecx, DWORD PTR [esi]
	sub	eax, ecx
	sar	eax, 2
	imul	eax, eax, 678152731
	push	eax
	call	??$_Sort_unchecked@PAU_MatrixItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_MatrixItem@R_dsgraph@@0HP6A_NABU12@1@Z@Z ; std::_Sort_unchecked<R_dsgraph::_MatrixItem *,bool (__cdecl*)(R_dsgraph::_MatrixItem const &,R_dsgraph::_MatrixItem const &)>
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 43   : 	_MatrixItem				*I=&*N.begin(), *E = &*N.end();

	mov	eax, DWORD PTR [esi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7080 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

	add	esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1463 :         return iterator(_My_data._Myfirst, _STD addressof(_My_data));

	mov	ebx, DWORD PTR [esi]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 43   : 	_MatrixItem				*I=&*N.begin(), *E = &*N.end();

	mov	DWORD PTR _E$1$[esp+56], eax

; 44   : 	for (; I!=E; I++)		{

	cmp	ebx, eax
	je	$LN106@mapMatrix_
$LL4@mapMatrix_:

; 45   : 		_MatrixItem&	Ni				= *I;
; 46   : 		RCache.set_xform_world			(Ni.Matrix);

	mov	ecx, DWORD PTR __imp_?RCache@@3VCBackend@@A
	lea	eax, DWORD PTR [ebx+12]
	push	eax
	call	DWORD PTR __imp_?set_xform_world@CBackend@@QAEXABU?$_matrix@M@@@Z

; 47   : 		RImplementation.apply_object	(Ni.pObject);

	mov	edi, DWORD PTR [ebx+4]
	mov	DWORD PTR _O$1$[esp+56], edi
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\FStaticRender.cpp

; 250  : 	if (0==O)			return	;

	test	edi, edi
	je	$LN107@mapMatrix_

; 251  : 	if (PHASE_NORMAL==phase	&& O->renderable_ROS())		{

	cmp	DWORD PTR ?RImplementation@@3VCRender@@A+292, 0
	jne	$LN107@mapMatrix_
	mov	ecx, edi
	call	DWORD PTR __imp_?renderable_ROS@IRenderable@@QAEPAVIRender_ObjectSpecific@@XZ
	test	eax, eax
	je	$LN107@mapMatrix_

; 252  : 		CROS_impl& LT		= *((CROS_impl*)O->renderable.pROS);

	mov	esi, DWORD PTR [edi+72]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\LightTrack.h

; 66   : 		if (dwFrameSmooth!=Device.dwFrame)		update_smooth();

	xorps	xmm5, xmm5
	mov	eax, DWORD PTR __imp_?Device@@3VCRenderDevice@@A
	movss	xmm2, DWORD PTR __real@3f800000
	mov	ecx, DWORD PTR [esi+12]
	mov	edx, DWORD PTR [eax+244]
	cmp	ecx, edx
	je	SHORT $LN104@mapMatrix_
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\LightTrack.cpp

; 260  : 	dwFrameSmooth			=	Device.dwFrame					;

	mov	DWORD PTR [esi+12], edx

; 261  : 	if (O && (0==result_count))	update(O)						;	// First time only
; 262  : 	float	l_f				=	Device.fTimeDelta*ps_r2_lt_smooth;

	mov	eax, DWORD PTR __imp_?Device@@3VCRenderDevice@@A
	movss	xmm3, DWORD PTR [eax+468]
; File I:\Vitalya\mine\NSProjectX\xrCore\vector.h

; 92   : 	if( val<_low ) val = _low; else if( val>_high ) val = _high;

	comiss	xmm5, xmm3
	jbe	SHORT $LN53@mapMatrix_
	movaps	xmm3, xmm5
	jmp	SHORT $LN55@mapMatrix_
$LN53@mapMatrix_:
	comiss	xmm3, xmm2
	jbe	SHORT $LN55@mapMatrix_
	movaps	xmm3, xmm2
$LN55@mapMatrix_:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\LightTrack.cpp

; 264  : 	float	l_i				=	1.f-l_f							;

	movaps	xmm1, xmm2

; 265  : 	hemi_smooth				=	hemi_value*l_f + hemi_smooth*l_i;

	movaps	xmm4, xmm3
	mulss	xmm4, DWORD PTR [esi+1932]
	subss	xmm1, xmm3

; 266  : 	sun_smooth				=	sun_value *l_f + sun_smooth *l_i;

	mov	ecx, edx
	mulss	xmm3, DWORD PTR [esi+1940]
	movaps	xmm0, xmm1
	mulss	xmm1, DWORD PTR [esi+1944]
	mulss	xmm0, DWORD PTR [esi+1936]
	addss	xmm3, xmm1
	addss	xmm4, xmm0
	movss	DWORD PTR [esi+1944], xmm3
	movss	DWORD PTR [esi+1936], xmm4
	jmp	SHORT $LN48@mapMatrix_
$LN104@mapMatrix_:
	movss	xmm4, DWORD PTR [esi+1936]
$LN48@mapMatrix_:
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\FStaticRender.cpp

; 255  : 		float o_hemi		= 0.5f*LT.get_hemi						();

	movss	xmm6, DWORD PTR __real@3f000000
	movaps	xmm0, xmm4
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\lighttrack.h

; 70   : 		if (dwFrameSmooth!=Device.dwFrame)		update_smooth();

	mov	eax, DWORD PTR __imp_?Device@@3VCRenderDevice@@A
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\FStaticRender.cpp

; 255  : 		float o_hemi		= 0.5f*LT.get_hemi						();

	mulss	xmm0, xmm6
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\lighttrack.h

; 70   : 		if (dwFrameSmooth!=Device.dwFrame)		update_smooth();

	mov	eax, DWORD PTR [eax+244]
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\FStaticRender.cpp

; 255  : 		float o_hemi		= 0.5f*LT.get_hemi						();

	movss	DWORD PTR _o_hemi$1$[esp+56], xmm0
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\lighttrack.h

; 70   : 		if (dwFrameSmooth!=Device.dwFrame)		update_smooth();

	cmp	ecx, eax
	je	SHORT $LN105@mapMatrix_
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\LightTrack.cpp

; 260  : 	dwFrameSmooth			=	Device.dwFrame					;

	mov	DWORD PTR [esi+12], eax

; 261  : 	if (O && (0==result_count))	update(O)						;	// First time only
; 262  : 	float	l_f				=	Device.fTimeDelta*ps_r2_lt_smooth;

	mov	eax, DWORD PTR __imp_?Device@@3VCRenderDevice@@A
	movss	xmm3, DWORD PTR [eax+468]
; File I:\Vitalya\mine\NSProjectX\xrCore\vector.h

; 92   : 	if( val<_low ) val = _low; else if( val>_high ) val = _high;

	comiss	xmm5, xmm3
	jbe	SHORT $LN65@mapMatrix_
	movaps	xmm3, xmm5
	jmp	SHORT $LN67@mapMatrix_
$LN65@mapMatrix_:
	comiss	xmm3, xmm2
	jbe	SHORT $LN67@mapMatrix_
	movaps	xmm3, xmm2
$LN67@mapMatrix_:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\LightTrack.cpp

; 264  : 	float	l_i				=	1.f-l_f							;

	movaps	xmm1, xmm2

; 265  : 	hemi_smooth				=	hemi_value*l_f + hemi_smooth*l_i;

	movaps	xmm0, xmm3
	mulss	xmm0, DWORD PTR [esi+1932]
	subss	xmm1, xmm3

; 266  : 	sun_smooth				=	sun_value *l_f + sun_smooth *l_i;

	mulss	xmm3, DWORD PTR [esi+1940]
	mulss	xmm4, xmm1
	mulss	xmm1, DWORD PTR [esi+1944]
	addss	xmm0, xmm4
	addss	xmm3, xmm1
	movss	DWORD PTR [esi+1936], xmm0
	movss	DWORD PTR [esi+1944], xmm3
	jmp	SHORT $LN60@mapMatrix_
$LN105@mapMatrix_:
	movss	xmm3, DWORD PTR [esi+1944]
$LN60@mapMatrix_:
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\FStaticRender.cpp

; 257  : 		RCache.set_c		(c_ldynamic_props,o_sun,o_sun,o_sun,o_hemi);

	mov	ebp, DWORD PTR __imp_?RCache@@3VCBackend@@A
	mulss	xmm3, xmm6
; File I:\Vitalya\mine\NSProjectX\xrEngine\R_Backend.h

; 207  : 	ICF	void						set_c(shared_str& n, float x, float y, float z, float w) { if (ctable)	set_c(&*ctable->get(n), x, y, z, w); }

	mov	ecx, DWORD PTR [ebp+8864]
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\FStaticRender.cpp

; 256  : 		float o_sun			= 0.5f*LT.get_sun						();

	movss	DWORD PTR _o_sun$1$[esp+56], xmm3
; File I:\Vitalya\mine\NSProjectX\xrEngine\R_Backend.h

; 207  : 	ICF	void						set_c(shared_str& n, float x, float y, float z, float w) { if (ctable)	set_c(&*ctable->get(n), x, y, z, w); }

	test	ecx, ecx
	je	$LN70@mapMatrix_
	push	OFFSET ?RImplementation@@3VCRender@@A+1100
	lea	eax, DWORD PTR $T1[esp+60]
	push	eax
	call	DWORD PTR __imp_?get@R_constant_table@@QAE?AV?$resptr_core@UR_constant@@V?$resptr_base@UR_constant@@@@@@AAVshared_str@@@Z
; File I:\Vitalya\mine\NSProjectX\xrCore\xr_resource.h

; 70   : 	T &					operator*() const												{	return *p_;	}

	mov	edi, DWORD PTR [eax]
; File I:\Vitalya\mine\NSProjectX\xrEngine\R_Backend.h

; 191  : 	ICF	void						set_c(R_constant* C, float x, float y, float z, float w) { if (C)		constants.set(C, x, y, z, w); }

	test	edi, edi
	je	SHORT $LN83@mapMatrix_
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector4.h

; 17   : 	IC	SelfRef 	set(T _x, T _y, T _z, T _w=1)		{ x=_x;		y=_y;		z=_z;		w=_w;		return *this; }

	movss	xmm0, DWORD PTR _o_sun$1$[esp+56]
; File I:\Vitalya\mine\NSProjectX\xrEngine\r_constants_cache.h

; 147  : 		if (C->destination & 1) { a_pixel.set(C, C->ps, A); a_pixel.b_dirty = TRUE; }

	movzx	eax, WORD PTR [edi+10]
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector4.h

; 17   : 	IC	SelfRef 	set(T _x, T _y, T _z, T _w=1)		{ x=_x;		y=_y;		z=_z;		w=_w;		return *this; }

	movss	DWORD PTR _data$2[esp+56], xmm0
; File I:\Vitalya\mine\NSProjectX\xrEngine\r_constants_cache.h

; 147  : 		if (C->destination & 1) { a_pixel.set(C, C->ps, A); a_pixel.b_dirty = TRUE; }

	mov	ecx, eax
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector4.h

; 17   : 	IC	SelfRef 	set(T _x, T _y, T _z, T _w=1)		{ x=_x;		y=_y;		z=_z;		w=_w;		return *this; }

	movss	DWORD PTR _data$2[esp+60], xmm0
	movss	DWORD PTR _data$2[esp+64], xmm0
	movss	xmm0, DWORD PTR _o_hemi$1$[esp+56]
	movss	DWORD PTR _data$2[esp+68], xmm0
; File I:\Vitalya\mine\NSProjectX\xrEngine\r_constants_cache.h

; 147  : 		if (C->destination & 1) { a_pixel.set(C, C->ps, A); a_pixel.b_dirty = TRUE; }

	test	al, 1
	je	SHORT $LN82@mapMatrix_
	lea	eax, DWORD PTR _data$2[esp+56]
	push	eax
	lea	eax, DWORD PTR [edi+12]
	push	eax
	push	edi
	lea	ecx, DWORD PTR [ebp+608]
	call	?set@R_constant_array@@QAEXPAUR_constant@@AAUR_constant_load@@ABU?$_vector4@M@@@Z ; R_constant_array::set
	mov	DWORD PTR [ebp+4720], 1
	movzx	ecx, WORD PTR [edi+10]
$LN82@mapMatrix_:

; 148  : 		if (C->destination & 2) { a_vertex.set(C, C->vs, A); a_vertex.b_dirty = TRUE; }

	test	cl, 2
	je	SHORT $LN83@mapMatrix_
	lea	eax, DWORD PTR _data$2[esp+56]
	push	eax
	lea	eax, DWORD PTR [edi+16]
	push	eax
	push	edi
	lea	ecx, DWORD PTR [ebp+4736]
	call	?set@R_constant_array@@QAEXPAUR_constant@@AAUR_constant_load@@ABU?$_vector4@M@@@Z ; R_constant_array::set
	mov	DWORD PTR [ebp+8848], 1
$LN83@mapMatrix_:
; File I:\Vitalya\mine\NSProjectX\xrCore\xr_resource.h

; 64   : 						~resptr_core	()												{	_dec();						}

	lea	ecx, DWORD PTR $T1[esp+56]
	call	?_dec@?$resptr_base@UR_constant@@@@IAEXXZ ; resptr_base<R_constant>::_dec
	movss	xmm2, DWORD PTR __real@3f800000
	mov	edi, DWORD PTR _O$1$[esp+56]
$LN70@mapMatrix_:
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\FStaticRender.cpp

; 259  : 		if ((LT.shadow_recv_frame==Device.dwFrame) && O->renderable_ShadowReceive())	

	mov	eax, DWORD PTR __imp_?Device@@3VCRenderDevice@@A
	mov	edx, DWORD PTR [esi+1924]
	cmp	edx, DWORD PTR [eax+244]
	jne	SHORT $LN43@mapMatrix_
	mov	eax, DWORD PTR [edi]
	mov	ecx, edi
	call	DWORD PTR [eax+12]
	test	eax, eax
	je	SHORT $LN107@mapMatrix_

; 260  : 			RImplementation.L_Projector->setup	(LT.shadow_recv_slot);

	push	DWORD PTR [esi+1928]
	mov	ecx, DWORD PTR ?RImplementation@@3VCRender@@A+992
	call	?setup@CLightProjector@@QAEXH@Z		; CLightProjector::setup
$LN107@mapMatrix_:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 17   : 	return			_sqrt(clampr((ssa - r_ssaGLOD_end)/(r_ssaGLOD_start-r_ssaGLOD_end),0.f,1.f));

	movss	xmm2, DWORD PTR __real@3f800000
$LN43@mapMatrix_:
	movss	xmm0, DWORD PTR ?r_ssaGLOD_start@@3MA
	movss	xmm3, DWORD PTR [ebx]
	subss	xmm0, DWORD PTR ?r_ssaGLOD_end@@3MA
	subss	xmm3, DWORD PTR ?r_ssaGLOD_end@@3MA
	divss	xmm3, xmm0
; File I:\Vitalya\mine\NSProjectX\xrCore\vector.h

; 96   : 	if		( val<_low	)	return _low; 

	xorps	xmm0, xmm0
	comiss	xmm0, xmm3
	jbe	SHORT $LN90@mapMatrix_
	movaps	xmm2, xmm0
	jmp	SHORT $LN93@mapMatrix_
$LN90@mapMatrix_:

; 97   : 	else if	( val>_high )	return _high;

	comiss	xmm3, xmm2
	ja	SHORT $LN93@mapMatrix_

; 98   : 	else					return val;

	movaps	xmm2, xmm3
$LN93@mapMatrix_:
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 764  :             return (float)sqrt(_X);

	sqrtss	xmm0, xmm2
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 49   : 		Ni.pVisual->Render				(calcLOD(Ni.ssa,Ni.pVisual->vis.sphere.R));

	mov	ecx, DWORD PTR [ebx+8]
	push	ecx
	mov	eax, DWORD PTR [ecx]
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR [eax]
	add	ebx, 76					; 0000004cH
	cmp	ebx, DWORD PTR _E$1$[esp+56]
	jne	$LL4@mapMatrix_

; 50   : 	}
; 51   : 	N.clear	();

	mov	ecx, DWORD PTR _N$1$[esp+56]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [ecx+4], eax

; 52   : }

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN106@mapMatrix_:
	pop	edi
	mov	DWORD PTR [esi+4], ebx
	pop	esi
	pop	ebp
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?mapMatrix_Render@@YIXAAUmapMatrixItems@R_dsgraph@@@Z ENDP ; mapMatrix_Render
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\FStaticRender.cpp
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\LightTrack.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\LightTrack.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\vector.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\LightTrack.cpp
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\FStaticRender.cpp
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\lighttrack.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\FStaticRender.cpp
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\lighttrack.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\FStaticRender.cpp
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\lighttrack.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\LightTrack.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\vector.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\LightTrack.cpp
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\FStaticRender.cpp
; File I:\Vitalya\mine\NSProjectX\xrEngine\R_Backend.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\FStaticRender.cpp
; File I:\Vitalya\mine\NSProjectX\xrEngine\R_Backend.h
; File I:\Vitalya\mine\NSProjectX\xrCore\xr_resource.h
; File I:\Vitalya\mine\NSProjectX\xrEngine\R_Backend.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector4.h
; File I:\Vitalya\mine\NSProjectX\xrEngine\r_constants_cache.h
; File I:\Vitalya\mine\NSProjectX\xrEngine\R_Backend.h
; File I:\Vitalya\mine\NSProjectX\xrEngine\r_constants_cache.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector4.h
; File I:\Vitalya\mine\NSProjectX\xrEngine\r_constants_cache.h
; File I:\Vitalya\mine\NSProjectX\xrCore\xr_resource.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\FStaticRender.cpp
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\vector.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
_TEXT	SEGMENT
_N$1$ = -40						; size = 4
_this$1$ = -36						; size = 4
_o_sun$1$ = -32						; size = 4
_o_hemi$1$ = -28					; size = 4
$T1 = -24						; size = 4
_V$1$ = -20						; size = 4
_data$2 = -16						; size = 16
?sorted_L1@@YIXPAUTNode@?$FixedMAP@MU_MatrixItemS@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; sorted_L1
; _N$ = ecx

; 56   : {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 40					; 00000028H
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	ebp, ecx

; 57   : 	VERIFY (N);
; 58   : 	IRender_Visual *V				= N->val.pVisual;

	mov	edi, DWORD PTR [ebp+12]

; 59   : 	VERIFY (V && V->shader._get());
; 60   : 	RCache.set_Element				(N->val.se);

	mov	ecx, DWORD PTR __imp_?RCache@@3VCBackend@@A
	push	0
	push	DWORD PTR [ebp+80]
	mov	DWORD PTR _N$1$[esp+64], ebp
	mov	DWORD PTR _V$1$[esp+64], edi
	call	DWORD PTR __imp_?set_Element@CBackend@@QAEXPAUShaderElement@@I@Z

; 61   : 	RCache.set_xform_world			(N->val.Matrix);

	mov	ecx, DWORD PTR __imp_?RCache@@3VCBackend@@A
	lea	eax, DWORD PTR [ebp+16]
	push	eax
	call	DWORD PTR __imp_?set_xform_world@CBackend@@QAEXABU?$_matrix@M@@@Z

; 62   : 	RImplementation.apply_object	(N->val.pObject);

	mov	ebx, DWORD PTR [ebp+8]
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\FStaticRender.cpp

; 250  : 	if (0==O)			return	;

	test	ebx, ebx
	je	$LN97@sorted_L1

; 251  : 	if (PHASE_NORMAL==phase	&& O->renderable_ROS())		{

	cmp	DWORD PTR ?RImplementation@@3VCRender@@A+292, 0
	jne	$LN97@sorted_L1
	mov	ecx, ebx
	call	DWORD PTR __imp_?renderable_ROS@IRenderable@@QAEPAVIRender_ObjectSpecific@@XZ
	test	eax, eax
	je	$LN97@sorted_L1

; 252  : 		CROS_impl& LT		= *((CROS_impl*)O->renderable.pROS);

	mov	esi, DWORD PTR [ebx+72]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\LightTrack.h

; 66   : 		if (dwFrameSmooth!=Device.dwFrame)		update_smooth();

	xorps	xmm4, xmm4
	mov	eax, DWORD PTR __imp_?Device@@3VCRenderDevice@@A
	movss	xmm2, DWORD PTR __real@3f800000
	mov	edx, DWORD PTR [esi+12]
	mov	ecx, DWORD PTR [eax+244]
	cmp	edx, ecx
	je	SHORT $LN95@sorted_L1
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\LightTrack.cpp

; 260  : 	dwFrameSmooth			=	Device.dwFrame					;

	mov	DWORD PTR [esi+12], ecx

; 261  : 	if (O && (0==result_count))	update(O)						;	// First time only
; 262  : 	float	l_f				=	Device.fTimeDelta*ps_r2_lt_smooth;

	mov	eax, DWORD PTR __imp_?Device@@3VCRenderDevice@@A
	movss	xmm3, DWORD PTR [eax+468]
; File I:\Vitalya\mine\NSProjectX\xrCore\vector.h

; 92   : 	if( val<_low ) val = _low; else if( val>_high ) val = _high;

	comiss	xmm4, xmm3
	jbe	SHORT $LN28@sorted_L1
	movaps	xmm3, xmm4
	jmp	SHORT $LN30@sorted_L1
$LN28@sorted_L1:
	comiss	xmm3, xmm2
	jbe	SHORT $LN30@sorted_L1
	movaps	xmm3, xmm2
$LN30@sorted_L1:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\LightTrack.cpp

; 264  : 	float	l_i				=	1.f-l_f							;

	movaps	xmm1, xmm2

; 265  : 	hemi_smooth				=	hemi_value*l_f + hemi_smooth*l_i;

	movaps	xmm5, xmm3
	mulss	xmm5, DWORD PTR [esi+1932]
	subss	xmm1, xmm3

; 266  : 	sun_smooth				=	sun_value *l_f + sun_smooth *l_i;

	mov	edx, ecx
	mulss	xmm3, DWORD PTR [esi+1940]
	movaps	xmm0, xmm1
	mulss	xmm1, DWORD PTR [esi+1944]
	mulss	xmm0, DWORD PTR [esi+1936]
	addss	xmm3, xmm1
	addss	xmm5, xmm0
	movss	DWORD PTR [esi+1944], xmm3
	movss	DWORD PTR [esi+1936], xmm5
	jmp	SHORT $LN23@sorted_L1
$LN95@sorted_L1:
	movss	xmm5, DWORD PTR [esi+1936]
$LN23@sorted_L1:
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\FStaticRender.cpp

; 255  : 		float o_hemi		= 0.5f*LT.get_hemi						();

	movss	xmm6, DWORD PTR __real@3f000000
	movaps	xmm0, xmm5
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\lighttrack.h

; 70   : 		if (dwFrameSmooth!=Device.dwFrame)		update_smooth();

	mov	eax, DWORD PTR __imp_?Device@@3VCRenderDevice@@A
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\FStaticRender.cpp

; 255  : 		float o_hemi		= 0.5f*LT.get_hemi						();

	mulss	xmm0, xmm6
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\lighttrack.h

; 70   : 		if (dwFrameSmooth!=Device.dwFrame)		update_smooth();

	mov	eax, DWORD PTR [eax+244]
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\FStaticRender.cpp

; 255  : 		float o_hemi		= 0.5f*LT.get_hemi						();

	movss	DWORD PTR _o_hemi$1$[esp+56], xmm0
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\lighttrack.h

; 70   : 		if (dwFrameSmooth!=Device.dwFrame)		update_smooth();

	cmp	edx, eax
	je	SHORT $LN96@sorted_L1
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\LightTrack.cpp

; 260  : 	dwFrameSmooth			=	Device.dwFrame					;

	mov	DWORD PTR [esi+12], eax

; 261  : 	if (O && (0==result_count))	update(O)						;	// First time only
; 262  : 	float	l_f				=	Device.fTimeDelta*ps_r2_lt_smooth;

	mov	eax, DWORD PTR __imp_?Device@@3VCRenderDevice@@A
	movss	xmm3, DWORD PTR [eax+468]
; File I:\Vitalya\mine\NSProjectX\xrCore\vector.h

; 92   : 	if( val<_low ) val = _low; else if( val>_high ) val = _high;

	comiss	xmm4, xmm3
	jbe	SHORT $LN40@sorted_L1
	movaps	xmm3, xmm4
	jmp	SHORT $LN42@sorted_L1
$LN40@sorted_L1:
	comiss	xmm3, xmm2
	jbe	SHORT $LN42@sorted_L1
	movaps	xmm3, xmm2
$LN42@sorted_L1:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\LightTrack.cpp

; 264  : 	float	l_i				=	1.f-l_f							;

	movaps	xmm1, xmm2

; 265  : 	hemi_smooth				=	hemi_value*l_f + hemi_smooth*l_i;

	movaps	xmm0, xmm3
	mulss	xmm0, DWORD PTR [esi+1932]
	subss	xmm1, xmm3

; 266  : 	sun_smooth				=	sun_value *l_f + sun_smooth *l_i;

	mulss	xmm3, DWORD PTR [esi+1940]
	mulss	xmm5, xmm1
	mulss	xmm1, DWORD PTR [esi+1944]
	addss	xmm0, xmm5
	addss	xmm3, xmm1
	movss	DWORD PTR [esi+1936], xmm0
	movss	DWORD PTR [esi+1944], xmm3
	jmp	SHORT $LN35@sorted_L1
$LN96@sorted_L1:
	movss	xmm3, DWORD PTR [esi+1944]
$LN35@sorted_L1:
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\FStaticRender.cpp

; 257  : 		RCache.set_c		(c_ldynamic_props,o_sun,o_sun,o_sun,o_hemi);

	mov	eax, DWORD PTR __imp_?RCache@@3VCBackend@@A
	mulss	xmm3, xmm6
	mov	DWORD PTR _this$1$[esp+56], eax
; File I:\Vitalya\mine\NSProjectX\xrEngine\R_Backend.h

; 207  : 	ICF	void						set_c(shared_str& n, float x, float y, float z, float w) { if (ctable)	set_c(&*ctable->get(n), x, y, z, w); }

	mov	ecx, DWORD PTR [eax+8864]
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\FStaticRender.cpp

; 256  : 		float o_sun			= 0.5f*LT.get_sun						();

	movss	DWORD PTR _o_sun$1$[esp+56], xmm3
; File I:\Vitalya\mine\NSProjectX\xrEngine\R_Backend.h

; 207  : 	ICF	void						set_c(shared_str& n, float x, float y, float z, float w) { if (ctable)	set_c(&*ctable->get(n), x, y, z, w); }

	test	ecx, ecx
	je	$LN45@sorted_L1
	push	OFFSET ?RImplementation@@3VCRender@@A+1100
	lea	eax, DWORD PTR $T1[esp+60]
	push	eax
	call	DWORD PTR __imp_?get@R_constant_table@@QAE?AV?$resptr_core@UR_constant@@V?$resptr_base@UR_constant@@@@@@AAVshared_str@@@Z
; File I:\Vitalya\mine\NSProjectX\xrCore\xr_resource.h

; 70   : 	T &					operator*() const												{	return *p_;	}

	mov	edi, DWORD PTR [eax]
; File I:\Vitalya\mine\NSProjectX\xrEngine\R_Backend.h

; 191  : 	ICF	void						set_c(R_constant* C, float x, float y, float z, float w) { if (C)		constants.set(C, x, y, z, w); }

	test	edi, edi
	je	SHORT $LN58@sorted_L1
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector4.h

; 17   : 	IC	SelfRef 	set(T _x, T _y, T _z, T _w=1)		{ x=_x;		y=_y;		z=_z;		w=_w;		return *this; }

	movss	xmm0, DWORD PTR _o_sun$1$[esp+56]
; File I:\Vitalya\mine\NSProjectX\xrEngine\r_constants_cache.h

; 147  : 		if (C->destination & 1) { a_pixel.set(C, C->ps, A); a_pixel.b_dirty = TRUE; }

	movzx	eax, WORD PTR [edi+10]
; File I:\Vitalya\mine\NSProjectX\xrEngine\R_Backend.h

; 191  : 	ICF	void						set_c(R_constant* C, float x, float y, float z, float w) { if (C)		constants.set(C, x, y, z, w); }

	mov	ebp, DWORD PTR _this$1$[esp+56]
; File I:\Vitalya\mine\NSProjectX\xrEngine\r_constants_cache.h

; 147  : 		if (C->destination & 1) { a_pixel.set(C, C->ps, A); a_pixel.b_dirty = TRUE; }

	mov	ecx, eax
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector4.h

; 17   : 	IC	SelfRef 	set(T _x, T _y, T _z, T _w=1)		{ x=_x;		y=_y;		z=_z;		w=_w;		return *this; }

	movss	DWORD PTR _data$2[esp+56], xmm0
	movss	DWORD PTR _data$2[esp+60], xmm0
	movss	DWORD PTR _data$2[esp+64], xmm0
	movss	xmm0, DWORD PTR _o_hemi$1$[esp+56]
	movss	DWORD PTR _data$2[esp+68], xmm0
; File I:\Vitalya\mine\NSProjectX\xrEngine\r_constants_cache.h

; 147  : 		if (C->destination & 1) { a_pixel.set(C, C->ps, A); a_pixel.b_dirty = TRUE; }

	test	al, 1
	je	SHORT $LN57@sorted_L1
	lea	eax, DWORD PTR _data$2[esp+56]
	push	eax
	lea	eax, DWORD PTR [edi+12]
	push	eax
	push	edi
	lea	ecx, DWORD PTR [ebp+608]
	call	?set@R_constant_array@@QAEXPAUR_constant@@AAUR_constant_load@@ABU?$_vector4@M@@@Z ; R_constant_array::set
	mov	DWORD PTR [ebp+4720], 1
	movzx	ecx, WORD PTR [edi+10]
$LN57@sorted_L1:

; 148  : 		if (C->destination & 2) { a_vertex.set(C, C->vs, A); a_vertex.b_dirty = TRUE; }

	test	cl, 2
	je	SHORT $LN98@sorted_L1
	lea	eax, DWORD PTR _data$2[esp+56]
	push	eax
	lea	eax, DWORD PTR [edi+16]
	push	eax
	push	edi
	lea	ecx, DWORD PTR [ebp+4736]
	call	?set@R_constant_array@@QAEXPAUR_constant@@AAUR_constant_load@@ABU?$_vector4@M@@@Z ; R_constant_array::set
	mov	DWORD PTR [ebp+8848], 1
$LN98@sorted_L1:
; File I:\Vitalya\mine\NSProjectX\xrCore\xr_resource.h

; 64   : 						~resptr_core	()												{	_dec();						}

	mov	ebp, DWORD PTR _N$1$[esp+56]
$LN58@sorted_L1:
	lea	ecx, DWORD PTR $T1[esp+56]
	call	?_dec@?$resptr_base@UR_constant@@@@IAEXXZ ; resptr_base<R_constant>::_dec
	movss	xmm2, DWORD PTR __real@3f800000
	mov	edi, DWORD PTR _V$1$[esp+56]
$LN45@sorted_L1:
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\FStaticRender.cpp

; 259  : 		if ((LT.shadow_recv_frame==Device.dwFrame) && O->renderable_ShadowReceive())	

	mov	eax, DWORD PTR __imp_?Device@@3VCRenderDevice@@A
	mov	edx, DWORD PTR [esi+1924]
	cmp	edx, DWORD PTR [eax+244]
	jne	SHORT $LN18@sorted_L1
	mov	eax, DWORD PTR [ebx]
	mov	ecx, ebx
	call	DWORD PTR [eax+12]
	test	eax, eax
	je	SHORT $LN97@sorted_L1

; 260  : 			RImplementation.L_Projector->setup	(LT.shadow_recv_slot);

	push	DWORD PTR [esi+1928]
	mov	ecx, DWORD PTR ?RImplementation@@3VCRender@@A+992
	call	?setup@CLightProjector@@QAEXH@Z		; CLightProjector::setup
$LN97@sorted_L1:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 17   : 	return			_sqrt(clampr((ssa - r_ssaGLOD_end)/(r_ssaGLOD_start-r_ssaGLOD_end),0.f,1.f));

	movss	xmm2, DWORD PTR __real@3f800000
$LN18@sorted_L1:
	movss	xmm0, DWORD PTR ?r_ssaGLOD_start@@3MA
	movss	xmm3, DWORD PTR [ebp]
	subss	xmm0, DWORD PTR ?r_ssaGLOD_end@@3MA
	subss	xmm3, DWORD PTR ?r_ssaGLOD_end@@3MA
	divss	xmm3, xmm0
; File I:\Vitalya\mine\NSProjectX\xrCore\vector.h

; 96   : 	if		( val<_low	)	return _low; 

	xorps	xmm0, xmm0
	comiss	xmm0, xmm3
	ja	SHORT $LN88@sorted_L1

; 97   : 	else if	( val>_high )	return _high;

	comiss	xmm3, xmm2
	jbe	SHORT $LN87@sorted_L1
	movaps	xmm0, xmm2
	jmp	SHORT $LN88@sorted_L1
$LN87@sorted_L1:

; 98   : 	else					return val;

	movaps	xmm0, xmm3
$LN88@sorted_L1:
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 764  :             return (float)sqrt(_X);

	sqrtss	xmm0, xmm0
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 64   : 	V->Render						(calcLOD(N->key,V->vis.sphere.R));

	mov	eax, DWORD PTR [edi]
	push	ecx
	mov	ecx, edi
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR [eax]

; 65   : }

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?sorted_L1@@YIXPAUTNode@?$FixedMAP@MU_MatrixItemS@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; sorted_L1
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
;	COMDAT ?cmp_vs_nrm@@YA_NPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z
_TEXT	SEGMENT
_N1$ = 8						; size = 4
_N2$ = 12						; size = 4
?cmp_vs_nrm@@YA_NPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z PROC ; cmp_vs_nrm, COMDAT

; 67   : IC	bool	cmp_vs_nrm			(mapNormalVS::TNode* N1, mapNormalVS::TNode* N2)			{	return (N1->val.ssa > N2->val.ssa);		}

	mov	eax, DWORD PTR _N1$[esp-4]
	movss	xmm0, DWORD PTR [eax+16]
	mov	eax, DWORD PTR _N2$[esp-4]
	comiss	xmm0, DWORD PTR [eax+16]
	jbe	SHORT $LN3@cmp_vs_nrm
	mov	al, 1
	ret	0
$LN3@cmp_vs_nrm:
	xor	al, al
	ret	0
?cmp_vs_nrm@@YA_NPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ENDP ; cmp_vs_nrm
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
;	COMDAT ?cmp_vs_mat@@YA_NPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z
_TEXT	SEGMENT
_N1$ = 8						; size = 4
_N2$ = 12						; size = 4
?cmp_vs_mat@@YA_NPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z PROC ; cmp_vs_mat, COMDAT

; 68   : IC	bool	cmp_vs_mat			(mapMatrixVS::TNode* N1, mapMatrixVS::TNode* N2)			{	return (N1->val.ssa > N2->val.ssa);		}

	mov	eax, DWORD PTR _N1$[esp-4]
	movss	xmm0, DWORD PTR [eax+16]
	mov	eax, DWORD PTR _N2$[esp-4]
	comiss	xmm0, DWORD PTR [eax+16]
	jbe	SHORT $LN3@cmp_vs_mat
	mov	al, 1
	ret	0
$LN3@cmp_vs_mat:
	xor	al, al
	ret	0
?cmp_vs_mat@@YA_NPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ENDP ; cmp_vs_mat
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
;	COMDAT ?cmp_ps_nrm@@YA_NPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z
_TEXT	SEGMENT
_N1$ = 8						; size = 4
_N2$ = 12						; size = 4
?cmp_ps_nrm@@YA_NPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z PROC ; cmp_ps_nrm, COMDAT

; 70   : IC	bool	cmp_ps_nrm			(mapNormalPS::TNode* N1, mapNormalPS::TNode* N2)			{	return (N1->val.ssa > N2->val.ssa);		}

	mov	eax, DWORD PTR _N1$[esp-4]
	movss	xmm0, DWORD PTR [eax+16]
	mov	eax, DWORD PTR _N2$[esp-4]
	comiss	xmm0, DWORD PTR [eax+16]
	jbe	SHORT $LN3@cmp_ps_nrm
	mov	al, 1
	ret	0
$LN3@cmp_ps_nrm:
	xor	al, al
	ret	0
?cmp_ps_nrm@@YA_NPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ENDP ; cmp_ps_nrm
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
;	COMDAT ?cmp_ps_mat@@YA_NPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z
_TEXT	SEGMENT
_N1$ = 8						; size = 4
_N2$ = 12						; size = 4
?cmp_ps_mat@@YA_NPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z PROC ; cmp_ps_mat, COMDAT

; 71   : IC	bool	cmp_ps_mat			(mapMatrixPS::TNode* N1, mapMatrixPS::TNode* N2)			{	return (N1->val.ssa > N2->val.ssa);		}

	mov	eax, DWORD PTR _N1$[esp-4]
	movss	xmm0, DWORD PTR [eax+16]
	mov	eax, DWORD PTR _N2$[esp-4]
	comiss	xmm0, DWORD PTR [eax+16]
	jbe	SHORT $LN3@cmp_ps_mat
	mov	al, 1
	ret	0
$LN3@cmp_ps_mat:
	xor	al, al
	ret	0
?cmp_ps_mat@@YA_NPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ENDP ; cmp_ps_mat
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
;	COMDAT ?cmp_cs_nrm@@YA_NPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@0@Z
_TEXT	SEGMENT
_N1$ = 8						; size = 4
_N2$ = 12						; size = 4
?cmp_cs_nrm@@YA_NPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@0@Z PROC ; cmp_cs_nrm, COMDAT

; 73   : IC	bool	cmp_cs_nrm			(mapNormalCS::TNode* N1, mapNormalCS::TNode* N2)			{	return (N1->val.ssa > N2->val.ssa);		}

	mov	eax, DWORD PTR _N1$[esp-4]
	movss	xmm0, DWORD PTR [eax+16]
	mov	eax, DWORD PTR _N2$[esp-4]
	comiss	xmm0, DWORD PTR [eax+16]
	jbe	SHORT $LN3@cmp_cs_nrm
	mov	al, 1
	ret	0
$LN3@cmp_cs_nrm:
	xor	al, al
	ret	0
?cmp_cs_nrm@@YA_NPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ENDP ; cmp_cs_nrm
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
;	COMDAT ?cmp_cs_mat@@YA_NPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@0@Z
_TEXT	SEGMENT
_N1$ = 8						; size = 4
_N2$ = 12						; size = 4
?cmp_cs_mat@@YA_NPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@0@Z PROC ; cmp_cs_mat, COMDAT

; 74   : IC	bool	cmp_cs_mat			(mapMatrixCS::TNode* N1, mapMatrixCS::TNode* N2)			{	return (N1->val.ssa > N2->val.ssa);		}

	mov	eax, DWORD PTR _N1$[esp-4]
	movss	xmm0, DWORD PTR [eax+16]
	mov	eax, DWORD PTR _N2$[esp-4]
	comiss	xmm0, DWORD PTR [eax+16]
	jbe	SHORT $LN3@cmp_cs_mat
	mov	al, 1
	ret	0
$LN3@cmp_cs_mat:
	xor	al, al
	ret	0
?cmp_cs_mat@@YA_NPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ENDP ; cmp_cs_mat
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
;	COMDAT ?cmp_states_nrm@@YA_NPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@Z
_TEXT	SEGMENT
_N1$ = 8						; size = 4
_N2$ = 12						; size = 4
?cmp_states_nrm@@YA_NPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@Z PROC ; cmp_states_nrm, COMDAT

; 76   : IC	bool	cmp_states_nrm		(mapNormalStates::TNode* N1, mapNormalStates::TNode* N2)	{	return (N1->val.ssa > N2->val.ssa);		}

	mov	eax, DWORD PTR _N1$[esp-4]
	movss	xmm0, DWORD PTR [eax+16]
	mov	eax, DWORD PTR _N2$[esp-4]
	comiss	xmm0, DWORD PTR [eax+16]
	jbe	SHORT $LN3@cmp_states
	mov	al, 1
	ret	0
$LN3@cmp_states:
	xor	al, al
	ret	0
?cmp_states_nrm@@YA_NPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ENDP ; cmp_states_nrm
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
;	COMDAT ?cmp_states_mat@@YA_NPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@Z
_TEXT	SEGMENT
_N1$ = 8						; size = 4
_N2$ = 12						; size = 4
?cmp_states_mat@@YA_NPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@Z PROC ; cmp_states_mat, COMDAT

; 77   : IC	bool	cmp_states_mat		(mapMatrixStates::TNode* N1, mapMatrixStates::TNode* N2)	{	return (N1->val.ssa > N2->val.ssa);		}

	mov	eax, DWORD PTR _N1$[esp-4]
	movss	xmm0, DWORD PTR [eax+16]
	mov	eax, DWORD PTR _N2$[esp-4]
	comiss	xmm0, DWORD PTR [eax+16]
	jbe	SHORT $LN3@cmp_states
	mov	al, 1
	ret	0
$LN3@cmp_states:
	xor	al, al
	ret	0
?cmp_states_mat@@YA_NPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ENDP ; cmp_states_mat
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
;	COMDAT ?cmp_textures_lex2_nrm@@YA_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z
_TEXT	SEGMENT
_N1$ = 8						; size = 4
_N2$ = 12						; size = 4
?cmp_textures_lex2_nrm@@YA_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z PROC ; cmp_textures_lex2_nrm, COMDAT

; 80   : 	STextureList*	t1			= N1->key;

	mov	eax, DWORD PTR _N1$[esp-4]
	push	ebx
	push	ebp
	push	esi
	mov	ebp, DWORD PTR [eax]

; 81   : 	STextureList*	t2			= N2->key;

	mov	eax, DWORD PTR _N2$[esp+8]
	push	edi

; 82   : 	if ((*t1)[0] < (*t2)[0])	return true;

	push	0
	mov	ebx, DWORD PTR [eax]
	add	ebx, 12					; 0000000cH
	mov	ecx, ebx
	call	DWORD PTR __imp_??A?$xr_vector@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@V?$xalloc@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@@@@QAEAAU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@I@Z
	add	ebp, 12					; 0000000cH
	mov	edi, eax
	push	0
	mov	ecx, ebp
	call	DWORD PTR __imp_??A?$xr_vector@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@V?$xalloc@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@@@@QAEAAU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@I@Z
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 362  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR [edi]
	jb	SHORT $LN38@cmp_textur
	ja	SHORT $LN2@cmp_textur
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

	mov	eax, DWORD PTR [eax+4]
	cmp	eax, DWORD PTR [edi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 362  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

	jb	SHORT $LN38@cmp_textur
$LN2@cmp_textur:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 83   : 	if ((*t1)[0] > (*t2)[0])	return false;

	push	0
	mov	ecx, ebx
	call	DWORD PTR __imp_??A?$xr_vector@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@V?$xalloc@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@@@@QAEAAU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@I@Z
	push	0
	mov	ecx, ebp
	mov	esi, eax
	call	DWORD PTR __imp_??A?$xr_vector@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@V?$xalloc@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@@@@QAEAAU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@I@Z
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 362  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

	mov	edx, DWORD PTR [esi]
	cmp	edx, DWORD PTR [eax]
	jb	SHORT $LN4@cmp_textur
	ja	SHORT $LN3@cmp_textur
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

	mov	edx, DWORD PTR [esi+4]
	cmp	edx, DWORD PTR [eax+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 362  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

	jb	SHORT $LN4@cmp_textur
$LN3@cmp_textur:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 84   : 	if ((*t1)[1] < (*t2)[1])	return true;

	push	1
	mov	ecx, ebx
	call	DWORD PTR __imp_??A?$xr_vector@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@V?$xalloc@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@@@@QAEAAU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@I@Z
	push	1
	mov	ecx, ebp
	mov	esi, eax
	call	DWORD PTR __imp_??A?$xr_vector@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@V?$xalloc@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@@@@QAEAAU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@I@Z
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 362  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR [esi]
	jb	SHORT $LN38@cmp_textur
	ja	SHORT $LN4@cmp_textur
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

	mov	eax, DWORD PTR [eax+4]
	cmp	eax, DWORD PTR [esi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 362  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

	jb	SHORT $LN38@cmp_textur
$LN4@cmp_textur:
	pop	edi
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 86   : }

	pop	esi
	pop	ebp
	xor	al, al
	pop	ebx
	ret	0
$LN38@cmp_textur:
	pop	edi
	pop	esi
	pop	ebp
	mov	al, 1
	pop	ebx
	ret	0
?cmp_textures_lex2_nrm@@YA_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ENDP ; cmp_textures_lex2_nrm
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
;	COMDAT ?cmp_textures_lex2_mat@@YA_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z
_TEXT	SEGMENT
_N1$ = 8						; size = 4
_N2$ = 12						; size = 4
?cmp_textures_lex2_mat@@YA_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z PROC ; cmp_textures_lex2_mat, COMDAT

; 88   : 	STextureList*	t1			= N1->key;

	mov	eax, DWORD PTR _N1$[esp-4]
	push	ebx
	push	ebp
	push	esi
	mov	ebp, DWORD PTR [eax]

; 89   : 	STextureList*	t2			= N2->key;

	mov	eax, DWORD PTR _N2$[esp+8]
	push	edi

; 90   : 	if ((*t1)[0] < (*t2)[0])	return true;

	push	0
	mov	ebx, DWORD PTR [eax]
	add	ebx, 12					; 0000000cH
	mov	ecx, ebx
	call	DWORD PTR __imp_??A?$xr_vector@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@V?$xalloc@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@@@@QAEAAU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@I@Z
	add	ebp, 12					; 0000000cH
	mov	edi, eax
	push	0
	mov	ecx, ebp
	call	DWORD PTR __imp_??A?$xr_vector@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@V?$xalloc@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@@@@QAEAAU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@I@Z
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 362  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR [edi]
	jb	SHORT $LN38@cmp_textur
	ja	SHORT $LN2@cmp_textur
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

	mov	eax, DWORD PTR [eax+4]
	cmp	eax, DWORD PTR [edi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 362  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

	jb	SHORT $LN38@cmp_textur
$LN2@cmp_textur:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 91   : 	if ((*t1)[0] > (*t2)[0])	return false;

	push	0
	mov	ecx, ebx
	call	DWORD PTR __imp_??A?$xr_vector@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@V?$xalloc@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@@@@QAEAAU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@I@Z
	push	0
	mov	ecx, ebp
	mov	esi, eax
	call	DWORD PTR __imp_??A?$xr_vector@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@V?$xalloc@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@@@@QAEAAU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@I@Z
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 362  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

	mov	edx, DWORD PTR [esi]
	cmp	edx, DWORD PTR [eax]
	jb	SHORT $LN4@cmp_textur
	ja	SHORT $LN3@cmp_textur
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

	mov	edx, DWORD PTR [esi+4]
	cmp	edx, DWORD PTR [eax+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 362  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

	jb	SHORT $LN4@cmp_textur
$LN3@cmp_textur:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 92   : 	if ((*t1)[1] < (*t2)[1])	return true;

	push	1
	mov	ecx, ebx
	call	DWORD PTR __imp_??A?$xr_vector@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@V?$xalloc@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@@@@QAEAAU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@I@Z
	push	1
	mov	ecx, ebp
	mov	esi, eax
	call	DWORD PTR __imp_??A?$xr_vector@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@V?$xalloc@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@@@@QAEAAU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@I@Z
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 362  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR [esi]
	jb	SHORT $LN38@cmp_textur
	ja	SHORT $LN4@cmp_textur
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

	mov	eax, DWORD PTR [eax+4]
	cmp	eax, DWORD PTR [esi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 362  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

	jb	SHORT $LN38@cmp_textur
$LN4@cmp_textur:
	pop	edi
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 94   : }

	pop	esi
	pop	ebp
	xor	al, al
	pop	ebx
	ret	0
$LN38@cmp_textur:
	pop	edi
	pop	esi
	pop	ebp
	mov	al, 1
	pop	ebx
	ret	0
?cmp_textures_lex2_mat@@YA_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ENDP ; cmp_textures_lex2_mat
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
;	COMDAT ?cmp_textures_lex3_nrm@@YA_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z
_TEXT	SEGMENT
_N1$ = 8						; size = 4
_N2$ = 12						; size = 4
?cmp_textures_lex3_nrm@@YA_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z PROC ; cmp_textures_lex3_nrm, COMDAT

; 96   : 	STextureList*	t1			= N1->key;

	mov	eax, DWORD PTR _N1$[esp-4]
	push	ebx
	push	esi
	push	edi
	mov	esi, DWORD PTR [eax]

; 97   : 	STextureList*	t2			= N2->key;

	mov	eax, DWORD PTR _N2$[esp+8]

; 98   : 	if ((*t1)[0] < (*t2)[0])	return true;

	push	0
	mov	edi, DWORD PTR [eax]
	add	edi, 12					; 0000000cH
	mov	ecx, edi
	call	DWORD PTR __imp_??A?$xr_vector@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@V?$xalloc@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@@@@QAEAAU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@I@Z
	add	esi, 12					; 0000000cH
	mov	ebx, eax
	push	0
	mov	ecx, esi
	call	DWORD PTR __imp_??A?$xr_vector@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@V?$xalloc@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@@@@QAEAAU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@I@Z
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 362  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR [ebx]
	jb	$LN68@cmp_textur
	ja	SHORT $LN2@cmp_textur
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

	mov	eax, DWORD PTR [eax+4]
	cmp	eax, DWORD PTR [ebx+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 362  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

	jb	$LN68@cmp_textur
$LN2@cmp_textur:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 99   : 	if ((*t1)[0] > (*t2)[0])	return false;

	push	0
	mov	ecx, edi
	call	DWORD PTR __imp_??A?$xr_vector@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@V?$xalloc@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@@@@QAEAAU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@I@Z
	push	0
	mov	ecx, esi
	mov	ebx, eax
	call	DWORD PTR __imp_??A?$xr_vector@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@V?$xalloc@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@@@@QAEAAU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@I@Z
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 362  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

	mov	ecx, DWORD PTR [ebx]
	cmp	ecx, DWORD PTR [eax]
	jb	SHORT $LN6@cmp_textur
	ja	SHORT $LN3@cmp_textur
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

	mov	ecx, DWORD PTR [ebx+4]
	cmp	ecx, DWORD PTR [eax+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 362  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

	jb	SHORT $LN6@cmp_textur
$LN3@cmp_textur:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 100  : 	if ((*t1)[1] < (*t2)[1])	return true;

	push	1
	mov	ecx, edi
	call	DWORD PTR __imp_??A?$xr_vector@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@V?$xalloc@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@@@@QAEAAU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@I@Z
	push	1
	mov	ecx, esi
	mov	ebx, eax
	call	DWORD PTR __imp_??A?$xr_vector@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@V?$xalloc@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@@@@QAEAAU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@I@Z
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 362  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR [ebx]
	jb	SHORT $LN68@cmp_textur
	ja	SHORT $LN4@cmp_textur
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

	mov	eax, DWORD PTR [eax+4]
	cmp	eax, DWORD PTR [ebx+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 362  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

	jb	SHORT $LN68@cmp_textur
$LN4@cmp_textur:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 101  : 	if ((*t1)[1] > (*t2)[1])	return false;

	push	1
	mov	ecx, edi
	call	DWORD PTR __imp_??A?$xr_vector@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@V?$xalloc@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@@@@QAEAAU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@I@Z
	push	1
	mov	ecx, esi
	mov	ebx, eax
	call	DWORD PTR __imp_??A?$xr_vector@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@V?$xalloc@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@@@@QAEAAU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@I@Z
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 362  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

	mov	ecx, DWORD PTR [ebx]
	cmp	ecx, DWORD PTR [eax]
	jb	SHORT $LN6@cmp_textur
	ja	SHORT $LN5@cmp_textur
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

	mov	edx, DWORD PTR [ebx+4]
	cmp	edx, DWORD PTR [eax+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 362  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

	jb	SHORT $LN6@cmp_textur
$LN5@cmp_textur:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 102  : 	if ((*t1)[2] < (*t2)[2])	return true;

	push	2
	mov	ecx, edi
	call	DWORD PTR __imp_??A?$xr_vector@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@V?$xalloc@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@@@@QAEAAU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@I@Z
	push	2
	mov	ecx, esi
	mov	edi, eax
	call	DWORD PTR __imp_??A?$xr_vector@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@V?$xalloc@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@@@@QAEAAU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@I@Z
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 362  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR [edi]
	jb	SHORT $LN68@cmp_textur
	ja	SHORT $LN6@cmp_textur
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

	mov	eax, DWORD PTR [eax+4]
	cmp	eax, DWORD PTR [edi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 362  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

	jb	SHORT $LN68@cmp_textur
$LN6@cmp_textur:
	pop	edi
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 104  : }

	pop	esi
	xor	al, al
	pop	ebx
	ret	0
$LN68@cmp_textur:
	pop	edi
	pop	esi
	mov	al, 1
	pop	ebx
	ret	0
?cmp_textures_lex3_nrm@@YA_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ENDP ; cmp_textures_lex3_nrm
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
;	COMDAT ?cmp_textures_lex3_mat@@YA_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z
_TEXT	SEGMENT
_N1$ = 8						; size = 4
_N2$ = 12						; size = 4
?cmp_textures_lex3_mat@@YA_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z PROC ; cmp_textures_lex3_mat, COMDAT

; 106  : 	STextureList*	t1			= N1->key;

	mov	eax, DWORD PTR _N1$[esp-4]
	push	ebx
	push	esi
	push	edi
	mov	esi, DWORD PTR [eax]

; 107  : 	STextureList*	t2			= N2->key;

	mov	eax, DWORD PTR _N2$[esp+8]

; 108  : 	if ((*t1)[0] < (*t2)[0])	return true;

	push	0
	mov	edi, DWORD PTR [eax]
	add	edi, 12					; 0000000cH
	mov	ecx, edi
	call	DWORD PTR __imp_??A?$xr_vector@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@V?$xalloc@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@@@@QAEAAU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@I@Z
	add	esi, 12					; 0000000cH
	mov	ebx, eax
	push	0
	mov	ecx, esi
	call	DWORD PTR __imp_??A?$xr_vector@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@V?$xalloc@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@@@@QAEAAU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@I@Z
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 362  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR [ebx]
	jb	$LN68@cmp_textur
	ja	SHORT $LN2@cmp_textur
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

	mov	eax, DWORD PTR [eax+4]
	cmp	eax, DWORD PTR [ebx+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 362  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

	jb	$LN68@cmp_textur
$LN2@cmp_textur:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 109  : 	if ((*t1)[0] > (*t2)[0])	return false;

	push	0
	mov	ecx, edi
	call	DWORD PTR __imp_??A?$xr_vector@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@V?$xalloc@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@@@@QAEAAU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@I@Z
	push	0
	mov	ecx, esi
	mov	ebx, eax
	call	DWORD PTR __imp_??A?$xr_vector@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@V?$xalloc@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@@@@QAEAAU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@I@Z
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 362  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

	mov	ecx, DWORD PTR [ebx]
	cmp	ecx, DWORD PTR [eax]
	jb	SHORT $LN6@cmp_textur
	ja	SHORT $LN3@cmp_textur
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

	mov	ecx, DWORD PTR [ebx+4]
	cmp	ecx, DWORD PTR [eax+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 362  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

	jb	SHORT $LN6@cmp_textur
$LN3@cmp_textur:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 110  : 	if ((*t1)[1] < (*t2)[1])	return true;

	push	1
	mov	ecx, edi
	call	DWORD PTR __imp_??A?$xr_vector@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@V?$xalloc@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@@@@QAEAAU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@I@Z
	push	1
	mov	ecx, esi
	mov	ebx, eax
	call	DWORD PTR __imp_??A?$xr_vector@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@V?$xalloc@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@@@@QAEAAU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@I@Z
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 362  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR [ebx]
	jb	SHORT $LN68@cmp_textur
	ja	SHORT $LN4@cmp_textur
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

	mov	eax, DWORD PTR [eax+4]
	cmp	eax, DWORD PTR [ebx+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 362  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

	jb	SHORT $LN68@cmp_textur
$LN4@cmp_textur:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 111  : 	if ((*t1)[1] > (*t2)[1])	return false;

	push	1
	mov	ecx, edi
	call	DWORD PTR __imp_??A?$xr_vector@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@V?$xalloc@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@@@@QAEAAU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@I@Z
	push	1
	mov	ecx, esi
	mov	ebx, eax
	call	DWORD PTR __imp_??A?$xr_vector@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@V?$xalloc@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@@@@QAEAAU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@I@Z
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 362  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

	mov	ecx, DWORD PTR [ebx]
	cmp	ecx, DWORD PTR [eax]
	jb	SHORT $LN6@cmp_textur
	ja	SHORT $LN5@cmp_textur
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

	mov	edx, DWORD PTR [ebx+4]
	cmp	edx, DWORD PTR [eax+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 362  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

	jb	SHORT $LN6@cmp_textur
$LN5@cmp_textur:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 112  : 	if ((*t1)[2] < (*t2)[2])	return true;

	push	2
	mov	ecx, edi
	call	DWORD PTR __imp_??A?$xr_vector@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@V?$xalloc@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@@@@QAEAAU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@I@Z
	push	2
	mov	ecx, esi
	mov	edi, eax
	call	DWORD PTR __imp_??A?$xr_vector@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@V?$xalloc@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@@@@QAEAAU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@I@Z
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 362  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR [edi]
	jb	SHORT $LN68@cmp_textur
	ja	SHORT $LN6@cmp_textur
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

	mov	eax, DWORD PTR [eax+4]
	cmp	eax, DWORD PTR [edi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 362  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

	jb	SHORT $LN68@cmp_textur
$LN6@cmp_textur:
	pop	edi
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 114  : }

	pop	esi
	xor	al, al
	pop	ebx
	ret	0
$LN68@cmp_textur:
	pop	edi
	pop	esi
	mov	al, 1
	pop	ebx
	ret	0
?cmp_textures_lex3_mat@@YA_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ENDP ; cmp_textures_lex3_mat
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
;	COMDAT ?cmp_textures_lexN_nrm@@YA_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z
_TEXT	SEGMENT
$T1 = -8						; size = 4
$T2 = -4						; size = 4
$T3 = 8							; size = 4
_N1$ = 8						; size = 4
$T4 = 12						; size = 4
_N2$ = 12						; size = 4
?cmp_textures_lexN_nrm@@YA_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z PROC ; cmp_textures_lexN_nrm, COMDAT

; 116  : 	STextureList*	t1			= N1->key;

	mov	eax, DWORD PTR _N1$[esp-4]
	sub	esp, 8
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	edi, DWORD PTR [eax]

; 117  : 	STextureList*	t2			= N2->key;
; 118  : 	return std::lexicographical_compare(t1->begin(),t1->end(),t2->begin(),t2->end());

	mov	eax, DWORD PTR _N2$[esp+20]
	mov	esi, DWORD PTR [eax]
	lea	eax, DWORD PTR $T3[esp+20]
	push	eax
	lea	ecx, DWORD PTR [esi+12]
	call	DWORD PTR __imp_?end@?$vector@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@V?$xalloc@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@std@@@std@@@2@XZ
	mov	ebp, eax
	lea	ecx, DWORD PTR [esi+12]
	lea	eax, DWORD PTR $T4[esp+20]
	push	eax
	call	DWORD PTR __imp_?begin@?$vector@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@V?$xalloc@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@std@@@std@@@2@XZ
	mov	ebx, eax
	lea	esi, DWORD PTR [edi+12]
	lea	eax, DWORD PTR $T1[esp+24]
	mov	ecx, esi
	push	eax
	call	DWORD PTR __imp_?end@?$vector@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@V?$xalloc@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@std@@@std@@@2@XZ
	mov	edi, eax
	mov	ecx, esi
	lea	eax, DWORD PTR $T2[esp+24]
	push	eax
	call	DWORD PTR __imp_?begin@?$vector@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@V?$xalloc@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@std@@@std@@@2@XZ
	push	DWORD PTR [ebp]
	push	DWORD PTR [ebx]
	push	DWORD PTR [edi]
	push	DWORD PTR [eax]
	call	??$lexicographical_compare@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@std@@@std@@@std@@V12@@std@@YA_NV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@std@@@std@@@0@000@Z ; std::lexicographical_compare<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<unsigned int,resptr_core<CTexture,resptrcode_texture> > > > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<unsigned int,resptr_core<CTexture,resptrcode_texture> > > > > >
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 119  : }

	add	esp, 8
	ret	0
?cmp_textures_lexN_nrm@@YA_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ENDP ; cmp_textures_lexN_nrm
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
;	COMDAT ?cmp_textures_lexN_mat@@YA_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z
_TEXT	SEGMENT
$T1 = -8						; size = 4
$T2 = -4						; size = 4
$T3 = 8							; size = 4
_N1$ = 8						; size = 4
$T4 = 12						; size = 4
_N2$ = 12						; size = 4
?cmp_textures_lexN_mat@@YA_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z PROC ; cmp_textures_lexN_mat, COMDAT

; 121  : 	STextureList*	t1			= N1->key;

	mov	eax, DWORD PTR _N1$[esp-4]
	sub	esp, 8
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	edi, DWORD PTR [eax]

; 122  : 	STextureList*	t2			= N2->key;
; 123  : 	return std::lexicographical_compare(t1->begin(),t1->end(),t2->begin(),t2->end());

	mov	eax, DWORD PTR _N2$[esp+20]
	mov	esi, DWORD PTR [eax]
	lea	eax, DWORD PTR $T3[esp+20]
	push	eax
	lea	ecx, DWORD PTR [esi+12]
	call	DWORD PTR __imp_?end@?$vector@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@V?$xalloc@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@std@@@std@@@2@XZ
	mov	ebp, eax
	lea	ecx, DWORD PTR [esi+12]
	lea	eax, DWORD PTR $T4[esp+20]
	push	eax
	call	DWORD PTR __imp_?begin@?$vector@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@V?$xalloc@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@std@@@std@@@2@XZ
	mov	ebx, eax
	lea	esi, DWORD PTR [edi+12]
	lea	eax, DWORD PTR $T1[esp+24]
	mov	ecx, esi
	push	eax
	call	DWORD PTR __imp_?end@?$vector@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@V?$xalloc@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@std@@@std@@@2@XZ
	mov	edi, eax
	mov	ecx, esi
	lea	eax, DWORD PTR $T2[esp+24]
	push	eax
	call	DWORD PTR __imp_?begin@?$vector@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@V?$xalloc@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@std@@@std@@@2@XZ
	push	DWORD PTR [ebp]
	push	DWORD PTR [ebx]
	push	DWORD PTR [edi]
	push	DWORD PTR [eax]
	call	??$lexicographical_compare@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@std@@@std@@@std@@V12@@std@@YA_NV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@std@@@std@@@0@000@Z ; std::lexicographical_compare<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<unsigned int,resptr_core<CTexture,resptrcode_texture> > > > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<unsigned int,resptr_core<CTexture,resptrcode_texture> > > > > >
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 124  : }

	add	esp, 8
	ret	0
?cmp_textures_lexN_mat@@YA_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ENDP ; cmp_textures_lexN_mat
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
;	COMDAT ?cmp_textures_ssa_nrm@@YA_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z
_TEXT	SEGMENT
_N1$ = 8						; size = 4
_N2$ = 12						; size = 4
?cmp_textures_ssa_nrm@@YA_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z PROC ; cmp_textures_ssa_nrm, COMDAT

; 126  : 	return (N1->val.ssa > N2->val.ssa);		

	mov	eax, DWORD PTR _N1$[esp-4]
	movss	xmm0, DWORD PTR [eax+16]
	mov	eax, DWORD PTR _N2$[esp-4]
	comiss	xmm0, DWORD PTR [eax+16]
	jbe	SHORT $LN3@cmp_textur
	mov	al, 1

; 127  : }

	ret	0
$LN3@cmp_textur:

; 126  : 	return (N1->val.ssa > N2->val.ssa);		

	xor	al, al

; 127  : }

	ret	0
?cmp_textures_ssa_nrm@@YA_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ENDP ; cmp_textures_ssa_nrm
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
;	COMDAT ?cmp_textures_ssa_mat@@YA_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z
_TEXT	SEGMENT
_N1$ = 8						; size = 4
_N2$ = 12						; size = 4
?cmp_textures_ssa_mat@@YA_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z PROC ; cmp_textures_ssa_mat, COMDAT

; 129  : 	return (N1->val.ssa > N2->val.ssa);		

	mov	eax, DWORD PTR _N1$[esp-4]
	movss	xmm0, DWORD PTR [eax+16]
	mov	eax, DWORD PTR _N2$[esp-4]
	comiss	xmm0, DWORD PTR [eax+16]
	jbe	SHORT $LN3@cmp_textur
	mov	al, 1

; 130  : }

	ret	0
$LN3@cmp_textur:

; 129  : 	return (N1->val.ssa > N2->val.ssa);		

	xor	al, al

; 130  : }

	ret	0
?cmp_textures_ssa_mat@@YA_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ENDP ; cmp_textures_ssa_mat
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
_TEXT	SEGMENT
_amount$1$ = -4						; size = 4
$T1 = 8							; size = 1
__it$2 = 8						; size = 4
_textures$ = 8						; size = 4
_bSSA$dead$ = 12					; size = 4
?sort_tlist_nrm@@YAXAAV?$xr_vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@@0AAUmapNormalTextures@R_dsgraph@@H@Z PROC ; sort_tlist_nrm
; _lst$ = ecx
; _temp$ = edx

; 139  : {

	push	ecx
	push	ebx
	mov	ebx, edx

; 140  : 	int amount			= textures.begin()->key->size();

	mov	edx, DWORD PTR _textures$[esp+4]
	push	ebp
	push	esi
	push	edi
	mov	esi, DWORD PTR [edx]
	mov	edi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1535 :         auto& _My_data = _Mypair._Myval2;

	mov	eax, DWORD PTR [esi]

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	ecx, DWORD PTR [eax+16]
	sub	ecx, DWORD PTR [eax+12]
	sar	ecx, 3
	mov	DWORD PTR _amount$1$[esp+20], ecx
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 143  : 		if (amount<=1)

	cmp	ecx, 1
	jg	SHORT $LN7@sort_tlist

; 144  : 		{
; 145  : 			// Just sort by SSA
; 146  : 			textures.getANY_P			(lst);

	push	edi
	mov	ecx, edx
	call	?getANY_P@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@QAEXAAV?$xr_vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@@@Z ; FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::getANY_P
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7078 :     const auto _UFirst = _Get_unwrapped(_First);

	mov	ecx, DWORD PTR [edi]

; 7079 :     const auto _ULast  = _Get_unwrapped(_Last);

	mov	edx, DWORD PTR [edi+4]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 176  : }

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7080 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

	mov	DWORD PTR _bSSA$dead$[esp-4], OFFSET ?cmp_textures_ssa_nrm@@YA_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; cmp_textures_ssa_nrm
	mov	eax, edx
	sub	eax, ecx
	sar	eax, 2
	mov	DWORD PTR _textures$[esp-4], eax
	jmp	??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z ; std::_Sort_unchecked<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *)>
$LN7@sort_tlist:
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h

; 201  : 	IC TNode*	end()		{ return nodes+pool;	}

	mov	eax, DWORD PTR [edx+4]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 152  : 			mapNormalTextures::TNode* _it	= textures.begin	();

	mov	DWORD PTR __it$2[esp+16], esi
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h

; 201  : 	IC TNode*	end()		{ return nodes+pool;	}

	lea	ecx, DWORD PTR [eax*8]
	sub	ecx, eax
	lea	ebp, DWORD PTR [esi+ecx*4]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 153  : 			mapNormalTextures::TNode* _end	= textures.end		();

	cmp	esi, ebp

; 154  : 			for (; _it!=_end; _it++)	{

	je	SHORT $LN3@sort_tlist
	npad	10
$LL4@sort_tlist:

; 155  : 				if (_it->val.ssa > r_ssaHZBvsTEX)	lst.push_back	(_it);

	movss	xmm0, DWORD PTR [esi+16]
	comiss	xmm0, DWORD PTR ?r_ssaHZBvsTEX@@3MA
	jbe	SHORT $LN9@sort_tlist
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 730  :         if (_Mylast != _My_data._Myend) {

	mov	eax, DWORD PTR [edi+4]
	cmp	eax, DWORD PTR [edi+8]
	je	SHORT $LN43@sort_tlist

; 713  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

	mov	DWORD PTR [eax], esi

; 714  :         _Orphan_range(_Mylast, _Mylast);
; 715  :         _Ty& _Result = *_Mylast;
; 716  :         ++_Mylast;

	add	DWORD PTR [edi+4], 4

; 731  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

	jmp	SHORT $LN2@sort_tlist
$LN43@sort_tlist:

; 732  :         }
; 733  : 
; 734  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

	lea	ecx, DWORD PTR __it$2[esp+16]
	push	ecx
	mov	ecx, edi
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 155  : 				if (_it->val.ssa > r_ssaHZBvsTEX)	lst.push_back	(_it);

	jmp	SHORT $LN184@sort_tlist
$LN9@sort_tlist:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 730  :         if (_Mylast != _My_data._Myend) {

	mov	eax, DWORD PTR [ebx+4]
	cmp	eax, DWORD PTR [ebx+8]
	je	SHORT $LN50@sort_tlist

; 713  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

	mov	DWORD PTR [eax], esi

; 714  :         _Orphan_range(_Mylast, _Mylast);
; 715  :         _Ty& _Result = *_Mylast;
; 716  :         ++_Mylast;

	add	DWORD PTR [ebx+4], 4

; 731  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

	jmp	SHORT $LN2@sort_tlist
$LN50@sort_tlist:

; 732  :         }
; 733  : 
; 734  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

	lea	ecx, DWORD PTR __it$2[esp+16]
	push	ecx
	mov	ecx, ebx
$LN184@sort_tlist:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 154  : 			for (; _it!=_end; _it++)	{

	push	eax
	call	??$_Emplace_reallocate@ABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU23@ABQAU23@@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Emplace_reallocate<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * const &>
$LN2@sort_tlist:
	add	esi, 28					; 0000001cH
	mov	DWORD PTR __it$2[esp+16], esi
	cmp	esi, ebp
	jne	SHORT $LL4@sort_tlist
$LN3@sort_tlist:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7079 :     const auto _ULast  = _Get_unwrapped(_Last);

	mov	edx, DWORD PTR [edi+4]

; 7080 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

	mov	eax, edx
	mov	ecx, DWORD PTR [edi]
	sub	eax, ecx
	sar	eax, 2
	push	OFFSET ?cmp_textures_ssa_nrm@@YA_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; cmp_textures_ssa_nrm
	push	eax
	call	??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z ; std::_Sort_unchecked<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *)>
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 161  : 			if (2==amount)				std::sort	(temp.begin(),	temp.end(),	cmp_textures_lex2_nrm);

	mov	eax, DWORD PTR _amount$1$[esp+28]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7080 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

	add	esp, 8
	mov	ecx, DWORD PTR [ebx]
	mov	edx, DWORD PTR [ebx+4]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 161  : 			if (2==amount)				std::sort	(temp.begin(),	temp.end(),	cmp_textures_lex2_nrm);

	cmp	eax, 2
	jne	SHORT $LN11@sort_tlist
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7080 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

	mov	esi, OFFSET ?cmp_textures_lex2_nrm@@YA_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; cmp_textures_lex2_nrm
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 161  : 			if (2==amount)				std::sort	(temp.begin(),	temp.end(),	cmp_textures_lex2_nrm);

	jmp	SHORT $LN185@sort_tlist
$LN11@sort_tlist:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7080 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

	mov	esi, OFFSET ?cmp_textures_lex3_nrm@@YA_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; cmp_textures_lex3_nrm
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 162  : 			else if (3==amount)			std::sort	(temp.begin(),	temp.end(),	cmp_textures_lex3_nrm);

	cmp	eax, 3
	je	SHORT $LN185@sort_tlist
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7080 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

	mov	esi, OFFSET ?cmp_textures_lexN_nrm@@YA_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; cmp_textures_lexN_nrm
$LN185@sort_tlist:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1473 :         return iterator(_My_data._Mylast, _STD addressof(_My_data));

	mov	eax, edx
	sub	eax, ecx
	sar	eax, 2
	push	esi
	push	eax
	call	??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z ; std::_Sort_unchecked<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *)>
	add	esp, 8

; 1058 :         _Insert_range(_Where, _Get_unwrapped(_First), _Get_unwrapped(_Last), _Iter_cat_t<_Iter>{});

	mov	ecx, edi
	push	DWORD PTR $T1[esp+16]
	push	DWORD PTR [ebx+4]
	push	DWORD PTR [ebx]
	push	DWORD PTR [edi+4]
	call	??$_Insert_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@1Uforward_iterator_tag@1@@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Insert_range<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *>
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 176  : }

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	pop	ecx
	ret	0
?sort_tlist_nrm@@YAXAAV?$xr_vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@@0AAUmapNormalTextures@R_dsgraph@@H@Z ENDP ; sort_tlist_nrm
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
_TEXT	SEGMENT
_amount$1$ = -4						; size = 4
$T1 = 8							; size = 1
__it$2 = 8						; size = 4
_textures$ = 8						; size = 4
_bSSA$dead$ = 12					; size = 4
?sort_tlist_mat@@YAXAAV?$xr_vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@@0AAUmapMatrixTextures@R_dsgraph@@H@Z PROC ; sort_tlist_mat
; _lst$ = ecx
; _temp$ = edx

; 185  : {

	push	ecx
	push	ebx
	mov	ebx, edx

; 186  : 	int amount			= textures.begin()->key->size();

	mov	edx, DWORD PTR _textures$[esp+4]
	push	ebp
	push	esi
	push	edi
	mov	esi, DWORD PTR [edx]
	mov	edi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1535 :         auto& _My_data = _Mypair._Myval2;

	mov	eax, DWORD PTR [esi]

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	ecx, DWORD PTR [eax+16]
	sub	ecx, DWORD PTR [eax+12]
	sar	ecx, 3
	mov	DWORD PTR _amount$1$[esp+20], ecx
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 189  : 		if (amount<=1)

	cmp	ecx, 1
	jg	SHORT $LN7@sort_tlist

; 190  : 		{
; 191  : 			// Just sort by SSA
; 192  : 			textures.getANY_P			(lst);

	push	edi
	mov	ecx, edx
	call	?getANY_P@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@QAEXAAV?$xr_vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@@@Z ; FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::getANY_P
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7078 :     const auto _UFirst = _Get_unwrapped(_First);

	mov	ecx, DWORD PTR [edi]

; 7079 :     const auto _ULast  = _Get_unwrapped(_Last);

	mov	edx, DWORD PTR [edi+4]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 222  : }

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7080 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

	mov	DWORD PTR _bSSA$dead$[esp-4], OFFSET ?cmp_textures_ssa_mat@@YA_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; cmp_textures_ssa_mat
	mov	eax, edx
	sub	eax, ecx
	sar	eax, 2
	mov	DWORD PTR _textures$[esp-4], eax
	jmp	??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z ; std::_Sort_unchecked<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *)>
$LN7@sort_tlist:
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h

; 201  : 	IC TNode*	end()		{ return nodes+pool;	}

	mov	eax, DWORD PTR [edx+4]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 198  : 			mapMatrixTextures::TNode* _it	= textures.begin	();

	mov	DWORD PTR __it$2[esp+16], esi
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h

; 201  : 	IC TNode*	end()		{ return nodes+pool;	}

	lea	ecx, DWORD PTR [eax*8]
	sub	ecx, eax
	lea	ebp, DWORD PTR [esi+ecx*4]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 199  : 			mapMatrixTextures::TNode* _end	= textures.end		();

	cmp	esi, ebp

; 200  : 			for (; _it!=_end; _it++)	{

	je	SHORT $LN3@sort_tlist
	npad	10
$LL4@sort_tlist:

; 201  : 				if (_it->val.ssa > r_ssaHZBvsTEX)	lst.push_back	(_it);

	movss	xmm0, DWORD PTR [esi+16]
	comiss	xmm0, DWORD PTR ?r_ssaHZBvsTEX@@3MA
	jbe	SHORT $LN9@sort_tlist
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 730  :         if (_Mylast != _My_data._Myend) {

	mov	eax, DWORD PTR [edi+4]
	cmp	eax, DWORD PTR [edi+8]
	je	SHORT $LN43@sort_tlist

; 713  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

	mov	DWORD PTR [eax], esi

; 714  :         _Orphan_range(_Mylast, _Mylast);
; 715  :         _Ty& _Result = *_Mylast;
; 716  :         ++_Mylast;

	add	DWORD PTR [edi+4], 4

; 731  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

	jmp	SHORT $LN2@sort_tlist
$LN43@sort_tlist:

; 732  :         }
; 733  : 
; 734  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

	lea	ecx, DWORD PTR __it$2[esp+16]
	push	ecx
	mov	ecx, edi
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 201  : 				if (_it->val.ssa > r_ssaHZBvsTEX)	lst.push_back	(_it);

	jmp	SHORT $LN184@sort_tlist
$LN9@sort_tlist:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 730  :         if (_Mylast != _My_data._Myend) {

	mov	eax, DWORD PTR [ebx+4]
	cmp	eax, DWORD PTR [ebx+8]
	je	SHORT $LN50@sort_tlist

; 713  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

	mov	DWORD PTR [eax], esi

; 714  :         _Orphan_range(_Mylast, _Mylast);
; 715  :         _Ty& _Result = *_Mylast;
; 716  :         ++_Mylast;

	add	DWORD PTR [ebx+4], 4

; 731  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

	jmp	SHORT $LN2@sort_tlist
$LN50@sort_tlist:

; 732  :         }
; 733  : 
; 734  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

	lea	ecx, DWORD PTR __it$2[esp+16]
	push	ecx
	mov	ecx, ebx
$LN184@sort_tlist:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 200  : 			for (; _it!=_end; _it++)	{

	push	eax
	call	??$_Emplace_reallocate@ABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU23@ABQAU23@@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Emplace_reallocate<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * const &>
$LN2@sort_tlist:
	add	esi, 28					; 0000001cH
	mov	DWORD PTR __it$2[esp+16], esi
	cmp	esi, ebp
	jne	SHORT $LL4@sort_tlist
$LN3@sort_tlist:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7079 :     const auto _ULast  = _Get_unwrapped(_Last);

	mov	edx, DWORD PTR [edi+4]

; 7080 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

	mov	eax, edx
	mov	ecx, DWORD PTR [edi]
	sub	eax, ecx
	sar	eax, 2
	push	OFFSET ?cmp_textures_ssa_mat@@YA_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; cmp_textures_ssa_mat
	push	eax
	call	??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z ; std::_Sort_unchecked<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *)>
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 207  : 			if (2==amount)				std::sort	(temp.begin(),	temp.end(),	cmp_textures_lex2_mat);

	mov	eax, DWORD PTR _amount$1$[esp+28]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7080 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

	add	esp, 8
	mov	ecx, DWORD PTR [ebx]
	mov	edx, DWORD PTR [ebx+4]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 207  : 			if (2==amount)				std::sort	(temp.begin(),	temp.end(),	cmp_textures_lex2_mat);

	cmp	eax, 2
	jne	SHORT $LN11@sort_tlist
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7080 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

	mov	esi, OFFSET ?cmp_textures_lex2_mat@@YA_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; cmp_textures_lex2_mat
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 207  : 			if (2==amount)				std::sort	(temp.begin(),	temp.end(),	cmp_textures_lex2_mat);

	jmp	SHORT $LN185@sort_tlist
$LN11@sort_tlist:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7080 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

	mov	esi, OFFSET ?cmp_textures_lex3_mat@@YA_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; cmp_textures_lex3_mat
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 208  : 			else if (3==amount)			std::sort	(temp.begin(),	temp.end(),	cmp_textures_lex3_mat);

	cmp	eax, 3
	je	SHORT $LN185@sort_tlist
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7080 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

	mov	esi, OFFSET ?cmp_textures_lexN_mat@@YA_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; cmp_textures_lexN_mat
$LN185@sort_tlist:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1473 :         return iterator(_My_data._Mylast, _STD addressof(_My_data));

	mov	eax, edx
	sub	eax, ecx
	sar	eax, 2
	push	esi
	push	eax
	call	??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z ; std::_Sort_unchecked<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *)>
	add	esp, 8

; 1058 :         _Insert_range(_Where, _Get_unwrapped(_First), _Get_unwrapped(_Last), _Iter_cat_t<_Iter>{});

	mov	ecx, edi
	push	DWORD PTR $T1[esp+16]
	push	DWORD PTR [ebx+4]
	push	DWORD PTR [ebx]
	push	DWORD PTR [edi+4]
	call	??$_Insert_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@1Uforward_iterator_tag@1@@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Insert_range<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *>
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 222  : }

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	pop	ecx
	ret	0
?sort_tlist_mat@@YAXAAV?$xr_vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@@0AAUmapMatrixTextures@R_dsgraph@@H@Z ENDP ; sort_tlist_mat
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\FTimer.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\FTimer.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File I:\Vitalya\mine\NSProjectX\xrEngine\R_Backend_Runtime.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File I:\Vitalya\mine\NSProjectX\xrEngine\R_Backend_Runtime.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File I:\Vitalya\mine\NSProjectX\xrEngine\R_Backend_Runtime.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\vector.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File I:\Vitalya\mine\NSProjectX\xrEngine\R_Backend_Runtime.h
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File I:\Vitalya\mine\NSProjectX\xrEngine\R_Backend_Runtime.h
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File I:\Vitalya\mine\NSProjectX\xrEngine\R_Backend_Runtime.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\FTimer.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
_TEXT	SEGMENT
_this$1$ = -40						; size = 4
_state_id$1$ = -36					; size = 4
_Nvs$1$ = -32						; size = 4
_Ncs$1$ = -32						; size = 4
_Nps$1$ = -28						; size = 4
_cs_id$1$ = -28						; size = 4
_vs_id$1$ = -24						; size = 4
_Nps$1$ = -24						; size = 4
_ps_id$1$ = -20						; size = 4
_ps_id$1$ = -20						; size = 4
_cs_id$1$ = -16						; size = 4
_Nvs$1$ = -16						; size = 4
_state_id$1$ = -12					; size = 4
_vs_id$1$ = -12						; size = 4
_Ncs$1$ = -8						; size = 4
tv5686 = -8						; size = 4
_tex$1$ = -4						; size = 4
_tex$1$ = -4						; size = 4
tv5451 = 8						; size = 4
__priority$ = 8						; size = 4
__clear$dead$ = 12					; size = 1
?r_dsgraph_render_graph@R_dsgraph_structure@@QAEXI_N@Z PROC ; R_dsgraph_structure::r_dsgraph_render_graph
; _this$ = ecx

; 225  : {

	sub	esp, 44					; 0000002cH

; 226  : 	Device.Statistic->RenderDUMP.Begin		();

	mov	eax, DWORD PTR __imp_?Device@@3VCRenderDevice@@A
	push	ebx
	push	ebp
	push	esi
	mov	esi, DWORD PTR [eax+436]
	mov	ebp, ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\FTimer.h

; 173  : 	ICF void	Begin			()		{	if (!g_bEnableStatGather) return;	count++; T.Start();				}

	mov	eax, DWORD PTR __imp_?g_bEnableStatGather@@3HA
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 226  : 	Device.Statistic->RenderDUMP.Begin		();

	add	esi, 1512				; 000005e8H
	push	edi
	mov	DWORD PTR _this$1$[esp+60], ebp
; File I:\Vitalya\mine\NSProjectX\xrCore\FTimer.h

; 173  : 	ICF void	Begin			()		{	if (!g_bEnableStatGather) return;	count++; T.Start();				}

	cmp	DWORD PTR [eax], 0
	je	SHORT $LN47@r_dsgraph_
	inc	DWORD PTR [esi+68]

; 73   : 		if (bPause)

	cmp	DWORD PTR [esi+24], 0
	jne	SHORT $LN47@r_dsgraph_

; 29   : 	ICF	void	Start			()		{	if(bPause) return;	qwStartTime = CPU::QPC()-qwPauseAccum;		}

	call	DWORD PTR __imp_?QPC@CPU@@YA_KXZ
	sub	eax, DWORD PTR [esi+16]
	mov	DWORD PTR [esi], eax
	sbb	edx, DWORD PTR [esi+20]
	mov	DWORD PTR [esi+4], edx

; 78   : 		m_real_ticks	= 0;

	mov	DWORD PTR [esi+40], 0
	mov	DWORD PTR [esi+44], 0

; 79   : 		m_ticks			= 0;

	mov	DWORD PTR [esi+48], 0
	mov	DWORD PTR [esi+52], 0
$LN47@r_dsgraph_:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 232  : 		RCache.set_xform_world			(Fidentity);

	push	DWORD PTR __imp_?Fidentity@@3U?$_matrix@M@@A
	mov	ecx, DWORD PTR __imp_?RCache@@3VCBackend@@A
	call	DWORD PTR __imp_?set_xform_world@CBackend@@QAEXABU?$_matrix@M@@@Z

; 233  : 		mapNormalVS&	vs				= mapNormal	[_priority];

	mov	eax, DWORD PTR __priority$[esp+56]

; 234  : 		vs.getANY_P						(nrmVS);

	lea	ebx, DWORD PTR [ebp+400]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1250 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

	mov	edi, DWORD PTR [ebx+4]
	mov	edx, DWORD PTR [ebx]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 233  : 		mapNormalVS&	vs				= mapNormal	[_priority];

	lea	ecx, DWORD PTR [eax+eax*2]
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h

; 231  : 		D.resize			(size());

	mov	esi, DWORD PTR [ebp+ecx*4+308]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 233  : 		mapNormalVS&	vs				= mapNormal	[_priority];

	mov	DWORD PTR tv5451[esp+56], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1250 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

	mov	ecx, edi
	sub	ecx, edx
	sar	ecx, 2

; 1251 :         if (_Newsize < _Oldsize) { // trim

	cmp	esi, ecx
	jae	SHORT $LN61@r_dsgraph_

; 1252 :             const pointer _Newlast = _Myfirst + _Newsize;

	lea	eax, DWORD PTR [edx+esi*4]

; 1253 :             _Orphan_range(_Newlast, _Mylast);
; 1254 :             _Destroy(_Newlast, _Mylast);
; 1255 :             _Mylast = _Newlast;
; 1256 :             return;

	jmp	SHORT $LN851@r_dsgraph_
$LN61@r_dsgraph_:

; 1257 :         }
; 1258 : 
; 1259 :         if (_Newsize > _Oldsize) { // append

	jbe	SHORT $LN62@r_dsgraph_

; 1260 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

	mov	eax, DWORD PTR [ebx+8]
	sub	eax, edx
	sar	eax, 2

; 1261 :             if (_Newsize > _Oldcapacity) { // reallocate

	cmp	esi, eax
	jbe	SHORT $LN63@r_dsgraph_

; 1262 :                 _Resize_reallocate(_Newsize, _Val);

	push	ecx
	push	esi
	mov	ecx, ebx
	call	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::_Resize_reallocate<std::_Value_init_tag>

; 1263 :                 return;

	jmp	SHORT $LN62@r_dsgraph_
$LN63@r_dsgraph_:

; 1264 :             }
; 1265 : 
; 1266 :             const pointer _Oldlast = _Mylast;
; 1267 :             _Mylast                = _Ufill(_Oldlast, _Newsize - _Oldsize, _Val);

	sub	esi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	shl	esi, 2

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	push	esi
	push	0
	push	edi
	call	_memset
	add	esp, 12					; 0000000cH

; 1808 :             return _First + _Count;

	lea	eax, DWORD PTR [esi+edi]
$LN851@r_dsgraph_:
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h

; 232  : 		TNode** _it			= &*D.begin();

	mov	DWORD PTR [ebx+4], eax
$LN62@r_dsgraph_:

; 201  : 	IC TNode*	end()		{ return nodes+pool;	}

	mov	eax, DWORD PTR tv5451[esp+56]

; 232  : 		TNode** _it			= &*D.begin();

	mov	esi, DWORD PTR [ebx]

; 201  : 	IC TNode*	end()		{ return nodes+pool;	}

	mov	edx, DWORD PTR [ebp+eax*4+304]
	mov	eax, DWORD PTR [ebp+eax*4+308]
	lea	ecx, DWORD PTR [eax*8]
	sub	ecx, eax
	lea	eax, DWORD PTR [edx+ecx*4]

; 234  : 		for (TNode* cur = begin(); cur!=_end; cur++,_it++) *_it = cur;

	cmp	edx, eax
	je	SHORT $LN55@r_dsgraph_
$LL56@r_dsgraph_:
	mov	DWORD PTR [esi], edx
	lea	esi, DWORD PTR [esi+4]
	add	edx, 28					; 0000001cH
	cmp	edx, eax
	jne	SHORT $LL56@r_dsgraph_
	mov	esi, DWORD PTR [ebx]
$LN55@r_dsgraph_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7079 :     const auto _ULast  = _Get_unwrapped(_Last);

	mov	edx, DWORD PTR [ebp+404]

; 7080 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

	mov	ecx, esi
	mov	eax, edx
	sub	eax, esi
	sar	eax, 2
	push	OFFSET ?cmp_vs_nrm@@YA_NPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; cmp_vs_nrm
	push	eax
	call	??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z ; std::_Sort_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *)>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	eax, DWORD PTR [ebx+4]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 236  : 		for (u32 vs_id=0; vs_id<nrmVS.size(); vs_id++)

	xor	edx, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	ecx, DWORD PTR [ebx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7080 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

	add	esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	sub	eax, ecx
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 236  : 		for (u32 vs_id=0; vs_id<nrmVS.size(); vs_id++)

	mov	DWORD PTR _vs_id$1$[esp+60], edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	sar	eax, 2
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 236  : 		for (u32 vs_id=0; vs_id<nrmVS.size(); vs_id++)

	test	eax, eax
	je	$LN842@r_dsgraph_
	lea	ebx, DWORD PTR [ebp+412]
	jmp	SHORT $LN4@r_dsgraph_
	npad	4
$LL841@r_dsgraph_:
	mov	ebp, DWORD PTR _this$1$[esp+60]
$LN4@r_dsgraph_:

; 237  : 		{
; 238  : 			mapNormalVS::TNode*	Nvs			= nrmVS[vs_id];

	mov	esi, DWORD PTR [ecx+edx*4]

; 239  : 			RCache.set_VS					(Nvs->key);	

	mov	eax, DWORD PTR __imp_?RCache@@3VCBackend@@A
	mov	DWORD PTR _Nvs$1$[esp+60], esi
	mov	edx, DWORD PTR [esi]
; File I:\Vitalya\mine\NSProjectX\xrEngine\R_Backend_Runtime.h

; 158  : 	if (vs != _vs)

	cmp	DWORD PTR [eax+8876], edx
	je	SHORT $LN128@r_dsgraph_

; 159  : 	{
; 160  : 		PGO(Msg("PGO:Vshader:%x", _vs));
; 161  : 		stat.vs++;

	inc	DWORD PTR [eax+9028]

; 162  : 		vs = _vs;

	mov	DWORD PTR [eax+8876], edx

; 163  : 		CHK_DX(HW.pDevice->SetVertexShader(vs));

	mov	eax, DWORD PTR __imp_?HW@@3VCHW@@A
	push	edx
	mov	eax, DWORD PTR [eax+8]
	push	eax
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR [ecx+368]
$LN128@r_dsgraph_:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 241  : 			mapNormalPS&		ps			= Nvs->val;		ps.ssa	= 0;

	mov	DWORD PTR [esi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1250 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

	mov	edi, DWORD PTR [ebx+4]
	mov	ecx, edi
	mov	edx, DWORD PTR [ebx]
	sub	ecx, edx
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h

; 231  : 		D.resize			(size());

	mov	esi, DWORD PTR [esi+8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1250 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

	sar	ecx, 2

; 1251 :         if (_Newsize < _Oldsize) { // trim

	cmp	esi, ecx
	jae	SHORT $LN138@r_dsgraph_

; 1252 :             const pointer _Newlast = _Myfirst + _Newsize;

	lea	eax, DWORD PTR [edx+esi*4]

; 1253 :             _Orphan_range(_Newlast, _Mylast);
; 1254 :             _Destroy(_Newlast, _Mylast);
; 1255 :             _Mylast = _Newlast;
; 1256 :             return;

	jmp	SHORT $LN852@r_dsgraph_
$LN138@r_dsgraph_:

; 1257 :         }
; 1258 : 
; 1259 :         if (_Newsize > _Oldsize) { // append

	jbe	SHORT $LN139@r_dsgraph_

; 1260 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

	mov	eax, DWORD PTR [ebx+8]
	sub	eax, edx
	sar	eax, 2

; 1261 :             if (_Newsize > _Oldcapacity) { // reallocate

	cmp	esi, eax
	jbe	SHORT $LN140@r_dsgraph_

; 1262 :                 _Resize_reallocate(_Newsize, _Val);

	push	ecx
	push	esi
	mov	ecx, ebx
	call	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::_Resize_reallocate<std::_Value_init_tag>

; 1263 :                 return;

	jmp	SHORT $LN139@r_dsgraph_
$LN140@r_dsgraph_:

; 1264 :             }
; 1265 : 
; 1266 :             const pointer _Oldlast = _Mylast;
; 1267 :             _Mylast                = _Ufill(_Oldlast, _Newsize - _Oldsize, _Val);

	sub	esi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	shl	esi, 2

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	push	esi
	push	0
	push	edi
	call	_memset
	add	esp, 12					; 0000000cH

; 1808 :             return _First + _Count;

	lea	eax, DWORD PTR [esi+edi]
$LN852@r_dsgraph_:
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h

; 232  : 		TNode** _it			= &*D.begin();

	mov	DWORD PTR [ebx+4], eax
$LN139@r_dsgraph_:

; 201  : 	IC TNode*	end()		{ return nodes+pool;	}

	mov	eax, DWORD PTR _Nvs$1$[esp+60]

; 232  : 		TNode** _it			= &*D.begin();

	mov	esi, DWORD PTR [ebx]

; 201  : 	IC TNode*	end()		{ return nodes+pool;	}

	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax+8]
	lea	ecx, DWORD PTR [eax*8]
	sub	ecx, eax
	lea	eax, DWORD PTR [edx+ecx*4]

; 234  : 		for (TNode* cur = begin(); cur!=_end; cur++,_it++) *_it = cur;

	cmp	edx, eax
	je	SHORT $LN132@r_dsgraph_
$LL133@r_dsgraph_:
	mov	DWORD PTR [esi], edx
	lea	esi, DWORD PTR [esi+4]
	add	edx, 28					; 0000001cH
	cmp	edx, eax
	jne	SHORT $LL133@r_dsgraph_
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 288  : 			if(_clear) ps.clear		();

	mov	esi, DWORD PTR [ebx]
$LN132@r_dsgraph_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7079 :     const auto _ULast  = _Get_unwrapped(_Last);

	mov	edx, DWORD PTR [ebp+416]

; 7080 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

	mov	ecx, esi
	mov	eax, edx
	sub	eax, esi
	sar	eax, 2
	push	OFFSET ?cmp_ps_nrm@@YA_NPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; cmp_ps_nrm
	push	eax
	call	??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z ; std::_Sort_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *)>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	eax, DWORD PTR [ebx+4]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 244  : 			for (u32 ps_id=0; ps_id<nrmPS.size(); ps_id++)

	xor	edx, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	ecx, DWORD PTR [ebx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7080 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

	add	esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	sub	eax, ecx
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 244  : 			for (u32 ps_id=0; ps_id<nrmPS.size(); ps_id++)

	mov	DWORD PTR _ps_id$1$[esp+60], edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	sar	eax, 2
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 244  : 			for (u32 ps_id=0; ps_id<nrmPS.size(); ps_id++)

	test	eax, eax
	je	$LN843@r_dsgraph_
	lea	ebx, DWORD PTR [ebp+424]
	jmp	SHORT $LN7@r_dsgraph_
	npad	2
$LL840@r_dsgraph_:
	mov	ebp, DWORD PTR _this$1$[esp+60]
$LN7@r_dsgraph_:

; 245  : 			{
; 246  : 				mapNormalPS::TNode*	Nps			= nrmPS[ps_id];

	mov	esi, DWORD PTR [ecx+edx*4]

; 247  : 				RCache.set_PS					(Nps->key);	

	mov	eax, DWORD PTR __imp_?RCache@@3VCBackend@@A
	mov	DWORD PTR _Nps$1$[esp+60], esi
	mov	edx, DWORD PTR [esi]
; File I:\Vitalya\mine\NSProjectX\xrEngine\R_Backend_Runtime.h

; 144  : 	if (ps != _ps)

	cmp	DWORD PTR [eax+8872], edx
	je	SHORT $LN205@r_dsgraph_

; 145  : 	{
; 146  : 		PGO(Msg("PGO:Pshader:%x", _ps));
; 147  : 		stat.ps++;

	inc	DWORD PTR [eax+9032]

; 148  : 		ps = _ps;

	mov	DWORD PTR [eax+8872], edx

; 149  : 		CHK_DX(HW.pDevice->SetPixelShader(ps));

	mov	eax, DWORD PTR __imp_?HW@@3VCHW@@A
	push	edx
	mov	eax, DWORD PTR [eax+8]
	push	eax
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR [ecx+428]
$LN205@r_dsgraph_:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 249  : 				mapNormalCS&		cs			= Nps->val;		cs.ssa	= 0;

	mov	DWORD PTR [esi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1250 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

	mov	edi, DWORD PTR [ebx+4]
	mov	ecx, edi
	mov	edx, DWORD PTR [ebx]
	sub	ecx, edx
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h

; 231  : 		D.resize			(size());

	mov	esi, DWORD PTR [esi+8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1250 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

	sar	ecx, 2

; 1251 :         if (_Newsize < _Oldsize) { // trim

	cmp	esi, ecx
	jae	SHORT $LN215@r_dsgraph_

; 1252 :             const pointer _Newlast = _Myfirst + _Newsize;

	lea	eax, DWORD PTR [edx+esi*4]

; 1253 :             _Orphan_range(_Newlast, _Mylast);
; 1254 :             _Destroy(_Newlast, _Mylast);
; 1255 :             _Mylast = _Newlast;
; 1256 :             return;

	jmp	SHORT $LN853@r_dsgraph_
$LN215@r_dsgraph_:

; 1257 :         }
; 1258 : 
; 1259 :         if (_Newsize > _Oldsize) { // append

	jbe	SHORT $LN216@r_dsgraph_

; 1260 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

	mov	eax, DWORD PTR [ebx+8]
	sub	eax, edx
	sar	eax, 2

; 1261 :             if (_Newsize > _Oldcapacity) { // reallocate

	cmp	esi, eax
	jbe	SHORT $LN217@r_dsgraph_

; 1262 :                 _Resize_reallocate(_Newsize, _Val);

	push	ecx
	push	esi
	mov	ecx, ebx
	call	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::_Resize_reallocate<std::_Value_init_tag>

; 1263 :                 return;

	jmp	SHORT $LN216@r_dsgraph_
$LN217@r_dsgraph_:

; 1264 :             }
; 1265 : 
; 1266 :             const pointer _Oldlast = _Mylast;
; 1267 :             _Mylast                = _Ufill(_Oldlast, _Newsize - _Oldsize, _Val);

	sub	esi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	shl	esi, 2

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	push	esi
	push	0
	push	edi
	call	_memset
	add	esp, 12					; 0000000cH

; 1808 :             return _First + _Count;

	lea	eax, DWORD PTR [esi+edi]
$LN853@r_dsgraph_:
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h

; 232  : 		TNode** _it			= &*D.begin();

	mov	DWORD PTR [ebx+4], eax
$LN216@r_dsgraph_:

; 201  : 	IC TNode*	end()		{ return nodes+pool;	}

	mov	eax, DWORD PTR _Nps$1$[esp+60]

; 232  : 		TNode** _it			= &*D.begin();

	mov	esi, DWORD PTR [ebx]

; 201  : 	IC TNode*	end()		{ return nodes+pool;	}

	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax+8]
	lea	ecx, DWORD PTR [eax*8]
	sub	ecx, eax
	lea	eax, DWORD PTR [edx+ecx*4]

; 234  : 		for (TNode* cur = begin(); cur!=_end; cur++,_it++) *_it = cur;

	cmp	edx, eax
	je	SHORT $LN209@r_dsgraph_
$LL210@r_dsgraph_:
	mov	DWORD PTR [esi], edx
	lea	esi, DWORD PTR [esi+4]
	add	edx, 28					; 0000001cH
	cmp	edx, eax
	jne	SHORT $LL210@r_dsgraph_
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 285  : 				if(_clear) cs.clear		();

	mov	esi, DWORD PTR [ebx]
$LN209@r_dsgraph_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7079 :     const auto _ULast  = _Get_unwrapped(_Last);

	mov	edx, DWORD PTR [ebp+428]

; 7080 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

	mov	ecx, esi
	mov	eax, edx
	sub	eax, esi
	sar	eax, 2
	push	OFFSET ?cmp_cs_nrm@@YA_NPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; cmp_cs_nrm
	push	eax
	call	??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z ; std::_Sort_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *)>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	eax, DWORD PTR [ebx+4]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 252  : 				for (u32 cs_id=0; cs_id<nrmCS.size(); cs_id++)

	xor	edx, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	ecx, DWORD PTR [ebx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7080 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

	add	esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	sub	eax, ecx
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 252  : 				for (u32 cs_id=0; cs_id<nrmCS.size(); cs_id++)

	mov	DWORD PTR _cs_id$1$[esp+60], edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	sar	eax, 2
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 252  : 				for (u32 cs_id=0; cs_id<nrmCS.size(); cs_id++)

	test	eax, eax
	je	$LN844@r_dsgraph_
	lea	ebx, DWORD PTR [ebp+436]
	jmp	SHORT $LN10@r_dsgraph_
	npad	2
$LL839@r_dsgraph_:
	mov	ebp, DWORD PTR _this$1$[esp+60]
$LN10@r_dsgraph_:

; 253  : 				{
; 254  : 					mapNormalCS::TNode*	Ncs			= nrmCS[cs_id];

	mov	esi, DWORD PTR [ecx+edx*4]

; 255  : 					RCache.set_Constants			(Ncs->key);

	mov	ecx, DWORD PTR __imp_?RCache@@3VCBackend@@A
	mov	DWORD PTR _Ncs$1$[esp+60], esi
	push	DWORD PTR [esi]
	call	DWORD PTR __imp_?set_Constants@CBackend@@QAEXPAVR_constant_table@@@Z

; 256  : 
; 257  : 					mapNormalStates&	states		= Ncs->val;		states.ssa	= 0;

	mov	DWORD PTR [esi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1250 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

	mov	edi, DWORD PTR [ebx+4]
	mov	ecx, edi
	mov	edx, DWORD PTR [ebx]
	sub	ecx, edx
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h

; 231  : 		D.resize			(size());

	mov	esi, DWORD PTR [esi+8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1250 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

	sar	ecx, 2

; 1251 :         if (_Newsize < _Oldsize) { // trim

	cmp	esi, ecx
	jae	SHORT $LN289@r_dsgraph_

; 1252 :             const pointer _Newlast = _Myfirst + _Newsize;

	lea	eax, DWORD PTR [edx+esi*4]

; 1253 :             _Orphan_range(_Newlast, _Mylast);
; 1254 :             _Destroy(_Newlast, _Mylast);
; 1255 :             _Mylast = _Newlast;
; 1256 :             return;

	jmp	SHORT $LN854@r_dsgraph_
$LN289@r_dsgraph_:

; 1257 :         }
; 1258 : 
; 1259 :         if (_Newsize > _Oldsize) { // append

	jbe	SHORT $LN290@r_dsgraph_

; 1260 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

	mov	eax, DWORD PTR [ebx+8]
	sub	eax, edx
	sar	eax, 2

; 1261 :             if (_Newsize > _Oldcapacity) { // reallocate

	cmp	esi, eax
	jbe	SHORT $LN291@r_dsgraph_

; 1262 :                 _Resize_reallocate(_Newsize, _Val);

	push	ecx
	push	esi
	mov	ecx, ebx
	call	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::_Resize_reallocate<std::_Value_init_tag>

; 1263 :                 return;

	jmp	SHORT $LN290@r_dsgraph_
$LN291@r_dsgraph_:

; 1264 :             }
; 1265 : 
; 1266 :             const pointer _Oldlast = _Mylast;
; 1267 :             _Mylast                = _Ufill(_Oldlast, _Newsize - _Oldsize, _Val);

	sub	esi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	shl	esi, 2

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	push	esi
	push	0
	push	edi
	call	_memset
	add	esp, 12					; 0000000cH

; 1808 :             return _First + _Count;

	lea	eax, DWORD PTR [esi+edi]
$LN854@r_dsgraph_:
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h

; 232  : 		TNode** _it			= &*D.begin();

	mov	DWORD PTR [ebx+4], eax
$LN290@r_dsgraph_:

; 201  : 	IC TNode*	end()		{ return nodes+pool;	}

	mov	eax, DWORD PTR _Ncs$1$[esp+60]

; 232  : 		TNode** _it			= &*D.begin();

	mov	esi, DWORD PTR [ebx]

; 201  : 	IC TNode*	end()		{ return nodes+pool;	}

	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax+8]
	lea	ecx, DWORD PTR [eax*8]
	sub	ecx, eax
	lea	eax, DWORD PTR [edx+ecx*4]

; 234  : 		for (TNode* cur = begin(); cur!=_end; cur++,_it++) *_it = cur;

	cmp	edx, eax
	je	SHORT $LN283@r_dsgraph_
$LL284@r_dsgraph_:
	mov	DWORD PTR [esi], edx
	lea	esi, DWORD PTR [esi+4]
	add	edx, 28					; 0000001cH
	cmp	edx, eax
	jne	SHORT $LL284@r_dsgraph_
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 282  : 					if(_clear) states.clear	();

	mov	esi, DWORD PTR [ebx]
$LN283@r_dsgraph_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7079 :     const auto _ULast  = _Get_unwrapped(_Last);

	mov	edx, DWORD PTR [ebp+440]

; 7080 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

	mov	ecx, esi
	mov	eax, edx
	sub	eax, esi
	sar	eax, 2
	push	OFFSET ?cmp_states_nrm@@YA_NPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; cmp_states_nrm
	push	eax
	call	??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z ; std::_Sort_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *)>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	eax, DWORD PTR [ebx+4]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 260  : 					for (u32 state_id=0; state_id<nrmStates.size(); state_id++)

	xor	edx, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	ecx, DWORD PTR [ebx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7080 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

	add	esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	sub	eax, ecx
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 260  : 					for (u32 state_id=0; state_id<nrmStates.size(); state_id++)

	mov	DWORD PTR _state_id$1$[esp+60], edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	sar	eax, 2
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 260  : 					for (u32 state_id=0; state_id<nrmStates.size(); state_id++)

	test	eax, eax
	je	$LN845@r_dsgraph_
	mov	edi, DWORD PTR _this$1$[esp+60]
	add	ebp, 460				; 000001ccH
	mov	DWORD PTR tv5686[esp+60], ebp
	add	edi, 448				; 000001c0H
	npad	5
$LL13@r_dsgraph_:

; 261  : 					{
; 262  : 						mapNormalStates::TNode*	Nstate		= nrmStates[state_id];

	mov	esi, DWORD PTR [ecx+edx*4]

; 263  : 						RCache.set_States					(Nstate->key);

	mov	eax, DWORD PTR __imp_?RCache@@3VCBackend@@A
	mov	ecx, DWORD PTR [esi]
; File I:\Vitalya\mine\NSProjectX\xrEngine\R_Backend_Runtime.h

; 63   : 	if (state != _state)

	cmp	DWORD PTR [eax+8868], ecx
	je	SHORT $LN356@r_dsgraph_

; 64   : 	{
; 65   : 		PGO(Msg("PGO:state_block"));
; 66   : #ifdef DEBUG
; 67   : 		stat.states++;
; 68   : #endif
; 69   : 		state = _state;

	mov	DWORD PTR [eax+8868], ecx

; 70   : 		state->Apply();

	mov	eax, DWORD PTR [ecx]
	push	ecx
	call	DWORD PTR [eax+20]
$LN356@r_dsgraph_:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 265  : 						mapNormalTextures&		tex			= Nstate->val;	tex.ssa =	0;

	lea	eax, DWORD PTR [esi+4]

; 266  : 						sort_tlist_nrm						(nrmTextures,nrmTexturesTemp,tex,true);

	mov	edx, ebp
	mov	DWORD PTR [eax+12], 0
	push	ecx
	push	eax
	mov	ecx, edi
	mov	DWORD PTR _tex$1$[esp+68], eax
	call	?sort_tlist_nrm@@YAXAAV?$xr_vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@@0AAUmapNormalTextures@R_dsgraph@@H@Z ; sort_tlist_nrm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	eax, DWORD PTR [edi+4]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 266  : 						sort_tlist_nrm						(nrmTextures,nrmTexturesTemp,tex,true);

	add	esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	ecx, DWORD PTR [edi]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 267  : 						for (u32 tex_id=0; tex_id<nrmTextures.size(); tex_id++)

	xor	ebx, ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	sub	eax, ecx
	sar	eax, 2
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 267  : 						for (u32 tex_id=0; tex_id<nrmTextures.size(); tex_id++)

	test	eax, eax
	je	$LN846@r_dsgraph_
	npad	2
$LL16@r_dsgraph_:

; 268  : 						{
; 269  : 							mapNormalTextures::TNode*	Ntex	= nrmTextures[tex_id];

	mov	edi, DWORD PTR [ecx+ebx*4]

; 270  : 							RCache.set_Textures					(Ntex->key);

	mov	ecx, DWORD PTR __imp_?RCache@@3VCBackend@@A
	push	DWORD PTR [edi]
	call	DWORD PTR __imp_?set_Textures@CBackend@@QAEXPAUSTextureList@@@Z

; 271  : 							RImplementation.apply_lmaterial		();
; 272  : 
; 273  : 							mapNormalItems&				items	= Ntex->val;		items.ssa	= 0;

	mov	DWORD PTR [edi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7079 :     const auto _ULast  = _Get_unwrapped(_Last);

	mov	edx, DWORD PTR [edi+8]

; 7080 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

	mov	eax, edx
	mov	ecx, DWORD PTR [edi+4]
	sub	eax, ecx
	sar	eax, 3
	push	OFFSET ?cmp_normal_items@@YA_NABU_NormalItem@R_dsgraph@@0@Z ; cmp_normal_items
	push	eax
	call	??$_Sort_unchecked@PAU_NormalItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_NormalItem@R_dsgraph@@0HP6A_NABU12@1@Z@Z ; std::_Sort_unchecked<R_dsgraph::_NormalItem *,bool (__cdecl*)(R_dsgraph::_NormalItem const &,R_dsgraph::_NormalItem const &)>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1463 :         return iterator(_My_data._Myfirst, _STD addressof(_My_data));

	mov	esi, DWORD PTR [edi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7080 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

	add	esp, 8
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 28   : 	_NormalItem				*I=&*N.begin(), *E = &*N.end();

	mov	ebp, DWORD PTR [edi+8]

; 29   : 	for (; I!=E; I++)		{

	cmp	esi, ebp
	je	SHORT $LN836@r_dsgraph_
	npad	3
$LL382@r_dsgraph_:

; 17   : 	return			_sqrt(clampr((ssa - r_ssaGLOD_end)/(r_ssaGLOD_start-r_ssaGLOD_end),0.f,1.f));

	movss	xmm0, DWORD PTR ?r_ssaGLOD_start@@3MA
	movss	xmm2, DWORD PTR [esi]
	subss	xmm0, DWORD PTR ?r_ssaGLOD_end@@3MA
	subss	xmm2, DWORD PTR ?r_ssaGLOD_end@@3MA
	divss	xmm2, xmm0
; File I:\Vitalya\mine\NSProjectX\xrCore\vector.h

; 96   : 	if		( val<_low	)	return _low; 

	xorps	xmm0, xmm0
	comiss	xmm0, xmm2
	ja	SHORT $LN855@r_dsgraph_

; 97   : 	else if	( val>_high )	return _high;

	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm2, xmm0
	jbe	SHORT $LN417@r_dsgraph_
$LN855@r_dsgraph_:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 31   : 		Ni.pVisual->Render	(calcLOD(Ni.ssa,Ni.pVisual->vis.sphere.R));

	movaps	xmm2, xmm0
$LN417@r_dsgraph_:
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 764  :             return (float)sqrt(_X);

	sqrtss	xmm0, xmm2
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 31   : 		Ni.pVisual->Render	(calcLOD(Ni.ssa,Ni.pVisual->vis.sphere.R));

	mov	ecx, DWORD PTR [esi+4]
	push	ecx
	mov	eax, DWORD PTR [ecx]
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR [eax]
	add	esi, 8
	cmp	esi, ebp
	jne	SHORT $LL382@r_dsgraph_

; 275  : 							if (_clear)				items.clear	();

	mov	esi, DWORD PTR [edi+4]
$LN836@r_dsgraph_:
	mov	DWORD PTR [edi+8], esi
	inc	ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	esi, DWORD PTR _this$1$[esp+60]
	mov	eax, DWORD PTR [esi+452]
	lea	edi, DWORD PTR [esi+448]
	mov	ecx, DWORD PTR [edi]
	sub	eax, ecx
	sar	eax, 2
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 267  : 						for (u32 tex_id=0; tex_id<nrmTextures.size(); tex_id++)

	cmp	ebx, eax
	jb	$LL16@r_dsgraph_
	mov	ebp, DWORD PTR tv5686[esp+60]
	jmp	SHORT $LN837@r_dsgraph_
$LN846@r_dsgraph_:
	mov	esi, DWORD PTR _this$1$[esp+60]
$LN837@r_dsgraph_:

; 276  : 						}
; 277  : 						nrmTextures.clear		();
; 278  : 						nrmTexturesTemp.clear	();

	mov	eax, DWORD PTR [ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	lea	ebx, DWORD PTR [esi+436]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 260  : 					for (u32 state_id=0; state_id<nrmStates.size(); state_id++)

	mov	edx, DWORD PTR _state_id$1$[esp+60]

; 276  : 						}
; 277  : 						nrmTextures.clear		();
; 278  : 						nrmTexturesTemp.clear	();

	mov	DWORD PTR [ebp+4], eax
	inc	edx

; 279  : 						if(_clear) tex.clear	();

	mov	eax, DWORD PTR _tex$1$[esp+60]
	mov	DWORD PTR [esi+452], ecx
	mov	DWORD PTR _state_id$1$[esp+60], edx
	mov	DWORD PTR [eax+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	eax, DWORD PTR [ebx+4]
	mov	ecx, DWORD PTR [ebx]
	sub	eax, ecx
	sar	eax, 2
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 260  : 					for (u32 state_id=0; state_id<nrmStates.size(); state_id++)

	cmp	edx, eax
	jb	$LL13@r_dsgraph_
	jmp	SHORT $LN12@r_dsgraph_
$LN845@r_dsgraph_:
	mov	esi, DWORD PTR _this$1$[esp+60]
$LN12@r_dsgraph_:

; 282  : 					if(_clear) states.clear	();

	mov	eax, DWORD PTR _Ncs$1$[esp+60]
	mov	edx, DWORD PTR _cs_id$1$[esp+60]
	mov	DWORD PTR [esi+440], ecx
	inc	edx
	mov	DWORD PTR _cs_id$1$[esp+60], edx
	mov	DWORD PTR [eax+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	eax, DWORD PTR [esi+428]
	mov	ecx, DWORD PTR [esi+424]
	sub	eax, ecx
	sar	eax, 2
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 252  : 				for (u32 cs_id=0; cs_id<nrmCS.size(); cs_id++)

	cmp	edx, eax
	jb	$LL839@r_dsgraph_
	lea	ebx, DWORD PTR [esi+424]
	jmp	SHORT $LN9@r_dsgraph_
$LN844@r_dsgraph_:
	mov	esi, DWORD PTR _this$1$[esp+60]
$LN9@r_dsgraph_:

; 285  : 				if(_clear) cs.clear		();

	mov	eax, DWORD PTR _Nps$1$[esp+60]
	mov	edx, DWORD PTR _ps_id$1$[esp+60]
	mov	DWORD PTR [esi+428], ecx
	inc	edx
	mov	DWORD PTR _ps_id$1$[esp+60], edx
	mov	DWORD PTR [eax+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	eax, DWORD PTR [esi+416]
	mov	ecx, DWORD PTR [esi+412]
	sub	eax, ecx
	sar	eax, 2
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 244  : 			for (u32 ps_id=0; ps_id<nrmPS.size(); ps_id++)

	cmp	edx, eax
	jb	$LL840@r_dsgraph_
	lea	ebx, DWORD PTR [esi+412]
	jmp	SHORT $LN6@r_dsgraph_
$LN843@r_dsgraph_:
	mov	esi, DWORD PTR _this$1$[esp+60]
$LN6@r_dsgraph_:

; 288  : 			if(_clear) ps.clear		();

	mov	eax, DWORD PTR _Nvs$1$[esp+60]
	mov	edx, DWORD PTR _vs_id$1$[esp+60]
	mov	DWORD PTR [esi+416], ecx
	inc	edx
	mov	DWORD PTR _vs_id$1$[esp+60], edx
	mov	DWORD PTR [eax+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	eax, DWORD PTR [esi+404]
	mov	ecx, DWORD PTR [esi+400]
	sub	eax, ecx
	sar	eax, 2
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 236  : 		for (u32 vs_id=0; vs_id<nrmVS.size(); vs_id++)

	cmp	edx, eax
	jb	$LL841@r_dsgraph_
	jmp	SHORT $LN3@r_dsgraph_
$LN842@r_dsgraph_:
	mov	esi, ebp
$LN3@r_dsgraph_:

; 289  : 		}
; 290  : 		nrmVS.clear				();
; 291  : 		if(_clear) vs.clear		();

	mov	ebp, DWORD PTR tv5451[esp+56]

; 292  : 	}
; 293  : 
; 294  : 	// **************************************************** MATRIX
; 295  : 	// Perform sorting based on ScreenSpaceArea
; 296  : 	// Sorting by SSA and changes minimizations
; 297  : 	{
; 298  : 		mapMatrixVS&	vs				= mapMatrix	[_priority];
; 299  : 		vs.getANY_P						(matVS);

	lea	ebx, DWORD PTR [esi+472]
	mov	DWORD PTR [esi+404], ecx
	mov	DWORD PTR [esi+ebp*4+308], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1250 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

	mov	edi, DWORD PTR [ebx+4]
	mov	ecx, edi
	mov	edx, DWORD PTR [ebx]
	sub	ecx, edx
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h

; 231  : 		D.resize			(size());

	mov	esi, DWORD PTR [esi+ebp*4+332]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1250 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

	sar	ecx, 2

; 1251 :         if (_Newsize < _Oldsize) { // trim

	cmp	esi, ecx
	jae	SHORT $LN432@r_dsgraph_

; 1252 :             const pointer _Newlast = _Myfirst + _Newsize;

	lea	eax, DWORD PTR [edx+esi*4]

; 1253 :             _Orphan_range(_Newlast, _Mylast);
; 1254 :             _Destroy(_Newlast, _Mylast);
; 1255 :             _Mylast = _Newlast;
; 1256 :             return;

	jmp	SHORT $LN856@r_dsgraph_
$LN432@r_dsgraph_:

; 1257 :         }
; 1258 : 
; 1259 :         if (_Newsize > _Oldsize) { // append

	jbe	SHORT $LN433@r_dsgraph_

; 1260 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

	mov	eax, DWORD PTR [ebx+8]
	sub	eax, edx
	sar	eax, 2

; 1261 :             if (_Newsize > _Oldcapacity) { // reallocate

	cmp	esi, eax
	jbe	SHORT $LN434@r_dsgraph_

; 1262 :                 _Resize_reallocate(_Newsize, _Val);

	push	ecx
	push	esi
	mov	ecx, ebx
	call	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::_Resize_reallocate<std::_Value_init_tag>

; 1263 :                 return;

	jmp	SHORT $LN433@r_dsgraph_
$LN434@r_dsgraph_:

; 1264 :             }
; 1265 : 
; 1266 :             const pointer _Oldlast = _Mylast;
; 1267 :             _Mylast                = _Ufill(_Oldlast, _Newsize - _Oldsize, _Val);

	sub	esi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	shl	esi, 2

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	push	esi
	push	0
	push	edi
	call	_memset
	add	esp, 12					; 0000000cH

; 1808 :             return _First + _Count;

	lea	eax, DWORD PTR [esi+edi]
$LN856@r_dsgraph_:
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h

; 232  : 		TNode** _it			= &*D.begin();

	mov	DWORD PTR [ebx+4], eax
$LN433@r_dsgraph_:

; 201  : 	IC TNode*	end()		{ return nodes+pool;	}

	mov	edi, DWORD PTR _this$1$[esp+60]

; 232  : 		TNode** _it			= &*D.begin();

	mov	esi, DWORD PTR [ebx]

; 201  : 	IC TNode*	end()		{ return nodes+pool;	}

	mov	eax, DWORD PTR [edi+ebp*4+332]
	mov	edx, DWORD PTR [edi+ebp*4+328]
	lea	ecx, DWORD PTR [eax*8]
	sub	ecx, eax
	lea	eax, DWORD PTR [edx+ecx*4]

; 234  : 		for (TNode* cur = begin(); cur!=_end; cur++,_it++) *_it = cur;

	cmp	edx, eax
	je	SHORT $LN426@r_dsgraph_
	npad	2
$LL427@r_dsgraph_:
	mov	DWORD PTR [esi], edx
	lea	esi, DWORD PTR [esi+4]
	add	edx, 28					; 0000001cH
	cmp	edx, eax
	jne	SHORT $LL427@r_dsgraph_
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 275  : 							if (_clear)				items.clear	();

	mov	esi, DWORD PTR [ebx]
$LN426@r_dsgraph_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7079 :     const auto _ULast  = _Get_unwrapped(_Last);

	mov	edx, DWORD PTR [edi+476]

; 7080 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

	mov	ecx, esi
	mov	eax, edx
	sub	eax, esi
	sar	eax, 2
	push	OFFSET ?cmp_vs_mat@@YA_NPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; cmp_vs_mat
	push	eax
	call	??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z ; std::_Sort_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *)>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	eax, DWORD PTR [ebx+4]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 301  : 		for (u32 vs_id=0; vs_id<matVS.size(); vs_id++)	{

	xor	edx, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	ecx, DWORD PTR [ebx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7080 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

	add	esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	sub	eax, ecx
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 301  : 		for (u32 vs_id=0; vs_id<matVS.size(); vs_id++)	{

	mov	DWORD PTR _vs_id$1$[esp+60], edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	sar	eax, 2
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 301  : 		for (u32 vs_id=0; vs_id<matVS.size(); vs_id++)	{

	test	eax, eax
	je	$LN847@r_dsgraph_
	lea	ebp, DWORD PTR [edi+484]
	npad	7
$LL19@r_dsgraph_:

; 302  : 			mapMatrixVS::TNode*	Nvs			= matVS[vs_id];

	mov	ebx, DWORD PTR [ecx+edx*4]

; 303  : 			RCache.set_VS					(Nvs->key);	

	mov	eax, DWORD PTR __imp_?RCache@@3VCBackend@@A
	mov	DWORD PTR _Nvs$1$[esp+60], ebx
	mov	edx, DWORD PTR [ebx]
; File I:\Vitalya\mine\NSProjectX\xrEngine\R_Backend_Runtime.h

; 158  : 	if (vs != _vs)

	cmp	DWORD PTR [eax+8876], edx
	je	SHORT $LN499@r_dsgraph_

; 159  : 	{
; 160  : 		PGO(Msg("PGO:Vshader:%x", _vs));
; 161  : 		stat.vs++;

	inc	DWORD PTR [eax+9028]

; 162  : 		vs = _vs;

	mov	DWORD PTR [eax+8876], edx

; 163  : 		CHK_DX(HW.pDevice->SetVertexShader(vs));

	mov	eax, DWORD PTR __imp_?HW@@3VCHW@@A
	push	edx
	mov	eax, DWORD PTR [eax+8]
	push	eax
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR [ecx+368]
$LN499@r_dsgraph_:
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h

; 231  : 		D.resize			(size());

	mov	esi, DWORD PTR [ebx+8]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 305  : 			mapMatrixPS&		ps			= Nvs->val;		ps.ssa	= 0;

	mov	DWORD PTR [ebx+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1250 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

	mov	edi, DWORD PTR [ebp+4]
	mov	ecx, edi
	mov	edx, DWORD PTR [ebp]
	sub	ecx, edx
	sar	ecx, 2

; 1251 :         if (_Newsize < _Oldsize) { // trim

	cmp	esi, ecx
	jae	SHORT $LN509@r_dsgraph_

; 1252 :             const pointer _Newlast = _Myfirst + _Newsize;

	lea	eax, DWORD PTR [edx+esi*4]

; 1253 :             _Orphan_range(_Newlast, _Mylast);
; 1254 :             _Destroy(_Newlast, _Mylast);
; 1255 :             _Mylast = _Newlast;
; 1256 :             return;

	jmp	SHORT $LN857@r_dsgraph_
$LN509@r_dsgraph_:

; 1257 :         }
; 1258 : 
; 1259 :         if (_Newsize > _Oldsize) { // append

	jbe	SHORT $LN510@r_dsgraph_

; 1260 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

	mov	eax, DWORD PTR [ebp+8]
	sub	eax, edx
	sar	eax, 2

; 1261 :             if (_Newsize > _Oldcapacity) { // reallocate

	cmp	esi, eax
	jbe	SHORT $LN511@r_dsgraph_

; 1262 :                 _Resize_reallocate(_Newsize, _Val);

	push	ecx
	push	esi
	mov	ecx, ebp
	call	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::_Resize_reallocate<std::_Value_init_tag>

; 1263 :                 return;

	jmp	SHORT $LN510@r_dsgraph_
$LN511@r_dsgraph_:

; 1264 :             }
; 1265 : 
; 1266 :             const pointer _Oldlast = _Mylast;
; 1267 :             _Mylast                = _Ufill(_Oldlast, _Newsize - _Oldsize, _Val);

	sub	esi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	shl	esi, 2

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	push	esi
	push	0
	push	edi
	call	_memset
	add	esp, 12					; 0000000cH

; 1808 :             return _First + _Count;

	lea	eax, DWORD PTR [edi+esi]
$LN857@r_dsgraph_:
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h

; 232  : 		TNode** _it			= &*D.begin();

	mov	DWORD PTR [ebp+4], eax
$LN510@r_dsgraph_:

; 201  : 	IC TNode*	end()		{ return nodes+pool;	}

	mov	eax, DWORD PTR [ebx+8]
	mov	edx, DWORD PTR [ebx+4]

; 232  : 		TNode** _it			= &*D.begin();

	mov	esi, DWORD PTR [ebp]

; 201  : 	IC TNode*	end()		{ return nodes+pool;	}

	lea	ecx, DWORD PTR [eax*8]
	sub	ecx, eax
	lea	eax, DWORD PTR [edx+ecx*4]

; 234  : 		for (TNode* cur = begin(); cur!=_end; cur++,_it++) *_it = cur;

	cmp	edx, eax
	je	SHORT $LN503@r_dsgraph_
	npad	3
$LL504@r_dsgraph_:
	mov	DWORD PTR [esi], edx
	lea	esi, DWORD PTR [esi+4]
	add	edx, 28					; 0000001cH
	cmp	edx, eax
	jne	SHORT $LL504@r_dsgraph_
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 351  : 			if(_clear) ps.clear		();

	mov	esi, DWORD PTR [ebp]
$LN503@r_dsgraph_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7079 :     const auto _ULast  = _Get_unwrapped(_Last);

	mov	edi, DWORD PTR _this$1$[esp+60]

; 7080 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

	mov	ecx, esi
	push	OFFSET ?cmp_ps_mat@@YA_NPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; cmp_ps_mat
	mov	edx, DWORD PTR [edi+488]
	mov	eax, edx
	sub	eax, esi
	sar	eax, 2
	push	eax
	call	??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z ; std::_Sort_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *)>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	eax, DWORD PTR [ebp+4]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 308  : 			for (u32 ps_id=0; ps_id<matPS.size(); ps_id++)

	xor	edx, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	ecx, DWORD PTR [ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7080 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

	add	esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	sub	eax, ecx
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 308  : 			for (u32 ps_id=0; ps_id<matPS.size(); ps_id++)

	mov	DWORD PTR _ps_id$1$[esp+60], edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	sar	eax, 2
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 308  : 			for (u32 ps_id=0; ps_id<matPS.size(); ps_id++)

	test	eax, eax
	je	$LN848@r_dsgraph_
	lea	ebx, DWORD PTR [edi+496]
	npad	1
$LL22@r_dsgraph_:

; 309  : 			{
; 310  : 				mapMatrixPS::TNode*	Nps			= matPS[ps_id];

	mov	ebp, DWORD PTR [ecx+edx*4]

; 311  : 				RCache.set_PS					(Nps->key);	

	mov	eax, DWORD PTR __imp_?RCache@@3VCBackend@@A
	mov	DWORD PTR _Nps$1$[esp+60], ebp
	mov	edx, DWORD PTR [ebp]
; File I:\Vitalya\mine\NSProjectX\xrEngine\R_Backend_Runtime.h

; 144  : 	if (ps != _ps)

	cmp	DWORD PTR [eax+8872], edx
	je	SHORT $LN576@r_dsgraph_

; 145  : 	{
; 146  : 		PGO(Msg("PGO:Pshader:%x", _ps));
; 147  : 		stat.ps++;

	inc	DWORD PTR [eax+9032]

; 148  : 		ps = _ps;

	mov	DWORD PTR [eax+8872], edx

; 149  : 		CHK_DX(HW.pDevice->SetPixelShader(ps));

	mov	eax, DWORD PTR __imp_?HW@@3VCHW@@A
	push	edx
	mov	eax, DWORD PTR [eax+8]
	push	eax
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR [ecx+428]
$LN576@r_dsgraph_:
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h

; 231  : 		D.resize			(size());

	mov	esi, DWORD PTR [ebp+8]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 313  : 				mapMatrixCS&		cs			= Nps->val;		cs.ssa	= 0;

	mov	DWORD PTR [ebp+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1250 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

	mov	edi, DWORD PTR [ebx+4]
	mov	ecx, edi
	mov	edx, DWORD PTR [ebx]
	sub	ecx, edx
	sar	ecx, 2

; 1251 :         if (_Newsize < _Oldsize) { // trim

	cmp	esi, ecx
	jae	SHORT $LN586@r_dsgraph_

; 1252 :             const pointer _Newlast = _Myfirst + _Newsize;

	lea	eax, DWORD PTR [edx+esi*4]

; 1253 :             _Orphan_range(_Newlast, _Mylast);
; 1254 :             _Destroy(_Newlast, _Mylast);
; 1255 :             _Mylast = _Newlast;
; 1256 :             return;

	jmp	SHORT $LN858@r_dsgraph_
$LN586@r_dsgraph_:

; 1257 :         }
; 1258 : 
; 1259 :         if (_Newsize > _Oldsize) { // append

	jbe	SHORT $LN587@r_dsgraph_

; 1260 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

	mov	eax, DWORD PTR [ebx+8]
	sub	eax, edx
	sar	eax, 2

; 1261 :             if (_Newsize > _Oldcapacity) { // reallocate

	cmp	esi, eax
	jbe	SHORT $LN588@r_dsgraph_

; 1262 :                 _Resize_reallocate(_Newsize, _Val);

	push	ecx
	push	esi
	mov	ecx, ebx
	call	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::_Resize_reallocate<std::_Value_init_tag>

; 1263 :                 return;

	jmp	SHORT $LN587@r_dsgraph_
$LN588@r_dsgraph_:

; 1264 :             }
; 1265 : 
; 1266 :             const pointer _Oldlast = _Mylast;
; 1267 :             _Mylast                = _Ufill(_Oldlast, _Newsize - _Oldsize, _Val);

	sub	esi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	shl	esi, 2

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	push	esi
	push	0
	push	edi
	call	_memset
	add	esp, 12					; 0000000cH

; 1808 :             return _First + _Count;

	lea	eax, DWORD PTR [edi+esi]
$LN858@r_dsgraph_:
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h

; 232  : 		TNode** _it			= &*D.begin();

	mov	DWORD PTR [ebx+4], eax
$LN587@r_dsgraph_:

; 201  : 	IC TNode*	end()		{ return nodes+pool;	}

	mov	eax, DWORD PTR [ebp+8]
	mov	edx, DWORD PTR [ebp+4]

; 232  : 		TNode** _it			= &*D.begin();

	mov	esi, DWORD PTR [ebx]

; 201  : 	IC TNode*	end()		{ return nodes+pool;	}

	lea	ecx, DWORD PTR [eax*8]
	sub	ecx, eax
	lea	eax, DWORD PTR [edx+ecx*4]

; 234  : 		for (TNode* cur = begin(); cur!=_end; cur++,_it++) *_it = cur;

	cmp	edx, eax
	je	SHORT $LN580@r_dsgraph_
	npad	4
$LL581@r_dsgraph_:
	mov	DWORD PTR [esi], edx
	lea	esi, DWORD PTR [esi+4]
	add	edx, 28					; 0000001cH
	cmp	edx, eax
	jne	SHORT $LL581@r_dsgraph_
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 348  : 				if(_clear) cs.clear		();

	mov	esi, DWORD PTR [ebx]
$LN580@r_dsgraph_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7079 :     const auto _ULast  = _Get_unwrapped(_Last);

	mov	edi, DWORD PTR _this$1$[esp+60]

; 7080 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

	mov	ecx, esi
	push	OFFSET ?cmp_cs_mat@@YA_NPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; cmp_cs_mat
	mov	edx, DWORD PTR [edi+500]
	mov	eax, edx
	sub	eax, esi
	sar	eax, 2
	push	eax
	call	??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z ; std::_Sort_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *)>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	eax, DWORD PTR [ebx+4]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 316  : 				for (u32 cs_id=0; cs_id<matCS.size(); cs_id++)

	xor	edx, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	ecx, DWORD PTR [ebx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7080 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

	add	esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	sub	eax, ecx
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 316  : 				for (u32 cs_id=0; cs_id<matCS.size(); cs_id++)

	mov	DWORD PTR _cs_id$1$[esp+60], edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	sar	eax, 2
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 316  : 				for (u32 cs_id=0; cs_id<matCS.size(); cs_id++)

	test	eax, eax
	je	$LN849@r_dsgraph_
	lea	ebp, DWORD PTR [edi+508]
	npad	3
$LL25@r_dsgraph_:

; 317  : 				{
; 318  : 					mapMatrixCS::TNode*	Ncs			= matCS[cs_id];

	mov	ebx, DWORD PTR [ecx+edx*4]

; 319  : 					RCache.set_Constants			(Ncs->key);

	mov	ecx, DWORD PTR __imp_?RCache@@3VCBackend@@A
	mov	DWORD PTR _Ncs$1$[esp+60], ebx
	push	DWORD PTR [ebx]
	call	DWORD PTR __imp_?set_Constants@CBackend@@QAEXPAVR_constant_table@@@Z
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h

; 231  : 		D.resize			(size());

	mov	esi, DWORD PTR [ebx+8]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 321  : 					mapMatrixStates&	states		= Ncs->val;		states.ssa	= 0;

	mov	DWORD PTR [ebx+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1250 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

	mov	edi, DWORD PTR [ebp+4]
	mov	ecx, edi
	mov	edx, DWORD PTR [ebp]
	sub	ecx, edx
	sar	ecx, 2

; 1251 :         if (_Newsize < _Oldsize) { // trim

	cmp	esi, ecx
	jae	SHORT $LN660@r_dsgraph_

; 1252 :             const pointer _Newlast = _Myfirst + _Newsize;

	lea	eax, DWORD PTR [edx+esi*4]

; 1253 :             _Orphan_range(_Newlast, _Mylast);
; 1254 :             _Destroy(_Newlast, _Mylast);
; 1255 :             _Mylast = _Newlast;
; 1256 :             return;

	jmp	SHORT $LN859@r_dsgraph_
$LN660@r_dsgraph_:

; 1257 :         }
; 1258 : 
; 1259 :         if (_Newsize > _Oldsize) { // append

	jbe	SHORT $LN661@r_dsgraph_

; 1260 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

	mov	eax, DWORD PTR [ebp+8]
	sub	eax, edx
	sar	eax, 2

; 1261 :             if (_Newsize > _Oldcapacity) { // reallocate

	cmp	esi, eax
	jbe	SHORT $LN662@r_dsgraph_

; 1262 :                 _Resize_reallocate(_Newsize, _Val);

	push	ecx
	push	esi
	mov	ecx, ebp
	call	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::_Resize_reallocate<std::_Value_init_tag>

; 1263 :                 return;

	jmp	SHORT $LN661@r_dsgraph_
$LN662@r_dsgraph_:

; 1264 :             }
; 1265 : 
; 1266 :             const pointer _Oldlast = _Mylast;
; 1267 :             _Mylast                = _Ufill(_Oldlast, _Newsize - _Oldsize, _Val);

	sub	esi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	shl	esi, 2

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	push	esi
	push	0
	push	edi
	call	_memset
	add	esp, 12					; 0000000cH

; 1808 :             return _First + _Count;

	lea	eax, DWORD PTR [edi+esi]
$LN859@r_dsgraph_:
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h

; 232  : 		TNode** _it			= &*D.begin();

	mov	DWORD PTR [ebp+4], eax
$LN661@r_dsgraph_:

; 201  : 	IC TNode*	end()		{ return nodes+pool;	}

	mov	eax, DWORD PTR [ebx+8]
	mov	edx, DWORD PTR [ebx+4]

; 232  : 		TNode** _it			= &*D.begin();

	mov	esi, DWORD PTR [ebp]

; 201  : 	IC TNode*	end()		{ return nodes+pool;	}

	lea	ecx, DWORD PTR [eax*8]
	sub	ecx, eax
	lea	eax, DWORD PTR [edx+ecx*4]

; 234  : 		for (TNode* cur = begin(); cur!=_end; cur++,_it++) *_it = cur;

	cmp	edx, eax
	je	SHORT $LN654@r_dsgraph_
	npad	2
$LL655@r_dsgraph_:
	mov	DWORD PTR [esi], edx
	lea	esi, DWORD PTR [esi+4]
	add	edx, 28					; 0000001cH
	cmp	edx, eax
	jne	SHORT $LL655@r_dsgraph_
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 345  : 					if(_clear) states.clear	();

	mov	esi, DWORD PTR [ebp]
$LN654@r_dsgraph_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7079 :     const auto _ULast  = _Get_unwrapped(_Last);

	mov	edi, DWORD PTR _this$1$[esp+60]

; 7080 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

	mov	ecx, esi
	push	OFFSET ?cmp_states_mat@@YA_NPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; cmp_states_mat
	mov	edx, DWORD PTR [edi+512]
	mov	eax, edx
	sub	eax, esi
	sar	eax, 2
	push	eax
	call	??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z ; std::_Sort_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *)>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	eax, DWORD PTR [ebp+4]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 324  : 					for (u32 state_id=0; state_id<matStates.size(); state_id++)

	xor	edx, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	ecx, DWORD PTR [ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7080 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

	add	esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	sub	eax, ecx
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 324  : 					for (u32 state_id=0; state_id<matStates.size(); state_id++)

	mov	DWORD PTR _state_id$1$[esp+60], edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	sar	eax, 2
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 324  : 					for (u32 state_id=0; state_id<matStates.size(); state_id++)

	test	eax, eax
	je	$LN850@r_dsgraph_
	mov	eax, edi
	lea	edi, DWORD PTR [eax+532]
	lea	ebx, DWORD PTR [eax+520]
	npad	9
$LL28@r_dsgraph_:

; 325  : 					{
; 326  : 						mapMatrixStates::TNode*	Nstate		= matStates[state_id];

	mov	esi, DWORD PTR [ecx+edx*4]

; 327  : 						RCache.set_States					(Nstate->key);

	mov	eax, DWORD PTR __imp_?RCache@@3VCBackend@@A
	mov	ecx, DWORD PTR [esi]
; File I:\Vitalya\mine\NSProjectX\xrEngine\R_Backend_Runtime.h

; 63   : 	if (state != _state)

	cmp	DWORD PTR [eax+8868], ecx
	je	SHORT $LN727@r_dsgraph_

; 64   : 	{
; 65   : 		PGO(Msg("PGO:state_block"));
; 66   : #ifdef DEBUG
; 67   : 		stat.states++;
; 68   : #endif
; 69   : 		state = _state;

	mov	DWORD PTR [eax+8868], ecx

; 70   : 		state->Apply();

	mov	eax, DWORD PTR [ecx]
	push	ecx
	call	DWORD PTR [eax+20]
$LN727@r_dsgraph_:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 329  : 						mapMatrixTextures&		tex			= Nstate->val;	tex.ssa =	0;

	lea	eax, DWORD PTR [esi+4]

; 330  : 						sort_tlist_mat						(matTextures,matTexturesTemp,tex,true);

	mov	edx, edi
	mov	DWORD PTR [eax+12], 0
	push	ecx
	push	eax
	mov	ecx, ebx
	mov	DWORD PTR _tex$1$[esp+68], eax
	call	?sort_tlist_mat@@YAXAAV?$xr_vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@@0AAUmapMatrixTextures@R_dsgraph@@H@Z ; sort_tlist_mat
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	eax, DWORD PTR [ebx+4]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 330  : 						sort_tlist_mat						(matTextures,matTexturesTemp,tex,true);

	add	esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	ecx, DWORD PTR [ebx]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 331  : 						for (u32 tex_id=0; tex_id<matTextures.size(); tex_id++)

	xor	edi, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	sub	eax, ecx
	sar	eax, 2
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 331  : 						for (u32 tex_id=0; tex_id<matTextures.size(); tex_id++)

	test	eax, eax
	je	SHORT $LN838@r_dsgraph_
	npad	6
$LL31@r_dsgraph_:

; 332  : 						{
; 333  : 							mapMatrixTextures::TNode*	Ntex	= matTextures[tex_id];

	mov	eax, DWORD PTR [ebx]

; 334  : 							RCache.set_Textures					(Ntex->key);

	mov	ecx, DWORD PTR __imp_?RCache@@3VCBackend@@A
	mov	esi, DWORD PTR [eax+edi*4]
	push	DWORD PTR [esi]
	call	DWORD PTR __imp_?set_Textures@CBackend@@QAEXPAUSTextureList@@@Z

; 335  : 							RImplementation.apply_lmaterial		();
; 336  : 
; 337  : 							mapMatrixItems&				items	= Ntex->val;		items.ssa	= 0;

	lea	ecx, DWORD PTR [esi+4]
	mov	DWORD PTR [ecx+12], 0

; 338  : 							mapMatrix_Render					(items);

	call	?mapMatrix_Render@@YIXAAUmapMatrixItems@R_dsgraph@@@Z ; mapMatrix_Render
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	eax, DWORD PTR [ebx+4]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 331  : 						for (u32 tex_id=0; tex_id<matTextures.size(); tex_id++)

	inc	edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	ecx, DWORD PTR [ebx]
	sub	eax, ecx
	sar	eax, 2
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 331  : 						for (u32 tex_id=0; tex_id<matTextures.size(); tex_id++)

	cmp	edi, eax
	jb	SHORT $LL31@r_dsgraph_
$LN838@r_dsgraph_:

; 339  : 						}
; 340  : 						matTextures.clear		();

	mov	esi, DWORD PTR _this$1$[esp+60]

; 341  : 						matTexturesTemp.clear	();

	mov	eax, DWORD PTR [esi+532]
	lea	edi, DWORD PTR [esi+532]
	mov	edx, DWORD PTR _state_id$1$[esp+60]
	mov	DWORD PTR [edi+4], eax
	inc	edx

; 342  : 						if(_clear) tex.clear	();

	mov	eax, DWORD PTR _tex$1$[esp+60]
	mov	DWORD PTR [esi+524], ecx
	mov	DWORD PTR _state_id$1$[esp+60], edx
	mov	DWORD PTR [eax+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	eax, DWORD PTR [ebp+4]
	mov	ecx, DWORD PTR [ebp]
	sub	eax, ecx
	sar	eax, 2
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 324  : 					for (u32 state_id=0; state_id<matStates.size(); state_id++)

	cmp	edx, eax
	jb	$LL28@r_dsgraph_
	mov	ebx, DWORD PTR _Ncs$1$[esp+60]
	jmp	SHORT $LN27@r_dsgraph_
$LN850@r_dsgraph_:
	mov	esi, edi
$LN27@r_dsgraph_:

; 316  : 				for (u32 cs_id=0; cs_id<matCS.size(); cs_id++)

	mov	edx, DWORD PTR _cs_id$1$[esp+60]

; 343  : 					}
; 344  : 					matStates.clear			();

	mov	DWORD PTR [esi+512], ecx
	inc	edx

; 345  : 					if(_clear) states.clear	();

	mov	DWORD PTR [ebx+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	lea	ebx, DWORD PTR [esi+496]
	mov	eax, DWORD PTR [ebx+4]
	mov	ecx, DWORD PTR [ebx]
	sub	eax, ecx
	sar	eax, 2
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 316  : 				for (u32 cs_id=0; cs_id<matCS.size(); cs_id++)

	mov	DWORD PTR _cs_id$1$[esp+60], edx
	cmp	edx, eax
	jb	$LL25@r_dsgraph_
	mov	ebp, DWORD PTR _Nps$1$[esp+60]
	jmp	SHORT $LN24@r_dsgraph_
$LN849@r_dsgraph_:
	mov	esi, edi
$LN24@r_dsgraph_:

; 308  : 			for (u32 ps_id=0; ps_id<matPS.size(); ps_id++)

	mov	edx, DWORD PTR _ps_id$1$[esp+60]

; 346  : 				}
; 347  : 				matCS.clear				();

	mov	DWORD PTR [esi+500], ecx
	inc	edx

; 348  : 				if(_clear) cs.clear		();

	mov	DWORD PTR [ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	lea	ebp, DWORD PTR [esi+484]
	mov	eax, DWORD PTR [ebp+4]
	mov	ecx, DWORD PTR [ebp]
	sub	eax, ecx
	sar	eax, 2
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 308  : 			for (u32 ps_id=0; ps_id<matPS.size(); ps_id++)

	mov	DWORD PTR _ps_id$1$[esp+60], edx
	cmp	edx, eax
	jb	$LL22@r_dsgraph_
	mov	ebx, DWORD PTR _Nvs$1$[esp+60]
	jmp	SHORT $LN21@r_dsgraph_
$LN848@r_dsgraph_:
	mov	esi, edi
$LN21@r_dsgraph_:

; 301  : 		for (u32 vs_id=0; vs_id<matVS.size(); vs_id++)	{

	mov	edx, DWORD PTR _vs_id$1$[esp+60]

; 349  : 			}
; 350  : 			matPS.clear				();

	mov	DWORD PTR [esi+488], ecx
	inc	edx

; 351  : 			if(_clear) ps.clear		();

	mov	DWORD PTR [ebx+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	eax, DWORD PTR [esi+476]
	mov	ecx, DWORD PTR [esi+472]
	sub	eax, ecx
	sar	eax, 2
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 301  : 		for (u32 vs_id=0; vs_id<matVS.size(); vs_id++)	{

	mov	DWORD PTR _vs_id$1$[esp+60], edx
	cmp	edx, eax
	jb	$LL19@r_dsgraph_
	mov	ebp, DWORD PTR tv5451[esp+56]
	jmp	SHORT $LN18@r_dsgraph_
$LN847@r_dsgraph_:
	mov	esi, edi
$LN18@r_dsgraph_:

; 352  : 		}
; 353  : 		matVS.clear				();

	mov	DWORD PTR [esi+476], ecx

; 354  : 		if(_clear) vs.clear		();

	mov	DWORD PTR [esi+ebp*4+332], 0

; 355  : 	}
; 356  : 
; 357  : 	Device.Statistic->RenderDUMP.End	();

	mov	eax, DWORD PTR __imp_?Device@@3VCRenderDevice@@A
	mov	esi, DWORD PTR [eax+436]
; File I:\Vitalya\mine\NSProjectX\xrCore\FTimer.h

; 174  : 	ICF void	End				()		{	if (!g_bEnableStatGather) return;	accum += T.GetElapsed_ticks();	}

	mov	eax, DWORD PTR __imp_?g_bEnableStatGather@@3HA
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN750@r_dsgraph_
	lea	ecx, DWORD PTR [esi+1512]
	call	DWORD PTR __imp_?GetElapsed_ticks@CTimer@@QBE_KXZ
	add	DWORD PTR [esi+1568], eax
	adc	DWORD PTR [esi+1572], edx
$LN750@r_dsgraph_:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 358  : }

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 44					; 0000002cH
	ret	8
?r_dsgraph_render_graph@R_dsgraph_structure@@QAEXI_N@Z ENDP ; R_dsgraph_structure::r_dsgraph_render_graph
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
_TEXT	SEGMENT
_Pold$ = -128						; size = 64
_FTold$ = -64						; size = 64
?r_dsgraph_render_hud@R_dsgraph_structure@@QAEXXZ PROC	; R_dsgraph_structure::r_dsgraph_render_hud
; _this$ = ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 398  : 		return build_projection_HAT		(tanf(fFOV/2.f),fAspect,fNearPlane,fFarPlane);

	mov	eax, DWORD PTR __imp_?g_pGamePersistent@@3PAVIGame_Persistent@@A
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 363  : {

	sub	esp, 128				; 00000080H

; 367  : 	Fmatrix Pold				= Device.mProject;

	mov	edx, DWORD PTR __imp_?Device@@3VCRenderDevice@@A
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 398  : 		return build_projection_HAT		(tanf(fFOV/2.f),fAspect,fNearPlane,fFarPlane);

	mov	eax, DWORD PTR [eax]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 363  : {

	push	ebx
	push	ebp
	push	esi
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 398  : 		return build_projection_HAT		(tanf(fFOV/2.f),fAspect,fNearPlane,fFarPlane);

	mov	eax, DWORD PTR [eax+1116]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 367  : 	Fmatrix Pold				= Device.mProject;

	lea	esi, DWORD PTR [edx+600]
	push	edi
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 398  : 		return build_projection_HAT		(tanf(fFOV/2.f),fAspect,fNearPlane,fFarPlane);

	sub	esp, 16					; 00000010H
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 367  : 	Fmatrix Pold				= Device.mProject;

	lea	edi, DWORD PTR _Pold$[esp+160]
	mov	ebp, ecx
	mov	ecx, 16					; 00000010H
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 398  : 		return build_projection_HAT		(tanf(fFOV/2.f),fAspect,fNearPlane,fFarPlane);

	mov	eax, DWORD PTR [eax+440]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 367  : 	Fmatrix Pold				= Device.mProject;

	rep movsd
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 398  : 		return build_projection_HAT		(tanf(fFOV/2.f),fAspect,fNearPlane,fFarPlane);

	fld	DWORD PTR [eax+64]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 368  : 	Fmatrix FTold				= Device.mFullTransform;

	lea	esi, DWORD PTR [edx+664]

; 369  : 	Device.mProject.build_projection(

	mov	eax, DWORD PTR __imp_?psHUD_FOV@@3MA
	mov	ecx, 16					; 00000010H
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 398  : 		return build_projection_HAT		(tanf(fFOV/2.f),fAspect,fNearPlane,fFarPlane);

	fstp	DWORD PTR [esp+12]
	fld	DWORD PTR __real@3e4ccccd
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 368  : 	Fmatrix FTold				= Device.mFullTransform;

	lea	edi, DWORD PTR _FTold$[esp+160]
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 398  : 		return build_projection_HAT		(tanf(fFOV/2.f),fAspect,fNearPlane,fFarPlane);

	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR [edx+796]
	fstp	DWORD PTR [esp+4]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 369  : 	Device.mProject.build_projection(

	fld	DWORD PTR [edx+792]
	fmul	DWORD PTR [eax]
	rep movsd
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 398  : 		return build_projection_HAT		(tanf(fFOV/2.f),fAspect,fNearPlane,fFarPlane);

	fmul	DWORD PTR __real@3c0efa36
	lea	ecx, DWORD PTR [edx+600]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 769  :             return (float)tan(_X);

	fptan
	fstp	ST(0)
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 398  : 		return build_projection_HAT		(tanf(fFOV/2.f),fAspect,fNearPlane,fFarPlane);

	fstp	DWORD PTR [esp]
	call	?build_projection_HAT@?$_matrix@M@@QAEAAU1@MMMM@Z ; _matrix<float>::build_projection_HAT
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 374  : 	Device.mFullTransform.mul	(Device.mProject, Device.mView);

	mov	eax, DWORD PTR __imp_?Device@@3VCRenderDevice@@A
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 85   : 		m[0][0] = A.m[0][0] * B.m[0][0] + A.m[1][0] * B.m[0][1] + A.m[2][0] * B.m[0][2] + A.m[3][0] * B.m[0][3];

	movss	xmm2, DWORD PTR [eax+600]
	mulss	xmm2, DWORD PTR [eax+536]
	movss	xmm0, DWORD PTR [eax+540]
	mulss	xmm0, DWORD PTR [eax+616]
	movss	xmm1, DWORD PTR [eax+544]
	mulss	xmm1, DWORD PTR [eax+632]
	addss	xmm2, xmm0
	movss	xmm0, DWORD PTR [eax+548]
	mulss	xmm0, DWORD PTR [eax+648]
	addss	xmm1, xmm0
	addss	xmm2, xmm1
	movss	DWORD PTR [eax+664], xmm2

; 86   : 		m[0][1] = A.m[0][1] * B.m[0][0] + A.m[1][1] * B.m[0][1] + A.m[2][1] * B.m[0][2] + A.m[3][1] * B.m[0][3];

	movss	xmm2, DWORD PTR [eax+544]
	mulss	xmm2, DWORD PTR [eax+636]
	movss	xmm0, DWORD PTR [eax+548]
	mulss	xmm0, DWORD PTR [eax+652]
	movss	xmm1, DWORD PTR [eax+620]
	mulss	xmm1, DWORD PTR [eax+540]
	addss	xmm2, xmm0
	movss	xmm0, DWORD PTR [eax+604]
	mulss	xmm0, DWORD PTR [eax+536]
	addss	xmm1, xmm0
	addss	xmm2, xmm1
	movss	DWORD PTR [eax+668], xmm2

; 87   : 		m[0][2] = A.m[0][2] * B.m[0][0] + A.m[1][2] * B.m[0][1] + A.m[2][2] * B.m[0][2] + A.m[3][2] * B.m[0][3];

	movss	xmm2, DWORD PTR [eax+540]
	mulss	xmm2, DWORD PTR [eax+624]
	movss	xmm0, DWORD PTR [eax+536]
	mulss	xmm0, DWORD PTR [eax+608]
	movss	xmm1, DWORD PTR [eax+548]
	mulss	xmm1, DWORD PTR [eax+656]
	addss	xmm2, xmm0
	movss	xmm0, DWORD PTR [eax+544]
	mulss	xmm0, DWORD PTR [eax+640]
	addss	xmm1, xmm0
	addss	xmm2, xmm1
	movss	DWORD PTR [eax+672], xmm2

; 88   : 		m[0][3] = A.m[0][3] * B.m[0][0] + A.m[1][3] * B.m[0][1] + A.m[2][3] * B.m[0][2] + A.m[3][3] * B.m[0][3];

	movss	xmm0, DWORD PTR [eax+660]
	movss	xmm2, DWORD PTR [eax+544]
	mulss	xmm0, DWORD PTR [eax+548]
	mulss	xmm2, DWORD PTR [eax+644]
	movss	xmm1, DWORD PTR [eax+540]
	mulss	xmm1, DWORD PTR [eax+628]
	addss	xmm2, xmm0
	movss	xmm0, DWORD PTR [eax+536]
	mulss	xmm0, DWORD PTR [eax+612]
	addss	xmm1, xmm0
	addss	xmm2, xmm1
	movss	DWORD PTR [eax+676], xmm2

; 89   : 
; 90   : 		m[1][0] = A.m[0][0] * B.m[1][0] + A.m[1][0] * B.m[1][1] + A.m[2][0] * B.m[1][2] + A.m[3][0] * B.m[1][3];

	movss	xmm2, DWORD PTR [eax+560]
	mulss	xmm2, DWORD PTR [eax+632]
	movss	xmm0, DWORD PTR [eax+648]
	mulss	xmm0, DWORD PTR [eax+564]
	movss	xmm1, DWORD PTR [eax+600]
	mulss	xmm1, DWORD PTR [eax+552]
	addss	xmm2, xmm0
	movss	xmm0, DWORD PTR [eax+556]
	mulss	xmm0, DWORD PTR [eax+616]
	addss	xmm1, xmm0
	addss	xmm2, xmm1
	movss	DWORD PTR [eax+680], xmm2

; 91   : 		m[1][1] = A.m[0][1] * B.m[1][0] + A.m[1][1] * B.m[1][1] + A.m[2][1] * B.m[1][2] + A.m[3][1] * B.m[1][3];

	movss	xmm2, DWORD PTR [eax+620]
	mulss	xmm2, DWORD PTR [eax+556]
	movss	xmm0, DWORD PTR [eax+604]
	mulss	xmm0, DWORD PTR [eax+552]
	movss	xmm1, DWORD PTR [eax+560]
	mulss	xmm1, DWORD PTR [eax+636]
	addss	xmm2, xmm0
	movss	xmm0, DWORD PTR [eax+652]
	mulss	xmm0, DWORD PTR [eax+564]
	addss	xmm1, xmm0
	addss	xmm2, xmm1
	movss	DWORD PTR [eax+684], xmm2

; 92   : 		m[1][2] = A.m[0][2] * B.m[1][0] + A.m[1][2] * B.m[1][1] + A.m[2][2] * B.m[1][2] + A.m[3][2] * B.m[1][3];

	movss	xmm2, DWORD PTR [eax+556]
	mulss	xmm2, DWORD PTR [eax+624]
	movss	xmm0, DWORD PTR [eax+552]
	mulss	xmm0, DWORD PTR [eax+608]
	movss	xmm1, DWORD PTR [eax+656]
	mulss	xmm1, DWORD PTR [eax+564]
	addss	xmm2, xmm0
	movss	xmm0, DWORD PTR [eax+560]
	mulss	xmm0, DWORD PTR [eax+640]
	addss	xmm1, xmm0
	addss	xmm2, xmm1
	movss	DWORD PTR [eax+688], xmm2

; 93   : 		m[1][3] = A.m[0][3] * B.m[1][0] + A.m[1][3] * B.m[1][1] + A.m[2][3] * B.m[1][2] + A.m[3][3] * B.m[1][3];

	movss	xmm2, DWORD PTR [eax+660]
	mulss	xmm2, DWORD PTR [eax+564]
	movss	xmm0, DWORD PTR [eax+560]
	mulss	xmm0, DWORD PTR [eax+644]
	movss	xmm1, DWORD PTR [eax+556]
	mulss	xmm1, DWORD PTR [eax+628]
	addss	xmm2, xmm0
	movss	xmm0, DWORD PTR [eax+552]
	mulss	xmm0, DWORD PTR [eax+612]
	addss	xmm1, xmm0
	addss	xmm2, xmm1
	movss	DWORD PTR [eax+692], xmm2

; 94   : 
; 95   : 		m[2][0] = A.m[0][0] * B.m[2][0] + A.m[1][0] * B.m[2][1] + A.m[2][0] * B.m[2][2] + A.m[3][0] * B.m[2][3];

	movss	xmm2, DWORD PTR [eax+576]
	mulss	xmm2, DWORD PTR [eax+632]
	movss	xmm0, DWORD PTR [eax+648]
	mulss	xmm0, DWORD PTR [eax+580]
	movss	xmm1, DWORD PTR [eax+600]
	mulss	xmm1, DWORD PTR [eax+568]
	addss	xmm2, xmm0
	movss	xmm0, DWORD PTR [eax+572]
	mulss	xmm0, DWORD PTR [eax+616]
	addss	xmm1, xmm0
	addss	xmm2, xmm1
	movss	DWORD PTR [eax+696], xmm2

; 96   : 		m[2][1] = A.m[0][1] * B.m[2][0] + A.m[1][1] * B.m[2][1] + A.m[2][1] * B.m[2][2] + A.m[3][1] * B.m[2][3];

	movss	xmm2, DWORD PTR [eax+620]
	mulss	xmm2, DWORD PTR [eax+572]
	movss	xmm0, DWORD PTR [eax+604]
	mulss	xmm0, DWORD PTR [eax+568]
	movss	xmm1, DWORD PTR [eax+576]
	mulss	xmm1, DWORD PTR [eax+636]
	addss	xmm2, xmm0
	movss	xmm0, DWORD PTR [eax+652]
	mulss	xmm0, DWORD PTR [eax+580]
	addss	xmm1, xmm0
	addss	xmm2, xmm1
	movss	DWORD PTR [eax+700], xmm2

; 97   : 		m[2][2] = A.m[0][2] * B.m[2][0] + A.m[1][2] * B.m[2][1] + A.m[2][2] * B.m[2][2] + A.m[3][2] * B.m[2][3];

	movss	xmm2, DWORD PTR [eax+568]
	movss	xmm0, DWORD PTR [eax+572]
	mulss	xmm2, DWORD PTR [eax+608]
	mulss	xmm0, DWORD PTR [eax+624]
	movss	xmm1, DWORD PTR [eax+656]
	addss	xmm2, xmm0
	mulss	xmm1, DWORD PTR [eax+580]
	movss	xmm0, DWORD PTR [eax+576]
	mulss	xmm0, DWORD PTR [eax+640]
	addss	xmm1, xmm0
	addss	xmm2, xmm1
	movss	DWORD PTR [eax+704], xmm2

; 98   : 		m[2][3] = A.m[0][3] * B.m[2][0] + A.m[1][3] * B.m[2][1] + A.m[2][3] * B.m[2][2] + A.m[3][3] * B.m[2][3];

	movss	xmm2, DWORD PTR [eax+660]
	mulss	xmm2, DWORD PTR [eax+580]
	movss	xmm0, DWORD PTR [eax+576]
	mulss	xmm0, DWORD PTR [eax+644]
	movss	xmm1, DWORD PTR [eax+572]
	mulss	xmm1, DWORD PTR [eax+628]
	addss	xmm2, xmm0
	movss	xmm0, DWORD PTR [eax+568]
	mulss	xmm0, DWORD PTR [eax+612]
	addss	xmm1, xmm0
	addss	xmm2, xmm1
	movss	DWORD PTR [eax+708], xmm2

; 99   : 
; 100  : 		m[3][0] = A.m[0][0] * B.m[3][0] + A.m[1][0] * B.m[3][1] + A.m[2][0] * B.m[3][2] + A.m[3][0] * B.m[3][3];

	movss	xmm2, DWORD PTR [eax+592]
	mulss	xmm2, DWORD PTR [eax+632]
	movss	xmm0, DWORD PTR [eax+648]
	mulss	xmm0, DWORD PTR [eax+596]
	movss	xmm1, DWORD PTR [eax+600]
	mulss	xmm1, DWORD PTR [eax+584]
	addss	xmm2, xmm0
	movss	xmm0, DWORD PTR [eax+588]
	mulss	xmm0, DWORD PTR [eax+616]
	addss	xmm1, xmm0
	addss	xmm2, xmm1
	movss	DWORD PTR [eax+712], xmm2

; 101  : 		m[3][1] = A.m[0][1] * B.m[3][0] + A.m[1][1] * B.m[3][1] + A.m[2][1] * B.m[3][2] + A.m[3][1] * B.m[3][3];

	movss	xmm2, DWORD PTR [eax+592]
	mulss	xmm2, DWORD PTR [eax+636]
	movss	xmm0, DWORD PTR [eax+596]
	mulss	xmm0, DWORD PTR [eax+652]
	movss	xmm1, DWORD PTR [eax+604]
	mulss	xmm1, DWORD PTR [eax+584]
	addss	xmm2, xmm0
	movss	xmm0, DWORD PTR [eax+620]
	mulss	xmm0, DWORD PTR [eax+588]
	addss	xmm1, xmm0
	addss	xmm2, xmm1
	movss	DWORD PTR [eax+716], xmm2

; 102  : 		m[3][2] = A.m[0][2] * B.m[3][0] + A.m[1][2] * B.m[3][1] + A.m[2][2] * B.m[3][2] + A.m[3][2] * B.m[3][3];

	movss	xmm2, DWORD PTR [eax+588]
	mulss	xmm2, DWORD PTR [eax+624]
	movss	xmm0, DWORD PTR [eax+584]
	mulss	xmm0, DWORD PTR [eax+608]
	movss	xmm1, DWORD PTR [eax+656]
	mulss	xmm1, DWORD PTR [eax+596]
	addss	xmm2, xmm0
	movss	xmm0, DWORD PTR [eax+592]
	mulss	xmm0, DWORD PTR [eax+640]
	addss	xmm1, xmm0
	addss	xmm2, xmm1
	movss	DWORD PTR [eax+720], xmm2

; 103  : 		m[3][3] = A.m[0][3] * B.m[3][0] + A.m[1][3] * B.m[3][1] + A.m[2][3] * B.m[3][2] + A.m[3][3] * B.m[3][3];

	movss	xmm0, DWORD PTR [eax+592]
	movss	xmm2, DWORD PTR [eax+660]
	mulss	xmm0, DWORD PTR [eax+644]
	mulss	xmm2, DWORD PTR [eax+596]
	movss	xmm1, DWORD PTR [eax+612]
	mulss	xmm1, DWORD PTR [eax+584]
	addss	xmm2, xmm0
	movss	xmm0, DWORD PTR [eax+588]
	mulss	xmm0, DWORD PTR [eax+628]
	addss	xmm1, xmm0
	addss	xmm2, xmm1
	movss	DWORD PTR [eax+724], xmm2
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 375  : 	RCache.set_xform_project	(Device.mProject);

	mov	eax, DWORD PTR __imp_?Device@@3VCRenderDevice@@A
	mov	ecx, DWORD PTR __imp_?RCache@@3VCBackend@@A
	add	eax, 600				; 00000258H
	push	eax
	call	DWORD PTR __imp_?set_xform_project@CBackend@@QAEXABU?$_matrix@M@@@Z

; 376  : 
; 377  : 	// Rendering
; 378  : 	rmNear						();

	mov	eax, DWORD PTR [ebp]
	mov	ecx, ebp
	call	DWORD PTR [eax+212]
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h

; 207  : 	{ if (pool) recurseLR(nodes,CB);  }

	cmp	DWORD PTR [ebp+368], 0
	je	SHORT $LN23@r_dsgraph_
	mov	esi, DWORD PTR [ebp+364]

; 77   : 		if (N->left)	recurseLR(N->left,CB);

	mov	eax, DWORD PTR [esi+84]
	test	eax, eax
	je	SHORT $LN22@r_dsgraph_
	push	ecx
	push	eax
	lea	ecx, DWORD PTR [ebp+364]
	call	?recurseLR@?$FixedMAP@MU_MatrixItemS@R_dsgraph@@Udoug_lea_allocator@@@@AAEXPAUTNode@1@P6IX0@Z@Z ; FixedMAP<float,R_dsgraph::_MatrixItemS,doug_lea_allocator>::recurseLR
$LN22@r_dsgraph_:

; 78   : 		CB(N);

	mov	ecx, esi
	call	?sorted_L1@@YIXPAUTNode@?$FixedMAP@MU_MatrixItemS@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; sorted_L1

; 79   : 		if (N->right)	recurseLR(N->right,CB);

	mov	eax, DWORD PTR [esi+88]
	test	eax, eax
	je	SHORT $LN23@r_dsgraph_
	push	ecx
	push	eax
	lea	ecx, DWORD PTR [ebp+364]
	call	?recurseLR@?$FixedMAP@MU_MatrixItemS@R_dsgraph@@Udoug_lea_allocator@@@@AAEXPAUTNode@1@P6IX0@Z@Z ; FixedMAP<float,R_dsgraph::_MatrixItemS,doug_lea_allocator>::recurseLR
$LN23@r_dsgraph_:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 381  : 	rmNormal					();

	mov	eax, DWORD PTR [ebp]
	mov	ecx, ebp
	mov	DWORD PTR [ebp+368], 0
	call	DWORD PTR [eax+220]

; 382  : 
; 383  : 	// Restore projection
; 384  : 	Device.mProject				= Pold;

	mov	edi, DWORD PTR __imp_?Device@@3VCRenderDevice@@A
	lea	esi, DWORD PTR _Pold$[esp+144]
	add	edi, 600				; 00000258H
	mov	ecx, 16					; 00000010H
	rep movsd

; 385  : 	Device.mFullTransform		= FTold;

	mov	edi, DWORD PTR __imp_?Device@@3VCRenderDevice@@A
	lea	esi, DWORD PTR _FTold$[esp+144]
	add	edi, 664				; 00000298H
	mov	ecx, 16					; 00000010H
	rep movsd

; 386  : 	RCache.set_xform_project	(Device.mProject);

	mov	eax, DWORD PTR __imp_?Device@@3VCRenderDevice@@A
	mov	ecx, DWORD PTR __imp_?RCache@@3VCBackend@@A
	add	eax, 600				; 00000258H
	push	eax
	call	DWORD PTR __imp_?set_xform_project@CBackend@@QAEXABU?$_matrix@M@@@Z
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 387  : }

	add	esp, 128				; 00000080H
	ret	0
?r_dsgraph_render_hud@R_dsgraph_structure@@QAEXXZ ENDP	; R_dsgraph_structure::r_dsgraph_render_hud
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
_TEXT	SEGMENT
?r_dsgraph_render_sorted@R_dsgraph_structure@@QAEXXZ PROC ; R_dsgraph_structure::r_dsgraph_render_sorted
; _this$ = ecx

; 392  : {

	push	esi
	mov	esi, ecx
	push	edi
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h

; 209  : 	{ if (pool) recurseRL(nodes,CB);  }

	cmp	DWORD PTR [esi+356], 0
	je	SHORT $LN67@r_dsgraph_
	push	ebx
	mov	ebx, DWORD PTR [esi+352]

; 83   : 		if (N->right)	recurseRL(N->right,CB);

	mov	eax, DWORD PTR [ebx+88]
	test	eax, eax
	je	SHORT $LN7@r_dsgraph_
	push	ecx
	push	eax
	lea	ecx, DWORD PTR [esi+352]
	call	?recurseRL@?$FixedMAP@MU_MatrixItemS@R_dsgraph@@Udoug_lea_allocator@@@@AAEXPAUTNode@1@P6IX0@Z@Z ; FixedMAP<float,R_dsgraph::_MatrixItemS,doug_lea_allocator>::recurseRL
$LN7@r_dsgraph_:

; 84   : 		CB(N);

	mov	ecx, ebx
	call	?sorted_L1@@YIXPAUTNode@?$FixedMAP@MU_MatrixItemS@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; sorted_L1

; 85   : 		if (N->left)	recurseRL(N->left,CB);

	mov	eax, DWORD PTR [ebx+84]
	pop	ebx
	test	eax, eax
	je	SHORT $LN67@r_dsgraph_
	push	ecx
	push	eax
	lea	ecx, DWORD PTR [esi+352]
	call	?recurseRL@?$FixedMAP@MU_MatrixItemS@R_dsgraph@@Udoug_lea_allocator@@@@AAEXPAUTNode@1@P6IX0@Z@Z ; FixedMAP<float,R_dsgraph::_MatrixItemS,doug_lea_allocator>::recurseRL
$LN67@r_dsgraph_:
	pop	edi
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 396  : }

	mov	DWORD PTR [esi+356], 0
	pop	esi
	ret	0
?r_dsgraph_render_sorted@R_dsgraph_structure@@QAEXXZ ENDP ; R_dsgraph_structure::r_dsgraph_render_sorted
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
_TEXT	SEGMENT
?r_dsgraph_render_wmarks@R_dsgraph_structure@@QAEXXZ PROC ; R_dsgraph_structure::r_dsgraph_render_wmarks
; _this$dead$ = ecx

; 413  : #if	RENDER==R_R2
; 414  : 	// Sorted (back to front)
; 415  : 	mapWmark.traverseLR	(sorted_L1);
; 416  : 	mapWmark.clear		();
; 417  : #endif
; 418  : }

	ret	0
?r_dsgraph_render_wmarks@R_dsgraph_structure@@QAEXXZ ENDP ; R_dsgraph_structure::r_dsgraph_render_wmarks
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
_TEXT	SEGMENT
?r_dsgraph_render_distort@R_dsgraph_structure@@QAEXXZ PROC ; R_dsgraph_structure::r_dsgraph_render_distort
; _this$dead$ = ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h

; 209  : 	{ if (pool) recurseRL(nodes,CB);  }

	cmp	DWORD PTR ?RImplementation@@3VCRender@@A+392, 0
	je	SHORT $LN67@r_dsgraph_
	push	esi
	mov	esi, DWORD PTR ?RImplementation@@3VCRender@@A+388

; 83   : 		if (N->right)	recurseRL(N->right,CB);

	mov	eax, DWORD PTR [esi+88]
	test	eax, eax
	je	SHORT $LN7@r_dsgraph_
	push	ecx
	push	eax
	mov	ecx, OFFSET ?RImplementation@@3VCRender@@A+388
	call	?recurseRL@?$FixedMAP@MU_MatrixItemS@R_dsgraph@@Udoug_lea_allocator@@@@AAEXPAUTNode@1@P6IX0@Z@Z ; FixedMAP<float,R_dsgraph::_MatrixItemS,doug_lea_allocator>::recurseRL
$LN7@r_dsgraph_:

; 84   : 		CB(N);

	mov	ecx, esi
	call	?sorted_L1@@YIXPAUTNode@?$FixedMAP@MU_MatrixItemS@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; sorted_L1

; 85   : 		if (N->left)	recurseRL(N->left,CB);

	mov	eax, DWORD PTR [esi+84]
	pop	esi
	test	eax, eax
	je	SHORT $LN67@r_dsgraph_
	push	ecx
	push	eax
	mov	ecx, OFFSET ?RImplementation@@3VCRender@@A+388
	call	?recurseRL@?$FixedMAP@MU_MatrixItemS@R_dsgraph@@Udoug_lea_allocator@@@@AAEXPAUTNode@1@P6IX0@Z@Z ; FixedMAP<float,R_dsgraph::_MatrixItemS,doug_lea_allocator>::recurseRL
$LN67@r_dsgraph_:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 427  : }

	mov	DWORD PTR ?RImplementation@@3VCRender@@A+392, 0
	ret	0
?r_dsgraph_render_distort@R_dsgraph_structure@@QAEXXZ ENDP ; R_dsgraph_structure::r_dsgraph_render_distort
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
_TEXT	SEGMENT
_temp$ = -248						; size = 244
__sector$ = 8						; size = 4
_mCombined$ = 12					; size = 4
__cop$ = 16						; size = 4
__dynamic$dead$ = 20					; size = 4
__precise_portals$ = 24					; size = 4
?r_dsgraph_render_subspace@R_dsgraph_structure@@QAEXPAVIRender_Sector@@AAU?$_matrix@M@@AAU?$_vector3@M@@HH@Z PROC ; R_dsgraph_structure::r_dsgraph_render_subspace
; _this$ = ecx

; 432  : {

	sub	esp, 252				; 000000fcH
	push	edi

; 433  : 	CFrustum	temp;
; 434  : 	temp.CreateFromMatrix			(mCombined,	FRUSTUM_P_ALL);

	push	63					; 0000003fH
	push	DWORD PTR _mCombined$[esp+256]
	mov	edi, ecx
	lea	ecx, DWORD PTR _temp$[esp+264]
	call	DWORD PTR __imp_?CreateFromMatrix@CFrustum@@QAEXAAU?$_matrix@M@@I@Z

; 435  : 	r_dsgraph_render_subspace		(_sector,&temp,mCombined,_cop,_dynamic,_precise_portals);

	push	DWORD PTR __precise_portals$[esp+252]
	lea	eax, DWORD PTR _temp$[esp+260]
	push	ecx
	push	DWORD PTR __cop$[esp+260]
	mov	ecx, edi
	push	DWORD PTR _mCombined$[esp+264]
	push	eax
	push	DWORD PTR __sector$[esp+272]
	call	?r_dsgraph_render_subspace@R_dsgraph_structure@@QAEXPAVIRender_Sector@@PAVCFrustum@@AAU?$_matrix@M@@AAU?$_vector3@M@@HH@Z ; R_dsgraph_structure::r_dsgraph_render_subspace

; 436  : }

	pop	edi
	add	esp, 252				; 000000fcH
	ret	20					; 00000014H
?r_dsgraph_render_subspace@R_dsgraph_structure@@QAEXPAVIRender_Sector@@AAU?$_matrix@M@@AAU?$_vector3@M@@HH@Z ENDP ; R_dsgraph_structure::r_dsgraph_render_subspace
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCDB\xrCDB.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCDB\xrCDB.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File I:\Vitalya\mine\NSProjectX\xrCDB\xrCDB.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrEngine\render.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrEngine\render.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrEngine\render.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
_TEXT	SEGMENT
_v_it$1$ = -272						; size = 4
_this$1$ = -272						; size = 4
tv1822 = -268						; size = 4
_o_it$1$ = -268						; size = 4
_root$1$ = -268						; size = 4
tv1804 = -264						; size = 4
_s_it$1$ = -264						; size = 4
_box_radius$1 = -260					; size = 12
_ViewSave$ = -248					; size = 244
__sector$ = 8						; size = 4
__frustum$ = 12						; size = 4
_mCombined$ = 16					; size = 4
__cop$ = 20						; size = 4
__dynamic$dead$ = 24					; size = 4
__precise_portals$ = 28					; size = 4
?r_dsgraph_render_subspace@R_dsgraph_structure@@QAEXPAVIRender_Sector@@PAVCFrustum@@AAU?$_matrix@M@@AAU?$_vector3@M@@HH@Z PROC ; R_dsgraph_structure::r_dsgraph_render_subspace
; _this$ = ecx

; 440  : {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 276				; 00000114H

; 441  : 	VERIFY							(_sector);
; 442  : 	RImplementation.marker			++;			// !!! critical here

	inc	DWORD PTR ?RImplementation@@3VCRender@@A+296

; 443  : 
; 444  : 	// Save and build new frustum, disable HOM
; 445  : 	CFrustum	ViewSave			= ViewBase;
; 446  : 	ViewBase						= *_frustum;
; 447  : 	View							= &ViewBase;
; 448  : 
; 449  : 	if (_precise_portals && RImplementation.rmPortals)		{

	cmp	DWORD PTR __precise_portals$[ebp], 0
	push	ebx
	mov	ebx, ecx
	mov	ecx, 61					; 0000003dH
	push	esi
	push	edi
	lea	edi, DWORD PTR _ViewSave$[esp+288]
	mov	DWORD PTR _this$1$[esp+288], ebx
	lea	edx, DWORD PTR [ebx+8]
	mov	esi, edx
	mov	DWORD PTR tv1822[esp+288], edx
	rep movsd
	mov	esi, DWORD PTR __frustum$[ebp]
	mov	ecx, 61					; 0000003dH
	mov	edi, edx
	rep movsd
	mov	esi, DWORD PTR __cop$[ebp]
	mov	DWORD PTR [ebx+252], edx
	je	$LN6@r_dsgraph_
	mov	eax, DWORD PTR ?RImplementation@@3VCRender@@A+708
	test	eax, eax
	je	$LN6@r_dsgraph_

; 453  : 		RImplementation.Sectors_xrc.box_query	(RImplementation.rmPortals,_cop,box_radius);

	lea	ecx, DWORD PTR _box_radius$1[esp+288]
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	mov	DWORD PTR _box_radius$1[esp+288], 1017370379 ; 3ca3d70bH
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 453  : 		RImplementation.Sectors_xrc.box_query	(RImplementation.rmPortals,_cop,box_radius);

	push	ecx
	push	esi
	push	eax
	mov	ecx, OFFSET ?RImplementation@@3VCRender@@A+684
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	mov	DWORD PTR _box_radius$1[esp+304], 1017370379 ; 3ca3d70bH
	mov	DWORD PTR _box_radius$1[esp+308], 1017370379 ; 3ca3d70bH
; File I:\Vitalya\mine\NSProjectX\xrCDB\xrCDB.h

; 148  : 		ICF void		box_options		(u32 f)	{	box_mode = f;		}

	mov	DWORD PTR ?RImplementation@@3VCRender@@A+688, 8
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 453  : 		RImplementation.Sectors_xrc.box_query	(RImplementation.rmPortals,_cop,box_radius);

	call	DWORD PTR __imp_?box_query@xrXRC@@QAEXPBVMODEL@CDB@@ABU?$_vector3@M@@1@Z
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	eax, DWORD PTR ?RImplementation@@3VCRender@@A+700
	sub	eax, DWORD PTR ?RImplementation@@3VCRender@@A+696
	sar	eax, 3
	imul	eax, eax, -1227133513
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 454  : 		for (int K=0; K<RImplementation.Sectors_xrc.r_count(); K++)

	test	eax, eax
	jle	SHORT $LN327@r_dsgraph_
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	xor	edi, edi
	xor	ebx, ebx
	npad	5
$LL7@r_dsgraph_:
; File I:\Vitalya\mine\NSProjectX\xrCDB\xrCDB.h

; 86   : 		IC TRI*					get_tris		()			{ return tris;		}

	mov	eax, DWORD PTR ?RImplementation@@3VCRender@@A+708
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 456  : 			CPortal*	pPortal		= (CPortal*) RImplementation.Portals[RImplementation.rmPortals->get_tris()[RImplementation.Sectors_xrc.r_begin()[K].id].dummy];

	mov	ecx, OFFSET ?RImplementation@@3VCRender@@A+684
; File I:\Vitalya\mine\NSProjectX\xrCDB\xrCDB.h

; 86   : 		IC TRI*					get_tris		()			{ return tris;		}

	mov	esi, DWORD PTR [eax+12]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 456  : 			CPortal*	pPortal		= (CPortal*) RImplementation.Portals[RImplementation.rmPortals->get_tris()[RImplementation.Sectors_xrc.r_begin()[K].id].dummy];

	call	DWORD PTR __imp_?r_begin@xrXRC@@QAEPAURESULT@CDB@@XZ
	inc	ebx
	lea	edi, DWORD PTR [edi+56]
	mov	eax, DWORD PTR [eax+edi-16]
	add	eax, eax
	mov	ecx, DWORD PTR [esi+eax*8+12]

; 457  : 			pPortal->bDualRender	= TRUE;

	mov	eax, DWORD PTR ?RImplementation@@3VCRender@@A+660
	mov	eax, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR [eax+148], 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	eax, DWORD PTR ?RImplementation@@3VCRender@@A+700
	sub	eax, DWORD PTR ?RImplementation@@3VCRender@@A+696
	sar	eax, 3
	imul	eax, eax, -1227133513
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 454  : 		for (int K=0; K<RImplementation.Sectors_xrc.r_count(); K++)

	cmp	ebx, eax
	jl	SHORT $LL7@r_dsgraph_
	mov	ebx, DWORD PTR _this$1$[esp+288]
	mov	esi, DWORD PTR __cop$[ebp]
	mov	edx, DWORD PTR tv1822[esp+288]
	jmp	SHORT $LN6@r_dsgraph_
$LN327@r_dsgraph_:
	lea	edx, DWORD PTR [ebx+8]
$LN6@r_dsgraph_:

; 458  : 		}
; 459  : 	}
; 460  : 
; 461  : 	// Traverse sector/portal structure
; 462  : 	PortalTraverser.traverse		( _sector, ViewBase, _cop, mCombined, 0 );

	push	0
	push	DWORD PTR _mCombined$[ebp]
	mov	ecx, OFFSET ?PortalTraverser@@3VCPortalTraverser@@A ; PortalTraverser
	push	esi
	push	edx
	push	DWORD PTR __sector$[ebp]
	call	?traverse@CPortalTraverser@@QAEXPAVIRender_Sector@@AAVCFrustum@@AAU?$_vector3@M@@AAU?$_matrix@M@@I@Z ; CPortalTraverser::traverse
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	edi, DWORD PTR ?PortalTraverser@@3VCPortalTraverser@@A+156
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 465  : 	for (u32 s_it=0; s_it<PortalTraverser.r_sectors.size(); s_it++)

	xor	edx, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	ecx, DWORD PTR ?PortalTraverser@@3VCPortalTraverser@@A+152
	mov	eax, edi
	sub	eax, ecx
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 465  : 	for (u32 s_it=0; s_it<PortalTraverser.r_sectors.size(); s_it++)

	mov	DWORD PTR _s_it$1$[esp+288], edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	sar	eax, 2
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 465  : 	for (u32 s_it=0; s_it<PortalTraverser.r_sectors.size(); s_it++)

	test	eax, eax
	je	SHORT $LN9@r_dsgraph_
	npad	4
$LL10@r_dsgraph_:

; 466  : 	{
; 467  : 		CSector*	sector		= (CSector*)PortalTraverser.r_sectors[s_it];

	mov	esi, DWORD PTR [ecx+edx*4]

; 469  : 		for (u32 v_it=0; v_it<sector->r_frustums.size(); v_it++)	{

	xor	ebx, ebx
	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR _root$1$[esp+288], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	eax, DWORD PTR [esi+24]
	sub	eax, DWORD PTR [esi+20]
	sar	eax, 2
	imul	eax, eax, -1056139499
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 469  : 		for (u32 v_it=0; v_it<sector->r_frustums.size(); v_it++)	{

	test	eax, eax
	je	SHORT $LN8@r_dsgraph_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 119  :         _Ptr += _Off;

	xor	edi, edi
$LL13@r_dsgraph_:
; File I:\Vitalya\mine\NSProjectX\xrEngine\render.h

; 192  : 	IC		void					set_Frustum(CFrustum* O) { VERIFY(O);	View = O; }

	mov	ecx, DWORD PTR _this$1$[esp+288]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 119  :         _Ptr += _Off;

	mov	eax, DWORD PTR [esi+20]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 471  : 			add_Geometry		(root);

	push	DWORD PTR _root$1$[esp+288]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 119  :         _Ptr += _Off;

	add	eax, edi
; File I:\Vitalya\mine\NSProjectX\xrEngine\render.h

; 192  : 	IC		void					set_Frustum(CFrustum* O) { VERIFY(O);	View = O; }

	mov	DWORD PTR [ecx+252], eax
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 471  : 			add_Geometry		(root);

	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+96]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	eax, DWORD PTR [esi+24]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 469  : 		for (u32 v_it=0; v_it<sector->r_frustums.size(); v_it++)	{

	inc	ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	sub	eax, DWORD PTR [esi+20]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 469  : 		for (u32 v_it=0; v_it<sector->r_frustums.size(); v_it++)	{

	add	edi, 244				; 000000f4H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	sar	eax, 2
	imul	eax, eax, -1056139499
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 469  : 		for (u32 v_it=0; v_it<sector->r_frustums.size(); v_it++)	{

	cmp	ebx, eax
	jb	SHORT $LL13@r_dsgraph_
	mov	edi, DWORD PTR ?PortalTraverser@@3VCPortalTraverser@@A+156
	mov	ecx, DWORD PTR ?PortalTraverser@@3VCPortalTraverser@@A+152
	mov	edx, DWORD PTR _s_it$1$[esp+288]
$LN8@r_dsgraph_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	eax, edi
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 465  : 	for (u32 s_it=0; s_it<PortalTraverser.r_sectors.size(); s_it++)

	inc	edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	sub	eax, ecx
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 465  : 	for (u32 s_it=0; s_it<PortalTraverser.r_sectors.size(); s_it++)

	mov	DWORD PTR _s_it$1$[esp+288], edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	sar	eax, 2
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 465  : 	for (u32 s_it=0; s_it<PortalTraverser.r_sectors.size(); s_it++)

	cmp	edx, eax
	jb	SHORT $LL10@r_dsgraph_
	mov	ebx, DWORD PTR _this$1$[esp+288]
$LN9@r_dsgraph_:

; 472  : 		}
; 473  : 	}
; 474  : 
; 475  : 	if (_dynamic)
; 476  : 	{
; 477  : 		set_Object						(0);

	mov	eax, DWORD PTR [ebx]
	mov	ecx, ebx
	push	0
	call	DWORD PTR [eax+84]

; 478  : 
; 479  : 		// Traverse object database
; 480  : 		g_SpatialSpace->q_frustum

	mov	ecx, DWORD PTR __imp_?g_SpatialSpace@@3PAVISpatial_DB@@A
	lea	eax, DWORD PTR [ebx+8]
	push	eax
	push	1
	push	4
	mov	ecx, DWORD PTR [ecx]
	lea	esi, DWORD PTR [ebx+568]
	push	esi
	call	DWORD PTR __imp_?q_frustum@ISpatial_DB@@QAEXAAV?$xr_vector@PAVISpatial@@V?$xalloc@PAVISpatial@@@@@@IIABVCFrustum@@@Z
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	eax, DWORD PTR [esi+4]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 489  : 		for (u32 o_it=0; o_it<lstRenderables.size(); o_it++)

	xor	edx, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	ecx, DWORD PTR [esi]
	sub	eax, ecx
	sar	eax, 2
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 489  : 		for (u32 o_it=0; o_it<lstRenderables.size(); o_it++)

	mov	DWORD PTR _o_it$1$[esp+288], edx
	test	eax, eax
	je	$LN15@r_dsgraph_
$LL16@r_dsgraph_:

; 490  : 		{
; 491  : 			ISpatial*	spatial		= lstRenderables[o_it];

	mov	esi, DWORD PTR [ecx+edx*4]

; 492  : 			CSector*	sector		= (CSector*)spatial->spatial.sector;

	mov	edi, DWORD PTR [esi+44]

; 493  : 			if	(0==sector)										continue;	// disassociated from S/P structure

	test	edi, edi
	je	$LN14@r_dsgraph_

; 494  : 			if	(PortalTraverser.i_marker != sector->r_marker)	continue;	// inactive (untouched) sector

	mov	eax, DWORD PTR ?PortalTraverser@@3VCPortalTraverser@@A
	cmp	eax, DWORD PTR [edi+64]
	jne	$LN14@r_dsgraph_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	eax, DWORD PTR [edi+24]
	mov	ecx, DWORD PTR [edi+20]
	sub	eax, ecx
	sar	eax, 2
	imul	eax, eax, -1056139499
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 495  : 			for (u32 v_it=0; v_it<sector->r_frustums.size(); v_it++)

	mov	DWORD PTR _v_it$1$[esp+288], 0
	test	eax, eax
	je	SHORT $LN14@r_dsgraph_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1535 :         auto& _My_data = _Mypair._Myval2;

	xor	edx, edx
	lea	eax, DWORD PTR [esi+8]
	mov	DWORD PTR tv1804[esp+288], edx
	npad	9
$LL19@r_dsgraph_:

; 119  :         _Ptr += _Off;

	add	ecx, edx
; File I:\Vitalya\mine\NSProjectX\xrEngine\render.h

; 192  : 	IC		void					set_Frustum(CFrustum* O) { VERIFY(O);	View = O; }

	mov	DWORD PTR [ebx+252], ecx
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 498  : 				if (!View->testSphere_dirty(spatial->spatial.sphere.P,spatial->spatial.sphere.R))	continue;

	fld	DWORD PTR [esi+20]
	push	ecx
	fstp	DWORD PTR [esp]
	push	eax
	call	DWORD PTR __imp_?testSphere_dirty@CFrustum@@QBEHAAU?$_vector3@M@@M@Z
	test	eax, eax
	je	SHORT $LN17@r_dsgraph_

; 499  : 
; 500  : 				// renderable
; 501  : 				IRenderable*	renderable		= spatial->dcast_Renderable	();

	mov	eax, DWORD PTR [esi]
	mov	ecx, esi
	call	DWORD PTR [eax+24]

; 502  : 				if (0==renderable)				continue;					// unknown, but renderable object (r1_glow???)

	test	eax, eax
	je	SHORT $LN17@r_dsgraph_

; 503  : 
; 504  : 				renderable->renderable_Render	();

	mov	edx, DWORD PTR [eax]
	mov	ecx, eax
	call	DWORD PTR [edx+4]
$LN17@r_dsgraph_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	eax, DWORD PTR [edi+24]
	mov	ecx, DWORD PTR [edi+20]
	sub	eax, ecx
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 495  : 			for (u32 v_it=0; v_it<sector->r_frustums.size(); v_it++)

	mov	edx, DWORD PTR tv1804[esp+288]
	inc	DWORD PTR _v_it$1$[esp+288]
	add	edx, 244				; 000000f4H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	sar	eax, 2
	imul	eax, eax, -1056139499
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 495  : 			for (u32 v_it=0; v_it<sector->r_frustums.size(); v_it++)

	mov	DWORD PTR tv1804[esp+288], edx
	cmp	DWORD PTR _v_it$1$[esp+288], eax
	lea	eax, DWORD PTR [esi+8]
	jb	SHORT $LL19@r_dsgraph_
	mov	edx, DWORD PTR _o_it$1$[esp+288]
$LN14@r_dsgraph_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	eax, DWORD PTR [ebx+572]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 489  : 		for (u32 o_it=0; o_it<lstRenderables.size(); o_it++)

	inc	edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	ecx, DWORD PTR [ebx+568]
	sub	eax, ecx
	sar	eax, 2
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 489  : 		for (u32 o_it=0; o_it<lstRenderables.size(); o_it++)

	mov	DWORD PTR _o_it$1$[esp+288], edx
	cmp	edx, eax
	jb	$LL16@r_dsgraph_
$LN15@r_dsgraph_:

; 505  : 			}
; 506  : 		}
; 507  : 	}
; 508  : 
; 509  : 	// Restore
; 510  : 	ViewBase						= ViewSave;

	lea	edi, DWORD PTR [ebx+8]

; 511  : 	View							= 0;

	mov	DWORD PTR [ebx+252], 0
	mov	ecx, 61					; 0000003dH
	lea	esi, DWORD PTR _ViewSave$[esp+288]
	rep movsd

; 512  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?r_dsgraph_render_subspace@R_dsgraph_structure@@QAEXPAVIRender_Sector@@PAVCFrustum@@AAU?$_matrix@M@@AAU?$_vector3@M@@HH@Z ENDP ; R_dsgraph_structure::r_dsgraph_render_subspace
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp
_TEXT	SEGMENT
_E$1$ = -4						; size = 4
_T$1 = -4						; size = 4
_T$2 = -4						; size = 4
_T$3 = -4						; size = 4
_test$1$ = 8						; size = 4
$T4 = 8							; size = 4
__S$ = 8						; size = 4
_BB$ = 12						; size = 4
_sh$dead$ = 16						; size = 4
?r_dsgraph_render_R1_box@R_dsgraph_structure@@QAEXPAVIRender_Sector@@AAV?$_box3@M@@H@Z PROC ; R_dsgraph_structure::r_dsgraph_render_R1_box
; _this$ = ecx

; 521  : {

	push	ecx

; 522  : 	CSector*	S			= (CSector*)_S;
; 523  : 	lstVisuals.clear		();
; 524  : 	lstVisuals.push_back	(S->root());

	mov	eax, DWORD PTR __S$[esp]
	push	ebp
	lea	ebp, DWORD PTR [ecx+592]
	mov	ecx, DWORD PTR [ebp]
	mov	DWORD PTR [ebp+4], ecx
	mov	eax, DWORD PTR [eax+4]
	push	esi
	mov	DWORD PTR $T4[esp+8], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 730  :         if (_Mylast != _My_data._Myend) {

	cmp	ecx, DWORD PTR [ebp+8]
	je	SHORT $LN32@r_dsgraph_

; 713  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

	mov	DWORD PTR [ecx], eax

; 714  :         _Orphan_range(_Mylast, _Mylast);
; 715  :         _Ty& _Result = *_Mylast;
; 716  :         ++_Mylast;

	add	DWORD PTR [ebp+4], 4

; 731  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

	jmp	SHORT $LN195@r_dsgraph_
$LN32@r_dsgraph_:

; 732  :         }
; 733  : 
; 734  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

	lea	eax, DWORD PTR $T4[esp+8]
	push	eax
	push	ecx
	mov	ecx, ebp
	call	??$_Emplace_reallocate@PAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAEPAPAVIRender_Visual@@QAPAV2@$$QAPAV2@@Z ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::_Emplace_reallocate<IRender_Visual *>
$LN195@r_dsgraph_:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 526  : 	for (u32 test=0; test<lstVisuals.size(); test++)

	mov	eax, DWORD PTR [ebp+4]
	xor	esi, esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	ecx, DWORD PTR [ebp]
	sub	eax, ecx
	sar	eax, 2
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 526  : 	for (u32 test=0; test<lstVisuals.size(); test++)

	mov	DWORD PTR _test$1$[esp+8], esi
	test	eax, eax
	je	$LN3@r_dsgraph_
	push	ebx
	mov	ebx, DWORD PTR _BB$[esp+12]
	push	edi
$LL4@r_dsgraph_:

; 527  : 	{
; 528  : 		IRender_Visual*	V		= 	lstVisuals[test];

	mov	esi, DWORD PTR [ecx+esi*4]

; 529  : 		
; 530  : 		// Visual is 100% visible - simply add it
; 531  : 		xr_vector<IRender_Visual*>::iterator I,E;	// it may be usefull for 'hierrarhy' visuals
; 532  : 		
; 533  : 		switch (V->Type) {

	mov	eax, DWORD PTR [esi+4]
	dec	eax
	cmp	eax, 9
	ja	$LN26@r_dsgraph_
	movzx	eax, BYTE PTR $LN193@r_dsgraph_[eax]
	jmp	DWORD PTR $LN194@r_dsgraph_[eax*4]
$LN19@r_dsgraph_:

; 534  : 		case MT_HIERRARHY:
; 535  : 			{
; 536  : 				// Add all children
; 537  : 				FHierrarhyVisual* pV = (FHierrarhyVisual*)V;
; 538  : 				I = pV->children.begin	();
; 539  : 				E = pV->children.end		();

	mov	edi, DWORD PTR [esi+72]

; 540  : 				for (; I!=E; I++)		{

	mov	esi, DWORD PTR [esi+68]
	cmp	esi, edi
	je	$LN2@r_dsgraph_
	npad	1
$LL9@r_dsgraph_:

; 541  : 					IRender_Visual* T			= *I;

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR _T$3[esp+20], eax
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h

; 123  : 		if( max.x < box.min.x )	return FALSE;

	movss	xmm0, DWORD PTR [eax+24]
	comiss	xmm0, DWORD PTR [ebx+12]
	ja	SHORT $LN7@r_dsgraph_

; 124  : 		if( max.y < box.min.y )	return FALSE;

	movss	xmm0, DWORD PTR [eax+28]
	comiss	xmm0, DWORD PTR [ebx+16]
	ja	SHORT $LN7@r_dsgraph_

; 125  : 		if( max.z < box.min.z )	return FALSE;

	movss	xmm0, DWORD PTR [eax+32]
	comiss	xmm0, DWORD PTR [ebx+20]
	ja	SHORT $LN7@r_dsgraph_

; 126  : 		if( min.x > box.max.x )	return FALSE;

	movss	xmm0, DWORD PTR [ebx]
	comiss	xmm0, DWORD PTR [eax+36]
	ja	SHORT $LN7@r_dsgraph_

; 127  : 		if( min.y > box.max.y )	return FALSE;

	movss	xmm0, DWORD PTR [ebx+4]
	comiss	xmm0, DWORD PTR [eax+40]
	ja	SHORT $LN7@r_dsgraph_

; 128  : 		if( min.z > box.max.z )	return FALSE;

	movss	xmm0, DWORD PTR [ebx+8]
	comiss	xmm0, DWORD PTR [eax+44]
	ja	SHORT $LN7@r_dsgraph_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 730  :         if (_Mylast != _My_data._Myend) {

	mov	ecx, DWORD PTR [ebp+4]
	cmp	ecx, DWORD PTR [ebp+8]
	je	SHORT $LN96@r_dsgraph_

; 713  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

	mov	DWORD PTR [ecx], eax

; 714  :         _Orphan_range(_Mylast, _Mylast);
; 715  :         _Ty& _Result = *_Mylast;
; 716  :         ++_Mylast;

	add	DWORD PTR [ebp+4], 4

; 731  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

	jmp	SHORT $LN7@r_dsgraph_
$LN96@r_dsgraph_:

; 732  :         }
; 733  : 
; 734  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

	lea	eax, DWORD PTR _T$3[esp+20]
	push	eax
	push	ecx
	mov	ecx, ebp
	call	??$_Emplace_reallocate@ABQAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAEPAPAVIRender_Visual@@QAPAV2@ABQAV2@@Z ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::_Emplace_reallocate<IRender_Visual * const &>
$LN7@r_dsgraph_:

; 74   :         ++_Ptr;

	add	esi, 4
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 540  : 				for (; I!=E; I++)		{

	cmp	esi, edi
	jne	SHORT $LL9@r_dsgraph_

; 542  : 					if (BB.intersect(T->vis.box))	lstVisuals.push_back(T);
; 543  : 				}
; 544  : 			}
; 545  : 			break;

	jmp	$LN2@r_dsgraph_
$LN21@r_dsgraph_:

; 546  : 		case MT_SKELETON_ANIM:
; 547  : 		case MT_SKELETON_RIGID:
; 548  : 			{
; 549  : 				// Add all children	(s)
; 550  : 				CKinematics * pV		= (CKinematics*)V;
; 551  : 				pV->CalculateBones		(TRUE);

	mov	eax, DWORD PTR [esi]
	mov	ecx, esi
	push	1
	call	DWORD PTR [eax+64]

; 552  : 				I = pV->children.begin	();
; 553  : 				E = pV->children.end		();

	mov	edi, DWORD PTR [esi+72]

; 554  : 				for (; I!=E; I++)		{

	mov	esi, DWORD PTR [esi+68]
	cmp	esi, edi
	je	$LN2@r_dsgraph_
	npad	9
$LL12@r_dsgraph_:

; 555  : 					IRender_Visual* T				= *I;

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR _T$2[esp+20], eax
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h

; 123  : 		if( max.x < box.min.x )	return FALSE;

	movss	xmm0, DWORD PTR [eax+24]
	comiss	xmm0, DWORD PTR [ebx+12]
	ja	SHORT $LN10@r_dsgraph_

; 124  : 		if( max.y < box.min.y )	return FALSE;

	movss	xmm0, DWORD PTR [eax+28]
	comiss	xmm0, DWORD PTR [ebx+16]
	ja	SHORT $LN10@r_dsgraph_

; 125  : 		if( max.z < box.min.z )	return FALSE;

	movss	xmm0, DWORD PTR [eax+32]
	comiss	xmm0, DWORD PTR [ebx+20]
	ja	SHORT $LN10@r_dsgraph_

; 126  : 		if( min.x > box.max.x )	return FALSE;

	movss	xmm0, DWORD PTR [ebx]
	comiss	xmm0, DWORD PTR [eax+36]
	ja	SHORT $LN10@r_dsgraph_

; 127  : 		if( min.y > box.max.y )	return FALSE;

	movss	xmm0, DWORD PTR [ebx+4]
	comiss	xmm0, DWORD PTR [eax+40]
	ja	SHORT $LN10@r_dsgraph_

; 128  : 		if( min.z > box.max.z )	return FALSE;

	movss	xmm0, DWORD PTR [ebx+8]
	comiss	xmm0, DWORD PTR [eax+44]
	ja	SHORT $LN10@r_dsgraph_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 730  :         if (_Mylast != _My_data._Myend) {

	mov	ecx, DWORD PTR [ebp+4]
	cmp	ecx, DWORD PTR [ebp+8]
	je	SHORT $LN131@r_dsgraph_

; 713  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

	mov	DWORD PTR [ecx], eax

; 714  :         _Orphan_range(_Mylast, _Mylast);
; 715  :         _Ty& _Result = *_Mylast;
; 716  :         ++_Mylast;

	add	DWORD PTR [ebp+4], 4

; 731  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

	jmp	SHORT $LN10@r_dsgraph_
$LN131@r_dsgraph_:

; 732  :         }
; 733  : 
; 734  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

	lea	eax, DWORD PTR _T$2[esp+20]
	push	eax
	push	ecx
	mov	ecx, ebp
	call	??$_Emplace_reallocate@ABQAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAEPAPAVIRender_Visual@@QAPAV2@ABQAV2@@Z ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::_Emplace_reallocate<IRender_Visual * const &>
$LN10@r_dsgraph_:

; 74   :         ++_Ptr;

	add	esi, 4
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 554  : 				for (; I!=E; I++)		{

	cmp	esi, edi
	jne	SHORT $LL12@r_dsgraph_

; 556  : 					if (BB.intersect(T->vis.box))	lstVisuals.push_back(T);
; 557  : 				}
; 558  : 			}
; 559  : 			break;

	jmp	$LN2@r_dsgraph_
$LN24@r_dsgraph_:

; 560  : 		case MT_LOD:
; 561  : 			{
; 562  : 				FLOD		* pV		=	(FLOD*) V;
; 563  : 				I = pV->children.begin		();
; 564  : 				E = pV->children.end		();

	mov	edi, DWORD PTR [esi+72]

; 565  : 				for (; I!=E; I++)		{

	mov	esi, DWORD PTR [esi+68]
	cmp	esi, edi
	je	$LN2@r_dsgraph_
	npad	2
$LL15@r_dsgraph_:

; 566  : 					IRender_Visual* T				= *I;

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR _T$1[esp+20], eax
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h

; 123  : 		if( max.x < box.min.x )	return FALSE;

	movss	xmm0, DWORD PTR [eax+24]
	comiss	xmm0, DWORD PTR [ebx+12]
	ja	SHORT $LN13@r_dsgraph_

; 124  : 		if( max.y < box.min.y )	return FALSE;

	movss	xmm0, DWORD PTR [eax+28]
	comiss	xmm0, DWORD PTR [ebx+16]
	ja	SHORT $LN13@r_dsgraph_

; 125  : 		if( max.z < box.min.z )	return FALSE;

	movss	xmm0, DWORD PTR [eax+32]
	comiss	xmm0, DWORD PTR [ebx+20]
	ja	SHORT $LN13@r_dsgraph_

; 126  : 		if( min.x > box.max.x )	return FALSE;

	movss	xmm0, DWORD PTR [ebx]
	comiss	xmm0, DWORD PTR [eax+36]
	ja	SHORT $LN13@r_dsgraph_

; 127  : 		if( min.y > box.max.y )	return FALSE;

	movss	xmm0, DWORD PTR [ebx+4]
	comiss	xmm0, DWORD PTR [eax+40]
	ja	SHORT $LN13@r_dsgraph_

; 128  : 		if( min.z > box.max.z )	return FALSE;

	movss	xmm0, DWORD PTR [ebx+8]
	comiss	xmm0, DWORD PTR [eax+44]
	ja	SHORT $LN13@r_dsgraph_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 730  :         if (_Mylast != _My_data._Myend) {

	mov	ecx, DWORD PTR [ebp+4]
	cmp	ecx, DWORD PTR [ebp+8]
	je	SHORT $LN166@r_dsgraph_

; 713  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

	mov	DWORD PTR [ecx], eax

; 714  :         _Orphan_range(_Mylast, _Mylast);
; 715  :         _Ty& _Result = *_Mylast;
; 716  :         ++_Mylast;

	add	DWORD PTR [ebp+4], 4

; 731  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

	jmp	SHORT $LN13@r_dsgraph_
$LN166@r_dsgraph_:

; 732  :         }
; 733  : 
; 734  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

	lea	eax, DWORD PTR _T$1[esp+20]
	push	eax
	push	ecx
	mov	ecx, ebp
	call	??$_Emplace_reallocate@ABQAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAEPAPAVIRender_Visual@@QAPAV2@ABQAV2@@Z ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::_Emplace_reallocate<IRender_Visual * const &>
$LN13@r_dsgraph_:

; 74   :         ++_Ptr;

	add	esi, 4
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 565  : 				for (; I!=E; I++)		{

	cmp	esi, edi
	jne	SHORT $LL15@r_dsgraph_

; 567  : 					if (BB.intersect(T->vis.box))	lstVisuals.push_back(T);
; 568  : 				}
; 569  : 			}
; 570  : 			break;

	jmp	SHORT $LN2@r_dsgraph_
$LN26@r_dsgraph_:

; 571  : 		default:
; 572  : 			{
; 573  : 				// Renderable visual
; 574  : 				ShaderElement* E	= V->shader->E[sh]._get();

	mov	eax, DWORD PTR [esi+64]
	mov	eax, DWORD PTR [eax+24]
	mov	DWORD PTR _E$1$[esp+20], eax

; 575  : 				if (E) {

	test	eax, eax
	je	SHORT $LN2@r_dsgraph_

; 576  : 					for (u32 pass=0; pass<E->passes.size(); pass++)

	xor	edi, edi
	cmp	DWORD PTR [eax+20], edi
	jbe	SHORT $LN2@r_dsgraph_
	mov	ebx, eax
$LL18@r_dsgraph_:

; 577  : 					{
; 578  : 						RCache.set_Element			(E,pass);

	mov	ecx, DWORD PTR __imp_?RCache@@3VCBackend@@A
	push	edi
	push	ebx
	call	DWORD PTR __imp_?set_Element@CBackend@@QAEXPAUShaderElement@@I@Z

; 579  : 						V->Render					(-1.f);

	mov	eax, DWORD PTR [esi]
	fld	DWORD PTR __real@bf800000
	push	ecx
	mov	ecx, esi
	fstp	DWORD PTR [esp]
	call	DWORD PTR [eax]
	inc	edi
	cmp	edi, DWORD PTR [ebx+20]
	jb	SHORT $LL18@r_dsgraph_
	mov	ebx, DWORD PTR _BB$[esp+16]
$LN2@r_dsgraph_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	eax, DWORD PTR [ebp+4]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 526  : 	for (u32 test=0; test<lstVisuals.size(); test++)

	mov	esi, DWORD PTR _test$1$[esp+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	ecx, DWORD PTR [ebp]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 526  : 	for (u32 test=0; test<lstVisuals.size(); test++)

	inc	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	sub	eax, ecx
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 526  : 	for (u32 test=0; test<lstVisuals.size(); test++)

	mov	DWORD PTR _test$1$[esp+16], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	sar	eax, 2
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_render.cpp

; 526  : 	for (u32 test=0; test<lstVisuals.size(); test++)

	cmp	esi, eax
	jb	$LL4@r_dsgraph_
	pop	edi
	pop	ebx
$LN3@r_dsgraph_:
	pop	esi

; 580  : 					}
; 581  : 				}
; 582  : 			}
; 583  : 			break;
; 584  : 		}
; 585  : 	}
; 586  : }

	pop	ebp
	pop	ecx
	ret	12					; 0000000cH
$LN194@r_dsgraph_:
	DD	$LN19@r_dsgraph_
	DD	$LN21@r_dsgraph_
	DD	$LN24@r_dsgraph_
	DD	$LN26@r_dsgraph_
$LN193@r_dsgraph_:
	DB	0
	DB	3
	DB	1
	DB	3
	DB	3
	DB	2
	DB	3
	DB	3
	DB	3
	DB	1
?r_dsgraph_render_R1_box@R_dsgraph_structure@@QAEXPAVIRender_Sector@@AAV?$_box3@M@@H@Z ENDP ; R_dsgraph_structure::r_dsgraph_render_R1_box
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_MatrixItem@R_dsgraph@@@std@@@std@@@std@@QBEAAU_MatrixItem@R_dsgraph@@XZ
_TEXT	SEGMENT
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_MatrixItem@R_dsgraph@@@std@@@std@@@std@@QBEAAU_MatrixItem@R_dsgraph@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<R_dsgraph::_MatrixItem> > >::operator*, COMDAT
; _this$ = ecx

; 261  :         return const_cast<reference>(_Mybase::operator*());

	mov	eax, DWORD PTR [ecx]

; 262  :     }

	ret	0
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_MatrixItem@R_dsgraph@@@std@@@std@@@std@@QBEAAU_MatrixItem@R_dsgraph@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<R_dsgraph::_MatrixItem> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_NormalItem@R_dsgraph@@@std@@@std@@@std@@QBEAAU_NormalItem@R_dsgraph@@XZ
_TEXT	SEGMENT
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_NormalItem@R_dsgraph@@@std@@@std@@@std@@QBEAAU_NormalItem@R_dsgraph@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<R_dsgraph::_NormalItem> > >::operator*, COMDAT
; _this$ = ecx

; 261  :         return const_cast<reference>(_Mybase::operator*());

	mov	eax, DWORD PTR [ecx]

; 262  :     }

	ret	0
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_NormalItem@R_dsgraph@@@std@@@std@@@std@@QBEAAU_NormalItem@R_dsgraph@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<R_dsgraph::_NormalItem> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ??A?$xr_vector@PAVIRender_Portal@@V?$xalloc@PAVIRender_Portal@@@@@@QAEAAPAVIRender_Portal@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$xr_vector@PAVIRender_Portal@@V?$xalloc@PAVIRender_Portal@@@@@@QAEAAPAVIRender_Portal@@I@Z PROC ; xr_vector<IRender_Portal *,xalloc<IRender_Portal *> >::operator[], COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 119  :         _Ptr += _Off;

	mov	ecx, DWORD PTR [ecx]
	mov	eax, DWORD PTR __Pos$[esp-4]
	lea	eax, DWORD PTR [ecx+eax*4]
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h

; 138  : 	reference operator[]		(size_type _Pos)					{ {VERIFY(_Pos<size());} return (*(begin() + _Pos)); }

	ret	4
??A?$xr_vector@PAVIRender_Portal@@V?$xalloc@PAVIRender_Portal@@@@@@QAEAAPAVIRender_Portal@@I@Z ENDP ; xr_vector<IRender_Portal *,xalloc<IRender_Portal *> >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ??A?$xr_vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@@QAEAAPAVIRender_Visual@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$xr_vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@@QAEAAPAVIRender_Visual@@I@Z PROC ; xr_vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::operator[], COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 119  :         _Ptr += _Off;

	mov	ecx, DWORD PTR [ecx]
	mov	eax, DWORD PTR __Pos$[esp-4]
	lea	eax, DWORD PTR [ecx+eax*4]
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h

; 138  : 	reference operator[]		(size_type _Pos)					{ {VERIFY(_Pos<size());} return (*(begin() + _Pos)); }

	ret	4
??A?$xr_vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@@QAEAAPAVIRender_Visual@@I@Z ENDP ; xr_vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ?size@?$xr_vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@@QBEIXZ
_TEXT	SEGMENT
?size@?$xr_vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@@QBEIXZ PROC ; xr_vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::size, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h

; 125  : 	u32		size				() const							{ return (u32)inherited::size();} 

	ret	0
?size@?$xr_vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@@QBEIXZ ENDP ; xr_vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?push_back@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAEX$$QAPAVIRender_Visual@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAEX$$QAPAVIRender_Visual@@@Z PROC ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::push_back, COMDAT
; _this$ = ecx

; 730  :         if (_Mylast != _My_data._Myend) {

	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, DWORD PTR [ecx+8]
	je	SHORT $LN4@push_back

; 713  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

	mov	eax, DWORD PTR __Val$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 714  :         _Orphan_range(_Mylast, _Mylast);
; 715  :         _Ty& _Result = *_Mylast;
; 716  :         ++_Mylast;

	add	DWORD PTR [ecx+4], 4

; 747  :         // insert by moving into element at end, provide strong guarantee
; 748  :         emplace_back(_STD move(_Val));
; 749  :     }

	ret	4
$LN4@push_back:

; 734  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

	push	DWORD PTR __Val$[esp-4]
	push	edx
	call	??$_Emplace_reallocate@PAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAEPAPAVIRender_Visual@@QAPAV2@$$QAPAV2@@Z ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::_Emplace_reallocate<IRender_Visual *>

; 747  :         // insert by moving into element at end, provide strong guarantee
; 748  :         emplace_back(_STD move(_Val));
; 749  :     }

	ret	4
?push_back@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAEX$$QAPAVIRender_Visual@@@Z ENDP ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$emplace_back@PAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAE?A_T$$QAPAVIRender_Visual@@@Z
_TEXT	SEGMENT
_<_Val_0>$ = 8						; size = 4
??$emplace_back@PAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAE?A_T$$QAPAVIRender_Visual@@@Z PROC ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::emplace_back<IRender_Visual *>, COMDAT
; _this$ = ecx

; 727  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 728  :         auto& _My_data   = _Mypair._Myval2;
; 729  :         pointer& _Mylast = _My_data._Mylast;
; 730  :         if (_Mylast != _My_data._Myend) {

	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, DWORD PTR [ecx+8]
	je	SHORT $LN2@emplace_ba

; 713  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

	mov	eax, DWORD PTR _<_Val_0>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 714  :         _Orphan_range(_Mylast, _Mylast);
; 715  :         _Ty& _Result = *_Mylast;
; 716  :         ++_Mylast;

	add	DWORD PTR [ecx+4], 4

; 735  : #if _HAS_CXX17
; 736  :         return _Result;
; 737  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 738  :         (void) _Result;
; 739  : #endif // _HAS_CXX17
; 740  :     }

	ret	4
$LN2@emplace_ba:

; 731  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);
; 732  :         }
; 733  : 
; 734  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

	push	DWORD PTR _<_Val_0>$[esp-4]
	push	edx
	call	??$_Emplace_reallocate@PAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAEPAPAVIRender_Visual@@QAPAV2@$$QAPAV2@@Z ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::_Emplace_reallocate<IRender_Visual *>

; 735  : #if _HAS_CXX17
; 736  :         return _Result;
; 737  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 738  :         (void) _Result;
; 739  : #endif // _HAS_CXX17
; 740  :     }

	ret	4
??$emplace_back@PAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAE?A_T$$QAPAVIRender_Visual@@@Z ENDP ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::emplace_back<IRender_Visual *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Emplace_back_with_unused_capacity@PAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@AAE?A_T$$QAPAVIRender_Visual@@@Z
_TEXT	SEGMENT
_<_Val_0>$ = 8						; size = 4
??$_Emplace_back_with_unused_capacity@PAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@AAE?A_T$$QAPAVIRender_Visual@@@Z PROC ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::_Emplace_back_with_unused_capacity<IRender_Visual *>, COMDAT
; _this$ = ecx

; 709  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 710  :         auto& _My_data   = _Mypair._Myval2;
; 711  :         pointer& _Mylast = _My_data._Mylast;
; 712  :         _STL_INTERNAL_CHECK(_Mylast != _My_data._Myend); // check that we have unused capacity
; 713  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _<_Val_0>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 714  :         _Orphan_range(_Mylast, _Mylast);
; 715  :         _Ty& _Result = *_Mylast;
; 716  :         ++_Mylast;

	add	DWORD PTR [ecx+4], 4

; 717  : #if _HAS_CXX17
; 718  :         return _Result;
; 719  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 720  :         (void) _Result;
; 721  : #endif // _HAS_CXX17
; 722  :     }

	ret	4
??$_Emplace_back_with_unused_capacity@PAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@AAE?A_T$$QAPAVIRender_Visual@@@Z ENDP ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::_Emplace_back_with_unused_capacity<IRender_Visual *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?push_back@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAEXABQAVIRender_Visual@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAEXABQAVIRender_Visual@@@Z PROC ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::push_back, COMDAT
; _this$ = ecx

; 730  :         if (_Mylast != _My_data._Myend) {

	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, DWORD PTR [ecx+8]
	je	SHORT $LN4@push_back

; 713  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

	mov	eax, DWORD PTR __Val$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 714  :         _Orphan_range(_Mylast, _Mylast);
; 715  :         _Ty& _Result = *_Mylast;
; 716  :         ++_Mylast;

	add	DWORD PTR [ecx+4], 4

; 743  :         emplace_back(_Val);
; 744  :     }

	ret	4
$LN4@push_back:

; 734  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

	push	DWORD PTR __Val$[esp-4]
	push	edx
	call	??$_Emplace_reallocate@ABQAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAEPAPAVIRender_Visual@@QAPAV2@ABQAV2@@Z ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::_Emplace_reallocate<IRender_Visual * const &>

; 743  :         emplace_back(_Val);
; 744  :     }

	ret	4
?push_back@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAEXABQAVIRender_Visual@@@Z ENDP ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$emplace_back@ABQAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAE?A_TABQAVIRender_Visual@@@Z
_TEXT	SEGMENT
_<_Val_0>$ = 8						; size = 4
??$emplace_back@ABQAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAE?A_TABQAVIRender_Visual@@@Z PROC ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::emplace_back<IRender_Visual * const &>, COMDAT
; _this$ = ecx

; 727  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 728  :         auto& _My_data   = _Mypair._Myval2;
; 729  :         pointer& _Mylast = _My_data._Mylast;
; 730  :         if (_Mylast != _My_data._Myend) {

	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, DWORD PTR [ecx+8]
	je	SHORT $LN2@emplace_ba

; 713  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

	mov	eax, DWORD PTR _<_Val_0>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 714  :         _Orphan_range(_Mylast, _Mylast);
; 715  :         _Ty& _Result = *_Mylast;
; 716  :         ++_Mylast;

	add	DWORD PTR [ecx+4], 4

; 735  : #if _HAS_CXX17
; 736  :         return _Result;
; 737  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 738  :         (void) _Result;
; 739  : #endif // _HAS_CXX17
; 740  :     }

	ret	4
$LN2@emplace_ba:

; 731  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);
; 732  :         }
; 733  : 
; 734  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

	push	DWORD PTR _<_Val_0>$[esp-4]
	push	edx
	call	??$_Emplace_reallocate@ABQAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAEPAPAVIRender_Visual@@QAPAV2@ABQAV2@@Z ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::_Emplace_reallocate<IRender_Visual * const &>

; 735  : #if _HAS_CXX17
; 736  :         return _Result;
; 737  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 738  :         (void) _Result;
; 739  : #endif // _HAS_CXX17
; 740  :     }

	ret	4
??$emplace_back@ABQAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAE?A_TABQAVIRender_Visual@@@Z ENDP ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::emplace_back<IRender_Visual * const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Emplace_back_with_unused_capacity@ABQAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@AAE?A_TABQAVIRender_Visual@@@Z
_TEXT	SEGMENT
_<_Val_0>$ = 8						; size = 4
??$_Emplace_back_with_unused_capacity@ABQAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@AAE?A_TABQAVIRender_Visual@@@Z PROC ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::_Emplace_back_with_unused_capacity<IRender_Visual * const &>, COMDAT
; _this$ = ecx

; 709  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 710  :         auto& _My_data   = _Mypair._Myval2;
; 711  :         pointer& _Mylast = _My_data._Mylast;
; 712  :         _STL_INTERNAL_CHECK(_Mylast != _My_data._Myend); // check that we have unused capacity
; 713  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _<_Val_0>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 714  :         _Orphan_range(_Mylast, _Mylast);
; 715  :         _Ty& _Result = *_Mylast;
; 716  :         ++_Mylast;

	add	DWORD PTR [ecx+4], 4

; 717  : #if _HAS_CXX17
; 718  :         return _Result;
; 719  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 720  :         (void) _Result;
; 721  : #endif // _HAS_CXX17
; 722  :     }

	ret	4
??$_Emplace_back_with_unused_capacity@ABQAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@AAE?A_TABQAVIRender_Visual@@@Z ENDP ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::_Emplace_back_with_unused_capacity<IRender_Visual * const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ??A?$xr_vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEAAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$xr_vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEAAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@I@Z PROC ; xr_vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::operator[], COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 119  :         _Ptr += _Off;

	mov	ecx, DWORD PTR [ecx]
	mov	eax, DWORD PTR __Pos$[esp-4]
	lea	eax, DWORD PTR [ecx+eax*4]
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h

; 138  : 	reference operator[]		(size_type _Pos)					{ {VERIFY(_Pos<size());} return (*(begin() + _Pos)); }

	ret	4
??A?$xr_vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEAAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@I@Z ENDP ; xr_vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ?size@?$xr_vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QBEIXZ
_TEXT	SEGMENT
?size@?$xr_vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QBEIXZ PROC ; xr_vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::size, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h

; 125  : 	u32		size				() const							{ return (u32)inherited::size();} 

	ret	0
?size@?$xr_vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QBEIXZ ENDP ; xr_vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?end@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ PROC ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::end, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], ecx

; 1472 :         auto& _My_data = _Mypair._Myval2;
; 1473 :         return iterator(_My_data._Mylast, _STD addressof(_My_data));
; 1474 :     }

	ret	4
?end@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ ENDP ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::end
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?begin@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ PROC ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::begin, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], ecx

; 1462 :         auto& _My_data = _Mypair._Myval2;
; 1463 :         return iterator(_My_data._Myfirst, _STD addressof(_My_data));
; 1464 :     }

	ret	4
?begin@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ ENDP ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?push_back@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::push_back, COMDAT
; _this$ = ecx

; 730  :         if (_Mylast != _My_data._Myend) {

	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, DWORD PTR [ecx+8]
	je	SHORT $LN4@push_back

; 713  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

	mov	eax, DWORD PTR __Val$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 714  :         _Orphan_range(_Mylast, _Mylast);
; 715  :         _Ty& _Result = *_Mylast;
; 716  :         ++_Mylast;

	add	DWORD PTR [ecx+4], 4

; 743  :         emplace_back(_Val);
; 744  :     }

	ret	4
$LN4@push_back:

; 734  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

	push	DWORD PTR __Val$[esp-4]
	push	edx
	call	??$_Emplace_reallocate@ABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU23@ABQAU23@@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Emplace_reallocate<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * const &>

; 743  :         emplace_back(_Val);
; 744  :     }

	ret	4
?push_back@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$emplace_back@ABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?A_TABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
_<_Val_0>$ = 8						; size = 4
??$emplace_back@ABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?A_TABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::emplace_back<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * const &>, COMDAT
; _this$ = ecx

; 727  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 728  :         auto& _My_data   = _Mypair._Myval2;
; 729  :         pointer& _Mylast = _My_data._Mylast;
; 730  :         if (_Mylast != _My_data._Myend) {

	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, DWORD PTR [ecx+8]
	je	SHORT $LN2@emplace_ba

; 713  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

	mov	eax, DWORD PTR _<_Val_0>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 714  :         _Orphan_range(_Mylast, _Mylast);
; 715  :         _Ty& _Result = *_Mylast;
; 716  :         ++_Mylast;

	add	DWORD PTR [ecx+4], 4

; 735  : #if _HAS_CXX17
; 736  :         return _Result;
; 737  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 738  :         (void) _Result;
; 739  : #endif // _HAS_CXX17
; 740  :     }

	ret	4
$LN2@emplace_ba:

; 731  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);
; 732  :         }
; 733  : 
; 734  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

	push	DWORD PTR _<_Val_0>$[esp-4]
	push	edx
	call	??$_Emplace_reallocate@ABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU23@ABQAU23@@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Emplace_reallocate<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * const &>

; 735  : #if _HAS_CXX17
; 736  :         return _Result;
; 737  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 738  :         (void) _Result;
; 739  : #endif // _HAS_CXX17
; 740  :     }

	ret	4
??$emplace_back@ABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?A_TABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::emplace_back<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Emplace_back_with_unused_capacity@ABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAE?A_TABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
_<_Val_0>$ = 8						; size = 4
??$_Emplace_back_with_unused_capacity@ABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAE?A_TABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Emplace_back_with_unused_capacity<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * const &>, COMDAT
; _this$ = ecx

; 709  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 710  :         auto& _My_data   = _Mypair._Myval2;
; 711  :         pointer& _Mylast = _My_data._Mylast;
; 712  :         _STL_INTERNAL_CHECK(_Mylast != _My_data._Myend); // check that we have unused capacity
; 713  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _<_Val_0>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 714  :         _Orphan_range(_Mylast, _Mylast);
; 715  :         _Ty& _Result = *_Mylast;
; 716  :         ++_Mylast;

	add	DWORD PTR [ecx+4], 4

; 717  : #if _HAS_CXX17
; 718  :         return _Result;
; 719  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 720  :         (void) _Result;
; 721  : #endif // _HAS_CXX17
; 722  :     }

	ret	4
??$_Emplace_back_with_unused_capacity@ABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAE?A_TABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Emplace_back_with_unused_capacity<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ??A?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEAAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEAAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@I@Z PROC ; xr_vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::operator[], COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 119  :         _Ptr += _Off;

	mov	ecx, DWORD PTR [ecx]
	mov	eax, DWORD PTR __Pos$[esp-4]
	lea	eax, DWORD PTR [ecx+eax*4]
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h

; 138  : 	reference operator[]		(size_type _Pos)					{ {VERIFY(_Pos<size());} return (*(begin() + _Pos)); }

	ret	4
??A?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEAAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@I@Z ENDP ; xr_vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ?size@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QBEIXZ
_TEXT	SEGMENT
?size@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QBEIXZ PROC ; xr_vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::size, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h

; 125  : 	u32		size				() const							{ return (u32)inherited::size();} 

	ret	0
?size@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QBEIXZ ENDP ; xr_vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?end@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ PROC ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::end, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], ecx

; 1472 :         auto& _My_data = _Mypair._Myval2;
; 1473 :         return iterator(_My_data._Mylast, _STD addressof(_My_data));
; 1474 :     }

	ret	4
?end@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ ENDP ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::end
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?begin@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ PROC ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::begin, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], ecx

; 1462 :         auto& _My_data = _Mypair._Myval2;
; 1463 :         return iterator(_My_data._Myfirst, _STD addressof(_My_data));
; 1464 :     }

	ret	4
?begin@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ ENDP ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ??A?$xr_vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEAAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$xr_vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEAAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@I@Z PROC ; xr_vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::operator[], COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 119  :         _Ptr += _Off;

	mov	ecx, DWORD PTR [ecx]
	mov	eax, DWORD PTR __Pos$[esp-4]
	lea	eax, DWORD PTR [ecx+eax*4]
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h

; 138  : 	reference operator[]		(size_type _Pos)					{ {VERIFY(_Pos<size());} return (*(begin() + _Pos)); }

	ret	4
??A?$xr_vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEAAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@I@Z ENDP ; xr_vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ?size@?$xr_vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QBEIXZ
_TEXT	SEGMENT
?size@?$xr_vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QBEIXZ PROC ; xr_vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::size, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h

; 125  : 	u32		size				() const							{ return (u32)inherited::size();} 

	ret	0
?size@?$xr_vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QBEIXZ ENDP ; xr_vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?end@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ PROC ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::end, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], ecx

; 1472 :         auto& _My_data = _Mypair._Myval2;
; 1473 :         return iterator(_My_data._Mylast, _STD addressof(_My_data));
; 1474 :     }

	ret	4
?end@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ ENDP ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::end
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?begin@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ PROC ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::begin, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], ecx

; 1462 :         auto& _My_data = _Mypair._Myval2;
; 1463 :         return iterator(_My_data._Myfirst, _STD addressof(_My_data));
; 1464 :     }

	ret	4
?begin@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ ENDP ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ??A?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEAAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEAAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@I@Z PROC ; xr_vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::operator[], COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 119  :         _Ptr += _Off;

	mov	ecx, DWORD PTR [ecx]
	mov	eax, DWORD PTR __Pos$[esp-4]
	lea	eax, DWORD PTR [ecx+eax*4]
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h

; 138  : 	reference operator[]		(size_type _Pos)					{ {VERIFY(_Pos<size());} return (*(begin() + _Pos)); }

	ret	4
??A?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEAAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@I@Z ENDP ; xr_vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ?size@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QBEIXZ
_TEXT	SEGMENT
?size@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QBEIXZ PROC ; xr_vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::size, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h

; 125  : 	u32		size				() const							{ return (u32)inherited::size();} 

	ret	0
?size@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QBEIXZ ENDP ; xr_vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?end@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ PROC ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::end, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], ecx

; 1472 :         auto& _My_data = _Mypair._Myval2;
; 1473 :         return iterator(_My_data._Mylast, _STD addressof(_My_data));
; 1474 :     }

	ret	4
?end@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ ENDP ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::end
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?begin@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ PROC ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::begin, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], ecx

; 1462 :         auto& _My_data = _Mypair._Myval2;
; 1463 :         return iterator(_My_data._Myfirst, _STD addressof(_My_data));
; 1464 :     }

	ret	4
?begin@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ ENDP ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ??A?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEAAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEAAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@I@Z PROC ; xr_vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::operator[], COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 119  :         _Ptr += _Off;

	mov	ecx, DWORD PTR [ecx]
	mov	eax, DWORD PTR __Pos$[esp-4]
	lea	eax, DWORD PTR [ecx+eax*4]
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h

; 138  : 	reference operator[]		(size_type _Pos)					{ {VERIFY(_Pos<size());} return (*(begin() + _Pos)); }

	ret	4
??A?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEAAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@I@Z ENDP ; xr_vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ?size@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QBEIXZ
_TEXT	SEGMENT
?size@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QBEIXZ PROC ; xr_vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::size, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h

; 125  : 	u32		size				() const							{ return (u32)inherited::size();} 

	ret	0
?size@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QBEIXZ ENDP ; xr_vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?end@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ PROC ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::end, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], ecx

; 1472 :         auto& _My_data = _Mypair._Myval2;
; 1473 :         return iterator(_My_data._Mylast, _STD addressof(_My_data));
; 1474 :     }

	ret	4
?end@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ ENDP ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::end
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?begin@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ PROC ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::begin, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], ecx

; 1462 :         auto& _My_data = _Mypair._Myval2;
; 1463 :         return iterator(_My_data._Myfirst, _STD addressof(_My_data));
; 1464 :     }

	ret	4
?begin@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ ENDP ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ??A?$xr_vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEAAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$xr_vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEAAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@I@Z PROC ; xr_vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::operator[], COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 119  :         _Ptr += _Off;

	mov	ecx, DWORD PTR [ecx]
	mov	eax, DWORD PTR __Pos$[esp-4]
	lea	eax, DWORD PTR [ecx+eax*4]
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h

; 138  : 	reference operator[]		(size_type _Pos)					{ {VERIFY(_Pos<size());} return (*(begin() + _Pos)); }

	ret	4
??A?$xr_vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEAAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@I@Z ENDP ; xr_vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ?size@?$xr_vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QBEIXZ
_TEXT	SEGMENT
?size@?$xr_vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QBEIXZ PROC ; xr_vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::size, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h

; 125  : 	u32		size				() const							{ return (u32)inherited::size();} 

	ret	0
?size@?$xr_vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QBEIXZ ENDP ; xr_vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?end@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ PROC ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::end, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], ecx

; 1472 :         auto& _My_data = _Mypair._Myval2;
; 1473 :         return iterator(_My_data._Mylast, _STD addressof(_My_data));
; 1474 :     }

	ret	4
?end@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ ENDP ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::end
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?begin@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ PROC ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::begin, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], ecx

; 1462 :         auto& _My_data = _Mypair._Myval2;
; 1463 :         return iterator(_My_data._Myfirst, _STD addressof(_My_data));
; 1464 :     }

	ret	4
?begin@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ ENDP ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?push_back@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::push_back, COMDAT
; _this$ = ecx

; 730  :         if (_Mylast != _My_data._Myend) {

	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, DWORD PTR [ecx+8]
	je	SHORT $LN4@push_back

; 713  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

	mov	eax, DWORD PTR __Val$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 714  :         _Orphan_range(_Mylast, _Mylast);
; 715  :         _Ty& _Result = *_Mylast;
; 716  :         ++_Mylast;

	add	DWORD PTR [ecx+4], 4

; 743  :         emplace_back(_Val);
; 744  :     }

	ret	4
$LN4@push_back:

; 734  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

	push	DWORD PTR __Val$[esp-4]
	push	edx
	call	??$_Emplace_reallocate@ABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU23@ABQAU23@@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Emplace_reallocate<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * const &>

; 743  :         emplace_back(_Val);
; 744  :     }

	ret	4
?push_back@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$emplace_back@ABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?A_TABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
_<_Val_0>$ = 8						; size = 4
??$emplace_back@ABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?A_TABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::emplace_back<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * const &>, COMDAT
; _this$ = ecx

; 727  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 728  :         auto& _My_data   = _Mypair._Myval2;
; 729  :         pointer& _Mylast = _My_data._Mylast;
; 730  :         if (_Mylast != _My_data._Myend) {

	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, DWORD PTR [ecx+8]
	je	SHORT $LN2@emplace_ba

; 713  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

	mov	eax, DWORD PTR _<_Val_0>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 714  :         _Orphan_range(_Mylast, _Mylast);
; 715  :         _Ty& _Result = *_Mylast;
; 716  :         ++_Mylast;

	add	DWORD PTR [ecx+4], 4

; 735  : #if _HAS_CXX17
; 736  :         return _Result;
; 737  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 738  :         (void) _Result;
; 739  : #endif // _HAS_CXX17
; 740  :     }

	ret	4
$LN2@emplace_ba:

; 731  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);
; 732  :         }
; 733  : 
; 734  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

	push	DWORD PTR _<_Val_0>$[esp-4]
	push	edx
	call	??$_Emplace_reallocate@ABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU23@ABQAU23@@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Emplace_reallocate<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * const &>

; 735  : #if _HAS_CXX17
; 736  :         return _Result;
; 737  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 738  :         (void) _Result;
; 739  : #endif // _HAS_CXX17
; 740  :     }

	ret	4
??$emplace_back@ABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?A_TABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::emplace_back<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Emplace_back_with_unused_capacity@ABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAE?A_TABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
_<_Val_0>$ = 8						; size = 4
??$_Emplace_back_with_unused_capacity@ABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAE?A_TABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Emplace_back_with_unused_capacity<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * const &>, COMDAT
; _this$ = ecx

; 709  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 710  :         auto& _My_data   = _Mypair._Myval2;
; 711  :         pointer& _Mylast = _My_data._Mylast;
; 712  :         _STL_INTERNAL_CHECK(_Mylast != _My_data._Myend); // check that we have unused capacity
; 713  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _<_Val_0>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 714  :         _Orphan_range(_Mylast, _Mylast);
; 715  :         _Ty& _Result = *_Mylast;
; 716  :         ++_Mylast;

	add	DWORD PTR [ecx+4], 4

; 717  : #if _HAS_CXX17
; 718  :         return _Result;
; 719  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 720  :         (void) _Result;
; 721  : #endif // _HAS_CXX17
; 722  :     }

	ret	4
??$_Emplace_back_with_unused_capacity@ABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAE?A_TABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Emplace_back_with_unused_capacity<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ??A?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEAAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEAAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@I@Z PROC ; xr_vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::operator[], COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 119  :         _Ptr += _Off;

	mov	ecx, DWORD PTR [ecx]
	mov	eax, DWORD PTR __Pos$[esp-4]
	lea	eax, DWORD PTR [ecx+eax*4]
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h

; 138  : 	reference operator[]		(size_type _Pos)					{ {VERIFY(_Pos<size());} return (*(begin() + _Pos)); }

	ret	4
??A?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEAAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@I@Z ENDP ; xr_vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ?size@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QBEIXZ
_TEXT	SEGMENT
?size@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QBEIXZ PROC ; xr_vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::size, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h

; 125  : 	u32		size				() const							{ return (u32)inherited::size();} 

	ret	0
?size@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QBEIXZ ENDP ; xr_vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?end@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ PROC ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::end, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], ecx

; 1472 :         auto& _My_data = _Mypair._Myval2;
; 1473 :         return iterator(_My_data._Mylast, _STD addressof(_My_data));
; 1474 :     }

	ret	4
?end@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ ENDP ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::end
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?begin@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ PROC ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::begin, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], ecx

; 1462 :         auto& _My_data = _Mypair._Myval2;
; 1463 :         return iterator(_My_data._Myfirst, _STD addressof(_My_data));
; 1464 :     }

	ret	4
?begin@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ ENDP ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ??A?$xr_vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEAAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$xr_vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEAAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@I@Z PROC ; xr_vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::operator[], COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 119  :         _Ptr += _Off;

	mov	ecx, DWORD PTR [ecx]
	mov	eax, DWORD PTR __Pos$[esp-4]
	lea	eax, DWORD PTR [ecx+eax*4]
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h

; 138  : 	reference operator[]		(size_type _Pos)					{ {VERIFY(_Pos<size());} return (*(begin() + _Pos)); }

	ret	4
??A?$xr_vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEAAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@I@Z ENDP ; xr_vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ?size@?$xr_vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QBEIXZ
_TEXT	SEGMENT
?size@?$xr_vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QBEIXZ PROC ; xr_vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::size, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h

; 125  : 	u32		size				() const							{ return (u32)inherited::size();} 

	ret	0
?size@?$xr_vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QBEIXZ ENDP ; xr_vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?end@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ PROC ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::end, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], ecx

; 1472 :         auto& _My_data = _Mypair._Myval2;
; 1473 :         return iterator(_My_data._Mylast, _STD addressof(_My_data));
; 1474 :     }

	ret	4
?end@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ ENDP ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::end
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?begin@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ PROC ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::begin, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], ecx

; 1462 :         auto& _My_data = _Mypair._Myval2;
; 1463 :         return iterator(_My_data._Myfirst, _STD addressof(_My_data));
; 1464 :     }

	ret	4
?begin@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ ENDP ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ??A?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEAAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEAAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@I@Z PROC ; xr_vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::operator[], COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 119  :         _Ptr += _Off;

	mov	ecx, DWORD PTR [ecx]
	mov	eax, DWORD PTR __Pos$[esp-4]
	lea	eax, DWORD PTR [ecx+eax*4]
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h

; 138  : 	reference operator[]		(size_type _Pos)					{ {VERIFY(_Pos<size());} return (*(begin() + _Pos)); }

	ret	4
??A?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEAAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@I@Z ENDP ; xr_vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ?size@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QBEIXZ
_TEXT	SEGMENT
?size@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QBEIXZ PROC ; xr_vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::size, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h

; 125  : 	u32		size				() const							{ return (u32)inherited::size();} 

	ret	0
?size@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QBEIXZ ENDP ; xr_vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?end@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ PROC ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::end, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], ecx

; 1472 :         auto& _My_data = _Mypair._Myval2;
; 1473 :         return iterator(_My_data._Mylast, _STD addressof(_My_data));
; 1474 :     }

	ret	4
?end@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ ENDP ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::end
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?begin@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ PROC ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::begin, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], ecx

; 1462 :         auto& _My_data = _Mypair._Myval2;
; 1463 :         return iterator(_My_data._Myfirst, _STD addressof(_My_data));
; 1464 :     }

	ret	4
?begin@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ ENDP ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ??A?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEAAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEAAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@I@Z PROC ; xr_vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::operator[], COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 119  :         _Ptr += _Off;

	mov	ecx, DWORD PTR [ecx]
	mov	eax, DWORD PTR __Pos$[esp-4]
	lea	eax, DWORD PTR [ecx+eax*4]
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h

; 138  : 	reference operator[]		(size_type _Pos)					{ {VERIFY(_Pos<size());} return (*(begin() + _Pos)); }

	ret	4
??A?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEAAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@I@Z ENDP ; xr_vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ?size@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QBEIXZ
_TEXT	SEGMENT
?size@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QBEIXZ PROC ; xr_vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::size, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h

; 125  : 	u32		size				() const							{ return (u32)inherited::size();} 

	ret	0
?size@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QBEIXZ ENDP ; xr_vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?end@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ PROC ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::end, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], ecx

; 1472 :         auto& _My_data = _Mypair._Myval2;
; 1473 :         return iterator(_My_data._Mylast, _STD addressof(_My_data));
; 1474 :     }

	ret	4
?end@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ ENDP ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::end
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?begin@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ PROC ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::begin, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], ecx

; 1462 :         auto& _My_data = _Mypair._Myval2;
; 1463 :         return iterator(_My_data._Myfirst, _STD addressof(_My_data));
; 1464 :     }

	ret	4
?begin@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@XZ ENDP ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ??A?$xr_vector@PAVIRender_Sector@@V?$xalloc@PAVIRender_Sector@@@@@@QAEAAPAVIRender_Sector@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$xr_vector@PAVIRender_Sector@@V?$xalloc@PAVIRender_Sector@@@@@@QAEAAPAVIRender_Sector@@I@Z PROC ; xr_vector<IRender_Sector *,xalloc<IRender_Sector *> >::operator[], COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 119  :         _Ptr += _Off;

	mov	ecx, DWORD PTR [ecx]
	mov	eax, DWORD PTR __Pos$[esp-4]
	lea	eax, DWORD PTR [ecx+eax*4]
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h

; 138  : 	reference operator[]		(size_type _Pos)					{ {VERIFY(_Pos<size());} return (*(begin() + _Pos)); }

	ret	4
??A?$xr_vector@PAVIRender_Sector@@V?$xalloc@PAVIRender_Sector@@@@@@QAEAAPAVIRender_Sector@@I@Z ENDP ; xr_vector<IRender_Sector *,xalloc<IRender_Sector *> >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ?size@?$xr_vector@PAVIRender_Sector@@V?$xalloc@PAVIRender_Sector@@@@@@QBEIXZ
_TEXT	SEGMENT
?size@?$xr_vector@PAVIRender_Sector@@V?$xalloc@PAVIRender_Sector@@@@@@QBEIXZ PROC ; xr_vector<IRender_Sector *,xalloc<IRender_Sector *> >::size, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h

; 125  : 	u32		size				() const							{ return (u32)inherited::size();} 

	ret	0
?size@?$xr_vector@PAVIRender_Sector@@V?$xalloc@PAVIRender_Sector@@@@@@QBEIXZ ENDP ; xr_vector<IRender_Sector *,xalloc<IRender_Sector *> >::size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ??A?$xr_vector@VCFrustum@@V?$xalloc@VCFrustum@@@@@@QAEAAVCFrustum@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$xr_vector@VCFrustum@@V?$xalloc@VCFrustum@@@@@@QAEAAVCFrustum@@I@Z PROC ; xr_vector<CFrustum,xalloc<CFrustum> >::operator[], COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 119  :         _Ptr += _Off;

	imul	eax, DWORD PTR __Pos$[esp-4], 244
	add	eax, DWORD PTR [ecx]
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h

; 138  : 	reference operator[]		(size_type _Pos)					{ {VERIFY(_Pos<size());} return (*(begin() + _Pos)); }

	ret	4
??A?$xr_vector@VCFrustum@@V?$xalloc@VCFrustum@@@@@@QAEAAVCFrustum@@I@Z ENDP ; xr_vector<CFrustum,xalloc<CFrustum> >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ?size@?$xr_vector@VCFrustum@@V?$xalloc@VCFrustum@@@@@@QBEIXZ
_TEXT	SEGMENT
?size@?$xr_vector@VCFrustum@@V?$xalloc@VCFrustum@@@@@@QBEIXZ PROC ; xr_vector<CFrustum,xalloc<CFrustum> >::size, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2
	imul	eax, eax, -1056139499
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h

; 125  : 	u32		size				() const							{ return (u32)inherited::size();} 

	ret	0
?size@?$xr_vector@VCFrustum@@V?$xalloc@VCFrustum@@@@@@QBEIXZ ENDP ; xr_vector<CFrustum,xalloc<CFrustum> >::size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
;	COMDAT ?traverseRL@?$FixedMAP@MU_MatrixItemS@R_dsgraph@@Udoug_lea_allocator@@@@QAEXP6IXPAUTNode@1@@Z@Z
_TEXT	SEGMENT
_CB$dead$ = 8						; size = 4
?traverseRL@?$FixedMAP@MU_MatrixItemS@R_dsgraph@@Udoug_lea_allocator@@@@QAEXP6IXPAUTNode@1@@Z@Z PROC ; FixedMAP<float,R_dsgraph::_MatrixItemS,doug_lea_allocator>::traverseRL, COMDAT
; _this$ = ecx

; 209  : 	{ if (pool) recurseRL(nodes,CB);  }

	push	esi
	mov	esi, ecx
	cmp	DWORD PTR [esi+4], 0
	je	SHORT $LN6@traverseRL
	push	edi
	mov	edi, DWORD PTR [esi]

; 83   : 		if (N->right)	recurseRL(N->right,CB);

	mov	eax, DWORD PTR [edi+88]
	test	eax, eax
	je	SHORT $LN5@traverseRL
	push	ecx
	push	eax
	call	?recurseRL@?$FixedMAP@MU_MatrixItemS@R_dsgraph@@Udoug_lea_allocator@@@@AAEXPAUTNode@1@P6IX0@Z@Z ; FixedMAP<float,R_dsgraph::_MatrixItemS,doug_lea_allocator>::recurseRL
$LN5@traverseRL:

; 84   : 		CB(N);

	mov	ecx, edi
	call	?sorted_L1@@YIXPAUTNode@?$FixedMAP@MU_MatrixItemS@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; sorted_L1

; 85   : 		if (N->left)	recurseRL(N->left,CB);

	mov	eax, DWORD PTR [edi+84]
	pop	edi
	test	eax, eax
	je	SHORT $LN6@traverseRL
	push	ecx
	push	eax
	mov	ecx, esi
	call	?recurseRL@?$FixedMAP@MU_MatrixItemS@R_dsgraph@@Udoug_lea_allocator@@@@AAEXPAUTNode@1@P6IX0@Z@Z ; FixedMAP<float,R_dsgraph::_MatrixItemS,doug_lea_allocator>::recurseRL
$LN6@traverseRL:
	pop	esi

; 209  : 	{ if (pool) recurseRL(nodes,CB);  }

	ret	4
?traverseRL@?$FixedMAP@MU_MatrixItemS@R_dsgraph@@Udoug_lea_allocator@@@@QAEXP6IXPAUTNode@1@@Z@Z ENDP ; FixedMAP<float,R_dsgraph::_MatrixItemS,doug_lea_allocator>::traverseRL
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
;	COMDAT ?traverseLR@?$FixedMAP@MU_MatrixItemS@R_dsgraph@@Udoug_lea_allocator@@@@QAEXP6IXPAUTNode@1@@Z@Z
_TEXT	SEGMENT
_CB$dead$ = 8						; size = 4
?traverseLR@?$FixedMAP@MU_MatrixItemS@R_dsgraph@@Udoug_lea_allocator@@@@QAEXP6IXPAUTNode@1@@Z@Z PROC ; FixedMAP<float,R_dsgraph::_MatrixItemS,doug_lea_allocator>::traverseLR, COMDAT
; _this$ = ecx

; 207  : 	{ if (pool) recurseLR(nodes,CB);  }

	push	esi
	mov	esi, ecx
	cmp	DWORD PTR [esi+4], 0
	je	SHORT $LN6@traverseLR
	push	edi
	mov	edi, DWORD PTR [esi]

; 77   : 		if (N->left)	recurseLR(N->left,CB);

	mov	eax, DWORD PTR [edi+84]
	test	eax, eax
	je	SHORT $LN5@traverseLR
	push	ecx
	push	eax
	call	?recurseLR@?$FixedMAP@MU_MatrixItemS@R_dsgraph@@Udoug_lea_allocator@@@@AAEXPAUTNode@1@P6IX0@Z@Z ; FixedMAP<float,R_dsgraph::_MatrixItemS,doug_lea_allocator>::recurseLR
$LN5@traverseLR:

; 78   : 		CB(N);

	mov	ecx, edi
	call	?sorted_L1@@YIXPAUTNode@?$FixedMAP@MU_MatrixItemS@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; sorted_L1

; 79   : 		if (N->right)	recurseLR(N->right,CB);

	mov	eax, DWORD PTR [edi+88]
	pop	edi
	test	eax, eax
	je	SHORT $LN6@traverseLR
	push	ecx
	push	eax
	mov	ecx, esi
	call	?recurseLR@?$FixedMAP@MU_MatrixItemS@R_dsgraph@@Udoug_lea_allocator@@@@AAEXPAUTNode@1@P6IX0@Z@Z ; FixedMAP<float,R_dsgraph::_MatrixItemS,doug_lea_allocator>::recurseLR
$LN6@traverseLR:
	pop	esi

; 207  : 	{ if (pool) recurseLR(nodes,CB);  }

	ret	4
?traverseLR@?$FixedMAP@MU_MatrixItemS@R_dsgraph@@Udoug_lea_allocator@@@@QAEXP6IXPAUTNode@1@@Z@Z ENDP ; FixedMAP<float,R_dsgraph::_MatrixItemS,doug_lea_allocator>::traverseLR
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
;	COMDAT ?clear@?$FixedMAP@MU_MatrixItemS@R_dsgraph@@Udoug_lea_allocator@@@@QAEXXZ
_TEXT	SEGMENT
?clear@?$FixedMAP@MU_MatrixItemS@R_dsgraph@@Udoug_lea_allocator@@@@QAEXXZ PROC ; FixedMAP<float,R_dsgraph::_MatrixItemS,doug_lea_allocator>::clear, COMDAT
; _this$ = ecx

; 199  : 	IC void		clear()		{ pool=0;				}

	mov	DWORD PTR [ecx+4], 0
	ret	0
?clear@?$FixedMAP@MU_MatrixItemS@R_dsgraph@@Udoug_lea_allocator@@@@QAEXXZ ENDP ; FixedMAP<float,R_dsgraph::_MatrixItemS,doug_lea_allocator>::clear
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
;	COMDAT ?getANY_P@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@QAEXAAV?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@@Z
_TEXT	SEGMENT
_D$ = 8							; size = 4
?getANY_P@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@QAEXAAV?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@@Z PROC ; FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::getANY_P, COMDAT
; _this$ = ecx

; 230  : 	{

	push	ebx
	push	ebp
	push	esi
	push	edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1249 :         pointer& _Mylast    = _My_data._Mylast;

	mov	edi, DWORD PTR _D$[esp+12]
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h

; 230  : 	{

	mov	ebx, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1250 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

	mov	ebp, DWORD PTR [edi+4]
	mov	edx, ebp
	mov	ecx, DWORD PTR [edi]
	sub	edx, ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h

; 231  : 		D.resize			(size());

	mov	esi, DWORD PTR [ebx+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1250 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

	sar	edx, 2

; 1251 :         if (_Newsize < _Oldsize) { // trim

	cmp	esi, edx
	jae	SHORT $LN9@getANY_P

; 1252 :             const pointer _Newlast = _Myfirst + _Newsize;

	lea	eax, DWORD PTR [ecx+esi*4]

; 1253 :             _Orphan_range(_Newlast, _Mylast);
; 1254 :             _Destroy(_Newlast, _Mylast);
; 1255 :             _Mylast = _Newlast;
; 1256 :             return;

	jmp	SHORT $LN42@getANY_P
$LN9@getANY_P:

; 1257 :         }
; 1258 : 
; 1259 :         if (_Newsize > _Oldsize) { // append

	jbe	SHORT $LN10@getANY_P

; 1260 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

	mov	eax, DWORD PTR [edi+8]
	sub	eax, ecx
	sar	eax, 2

; 1261 :             if (_Newsize > _Oldcapacity) { // reallocate

	cmp	esi, eax
	jbe	SHORT $LN11@getANY_P

; 1262 :                 _Resize_reallocate(_Newsize, _Val);

	push	ecx
	push	esi
	mov	ecx, edi
	call	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::_Resize_reallocate<std::_Value_init_tag>

; 1263 :                 return;

	jmp	SHORT $LN10@getANY_P
$LN11@getANY_P:

; 1264 :             }
; 1265 : 
; 1266 :             const pointer _Oldlast = _Mylast;
; 1267 :             _Mylast                = _Ufill(_Oldlast, _Newsize - _Oldsize, _Val);

	sub	esi, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	shl	esi, 2

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	push	esi
	push	0
	push	ebp
	call	_memset
	add	esp, 12					; 0000000cH

; 1808 :             return _First + _Count;

	lea	eax, DWORD PTR [esi+ebp]
$LN42@getANY_P:
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h

; 232  : 		TNode** _it			= &*D.begin();

	mov	DWORD PTR [edi+4], eax
$LN10@getANY_P:

; 201  : 	IC TNode*	end()		{ return nodes+pool;	}

	mov	ecx, DWORD PTR [ebx+4]
	mov	eax, DWORD PTR [ebx]

; 232  : 		TNode** _it			= &*D.begin();

	mov	esi, DWORD PTR [edi]

; 201  : 	IC TNode*	end()		{ return nodes+pool;	}

	lea	edx, DWORD PTR [ecx*8]
	sub	edx, ecx
	lea	ecx, DWORD PTR [eax+edx*4]

; 233  : 		TNode*	_end		= end();
; 234  : 		for (TNode* cur = begin(); cur!=_end; cur++,_it++) *_it = cur;

	cmp	eax, ecx
	je	SHORT $LN3@getANY_P
	npad	7
$LL4@getANY_P:
	mov	DWORD PTR [esi], eax
	lea	esi, DWORD PTR [esi+4]
	add	eax, 28					; 0000001cH
	cmp	eax, ecx
	jne	SHORT $LL4@getANY_P
$LN3@getANY_P:
	pop	edi

; 235  : 	}

	pop	esi
	pop	ebp
	pop	ebx
	ret	4
?getANY_P@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@QAEXAAV?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@@Z ENDP ; FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::getANY_P
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
;	COMDAT ?clear@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@QAEXXZ
_TEXT	SEGMENT
?clear@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@QAEXXZ PROC ; FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::clear, COMDAT
; _this$ = ecx

; 199  : 	IC void		clear()		{ pool=0;				}

	mov	DWORD PTR [ecx+4], 0
	ret	0
?clear@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@QAEXXZ ENDP ; FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::clear
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
;	COMDAT ?getANY_P@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@QAEXAAV?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@@Z
_TEXT	SEGMENT
_D$ = 8							; size = 4
?getANY_P@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@QAEXAAV?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@@Z PROC ; FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::getANY_P, COMDAT
; _this$ = ecx

; 230  : 	{

	push	ebx
	push	ebp
	push	esi
	push	edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1249 :         pointer& _Mylast    = _My_data._Mylast;

	mov	edi, DWORD PTR _D$[esp+12]
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h

; 230  : 	{

	mov	ebx, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1250 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

	mov	ebp, DWORD PTR [edi+4]
	mov	edx, ebp
	mov	ecx, DWORD PTR [edi]
	sub	edx, ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h

; 231  : 		D.resize			(size());

	mov	esi, DWORD PTR [ebx+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1250 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

	sar	edx, 2

; 1251 :         if (_Newsize < _Oldsize) { // trim

	cmp	esi, edx
	jae	SHORT $LN9@getANY_P

; 1252 :             const pointer _Newlast = _Myfirst + _Newsize;

	lea	eax, DWORD PTR [ecx+esi*4]

; 1253 :             _Orphan_range(_Newlast, _Mylast);
; 1254 :             _Destroy(_Newlast, _Mylast);
; 1255 :             _Mylast = _Newlast;
; 1256 :             return;

	jmp	SHORT $LN42@getANY_P
$LN9@getANY_P:

; 1257 :         }
; 1258 : 
; 1259 :         if (_Newsize > _Oldsize) { // append

	jbe	SHORT $LN10@getANY_P

; 1260 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

	mov	eax, DWORD PTR [edi+8]
	sub	eax, ecx
	sar	eax, 2

; 1261 :             if (_Newsize > _Oldcapacity) { // reallocate

	cmp	esi, eax
	jbe	SHORT $LN11@getANY_P

; 1262 :                 _Resize_reallocate(_Newsize, _Val);

	push	ecx
	push	esi
	mov	ecx, edi
	call	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::_Resize_reallocate<std::_Value_init_tag>

; 1263 :                 return;

	jmp	SHORT $LN10@getANY_P
$LN11@getANY_P:

; 1264 :             }
; 1265 : 
; 1266 :             const pointer _Oldlast = _Mylast;
; 1267 :             _Mylast                = _Ufill(_Oldlast, _Newsize - _Oldsize, _Val);

	sub	esi, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	shl	esi, 2

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	push	esi
	push	0
	push	ebp
	call	_memset
	add	esp, 12					; 0000000cH

; 1808 :             return _First + _Count;

	lea	eax, DWORD PTR [esi+ebp]
$LN42@getANY_P:
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h

; 232  : 		TNode** _it			= &*D.begin();

	mov	DWORD PTR [edi+4], eax
$LN10@getANY_P:

; 201  : 	IC TNode*	end()		{ return nodes+pool;	}

	mov	ecx, DWORD PTR [ebx+4]
	mov	eax, DWORD PTR [ebx]

; 232  : 		TNode** _it			= &*D.begin();

	mov	esi, DWORD PTR [edi]

; 201  : 	IC TNode*	end()		{ return nodes+pool;	}

	lea	edx, DWORD PTR [ecx*8]
	sub	edx, ecx
	lea	ecx, DWORD PTR [eax+edx*4]

; 233  : 		TNode*	_end		= end();
; 234  : 		for (TNode* cur = begin(); cur!=_end; cur++,_it++) *_it = cur;

	cmp	eax, ecx
	je	SHORT $LN3@getANY_P
	npad	7
$LL4@getANY_P:
	mov	DWORD PTR [esi], eax
	lea	esi, DWORD PTR [esi+4]
	add	eax, 28					; 0000001cH
	cmp	eax, ecx
	jne	SHORT $LL4@getANY_P
$LN3@getANY_P:
	pop	edi

; 235  : 	}

	pop	esi
	pop	ebp
	pop	ebx
	ret	4
?getANY_P@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@QAEXAAV?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@@Z ENDP ; FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::getANY_P
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
;	COMDAT ?clear@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@QAEXXZ
_TEXT	SEGMENT
?clear@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@QAEXXZ PROC ; FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::clear, COMDAT
; _this$ = ecx

; 199  : 	IC void		clear()		{ pool=0;				}

	mov	DWORD PTR [ecx+4], 0
	ret	0
?clear@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@QAEXXZ ENDP ; FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::clear
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
;	COMDAT ?getANY_P@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@QAEXAAV?$xr_vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@@@Z
_TEXT	SEGMENT
_D$ = 8							; size = 4
?getANY_P@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@QAEXAAV?$xr_vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@@@Z PROC ; FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::getANY_P, COMDAT
; _this$ = ecx

; 230  : 	{

	push	ebx
	push	ebp
	push	esi
	push	edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1249 :         pointer& _Mylast    = _My_data._Mylast;

	mov	edi, DWORD PTR _D$[esp+12]
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h

; 230  : 	{

	mov	ebx, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1250 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

	mov	ebp, DWORD PTR [edi+4]
	mov	edx, ebp
	mov	ecx, DWORD PTR [edi]
	sub	edx, ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h

; 231  : 		D.resize			(size());

	mov	esi, DWORD PTR [ebx+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1250 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

	sar	edx, 2

; 1251 :         if (_Newsize < _Oldsize) { // trim

	cmp	esi, edx
	jae	SHORT $LN9@getANY_P

; 1252 :             const pointer _Newlast = _Myfirst + _Newsize;

	lea	eax, DWORD PTR [ecx+esi*4]

; 1253 :             _Orphan_range(_Newlast, _Mylast);
; 1254 :             _Destroy(_Newlast, _Mylast);
; 1255 :             _Mylast = _Newlast;
; 1256 :             return;

	jmp	SHORT $LN42@getANY_P
$LN9@getANY_P:

; 1257 :         }
; 1258 : 
; 1259 :         if (_Newsize > _Oldsize) { // append

	jbe	SHORT $LN10@getANY_P

; 1260 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

	mov	eax, DWORD PTR [edi+8]
	sub	eax, ecx
	sar	eax, 2

; 1261 :             if (_Newsize > _Oldcapacity) { // reallocate

	cmp	esi, eax
	jbe	SHORT $LN11@getANY_P

; 1262 :                 _Resize_reallocate(_Newsize, _Val);

	push	ecx
	push	esi
	mov	ecx, edi
	call	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::_Resize_reallocate<std::_Value_init_tag>

; 1263 :                 return;

	jmp	SHORT $LN10@getANY_P
$LN11@getANY_P:

; 1264 :             }
; 1265 : 
; 1266 :             const pointer _Oldlast = _Mylast;
; 1267 :             _Mylast                = _Ufill(_Oldlast, _Newsize - _Oldsize, _Val);

	sub	esi, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	shl	esi, 2

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	push	esi
	push	0
	push	ebp
	call	_memset
	add	esp, 12					; 0000000cH

; 1808 :             return _First + _Count;

	lea	eax, DWORD PTR [esi+ebp]
$LN42@getANY_P:
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h

; 232  : 		TNode** _it			= &*D.begin();

	mov	DWORD PTR [edi+4], eax
$LN10@getANY_P:

; 201  : 	IC TNode*	end()		{ return nodes+pool;	}

	mov	ecx, DWORD PTR [ebx+4]
	mov	eax, DWORD PTR [ebx]

; 232  : 		TNode** _it			= &*D.begin();

	mov	esi, DWORD PTR [edi]

; 201  : 	IC TNode*	end()		{ return nodes+pool;	}

	lea	edx, DWORD PTR [ecx*8]
	sub	edx, ecx
	lea	ecx, DWORD PTR [eax+edx*4]

; 233  : 		TNode*	_end		= end();
; 234  : 		for (TNode* cur = begin(); cur!=_end; cur++,_it++) *_it = cur;

	cmp	eax, ecx
	je	SHORT $LN3@getANY_P
	npad	7
$LL4@getANY_P:
	mov	DWORD PTR [esi], eax
	lea	esi, DWORD PTR [esi+4]
	add	eax, 28					; 0000001cH
	cmp	eax, ecx
	jne	SHORT $LL4@getANY_P
$LN3@getANY_P:
	pop	edi

; 235  : 	}

	pop	esi
	pop	ebp
	pop	ebx
	ret	4
?getANY_P@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@QAEXAAV?$xr_vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@@@Z ENDP ; FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::getANY_P
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
;	COMDAT ?clear@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@QAEXXZ
_TEXT	SEGMENT
?clear@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@QAEXXZ PROC ; FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::clear, COMDAT
; _this$ = ecx

; 199  : 	IC void		clear()		{ pool=0;				}

	mov	DWORD PTR [ecx+4], 0
	ret	0
?clear@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@QAEXXZ ENDP ; FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::clear
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
;	COMDAT ?getANY_P@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAEXAAV?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@@@Z
_TEXT	SEGMENT
_D$ = 8							; size = 4
?getANY_P@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAEXAAV?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@@@Z PROC ; FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::getANY_P, COMDAT
; _this$ = ecx

; 230  : 	{

	push	ebx
	push	ebp
	push	esi
	push	edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1249 :         pointer& _Mylast    = _My_data._Mylast;

	mov	edi, DWORD PTR _D$[esp+12]
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h

; 230  : 	{

	mov	ebx, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1250 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

	mov	ebp, DWORD PTR [edi+4]
	mov	edx, ebp
	mov	ecx, DWORD PTR [edi]
	sub	edx, ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h

; 231  : 		D.resize			(size());

	mov	esi, DWORD PTR [ebx+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1250 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

	sar	edx, 2

; 1251 :         if (_Newsize < _Oldsize) { // trim

	cmp	esi, edx
	jae	SHORT $LN9@getANY_P

; 1252 :             const pointer _Newlast = _Myfirst + _Newsize;

	lea	eax, DWORD PTR [ecx+esi*4]

; 1253 :             _Orphan_range(_Newlast, _Mylast);
; 1254 :             _Destroy(_Newlast, _Mylast);
; 1255 :             _Mylast = _Newlast;
; 1256 :             return;

	jmp	SHORT $LN42@getANY_P
$LN9@getANY_P:

; 1257 :         }
; 1258 : 
; 1259 :         if (_Newsize > _Oldsize) { // append

	jbe	SHORT $LN10@getANY_P

; 1260 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

	mov	eax, DWORD PTR [edi+8]
	sub	eax, ecx
	sar	eax, 2

; 1261 :             if (_Newsize > _Oldcapacity) { // reallocate

	cmp	esi, eax
	jbe	SHORT $LN11@getANY_P

; 1262 :                 _Resize_reallocate(_Newsize, _Val);

	push	ecx
	push	esi
	mov	ecx, edi
	call	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::_Resize_reallocate<std::_Value_init_tag>

; 1263 :                 return;

	jmp	SHORT $LN10@getANY_P
$LN11@getANY_P:

; 1264 :             }
; 1265 : 
; 1266 :             const pointer _Oldlast = _Mylast;
; 1267 :             _Mylast                = _Ufill(_Oldlast, _Newsize - _Oldsize, _Val);

	sub	esi, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	shl	esi, 2

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	push	esi
	push	0
	push	ebp
	call	_memset
	add	esp, 12					; 0000000cH

; 1808 :             return _First + _Count;

	lea	eax, DWORD PTR [esi+ebp]
$LN42@getANY_P:
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h

; 232  : 		TNode** _it			= &*D.begin();

	mov	DWORD PTR [edi+4], eax
$LN10@getANY_P:

; 201  : 	IC TNode*	end()		{ return nodes+pool;	}

	mov	ecx, DWORD PTR [ebx+4]
	mov	eax, DWORD PTR [ebx]

; 232  : 		TNode** _it			= &*D.begin();

	mov	esi, DWORD PTR [edi]

; 201  : 	IC TNode*	end()		{ return nodes+pool;	}

	lea	edx, DWORD PTR [ecx*8]
	sub	edx, ecx
	lea	ecx, DWORD PTR [eax+edx*4]

; 233  : 		TNode*	_end		= end();
; 234  : 		for (TNode* cur = begin(); cur!=_end; cur++,_it++) *_it = cur;

	cmp	eax, ecx
	je	SHORT $LN3@getANY_P
	npad	7
$LL4@getANY_P:
	mov	DWORD PTR [esi], eax
	lea	esi, DWORD PTR [esi+4]
	add	eax, 28					; 0000001cH
	cmp	eax, ecx
	jne	SHORT $LL4@getANY_P
$LN3@getANY_P:
	pop	edi

; 235  : 	}

	pop	esi
	pop	ebp
	pop	ebx
	ret	4
?getANY_P@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAEXAAV?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@@@Z ENDP ; FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::getANY_P
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
;	COMDAT ?clear@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAEXXZ
_TEXT	SEGMENT
?clear@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAEXXZ PROC ; FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::clear, COMDAT
; _this$ = ecx

; 199  : 	IC void		clear()		{ pool=0;				}

	mov	DWORD PTR [ecx+4], 0
	ret	0
?clear@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAEXXZ ENDP ; FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::clear
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
;	COMDAT ?getANY_P@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@QAEXAAV?$xr_vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@@@Z
_TEXT	SEGMENT
_D$ = 8							; size = 4
?getANY_P@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@QAEXAAV?$xr_vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@@@Z PROC ; FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::getANY_P, COMDAT
; _this$ = ecx

; 230  : 	{

	push	ebx
	push	ebp
	push	esi
	push	edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1249 :         pointer& _Mylast    = _My_data._Mylast;

	mov	edi, DWORD PTR _D$[esp+12]
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h

; 230  : 	{

	mov	ebx, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1250 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

	mov	ebp, DWORD PTR [edi+4]
	mov	edx, ebp
	mov	ecx, DWORD PTR [edi]
	sub	edx, ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h

; 231  : 		D.resize			(size());

	mov	esi, DWORD PTR [ebx+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1250 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

	sar	edx, 2

; 1251 :         if (_Newsize < _Oldsize) { // trim

	cmp	esi, edx
	jae	SHORT $LN9@getANY_P

; 1252 :             const pointer _Newlast = _Myfirst + _Newsize;

	lea	eax, DWORD PTR [ecx+esi*4]

; 1253 :             _Orphan_range(_Newlast, _Mylast);
; 1254 :             _Destroy(_Newlast, _Mylast);
; 1255 :             _Mylast = _Newlast;
; 1256 :             return;

	jmp	SHORT $LN42@getANY_P
$LN9@getANY_P:

; 1257 :         }
; 1258 : 
; 1259 :         if (_Newsize > _Oldsize) { // append

	jbe	SHORT $LN10@getANY_P

; 1260 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

	mov	eax, DWORD PTR [edi+8]
	sub	eax, ecx
	sar	eax, 2

; 1261 :             if (_Newsize > _Oldcapacity) { // reallocate

	cmp	esi, eax
	jbe	SHORT $LN11@getANY_P

; 1262 :                 _Resize_reallocate(_Newsize, _Val);

	push	ecx
	push	esi
	mov	ecx, edi
	call	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Resize_reallocate<std::_Value_init_tag>

; 1263 :                 return;

	jmp	SHORT $LN10@getANY_P
$LN11@getANY_P:

; 1264 :             }
; 1265 : 
; 1266 :             const pointer _Oldlast = _Mylast;
; 1267 :             _Mylast                = _Ufill(_Oldlast, _Newsize - _Oldsize, _Val);

	sub	esi, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	shl	esi, 2

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	push	esi
	push	0
	push	ebp
	call	_memset
	add	esp, 12					; 0000000cH

; 1808 :             return _First + _Count;

	lea	eax, DWORD PTR [esi+ebp]
$LN42@getANY_P:
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h

; 232  : 		TNode** _it			= &*D.begin();

	mov	DWORD PTR [edi+4], eax
$LN10@getANY_P:

; 201  : 	IC TNode*	end()		{ return nodes+pool;	}

	mov	ecx, DWORD PTR [ebx+4]
	mov	eax, DWORD PTR [ebx]

; 232  : 		TNode** _it			= &*D.begin();

	mov	esi, DWORD PTR [edi]

; 201  : 	IC TNode*	end()		{ return nodes+pool;	}

	lea	edx, DWORD PTR [ecx*8]
	sub	edx, ecx
	lea	ecx, DWORD PTR [eax+edx*4]

; 233  : 		TNode*	_end		= end();
; 234  : 		for (TNode* cur = begin(); cur!=_end; cur++,_it++) *_it = cur;

	cmp	eax, ecx
	je	SHORT $LN3@getANY_P
	npad	7
$LL4@getANY_P:
	mov	DWORD PTR [esi], eax
	lea	esi, DWORD PTR [esi+4]
	add	eax, 28					; 0000001cH
	cmp	eax, ecx
	jne	SHORT $LL4@getANY_P
$LN3@getANY_P:
	pop	edi

; 235  : 	}

	pop	esi
	pop	ebp
	pop	ebx
	ret	4
?getANY_P@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@QAEXAAV?$xr_vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@@@Z ENDP ; FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::getANY_P
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
;	COMDAT ?end@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ
_TEXT	SEGMENT
?end@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ PROC ; FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::end, COMDAT
; _this$ = ecx

; 201  : 	IC TNode*	end()		{ return nodes+pool;	}

	mov	eax, DWORD PTR [ecx+4]
	lea	edx, DWORD PTR [eax*8]
	sub	edx, eax
	mov	eax, DWORD PTR [ecx]
	lea	eax, DWORD PTR [eax+edx*4]
	ret	0
?end@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ ENDP ; FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::end
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
;	COMDAT ?clear@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@QAEXXZ
_TEXT	SEGMENT
?clear@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@QAEXXZ PROC ; FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::clear, COMDAT
; _this$ = ecx

; 199  : 	IC void		clear()		{ pool=0;				}

	mov	DWORD PTR [ecx+4], 0
	ret	0
?clear@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@QAEXXZ ENDP ; FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::clear
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ?clear@?$xr_vector@U_MatrixItem@R_dsgraph@@V?$doug_lea_alloc@U_MatrixItem@R_dsgraph@@@@@@QAEXXZ
_TEXT	SEGMENT
?clear@?$xr_vector@U_MatrixItem@R_dsgraph@@V?$doug_lea_alloc@U_MatrixItem@R_dsgraph@@@@@@QAEXXZ PROC ; xr_vector<R_dsgraph::_MatrixItem,doug_lea_alloc<R_dsgraph::_MatrixItem> >::clear, COMDAT
; _this$ = ecx

; 132  : 	void	clear				()									{ clear_and_free	();			}

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [ecx+4], eax
	ret	0
?clear@?$xr_vector@U_MatrixItem@R_dsgraph@@V?$doug_lea_alloc@U_MatrixItem@R_dsgraph@@@@@@QAEXXZ ENDP ; xr_vector<R_dsgraph::_MatrixItem,doug_lea_alloc<R_dsgraph::_MatrixItem> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?end@?$vector@U_MatrixItem@R_dsgraph@@V?$doug_lea_alloc@U_MatrixItem@R_dsgraph@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_MatrixItem@R_dsgraph@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@U_MatrixItem@R_dsgraph@@V?$doug_lea_alloc@U_MatrixItem@R_dsgraph@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_MatrixItem@R_dsgraph@@@std@@@std@@@2@XZ PROC ; std::vector<R_dsgraph::_MatrixItem,doug_lea_alloc<R_dsgraph::_MatrixItem> >::end, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], ecx

; 1472 :         auto& _My_data = _Mypair._Myval2;
; 1473 :         return iterator(_My_data._Mylast, _STD addressof(_My_data));
; 1474 :     }

	ret	4
?end@?$vector@U_MatrixItem@R_dsgraph@@V?$doug_lea_alloc@U_MatrixItem@R_dsgraph@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_MatrixItem@R_dsgraph@@@std@@@std@@@2@XZ ENDP ; std::vector<R_dsgraph::_MatrixItem,doug_lea_alloc<R_dsgraph::_MatrixItem> >::end
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?begin@?$vector@U_MatrixItem@R_dsgraph@@V?$doug_lea_alloc@U_MatrixItem@R_dsgraph@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_MatrixItem@R_dsgraph@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@U_MatrixItem@R_dsgraph@@V?$doug_lea_alloc@U_MatrixItem@R_dsgraph@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_MatrixItem@R_dsgraph@@@std@@@std@@@2@XZ PROC ; std::vector<R_dsgraph::_MatrixItem,doug_lea_alloc<R_dsgraph::_MatrixItem> >::begin, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], ecx

; 1462 :         auto& _My_data = _Mypair._Myval2;
; 1463 :         return iterator(_My_data._Myfirst, _STD addressof(_My_data));
; 1464 :     }

	ret	4
?begin@?$vector@U_MatrixItem@R_dsgraph@@V?$doug_lea_alloc@U_MatrixItem@R_dsgraph@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_MatrixItem@R_dsgraph@@@std@@@std@@@2@XZ ENDP ; std::vector<R_dsgraph::_MatrixItem,doug_lea_alloc<R_dsgraph::_MatrixItem> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
;	COMDAT ?getANY_P@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@QAEXAAV?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@@Z
_TEXT	SEGMENT
_D$ = 8							; size = 4
?getANY_P@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@QAEXAAV?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@@Z PROC ; FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::getANY_P, COMDAT
; _this$ = ecx

; 230  : 	{

	push	ebx
	push	ebp
	push	esi
	push	edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1249 :         pointer& _Mylast    = _My_data._Mylast;

	mov	edi, DWORD PTR _D$[esp+12]
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h

; 230  : 	{

	mov	ebx, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1250 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

	mov	ebp, DWORD PTR [edi+4]
	mov	edx, ebp
	mov	ecx, DWORD PTR [edi]
	sub	edx, ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h

; 231  : 		D.resize			(size());

	mov	esi, DWORD PTR [ebx+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1250 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

	sar	edx, 2

; 1251 :         if (_Newsize < _Oldsize) { // trim

	cmp	esi, edx
	jae	SHORT $LN9@getANY_P

; 1252 :             const pointer _Newlast = _Myfirst + _Newsize;

	lea	eax, DWORD PTR [ecx+esi*4]

; 1253 :             _Orphan_range(_Newlast, _Mylast);
; 1254 :             _Destroy(_Newlast, _Mylast);
; 1255 :             _Mylast = _Newlast;
; 1256 :             return;

	jmp	SHORT $LN42@getANY_P
$LN9@getANY_P:

; 1257 :         }
; 1258 : 
; 1259 :         if (_Newsize > _Oldsize) { // append

	jbe	SHORT $LN10@getANY_P

; 1260 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

	mov	eax, DWORD PTR [edi+8]
	sub	eax, ecx
	sar	eax, 2

; 1261 :             if (_Newsize > _Oldcapacity) { // reallocate

	cmp	esi, eax
	jbe	SHORT $LN11@getANY_P

; 1262 :                 _Resize_reallocate(_Newsize, _Val);

	push	ecx
	push	esi
	mov	ecx, edi
	call	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::_Resize_reallocate<std::_Value_init_tag>

; 1263 :                 return;

	jmp	SHORT $LN10@getANY_P
$LN11@getANY_P:

; 1264 :             }
; 1265 : 
; 1266 :             const pointer _Oldlast = _Mylast;
; 1267 :             _Mylast                = _Ufill(_Oldlast, _Newsize - _Oldsize, _Val);

	sub	esi, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	shl	esi, 2

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	push	esi
	push	0
	push	ebp
	call	_memset
	add	esp, 12					; 0000000cH

; 1808 :             return _First + _Count;

	lea	eax, DWORD PTR [esi+ebp]
$LN42@getANY_P:
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h

; 232  : 		TNode** _it			= &*D.begin();

	mov	DWORD PTR [edi+4], eax
$LN10@getANY_P:

; 201  : 	IC TNode*	end()		{ return nodes+pool;	}

	mov	ecx, DWORD PTR [ebx+4]
	mov	eax, DWORD PTR [ebx]

; 232  : 		TNode** _it			= &*D.begin();

	mov	esi, DWORD PTR [edi]

; 201  : 	IC TNode*	end()		{ return nodes+pool;	}

	lea	edx, DWORD PTR [ecx*8]
	sub	edx, ecx
	lea	ecx, DWORD PTR [eax+edx*4]

; 233  : 		TNode*	_end		= end();
; 234  : 		for (TNode* cur = begin(); cur!=_end; cur++,_it++) *_it = cur;

	cmp	eax, ecx
	je	SHORT $LN3@getANY_P
	npad	7
$LL4@getANY_P:
	mov	DWORD PTR [esi], eax
	lea	esi, DWORD PTR [esi+4]
	add	eax, 28					; 0000001cH
	cmp	eax, ecx
	jne	SHORT $LL4@getANY_P
$LN3@getANY_P:
	pop	edi

; 235  : 	}

	pop	esi
	pop	ebp
	pop	ebx
	ret	4
?getANY_P@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@QAEXAAV?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@@Z ENDP ; FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::getANY_P
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
;	COMDAT ?clear@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@QAEXXZ
_TEXT	SEGMENT
?clear@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@QAEXXZ PROC ; FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::clear, COMDAT
; _this$ = ecx

; 199  : 	IC void		clear()		{ pool=0;				}

	mov	DWORD PTR [ecx+4], 0
	ret	0
?clear@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@QAEXXZ ENDP ; FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::clear
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
;	COMDAT ?getANY_P@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@QAEXAAV?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@@Z
_TEXT	SEGMENT
_D$ = 8							; size = 4
?getANY_P@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@QAEXAAV?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@@Z PROC ; FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::getANY_P, COMDAT
; _this$ = ecx

; 230  : 	{

	push	ebx
	push	ebp
	push	esi
	push	edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1249 :         pointer& _Mylast    = _My_data._Mylast;

	mov	edi, DWORD PTR _D$[esp+12]
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h

; 230  : 	{

	mov	ebx, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1250 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

	mov	ebp, DWORD PTR [edi+4]
	mov	edx, ebp
	mov	ecx, DWORD PTR [edi]
	sub	edx, ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h

; 231  : 		D.resize			(size());

	mov	esi, DWORD PTR [ebx+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1250 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

	sar	edx, 2

; 1251 :         if (_Newsize < _Oldsize) { // trim

	cmp	esi, edx
	jae	SHORT $LN9@getANY_P

; 1252 :             const pointer _Newlast = _Myfirst + _Newsize;

	lea	eax, DWORD PTR [ecx+esi*4]

; 1253 :             _Orphan_range(_Newlast, _Mylast);
; 1254 :             _Destroy(_Newlast, _Mylast);
; 1255 :             _Mylast = _Newlast;
; 1256 :             return;

	jmp	SHORT $LN42@getANY_P
$LN9@getANY_P:

; 1257 :         }
; 1258 : 
; 1259 :         if (_Newsize > _Oldsize) { // append

	jbe	SHORT $LN10@getANY_P

; 1260 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

	mov	eax, DWORD PTR [edi+8]
	sub	eax, ecx
	sar	eax, 2

; 1261 :             if (_Newsize > _Oldcapacity) { // reallocate

	cmp	esi, eax
	jbe	SHORT $LN11@getANY_P

; 1262 :                 _Resize_reallocate(_Newsize, _Val);

	push	ecx
	push	esi
	mov	ecx, edi
	call	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::_Resize_reallocate<std::_Value_init_tag>

; 1263 :                 return;

	jmp	SHORT $LN10@getANY_P
$LN11@getANY_P:

; 1264 :             }
; 1265 : 
; 1266 :             const pointer _Oldlast = _Mylast;
; 1267 :             _Mylast                = _Ufill(_Oldlast, _Newsize - _Oldsize, _Val);

	sub	esi, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	shl	esi, 2

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	push	esi
	push	0
	push	ebp
	call	_memset
	add	esp, 12					; 0000000cH

; 1808 :             return _First + _Count;

	lea	eax, DWORD PTR [esi+ebp]
$LN42@getANY_P:
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h

; 232  : 		TNode** _it			= &*D.begin();

	mov	DWORD PTR [edi+4], eax
$LN10@getANY_P:

; 201  : 	IC TNode*	end()		{ return nodes+pool;	}

	mov	ecx, DWORD PTR [ebx+4]
	mov	eax, DWORD PTR [ebx]

; 232  : 		TNode** _it			= &*D.begin();

	mov	esi, DWORD PTR [edi]

; 201  : 	IC TNode*	end()		{ return nodes+pool;	}

	lea	edx, DWORD PTR [ecx*8]
	sub	edx, ecx
	lea	ecx, DWORD PTR [eax+edx*4]

; 233  : 		TNode*	_end		= end();
; 234  : 		for (TNode* cur = begin(); cur!=_end; cur++,_it++) *_it = cur;

	cmp	eax, ecx
	je	SHORT $LN3@getANY_P
	npad	7
$LL4@getANY_P:
	mov	DWORD PTR [esi], eax
	lea	esi, DWORD PTR [esi+4]
	add	eax, 28					; 0000001cH
	cmp	eax, ecx
	jne	SHORT $LL4@getANY_P
$LN3@getANY_P:
	pop	edi

; 235  : 	}

	pop	esi
	pop	ebp
	pop	ebx
	ret	4
?getANY_P@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@QAEXAAV?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@@Z ENDP ; FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::getANY_P
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
;	COMDAT ?clear@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@QAEXXZ
_TEXT	SEGMENT
?clear@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@QAEXXZ PROC ; FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::clear, COMDAT
; _this$ = ecx

; 199  : 	IC void		clear()		{ pool=0;				}

	mov	DWORD PTR [ecx+4], 0
	ret	0
?clear@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@QAEXXZ ENDP ; FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::clear
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
;	COMDAT ?getANY_P@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@QAEXAAV?$xr_vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@@@Z
_TEXT	SEGMENT
_D$ = 8							; size = 4
?getANY_P@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@QAEXAAV?$xr_vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@@@Z PROC ; FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::getANY_P, COMDAT
; _this$ = ecx

; 230  : 	{

	push	ebx
	push	ebp
	push	esi
	push	edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1249 :         pointer& _Mylast    = _My_data._Mylast;

	mov	edi, DWORD PTR _D$[esp+12]
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h

; 230  : 	{

	mov	ebx, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1250 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

	mov	ebp, DWORD PTR [edi+4]
	mov	edx, ebp
	mov	ecx, DWORD PTR [edi]
	sub	edx, ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h

; 231  : 		D.resize			(size());

	mov	esi, DWORD PTR [ebx+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1250 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

	sar	edx, 2

; 1251 :         if (_Newsize < _Oldsize) { // trim

	cmp	esi, edx
	jae	SHORT $LN9@getANY_P

; 1252 :             const pointer _Newlast = _Myfirst + _Newsize;

	lea	eax, DWORD PTR [ecx+esi*4]

; 1253 :             _Orphan_range(_Newlast, _Mylast);
; 1254 :             _Destroy(_Newlast, _Mylast);
; 1255 :             _Mylast = _Newlast;
; 1256 :             return;

	jmp	SHORT $LN42@getANY_P
$LN9@getANY_P:

; 1257 :         }
; 1258 : 
; 1259 :         if (_Newsize > _Oldsize) { // append

	jbe	SHORT $LN10@getANY_P

; 1260 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

	mov	eax, DWORD PTR [edi+8]
	sub	eax, ecx
	sar	eax, 2

; 1261 :             if (_Newsize > _Oldcapacity) { // reallocate

	cmp	esi, eax
	jbe	SHORT $LN11@getANY_P

; 1262 :                 _Resize_reallocate(_Newsize, _Val);

	push	ecx
	push	esi
	mov	ecx, edi
	call	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::_Resize_reallocate<std::_Value_init_tag>

; 1263 :                 return;

	jmp	SHORT $LN10@getANY_P
$LN11@getANY_P:

; 1264 :             }
; 1265 : 
; 1266 :             const pointer _Oldlast = _Mylast;
; 1267 :             _Mylast                = _Ufill(_Oldlast, _Newsize - _Oldsize, _Val);

	sub	esi, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	shl	esi, 2

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	push	esi
	push	0
	push	ebp
	call	_memset
	add	esp, 12					; 0000000cH

; 1808 :             return _First + _Count;

	lea	eax, DWORD PTR [esi+ebp]
$LN42@getANY_P:
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h

; 232  : 		TNode** _it			= &*D.begin();

	mov	DWORD PTR [edi+4], eax
$LN10@getANY_P:

; 201  : 	IC TNode*	end()		{ return nodes+pool;	}

	mov	ecx, DWORD PTR [ebx+4]
	mov	eax, DWORD PTR [ebx]

; 232  : 		TNode** _it			= &*D.begin();

	mov	esi, DWORD PTR [edi]

; 201  : 	IC TNode*	end()		{ return nodes+pool;	}

	lea	edx, DWORD PTR [ecx*8]
	sub	edx, ecx
	lea	ecx, DWORD PTR [eax+edx*4]

; 233  : 		TNode*	_end		= end();
; 234  : 		for (TNode* cur = begin(); cur!=_end; cur++,_it++) *_it = cur;

	cmp	eax, ecx
	je	SHORT $LN3@getANY_P
	npad	7
$LL4@getANY_P:
	mov	DWORD PTR [esi], eax
	lea	esi, DWORD PTR [esi+4]
	add	eax, 28					; 0000001cH
	cmp	eax, ecx
	jne	SHORT $LL4@getANY_P
$LN3@getANY_P:
	pop	edi

; 235  : 	}

	pop	esi
	pop	ebp
	pop	ebx
	ret	4
?getANY_P@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@QAEXAAV?$xr_vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@@@Z ENDP ; FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::getANY_P
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
;	COMDAT ?clear@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@QAEXXZ
_TEXT	SEGMENT
?clear@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@QAEXXZ PROC ; FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::clear, COMDAT
; _this$ = ecx

; 199  : 	IC void		clear()		{ pool=0;				}

	mov	DWORD PTR [ecx+4], 0
	ret	0
?clear@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@QAEXXZ ENDP ; FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::clear
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
;	COMDAT ?getANY_P@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAEXAAV?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@@@Z
_TEXT	SEGMENT
_D$ = 8							; size = 4
?getANY_P@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAEXAAV?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@@@Z PROC ; FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::getANY_P, COMDAT
; _this$ = ecx

; 230  : 	{

	push	ebx
	push	ebp
	push	esi
	push	edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1249 :         pointer& _Mylast    = _My_data._Mylast;

	mov	edi, DWORD PTR _D$[esp+12]
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h

; 230  : 	{

	mov	ebx, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1250 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

	mov	ebp, DWORD PTR [edi+4]
	mov	edx, ebp
	mov	ecx, DWORD PTR [edi]
	sub	edx, ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h

; 231  : 		D.resize			(size());

	mov	esi, DWORD PTR [ebx+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1250 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

	sar	edx, 2

; 1251 :         if (_Newsize < _Oldsize) { // trim

	cmp	esi, edx
	jae	SHORT $LN9@getANY_P

; 1252 :             const pointer _Newlast = _Myfirst + _Newsize;

	lea	eax, DWORD PTR [ecx+esi*4]

; 1253 :             _Orphan_range(_Newlast, _Mylast);
; 1254 :             _Destroy(_Newlast, _Mylast);
; 1255 :             _Mylast = _Newlast;
; 1256 :             return;

	jmp	SHORT $LN42@getANY_P
$LN9@getANY_P:

; 1257 :         }
; 1258 : 
; 1259 :         if (_Newsize > _Oldsize) { // append

	jbe	SHORT $LN10@getANY_P

; 1260 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

	mov	eax, DWORD PTR [edi+8]
	sub	eax, ecx
	sar	eax, 2

; 1261 :             if (_Newsize > _Oldcapacity) { // reallocate

	cmp	esi, eax
	jbe	SHORT $LN11@getANY_P

; 1262 :                 _Resize_reallocate(_Newsize, _Val);

	push	ecx
	push	esi
	mov	ecx, edi
	call	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::_Resize_reallocate<std::_Value_init_tag>

; 1263 :                 return;

	jmp	SHORT $LN10@getANY_P
$LN11@getANY_P:

; 1264 :             }
; 1265 : 
; 1266 :             const pointer _Oldlast = _Mylast;
; 1267 :             _Mylast                = _Ufill(_Oldlast, _Newsize - _Oldsize, _Val);

	sub	esi, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	shl	esi, 2

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	push	esi
	push	0
	push	ebp
	call	_memset
	add	esp, 12					; 0000000cH

; 1808 :             return _First + _Count;

	lea	eax, DWORD PTR [esi+ebp]
$LN42@getANY_P:
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h

; 232  : 		TNode** _it			= &*D.begin();

	mov	DWORD PTR [edi+4], eax
$LN10@getANY_P:

; 201  : 	IC TNode*	end()		{ return nodes+pool;	}

	mov	ecx, DWORD PTR [ebx+4]
	mov	eax, DWORD PTR [ebx]

; 232  : 		TNode** _it			= &*D.begin();

	mov	esi, DWORD PTR [edi]

; 201  : 	IC TNode*	end()		{ return nodes+pool;	}

	lea	edx, DWORD PTR [ecx*8]
	sub	edx, ecx
	lea	ecx, DWORD PTR [eax+edx*4]

; 233  : 		TNode*	_end		= end();
; 234  : 		for (TNode* cur = begin(); cur!=_end; cur++,_it++) *_it = cur;

	cmp	eax, ecx
	je	SHORT $LN3@getANY_P
	npad	7
$LL4@getANY_P:
	mov	DWORD PTR [esi], eax
	lea	esi, DWORD PTR [esi+4]
	add	eax, 28					; 0000001cH
	cmp	eax, ecx
	jne	SHORT $LL4@getANY_P
$LN3@getANY_P:
	pop	edi

; 235  : 	}

	pop	esi
	pop	ebp
	pop	ebx
	ret	4
?getANY_P@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAEXAAV?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@@@Z ENDP ; FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::getANY_P
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
;	COMDAT ?clear@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAEXXZ
_TEXT	SEGMENT
?clear@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAEXXZ PROC ; FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::clear, COMDAT
; _this$ = ecx

; 199  : 	IC void		clear()		{ pool=0;				}

	mov	DWORD PTR [ecx+4], 0
	ret	0
?clear@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAEXXZ ENDP ; FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::clear
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
;	COMDAT ?getANY_P@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@QAEXAAV?$xr_vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@@@Z
_TEXT	SEGMENT
_D$ = 8							; size = 4
?getANY_P@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@QAEXAAV?$xr_vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@@@Z PROC ; FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::getANY_P, COMDAT
; _this$ = ecx

; 230  : 	{

	push	ebx
	push	ebp
	push	esi
	push	edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1249 :         pointer& _Mylast    = _My_data._Mylast;

	mov	edi, DWORD PTR _D$[esp+12]
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h

; 230  : 	{

	mov	ebx, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1250 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

	mov	ebp, DWORD PTR [edi+4]
	mov	edx, ebp
	mov	ecx, DWORD PTR [edi]
	sub	edx, ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h

; 231  : 		D.resize			(size());

	mov	esi, DWORD PTR [ebx+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1250 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

	sar	edx, 2

; 1251 :         if (_Newsize < _Oldsize) { // trim

	cmp	esi, edx
	jae	SHORT $LN9@getANY_P

; 1252 :             const pointer _Newlast = _Myfirst + _Newsize;

	lea	eax, DWORD PTR [ecx+esi*4]

; 1253 :             _Orphan_range(_Newlast, _Mylast);
; 1254 :             _Destroy(_Newlast, _Mylast);
; 1255 :             _Mylast = _Newlast;
; 1256 :             return;

	jmp	SHORT $LN42@getANY_P
$LN9@getANY_P:

; 1257 :         }
; 1258 : 
; 1259 :         if (_Newsize > _Oldsize) { // append

	jbe	SHORT $LN10@getANY_P

; 1260 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

	mov	eax, DWORD PTR [edi+8]
	sub	eax, ecx
	sar	eax, 2

; 1261 :             if (_Newsize > _Oldcapacity) { // reallocate

	cmp	esi, eax
	jbe	SHORT $LN11@getANY_P

; 1262 :                 _Resize_reallocate(_Newsize, _Val);

	push	ecx
	push	esi
	mov	ecx, edi
	call	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Resize_reallocate<std::_Value_init_tag>

; 1263 :                 return;

	jmp	SHORT $LN10@getANY_P
$LN11@getANY_P:

; 1264 :             }
; 1265 : 
; 1266 :             const pointer _Oldlast = _Mylast;
; 1267 :             _Mylast                = _Ufill(_Oldlast, _Newsize - _Oldsize, _Val);

	sub	esi, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	shl	esi, 2

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	push	esi
	push	0
	push	ebp
	call	_memset
	add	esp, 12					; 0000000cH

; 1808 :             return _First + _Count;

	lea	eax, DWORD PTR [esi+ebp]
$LN42@getANY_P:
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h

; 232  : 		TNode** _it			= &*D.begin();

	mov	DWORD PTR [edi+4], eax
$LN10@getANY_P:

; 201  : 	IC TNode*	end()		{ return nodes+pool;	}

	mov	ecx, DWORD PTR [ebx+4]
	mov	eax, DWORD PTR [ebx]

; 232  : 		TNode** _it			= &*D.begin();

	mov	esi, DWORD PTR [edi]

; 201  : 	IC TNode*	end()		{ return nodes+pool;	}

	lea	edx, DWORD PTR [ecx*8]
	sub	edx, ecx
	lea	ecx, DWORD PTR [eax+edx*4]

; 233  : 		TNode*	_end		= end();
; 234  : 		for (TNode* cur = begin(); cur!=_end; cur++,_it++) *_it = cur;

	cmp	eax, ecx
	je	SHORT $LN3@getANY_P
	npad	7
$LL4@getANY_P:
	mov	DWORD PTR [esi], eax
	lea	esi, DWORD PTR [esi+4]
	add	eax, 28					; 0000001cH
	cmp	eax, ecx
	jne	SHORT $LL4@getANY_P
$LN3@getANY_P:
	pop	edi

; 235  : 	}

	pop	esi
	pop	ebp
	pop	ebx
	ret	4
?getANY_P@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@QAEXAAV?$xr_vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@@@Z ENDP ; FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::getANY_P
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
;	COMDAT ?end@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ
_TEXT	SEGMENT
?end@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ PROC ; FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::end, COMDAT
; _this$ = ecx

; 201  : 	IC TNode*	end()		{ return nodes+pool;	}

	mov	eax, DWORD PTR [ecx+4]
	lea	edx, DWORD PTR [eax*8]
	sub	edx, eax
	mov	eax, DWORD PTR [ecx]
	lea	eax, DWORD PTR [eax+edx*4]
	ret	0
?end@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ ENDP ; FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::end
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
;	COMDAT ?clear@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@QAEXXZ
_TEXT	SEGMENT
?clear@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@QAEXXZ PROC ; FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::clear, COMDAT
; _this$ = ecx

; 199  : 	IC void		clear()		{ pool=0;				}

	mov	DWORD PTR [ecx+4], 0
	ret	0
?clear@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@QAEXXZ ENDP ; FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::clear
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ?clear@?$xr_vector@U_NormalItem@R_dsgraph@@V?$doug_lea_alloc@U_NormalItem@R_dsgraph@@@@@@QAEXXZ
_TEXT	SEGMENT
?clear@?$xr_vector@U_NormalItem@R_dsgraph@@V?$doug_lea_alloc@U_NormalItem@R_dsgraph@@@@@@QAEXXZ PROC ; xr_vector<R_dsgraph::_NormalItem,doug_lea_alloc<R_dsgraph::_NormalItem> >::clear, COMDAT
; _this$ = ecx

; 132  : 	void	clear				()									{ clear_and_free	();			}

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [ecx+4], eax
	ret	0
?clear@?$xr_vector@U_NormalItem@R_dsgraph@@V?$doug_lea_alloc@U_NormalItem@R_dsgraph@@@@@@QAEXXZ ENDP ; xr_vector<R_dsgraph::_NormalItem,doug_lea_alloc<R_dsgraph::_NormalItem> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?end@?$vector@U_NormalItem@R_dsgraph@@V?$doug_lea_alloc@U_NormalItem@R_dsgraph@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_NormalItem@R_dsgraph@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@U_NormalItem@R_dsgraph@@V?$doug_lea_alloc@U_NormalItem@R_dsgraph@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_NormalItem@R_dsgraph@@@std@@@std@@@2@XZ PROC ; std::vector<R_dsgraph::_NormalItem,doug_lea_alloc<R_dsgraph::_NormalItem> >::end, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], ecx

; 1472 :         auto& _My_data = _Mypair._Myval2;
; 1473 :         return iterator(_My_data._Mylast, _STD addressof(_My_data));
; 1474 :     }

	ret	4
?end@?$vector@U_NormalItem@R_dsgraph@@V?$doug_lea_alloc@U_NormalItem@R_dsgraph@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_NormalItem@R_dsgraph@@@std@@@std@@@2@XZ ENDP ; std::vector<R_dsgraph::_NormalItem,doug_lea_alloc<R_dsgraph::_NormalItem> >::end
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?begin@?$vector@U_NormalItem@R_dsgraph@@V?$doug_lea_alloc@U_NormalItem@R_dsgraph@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_NormalItem@R_dsgraph@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@U_NormalItem@R_dsgraph@@V?$doug_lea_alloc@U_NormalItem@R_dsgraph@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_NormalItem@R_dsgraph@@@std@@@std@@@2@XZ PROC ; std::vector<R_dsgraph::_NormalItem,doug_lea_alloc<R_dsgraph::_NormalItem> >::begin, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], ecx

; 1462 :         auto& _My_data = _Mypair._Myval2;
; 1463 :         return iterator(_My_data._Myfirst, _STD addressof(_My_data));
; 1464 :     }

	ret	4
?begin@?$vector@U_NormalItem@R_dsgraph@@V?$doug_lea_alloc@U_NormalItem@R_dsgraph@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_NormalItem@R_dsgraph@@@std@@@std@@@2@XZ ENDP ; std::vector<R_dsgraph::_NormalItem,doug_lea_alloc<R_dsgraph::_NormalItem> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h
;	COMDAT ?intersect@?$_box3@M@@QAEHABV1@@Z
_TEXT	SEGMENT
_box$ = 8						; size = 4
?intersect@?$_box3@M@@QAEHABV1@@Z PROC			; _box3<float>::intersect, COMDAT
; _this$ = ecx

; 123  : 		if( max.x < box.min.x )	return FALSE;

	mov	eax, DWORD PTR _box$[esp-4]
	movss	xmm0, DWORD PTR [eax]
	comiss	xmm0, DWORD PTR [ecx+12]
	ja	SHORT $LN9@intersect

; 124  : 		if( max.y < box.min.y )	return FALSE;

	movss	xmm0, DWORD PTR [eax+4]
	comiss	xmm0, DWORD PTR [ecx+16]
	ja	SHORT $LN9@intersect

; 125  : 		if( max.z < box.min.z )	return FALSE;

	movss	xmm0, DWORD PTR [eax+8]
	comiss	xmm0, DWORD PTR [ecx+20]
	ja	SHORT $LN9@intersect

; 126  : 		if( min.x > box.max.x )	return FALSE;

	movss	xmm0, DWORD PTR [ecx]
	comiss	xmm0, DWORD PTR [eax+12]
	ja	SHORT $LN9@intersect

; 127  : 		if( min.y > box.max.y )	return FALSE;

	movss	xmm0, DWORD PTR [ecx+4]
	comiss	xmm0, DWORD PTR [eax+16]
	ja	SHORT $LN9@intersect

; 128  : 		if( min.z > box.max.z )	return FALSE;

	movss	xmm0, DWORD PTR [ecx+8]
	comiss	xmm0, DWORD PTR [eax+20]
	ja	SHORT $LN9@intersect

; 129  : 		return TRUE;

	mov	eax, 1

; 130  : 	};

	ret	4
$LN9@intersect:

; 128  : 		if( min.z > box.max.z )	return FALSE;

	xor	eax, eax

; 130  : 	};

	ret	4
?intersect@?$_box3@M@@QAEHABV1@@Z ENDP			; _box3<float>::intersect
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\xr_resource.h
;	COMDAT ?_get@?$resptr_base@UShaderElement@@@@QBEPAUShaderElement@@XZ
_TEXT	SEGMENT
?_get@?$resptr_base@UShaderElement@@@@QBEPAUShaderElement@@XZ PROC ; resptr_base<ShaderElement>::_get, COMDAT
; _this$ = ecx

; 48   : 	ICF		T *			_get	() const							{	return p_;																					}

	mov	eax, DWORD PTR [ecx]
	ret	0
?_get@?$resptr_base@UShaderElement@@@@QBEPAUShaderElement@@XZ ENDP ; resptr_base<ShaderElement>::_get
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
;	COMDAT ?build_projection@?$_matrix@M@@QAEAAU1@MMMM@Z
_TEXT	SEGMENT
_fFOV$ = 8						; size = 4
_fAspect$ = 12						; size = 4
_fNearPlane$ = 16					; size = 4
_fFarPlane$ = 20					; size = 4
?build_projection@?$_matrix@M@@QAEAAU1@MMMM@Z PROC	; _matrix<float>::build_projection, COMDAT
; _this$ = ecx

; 398  : 		return build_projection_HAT		(tanf(fFOV/2.f),fAspect,fNearPlane,fFarPlane);

	fld	DWORD PTR _fFarPlane$[esp-4]
	sub	esp, 16					; 00000010H
	fstp	DWORD PTR [esp+12]
	fld	DWORD PTR _fNearPlane$[esp+12]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _fAspect$[esp+12]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _fFOV$[esp+12]
	fmul	DWORD PTR __real@3f000000
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 769  :             return (float)tan(_X);

	fptan
	fstp	ST(0)
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h

; 398  : 		return build_projection_HAT		(tanf(fFOV/2.f),fAspect,fNearPlane,fFarPlane);

	fstp	DWORD PTR [esp]
	call	?build_projection_HAT@?$_matrix@M@@QAEAAU1@MMMM@Z ; _matrix<float>::build_projection_HAT

; 399  : 	}

	ret	16					; 00000010H
?build_projection@?$_matrix@M@@QAEAAU1@MMMM@Z ENDP	; _matrix<float>::build_projection
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
___param0$ = 8						; size = 4
___param1$dead$ = 12					; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> > >, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR ___param0$[esp-4]
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	ret	8
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
___param0$ = 8						; size = 4
___param1$dead$ = 12					; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> > >, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR ___param0$[esp-4]
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	ret	8
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
___param0$ = 8						; size = 4
___param1$dead$ = 12					; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> > >, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR ___param0$[esp-4]
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	ret	8
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
___param0$ = 8						; size = 4
___param1$dead$ = 12					; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> > >, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR ___param0$[esp-4]
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	ret	8
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
___param0$ = 8						; size = 4
___param1$dead$ = 12					; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> > >, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR ___param0$[esp-4]
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	ret	8
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
___param0$ = 8						; size = 4
___param1$dead$ = 12					; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> > >, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR ___param0$[esp-4]
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	ret	8
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
___param0$ = 8						; size = 4
___param1$dead$ = 12					; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> > >, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR ___param0$[esp-4]
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	ret	8
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
___param0$ = 8						; size = 4
___param1$dead$ = 12					; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> > >, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR ___param0$[esp-4]
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	ret	8
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
___param0$ = 8						; size = 4
___param1$dead$ = 12					; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> > >, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR ___param0$[esp-4]
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	ret	8
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
___param0$ = 8						; size = 4
___param1$dead$ = 12					; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> > >, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR ___param0$[esp-4]
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	ret	8
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_MatrixItem@R_dsgraph@@@std@@@std@@@std@@QAE@PAU_MatrixItem@R_dsgraph@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
___param0$ = 8						; size = 4
___param1$dead$ = 12					; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_MatrixItem@R_dsgraph@@@std@@@std@@@std@@QAE@PAU_MatrixItem@R_dsgraph@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<R_dsgraph::_MatrixItem> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<R_dsgraph::_MatrixItem> > >, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR ___param0$[esp-4]
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	ret	8
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_MatrixItem@R_dsgraph@@@std@@@std@@@std@@QAE@PAU_MatrixItem@R_dsgraph@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<R_dsgraph::_MatrixItem> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<R_dsgraph::_MatrixItem> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_NormalItem@R_dsgraph@@@std@@@std@@@std@@QAE@PAU_NormalItem@R_dsgraph@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
___param0$ = 8						; size = 4
___param1$dead$ = 12					; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_NormalItem@R_dsgraph@@@std@@@std@@@std@@QAE@PAU_NormalItem@R_dsgraph@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<R_dsgraph::_NormalItem> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<R_dsgraph::_NormalItem> > >, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR ___param0$[esp-4]
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	ret	8
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_NormalItem@R_dsgraph@@@std@@@std@@@std@@QAE@PAU_NormalItem@R_dsgraph@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<R_dsgraph::_NormalItem> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<R_dsgraph::_NormalItem> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VCFrustum@@@std@@@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VCFrustum@@@std@@@std@@@std@@QBE?AV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CFrustum> > >::operator+, COMDAT
; _this$ = ecx

; 119  :         _Ptr += _Off;

	imul	edx, DWORD PTR __Off$[esp-4], 244
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	add	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 303  :         _Vector_iterator _Tmp = *this;
; 304  :         _Tmp += _Off; // TRANSITION, LLVM-49342
; 305  :         return _Tmp;
; 306  :     }

	ret	8
??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VCFrustum@@@std@@@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CFrustum> > >::operator+
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VCFrustum@@@std@@@std@@@std@@QBEAAVCFrustum@@XZ
_TEXT	SEGMENT
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VCFrustum@@@std@@@std@@@std@@QBEAAVCFrustum@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CFrustum> > >::operator*, COMDAT
; _this$ = ecx

; 261  :         return const_cast<reference>(_Mybase::operator*());

	mov	eax, DWORD PTR [ecx]

; 262  :     }

	ret	0
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VCFrustum@@@std@@@std@@@std@@QBEAAVCFrustum@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CFrustum> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Sector@@@std@@@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Sector@@@std@@@std@@@std@@QBE?AV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<IRender_Sector *> > >::operator+, COMDAT
; _this$ = ecx

; 119  :         _Ptr += _Off;

	mov	eax, DWORD PTR __Off$[esp-4]
	mov	ecx, DWORD PTR [ecx]
	lea	ecx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	DWORD PTR [eax], ecx

; 303  :         _Vector_iterator _Tmp = *this;
; 304  :         _Tmp += _Off; // TRANSITION, LLVM-49342
; 305  :         return _Tmp;
; 306  :     }

	ret	8
??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Sector@@@std@@@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<IRender_Sector *> > >::operator+
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Sector@@@std@@@std@@@std@@QBEAAPAVIRender_Sector@@XZ
_TEXT	SEGMENT
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Sector@@@std@@@std@@@std@@QBEAAPAVIRender_Sector@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<IRender_Sector *> > >::operator*, COMDAT
; _this$ = ecx

; 261  :         return const_cast<reference>(_Mybase::operator*());

	mov	eax, DWORD PTR [ecx]

; 262  :     }

	ret	0
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Sector@@@std@@@std@@@std@@QBEAAPAVIRender_Sector@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<IRender_Sector *> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Portal@@@std@@@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Portal@@@std@@@std@@@std@@QBE?AV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<IRender_Portal *> > >::operator+, COMDAT
; _this$ = ecx

; 119  :         _Ptr += _Off;

	mov	eax, DWORD PTR __Off$[esp-4]
	mov	ecx, DWORD PTR [ecx]
	lea	ecx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	DWORD PTR [eax], ecx

; 303  :         _Vector_iterator _Tmp = *this;
; 304  :         _Tmp += _Off; // TRANSITION, LLVM-49342
; 305  :         return _Tmp;
; 306  :     }

	ret	8
??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Portal@@@std@@@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<IRender_Portal *> > >::operator+
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Portal@@@std@@@std@@@std@@QBEAAPAVIRender_Portal@@XZ
_TEXT	SEGMENT
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Portal@@@std@@@std@@@std@@QBEAAPAVIRender_Portal@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<IRender_Portal *> > >::operator*, COMDAT
; _this$ = ecx

; 261  :         return const_cast<reference>(_Mybase::operator*());

	mov	eax, DWORD PTR [ecx]

; 262  :     }

	ret	0
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Portal@@@std@@@std@@@std@@QBEAAPAVIRender_Portal@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<IRender_Portal *> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBE?AV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> > >::operator+, COMDAT
; _this$ = ecx

; 119  :         _Ptr += _Off;

	mov	eax, DWORD PTR __Off$[esp-4]
	mov	ecx, DWORD PTR [ecx]
	lea	ecx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	DWORD PTR [eax], ecx

; 303  :         _Vector_iterator _Tmp = *this;
; 304  :         _Tmp += _Off; // TRANSITION, LLVM-49342
; 305  :         return _Tmp;
; 306  :     }

	ret	8
??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> > >::operator+
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEAAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@XZ
_TEXT	SEGMENT
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEAAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> > >::operator*, COMDAT
; _this$ = ecx

; 261  :         return const_cast<reference>(_Mybase::operator*());

	mov	eax, DWORD PTR [ecx]

; 262  :     }

	ret	0
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEAAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$dead$ = 12					; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> > >, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR __Parg$[esp-4]
	mov	DWORD PTR [ecx], eax

; 42   :         this->_Adopt(_Pvector);
; 43   :     }

	mov	eax, ecx
	ret	8
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBE?AV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> > >::operator+, COMDAT
; _this$ = ecx

; 119  :         _Ptr += _Off;

	mov	eax, DWORD PTR __Off$[esp-4]
	mov	ecx, DWORD PTR [ecx]
	lea	ecx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	DWORD PTR [eax], ecx

; 303  :         _Vector_iterator _Tmp = *this;
; 304  :         _Tmp += _Off; // TRANSITION, LLVM-49342
; 305  :         return _Tmp;
; 306  :     }

	ret	8
??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> > >::operator+
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEAAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@XZ
_TEXT	SEGMENT
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEAAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> > >::operator*, COMDAT
; _this$ = ecx

; 261  :         return const_cast<reference>(_Mybase::operator*());

	mov	eax, DWORD PTR [ecx]

; 262  :     }

	ret	0
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEAAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$dead$ = 12					; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> > >, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR __Parg$[esp-4]
	mov	DWORD PTR [ecx], eax

; 42   :         this->_Adopt(_Pvector);
; 43   :     }

	mov	eax, ecx
	ret	8
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBE?AV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> > >::operator+, COMDAT
; _this$ = ecx

; 119  :         _Ptr += _Off;

	mov	eax, DWORD PTR __Off$[esp-4]
	mov	ecx, DWORD PTR [ecx]
	lea	ecx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	DWORD PTR [eax], ecx

; 303  :         _Vector_iterator _Tmp = *this;
; 304  :         _Tmp += _Off; // TRANSITION, LLVM-49342
; 305  :         return _Tmp;
; 306  :     }

	ret	8
??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> > >::operator+
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEAAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@XZ
_TEXT	SEGMENT
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEAAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> > >::operator*, COMDAT
; _this$ = ecx

; 261  :         return const_cast<reference>(_Mybase::operator*());

	mov	eax, DWORD PTR [ecx]

; 262  :     }

	ret	0
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEAAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$dead$ = 12					; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> > >, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR __Parg$[esp-4]
	mov	DWORD PTR [ecx], eax

; 42   :         this->_Adopt(_Pvector);
; 43   :     }

	mov	eax, ecx
	ret	8
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBE?AV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> > >::operator+, COMDAT
; _this$ = ecx

; 119  :         _Ptr += _Off;

	mov	eax, DWORD PTR __Off$[esp-4]
	mov	ecx, DWORD PTR [ecx]
	lea	ecx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	DWORD PTR [eax], ecx

; 303  :         _Vector_iterator _Tmp = *this;
; 304  :         _Tmp += _Off; // TRANSITION, LLVM-49342
; 305  :         return _Tmp;
; 306  :     }

	ret	8
??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> > >::operator+
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEAAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@XZ
_TEXT	SEGMENT
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEAAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> > >::operator*, COMDAT
; _this$ = ecx

; 261  :         return const_cast<reference>(_Mybase::operator*());

	mov	eax, DWORD PTR [ecx]

; 262  :     }

	ret	0
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEAAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$dead$ = 12					; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> > >, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR __Parg$[esp-4]
	mov	DWORD PTR [ecx], eax

; 42   :         this->_Adopt(_Pvector);
; 43   :     }

	mov	eax, ecx
	ret	8
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBE?AV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> > >::operator+, COMDAT
; _this$ = ecx

; 119  :         _Ptr += _Off;

	mov	eax, DWORD PTR __Off$[esp-4]
	mov	ecx, DWORD PTR [ecx]
	lea	ecx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	DWORD PTR [eax], ecx

; 303  :         _Vector_iterator _Tmp = *this;
; 304  :         _Tmp += _Off; // TRANSITION, LLVM-49342
; 305  :         return _Tmp;
; 306  :     }

	ret	8
??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> > >::operator+
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEAAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@XZ
_TEXT	SEGMENT
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEAAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> > >::operator*, COMDAT
; _this$ = ecx

; 261  :         return const_cast<reference>(_Mybase::operator*());

	mov	eax, DWORD PTR [ecx]

; 262  :     }

	ret	0
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEAAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$dead$ = 12					; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> > >, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR __Parg$[esp-4]
	mov	DWORD PTR [ecx], eax

; 42   :         this->_Adopt(_Pvector);
; 43   :     }

	mov	eax, ecx
	ret	8
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBE?AV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> > >::operator+, COMDAT
; _this$ = ecx

; 119  :         _Ptr += _Off;

	mov	eax, DWORD PTR __Off$[esp-4]
	mov	ecx, DWORD PTR [ecx]
	lea	ecx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	DWORD PTR [eax], ecx

; 303  :         _Vector_iterator _Tmp = *this;
; 304  :         _Tmp += _Off; // TRANSITION, LLVM-49342
; 305  :         return _Tmp;
; 306  :     }

	ret	8
??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> > >::operator+
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEAAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@XZ
_TEXT	SEGMENT
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEAAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> > >::operator*, COMDAT
; _this$ = ecx

; 261  :         return const_cast<reference>(_Mybase::operator*());

	mov	eax, DWORD PTR [ecx]

; 262  :     }

	ret	0
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEAAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$dead$ = 12					; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> > >, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR __Parg$[esp-4]
	mov	DWORD PTR [ecx], eax

; 42   :         this->_Adopt(_Pvector);
; 43   :     }

	mov	eax, ecx
	ret	8
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBE?AV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> > >::operator+, COMDAT
; _this$ = ecx

; 119  :         _Ptr += _Off;

	mov	eax, DWORD PTR __Off$[esp-4]
	mov	ecx, DWORD PTR [ecx]
	lea	ecx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	DWORD PTR [eax], ecx

; 303  :         _Vector_iterator _Tmp = *this;
; 304  :         _Tmp += _Off; // TRANSITION, LLVM-49342
; 305  :         return _Tmp;
; 306  :     }

	ret	8
??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> > >::operator+
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEAAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@XZ
_TEXT	SEGMENT
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEAAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> > >::operator*, COMDAT
; _this$ = ecx

; 261  :         return const_cast<reference>(_Mybase::operator*());

	mov	eax, DWORD PTR [ecx]

; 262  :     }

	ret	0
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEAAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$dead$ = 12					; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> > >, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR __Parg$[esp-4]
	mov	DWORD PTR [ecx], eax

; 42   :         this->_Adopt(_Pvector);
; 43   :     }

	mov	eax, ecx
	ret	8
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBE?AV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> > >::operator+, COMDAT
; _this$ = ecx

; 119  :         _Ptr += _Off;

	mov	eax, DWORD PTR __Off$[esp-4]
	mov	ecx, DWORD PTR [ecx]
	lea	ecx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	DWORD PTR [eax], ecx

; 303  :         _Vector_iterator _Tmp = *this;
; 304  :         _Tmp += _Off; // TRANSITION, LLVM-49342
; 305  :         return _Tmp;
; 306  :     }

	ret	8
??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> > >::operator+
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEAAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@XZ
_TEXT	SEGMENT
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEAAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> > >::operator*, COMDAT
; _this$ = ecx

; 261  :         return const_cast<reference>(_Mybase::operator*());

	mov	eax, DWORD PTR [ecx]

; 262  :     }

	ret	0
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEAAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$dead$ = 12					; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> > >, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR __Parg$[esp-4]
	mov	DWORD PTR [ecx], eax

; 42   :         this->_Adopt(_Pvector);
; 43   :     }

	mov	eax, ecx
	ret	8
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBE?AV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> > >::operator+, COMDAT
; _this$ = ecx

; 119  :         _Ptr += _Off;

	mov	eax, DWORD PTR __Off$[esp-4]
	mov	ecx, DWORD PTR [ecx]
	lea	ecx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	DWORD PTR [eax], ecx

; 303  :         _Vector_iterator _Tmp = *this;
; 304  :         _Tmp += _Off; // TRANSITION, LLVM-49342
; 305  :         return _Tmp;
; 306  :     }

	ret	8
??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> > >::operator+
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEAAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@XZ
_TEXT	SEGMENT
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEAAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> > >::operator*, COMDAT
; _this$ = ecx

; 261  :         return const_cast<reference>(_Mybase::operator*());

	mov	eax, DWORD PTR [ecx]

; 262  :     }

	ret	0
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEAAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$dead$ = 12					; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> > >, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR __Parg$[esp-4]
	mov	DWORD PTR [ecx], eax

; 42   :         this->_Adopt(_Pvector);
; 43   :     }

	mov	eax, ecx
	ret	8
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBE?AV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> > >::operator+, COMDAT
; _this$ = ecx

; 119  :         _Ptr += _Off;

	mov	eax, DWORD PTR __Off$[esp-4]
	mov	ecx, DWORD PTR [ecx]
	lea	ecx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	DWORD PTR [eax], ecx

; 303  :         _Vector_iterator _Tmp = *this;
; 304  :         _Tmp += _Off; // TRANSITION, LLVM-49342
; 305  :         return _Tmp;
; 306  :     }

	ret	8
??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> > >::operator+
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEAAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@XZ
_TEXT	SEGMENT
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEAAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> > >::operator*, COMDAT
; _this$ = ecx

; 261  :         return const_cast<reference>(_Mybase::operator*());

	mov	eax, DWORD PTR [ecx]

; 262  :     }

	ret	0
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEAAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$dead$ = 12					; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> > >, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR __Parg$[esp-4]
	mov	DWORD PTR [ecx], eax

; 42   :         this->_Adopt(_Pvector);
; 43   :     }

	mov	eax, ecx
	ret	8
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_MatrixItem@R_dsgraph@@@std@@@std@@@std@@QBEABU_MatrixItem@R_dsgraph@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_MatrixItem@R_dsgraph@@@std@@@std@@@std@@QBEABU_MatrixItem@R_dsgraph@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<R_dsgraph::_MatrixItem> > >::operator*, COMDAT
; _this$ = ecx

; 46   : #if _ITERATOR_DEBUG_LEVEL != 0
; 47   :         const auto _Mycont = static_cast<const _Myvec*>(this->_Getcont());
; 48   :         _STL_VERIFY(_Ptr, "can't dereference value-initialized vector iterator");
; 49   :         _STL_VERIFY(
; 50   :             _Mycont->_Myfirst <= _Ptr && _Ptr < _Mycont->_Mylast, "can't dereference out of range vector iterator");
; 51   : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 52   : 
; 53   :         return *_Ptr;

	mov	eax, DWORD PTR [ecx]

; 54   :     }

	ret	0
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_MatrixItem@R_dsgraph@@@std@@@std@@@std@@QBEABU_MatrixItem@R_dsgraph@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<R_dsgraph::_MatrixItem> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_MatrixItem@R_dsgraph@@@std@@@std@@@std@@QAE@PAU_MatrixItem@R_dsgraph@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$dead$ = 12					; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_MatrixItem@R_dsgraph@@@std@@@std@@@std@@QAE@PAU_MatrixItem@R_dsgraph@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<R_dsgraph::_MatrixItem> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<R_dsgraph::_MatrixItem> > >, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR __Parg$[esp-4]
	mov	DWORD PTR [ecx], eax

; 42   :         this->_Adopt(_Pvector);
; 43   :     }

	mov	eax, ecx
	ret	8
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_MatrixItem@R_dsgraph@@@std@@@std@@@std@@QAE@PAU_MatrixItem@R_dsgraph@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<R_dsgraph::_MatrixItem> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<R_dsgraph::_MatrixItem> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_NormalItem@R_dsgraph@@@std@@@std@@@std@@QBEABU_NormalItem@R_dsgraph@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_NormalItem@R_dsgraph@@@std@@@std@@@std@@QBEABU_NormalItem@R_dsgraph@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<R_dsgraph::_NormalItem> > >::operator*, COMDAT
; _this$ = ecx

; 46   : #if _ITERATOR_DEBUG_LEVEL != 0
; 47   :         const auto _Mycont = static_cast<const _Myvec*>(this->_Getcont());
; 48   :         _STL_VERIFY(_Ptr, "can't dereference value-initialized vector iterator");
; 49   :         _STL_VERIFY(
; 50   :             _Mycont->_Myfirst <= _Ptr && _Ptr < _Mycont->_Mylast, "can't dereference out of range vector iterator");
; 51   : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 52   : 
; 53   :         return *_Ptr;

	mov	eax, DWORD PTR [ecx]

; 54   :     }

	ret	0
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_NormalItem@R_dsgraph@@@std@@@std@@@std@@QBEABU_NormalItem@R_dsgraph@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<R_dsgraph::_NormalItem> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_NormalItem@R_dsgraph@@@std@@@std@@@std@@QAE@PAU_NormalItem@R_dsgraph@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$dead$ = 12					; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_NormalItem@R_dsgraph@@@std@@@std@@@std@@QAE@PAU_NormalItem@R_dsgraph@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<R_dsgraph::_NormalItem> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<R_dsgraph::_NormalItem> > >, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR __Parg$[esp-4]
	mov	DWORD PTR [ecx], eax

; 42   :         this->_Adopt(_Pvector);
; 43   :     }

	mov	eax, ecx
	ret	8
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_NormalItem@R_dsgraph@@@std@@@std@@@std@@QAE@PAU_NormalItem@R_dsgraph@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<R_dsgraph::_NormalItem> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<R_dsgraph::_NormalItem> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?begin@?$vector@PAVIRender_Portal@@V?$xalloc@PAVIRender_Portal@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Portal@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAVIRender_Portal@@V?$xalloc@PAVIRender_Portal@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Portal@@@std@@@std@@@2@XZ PROC ; std::vector<IRender_Portal *,xalloc<IRender_Portal *> >::begin, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], ecx

; 1462 :         auto& _My_data = _Mypair._Myval2;
; 1463 :         return iterator(_My_data._Myfirst, _STD addressof(_My_data));
; 1464 :     }

	ret	4
?begin@?$vector@PAVIRender_Portal@@V?$xalloc@PAVIRender_Portal@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Portal@@@std@@@std@@@2@XZ ENDP ; std::vector<IRender_Portal *,xalloc<IRender_Portal *> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Orphan_range@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@ABEXPAPAVIRender_Visual@@0@Z
_TEXT	SEGMENT
___formal$dead$ = 8					; size = 4
___formal$dead$ = 12					; size = 4
?_Orphan_range@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@ABEXPAPAVIRender_Visual@@0@Z PROC ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::_Orphan_range, COMDAT
; _this$dead$ = ecx

; 1801 :     _CONSTEXPR20_CONTAINER void _Orphan_range(pointer, pointer) const {}

	ret	8
?_Orphan_range@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@ABEXPAPAVIRender_Visual@@0@Z ENDP ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?size@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QBEIXZ PROC ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::size, COMDAT
; _this$ = ecx

; 1535 :         auto& _My_data = _Mypair._Myval2;
; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2

; 1537 :     }

	ret	0
?size@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QBEIXZ ENDP ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?begin@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@std@@@2@XZ PROC ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::begin, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], ecx

; 1462 :         auto& _My_data = _Mypair._Myval2;
; 1463 :         return iterator(_My_data._Myfirst, _STD addressof(_My_data));
; 1464 :     }

	ret	4
?begin@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@std@@@2@XZ ENDP ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Orphan_range@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z
_TEXT	SEGMENT
___formal$dead$ = 8					; size = 4
___formal$dead$ = 12					; size = 4
?_Orphan_range@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z PROC ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Orphan_range, COMDAT
; _this$dead$ = ecx

; 1801 :     _CONSTEXPR20_CONTAINER void _Orphan_range(pointer, pointer) const {}

	ret	8
?_Orphan_range@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ENDP ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?size@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ PROC ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::size, COMDAT
; _this$ = ecx

; 1535 :         auto& _My_data = _Mypair._Myval2;
; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2

; 1537 :     }

	ret	0
?size@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ ENDP ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?resize@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?resize@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXI@Z PROC ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::resize, COMDAT
; _this$ = ecx

; 1275 :     _CONSTEXPR20_CONTAINER void resize(_CRT_GUARDOVERFLOW const size_type _Newsize) {

	push	ebx
	push	esi

; 1251 :         if (_Newsize < _Oldsize) { // trim

	mov	esi, DWORD PTR __Newsize$[esp+4]

; 1275 :     _CONSTEXPR20_CONTAINER void resize(_CRT_GUARDOVERFLOW const size_type _Newsize) {

	push	edi
	mov	edi, ecx

; 1250 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

	mov	ebx, DWORD PTR [edi+4]
	mov	ecx, ebx
	mov	edx, DWORD PTR [edi]
	sub	ecx, edx
	sar	ecx, 2

; 1251 :         if (_Newsize < _Oldsize) { // trim

	cmp	esi, ecx
	jae	SHORT $LN4@resize

; 1252 :             const pointer _Newlast = _Myfirst + _Newsize;

	lea	eax, DWORD PTR [edx+esi*4]

; 1278 :     }

	mov	DWORD PTR [edi+4], eax
	pop	edi
	pop	esi
	pop	ebx
	ret	4
$LN4@resize:

; 1259 :         if (_Newsize > _Oldsize) { // append

	jbe	SHORT $LN5@resize

; 1260 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

	mov	eax, DWORD PTR [edi+8]
	sub	eax, edx
	sar	eax, 2

; 1261 :             if (_Newsize > _Oldcapacity) { // reallocate

	cmp	esi, eax
	jbe	SHORT $LN6@resize

; 1262 :                 _Resize_reallocate(_Newsize, _Val);

	push	ecx
	push	esi
	mov	ecx, edi
	call	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Resize_reallocate<std::_Value_init_tag>
	pop	edi

; 1278 :     }

	pop	esi
	pop	ebx
	ret	4
$LN6@resize:

; 1267 :             _Mylast                = _Ufill(_Oldlast, _Newsize - _Oldsize, _Val);

	sub	esi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	shl	esi, 2

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	push	esi
	push	0
	push	ebx
	call	_memset

; 1808 :             return _First + _Count;

	lea	eax, DWORD PTR [esi+ebx]

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	add	esp, 12					; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1278 :     }

	mov	DWORD PTR [edi+4], eax
$LN5@resize:
	pop	edi
	pop	esi
	pop	ebx
	ret	4
?resize@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXI@Z ENDP ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::resize
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?size@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ PROC ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::size, COMDAT
; _this$ = ecx

; 1535 :         auto& _My_data = _Mypair._Myval2;
; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2

; 1537 :     }

	ret	0
?size@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ ENDP ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?resize@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?resize@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXI@Z PROC ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::resize, COMDAT
; _this$ = ecx

; 1275 :     _CONSTEXPR20_CONTAINER void resize(_CRT_GUARDOVERFLOW const size_type _Newsize) {

	push	ebx
	push	esi

; 1251 :         if (_Newsize < _Oldsize) { // trim

	mov	esi, DWORD PTR __Newsize$[esp+4]

; 1275 :     _CONSTEXPR20_CONTAINER void resize(_CRT_GUARDOVERFLOW const size_type _Newsize) {

	push	edi
	mov	edi, ecx

; 1250 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

	mov	ebx, DWORD PTR [edi+4]
	mov	ecx, ebx
	mov	edx, DWORD PTR [edi]
	sub	ecx, edx
	sar	ecx, 2

; 1251 :         if (_Newsize < _Oldsize) { // trim

	cmp	esi, ecx
	jae	SHORT $LN4@resize

; 1252 :             const pointer _Newlast = _Myfirst + _Newsize;

	lea	eax, DWORD PTR [edx+esi*4]

; 1278 :     }

	mov	DWORD PTR [edi+4], eax
	pop	edi
	pop	esi
	pop	ebx
	ret	4
$LN4@resize:

; 1259 :         if (_Newsize > _Oldsize) { // append

	jbe	SHORT $LN5@resize

; 1260 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

	mov	eax, DWORD PTR [edi+8]
	sub	eax, edx
	sar	eax, 2

; 1261 :             if (_Newsize > _Oldcapacity) { // reallocate

	cmp	esi, eax
	jbe	SHORT $LN6@resize

; 1262 :                 _Resize_reallocate(_Newsize, _Val);

	push	ecx
	push	esi
	mov	ecx, edi
	call	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::_Resize_reallocate<std::_Value_init_tag>
	pop	edi

; 1278 :     }

	pop	esi
	pop	ebx
	ret	4
$LN6@resize:

; 1267 :             _Mylast                = _Ufill(_Oldlast, _Newsize - _Oldsize, _Val);

	sub	esi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	shl	esi, 2

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	push	esi
	push	0
	push	ebx
	call	_memset

; 1808 :             return _First + _Count;

	lea	eax, DWORD PTR [esi+ebx]

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	add	esp, 12					; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1278 :     }

	mov	DWORD PTR [edi+4], eax
$LN5@resize:
	pop	edi
	pop	esi
	pop	ebx
	ret	4
?resize@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXI@Z ENDP ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::resize
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?size@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ PROC ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::size, COMDAT
; _this$ = ecx

; 1535 :         auto& _My_data = _Mypair._Myval2;
; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2

; 1537 :     }

	ret	0
?size@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ ENDP ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?resize@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?resize@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXI@Z PROC ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::resize, COMDAT
; _this$ = ecx

; 1275 :     _CONSTEXPR20_CONTAINER void resize(_CRT_GUARDOVERFLOW const size_type _Newsize) {

	push	ebx
	push	esi

; 1251 :         if (_Newsize < _Oldsize) { // trim

	mov	esi, DWORD PTR __Newsize$[esp+4]

; 1275 :     _CONSTEXPR20_CONTAINER void resize(_CRT_GUARDOVERFLOW const size_type _Newsize) {

	push	edi
	mov	edi, ecx

; 1250 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

	mov	ebx, DWORD PTR [edi+4]
	mov	ecx, ebx
	mov	edx, DWORD PTR [edi]
	sub	ecx, edx
	sar	ecx, 2

; 1251 :         if (_Newsize < _Oldsize) { // trim

	cmp	esi, ecx
	jae	SHORT $LN4@resize

; 1252 :             const pointer _Newlast = _Myfirst + _Newsize;

	lea	eax, DWORD PTR [edx+esi*4]

; 1278 :     }

	mov	DWORD PTR [edi+4], eax
	pop	edi
	pop	esi
	pop	ebx
	ret	4
$LN4@resize:

; 1259 :         if (_Newsize > _Oldsize) { // append

	jbe	SHORT $LN5@resize

; 1260 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

	mov	eax, DWORD PTR [edi+8]
	sub	eax, edx
	sar	eax, 2

; 1261 :             if (_Newsize > _Oldcapacity) { // reallocate

	cmp	esi, eax
	jbe	SHORT $LN6@resize

; 1262 :                 _Resize_reallocate(_Newsize, _Val);

	push	ecx
	push	esi
	mov	ecx, edi
	call	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::_Resize_reallocate<std::_Value_init_tag>
	pop	edi

; 1278 :     }

	pop	esi
	pop	ebx
	ret	4
$LN6@resize:

; 1267 :             _Mylast                = _Ufill(_Oldlast, _Newsize - _Oldsize, _Val);

	sub	esi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	shl	esi, 2

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	push	esi
	push	0
	push	ebx
	call	_memset

; 1808 :             return _First + _Count;

	lea	eax, DWORD PTR [esi+ebx]

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	add	esp, 12					; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1278 :     }

	mov	DWORD PTR [edi+4], eax
$LN5@resize:
	pop	edi
	pop	esi
	pop	ebx
	ret	4
?resize@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXI@Z ENDP ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::resize
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?size@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ PROC ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::size, COMDAT
; _this$ = ecx

; 1535 :         auto& _My_data = _Mypair._Myval2;
; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2

; 1537 :     }

	ret	0
?size@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ ENDP ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?resize@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?resize@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXI@Z PROC ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::resize, COMDAT
; _this$ = ecx

; 1275 :     _CONSTEXPR20_CONTAINER void resize(_CRT_GUARDOVERFLOW const size_type _Newsize) {

	push	ebx
	push	esi

; 1251 :         if (_Newsize < _Oldsize) { // trim

	mov	esi, DWORD PTR __Newsize$[esp+4]

; 1275 :     _CONSTEXPR20_CONTAINER void resize(_CRT_GUARDOVERFLOW const size_type _Newsize) {

	push	edi
	mov	edi, ecx

; 1250 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

	mov	ebx, DWORD PTR [edi+4]
	mov	ecx, ebx
	mov	edx, DWORD PTR [edi]
	sub	ecx, edx
	sar	ecx, 2

; 1251 :         if (_Newsize < _Oldsize) { // trim

	cmp	esi, ecx
	jae	SHORT $LN4@resize

; 1252 :             const pointer _Newlast = _Myfirst + _Newsize;

	lea	eax, DWORD PTR [edx+esi*4]

; 1278 :     }

	mov	DWORD PTR [edi+4], eax
	pop	edi
	pop	esi
	pop	ebx
	ret	4
$LN4@resize:

; 1259 :         if (_Newsize > _Oldsize) { // append

	jbe	SHORT $LN5@resize

; 1260 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

	mov	eax, DWORD PTR [edi+8]
	sub	eax, edx
	sar	eax, 2

; 1261 :             if (_Newsize > _Oldcapacity) { // reallocate

	cmp	esi, eax
	jbe	SHORT $LN6@resize

; 1262 :                 _Resize_reallocate(_Newsize, _Val);

	push	ecx
	push	esi
	mov	ecx, edi
	call	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::_Resize_reallocate<std::_Value_init_tag>
	pop	edi

; 1278 :     }

	pop	esi
	pop	ebx
	ret	4
$LN6@resize:

; 1267 :             _Mylast                = _Ufill(_Oldlast, _Newsize - _Oldsize, _Val);

	sub	esi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	shl	esi, 2

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	push	esi
	push	0
	push	ebx
	call	_memset

; 1808 :             return _First + _Count;

	lea	eax, DWORD PTR [esi+ebx]

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	add	esp, 12					; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1278 :     }

	mov	DWORD PTR [edi+4], eax
$LN5@resize:
	pop	edi
	pop	esi
	pop	ebx
	ret	4
?resize@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXI@Z ENDP ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::resize
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?size@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ PROC ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::size, COMDAT
; _this$ = ecx

; 1535 :         auto& _My_data = _Mypair._Myval2;
; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2

; 1537 :     }

	ret	0
?size@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ ENDP ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?resize@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?resize@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXI@Z PROC ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::resize, COMDAT
; _this$ = ecx

; 1275 :     _CONSTEXPR20_CONTAINER void resize(_CRT_GUARDOVERFLOW const size_type _Newsize) {

	push	ebx
	push	esi

; 1251 :         if (_Newsize < _Oldsize) { // trim

	mov	esi, DWORD PTR __Newsize$[esp+4]

; 1275 :     _CONSTEXPR20_CONTAINER void resize(_CRT_GUARDOVERFLOW const size_type _Newsize) {

	push	edi
	mov	edi, ecx

; 1250 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

	mov	ebx, DWORD PTR [edi+4]
	mov	ecx, ebx
	mov	edx, DWORD PTR [edi]
	sub	ecx, edx
	sar	ecx, 2

; 1251 :         if (_Newsize < _Oldsize) { // trim

	cmp	esi, ecx
	jae	SHORT $LN4@resize

; 1252 :             const pointer _Newlast = _Myfirst + _Newsize;

	lea	eax, DWORD PTR [edx+esi*4]

; 1278 :     }

	mov	DWORD PTR [edi+4], eax
	pop	edi
	pop	esi
	pop	ebx
	ret	4
$LN4@resize:

; 1259 :         if (_Newsize > _Oldsize) { // append

	jbe	SHORT $LN5@resize

; 1260 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

	mov	eax, DWORD PTR [edi+8]
	sub	eax, edx
	sar	eax, 2

; 1261 :             if (_Newsize > _Oldcapacity) { // reallocate

	cmp	esi, eax
	jbe	SHORT $LN6@resize

; 1262 :                 _Resize_reallocate(_Newsize, _Val);

	push	ecx
	push	esi
	mov	ecx, edi
	call	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::_Resize_reallocate<std::_Value_init_tag>
	pop	edi

; 1278 :     }

	pop	esi
	pop	ebx
	ret	4
$LN6@resize:

; 1267 :             _Mylast                = _Ufill(_Oldlast, _Newsize - _Oldsize, _Val);

	sub	esi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	shl	esi, 2

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	push	esi
	push	0
	push	ebx
	call	_memset

; 1808 :             return _First + _Count;

	lea	eax, DWORD PTR [esi+ebx]

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	add	esp, 12					; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1278 :     }

	mov	DWORD PTR [edi+4], eax
$LN5@resize:
	pop	edi
	pop	esi
	pop	ebx
	ret	4
?resize@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXI@Z ENDP ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::resize
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Orphan_range@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z
_TEXT	SEGMENT
___formal$dead$ = 8					; size = 4
___formal$dead$ = 12					; size = 4
?_Orphan_range@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z PROC ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Orphan_range, COMDAT
; _this$dead$ = ecx

; 1801 :     _CONSTEXPR20_CONTAINER void _Orphan_range(pointer, pointer) const {}

	ret	8
?_Orphan_range@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ENDP ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?size@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ PROC ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::size, COMDAT
; _this$ = ecx

; 1535 :         auto& _My_data = _Mypair._Myval2;
; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2

; 1537 :     }

	ret	0
?size@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ ENDP ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?resize@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?resize@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXI@Z PROC ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::resize, COMDAT
; _this$ = ecx

; 1275 :     _CONSTEXPR20_CONTAINER void resize(_CRT_GUARDOVERFLOW const size_type _Newsize) {

	push	ebx
	push	esi

; 1251 :         if (_Newsize < _Oldsize) { // trim

	mov	esi, DWORD PTR __Newsize$[esp+4]

; 1275 :     _CONSTEXPR20_CONTAINER void resize(_CRT_GUARDOVERFLOW const size_type _Newsize) {

	push	edi
	mov	edi, ecx

; 1250 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

	mov	ebx, DWORD PTR [edi+4]
	mov	ecx, ebx
	mov	edx, DWORD PTR [edi]
	sub	ecx, edx
	sar	ecx, 2

; 1251 :         if (_Newsize < _Oldsize) { // trim

	cmp	esi, ecx
	jae	SHORT $LN4@resize

; 1252 :             const pointer _Newlast = _Myfirst + _Newsize;

	lea	eax, DWORD PTR [edx+esi*4]

; 1278 :     }

	mov	DWORD PTR [edi+4], eax
	pop	edi
	pop	esi
	pop	ebx
	ret	4
$LN4@resize:

; 1259 :         if (_Newsize > _Oldsize) { // append

	jbe	SHORT $LN5@resize

; 1260 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

	mov	eax, DWORD PTR [edi+8]
	sub	eax, edx
	sar	eax, 2

; 1261 :             if (_Newsize > _Oldcapacity) { // reallocate

	cmp	esi, eax
	jbe	SHORT $LN6@resize

; 1262 :                 _Resize_reallocate(_Newsize, _Val);

	push	ecx
	push	esi
	mov	ecx, edi
	call	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Resize_reallocate<std::_Value_init_tag>
	pop	edi

; 1278 :     }

	pop	esi
	pop	ebx
	ret	4
$LN6@resize:

; 1267 :             _Mylast                = _Ufill(_Oldlast, _Newsize - _Oldsize, _Val);

	sub	esi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	shl	esi, 2

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	push	esi
	push	0
	push	ebx
	call	_memset

; 1808 :             return _First + _Count;

	lea	eax, DWORD PTR [esi+ebx]

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	add	esp, 12					; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1278 :     }

	mov	DWORD PTR [edi+4], eax
$LN5@resize:
	pop	edi
	pop	esi
	pop	ebx
	ret	4
?resize@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXI@Z ENDP ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::resize
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?size@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ PROC ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::size, COMDAT
; _this$ = ecx

; 1535 :         auto& _My_data = _Mypair._Myval2;
; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2

; 1537 :     }

	ret	0
?size@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ ENDP ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?resize@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?resize@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXI@Z PROC ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::resize, COMDAT
; _this$ = ecx

; 1275 :     _CONSTEXPR20_CONTAINER void resize(_CRT_GUARDOVERFLOW const size_type _Newsize) {

	push	ebx
	push	esi

; 1251 :         if (_Newsize < _Oldsize) { // trim

	mov	esi, DWORD PTR __Newsize$[esp+4]

; 1275 :     _CONSTEXPR20_CONTAINER void resize(_CRT_GUARDOVERFLOW const size_type _Newsize) {

	push	edi
	mov	edi, ecx

; 1250 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

	mov	ebx, DWORD PTR [edi+4]
	mov	ecx, ebx
	mov	edx, DWORD PTR [edi]
	sub	ecx, edx
	sar	ecx, 2

; 1251 :         if (_Newsize < _Oldsize) { // trim

	cmp	esi, ecx
	jae	SHORT $LN4@resize

; 1252 :             const pointer _Newlast = _Myfirst + _Newsize;

	lea	eax, DWORD PTR [edx+esi*4]

; 1278 :     }

	mov	DWORD PTR [edi+4], eax
	pop	edi
	pop	esi
	pop	ebx
	ret	4
$LN4@resize:

; 1259 :         if (_Newsize > _Oldsize) { // append

	jbe	SHORT $LN5@resize

; 1260 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

	mov	eax, DWORD PTR [edi+8]
	sub	eax, edx
	sar	eax, 2

; 1261 :             if (_Newsize > _Oldcapacity) { // reallocate

	cmp	esi, eax
	jbe	SHORT $LN6@resize

; 1262 :                 _Resize_reallocate(_Newsize, _Val);

	push	ecx
	push	esi
	mov	ecx, edi
	call	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::_Resize_reallocate<std::_Value_init_tag>
	pop	edi

; 1278 :     }

	pop	esi
	pop	ebx
	ret	4
$LN6@resize:

; 1267 :             _Mylast                = _Ufill(_Oldlast, _Newsize - _Oldsize, _Val);

	sub	esi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	shl	esi, 2

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	push	esi
	push	0
	push	ebx
	call	_memset

; 1808 :             return _First + _Count;

	lea	eax, DWORD PTR [esi+ebx]

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	add	esp, 12					; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1278 :     }

	mov	DWORD PTR [edi+4], eax
$LN5@resize:
	pop	edi
	pop	esi
	pop	ebx
	ret	4
?resize@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXI@Z ENDP ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::resize
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?size@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ PROC ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::size, COMDAT
; _this$ = ecx

; 1535 :         auto& _My_data = _Mypair._Myval2;
; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2

; 1537 :     }

	ret	0
?size@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ ENDP ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?resize@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?resize@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXI@Z PROC ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::resize, COMDAT
; _this$ = ecx

; 1275 :     _CONSTEXPR20_CONTAINER void resize(_CRT_GUARDOVERFLOW const size_type _Newsize) {

	push	ebx
	push	esi

; 1251 :         if (_Newsize < _Oldsize) { // trim

	mov	esi, DWORD PTR __Newsize$[esp+4]

; 1275 :     _CONSTEXPR20_CONTAINER void resize(_CRT_GUARDOVERFLOW const size_type _Newsize) {

	push	edi
	mov	edi, ecx

; 1250 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

	mov	ebx, DWORD PTR [edi+4]
	mov	ecx, ebx
	mov	edx, DWORD PTR [edi]
	sub	ecx, edx
	sar	ecx, 2

; 1251 :         if (_Newsize < _Oldsize) { // trim

	cmp	esi, ecx
	jae	SHORT $LN4@resize

; 1252 :             const pointer _Newlast = _Myfirst + _Newsize;

	lea	eax, DWORD PTR [edx+esi*4]

; 1278 :     }

	mov	DWORD PTR [edi+4], eax
	pop	edi
	pop	esi
	pop	ebx
	ret	4
$LN4@resize:

; 1259 :         if (_Newsize > _Oldsize) { // append

	jbe	SHORT $LN5@resize

; 1260 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

	mov	eax, DWORD PTR [edi+8]
	sub	eax, edx
	sar	eax, 2

; 1261 :             if (_Newsize > _Oldcapacity) { // reallocate

	cmp	esi, eax
	jbe	SHORT $LN6@resize

; 1262 :                 _Resize_reallocate(_Newsize, _Val);

	push	ecx
	push	esi
	mov	ecx, edi
	call	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::_Resize_reallocate<std::_Value_init_tag>
	pop	edi

; 1278 :     }

	pop	esi
	pop	ebx
	ret	4
$LN6@resize:

; 1267 :             _Mylast                = _Ufill(_Oldlast, _Newsize - _Oldsize, _Val);

	sub	esi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	shl	esi, 2

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	push	esi
	push	0
	push	ebx
	call	_memset

; 1808 :             return _First + _Count;

	lea	eax, DWORD PTR [esi+ebx]

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	add	esp, 12					; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1278 :     }

	mov	DWORD PTR [edi+4], eax
$LN5@resize:
	pop	edi
	pop	esi
	pop	ebx
	ret	4
?resize@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXI@Z ENDP ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::resize
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?size@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ PROC ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::size, COMDAT
; _this$ = ecx

; 1535 :         auto& _My_data = _Mypair._Myval2;
; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2

; 1537 :     }

	ret	0
?size@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ ENDP ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?resize@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?resize@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXI@Z PROC ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::resize, COMDAT
; _this$ = ecx

; 1275 :     _CONSTEXPR20_CONTAINER void resize(_CRT_GUARDOVERFLOW const size_type _Newsize) {

	push	ebx
	push	esi

; 1251 :         if (_Newsize < _Oldsize) { // trim

	mov	esi, DWORD PTR __Newsize$[esp+4]

; 1275 :     _CONSTEXPR20_CONTAINER void resize(_CRT_GUARDOVERFLOW const size_type _Newsize) {

	push	edi
	mov	edi, ecx

; 1250 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

	mov	ebx, DWORD PTR [edi+4]
	mov	ecx, ebx
	mov	edx, DWORD PTR [edi]
	sub	ecx, edx
	sar	ecx, 2

; 1251 :         if (_Newsize < _Oldsize) { // trim

	cmp	esi, ecx
	jae	SHORT $LN4@resize

; 1252 :             const pointer _Newlast = _Myfirst + _Newsize;

	lea	eax, DWORD PTR [edx+esi*4]

; 1278 :     }

	mov	DWORD PTR [edi+4], eax
	pop	edi
	pop	esi
	pop	ebx
	ret	4
$LN4@resize:

; 1259 :         if (_Newsize > _Oldsize) { // append

	jbe	SHORT $LN5@resize

; 1260 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

	mov	eax, DWORD PTR [edi+8]
	sub	eax, edx
	sar	eax, 2

; 1261 :             if (_Newsize > _Oldcapacity) { // reallocate

	cmp	esi, eax
	jbe	SHORT $LN6@resize

; 1262 :                 _Resize_reallocate(_Newsize, _Val);

	push	ecx
	push	esi
	mov	ecx, edi
	call	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::_Resize_reallocate<std::_Value_init_tag>
	pop	edi

; 1278 :     }

	pop	esi
	pop	ebx
	ret	4
$LN6@resize:

; 1267 :             _Mylast                = _Ufill(_Oldlast, _Newsize - _Oldsize, _Val);

	sub	esi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	shl	esi, 2

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	push	esi
	push	0
	push	ebx
	call	_memset

; 1808 :             return _First + _Count;

	lea	eax, DWORD PTR [esi+ebx]

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	add	esp, 12					; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1278 :     }

	mov	DWORD PTR [edi+4], eax
$LN5@resize:
	pop	edi
	pop	esi
	pop	ebx
	ret	4
?resize@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXI@Z ENDP ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::resize
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?size@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ PROC ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::size, COMDAT
; _this$ = ecx

; 1535 :         auto& _My_data = _Mypair._Myval2;
; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2

; 1537 :     }

	ret	0
?size@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ ENDP ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?resize@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?resize@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXI@Z PROC ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::resize, COMDAT
; _this$ = ecx

; 1275 :     _CONSTEXPR20_CONTAINER void resize(_CRT_GUARDOVERFLOW const size_type _Newsize) {

	push	ebx
	push	esi

; 1251 :         if (_Newsize < _Oldsize) { // trim

	mov	esi, DWORD PTR __Newsize$[esp+4]

; 1275 :     _CONSTEXPR20_CONTAINER void resize(_CRT_GUARDOVERFLOW const size_type _Newsize) {

	push	edi
	mov	edi, ecx

; 1250 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

	mov	ebx, DWORD PTR [edi+4]
	mov	ecx, ebx
	mov	edx, DWORD PTR [edi]
	sub	ecx, edx
	sar	ecx, 2

; 1251 :         if (_Newsize < _Oldsize) { // trim

	cmp	esi, ecx
	jae	SHORT $LN4@resize

; 1252 :             const pointer _Newlast = _Myfirst + _Newsize;

	lea	eax, DWORD PTR [edx+esi*4]

; 1278 :     }

	mov	DWORD PTR [edi+4], eax
	pop	edi
	pop	esi
	pop	ebx
	ret	4
$LN4@resize:

; 1259 :         if (_Newsize > _Oldsize) { // append

	jbe	SHORT $LN5@resize

; 1260 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

	mov	eax, DWORD PTR [edi+8]
	sub	eax, edx
	sar	eax, 2

; 1261 :             if (_Newsize > _Oldcapacity) { // reallocate

	cmp	esi, eax
	jbe	SHORT $LN6@resize

; 1262 :                 _Resize_reallocate(_Newsize, _Val);

	push	ecx
	push	esi
	mov	ecx, edi
	call	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::_Resize_reallocate<std::_Value_init_tag>
	pop	edi

; 1278 :     }

	pop	esi
	pop	ebx
	ret	4
$LN6@resize:

; 1267 :             _Mylast                = _Ufill(_Oldlast, _Newsize - _Oldsize, _Val);

	sub	esi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	shl	esi, 2

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	push	esi
	push	0
	push	ebx
	call	_memset

; 1808 :             return _First + _Count;

	lea	eax, DWORD PTR [esi+ebx]

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	add	esp, 12					; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1278 :     }

	mov	DWORD PTR [edi+4], eax
$LN5@resize:
	pop	edi
	pop	esi
	pop	ebx
	ret	4
?resize@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXI@Z ENDP ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::resize
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?size@?$vector@PAVIRender_Sector@@V?$xalloc@PAVIRender_Sector@@@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@PAVIRender_Sector@@V?$xalloc@PAVIRender_Sector@@@@@std@@QBEIXZ PROC ; std::vector<IRender_Sector *,xalloc<IRender_Sector *> >::size, COMDAT
; _this$ = ecx

; 1535 :         auto& _My_data = _Mypair._Myval2;
; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2

; 1537 :     }

	ret	0
?size@?$vector@PAVIRender_Sector@@V?$xalloc@PAVIRender_Sector@@@@@std@@QBEIXZ ENDP ; std::vector<IRender_Sector *,xalloc<IRender_Sector *> >::size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?begin@?$vector@PAVIRender_Sector@@V?$xalloc@PAVIRender_Sector@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Sector@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAVIRender_Sector@@V?$xalloc@PAVIRender_Sector@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Sector@@@std@@@std@@@2@XZ PROC ; std::vector<IRender_Sector *,xalloc<IRender_Sector *> >::begin, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], ecx

; 1462 :         auto& _My_data = _Mypair._Myval2;
; 1463 :         return iterator(_My_data._Myfirst, _STD addressof(_My_data));
; 1464 :     }

	ret	4
?begin@?$vector@PAVIRender_Sector@@V?$xalloc@PAVIRender_Sector@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Sector@@@std@@@std@@@2@XZ ENDP ; std::vector<IRender_Sector *,xalloc<IRender_Sector *> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?size@?$vector@VCFrustum@@V?$xalloc@VCFrustum@@@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@VCFrustum@@V?$xalloc@VCFrustum@@@@@std@@QBEIXZ PROC ; std::vector<CFrustum,xalloc<CFrustum> >::size, COMDAT
; _this$ = ecx

; 1535 :         auto& _My_data = _Mypair._Myval2;
; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2
	imul	eax, eax, -1056139499

; 1537 :     }

	ret	0
?size@?$vector@VCFrustum@@V?$xalloc@VCFrustum@@@@@std@@QBEIXZ ENDP ; std::vector<CFrustum,xalloc<CFrustum> >::size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?begin@?$vector@VCFrustum@@V?$xalloc@VCFrustum@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VCFrustum@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@VCFrustum@@V?$xalloc@VCFrustum@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VCFrustum@@@std@@@std@@@2@XZ PROC ; std::vector<CFrustum,xalloc<CFrustum> >::begin, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], ecx

; 1462 :         auto& _My_data = _Mypair._Myval2;
; 1463 :         return iterator(_My_data._Myfirst, _STD addressof(_My_data));
; 1464 :     }

	ret	4
?begin@?$vector@VCFrustum@@V?$xalloc@VCFrustum@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VCFrustum@@@std@@@std@@@2@XZ ENDP ; std::vector<CFrustum,xalloc<CFrustum> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
;	COMDAT ?recurseRL@?$FixedMAP@MU_MatrixItemS@R_dsgraph@@Udoug_lea_allocator@@@@AAEXPAUTNode@1@P6IX0@Z@Z
_TEXT	SEGMENT
_N$ = 8							; size = 4
_CB$dead$ = 12						; size = 4
?recurseRL@?$FixedMAP@MU_MatrixItemS@R_dsgraph@@Udoug_lea_allocator@@@@AAEXPAUTNode@1@P6IX0@Z@Z PROC ; FixedMAP<float,R_dsgraph::_MatrixItemS,doug_lea_allocator>::recurseRL, COMDAT
; _this$ = ecx

; 82   : 	{

	push	esi
	mov	esi, DWORD PTR _N$[esp]
	push	edi
	mov	edi, ecx
$LL250@recurseRL:

; 83   : 		if (N->right)	recurseRL(N->right,CB);

	mov	eax, DWORD PTR [esi+88]
	test	eax, eax
	je	SHORT $LN2@recurseRL
	push	OFFSET ?sorted_L1@@YIXPAUTNode@?$FixedMAP@MU_MatrixItemS@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; sorted_L1
	push	eax
	mov	ecx, edi
	call	?recurseRL@?$FixedMAP@MU_MatrixItemS@R_dsgraph@@Udoug_lea_allocator@@@@AAEXPAUTNode@1@P6IX0@Z@Z ; FixedMAP<float,R_dsgraph::_MatrixItemS,doug_lea_allocator>::recurseRL
$LN2@recurseRL:

; 84   : 		CB(N);

	mov	ecx, esi
	call	?sorted_L1@@YIXPAUTNode@?$FixedMAP@MU_MatrixItemS@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; sorted_L1

; 85   : 		if (N->left)	recurseRL(N->left,CB);

	mov	esi, DWORD PTR [esi+84]
	test	esi, esi
	jne	SHORT $LL250@recurseRL

; 86   : 	}

	pop	edi
	pop	esi
	ret	8
?recurseRL@?$FixedMAP@MU_MatrixItemS@R_dsgraph@@Udoug_lea_allocator@@@@AAEXPAUTNode@1@P6IX0@Z@Z ENDP ; FixedMAP<float,R_dsgraph::_MatrixItemS,doug_lea_allocator>::recurseRL
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
;	COMDAT ?recurseLR@?$FixedMAP@MU_MatrixItemS@R_dsgraph@@Udoug_lea_allocator@@@@AAEXPAUTNode@1@P6IX0@Z@Z
_TEXT	SEGMENT
_N$ = 8							; size = 4
_CB$dead$ = 12						; size = 4
?recurseLR@?$FixedMAP@MU_MatrixItemS@R_dsgraph@@Udoug_lea_allocator@@@@AAEXPAUTNode@1@P6IX0@Z@Z PROC ; FixedMAP<float,R_dsgraph::_MatrixItemS,doug_lea_allocator>::recurseLR, COMDAT
; _this$ = ecx

; 76   : 	{

	push	esi
	mov	esi, DWORD PTR _N$[esp]
	push	edi
	mov	edi, ecx
$LL250@recurseLR:

; 77   : 		if (N->left)	recurseLR(N->left,CB);

	mov	eax, DWORD PTR [esi+84]
	test	eax, eax
	je	SHORT $LN2@recurseLR
	push	OFFSET ?sorted_L1@@YIXPAUTNode@?$FixedMAP@MU_MatrixItemS@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; sorted_L1
	push	eax
	mov	ecx, edi
	call	?recurseLR@?$FixedMAP@MU_MatrixItemS@R_dsgraph@@Udoug_lea_allocator@@@@AAEXPAUTNode@1@P6IX0@Z@Z ; FixedMAP<float,R_dsgraph::_MatrixItemS,doug_lea_allocator>::recurseLR
$LN2@recurseLR:

; 78   : 		CB(N);

	mov	ecx, esi
	call	?sorted_L1@@YIXPAUTNode@?$FixedMAP@MU_MatrixItemS@R_dsgraph@@Udoug_lea_allocator@@@@@Z ; sorted_L1

; 79   : 		if (N->right)	recurseLR(N->right,CB);

	mov	esi, DWORD PTR [esi+88]
	test	esi, esi
	jne	SHORT $LL250@recurseLR

; 80   : 	}

	pop	edi
	pop	esi
	ret	8
?recurseLR@?$FixedMAP@MU_MatrixItemS@R_dsgraph@@Udoug_lea_allocator@@@@AAEXPAUTNode@1@P6IX0@Z@Z ENDP ; FixedMAP<float,R_dsgraph::_MatrixItemS,doug_lea_allocator>::recurseLR
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
;	COMDAT ?size@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@QAEIXZ
_TEXT	SEGMENT
?size@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@QAEIXZ PROC ; FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::size, COMDAT
; _this$ = ecx

; 203  : 	IC u32		size()		{ return pool;			}

	mov	eax, DWORD PTR [ecx+4]
	ret	0
?size@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@QAEIXZ ENDP ; FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
;	COMDAT ?end@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ
_TEXT	SEGMENT
?end@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ PROC ; FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::end, COMDAT
; _this$ = ecx

; 201  : 	IC TNode*	end()		{ return nodes+pool;	}

	mov	eax, DWORD PTR [ecx+4]
	lea	edx, DWORD PTR [eax*8]
	sub	edx, eax
	mov	eax, DWORD PTR [ecx]
	lea	eax, DWORD PTR [eax+edx*4]
	ret	0
?end@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ ENDP ; FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::end
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
;	COMDAT ?size@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@QAEIXZ
_TEXT	SEGMENT
?size@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@QAEIXZ PROC ; FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::size, COMDAT
; _this$ = ecx

; 203  : 	IC u32		size()		{ return pool;			}

	mov	eax, DWORD PTR [ecx+4]
	ret	0
?size@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@QAEIXZ ENDP ; FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
;	COMDAT ?end@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ
_TEXT	SEGMENT
?end@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ PROC ; FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::end, COMDAT
; _this$ = ecx

; 201  : 	IC TNode*	end()		{ return nodes+pool;	}

	mov	eax, DWORD PTR [ecx+4]
	lea	edx, DWORD PTR [eax*8]
	sub	edx, eax
	mov	eax, DWORD PTR [ecx]
	lea	eax, DWORD PTR [eax+edx*4]
	ret	0
?end@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ ENDP ; FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::end
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
;	COMDAT ?size@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@QAEIXZ
_TEXT	SEGMENT
?size@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@QAEIXZ PROC ; FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::size, COMDAT
; _this$ = ecx

; 203  : 	IC u32		size()		{ return pool;			}

	mov	eax, DWORD PTR [ecx+4]
	ret	0
?size@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@QAEIXZ ENDP ; FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
;	COMDAT ?end@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ
_TEXT	SEGMENT
?end@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ PROC ; FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::end, COMDAT
; _this$ = ecx

; 201  : 	IC TNode*	end()		{ return nodes+pool;	}

	mov	eax, DWORD PTR [ecx+4]
	lea	edx, DWORD PTR [eax*8]
	sub	edx, eax
	mov	eax, DWORD PTR [ecx]
	lea	eax, DWORD PTR [eax+edx*4]
	ret	0
?end@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ ENDP ; FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::end
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
;	COMDAT ?size@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAEIXZ
_TEXT	SEGMENT
?size@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAEIXZ PROC ; FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::size, COMDAT
; _this$ = ecx

; 203  : 	IC u32		size()		{ return pool;			}

	mov	eax, DWORD PTR [ecx+4]
	ret	0
?size@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAEIXZ ENDP ; FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
;	COMDAT ?end@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ
_TEXT	SEGMENT
?end@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ PROC ; FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::end, COMDAT
; _this$ = ecx

; 201  : 	IC TNode*	end()		{ return nodes+pool;	}

	mov	eax, DWORD PTR [ecx+4]
	lea	edx, DWORD PTR [eax*8]
	sub	edx, eax
	mov	eax, DWORD PTR [ecx]
	lea	eax, DWORD PTR [eax+edx*4]
	ret	0
?end@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ ENDP ; FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::end
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
;	COMDAT ?size@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@QAEIXZ
_TEXT	SEGMENT
?size@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@QAEIXZ PROC ; FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::size, COMDAT
; _this$ = ecx

; 203  : 	IC u32		size()		{ return pool;			}

	mov	eax, DWORD PTR [ecx+4]
	ret	0
?size@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@QAEIXZ ENDP ; FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ?clear_and_free@?$xr_vector@U_MatrixItem@R_dsgraph@@V?$doug_lea_alloc@U_MatrixItem@R_dsgraph@@@@@@QAEXXZ
_TEXT	SEGMENT
?clear_and_free@?$xr_vector@U_MatrixItem@R_dsgraph@@V?$doug_lea_alloc@U_MatrixItem@R_dsgraph@@@@@@QAEXXZ PROC ; xr_vector<R_dsgraph::_MatrixItem,doug_lea_alloc<R_dsgraph::_MatrixItem> >::clear_and_free, COMDAT
; _this$ = ecx

; 127  : 	void	clear_and_free		()									{ inherited::clear();			}

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [ecx+4], eax
	ret	0
?clear_and_free@?$xr_vector@U_MatrixItem@R_dsgraph@@V?$doug_lea_alloc@U_MatrixItem@R_dsgraph@@@@@@QAEXXZ ENDP ; xr_vector<R_dsgraph::_MatrixItem,doug_lea_alloc<R_dsgraph::_MatrixItem> >::clear_and_free
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
;	COMDAT ?size@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@QAEIXZ
_TEXT	SEGMENT
?size@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@QAEIXZ PROC ; FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::size, COMDAT
; _this$ = ecx

; 203  : 	IC u32		size()		{ return pool;			}

	mov	eax, DWORD PTR [ecx+4]
	ret	0
?size@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@QAEIXZ ENDP ; FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
;	COMDAT ?end@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ
_TEXT	SEGMENT
?end@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ PROC ; FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::end, COMDAT
; _this$ = ecx

; 201  : 	IC TNode*	end()		{ return nodes+pool;	}

	mov	eax, DWORD PTR [ecx+4]
	lea	edx, DWORD PTR [eax*8]
	sub	edx, eax
	mov	eax, DWORD PTR [ecx]
	lea	eax, DWORD PTR [eax+edx*4]
	ret	0
?end@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ ENDP ; FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::end
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
;	COMDAT ?size@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@QAEIXZ
_TEXT	SEGMENT
?size@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@QAEIXZ PROC ; FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::size, COMDAT
; _this$ = ecx

; 203  : 	IC u32		size()		{ return pool;			}

	mov	eax, DWORD PTR [ecx+4]
	ret	0
?size@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@QAEIXZ ENDP ; FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
;	COMDAT ?end@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ
_TEXT	SEGMENT
?end@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ PROC ; FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::end, COMDAT
; _this$ = ecx

; 201  : 	IC TNode*	end()		{ return nodes+pool;	}

	mov	eax, DWORD PTR [ecx+4]
	lea	edx, DWORD PTR [eax*8]
	sub	edx, eax
	mov	eax, DWORD PTR [ecx]
	lea	eax, DWORD PTR [eax+edx*4]
	ret	0
?end@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ ENDP ; FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::end
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
;	COMDAT ?size@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@QAEIXZ
_TEXT	SEGMENT
?size@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@QAEIXZ PROC ; FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::size, COMDAT
; _this$ = ecx

; 203  : 	IC u32		size()		{ return pool;			}

	mov	eax, DWORD PTR [ecx+4]
	ret	0
?size@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@QAEIXZ ENDP ; FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
;	COMDAT ?end@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ
_TEXT	SEGMENT
?end@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ PROC ; FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::end, COMDAT
; _this$ = ecx

; 201  : 	IC TNode*	end()		{ return nodes+pool;	}

	mov	eax, DWORD PTR [ecx+4]
	lea	edx, DWORD PTR [eax*8]
	sub	edx, eax
	mov	eax, DWORD PTR [ecx]
	lea	eax, DWORD PTR [eax+edx*4]
	ret	0
?end@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ ENDP ; FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::end
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
;	COMDAT ?size@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAEIXZ
_TEXT	SEGMENT
?size@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAEIXZ PROC ; FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::size, COMDAT
; _this$ = ecx

; 203  : 	IC u32		size()		{ return pool;			}

	mov	eax, DWORD PTR [ecx+4]
	ret	0
?size@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAEIXZ ENDP ; FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
;	COMDAT ?end@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ
_TEXT	SEGMENT
?end@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ PROC ; FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::end, COMDAT
; _this$ = ecx

; 201  : 	IC TNode*	end()		{ return nodes+pool;	}

	mov	eax, DWORD PTR [ecx+4]
	lea	edx, DWORD PTR [eax*8]
	sub	edx, eax
	mov	eax, DWORD PTR [ecx]
	lea	eax, DWORD PTR [eax+edx*4]
	ret	0
?end@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ ENDP ; FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::end
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
;	COMDAT ?size@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@QAEIXZ
_TEXT	SEGMENT
?size@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@QAEIXZ PROC ; FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::size, COMDAT
; _this$ = ecx

; 203  : 	IC u32		size()		{ return pool;			}

	mov	eax, DWORD PTR [ecx+4]
	ret	0
?size@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@QAEIXZ ENDP ; FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ?clear_and_free@?$xr_vector@U_NormalItem@R_dsgraph@@V?$doug_lea_alloc@U_NormalItem@R_dsgraph@@@@@@QAEXXZ
_TEXT	SEGMENT
?clear_and_free@?$xr_vector@U_NormalItem@R_dsgraph@@V?$doug_lea_alloc@U_NormalItem@R_dsgraph@@@@@@QAEXXZ PROC ; xr_vector<R_dsgraph::_NormalItem,doug_lea_alloc<R_dsgraph::_NormalItem> >::clear_and_free, COMDAT
; _this$ = ecx

; 127  : 	void	clear_and_free		()									{ inherited::clear();			}

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [ecx+4], eax
	ret	0
?clear_and_free@?$xr_vector@U_NormalItem@R_dsgraph@@V?$doug_lea_alloc@U_NormalItem@R_dsgraph@@@@@@QAEXXZ ENDP ; xr_vector<R_dsgraph::_NormalItem,doug_lea_alloc<R_dsgraph::_NormalItem> >::clear_and_free
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_matrix.h
;	COMDAT ?build_projection_HAT@?$_matrix@M@@QAEAAU1@MMMM@Z
_TEXT	SEGMENT
_HAT$ = 8						; size = 4
_fAspect$ = 12						; size = 4
_fNearPlane$ = 16					; size = 4
_fFarPlane$ = 20					; size = 4
?build_projection_HAT@?$_matrix@M@@QAEAAU1@MMMM@Z PROC	; _matrix<float>::build_projection_HAT, COMDAT
; _this$ = ecx

; 403  : 		VERIFY( _abs(fFarPlane-fNearPlane) > EPS_S );
; 404  : 		VERIFY( _abs(HAT) > EPS_S );
; 405  : 		
; 406  : 		T cot	= T(1)/HAT;
; 407  : 		T w		= fAspect * cot;
; 408  : 		T h		= T(1)    * cot;
; 409  : 		T Q		= fFarPlane / ( fFarPlane - fNearPlane );

	movss	xmm3, DWORD PTR _fFarPlane$[esp-4]

; 410  : 		
; 411  : 		_11		= w;	_12 = 0;	_13 = 0;			_14 = 0;
; 412  : 		_21		= 0;	_22	= h;	_23 = 0;			_24 = 0;
; 413  : 		_31		= 0;	_32 = 0;	_33 = Q;			_34 = 1.0f;
; 414  : 		_41		= 0;	_42 = 0;	_43	= -Q*fNearPlane;_44 = 0;
; 415  : 		return *this; 

	mov	eax, ecx
	movss	xmm1, DWORD PTR __real@3f800000
	movaps	xmm0, xmm3
	subss	xmm0, DWORD PTR _fNearPlane$[esp-4]
	divss	xmm1, DWORD PTR _HAT$[esp-4]
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+44], 1065353216		; 3f800000H
	mov	DWORD PTR [ecx+48], 0
	mov	DWORD PTR [ecx+52], 0
	mov	DWORD PTR [ecx+60], 0
	divss	xmm3, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR [ecx+20], xmm1
	mulss	xmm0, DWORD PTR _fAspect$[esp-4]
	movss	DWORD PTR [ecx+40], xmm3
	mulss	xmm3, DWORD PTR _fNearPlane$[esp-4]
	movss	DWORD PTR [ecx], xmm0
	xorps	xmm3, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR [ecx+56], xmm3

; 416  : 	}

	ret	16					; 00000010H
?build_projection_HAT@?$_matrix@M@@QAEAAU1@MMMM@Z ENDP	; _matrix<float>::build_projection_HAT
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Portal@@@std@@@std@@@std@@QAE@PAPAVIRender_Portal@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
___param0$ = 8						; size = 4
___param1$dead$ = 12					; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Portal@@@std@@@std@@@std@@QAE@PAPAVIRender_Portal@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<IRender_Portal *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<IRender_Portal *> > >, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR ___param0$[esp-4]
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	ret	8
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Portal@@@std@@@std@@@std@@QAE@PAPAVIRender_Portal@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<IRender_Portal *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<IRender_Portal *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Sector@@@std@@@std@@@std@@QAE@PAPAVIRender_Sector@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
___param0$ = 8						; size = 4
___param1$dead$ = 12					; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Sector@@@std@@@std@@@std@@QAE@PAPAVIRender_Sector@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<IRender_Sector *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<IRender_Sector *> > >, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR ___param0$[esp-4]
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	ret	8
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Sector@@@std@@@std@@@std@@QAE@PAPAVIRender_Sector@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<IRender_Sector *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<IRender_Sector *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VCFrustum@@@std@@@std@@@std@@QAE@PAVCFrustum@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
___param0$ = 8						; size = 4
___param1$dead$ = 12					; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VCFrustum@@@std@@@std@@@std@@QAE@PAVCFrustum@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CFrustum> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<CFrustum> > >, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR ___param0$[esp-4]
	mov	DWORD PTR [ecx], eax
	mov	eax, ecx
	ret	8
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VCFrustum@@@std@@@std@@@std@@QAE@PAVCFrustum@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CFrustum> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<CFrustum> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VCFrustum@@@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VCFrustum@@@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CFrustum> > >::operator+=, COMDAT
; _this$ = ecx

; 119  :         _Ptr += _Off;

	imul	eax, DWORD PTR __Off$[esp-4], 244
	add	DWORD PTR [ecx], eax

; 298  :         _Mybase::operator+=(_Off);
; 299  :         return *this;

	mov	eax, ecx

; 300  :     }

	ret	4
??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@VCFrustum@@@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CFrustum> > >::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCFrustum@@@std@@@std@@@std@@QBEABVCFrustum@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCFrustum@@@std@@@std@@@std@@QBEABVCFrustum@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CFrustum> > >::operator*, COMDAT
; _this$ = ecx

; 46   : #if _ITERATOR_DEBUG_LEVEL != 0
; 47   :         const auto _Mycont = static_cast<const _Myvec*>(this->_Getcont());
; 48   :         _STL_VERIFY(_Ptr, "can't dereference value-initialized vector iterator");
; 49   :         _STL_VERIFY(
; 50   :             _Mycont->_Myfirst <= _Ptr && _Ptr < _Mycont->_Mylast, "can't dereference out of range vector iterator");
; 51   : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 52   : 
; 53   :         return *_Ptr;

	mov	eax, DWORD PTR [ecx]

; 54   :     }

	ret	0
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCFrustum@@@std@@@std@@@std@@QBEABVCFrustum@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CFrustum> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCFrustum@@@std@@@std@@@std@@QAE@PAVCFrustum@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$dead$ = 12					; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCFrustum@@@std@@@std@@@std@@QAE@PAVCFrustum@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CFrustum> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CFrustum> > >, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR __Parg$[esp-4]
	mov	DWORD PTR [ecx], eax

; 42   :         this->_Adopt(_Pvector);
; 43   :     }

	mov	eax, ecx
	ret	8
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCFrustum@@@std@@@std@@@std@@QAE@PAVCFrustum@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CFrustum> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CFrustum> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Sector@@@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Sector@@@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<IRender_Sector *> > >::operator+=, COMDAT
; _this$ = ecx

; 119  :         _Ptr += _Off;

	mov	eax, DWORD PTR __Off$[esp-4]
	shl	eax, 2
	add	DWORD PTR [ecx], eax

; 298  :         _Mybase::operator+=(_Off);
; 299  :         return *this;

	mov	eax, ecx

; 300  :     }

	ret	4
??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Sector@@@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<IRender_Sector *> > >::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Sector@@@std@@@std@@@std@@QBEABQAVIRender_Sector@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Sector@@@std@@@std@@@std@@QBEABQAVIRender_Sector@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<IRender_Sector *> > >::operator*, COMDAT
; _this$ = ecx

; 46   : #if _ITERATOR_DEBUG_LEVEL != 0
; 47   :         const auto _Mycont = static_cast<const _Myvec*>(this->_Getcont());
; 48   :         _STL_VERIFY(_Ptr, "can't dereference value-initialized vector iterator");
; 49   :         _STL_VERIFY(
; 50   :             _Mycont->_Myfirst <= _Ptr && _Ptr < _Mycont->_Mylast, "can't dereference out of range vector iterator");
; 51   : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 52   : 
; 53   :         return *_Ptr;

	mov	eax, DWORD PTR [ecx]

; 54   :     }

	ret	0
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Sector@@@std@@@std@@@std@@QBEABQAVIRender_Sector@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<IRender_Sector *> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Sector@@@std@@@std@@@std@@QAE@PAPAVIRender_Sector@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$dead$ = 12					; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Sector@@@std@@@std@@@std@@QAE@PAPAVIRender_Sector@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<IRender_Sector *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<IRender_Sector *> > >, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR __Parg$[esp-4]
	mov	DWORD PTR [ecx], eax

; 42   :         this->_Adopt(_Pvector);
; 43   :     }

	mov	eax, ecx
	ret	8
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Sector@@@std@@@std@@@std@@QAE@PAPAVIRender_Sector@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<IRender_Sector *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<IRender_Sector *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Portal@@@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Portal@@@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<IRender_Portal *> > >::operator+=, COMDAT
; _this$ = ecx

; 119  :         _Ptr += _Off;

	mov	eax, DWORD PTR __Off$[esp-4]
	shl	eax, 2
	add	DWORD PTR [ecx], eax

; 298  :         _Mybase::operator+=(_Off);
; 299  :         return *this;

	mov	eax, ecx

; 300  :     }

	ret	4
??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Portal@@@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<IRender_Portal *> > >::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Portal@@@std@@@std@@@std@@QBEABQAVIRender_Portal@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Portal@@@std@@@std@@@std@@QBEABQAVIRender_Portal@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<IRender_Portal *> > >::operator*, COMDAT
; _this$ = ecx

; 46   : #if _ITERATOR_DEBUG_LEVEL != 0
; 47   :         const auto _Mycont = static_cast<const _Myvec*>(this->_Getcont());
; 48   :         _STL_VERIFY(_Ptr, "can't dereference value-initialized vector iterator");
; 49   :         _STL_VERIFY(
; 50   :             _Mycont->_Myfirst <= _Ptr && _Ptr < _Mycont->_Mylast, "can't dereference out of range vector iterator");
; 51   : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 52   : 
; 53   :         return *_Ptr;

	mov	eax, DWORD PTR [ecx]

; 54   :     }

	ret	0
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Portal@@@std@@@std@@@std@@QBEABQAVIRender_Portal@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<IRender_Portal *> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Portal@@@std@@@std@@@std@@QAE@PAPAVIRender_Portal@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$dead$ = 12					; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Portal@@@std@@@std@@@std@@QAE@PAPAVIRender_Portal@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<IRender_Portal *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<IRender_Portal *> > >, COMDAT
; _this$ = ecx

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR __Parg$[esp-4]
	mov	DWORD PTR [ecx], eax

; 42   :         this->_Adopt(_Pvector);
; 43   :     }

	mov	eax, ecx
	ret	8
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Portal@@@std@@@std@@@std@@QAE@PAPAVIRender_Portal@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<IRender_Portal *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<IRender_Portal *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> > >::operator+=, COMDAT
; _this$ = ecx

; 119  :         _Ptr += _Off;

	mov	eax, DWORD PTR __Off$[esp-4]
	shl	eax, 2
	add	DWORD PTR [ecx], eax

; 298  :         _Mybase::operator+=(_Off);
; 299  :         return *this;

	mov	eax, ecx

; 300  :     }

	ret	4
??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> > >::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEABQAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEABQAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> > >::operator*, COMDAT
; _this$ = ecx

; 46   : #if _ITERATOR_DEBUG_LEVEL != 0
; 47   :         const auto _Mycont = static_cast<const _Myvec*>(this->_Getcont());
; 48   :         _STL_VERIFY(_Ptr, "can't dereference value-initialized vector iterator");
; 49   :         _STL_VERIFY(
; 50   :             _Mycont->_Myfirst <= _Ptr && _Ptr < _Mycont->_Mylast, "can't dereference out of range vector iterator");
; 51   : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 52   : 
; 53   :         return *_Ptr;

	mov	eax, DWORD PTR [ecx]

; 54   :     }

	ret	0
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEABQAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> > >::operator+=, COMDAT
; _this$ = ecx

; 119  :         _Ptr += _Off;

	mov	eax, DWORD PTR __Off$[esp-4]
	shl	eax, 2
	add	DWORD PTR [ecx], eax

; 298  :         _Mybase::operator+=(_Off);
; 299  :         return *this;

	mov	eax, ecx

; 300  :     }

	ret	4
??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> > >::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEABQAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEABQAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> > >::operator*, COMDAT
; _this$ = ecx

; 46   : #if _ITERATOR_DEBUG_LEVEL != 0
; 47   :         const auto _Mycont = static_cast<const _Myvec*>(this->_Getcont());
; 48   :         _STL_VERIFY(_Ptr, "can't dereference value-initialized vector iterator");
; 49   :         _STL_VERIFY(
; 50   :             _Mycont->_Myfirst <= _Ptr && _Ptr < _Mycont->_Mylast, "can't dereference out of range vector iterator");
; 51   : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 52   : 
; 53   :         return *_Ptr;

	mov	eax, DWORD PTR [ecx]

; 54   :     }

	ret	0
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEABQAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> > >::operator+=, COMDAT
; _this$ = ecx

; 119  :         _Ptr += _Off;

	mov	eax, DWORD PTR __Off$[esp-4]
	shl	eax, 2
	add	DWORD PTR [ecx], eax

; 298  :         _Mybase::operator+=(_Off);
; 299  :         return *this;

	mov	eax, ecx

; 300  :     }

	ret	4
??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> > >::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEABQAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEABQAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> > >::operator*, COMDAT
; _this$ = ecx

; 46   : #if _ITERATOR_DEBUG_LEVEL != 0
; 47   :         const auto _Mycont = static_cast<const _Myvec*>(this->_Getcont());
; 48   :         _STL_VERIFY(_Ptr, "can't dereference value-initialized vector iterator");
; 49   :         _STL_VERIFY(
; 50   :             _Mycont->_Myfirst <= _Ptr && _Ptr < _Mycont->_Mylast, "can't dereference out of range vector iterator");
; 51   : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 52   : 
; 53   :         return *_Ptr;

	mov	eax, DWORD PTR [ecx]

; 54   :     }

	ret	0
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEABQAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> > >::operator+=, COMDAT
; _this$ = ecx

; 119  :         _Ptr += _Off;

	mov	eax, DWORD PTR __Off$[esp-4]
	shl	eax, 2
	add	DWORD PTR [ecx], eax

; 298  :         _Mybase::operator+=(_Off);
; 299  :         return *this;

	mov	eax, ecx

; 300  :     }

	ret	4
??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> > >::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEABQAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEABQAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> > >::operator*, COMDAT
; _this$ = ecx

; 46   : #if _ITERATOR_DEBUG_LEVEL != 0
; 47   :         const auto _Mycont = static_cast<const _Myvec*>(this->_Getcont());
; 48   :         _STL_VERIFY(_Ptr, "can't dereference value-initialized vector iterator");
; 49   :         _STL_VERIFY(
; 50   :             _Mycont->_Myfirst <= _Ptr && _Ptr < _Mycont->_Mylast, "can't dereference out of range vector iterator");
; 51   : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 52   : 
; 53   :         return *_Ptr;

	mov	eax, DWORD PTR [ecx]

; 54   :     }

	ret	0
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEABQAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> > >::operator+=, COMDAT
; _this$ = ecx

; 119  :         _Ptr += _Off;

	mov	eax, DWORD PTR __Off$[esp-4]
	shl	eax, 2
	add	DWORD PTR [ecx], eax

; 298  :         _Mybase::operator+=(_Off);
; 299  :         return *this;

	mov	eax, ecx

; 300  :     }

	ret	4
??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> > >::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEABQAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEABQAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> > >::operator*, COMDAT
; _this$ = ecx

; 46   : #if _ITERATOR_DEBUG_LEVEL != 0
; 47   :         const auto _Mycont = static_cast<const _Myvec*>(this->_Getcont());
; 48   :         _STL_VERIFY(_Ptr, "can't dereference value-initialized vector iterator");
; 49   :         _STL_VERIFY(
; 50   :             _Mycont->_Myfirst <= _Ptr && _Ptr < _Mycont->_Mylast, "can't dereference out of range vector iterator");
; 51   : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 52   : 
; 53   :         return *_Ptr;

	mov	eax, DWORD PTR [ecx]

; 54   :     }

	ret	0
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEABQAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> > >::operator+=, COMDAT
; _this$ = ecx

; 119  :         _Ptr += _Off;

	mov	eax, DWORD PTR __Off$[esp-4]
	shl	eax, 2
	add	DWORD PTR [ecx], eax

; 298  :         _Mybase::operator+=(_Off);
; 299  :         return *this;

	mov	eax, ecx

; 300  :     }

	ret	4
??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> > >::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEABQAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEABQAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> > >::operator*, COMDAT
; _this$ = ecx

; 46   : #if _ITERATOR_DEBUG_LEVEL != 0
; 47   :         const auto _Mycont = static_cast<const _Myvec*>(this->_Getcont());
; 48   :         _STL_VERIFY(_Ptr, "can't dereference value-initialized vector iterator");
; 49   :         _STL_VERIFY(
; 50   :             _Mycont->_Myfirst <= _Ptr && _Ptr < _Mycont->_Mylast, "can't dereference out of range vector iterator");
; 51   : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 52   : 
; 53   :         return *_Ptr;

	mov	eax, DWORD PTR [ecx]

; 54   :     }

	ret	0
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEABQAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> > >::operator+=, COMDAT
; _this$ = ecx

; 119  :         _Ptr += _Off;

	mov	eax, DWORD PTR __Off$[esp-4]
	shl	eax, 2
	add	DWORD PTR [ecx], eax

; 298  :         _Mybase::operator+=(_Off);
; 299  :         return *this;

	mov	eax, ecx

; 300  :     }

	ret	4
??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> > >::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEABQAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEABQAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> > >::operator*, COMDAT
; _this$ = ecx

; 46   : #if _ITERATOR_DEBUG_LEVEL != 0
; 47   :         const auto _Mycont = static_cast<const _Myvec*>(this->_Getcont());
; 48   :         _STL_VERIFY(_Ptr, "can't dereference value-initialized vector iterator");
; 49   :         _STL_VERIFY(
; 50   :             _Mycont->_Myfirst <= _Ptr && _Ptr < _Mycont->_Mylast, "can't dereference out of range vector iterator");
; 51   : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 52   : 
; 53   :         return *_Ptr;

	mov	eax, DWORD PTR [ecx]

; 54   :     }

	ret	0
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEABQAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> > >::operator+=, COMDAT
; _this$ = ecx

; 119  :         _Ptr += _Off;

	mov	eax, DWORD PTR __Off$[esp-4]
	shl	eax, 2
	add	DWORD PTR [ecx], eax

; 298  :         _Mybase::operator+=(_Off);
; 299  :         return *this;

	mov	eax, ecx

; 300  :     }

	ret	4
??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> > >::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEABQAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEABQAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> > >::operator*, COMDAT
; _this$ = ecx

; 46   : #if _ITERATOR_DEBUG_LEVEL != 0
; 47   :         const auto _Mycont = static_cast<const _Myvec*>(this->_Getcont());
; 48   :         _STL_VERIFY(_Ptr, "can't dereference value-initialized vector iterator");
; 49   :         _STL_VERIFY(
; 50   :             _Mycont->_Myfirst <= _Ptr && _Ptr < _Mycont->_Mylast, "can't dereference out of range vector iterator");
; 51   : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 52   : 
; 53   :         return *_Ptr;

	mov	eax, DWORD PTR [ecx]

; 54   :     }

	ret	0
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEABQAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> > >::operator+=, COMDAT
; _this$ = ecx

; 119  :         _Ptr += _Off;

	mov	eax, DWORD PTR __Off$[esp-4]
	shl	eax, 2
	add	DWORD PTR [ecx], eax

; 298  :         _Mybase::operator+=(_Off);
; 299  :         return *this;

	mov	eax, ecx

; 300  :     }

	ret	4
??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> > >::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> > >::operator*, COMDAT
; _this$ = ecx

; 46   : #if _ITERATOR_DEBUG_LEVEL != 0
; 47   :         const auto _Mycont = static_cast<const _Myvec*>(this->_Getcont());
; 48   :         _STL_VERIFY(_Ptr, "can't dereference value-initialized vector iterator");
; 49   :         _STL_VERIFY(
; 50   :             _Mycont->_Myfirst <= _Ptr && _Ptr < _Mycont->_Mylast, "can't dereference out of range vector iterator");
; 51   : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 52   : 
; 53   :         return *_Ptr;

	mov	eax, DWORD PTR [ecx]

; 54   :     }

	ret	0
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> > >::operator+=, COMDAT
; _this$ = ecx

; 119  :         _Ptr += _Off;

	mov	eax, DWORD PTR __Off$[esp-4]
	shl	eax, 2
	add	DWORD PTR [ecx], eax

; 298  :         _Mybase::operator+=(_Off);
; 299  :         return *this;

	mov	eax, ecx

; 300  :     }

	ret	4
??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> > >::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> > >::operator*, COMDAT
; _this$ = ecx

; 46   : #if _ITERATOR_DEBUG_LEVEL != 0
; 47   :         const auto _Mycont = static_cast<const _Myvec*>(this->_Getcont());
; 48   :         _STL_VERIFY(_Ptr, "can't dereference value-initialized vector iterator");
; 49   :         _STL_VERIFY(
; 50   :             _Mycont->_Myfirst <= _Ptr && _Ptr < _Mycont->_Mylast, "can't dereference out of range vector iterator");
; 51   : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 52   : 
; 53   :         return *_Ptr;

	mov	eax, DWORD PTR [ecx]

; 54   :     }

	ret	0
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?clear@?$vector@U_MatrixItem@R_dsgraph@@V?$doug_lea_alloc@U_MatrixItem@R_dsgraph@@@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@U_MatrixItem@R_dsgraph@@V?$doug_lea_alloc@U_MatrixItem@R_dsgraph@@@@@std@@QAEXXZ PROC ; std::vector<R_dsgraph::_MatrixItem,doug_lea_alloc<R_dsgraph::_MatrixItem> >::clear, COMDAT
; _this$ = ecx

; 1437 :         auto& _My_data    = _Mypair._Myval2;
; 1438 :         pointer& _Myfirst = _My_data._Myfirst;
; 1439 :         pointer& _Mylast  = _My_data._Mylast;
; 1440 : 
; 1441 :         _My_data._Orphan_all();
; 1442 :         _Destroy(_Myfirst, _Mylast);
; 1443 :         _Mylast = _Myfirst;

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [ecx+4], eax

; 1444 :     }

	ret	0
?clear@?$vector@U_MatrixItem@R_dsgraph@@V?$doug_lea_alloc@U_MatrixItem@R_dsgraph@@@@@std@@QAEXXZ ENDP ; std::vector<R_dsgraph::_MatrixItem,doug_lea_alloc<R_dsgraph::_MatrixItem> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?clear@?$vector@U_NormalItem@R_dsgraph@@V?$doug_lea_alloc@U_NormalItem@R_dsgraph@@@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@U_NormalItem@R_dsgraph@@V?$doug_lea_alloc@U_NormalItem@R_dsgraph@@@@@std@@QAEXXZ PROC ; std::vector<R_dsgraph::_NormalItem,doug_lea_alloc<R_dsgraph::_NormalItem> >::clear, COMDAT
; _this$ = ecx

; 1437 :         auto& _My_data    = _Mypair._Myval2;
; 1438 :         pointer& _Myfirst = _My_data._Myfirst;
; 1439 :         pointer& _Mylast  = _My_data._Mylast;
; 1440 : 
; 1441 :         _My_data._Orphan_all();
; 1442 :         _Destroy(_Myfirst, _Mylast);
; 1443 :         _Mylast = _Myfirst;

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [ecx+4], eax

; 1444 :     }

	ret	0
?clear@?$vector@U_NormalItem@R_dsgraph@@V?$doug_lea_alloc@U_NormalItem@R_dsgraph@@@@@std@@QAEXXZ ENDP ; std::vector<R_dsgraph::_NormalItem,doug_lea_alloc<R_dsgraph::_NormalItem> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCFrustum@@@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCFrustum@@@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CFrustum> > >::operator+=, COMDAT
; _this$ = ecx

; 118  :         _Verify_offset(_Off);
; 119  :         _Ptr += _Off;

	imul	eax, DWORD PTR __Off$[esp-4], 244
	add	DWORD PTR [ecx], eax

; 120  :         return *this;

	mov	eax, ecx

; 121  :     }

	ret	4
??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCFrustum@@@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CFrustum> > >::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Sector@@@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Sector@@@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<IRender_Sector *> > >::operator+=, COMDAT
; _this$ = ecx

; 118  :         _Verify_offset(_Off);
; 119  :         _Ptr += _Off;

	mov	eax, DWORD PTR __Off$[esp-4]
	shl	eax, 2
	add	DWORD PTR [ecx], eax

; 120  :         return *this;

	mov	eax, ecx

; 121  :     }

	ret	4
??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Sector@@@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<IRender_Sector *> > >::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Portal@@@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Portal@@@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<IRender_Portal *> > >::operator+=, COMDAT
; _this$ = ecx

; 118  :         _Verify_offset(_Off);
; 119  :         _Ptr += _Off;

	mov	eax, DWORD PTR __Off$[esp-4]
	shl	eax, 2
	add	DWORD PTR [ecx], eax

; 120  :         return *this;

	mov	eax, ecx

; 121  :     }

	ret	4
??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Portal@@@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<IRender_Portal *> > >::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> > >::operator+=, COMDAT
; _this$ = ecx

; 118  :         _Verify_offset(_Off);
; 119  :         _Ptr += _Off;

	mov	eax, DWORD PTR __Off$[esp-4]
	shl	eax, 2
	add	DWORD PTR [ecx], eax

; 120  :         return *this;

	mov	eax, ecx

; 121  :     }

	ret	4
??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> > >::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> > >::operator+=, COMDAT
; _this$ = ecx

; 118  :         _Verify_offset(_Off);
; 119  :         _Ptr += _Off;

	mov	eax, DWORD PTR __Off$[esp-4]
	shl	eax, 2
	add	DWORD PTR [ecx], eax

; 120  :         return *this;

	mov	eax, ecx

; 121  :     }

	ret	4
??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> > >::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> > >::operator+=, COMDAT
; _this$ = ecx

; 118  :         _Verify_offset(_Off);
; 119  :         _Ptr += _Off;

	mov	eax, DWORD PTR __Off$[esp-4]
	shl	eax, 2
	add	DWORD PTR [ecx], eax

; 120  :         return *this;

	mov	eax, ecx

; 121  :     }

	ret	4
??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> > >::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> > >::operator+=, COMDAT
; _this$ = ecx

; 118  :         _Verify_offset(_Off);
; 119  :         _Ptr += _Off;

	mov	eax, DWORD PTR __Off$[esp-4]
	shl	eax, 2
	add	DWORD PTR [ecx], eax

; 120  :         return *this;

	mov	eax, ecx

; 121  :     }

	ret	4
??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> > >::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> > >::operator+=, COMDAT
; _this$ = ecx

; 118  :         _Verify_offset(_Off);
; 119  :         _Ptr += _Off;

	mov	eax, DWORD PTR __Off$[esp-4]
	shl	eax, 2
	add	DWORD PTR [ecx], eax

; 120  :         return *this;

	mov	eax, ecx

; 121  :     }

	ret	4
??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> > >::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> > >::operator+=, COMDAT
; _this$ = ecx

; 118  :         _Verify_offset(_Off);
; 119  :         _Ptr += _Off;

	mov	eax, DWORD PTR __Off$[esp-4]
	shl	eax, 2
	add	DWORD PTR [ecx], eax

; 120  :         return *this;

	mov	eax, ecx

; 121  :     }

	ret	4
??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> > >::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> > >::operator+=, COMDAT
; _this$ = ecx

; 118  :         _Verify_offset(_Off);
; 119  :         _Ptr += _Off;

	mov	eax, DWORD PTR __Off$[esp-4]
	shl	eax, 2
	add	DWORD PTR [ecx], eax

; 120  :         return *this;

	mov	eax, ecx

; 121  :     }

	ret	4
??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> > >::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> > >::operator+=, COMDAT
; _this$ = ecx

; 118  :         _Verify_offset(_Off);
; 119  :         _Ptr += _Off;

	mov	eax, DWORD PTR __Off$[esp-4]
	shl	eax, 2
	add	DWORD PTR [ecx], eax

; 120  :         return *this;

	mov	eax, ecx

; 121  :     }

	ret	4
??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> > >::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> > >::operator+=, COMDAT
; _this$ = ecx

; 118  :         _Verify_offset(_Off);
; 119  :         _Ptr += _Off;

	mov	eax, DWORD PTR __Off$[esp-4]
	shl	eax, 2
	add	DWORD PTR [ecx], eax

; 120  :         return *this;

	mov	eax, ecx

; 121  :     }

	ret	4
??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> > >::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> > >::operator+=, COMDAT
; _this$ = ecx

; 118  :         _Verify_offset(_Off);
; 119  :         _Ptr += _Off;

	mov	eax, DWORD PTR __Off$[esp-4]
	shl	eax, 2
	add	DWORD PTR [ecx], eax

; 120  :         return *this;

	mov	eax, ecx

; 121  :     }

	ret	4
??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> > >::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Verify_offset@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCFrustum@@@std@@@std@@@std@@QBEXH@Z
_TEXT	SEGMENT
__Off$dead$ = 8						; size = 4
?_Verify_offset@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCFrustum@@@std@@@std@@@std@@QBEXH@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CFrustum> > >::_Verify_offset, COMDAT
; _this$dead$ = ecx

; 102  : #if _ITERATOR_DEBUG_LEVEL == 0
; 103  :         (void) _Off;
; 104  : #else // ^^^ _ITERATOR_DEBUG_LEVEL == 0 ^^^ // vvv _ITERATOR_DEBUG_LEVEL != 0 vvv
; 105  :         const auto _Mycont = static_cast<const _Myvec*>(this->_Getcont());
; 106  :         _STL_VERIFY(_Off == 0 || _Ptr, "cannot seek value-initialized vector iterator");
; 107  :         if (_Off < 0) {
; 108  :             _STL_VERIFY(_Off >= _Mycont->_Myfirst - _Ptr, "cannot seek vector iterator before begin");
; 109  :         }
; 110  : 
; 111  :         if (_Off > 0) {
; 112  :             _STL_VERIFY(_Off <= _Mycont->_Mylast - _Ptr, "cannot seek vector iterator after end");
; 113  :         }
; 114  : #endif // _ITERATOR_DEBUG_LEVEL == 0
; 115  :     }

	ret	4
?_Verify_offset@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCFrustum@@@std@@@std@@@std@@QBEXH@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CFrustum> > >::_Verify_offset
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Verify_offset@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Sector@@@std@@@std@@@std@@QBEXH@Z
_TEXT	SEGMENT
__Off$dead$ = 8						; size = 4
?_Verify_offset@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Sector@@@std@@@std@@@std@@QBEXH@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<IRender_Sector *> > >::_Verify_offset, COMDAT
; _this$dead$ = ecx

; 102  : #if _ITERATOR_DEBUG_LEVEL == 0
; 103  :         (void) _Off;
; 104  : #else // ^^^ _ITERATOR_DEBUG_LEVEL == 0 ^^^ // vvv _ITERATOR_DEBUG_LEVEL != 0 vvv
; 105  :         const auto _Mycont = static_cast<const _Myvec*>(this->_Getcont());
; 106  :         _STL_VERIFY(_Off == 0 || _Ptr, "cannot seek value-initialized vector iterator");
; 107  :         if (_Off < 0) {
; 108  :             _STL_VERIFY(_Off >= _Mycont->_Myfirst - _Ptr, "cannot seek vector iterator before begin");
; 109  :         }
; 110  : 
; 111  :         if (_Off > 0) {
; 112  :             _STL_VERIFY(_Off <= _Mycont->_Mylast - _Ptr, "cannot seek vector iterator after end");
; 113  :         }
; 114  : #endif // _ITERATOR_DEBUG_LEVEL == 0
; 115  :     }

	ret	4
?_Verify_offset@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Sector@@@std@@@std@@@std@@QBEXH@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<IRender_Sector *> > >::_Verify_offset
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Verify_offset@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Portal@@@std@@@std@@@std@@QBEXH@Z
_TEXT	SEGMENT
__Off$dead$ = 8						; size = 4
?_Verify_offset@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Portal@@@std@@@std@@@std@@QBEXH@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<IRender_Portal *> > >::_Verify_offset, COMDAT
; _this$dead$ = ecx

; 102  : #if _ITERATOR_DEBUG_LEVEL == 0
; 103  :         (void) _Off;
; 104  : #else // ^^^ _ITERATOR_DEBUG_LEVEL == 0 ^^^ // vvv _ITERATOR_DEBUG_LEVEL != 0 vvv
; 105  :         const auto _Mycont = static_cast<const _Myvec*>(this->_Getcont());
; 106  :         _STL_VERIFY(_Off == 0 || _Ptr, "cannot seek value-initialized vector iterator");
; 107  :         if (_Off < 0) {
; 108  :             _STL_VERIFY(_Off >= _Mycont->_Myfirst - _Ptr, "cannot seek vector iterator before begin");
; 109  :         }
; 110  : 
; 111  :         if (_Off > 0) {
; 112  :             _STL_VERIFY(_Off <= _Mycont->_Mylast - _Ptr, "cannot seek vector iterator after end");
; 113  :         }
; 114  : #endif // _ITERATOR_DEBUG_LEVEL == 0
; 115  :     }

	ret	4
?_Verify_offset@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVIRender_Portal@@@std@@@std@@@std@@QBEXH@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<IRender_Portal *> > >::_Verify_offset
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Verify_offset@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEXH@Z
_TEXT	SEGMENT
__Off$dead$ = 8						; size = 4
?_Verify_offset@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEXH@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> > >::_Verify_offset, COMDAT
; _this$dead$ = ecx

; 102  : #if _ITERATOR_DEBUG_LEVEL == 0
; 103  :         (void) _Off;
; 104  : #else // ^^^ _ITERATOR_DEBUG_LEVEL == 0 ^^^ // vvv _ITERATOR_DEBUG_LEVEL != 0 vvv
; 105  :         const auto _Mycont = static_cast<const _Myvec*>(this->_Getcont());
; 106  :         _STL_VERIFY(_Off == 0 || _Ptr, "cannot seek value-initialized vector iterator");
; 107  :         if (_Off < 0) {
; 108  :             _STL_VERIFY(_Off >= _Mycont->_Myfirst - _Ptr, "cannot seek vector iterator before begin");
; 109  :         }
; 110  : 
; 111  :         if (_Off > 0) {
; 112  :             _STL_VERIFY(_Off <= _Mycont->_Mylast - _Ptr, "cannot seek vector iterator after end");
; 113  :         }
; 114  : #endif // _ITERATOR_DEBUG_LEVEL == 0
; 115  :     }

	ret	4
?_Verify_offset@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEXH@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> > >::_Verify_offset
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Verify_offset@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEXH@Z
_TEXT	SEGMENT
__Off$dead$ = 8						; size = 4
?_Verify_offset@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEXH@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> > >::_Verify_offset, COMDAT
; _this$dead$ = ecx

; 102  : #if _ITERATOR_DEBUG_LEVEL == 0
; 103  :         (void) _Off;
; 104  : #else // ^^^ _ITERATOR_DEBUG_LEVEL == 0 ^^^ // vvv _ITERATOR_DEBUG_LEVEL != 0 vvv
; 105  :         const auto _Mycont = static_cast<const _Myvec*>(this->_Getcont());
; 106  :         _STL_VERIFY(_Off == 0 || _Ptr, "cannot seek value-initialized vector iterator");
; 107  :         if (_Off < 0) {
; 108  :             _STL_VERIFY(_Off >= _Mycont->_Myfirst - _Ptr, "cannot seek vector iterator before begin");
; 109  :         }
; 110  : 
; 111  :         if (_Off > 0) {
; 112  :             _STL_VERIFY(_Off <= _Mycont->_Mylast - _Ptr, "cannot seek vector iterator after end");
; 113  :         }
; 114  : #endif // _ITERATOR_DEBUG_LEVEL == 0
; 115  :     }

	ret	4
?_Verify_offset@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEXH@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> > >::_Verify_offset
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Verify_offset@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEXH@Z
_TEXT	SEGMENT
__Off$dead$ = 8						; size = 4
?_Verify_offset@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEXH@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> > >::_Verify_offset, COMDAT
; _this$dead$ = ecx

; 102  : #if _ITERATOR_DEBUG_LEVEL == 0
; 103  :         (void) _Off;
; 104  : #else // ^^^ _ITERATOR_DEBUG_LEVEL == 0 ^^^ // vvv _ITERATOR_DEBUG_LEVEL != 0 vvv
; 105  :         const auto _Mycont = static_cast<const _Myvec*>(this->_Getcont());
; 106  :         _STL_VERIFY(_Off == 0 || _Ptr, "cannot seek value-initialized vector iterator");
; 107  :         if (_Off < 0) {
; 108  :             _STL_VERIFY(_Off >= _Mycont->_Myfirst - _Ptr, "cannot seek vector iterator before begin");
; 109  :         }
; 110  : 
; 111  :         if (_Off > 0) {
; 112  :             _STL_VERIFY(_Off <= _Mycont->_Mylast - _Ptr, "cannot seek vector iterator after end");
; 113  :         }
; 114  : #endif // _ITERATOR_DEBUG_LEVEL == 0
; 115  :     }

	ret	4
?_Verify_offset@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEXH@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> > >::_Verify_offset
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Verify_offset@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEXH@Z
_TEXT	SEGMENT
__Off$dead$ = 8						; size = 4
?_Verify_offset@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEXH@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> > >::_Verify_offset, COMDAT
; _this$dead$ = ecx

; 102  : #if _ITERATOR_DEBUG_LEVEL == 0
; 103  :         (void) _Off;
; 104  : #else // ^^^ _ITERATOR_DEBUG_LEVEL == 0 ^^^ // vvv _ITERATOR_DEBUG_LEVEL != 0 vvv
; 105  :         const auto _Mycont = static_cast<const _Myvec*>(this->_Getcont());
; 106  :         _STL_VERIFY(_Off == 0 || _Ptr, "cannot seek value-initialized vector iterator");
; 107  :         if (_Off < 0) {
; 108  :             _STL_VERIFY(_Off >= _Mycont->_Myfirst - _Ptr, "cannot seek vector iterator before begin");
; 109  :         }
; 110  : 
; 111  :         if (_Off > 0) {
; 112  :             _STL_VERIFY(_Off <= _Mycont->_Mylast - _Ptr, "cannot seek vector iterator after end");
; 113  :         }
; 114  : #endif // _ITERATOR_DEBUG_LEVEL == 0
; 115  :     }

	ret	4
?_Verify_offset@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEXH@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> > >::_Verify_offset
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Verify_offset@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEXH@Z
_TEXT	SEGMENT
__Off$dead$ = 8						; size = 4
?_Verify_offset@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEXH@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> > >::_Verify_offset, COMDAT
; _this$dead$ = ecx

; 102  : #if _ITERATOR_DEBUG_LEVEL == 0
; 103  :         (void) _Off;
; 104  : #else // ^^^ _ITERATOR_DEBUG_LEVEL == 0 ^^^ // vvv _ITERATOR_DEBUG_LEVEL != 0 vvv
; 105  :         const auto _Mycont = static_cast<const _Myvec*>(this->_Getcont());
; 106  :         _STL_VERIFY(_Off == 0 || _Ptr, "cannot seek value-initialized vector iterator");
; 107  :         if (_Off < 0) {
; 108  :             _STL_VERIFY(_Off >= _Mycont->_Myfirst - _Ptr, "cannot seek vector iterator before begin");
; 109  :         }
; 110  : 
; 111  :         if (_Off > 0) {
; 112  :             _STL_VERIFY(_Off <= _Mycont->_Mylast - _Ptr, "cannot seek vector iterator after end");
; 113  :         }
; 114  : #endif // _ITERATOR_DEBUG_LEVEL == 0
; 115  :     }

	ret	4
?_Verify_offset@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEXH@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> > >::_Verify_offset
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Verify_offset@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEXH@Z
_TEXT	SEGMENT
__Off$dead$ = 8						; size = 4
?_Verify_offset@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEXH@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> > >::_Verify_offset, COMDAT
; _this$dead$ = ecx

; 102  : #if _ITERATOR_DEBUG_LEVEL == 0
; 103  :         (void) _Off;
; 104  : #else // ^^^ _ITERATOR_DEBUG_LEVEL == 0 ^^^ // vvv _ITERATOR_DEBUG_LEVEL != 0 vvv
; 105  :         const auto _Mycont = static_cast<const _Myvec*>(this->_Getcont());
; 106  :         _STL_VERIFY(_Off == 0 || _Ptr, "cannot seek value-initialized vector iterator");
; 107  :         if (_Off < 0) {
; 108  :             _STL_VERIFY(_Off >= _Mycont->_Myfirst - _Ptr, "cannot seek vector iterator before begin");
; 109  :         }
; 110  : 
; 111  :         if (_Off > 0) {
; 112  :             _STL_VERIFY(_Off <= _Mycont->_Mylast - _Ptr, "cannot seek vector iterator after end");
; 113  :         }
; 114  : #endif // _ITERATOR_DEBUG_LEVEL == 0
; 115  :     }

	ret	4
?_Verify_offset@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEXH@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> > >::_Verify_offset
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Verify_offset@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEXH@Z
_TEXT	SEGMENT
__Off$dead$ = 8						; size = 4
?_Verify_offset@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEXH@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> > >::_Verify_offset, COMDAT
; _this$dead$ = ecx

; 102  : #if _ITERATOR_DEBUG_LEVEL == 0
; 103  :         (void) _Off;
; 104  : #else // ^^^ _ITERATOR_DEBUG_LEVEL == 0 ^^^ // vvv _ITERATOR_DEBUG_LEVEL != 0 vvv
; 105  :         const auto _Mycont = static_cast<const _Myvec*>(this->_Getcont());
; 106  :         _STL_VERIFY(_Off == 0 || _Ptr, "cannot seek value-initialized vector iterator");
; 107  :         if (_Off < 0) {
; 108  :             _STL_VERIFY(_Off >= _Mycont->_Myfirst - _Ptr, "cannot seek vector iterator before begin");
; 109  :         }
; 110  : 
; 111  :         if (_Off > 0) {
; 112  :             _STL_VERIFY(_Off <= _Mycont->_Mylast - _Ptr, "cannot seek vector iterator after end");
; 113  :         }
; 114  : #endif // _ITERATOR_DEBUG_LEVEL == 0
; 115  :     }

	ret	4
?_Verify_offset@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEXH@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> > >::_Verify_offset
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Verify_offset@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEXH@Z
_TEXT	SEGMENT
__Off$dead$ = 8						; size = 4
?_Verify_offset@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEXH@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> > >::_Verify_offset, COMDAT
; _this$dead$ = ecx

; 102  : #if _ITERATOR_DEBUG_LEVEL == 0
; 103  :         (void) _Off;
; 104  : #else // ^^^ _ITERATOR_DEBUG_LEVEL == 0 ^^^ // vvv _ITERATOR_DEBUG_LEVEL != 0 vvv
; 105  :         const auto _Mycont = static_cast<const _Myvec*>(this->_Getcont());
; 106  :         _STL_VERIFY(_Off == 0 || _Ptr, "cannot seek value-initialized vector iterator");
; 107  :         if (_Off < 0) {
; 108  :             _STL_VERIFY(_Off >= _Mycont->_Myfirst - _Ptr, "cannot seek vector iterator before begin");
; 109  :         }
; 110  : 
; 111  :         if (_Off > 0) {
; 112  :             _STL_VERIFY(_Off <= _Mycont->_Mylast - _Ptr, "cannot seek vector iterator after end");
; 113  :         }
; 114  : #endif // _ITERATOR_DEBUG_LEVEL == 0
; 115  :     }

	ret	4
?_Verify_offset@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEXH@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> > >::_Verify_offset
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Verify_offset@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEXH@Z
_TEXT	SEGMENT
__Off$dead$ = 8						; size = 4
?_Verify_offset@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEXH@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> > >::_Verify_offset, COMDAT
; _this$dead$ = ecx

; 102  : #if _ITERATOR_DEBUG_LEVEL == 0
; 103  :         (void) _Off;
; 104  : #else // ^^^ _ITERATOR_DEBUG_LEVEL == 0 ^^^ // vvv _ITERATOR_DEBUG_LEVEL != 0 vvv
; 105  :         const auto _Mycont = static_cast<const _Myvec*>(this->_Getcont());
; 106  :         _STL_VERIFY(_Off == 0 || _Ptr, "cannot seek value-initialized vector iterator");
; 107  :         if (_Off < 0) {
; 108  :             _STL_VERIFY(_Off >= _Mycont->_Myfirst - _Ptr, "cannot seek vector iterator before begin");
; 109  :         }
; 110  : 
; 111  :         if (_Off > 0) {
; 112  :             _STL_VERIFY(_Off <= _Mycont->_Mylast - _Ptr, "cannot seek vector iterator after end");
; 113  :         }
; 114  : #endif // _ITERATOR_DEBUG_LEVEL == 0
; 115  :     }

	ret	4
?_Verify_offset@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEXH@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> > >::_Verify_offset
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Verify_offset@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEXH@Z
_TEXT	SEGMENT
__Off$dead$ = 8						; size = 4
?_Verify_offset@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEXH@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> > >::_Verify_offset, COMDAT
; _this$dead$ = ecx

; 102  : #if _ITERATOR_DEBUG_LEVEL == 0
; 103  :         (void) _Off;
; 104  : #else // ^^^ _ITERATOR_DEBUG_LEVEL == 0 ^^^ // vvv _ITERATOR_DEBUG_LEVEL != 0 vvv
; 105  :         const auto _Mycont = static_cast<const _Myvec*>(this->_Getcont());
; 106  :         _STL_VERIFY(_Off == 0 || _Ptr, "cannot seek value-initialized vector iterator");
; 107  :         if (_Off < 0) {
; 108  :             _STL_VERIFY(_Off >= _Mycont->_Myfirst - _Ptr, "cannot seek vector iterator before begin");
; 109  :         }
; 110  : 
; 111  :         if (_Off > 0) {
; 112  :             _STL_VERIFY(_Off <= _Mycont->_Mylast - _Ptr, "cannot seek vector iterator after end");
; 113  :         }
; 114  : #endif // _ITERATOR_DEBUG_LEVEL == 0
; 115  :     }

	ret	4
?_Verify_offset@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEXH@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> > >::_Verify_offset
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_NormalItem@R_dsgraph@@@std@@@std@@@std@@P6A_NABU_NormalItem@R_dsgraph@@0@Z@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_NormalItem@R_dsgraph@@@std@@@std@@@0@0P6A_NABU_NormalItem@R_dsgraph@@1@Z@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_NormalItem@R_dsgraph@@@std@@@std@@@std@@P6A_NABU_NormalItem@R_dsgraph@@0@Z@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_NormalItem@R_dsgraph@@@std@@@std@@@0@0P6A_NABU_NormalItem@R_dsgraph@@1@Z@Z PROC ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<R_dsgraph::_NormalItem> > >,bool (__cdecl*)(R_dsgraph::_NormalItem const &,R_dsgraph::_NormalItem const &)>, COMDAT
; __Pred$dead$ = ecx

; 7077 :     _Adl_verify_range(_First, _Last);
; 7078 :     const auto _UFirst = _Get_unwrapped(_First);
; 7079 :     const auto _ULast  = _Get_unwrapped(_Last);
; 7080 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

	mov	edx, DWORD PTR __Last$[esp-4]
	mov	eax, edx
	mov	ecx, DWORD PTR __First$[esp-4]
	sub	eax, ecx
	sar	eax, 3
	push	OFFSET ?cmp_normal_items@@YA_NABU_NormalItem@R_dsgraph@@0@Z ; cmp_normal_items
	push	eax
	call	??$_Sort_unchecked@PAU_NormalItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_NormalItem@R_dsgraph@@0HP6A_NABU12@1@Z@Z ; std::_Sort_unchecked<R_dsgraph::_NormalItem *,bool (__cdecl*)(R_dsgraph::_NormalItem const &,R_dsgraph::_NormalItem const &)>
	add	esp, 8

; 7081 : }

	ret	0
??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_NormalItem@R_dsgraph@@@std@@@std@@@std@@P6A_NABU_NormalItem@R_dsgraph@@0@Z@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_NormalItem@R_dsgraph@@@std@@@std@@@0@0P6A_NABU_NormalItem@R_dsgraph@@1@Z@Z ENDP ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<R_dsgraph::_NormalItem> > >,bool (__cdecl*)(R_dsgraph::_NormalItem const &,R_dsgraph::_NormalItem const &)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Get_unwrapped@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_NormalItem@R_dsgraph@@@std@@@std@@@std@@@std@@YA?A_TABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_NormalItem@R_dsgraph@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
??$_Get_unwrapped@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_NormalItem@R_dsgraph@@@std@@@std@@@std@@@std@@YA?A_TABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_NormalItem@R_dsgraph@@@std@@@std@@@0@@Z PROC ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<R_dsgraph::_NormalItem> > > const &>, COMDAT
; __It$ = ecx

; 1275 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1276 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1277 :         return _It + 0;
; 1278 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1279 :         return static_cast<_Iter&&>(_It)._Unwrapped();

	mov	eax, DWORD PTR [ecx]

; 1280 :     } else {
; 1281 :         return static_cast<_Iter&&>(_It);
; 1282 :     }
; 1283 : }

	ret	0
??$_Get_unwrapped@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_NormalItem@R_dsgraph@@@std@@@std@@@std@@@std@@YA?A_TABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_NormalItem@R_dsgraph@@@std@@@std@@@0@@Z ENDP ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<R_dsgraph::_NormalItem> > > const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_MatrixItem@R_dsgraph@@@std@@@std@@@std@@P6A_NABU_MatrixItem@R_dsgraph@@0@Z@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_MatrixItem@R_dsgraph@@@std@@@std@@@0@0P6A_NABU_MatrixItem@R_dsgraph@@1@Z@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_MatrixItem@R_dsgraph@@@std@@@std@@@std@@P6A_NABU_MatrixItem@R_dsgraph@@0@Z@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_MatrixItem@R_dsgraph@@@std@@@std@@@0@0P6A_NABU_MatrixItem@R_dsgraph@@1@Z@Z PROC ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<R_dsgraph::_MatrixItem> > >,bool (__cdecl*)(R_dsgraph::_MatrixItem const &,R_dsgraph::_MatrixItem const &)>, COMDAT
; __Pred$dead$ = ecx

; 7077 :     _Adl_verify_range(_First, _Last);
; 7078 :     const auto _UFirst = _Get_unwrapped(_First);
; 7079 :     const auto _ULast  = _Get_unwrapped(_Last);
; 7080 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

	mov	edx, DWORD PTR __Last$[esp-4]
	mov	eax, edx
	mov	ecx, DWORD PTR __First$[esp-4]
	sub	eax, ecx
	sar	eax, 2
	imul	eax, eax, 678152731
	push	OFFSET ?cmp_matrix_items@@YA_NABU_MatrixItem@R_dsgraph@@0@Z ; cmp_matrix_items
	push	eax
	call	??$_Sort_unchecked@PAU_MatrixItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_MatrixItem@R_dsgraph@@0HP6A_NABU12@1@Z@Z ; std::_Sort_unchecked<R_dsgraph::_MatrixItem *,bool (__cdecl*)(R_dsgraph::_MatrixItem const &,R_dsgraph::_MatrixItem const &)>
	add	esp, 8

; 7081 : }

	ret	0
??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_MatrixItem@R_dsgraph@@@std@@@std@@@std@@P6A_NABU_MatrixItem@R_dsgraph@@0@Z@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_MatrixItem@R_dsgraph@@@std@@@std@@@0@0P6A_NABU_MatrixItem@R_dsgraph@@1@Z@Z ENDP ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<R_dsgraph::_MatrixItem> > >,bool (__cdecl*)(R_dsgraph::_MatrixItem const &,R_dsgraph::_MatrixItem const &)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Get_unwrapped@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_MatrixItem@R_dsgraph@@@std@@@std@@@std@@@std@@YA?A_TABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_MatrixItem@R_dsgraph@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
??$_Get_unwrapped@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_MatrixItem@R_dsgraph@@@std@@@std@@@std@@@std@@YA?A_TABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_MatrixItem@R_dsgraph@@@std@@@std@@@0@@Z PROC ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<R_dsgraph::_MatrixItem> > > const &>, COMDAT
; __It$ = ecx

; 1275 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1276 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1277 :         return _It + 0;
; 1278 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1279 :         return static_cast<_Iter&&>(_It)._Unwrapped();

	mov	eax, DWORD PTR [ecx]

; 1280 :     } else {
; 1281 :         return static_cast<_Iter&&>(_It);
; 1282 :     }
; 1283 : }

	ret	0
??$_Get_unwrapped@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_MatrixItem@R_dsgraph@@@std@@@std@@@std@@@std@@YA?A_TABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_MatrixItem@R_dsgraph@@@std@@@std@@@0@@Z ENDP ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<R_dsgraph::_MatrixItem> > > const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$?MIV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@YA_NABU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@0@0@Z
_TEXT	SEGMENT
??$?MIV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@YA_NABU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@0@0@Z PROC ; std::operator<<unsigned int,resptr_core<CTexture,resptrcode_texture> >, COMDAT
; __Left$ = ecx
; __Right$ = edx

; 362  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	jb	SHORT $LN4@operator
	ja	SHORT $LN3@operator
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 362  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

	jb	SHORT $LN4@operator
$LN3@operator:
	xor	al, al

; 363  : }

	ret	0
$LN4@operator:

; 362  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

	mov	al, 1

; 363  : }

	ret	0
??$?MIV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@YA_NABU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@0@0@Z ENDP ; std::operator<<unsigned int,resptr_core<CTexture,resptrcode_texture> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$?OIV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@YA_NABU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@0@0@Z
_TEXT	SEGMENT
??$?OIV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@YA_NABU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@0@0@Z PROC ; std::operator><unsigned int,resptr_core<CTexture,resptrcode_texture> >, COMDAT
; __Left$ = ecx
; __Right$ = edx

; 362  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR [ecx]
	jb	SHORT $LN6@operator
	ja	SHORT $LN5@operator
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

	mov	eax, DWORD PTR [edx+4]
	cmp	eax, DWORD PTR [ecx+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 362  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

	jb	SHORT $LN6@operator
$LN5@operator:
	xor	al, al

; 367  :     return _Right < _Left;
; 368  : }

	ret	0
$LN6@operator:

; 362  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

	mov	al, 1

; 367  :     return _Right < _Left;
; 368  : }

	ret	0
??$?OIV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@YA_NABU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@0@0@Z ENDP ; std::operator><unsigned int,resptr_core<CTexture,resptrcode_texture> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$lexicographical_compare@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@std@@@std@@@std@@V12@@std@@YA_NV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@std@@@std@@@0@000@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Last1$ = 12						; size = 4
__First2$ = 16						; size = 4
__Last2$ = 20						; size = 4
??$lexicographical_compare@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@std@@@std@@@std@@V12@@std@@YA_NV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@std@@@std@@@0@000@Z PROC ; std::lexicographical_compare<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<unsigned int,resptr_core<CTexture,resptrcode_texture> > > > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<unsigned int,resptr_core<CTexture,resptrcode_texture> > > > > >, COMDAT

; 4988 :     for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, (void) ++_First2) { // something to compare, do it

	mov	ecx, DWORD PTR __Last1$[esp-4]

; 5025 :     return _Lex_compare_unchecked(

	mov	edx, DWORD PTR __First2$[esp-4]

; 4988 :     for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, (void) ++_First2) { // something to compare, do it

	mov	eax, DWORD PTR __Last2$[esp-4]

; 5030 : _NODISCARD _CONSTEXPR20 bool lexicographical_compare(_InIt1 _First1, _InIt1 _Last1, _InIt2 _First2, _InIt2 _Last2) {

	push	ebx
	push	ebp
	push	esi
	push	edi

; 5025 :     return _Lex_compare_unchecked(

	mov	edi, DWORD PTR __First1$[esp+12]

; 4988 :     for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, (void) ++_First2) { // something to compare, do it

	cmp	edi, ecx
	je	SHORT $LN55@lexicograp

; 5025 :     return _Lex_compare_unchecked(

	mov	ebp, edi
	sub	ebp, edx
	npad	4
$LL8@lexicograp:

; 4988 :     for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, (void) ++_First2) { // something to compare, do it

	cmp	edx, eax
	je	SHORT $LN13@lexicograp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 362  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

	mov	esi, DWORD PTR [edi]
	cmp	esi, DWORD PTR [edx]
	jb	SHORT $LN46@lexicograp
	ja	SHORT $LN13@lexicograp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

	mov	esi, DWORD PTR [edx+ebp+4]
	cmp	esi, DWORD PTR [edx+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 362  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

	jb	SHORT $LN46@lexicograp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

	mov	esi, DWORD PTR [edx+4]
	cmp	esi, DWORD PTR [edx+ebp+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 362  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

	jb	SHORT $LN13@lexicograp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4988 :     for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, (void) ++_First2) { // something to compare, do it

	add	edi, 8
	add	edx, 8
	cmp	edi, ecx
	jne	SHORT $LL8@lexicograp
$LN55@lexicograp:

; 4989 :         if (_DEBUG_LT_PRED(_Pred, *_First1, *_First2)) {
; 4990 :             return true;
; 4991 :         } else if (_Pred(*_First2, *_First1)) {
; 4992 :             return false;
; 4993 :         }
; 4994 :     }
; 4995 : 
; 4996 :     return _First1 == _Last1 && _First2 != _Last2;

	cmp	edx, eax
	je	SHORT $LN13@lexicograp
$LN46@lexicograp:
	pop	edi

; 5031 :     // order [_First1, _Last1) vs. [_First2, _Last2)
; 5032 :     return _STD lexicographical_compare(_First1, _Last1, _First2, _Last2, less<>{});
; 5033 : }

	pop	esi
	pop	ebp
	mov	al, 1
	pop	ebx
	ret	0
$LN13@lexicograp:
	pop	edi
	pop	esi
	pop	ebp
	xor	al, al
	pop	ebx
	ret	0
??$lexicographical_compare@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@std@@@std@@@std@@V12@@std@@YA_NV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@std@@@std@@@0@000@Z ENDP ; std::lexicographical_compare<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<unsigned int,resptr_core<CTexture,resptrcode_texture> > > > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<unsigned int,resptr_core<CTexture,resptrcode_texture> > > > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@P6A_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0P6A_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@1@Z@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@P6A_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0P6A_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@1@Z@Z PROC ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> > >,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *)>, COMDAT
; __Pred$ = ecx

; 7077 :     _Adl_verify_range(_First, _Last);
; 7078 :     const auto _UFirst = _Get_unwrapped(_First);
; 7079 :     const auto _ULast  = _Get_unwrapped(_Last);
; 7080 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

	mov	edx, DWORD PTR __Last$[esp-4]
	mov	eax, edx
	push	ecx
	mov	ecx, DWORD PTR __First$[esp]
	sub	eax, ecx
	sar	eax, 2
	push	eax
	call	??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z ; std::_Sort_unchecked<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *)>
	add	esp, 8

; 7081 : }

	ret	0
??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@P6A_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0P6A_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@1@Z@Z ENDP ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> > >,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Get_unwrapped@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@@std@@YA?A_TABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
??$_Get_unwrapped@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@@std@@YA?A_TABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@@Z PROC ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> > > const &>, COMDAT
; __It$ = ecx

; 1275 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1276 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1277 :         return _It + 0;
; 1278 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1279 :         return static_cast<_Iter&&>(_It)._Unwrapped();

	mov	eax, DWORD PTR [ecx]

; 1280 :     } else {
; 1281 :         return static_cast<_Iter&&>(_It);
; 1282 :     }
; 1283 : }

	ret	0
??$_Get_unwrapped@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@@std@@YA?A_TABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@@Z ENDP ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> > > const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@$0A@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@V21@1@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
$T1 = 12						; size = 1
__Where$ = 12						; size = 4
__First$ = 16						; size = 4
__Last$ = 20						; size = 4
??$insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@$0A@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@V21@1@Z PROC ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::insert<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> > >,0>, COMDAT
; _this$ = ecx

; 1047 :         const pointer _Whereptr = _Where._Ptr;
; 1048 :         auto& _My_data          = _Mypair._Myval2;
; 1049 :         const pointer _Oldfirst = _My_data._Myfirst;
; 1050 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1051 :         _STL_VERIFY(
; 1052 :             _Where._Getcont() == _STD addressof(_My_data) && _Whereptr >= _Oldfirst && _My_data._Mylast >= _Whereptr,
; 1053 :             "vector insert iterator outside range");
; 1054 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1055 : 
; 1056 :         _Adl_verify_range(_First, _Last);
; 1057 :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Oldfirst);

	mov	eax, DWORD PTR __Where$[esp-4]
	push	esi
	push	edi

; 1058 :         _Insert_range(_Where, _Get_unwrapped(_First), _Get_unwrapped(_Last), _Iter_cat_t<_Iter>{});

	push	DWORD PTR $T1[esp+4]
	mov	edi, ecx
	mov	esi, eax
	push	DWORD PTR __Last$[esp+8]
	push	DWORD PTR __First$[esp+12]
	sub	esi, DWORD PTR [edi]
	push	eax
	sar	esi, 2
	call	??$_Insert_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@1Uforward_iterator_tag@1@@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Insert_range<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *>

; 1819 :         return iterator(_My_data._Myfirst + _Offset, _STD addressof(_My_data));

	mov	eax, DWORD PTR [edi]

; 1059 :         return _Make_iterator_offset(_Whereoff);

	pop	edi

; 1819 :         return iterator(_My_data._Myfirst + _Offset, _STD addressof(_My_data));

	lea	ecx, DWORD PTR [eax+esi*4]

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR ___$ReturnUdt$[esp]

; 1059 :         return _Make_iterator_offset(_Whereoff);

	pop	esi

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	DWORD PTR [eax], ecx

; 1060 :     }

	ret	16					; 00000010H
??$insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@$0A@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@V21@1@Z ENDP ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::insert<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> > >,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Get_unwrapped@AAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@@std@@YA?A_TAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
??$_Get_unwrapped@AAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@@std@@YA?A_TAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@@Z PROC ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> > > &>, COMDAT
; __It$ = ecx

; 1275 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1276 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1277 :         return _It + 0;
; 1278 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1279 :         return static_cast<_Iter&&>(_It)._Unwrapped();

	mov	eax, DWORD PTR [ecx]

; 1280 :     } else {
; 1281 :         return static_cast<_Iter&&>(_It);
; 1282 :     }
; 1283 : }

	ret	0
??$_Get_unwrapped@AAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@@std@@YA?A_TAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@@Z ENDP ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> > > &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@P6A_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0P6A_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@1@Z@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@P6A_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0P6A_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@1@Z@Z PROC ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> > >,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *)>, COMDAT
; __Pred$ = ecx

; 7077 :     _Adl_verify_range(_First, _Last);
; 7078 :     const auto _UFirst = _Get_unwrapped(_First);
; 7079 :     const auto _ULast  = _Get_unwrapped(_Last);
; 7080 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

	mov	edx, DWORD PTR __Last$[esp-4]
	mov	eax, edx
	push	ecx
	mov	ecx, DWORD PTR __First$[esp]
	sub	eax, ecx
	sar	eax, 2
	push	eax
	call	??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z ; std::_Sort_unchecked<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *)>
	add	esp, 8

; 7081 : }

	ret	0
??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@P6A_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0P6A_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@1@Z@Z ENDP ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> > >,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Get_unwrapped@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@@std@@YA?A_TABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
??$_Get_unwrapped@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@@std@@YA?A_TABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@@Z PROC ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> > > const &>, COMDAT
; __It$ = ecx

; 1275 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1276 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1277 :         return _It + 0;
; 1278 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1279 :         return static_cast<_Iter&&>(_It)._Unwrapped();

	mov	eax, DWORD PTR [ecx]

; 1280 :     } else {
; 1281 :         return static_cast<_Iter&&>(_It);
; 1282 :     }
; 1283 : }

	ret	0
??$_Get_unwrapped@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@@std@@YA?A_TABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@@Z ENDP ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> > > const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@$0A@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@V21@1@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
$T1 = 12						; size = 1
__Where$ = 12						; size = 4
__First$ = 16						; size = 4
__Last$ = 20						; size = 4
??$insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@$0A@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@V21@1@Z PROC ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::insert<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> > >,0>, COMDAT
; _this$ = ecx

; 1047 :         const pointer _Whereptr = _Where._Ptr;
; 1048 :         auto& _My_data          = _Mypair._Myval2;
; 1049 :         const pointer _Oldfirst = _My_data._Myfirst;
; 1050 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1051 :         _STL_VERIFY(
; 1052 :             _Where._Getcont() == _STD addressof(_My_data) && _Whereptr >= _Oldfirst && _My_data._Mylast >= _Whereptr,
; 1053 :             "vector insert iterator outside range");
; 1054 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1055 : 
; 1056 :         _Adl_verify_range(_First, _Last);
; 1057 :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Oldfirst);

	mov	eax, DWORD PTR __Where$[esp-4]
	push	esi
	push	edi

; 1058 :         _Insert_range(_Where, _Get_unwrapped(_First), _Get_unwrapped(_Last), _Iter_cat_t<_Iter>{});

	push	DWORD PTR $T1[esp+4]
	mov	edi, ecx
	mov	esi, eax
	push	DWORD PTR __Last$[esp+8]
	push	DWORD PTR __First$[esp+12]
	sub	esi, DWORD PTR [edi]
	push	eax
	sar	esi, 2
	call	??$_Insert_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@1Uforward_iterator_tag@1@@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Insert_range<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *>

; 1819 :         return iterator(_My_data._Myfirst + _Offset, _STD addressof(_My_data));

	mov	eax, DWORD PTR [edi]

; 1059 :         return _Make_iterator_offset(_Whereoff);

	pop	edi

; 1819 :         return iterator(_My_data._Myfirst + _Offset, _STD addressof(_My_data));

	lea	ecx, DWORD PTR [eax+esi*4]

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR ___$ReturnUdt$[esp]

; 1059 :         return _Make_iterator_offset(_Whereoff);

	pop	esi

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	DWORD PTR [eax], ecx

; 1060 :     }

	ret	16					; 00000010H
??$insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@$0A@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@V21@1@Z ENDP ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::insert<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> > >,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Get_unwrapped@AAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@@std@@YA?A_TAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
??$_Get_unwrapped@AAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@@std@@YA?A_TAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@@Z PROC ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> > > &>, COMDAT
; __It$ = ecx

; 1275 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1276 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1277 :         return _It + 0;
; 1278 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1279 :         return static_cast<_Iter&&>(_It)._Unwrapped();

	mov	eax, DWORD PTR [ecx]

; 1280 :     } else {
; 1281 :         return static_cast<_Iter&&>(_It);
; 1282 :     }
; 1283 : }

	ret	0
??$_Get_unwrapped@AAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@@std@@YA?A_TAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@@Z ENDP ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> > > &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@1@Z@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@1@Z@Z PROC ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> > >,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *)>, COMDAT
; __Pred$dead$ = ecx

; 7077 :     _Adl_verify_range(_First, _Last);
; 7078 :     const auto _UFirst = _Get_unwrapped(_First);
; 7079 :     const auto _ULast  = _Get_unwrapped(_Last);
; 7080 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

	mov	edx, DWORD PTR __Last$[esp-4]
	mov	eax, edx
	mov	ecx, DWORD PTR __First$[esp-4]
	sub	eax, ecx
	sar	eax, 2
	push	OFFSET ?cmp_vs_nrm@@YA_NPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; cmp_vs_nrm
	push	eax
	call	??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z ; std::_Sort_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *)>
	add	esp, 8

; 7081 : }

	ret	0
??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@1@Z@Z ENDP ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> > >,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Get_unwrapped@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@@std@@YA?A_TABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
??$_Get_unwrapped@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@@std@@YA?A_TABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@@Z PROC ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> > > const &>, COMDAT
; __It$ = ecx

; 1275 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1276 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1277 :         return _It + 0;
; 1278 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1279 :         return static_cast<_Iter&&>(_It)._Unwrapped();

	mov	eax, DWORD PTR [ecx]

; 1280 :     } else {
; 1281 :         return static_cast<_Iter&&>(_It);
; 1282 :     }
; 1283 : }

	ret	0
??$_Get_unwrapped@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@@std@@YA?A_TABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@@Z ENDP ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> > > const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@1@Z@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@1@Z@Z PROC ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> > >,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *)>, COMDAT
; __Pred$dead$ = ecx

; 7077 :     _Adl_verify_range(_First, _Last);
; 7078 :     const auto _UFirst = _Get_unwrapped(_First);
; 7079 :     const auto _ULast  = _Get_unwrapped(_Last);
; 7080 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

	mov	edx, DWORD PTR __Last$[esp-4]
	mov	eax, edx
	mov	ecx, DWORD PTR __First$[esp-4]
	sub	eax, ecx
	sar	eax, 2
	push	OFFSET ?cmp_ps_nrm@@YA_NPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; cmp_ps_nrm
	push	eax
	call	??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z ; std::_Sort_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *)>
	add	esp, 8

; 7081 : }

	ret	0
??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@1@Z@Z ENDP ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> > >,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Get_unwrapped@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@@std@@YA?A_TABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
??$_Get_unwrapped@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@@std@@YA?A_TABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@@Z PROC ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> > > const &>, COMDAT
; __It$ = ecx

; 1275 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1276 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1277 :         return _It + 0;
; 1278 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1279 :         return static_cast<_Iter&&>(_It)._Unwrapped();

	mov	eax, DWORD PTR [ecx]

; 1280 :     } else {
; 1281 :         return static_cast<_Iter&&>(_It);
; 1282 :     }
; 1283 : }

	ret	0
??$_Get_unwrapped@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@@std@@YA?A_TABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@@Z ENDP ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> > > const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@P6A_NPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@0@Z@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0P6A_NPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@1@Z@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@P6A_NPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@0@Z@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0P6A_NPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@1@Z@Z PROC ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> > >,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *)>, COMDAT
; __Pred$dead$ = ecx

; 7077 :     _Adl_verify_range(_First, _Last);
; 7078 :     const auto _UFirst = _Get_unwrapped(_First);
; 7079 :     const auto _ULast  = _Get_unwrapped(_Last);
; 7080 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

	mov	edx, DWORD PTR __Last$[esp-4]
	mov	eax, edx
	mov	ecx, DWORD PTR __First$[esp-4]
	sub	eax, ecx
	sar	eax, 2
	push	OFFSET ?cmp_cs_nrm@@YA_NPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; cmp_cs_nrm
	push	eax
	call	??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z ; std::_Sort_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *)>
	add	esp, 8

; 7081 : }

	ret	0
??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@P6A_NPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@0@Z@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0P6A_NPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@1@Z@Z ENDP ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> > >,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Get_unwrapped@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@@std@@YA?A_TABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
??$_Get_unwrapped@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@@std@@YA?A_TABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@@Z PROC ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> > > const &>, COMDAT
; __It$ = ecx

; 1275 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1276 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1277 :         return _It + 0;
; 1278 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1279 :         return static_cast<_Iter&&>(_It)._Unwrapped();

	mov	eax, DWORD PTR [ecx]

; 1280 :     } else {
; 1281 :         return static_cast<_Iter&&>(_It);
; 1282 :     }
; 1283 : }

	ret	0
??$_Get_unwrapped@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@@std@@YA?A_TABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@@Z ENDP ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> > > const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@Z@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@1@Z@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@Z@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@1@Z@Z PROC ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> > >,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *)>, COMDAT
; __Pred$dead$ = ecx

; 7077 :     _Adl_verify_range(_First, _Last);
; 7078 :     const auto _UFirst = _Get_unwrapped(_First);
; 7079 :     const auto _ULast  = _Get_unwrapped(_Last);
; 7080 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

	mov	edx, DWORD PTR __Last$[esp-4]
	mov	eax, edx
	mov	ecx, DWORD PTR __First$[esp-4]
	sub	eax, ecx
	sar	eax, 2
	push	OFFSET ?cmp_states_nrm@@YA_NPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; cmp_states_nrm
	push	eax
	call	??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z ; std::_Sort_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *)>
	add	esp, 8

; 7081 : }

	ret	0
??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@Z@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@1@Z@Z ENDP ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> > >,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Get_unwrapped@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@@std@@YA?A_TABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
??$_Get_unwrapped@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@@std@@YA?A_TABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@@Z PROC ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> > > const &>, COMDAT
; __It$ = ecx

; 1275 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1276 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1277 :         return _It + 0;
; 1278 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1279 :         return static_cast<_Iter&&>(_It)._Unwrapped();

	mov	eax, DWORD PTR [ecx]

; 1280 :     } else {
; 1281 :         return static_cast<_Iter&&>(_It);
; 1282 :     }
; 1283 : }

	ret	0
??$_Get_unwrapped@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@@std@@YA?A_TABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@@Z ENDP ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> > > const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@1@Z@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@1@Z@Z PROC ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> > >,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *)>, COMDAT
; __Pred$dead$ = ecx

; 7077 :     _Adl_verify_range(_First, _Last);
; 7078 :     const auto _UFirst = _Get_unwrapped(_First);
; 7079 :     const auto _ULast  = _Get_unwrapped(_Last);
; 7080 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

	mov	edx, DWORD PTR __Last$[esp-4]
	mov	eax, edx
	mov	ecx, DWORD PTR __First$[esp-4]
	sub	eax, ecx
	sar	eax, 2
	push	OFFSET ?cmp_vs_mat@@YA_NPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; cmp_vs_mat
	push	eax
	call	??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z ; std::_Sort_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *)>
	add	esp, 8

; 7081 : }

	ret	0
??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@1@Z@Z ENDP ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> > >,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Get_unwrapped@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@@std@@YA?A_TABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
??$_Get_unwrapped@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@@std@@YA?A_TABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@@Z PROC ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> > > const &>, COMDAT
; __It$ = ecx

; 1275 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1276 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1277 :         return _It + 0;
; 1278 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1279 :         return static_cast<_Iter&&>(_It)._Unwrapped();

	mov	eax, DWORD PTR [ecx]

; 1280 :     } else {
; 1281 :         return static_cast<_Iter&&>(_It);
; 1282 :     }
; 1283 : }

	ret	0
??$_Get_unwrapped@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@@std@@YA?A_TABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@@Z ENDP ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> > > const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@1@Z@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@1@Z@Z PROC ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> > >,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *)>, COMDAT
; __Pred$dead$ = ecx

; 7077 :     _Adl_verify_range(_First, _Last);
; 7078 :     const auto _UFirst = _Get_unwrapped(_First);
; 7079 :     const auto _ULast  = _Get_unwrapped(_Last);
; 7080 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

	mov	edx, DWORD PTR __Last$[esp-4]
	mov	eax, edx
	mov	ecx, DWORD PTR __First$[esp-4]
	sub	eax, ecx
	sar	eax, 2
	push	OFFSET ?cmp_ps_mat@@YA_NPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; cmp_ps_mat
	push	eax
	call	??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z ; std::_Sort_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *)>
	add	esp, 8

; 7081 : }

	ret	0
??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@1@Z@Z ENDP ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> > >,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Get_unwrapped@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@@std@@YA?A_TABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
??$_Get_unwrapped@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@@std@@YA?A_TABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@@Z PROC ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> > > const &>, COMDAT
; __It$ = ecx

; 1275 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1276 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1277 :         return _It + 0;
; 1278 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1279 :         return static_cast<_Iter&&>(_It)._Unwrapped();

	mov	eax, DWORD PTR [ecx]

; 1280 :     } else {
; 1281 :         return static_cast<_Iter&&>(_It);
; 1282 :     }
; 1283 : }

	ret	0
??$_Get_unwrapped@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@@std@@YA?A_TABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@@Z ENDP ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> > > const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@P6A_NPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@0@Z@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0P6A_NPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@1@Z@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@P6A_NPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@0@Z@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0P6A_NPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@1@Z@Z PROC ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> > >,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *)>, COMDAT
; __Pred$dead$ = ecx

; 7077 :     _Adl_verify_range(_First, _Last);
; 7078 :     const auto _UFirst = _Get_unwrapped(_First);
; 7079 :     const auto _ULast  = _Get_unwrapped(_Last);
; 7080 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

	mov	edx, DWORD PTR __Last$[esp-4]
	mov	eax, edx
	mov	ecx, DWORD PTR __First$[esp-4]
	sub	eax, ecx
	sar	eax, 2
	push	OFFSET ?cmp_cs_mat@@YA_NPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; cmp_cs_mat
	push	eax
	call	??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z ; std::_Sort_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *)>
	add	esp, 8

; 7081 : }

	ret	0
??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@P6A_NPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@0@Z@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0P6A_NPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@1@Z@Z ENDP ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> > >,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Get_unwrapped@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@@std@@YA?A_TABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
??$_Get_unwrapped@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@@std@@YA?A_TABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@@Z PROC ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> > > const &>, COMDAT
; __It$ = ecx

; 1275 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1276 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1277 :         return _It + 0;
; 1278 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1279 :         return static_cast<_Iter&&>(_It)._Unwrapped();

	mov	eax, DWORD PTR [ecx]

; 1280 :     } else {
; 1281 :         return static_cast<_Iter&&>(_It);
; 1282 :     }
; 1283 : }

	ret	0
??$_Get_unwrapped@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@@std@@YA?A_TABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@@Z ENDP ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> > > const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@Z@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@1@Z@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@Z@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@1@Z@Z PROC ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> > >,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *)>, COMDAT
; __Pred$dead$ = ecx

; 7077 :     _Adl_verify_range(_First, _Last);
; 7078 :     const auto _UFirst = _Get_unwrapped(_First);
; 7079 :     const auto _ULast  = _Get_unwrapped(_Last);
; 7080 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

	mov	edx, DWORD PTR __Last$[esp-4]
	mov	eax, edx
	mov	ecx, DWORD PTR __First$[esp-4]
	sub	eax, ecx
	sar	eax, 2
	push	OFFSET ?cmp_states_mat@@YA_NPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; cmp_states_mat
	push	eax
	call	??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z ; std::_Sort_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *)>
	add	esp, 8

; 7081 : }

	ret	0
??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@Z@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@1@Z@Z ENDP ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> > >,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Get_unwrapped@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@@std@@YA?A_TABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
??$_Get_unwrapped@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@@std@@YA?A_TABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@@Z PROC ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> > > const &>, COMDAT
; __It$ = ecx

; 1275 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1276 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1277 :         return _It + 0;
; 1278 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1279 :         return static_cast<_Iter&&>(_It)._Unwrapped();

	mov	eax, DWORD PTR [ecx]

; 1280 :     } else {
; 1281 :         return static_cast<_Iter&&>(_It);
; 1282 :     }
; 1283 : }

	ret	0
??$_Get_unwrapped@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@@std@@YA?A_TABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@@Z ENDP ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> > > const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$construct@PAVIRender_Visual@@PAV1@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@SAXAAV?$doug_lea_alloc@PAVIRender_Visual@@@@PAPAVIRender_Visual@@$$QAPAV3@@Z
_TEXT	SEGMENT
_<_Args_0>$ = 8						; size = 4
??$construct@PAVIRender_Visual@@PAV1@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@SAXAAV?$doug_lea_alloc@PAVIRender_Visual@@@@PAPAVIRender_Visual@@$$QAPAV3@@Z PROC ; std::_Normal_allocator_traits<doug_lea_alloc<IRender_Visual *> >::construct<IRender_Visual *,IRender_Visual *>, COMDAT
; __Al$dead$ = ecx
; __Ptr$ = edx

; 565  :         if constexpr (_Uses_default_construct<_Alloc, _Ty*, _Types...>::value) {
; 566  :             (void) _Al; // TRANSITION, DevCom-1004719
; 567  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 568  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 569  : #else // __cpp_lib_constexpr_dynamic_alloc
; 570  :             ::new (static_cast<void*>(_Ptr)) _Ty(_STD forward<_Types>(_Args)...);
; 571  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 572  :         } else {
; 573  :             _Al.construct(_Ptr, _STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR _<_Args_0>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 574  :         }
; 575  :     }

	ret	0
??$construct@PAVIRender_Visual@@PAV1@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@SAXAAV?$doug_lea_alloc@PAVIRender_Visual@@@@PAPAVIRender_Visual@@$$QAPAV3@@Z ENDP ; std::_Normal_allocator_traits<doug_lea_alloc<IRender_Visual *> >::construct<IRender_Visual *,IRender_Visual *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Emplace_reallocate@PAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAEPAPAVIRender_Visual@@QAPAV2@$$QAPAV2@@Z
_TEXT	SEGMENT
__Backout$2 = -76					; size = 12
__Backout$3 = -64					; size = 12
__Backout$4 = -52					; size = 12
__UFirst$5 = -40					; size = 4
__UFirst$6 = -36					; size = 4
__UFirst$7 = -32					; size = 4
__Newvec$ = -28						; size = 4
__Newcapacity$1$ = -24					; size = 4
__Newsize$1$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
tv550 = 8						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@PAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAEPAPAVIRender_Visual@@QAPAV2@$$QAPAV2@@Z PROC ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::_Emplace_reallocate<IRender_Visual *>, COMDAT
; _this$ = ecx

; 752  :     _CONSTEXPR20_CONTAINER pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Emplace_reallocate@PAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAEPAPAVIRender_Visual@@QAPAV2@$$QAPAV2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	edi, ecx

; 753  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 754  :         _Alty& _Al        = _Getal();
; 755  :         auto& _My_data    = _Mypair._Myval2;
; 756  :         pointer& _Myfirst = _My_data._Myfirst;
; 757  :         pointer& _Mylast  = _My_data._Mylast;
; 758  : 
; 759  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 760  : 
; 761  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

	mov	edx, DWORD PTR [edi]
	mov	esi, DWORD PTR __Whereptr$[ebp]
	mov	ebx, esi
	sub	ebx, edx
	sar	ebx, 2

; 762  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

	mov	eax, DWORD PTR [edi+4]
	sub	eax, edx
	sar	eax, 2

; 763  : 
; 764  :         if (_Oldsize == max_size()) {

	cmp	eax, 1073741823				; 3fffffffH
	je	$LN78@Emplace_re

; 766  :         }
; 767  : 
; 768  :         const size_type _Newsize     = _Oldsize + 1;

	inc	eax
	mov	DWORD PTR __Newsize$1$[ebp], eax

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	ecx, DWORD PTR [edi+8]
	sub	ecx, edx
	sar	ecx, 2

; 1675 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	mov	edx, ecx
	shr	edx, 1
	mov	eax, 1073741823				; 3fffffffH
	sub	eax, edx
	cmp	ecx, eax
	jbe	SHORT $LN12@Emplace_re

; 1676 :             return _Max; // geometric growth would overflow

	mov	eax, 1073741823				; 3fffffffH
	jmp	SHORT $LN76@Emplace_re
$LN12@Emplace_re:

; 1677 :         }
; 1678 : 
; 1679 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	lea	eax, DWORD PTR [edx+ecx]

; 1680 : 
; 1681 :         if (_Geometric < _Newsize) {

	cmp	eax, DWORD PTR __Newsize$1$[ebp]
	cmovb	eax, DWORD PTR __Newsize$1$[ebp]
$LN76@Emplace_re:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h

; 33   : 								pointer					allocate		(size_type n, const void* p=0) const	{	return (T*)dlmalloc(sizeof(T)*(u32)n);	}

	mov	DWORD PTR __Newcapacity$1$[ebp], eax
	lea	ecx, DWORD PTR [eax*4]
	call	_dlmalloc
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 771  :         const pointer _Newvec           = _Al.allocate(_Newcapacity);

	mov	edx, eax
	mov	DWORD PTR __Newvec$[ebp], edx

; 772  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;
; 773  :         pointer _Constructed_first      = _Constructed_last;
; 774  : 
; 775  :         _TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 776  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

	lea	ecx, DWORD PTR [edx+ebx*4]
	mov	DWORD PTR tv550[ebp], ecx
	mov	eax, DWORD PTR _<_Val_0>$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax

; 777  :         _Constructed_first = _Newvec + _Whereoff;
; 778  : 
; 779  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

	mov	ebx, DWORD PTR [edi+4]
	mov	ecx, DWORD PTR [edi]
	cmp	esi, ebx
	jne	SHORT $LN4@Emplace_re
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1703 :     auto _UFirst      = _Get_unwrapped(_First);

	mov	DWORD PTR __UFirst$7[ebp], ecx

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	DWORD PTR __Backout$4[ebp], edx
	mov	DWORD PTR __Backout$4[ebp+4], edx
	mov	DWORD PTR __Backout$4[ebp+8], edi
	npad	5
$LL26@Emplace_re:

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	cmp	ecx, ebx
	je	SHORT $LN25@Emplace_re

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax

; 1621 :         ++_Last;

	add	edx, 4
	mov	DWORD PTR __Backout$4[ebp+4], edx

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	add	ecx, 4
	mov	DWORD PTR __UFirst$7[ebp], ecx
	jmp	SHORT $LL26@Emplace_re
$LN25@Emplace_re:

; 1625 :         _First = _Last;

	mov	DWORD PTR __Backout$4[ebp], edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 781  :         } else { // provide basic guarantee

	mov	ebx, DWORD PTR tv550[ebp]
	jmp	SHORT $LN5@Emplace_re
$LN4@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1703 :     auto _UFirst      = _Get_unwrapped(_First);

	mov	DWORD PTR __UFirst$6[ebp], ecx

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	DWORD PTR __Backout$3[ebp], edx
	mov	DWORD PTR __Backout$3[ebp+4], edx
	mov	DWORD PTR __Backout$3[ebp+8], edi
	npad	6
$LL39@Emplace_re:

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	cmp	ecx, esi
	je	SHORT $LN38@Emplace_re

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax

; 1621 :         ++_Last;

	add	edx, 4
	mov	DWORD PTR __Backout$3[ebp+4], edx

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	add	ecx, 4
	mov	DWORD PTR __UFirst$6[ebp], ecx
	jmp	SHORT $LL39@Emplace_re
$LN38@Emplace_re:

; 1625 :         _First = _Last;

	mov	DWORD PTR __Backout$3[ebp], edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 784  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

	mov	ebx, DWORD PTR tv550[ebp]
	lea	ecx, DWORD PTR [ebx+4]

; 1646 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

	mov	edx, DWORD PTR [edi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1703 :     auto _UFirst      = _Get_unwrapped(_First);

	mov	DWORD PTR __UFirst$5[ebp], esi

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	DWORD PTR __Backout$2[ebp], ecx
	mov	DWORD PTR __Backout$2[ebp+4], ecx
	mov	DWORD PTR __Backout$2[ebp+8], edi
	npad	2
$LL52@Emplace_re:

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	cmp	esi, edx
	je	SHORT $LN51@Emplace_re

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [ecx], eax

; 1621 :         ++_Last;

	add	ecx, 4
	mov	DWORD PTR __Backout$2[ebp+4], ecx

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	add	esi, 4
	mov	DWORD PTR __UFirst$5[ebp], esi
	jmp	SHORT $LL52@Emplace_re
$LN51@Emplace_re:

; 1625 :         _First = _Last;

	mov	DWORD PTR __Backout$2[ebp], ecx
$LN5@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
	mov	DWORD PTR __$EHRec$[ebp+12], -1

; 1732 :         if (_Myfirst) { // destroy and deallocate old array

	mov	ecx, DWORD PTR [edi]
	test	ecx, ecx
	je	SHORT $LN61@Emplace_re
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h

; 35   : 								void					deallocate		(pointer p, size_type n) const			{	dlfree	(p);				}

	call	_dlfree
$LN61@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1737 :         _Myfirst = _Newvec;

	mov	eax, DWORD PTR __Newvec$[ebp]
	mov	DWORD PTR [edi], eax

; 1738 :         _Mylast  = _Newvec + _Newsize;

	mov	ecx, DWORD PTR __Newsize$1$[ebp]
	lea	ecx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR [edi+4], ecx

; 1739 :         _Myend   = _Newvec + _Newcapacity;

	mov	ecx, DWORD PTR __Newcapacity$1$[ebp]
	lea	ecx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR [edi+8], ecx

; 790  :         _CATCH_END
; 791  : 
; 792  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 793  :         return _Newvec + _Whereoff;

	mov	eax, ebx

; 794  :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
__catch$??$_Emplace_reallocate@PAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAEPAPAVIRender_Visual@@QAPAV2@$$QAPAV2@@Z$0:

; 785  :         }
; 786  :         _CATCH_ALL
; 787  :         _Destroy(_Constructed_first, _Constructed_last);
; 788  :         _Al.deallocate(_Newvec, _Newcapacity);

	push	ecx
	push	DWORD PTR __Newvec$[ebp]
	call	?deallocate@?$doug_lea_alloc@PAVIRender_Visual@@@@QBEXPAPAVIRender_Visual@@I@Z ; doug_lea_alloc<IRender_Visual *>::deallocate

; 789  :         _RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8
$LN78@Emplace_re:

; 765  :             _Xlength();

	call	?_Xlength@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@CAXXZ ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::_Xlength
$LN75@Emplace_re:
	int	3
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Emplace_reallocate@PAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAEPAPAVIRender_Visual@@QAPAV2@$$QAPAV2@@Z:
	npad	1
	npad	1
	mov	eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@PAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAEPAPAVIRender_Visual@@QAPAV2@$$QAPAV2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@PAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAEPAPAVIRender_Visual@@QAPAV2@$$QAPAV2@@Z ENDP ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::_Emplace_reallocate<IRender_Visual *>
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$construct@PAVIRender_Visual@@ABQAV1@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@SAXAAV?$doug_lea_alloc@PAVIRender_Visual@@@@PAPAVIRender_Visual@@ABQAV3@@Z
_TEXT	SEGMENT
_<_Args_0>$ = 8						; size = 4
??$construct@PAVIRender_Visual@@ABQAV1@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@SAXAAV?$doug_lea_alloc@PAVIRender_Visual@@@@PAPAVIRender_Visual@@ABQAV3@@Z PROC ; std::_Normal_allocator_traits<doug_lea_alloc<IRender_Visual *> >::construct<IRender_Visual *,IRender_Visual * const &>, COMDAT
; __Al$dead$ = ecx
; __Ptr$ = edx

; 565  :         if constexpr (_Uses_default_construct<_Alloc, _Ty*, _Types...>::value) {
; 566  :             (void) _Al; // TRANSITION, DevCom-1004719
; 567  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 568  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 569  : #else // __cpp_lib_constexpr_dynamic_alloc
; 570  :             ::new (static_cast<void*>(_Ptr)) _Ty(_STD forward<_Types>(_Args)...);
; 571  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 572  :         } else {
; 573  :             _Al.construct(_Ptr, _STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR _<_Args_0>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 574  :         }
; 575  :     }

	ret	0
??$construct@PAVIRender_Visual@@ABQAV1@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@SAXAAV?$doug_lea_alloc@PAVIRender_Visual@@@@PAPAVIRender_Visual@@ABQAV3@@Z ENDP ; std::_Normal_allocator_traits<doug_lea_alloc<IRender_Visual *> >::construct<IRender_Visual *,IRender_Visual * const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAEPAPAVIRender_Visual@@QAPAV2@ABQAV2@@Z
_TEXT	SEGMENT
__Backout$2 = -76					; size = 12
__Backout$3 = -64					; size = 12
__Backout$4 = -52					; size = 12
__UFirst$5 = -40					; size = 4
__UFirst$6 = -36					; size = 4
__UFirst$7 = -32					; size = 4
__Newvec$ = -28						; size = 4
__Newcapacity$1$ = -24					; size = 4
__Newsize$1$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
tv550 = 8						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAEPAPAVIRender_Visual@@QAPAV2@ABQAV2@@Z PROC ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::_Emplace_reallocate<IRender_Visual * const &>, COMDAT
; _this$ = ecx

; 752  :     _CONSTEXPR20_CONTAINER pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Emplace_reallocate@ABQAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAEPAPAVIRender_Visual@@QAPAV2@ABQAV2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	edi, ecx

; 753  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 754  :         _Alty& _Al        = _Getal();
; 755  :         auto& _My_data    = _Mypair._Myval2;
; 756  :         pointer& _Myfirst = _My_data._Myfirst;
; 757  :         pointer& _Mylast  = _My_data._Mylast;
; 758  : 
; 759  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 760  : 
; 761  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

	mov	edx, DWORD PTR [edi]
	mov	esi, DWORD PTR __Whereptr$[ebp]
	mov	ebx, esi
	sub	ebx, edx
	sar	ebx, 2

; 762  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

	mov	eax, DWORD PTR [edi+4]
	sub	eax, edx
	sar	eax, 2

; 763  : 
; 764  :         if (_Oldsize == max_size()) {

	cmp	eax, 1073741823				; 3fffffffH
	je	$LN78@Emplace_re

; 766  :         }
; 767  : 
; 768  :         const size_type _Newsize     = _Oldsize + 1;

	inc	eax
	mov	DWORD PTR __Newsize$1$[ebp], eax

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	ecx, DWORD PTR [edi+8]
	sub	ecx, edx
	sar	ecx, 2

; 1675 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	mov	edx, ecx
	shr	edx, 1
	mov	eax, 1073741823				; 3fffffffH
	sub	eax, edx
	cmp	ecx, eax
	jbe	SHORT $LN12@Emplace_re

; 1676 :             return _Max; // geometric growth would overflow

	mov	eax, 1073741823				; 3fffffffH
	jmp	SHORT $LN76@Emplace_re
$LN12@Emplace_re:

; 1677 :         }
; 1678 : 
; 1679 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	lea	eax, DWORD PTR [edx+ecx]

; 1680 : 
; 1681 :         if (_Geometric < _Newsize) {

	cmp	eax, DWORD PTR __Newsize$1$[ebp]
	cmovb	eax, DWORD PTR __Newsize$1$[ebp]
$LN76@Emplace_re:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h

; 33   : 								pointer					allocate		(size_type n, const void* p=0) const	{	return (T*)dlmalloc(sizeof(T)*(u32)n);	}

	mov	DWORD PTR __Newcapacity$1$[ebp], eax
	lea	ecx, DWORD PTR [eax*4]
	call	_dlmalloc
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 771  :         const pointer _Newvec           = _Al.allocate(_Newcapacity);

	mov	edx, eax
	mov	DWORD PTR __Newvec$[ebp], edx

; 772  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;
; 773  :         pointer _Constructed_first      = _Constructed_last;
; 774  : 
; 775  :         _TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 776  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

	lea	ecx, DWORD PTR [edx+ebx*4]
	mov	DWORD PTR tv550[ebp], ecx
	mov	eax, DWORD PTR _<_Val_0>$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax

; 777  :         _Constructed_first = _Newvec + _Whereoff;
; 778  : 
; 779  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

	mov	ebx, DWORD PTR [edi+4]
	mov	ecx, DWORD PTR [edi]
	cmp	esi, ebx
	jne	SHORT $LN4@Emplace_re
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1703 :     auto _UFirst      = _Get_unwrapped(_First);

	mov	DWORD PTR __UFirst$7[ebp], ecx

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	DWORD PTR __Backout$4[ebp], edx
	mov	DWORD PTR __Backout$4[ebp+4], edx
	mov	DWORD PTR __Backout$4[ebp+8], edi
	npad	5
$LL26@Emplace_re:

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	cmp	ecx, ebx
	je	SHORT $LN25@Emplace_re

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax

; 1621 :         ++_Last;

	add	edx, 4
	mov	DWORD PTR __Backout$4[ebp+4], edx

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	add	ecx, 4
	mov	DWORD PTR __UFirst$7[ebp], ecx
	jmp	SHORT $LL26@Emplace_re
$LN25@Emplace_re:

; 1625 :         _First = _Last;

	mov	DWORD PTR __Backout$4[ebp], edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 781  :         } else { // provide basic guarantee

	mov	ebx, DWORD PTR tv550[ebp]
	jmp	SHORT $LN5@Emplace_re
$LN4@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1703 :     auto _UFirst      = _Get_unwrapped(_First);

	mov	DWORD PTR __UFirst$6[ebp], ecx

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	DWORD PTR __Backout$3[ebp], edx
	mov	DWORD PTR __Backout$3[ebp+4], edx
	mov	DWORD PTR __Backout$3[ebp+8], edi
	npad	6
$LL39@Emplace_re:

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	cmp	ecx, esi
	je	SHORT $LN38@Emplace_re

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax

; 1621 :         ++_Last;

	add	edx, 4
	mov	DWORD PTR __Backout$3[ebp+4], edx

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	add	ecx, 4
	mov	DWORD PTR __UFirst$6[ebp], ecx
	jmp	SHORT $LL39@Emplace_re
$LN38@Emplace_re:

; 1625 :         _First = _Last;

	mov	DWORD PTR __Backout$3[ebp], edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 784  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

	mov	ebx, DWORD PTR tv550[ebp]
	lea	ecx, DWORD PTR [ebx+4]

; 1646 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

	mov	edx, DWORD PTR [edi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1703 :     auto _UFirst      = _Get_unwrapped(_First);

	mov	DWORD PTR __UFirst$5[ebp], esi

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	DWORD PTR __Backout$2[ebp], ecx
	mov	DWORD PTR __Backout$2[ebp+4], ecx
	mov	DWORD PTR __Backout$2[ebp+8], edi
	npad	2
$LL52@Emplace_re:

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	cmp	esi, edx
	je	SHORT $LN51@Emplace_re

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [ecx], eax

; 1621 :         ++_Last;

	add	ecx, 4
	mov	DWORD PTR __Backout$2[ebp+4], ecx

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	add	esi, 4
	mov	DWORD PTR __UFirst$5[ebp], esi
	jmp	SHORT $LL52@Emplace_re
$LN51@Emplace_re:

; 1625 :         _First = _Last;

	mov	DWORD PTR __Backout$2[ebp], ecx
$LN5@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
	mov	DWORD PTR __$EHRec$[ebp+12], -1

; 1732 :         if (_Myfirst) { // destroy and deallocate old array

	mov	ecx, DWORD PTR [edi]
	test	ecx, ecx
	je	SHORT $LN61@Emplace_re
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h

; 35   : 								void					deallocate		(pointer p, size_type n) const			{	dlfree	(p);				}

	call	_dlfree
$LN61@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1737 :         _Myfirst = _Newvec;

	mov	eax, DWORD PTR __Newvec$[ebp]
	mov	DWORD PTR [edi], eax

; 1738 :         _Mylast  = _Newvec + _Newsize;

	mov	ecx, DWORD PTR __Newsize$1$[ebp]
	lea	ecx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR [edi+4], ecx

; 1739 :         _Myend   = _Newvec + _Newcapacity;

	mov	ecx, DWORD PTR __Newcapacity$1$[ebp]
	lea	ecx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR [edi+8], ecx

; 790  :         _CATCH_END
; 791  : 
; 792  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 793  :         return _Newvec + _Whereoff;

	mov	eax, ebx

; 794  :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
__catch$??$_Emplace_reallocate@ABQAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAEPAPAVIRender_Visual@@QAPAV2@ABQAV2@@Z$0:

; 785  :         }
; 786  :         _CATCH_ALL
; 787  :         _Destroy(_Constructed_first, _Constructed_last);
; 788  :         _Al.deallocate(_Newvec, _Newcapacity);

	push	ecx
	push	DWORD PTR __Newvec$[ebp]
	call	?deallocate@?$doug_lea_alloc@PAVIRender_Visual@@@@QBEXPAPAVIRender_Visual@@I@Z ; doug_lea_alloc<IRender_Visual *>::deallocate

; 789  :         _RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8
$LN78@Emplace_re:

; 765  :             _Xlength();

	call	?_Xlength@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@CAXXZ ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::_Xlength
$LN75@Emplace_re:
	int	3
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Emplace_reallocate@ABQAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAEPAPAVIRender_Visual@@QAPAV2@ABQAV2@@Z:
	npad	1
	npad	1
	mov	eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@ABQAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAEPAPAVIRender_Visual@@QAPAV2@ABQAV2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@ABQAVIRender_Visual@@@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAEPAPAVIRender_Visual@@QAPAV2@ABQAV2@@Z ENDP ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::_Emplace_reallocate<IRender_Visual * const &>
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$addressof@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
??$addressof@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@0@AAV10@@Z PROC ; std::addressof<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> > >, COMDAT
; __Val$ = ecx

; 253  :     return __builtin_addressof(_Val);

	mov	eax, ecx

; 254  : }

	ret	0
??$addressof@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@ABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@ABQAU12@@Z
_TEXT	SEGMENT
??$forward@ABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@ABQAU12@@Z PROC ; std::forward<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * const &>, COMDAT
; __Arg$ = ecx

; 1386 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, ecx

; 1387 : }

	ret	0
??$forward@ABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@ABQAU12@@Z ENDP ; std::forward<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$construct@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@ABQAU12@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@ABQAU34@@Z
_TEXT	SEGMENT
_<_Args_0>$ = 8						; size = 4
??$construct@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@ABQAU12@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@ABQAU34@@Z PROC ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::construct<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * const &>, COMDAT
; __Al$dead$ = ecx
; __Ptr$ = edx

; 565  :         if constexpr (_Uses_default_construct<_Alloc, _Ty*, _Types...>::value) {
; 566  :             (void) _Al; // TRANSITION, DevCom-1004719
; 567  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 568  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 569  : #else // __cpp_lib_constexpr_dynamic_alloc
; 570  :             ::new (static_cast<void*>(_Ptr)) _Ty(_STD forward<_Types>(_Args)...);
; 571  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 572  :         } else {
; 573  :             _Al.construct(_Ptr, _STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR _<_Args_0>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 574  :         }
; 575  :     }

	ret	0
??$construct@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@ABQAU12@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@ABQAU34@@Z ENDP ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::construct<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU23@ABQAU23@@Z
_TEXT	SEGMENT
__Newvec$ = -32						; size = 4
tv326 = -28						; size = 4
__Newsize$1$ = -24					; size = 4
tv325 = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU23@ABQAU23@@Z PROC ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Emplace_reallocate<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * const &>, COMDAT
; _this$ = ecx

; 752  :     _CONSTEXPR20_CONTAINER pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Emplace_reallocate@ABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU23@ABQAU23@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 20					; 00000014H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	esi, ecx

; 753  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 754  :         _Alty& _Al        = _Getal();
; 755  :         auto& _My_data    = _Mypair._Myval2;
; 756  :         pointer& _Myfirst = _My_data._Myfirst;
; 757  :         pointer& _Mylast  = _My_data._Mylast;
; 758  : 
; 759  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 760  : 
; 761  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

	mov	edx, DWORD PTR [esi]
	mov	ebx, DWORD PTR __Whereptr$[ebp]
	sub	ebx, edx
	sar	ebx, 2

; 762  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

	mov	eax, DWORD PTR [esi+4]
	sub	eax, edx
	sar	eax, 2

; 763  : 
; 764  :         if (_Oldsize == max_size()) {

	cmp	eax, 1073741823				; 3fffffffH
	je	$LN27@Emplace_re

; 766  :         }
; 767  : 
; 768  :         const size_type _Newsize     = _Oldsize + 1;

	lea	edi, DWORD PTR [eax+1]
	mov	DWORD PTR __Newsize$1$[ebp], edi

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	ecx, DWORD PTR [esi+8]
	sub	ecx, edx
	sar	ecx, 2

; 1675 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	mov	edx, ecx
	shr	edx, 1
	mov	eax, 1073741823				; 3fffffffH
	sub	eax, edx
	cmp	ecx, eax
	jbe	SHORT $LN12@Emplace_re

; 1676 :             return _Max; // geometric growth would overflow

	mov	eax, 1073741823				; 3fffffffH
	jmp	SHORT $LN13@Emplace_re
$LN12@Emplace_re:

; 1677 :         }
; 1678 : 
; 1679 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	lea	eax, DWORD PTR [edx+ecx]

; 1680 : 
; 1681 :         if (_Geometric < _Newsize) {

	cmp	eax, edi
	cmovb	eax, edi
$LN13@Emplace_re:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h

; 33   : 								pointer					allocate		(size_type n, const void* p=0) const	{	return (T*)dlmalloc(sizeof(T)*(u32)n);	}

	shl	eax, 2
	mov	DWORD PTR tv326[ebp], eax
	mov	ecx, eax
	call	_dlmalloc
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 771  :         const pointer _Newvec           = _Al.allocate(_Newcapacity);

	mov	edi, eax
	mov	DWORD PTR __Newvec$[ebp], edi

; 772  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;
; 773  :         pointer _Constructed_first      = _Constructed_last;
; 774  : 
; 775  :         _TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 776  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

	lea	eax, DWORD PTR [edi+ebx*4]
	mov	DWORD PTR tv325[ebp], eax
	mov	ecx, DWORD PTR _<_Val_0>$[ebp]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], ecx

; 777  :         _Constructed_first = _Newvec + _Whereoff;
; 778  : 
; 779  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

	mov	ecx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi]
	mov	ebx, DWORD PTR __Whereptr$[ebp]
	push	edi
	cmp	ebx, ecx
	jne	SHORT $LN4@Emplace_re

; 780  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);

	push	ecx
	push	eax
	call	?_Umove_if_noexcept@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@00@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Umove_if_noexcept

; 781  :         } else { // provide basic guarantee

	jmp	SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 782  :             _Umove(_Myfirst, _Whereptr, _Newvec);

	push	ebx
	push	eax
	call	?_Umove@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU34@00@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Umove

; 783  :             _Constructed_first = _Newvec;
; 784  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

	mov	ecx, DWORD PTR tv325[ebp]
	lea	eax, DWORD PTR [ecx+4]
	push	eax
	push	DWORD PTR [esi+4]
	push	ebx
	call	?_Umove@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU34@00@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Umove
$LN5@Emplace_re:
	mov	DWORD PTR __$EHRec$[ebp+12], -1

; 1732 :         if (_Myfirst) { // destroy and deallocate old array

	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN20@Emplace_re
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h

; 35   : 								void					deallocate		(pointer p, size_type n) const			{	dlfree	(p);				}

	call	_dlfree
$LN20@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1737 :         _Myfirst = _Newvec;

	mov	DWORD PTR [esi], edi

; 1738 :         _Mylast  = _Newvec + _Newsize;

	mov	eax, DWORD PTR __Newsize$1$[ebp]
	lea	ecx, DWORD PTR [edi+eax*4]
	mov	DWORD PTR [esi+4], ecx

; 1739 :         _Myend   = _Newvec + _Newcapacity;

	mov	ecx, DWORD PTR tv326[ebp]
	add	ecx, edi
	mov	DWORD PTR [esi+8], ecx

; 790  :         _CATCH_END
; 791  : 
; 792  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 793  :         return _Newvec + _Whereoff;

	mov	eax, DWORD PTR tv325[ebp]

; 794  :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
__catch$??$_Emplace_reallocate@ABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU23@ABQAU23@@Z$0:

; 785  :         }
; 786  :         _CATCH_ALL
; 787  :         _Destroy(_Constructed_first, _Constructed_last);
; 788  :         _Al.deallocate(_Newvec, _Newcapacity);

	push	ecx
	push	DWORD PTR __Newvec$[ebp]
	call	?deallocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@I@Z ; doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *>::deallocate

; 789  :         _RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8
$LN27@Emplace_re:

; 765  :             _Xlength();

	call	?_Xlength@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@CAXXZ ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Xlength
$LN25@Emplace_re:
	int	3
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Emplace_reallocate@ABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU23@ABQAU23@@Z:
	npad	1
	npad	1
	mov	eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@ABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU23@ABQAU23@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@ABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU23@ABQAU23@@Z ENDP ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Emplace_reallocate<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * const &>
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$addressof@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
??$addressof@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@0@AAV10@@Z PROC ; std::addressof<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> > >, COMDAT
; __Val$ = ecx

; 253  :     return __builtin_addressof(_Val);

	mov	eax, ecx

; 254  : }

	ret	0
??$addressof@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$addressof@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
??$addressof@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@0@AAV10@@Z PROC ; std::addressof<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> > >, COMDAT
; __Val$ = ecx

; 253  :     return __builtin_addressof(_Val);

	mov	eax, ecx

; 254  : }

	ret	0
??$addressof@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$addressof@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
??$addressof@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@0@AAV10@@Z PROC ; std::addressof<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> > >, COMDAT
; __Val$ = ecx

; 253  :     return __builtin_addressof(_Val);

	mov	eax, ecx

; 254  : }

	ret	0
??$addressof@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$addressof@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
??$addressof@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@0@AAV10@@Z PROC ; std::addressof<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> > >, COMDAT
; __Val$ = ecx

; 253  :     return __builtin_addressof(_Val);

	mov	eax, ecx

; 254  : }

	ret	0
??$addressof@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$addressof@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
??$addressof@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@0@AAV10@@Z PROC ; std::addressof<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> > >, COMDAT
; __Val$ = ecx

; 253  :     return __builtin_addressof(_Val);

	mov	eax, ecx

; 254  : }

	ret	0
??$addressof@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@ABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@ABQAU12@@Z
_TEXT	SEGMENT
??$forward@ABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@ABQAU12@@Z PROC ; std::forward<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * const &>, COMDAT
; __Arg$ = ecx

; 1386 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, ecx

; 1387 : }

	ret	0
??$forward@ABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@ABQAU12@@Z ENDP ; std::forward<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$construct@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@ABQAU12@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@ABQAU34@@Z
_TEXT	SEGMENT
_<_Args_0>$ = 8						; size = 4
??$construct@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@ABQAU12@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@ABQAU34@@Z PROC ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::construct<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * const &>, COMDAT
; __Al$dead$ = ecx
; __Ptr$ = edx

; 565  :         if constexpr (_Uses_default_construct<_Alloc, _Ty*, _Types...>::value) {
; 566  :             (void) _Al; // TRANSITION, DevCom-1004719
; 567  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 568  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 569  : #else // __cpp_lib_constexpr_dynamic_alloc
; 570  :             ::new (static_cast<void*>(_Ptr)) _Ty(_STD forward<_Types>(_Args)...);
; 571  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 572  :         } else {
; 573  :             _Al.construct(_Ptr, _STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR _<_Args_0>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 574  :         }
; 575  :     }

	ret	0
??$construct@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@ABQAU12@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@ABQAU34@@Z ENDP ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::construct<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU23@ABQAU23@@Z
_TEXT	SEGMENT
__Newvec$ = -32						; size = 4
tv326 = -28						; size = 4
__Newsize$1$ = -24					; size = 4
tv325 = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU23@ABQAU23@@Z PROC ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Emplace_reallocate<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * const &>, COMDAT
; _this$ = ecx

; 752  :     _CONSTEXPR20_CONTAINER pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Emplace_reallocate@ABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU23@ABQAU23@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 20					; 00000014H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	esi, ecx

; 753  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 754  :         _Alty& _Al        = _Getal();
; 755  :         auto& _My_data    = _Mypair._Myval2;
; 756  :         pointer& _Myfirst = _My_data._Myfirst;
; 757  :         pointer& _Mylast  = _My_data._Mylast;
; 758  : 
; 759  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 760  : 
; 761  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

	mov	edx, DWORD PTR [esi]
	mov	ebx, DWORD PTR __Whereptr$[ebp]
	sub	ebx, edx
	sar	ebx, 2

; 762  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

	mov	eax, DWORD PTR [esi+4]
	sub	eax, edx
	sar	eax, 2

; 763  : 
; 764  :         if (_Oldsize == max_size()) {

	cmp	eax, 1073741823				; 3fffffffH
	je	$LN27@Emplace_re

; 766  :         }
; 767  : 
; 768  :         const size_type _Newsize     = _Oldsize + 1;

	lea	edi, DWORD PTR [eax+1]
	mov	DWORD PTR __Newsize$1$[ebp], edi

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	ecx, DWORD PTR [esi+8]
	sub	ecx, edx
	sar	ecx, 2

; 1675 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	mov	edx, ecx
	shr	edx, 1
	mov	eax, 1073741823				; 3fffffffH
	sub	eax, edx
	cmp	ecx, eax
	jbe	SHORT $LN12@Emplace_re

; 1676 :             return _Max; // geometric growth would overflow

	mov	eax, 1073741823				; 3fffffffH
	jmp	SHORT $LN13@Emplace_re
$LN12@Emplace_re:

; 1677 :         }
; 1678 : 
; 1679 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	lea	eax, DWORD PTR [edx+ecx]

; 1680 : 
; 1681 :         if (_Geometric < _Newsize) {

	cmp	eax, edi
	cmovb	eax, edi
$LN13@Emplace_re:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h

; 33   : 								pointer					allocate		(size_type n, const void* p=0) const	{	return (T*)dlmalloc(sizeof(T)*(u32)n);	}

	shl	eax, 2
	mov	DWORD PTR tv326[ebp], eax
	mov	ecx, eax
	call	_dlmalloc
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 771  :         const pointer _Newvec           = _Al.allocate(_Newcapacity);

	mov	edi, eax
	mov	DWORD PTR __Newvec$[ebp], edi

; 772  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;
; 773  :         pointer _Constructed_first      = _Constructed_last;
; 774  : 
; 775  :         _TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 776  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

	lea	eax, DWORD PTR [edi+ebx*4]
	mov	DWORD PTR tv325[ebp], eax
	mov	ecx, DWORD PTR _<_Val_0>$[ebp]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], ecx

; 777  :         _Constructed_first = _Newvec + _Whereoff;
; 778  : 
; 779  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

	mov	ecx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi]
	mov	ebx, DWORD PTR __Whereptr$[ebp]
	push	edi
	cmp	ebx, ecx
	jne	SHORT $LN4@Emplace_re

; 780  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);

	push	ecx
	push	eax
	call	?_Umove_if_noexcept@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@00@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Umove_if_noexcept

; 781  :         } else { // provide basic guarantee

	jmp	SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 782  :             _Umove(_Myfirst, _Whereptr, _Newvec);

	push	ebx
	push	eax
	call	?_Umove@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU34@00@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Umove

; 783  :             _Constructed_first = _Newvec;
; 784  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

	mov	ecx, DWORD PTR tv325[ebp]
	lea	eax, DWORD PTR [ecx+4]
	push	eax
	push	DWORD PTR [esi+4]
	push	ebx
	call	?_Umove@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU34@00@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Umove
$LN5@Emplace_re:
	mov	DWORD PTR __$EHRec$[ebp+12], -1

; 1732 :         if (_Myfirst) { // destroy and deallocate old array

	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN20@Emplace_re
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h

; 35   : 								void					deallocate		(pointer p, size_type n) const			{	dlfree	(p);				}

	call	_dlfree
$LN20@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1737 :         _Myfirst = _Newvec;

	mov	DWORD PTR [esi], edi

; 1738 :         _Mylast  = _Newvec + _Newsize;

	mov	eax, DWORD PTR __Newsize$1$[ebp]
	lea	ecx, DWORD PTR [edi+eax*4]
	mov	DWORD PTR [esi+4], ecx

; 1739 :         _Myend   = _Newvec + _Newcapacity;

	mov	ecx, DWORD PTR tv326[ebp]
	add	ecx, edi
	mov	DWORD PTR [esi+8], ecx

; 790  :         _CATCH_END
; 791  : 
; 792  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 793  :         return _Newvec + _Whereoff;

	mov	eax, DWORD PTR tv325[ebp]

; 794  :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
__catch$??$_Emplace_reallocate@ABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU23@ABQAU23@@Z$0:

; 785  :         }
; 786  :         _CATCH_ALL
; 787  :         _Destroy(_Constructed_first, _Constructed_last);
; 788  :         _Al.deallocate(_Newvec, _Newcapacity);

	push	ecx
	push	DWORD PTR __Newvec$[ebp]
	call	?deallocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@I@Z ; doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *>::deallocate

; 789  :         _RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8
$LN27@Emplace_re:

; 765  :             _Xlength();

	call	?_Xlength@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@CAXXZ ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Xlength
$LN25@Emplace_re:
	int	3
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Emplace_reallocate@ABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU23@ABQAU23@@Z:
	npad	1
	npad	1
	mov	eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@ABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU23@ABQAU23@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@ABQAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU23@ABQAU23@@Z ENDP ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Emplace_reallocate<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * const &>
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$addressof@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
??$addressof@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@0@AAV10@@Z PROC ; std::addressof<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> > >, COMDAT
; __Val$ = ecx

; 253  :     return __builtin_addressof(_Val);

	mov	eax, ecx

; 254  : }

	ret	0
??$addressof@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$addressof@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
??$addressof@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@0@AAV10@@Z PROC ; std::addressof<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> > >, COMDAT
; __Val$ = ecx

; 253  :     return __builtin_addressof(_Val);

	mov	eax, ecx

; 254  : }

	ret	0
??$addressof@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$addressof@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
??$addressof@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@0@AAV10@@Z PROC ; std::addressof<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> > >, COMDAT
; __Val$ = ecx

; 253  :     return __builtin_addressof(_Val);

	mov	eax, ecx

; 254  : }

	ret	0
??$addressof@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$addressof@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
??$addressof@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@0@AAV10@@Z PROC ; std::addressof<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> > >, COMDAT
; __Val$ = ecx

; 253  :     return __builtin_addressof(_Val);

	mov	eax, ecx

; 254  : }

	ret	0
??$addressof@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$addressof@V?$_Vector_val@U?$_Simple_types@U_MatrixItem@R_dsgraph@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@U_MatrixItem@R_dsgraph@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
??$addressof@V?$_Vector_val@U?$_Simple_types@U_MatrixItem@R_dsgraph@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@U_MatrixItem@R_dsgraph@@@std@@@0@AAV10@@Z PROC ; std::addressof<std::_Vector_val<std::_Simple_types<R_dsgraph::_MatrixItem> > >, COMDAT
; __Val$ = ecx

; 253  :     return __builtin_addressof(_Val);

	mov	eax, ecx

; 254  : }

	ret	0
??$addressof@V?$_Vector_val@U?$_Simple_types@U_MatrixItem@R_dsgraph@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@U_MatrixItem@R_dsgraph@@@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_Vector_val<std::_Simple_types<R_dsgraph::_MatrixItem> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$addressof@V?$_Vector_val@U?$_Simple_types@U_NormalItem@R_dsgraph@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@U_NormalItem@R_dsgraph@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
??$addressof@V?$_Vector_val@U?$_Simple_types@U_NormalItem@R_dsgraph@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@U_NormalItem@R_dsgraph@@@std@@@0@AAV10@@Z PROC ; std::addressof<std::_Vector_val<std::_Simple_types<R_dsgraph::_NormalItem> > >, COMDAT
; __Val$ = ecx

; 253  :     return __builtin_addressof(_Val);

	mov	eax, ecx

; 254  : }

	ret	0
??$addressof@V?$_Vector_val@U?$_Simple_types@U_NormalItem@R_dsgraph@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@U_NormalItem@R_dsgraph@@@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_Vector_val<std::_Simple_types<R_dsgraph::_NormalItem> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$addressof@V?$_Vector_val@U?$_Simple_types@PAVIRender_Portal@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAVIRender_Portal@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
??$addressof@V?$_Vector_val@U?$_Simple_types@PAVIRender_Portal@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAVIRender_Portal@@@std@@@0@AAV10@@Z PROC ; std::addressof<std::_Vector_val<std::_Simple_types<IRender_Portal *> > >, COMDAT
; __Val$ = ecx

; 253  :     return __builtin_addressof(_Val);

	mov	eax, ecx

; 254  : }

	ret	0
??$addressof@V?$_Vector_val@U?$_Simple_types@PAVIRender_Portal@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAVIRender_Portal@@@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_Vector_val<std::_Simple_types<IRender_Portal *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Resize@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Val$dead$ = 12					; size = 4
??$_Resize@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Resize<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 1245 :     _CONSTEXPR20_CONTAINER void _Resize(const size_type _Newsize, const _Ty2& _Val) {

	push	ebx
	push	esi

; 1246 :         // trim or append elements, provide strong guarantee
; 1247 :         auto& _My_data      = _Mypair._Myval2;
; 1248 :         pointer& _Myfirst   = _My_data._Myfirst;
; 1249 :         pointer& _Mylast    = _My_data._Mylast;
; 1250 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);
; 1251 :         if (_Newsize < _Oldsize) { // trim

	mov	esi, DWORD PTR __Newsize$[esp+4]
	push	edi
	mov	edi, ecx
	mov	ebx, DWORD PTR [edi+4]
	mov	ecx, ebx
	mov	edx, DWORD PTR [edi]
	sub	ecx, edx
	sar	ecx, 2
	cmp	esi, ecx
	jae	SHORT $LN2@Resize

; 1252 :             const pointer _Newlast = _Myfirst + _Newsize;

	lea	eax, DWORD PTR [edx+esi*4]

; 1272 :     }

	mov	DWORD PTR [edi+4], eax
	pop	edi
	pop	esi
	pop	ebx
	ret	8
$LN2@Resize:

; 1253 :             _Orphan_range(_Newlast, _Mylast);
; 1254 :             _Destroy(_Newlast, _Mylast);
; 1255 :             _Mylast = _Newlast;
; 1256 :             return;
; 1257 :         }
; 1258 : 
; 1259 :         if (_Newsize > _Oldsize) { // append

	jbe	SHORT $LN3@Resize

; 1260 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

	mov	eax, DWORD PTR [edi+8]
	sub	eax, edx
	sar	eax, 2

; 1261 :             if (_Newsize > _Oldcapacity) { // reallocate

	cmp	esi, eax
	jbe	SHORT $LN4@Resize

; 1262 :                 _Resize_reallocate(_Newsize, _Val);

	push	ecx
	push	esi
	mov	ecx, edi
	call	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Resize_reallocate<std::_Value_init_tag>
	pop	edi

; 1272 :     }

	pop	esi
	pop	ebx
	ret	8
$LN4@Resize:

; 1263 :                 return;
; 1264 :             }
; 1265 : 
; 1266 :             const pointer _Oldlast = _Mylast;
; 1267 :             _Mylast                = _Ufill(_Oldlast, _Newsize - _Oldsize, _Val);

	sub	esi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	shl	esi, 2

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	push	esi
	push	0
	push	ebx
	call	_memset

; 1808 :             return _First + _Count;

	lea	eax, DWORD PTR [esi+ebx]

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	add	esp, 12					; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1272 :     }

	mov	DWORD PTR [edi+4], eax
$LN3@Resize:
	pop	edi
	pop	esi
	pop	ebx
	ret	8
??$_Resize@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Resize<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Resize@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Val$dead$ = 12					; size = 4
??$_Resize@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::_Resize<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 1245 :     _CONSTEXPR20_CONTAINER void _Resize(const size_type _Newsize, const _Ty2& _Val) {

	push	ebx
	push	esi

; 1246 :         // trim or append elements, provide strong guarantee
; 1247 :         auto& _My_data      = _Mypair._Myval2;
; 1248 :         pointer& _Myfirst   = _My_data._Myfirst;
; 1249 :         pointer& _Mylast    = _My_data._Mylast;
; 1250 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);
; 1251 :         if (_Newsize < _Oldsize) { // trim

	mov	esi, DWORD PTR __Newsize$[esp+4]
	push	edi
	mov	edi, ecx
	mov	ebx, DWORD PTR [edi+4]
	mov	ecx, ebx
	mov	edx, DWORD PTR [edi]
	sub	ecx, edx
	sar	ecx, 2
	cmp	esi, ecx
	jae	SHORT $LN2@Resize

; 1252 :             const pointer _Newlast = _Myfirst + _Newsize;

	lea	eax, DWORD PTR [edx+esi*4]

; 1272 :     }

	mov	DWORD PTR [edi+4], eax
	pop	edi
	pop	esi
	pop	ebx
	ret	8
$LN2@Resize:

; 1253 :             _Orphan_range(_Newlast, _Mylast);
; 1254 :             _Destroy(_Newlast, _Mylast);
; 1255 :             _Mylast = _Newlast;
; 1256 :             return;
; 1257 :         }
; 1258 : 
; 1259 :         if (_Newsize > _Oldsize) { // append

	jbe	SHORT $LN3@Resize

; 1260 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

	mov	eax, DWORD PTR [edi+8]
	sub	eax, edx
	sar	eax, 2

; 1261 :             if (_Newsize > _Oldcapacity) { // reallocate

	cmp	esi, eax
	jbe	SHORT $LN4@Resize

; 1262 :                 _Resize_reallocate(_Newsize, _Val);

	push	ecx
	push	esi
	mov	ecx, edi
	call	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::_Resize_reallocate<std::_Value_init_tag>
	pop	edi

; 1272 :     }

	pop	esi
	pop	ebx
	ret	8
$LN4@Resize:

; 1263 :                 return;
; 1264 :             }
; 1265 : 
; 1266 :             const pointer _Oldlast = _Mylast;
; 1267 :             _Mylast                = _Ufill(_Oldlast, _Newsize - _Oldsize, _Val);

	sub	esi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	shl	esi, 2

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	push	esi
	push	0
	push	ebx
	call	_memset

; 1808 :             return _First + _Count;

	lea	eax, DWORD PTR [esi+ebx]

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	add	esp, 12					; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1272 :     }

	mov	DWORD PTR [edi+4], eax
$LN3@Resize:
	pop	edi
	pop	esi
	pop	ebx
	ret	8
??$_Resize@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::_Resize<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Resize@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Val$dead$ = 12					; size = 4
??$_Resize@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::_Resize<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 1245 :     _CONSTEXPR20_CONTAINER void _Resize(const size_type _Newsize, const _Ty2& _Val) {

	push	ebx
	push	esi

; 1246 :         // trim or append elements, provide strong guarantee
; 1247 :         auto& _My_data      = _Mypair._Myval2;
; 1248 :         pointer& _Myfirst   = _My_data._Myfirst;
; 1249 :         pointer& _Mylast    = _My_data._Mylast;
; 1250 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);
; 1251 :         if (_Newsize < _Oldsize) { // trim

	mov	esi, DWORD PTR __Newsize$[esp+4]
	push	edi
	mov	edi, ecx
	mov	ebx, DWORD PTR [edi+4]
	mov	ecx, ebx
	mov	edx, DWORD PTR [edi]
	sub	ecx, edx
	sar	ecx, 2
	cmp	esi, ecx
	jae	SHORT $LN2@Resize

; 1252 :             const pointer _Newlast = _Myfirst + _Newsize;

	lea	eax, DWORD PTR [edx+esi*4]

; 1272 :     }

	mov	DWORD PTR [edi+4], eax
	pop	edi
	pop	esi
	pop	ebx
	ret	8
$LN2@Resize:

; 1253 :             _Orphan_range(_Newlast, _Mylast);
; 1254 :             _Destroy(_Newlast, _Mylast);
; 1255 :             _Mylast = _Newlast;
; 1256 :             return;
; 1257 :         }
; 1258 : 
; 1259 :         if (_Newsize > _Oldsize) { // append

	jbe	SHORT $LN3@Resize

; 1260 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

	mov	eax, DWORD PTR [edi+8]
	sub	eax, edx
	sar	eax, 2

; 1261 :             if (_Newsize > _Oldcapacity) { // reallocate

	cmp	esi, eax
	jbe	SHORT $LN4@Resize

; 1262 :                 _Resize_reallocate(_Newsize, _Val);

	push	ecx
	push	esi
	mov	ecx, edi
	call	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::_Resize_reallocate<std::_Value_init_tag>
	pop	edi

; 1272 :     }

	pop	esi
	pop	ebx
	ret	8
$LN4@Resize:

; 1263 :                 return;
; 1264 :             }
; 1265 : 
; 1266 :             const pointer _Oldlast = _Mylast;
; 1267 :             _Mylast                = _Ufill(_Oldlast, _Newsize - _Oldsize, _Val);

	sub	esi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	shl	esi, 2

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	push	esi
	push	0
	push	ebx
	call	_memset

; 1808 :             return _First + _Count;

	lea	eax, DWORD PTR [esi+ebx]

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	add	esp, 12					; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1272 :     }

	mov	DWORD PTR [edi+4], eax
$LN3@Resize:
	pop	edi
	pop	esi
	pop	ebx
	ret	8
??$_Resize@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::_Resize<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Resize@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Val$dead$ = 12					; size = 4
??$_Resize@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::_Resize<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 1245 :     _CONSTEXPR20_CONTAINER void _Resize(const size_type _Newsize, const _Ty2& _Val) {

	push	ebx
	push	esi

; 1246 :         // trim or append elements, provide strong guarantee
; 1247 :         auto& _My_data      = _Mypair._Myval2;
; 1248 :         pointer& _Myfirst   = _My_data._Myfirst;
; 1249 :         pointer& _Mylast    = _My_data._Mylast;
; 1250 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);
; 1251 :         if (_Newsize < _Oldsize) { // trim

	mov	esi, DWORD PTR __Newsize$[esp+4]
	push	edi
	mov	edi, ecx
	mov	ebx, DWORD PTR [edi+4]
	mov	ecx, ebx
	mov	edx, DWORD PTR [edi]
	sub	ecx, edx
	sar	ecx, 2
	cmp	esi, ecx
	jae	SHORT $LN2@Resize

; 1252 :             const pointer _Newlast = _Myfirst + _Newsize;

	lea	eax, DWORD PTR [edx+esi*4]

; 1272 :     }

	mov	DWORD PTR [edi+4], eax
	pop	edi
	pop	esi
	pop	ebx
	ret	8
$LN2@Resize:

; 1253 :             _Orphan_range(_Newlast, _Mylast);
; 1254 :             _Destroy(_Newlast, _Mylast);
; 1255 :             _Mylast = _Newlast;
; 1256 :             return;
; 1257 :         }
; 1258 : 
; 1259 :         if (_Newsize > _Oldsize) { // append

	jbe	SHORT $LN3@Resize

; 1260 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

	mov	eax, DWORD PTR [edi+8]
	sub	eax, edx
	sar	eax, 2

; 1261 :             if (_Newsize > _Oldcapacity) { // reallocate

	cmp	esi, eax
	jbe	SHORT $LN4@Resize

; 1262 :                 _Resize_reallocate(_Newsize, _Val);

	push	ecx
	push	esi
	mov	ecx, edi
	call	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::_Resize_reallocate<std::_Value_init_tag>
	pop	edi

; 1272 :     }

	pop	esi
	pop	ebx
	ret	8
$LN4@Resize:

; 1263 :                 return;
; 1264 :             }
; 1265 : 
; 1266 :             const pointer _Oldlast = _Mylast;
; 1267 :             _Mylast                = _Ufill(_Oldlast, _Newsize - _Oldsize, _Val);

	sub	esi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	shl	esi, 2

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	push	esi
	push	0
	push	ebx
	call	_memset

; 1808 :             return _First + _Count;

	lea	eax, DWORD PTR [esi+ebx]

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	add	esp, 12					; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1272 :     }

	mov	DWORD PTR [edi+4], eax
$LN3@Resize:
	pop	edi
	pop	esi
	pop	ebx
	ret	8
??$_Resize@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::_Resize<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Resize@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Val$dead$ = 12					; size = 4
??$_Resize@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::_Resize<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 1245 :     _CONSTEXPR20_CONTAINER void _Resize(const size_type _Newsize, const _Ty2& _Val) {

	push	ebx
	push	esi

; 1246 :         // trim or append elements, provide strong guarantee
; 1247 :         auto& _My_data      = _Mypair._Myval2;
; 1248 :         pointer& _Myfirst   = _My_data._Myfirst;
; 1249 :         pointer& _Mylast    = _My_data._Mylast;
; 1250 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);
; 1251 :         if (_Newsize < _Oldsize) { // trim

	mov	esi, DWORD PTR __Newsize$[esp+4]
	push	edi
	mov	edi, ecx
	mov	ebx, DWORD PTR [edi+4]
	mov	ecx, ebx
	mov	edx, DWORD PTR [edi]
	sub	ecx, edx
	sar	ecx, 2
	cmp	esi, ecx
	jae	SHORT $LN2@Resize

; 1252 :             const pointer _Newlast = _Myfirst + _Newsize;

	lea	eax, DWORD PTR [edx+esi*4]

; 1272 :     }

	mov	DWORD PTR [edi+4], eax
	pop	edi
	pop	esi
	pop	ebx
	ret	8
$LN2@Resize:

; 1253 :             _Orphan_range(_Newlast, _Mylast);
; 1254 :             _Destroy(_Newlast, _Mylast);
; 1255 :             _Mylast = _Newlast;
; 1256 :             return;
; 1257 :         }
; 1258 : 
; 1259 :         if (_Newsize > _Oldsize) { // append

	jbe	SHORT $LN3@Resize

; 1260 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

	mov	eax, DWORD PTR [edi+8]
	sub	eax, edx
	sar	eax, 2

; 1261 :             if (_Newsize > _Oldcapacity) { // reallocate

	cmp	esi, eax
	jbe	SHORT $LN4@Resize

; 1262 :                 _Resize_reallocate(_Newsize, _Val);

	push	ecx
	push	esi
	mov	ecx, edi
	call	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::_Resize_reallocate<std::_Value_init_tag>
	pop	edi

; 1272 :     }

	pop	esi
	pop	ebx
	ret	8
$LN4@Resize:

; 1263 :                 return;
; 1264 :             }
; 1265 : 
; 1266 :             const pointer _Oldlast = _Mylast;
; 1267 :             _Mylast                = _Ufill(_Oldlast, _Newsize - _Oldsize, _Val);

	sub	esi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	shl	esi, 2

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	push	esi
	push	0
	push	ebx
	call	_memset

; 1808 :             return _First + _Count;

	lea	eax, DWORD PTR [esi+ebx]

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	add	esp, 12					; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1272 :     }

	mov	DWORD PTR [edi+4], eax
$LN3@Resize:
	pop	edi
	pop	esi
	pop	ebx
	ret	8
??$_Resize@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::_Resize<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Resize@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Val$dead$ = 12					; size = 4
??$_Resize@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Resize<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 1245 :     _CONSTEXPR20_CONTAINER void _Resize(const size_type _Newsize, const _Ty2& _Val) {

	push	ebx
	push	esi

; 1246 :         // trim or append elements, provide strong guarantee
; 1247 :         auto& _My_data      = _Mypair._Myval2;
; 1248 :         pointer& _Myfirst   = _My_data._Myfirst;
; 1249 :         pointer& _Mylast    = _My_data._Mylast;
; 1250 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);
; 1251 :         if (_Newsize < _Oldsize) { // trim

	mov	esi, DWORD PTR __Newsize$[esp+4]
	push	edi
	mov	edi, ecx
	mov	ebx, DWORD PTR [edi+4]
	mov	ecx, ebx
	mov	edx, DWORD PTR [edi]
	sub	ecx, edx
	sar	ecx, 2
	cmp	esi, ecx
	jae	SHORT $LN2@Resize

; 1252 :             const pointer _Newlast = _Myfirst + _Newsize;

	lea	eax, DWORD PTR [edx+esi*4]

; 1272 :     }

	mov	DWORD PTR [edi+4], eax
	pop	edi
	pop	esi
	pop	ebx
	ret	8
$LN2@Resize:

; 1253 :             _Orphan_range(_Newlast, _Mylast);
; 1254 :             _Destroy(_Newlast, _Mylast);
; 1255 :             _Mylast = _Newlast;
; 1256 :             return;
; 1257 :         }
; 1258 : 
; 1259 :         if (_Newsize > _Oldsize) { // append

	jbe	SHORT $LN3@Resize

; 1260 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

	mov	eax, DWORD PTR [edi+8]
	sub	eax, edx
	sar	eax, 2

; 1261 :             if (_Newsize > _Oldcapacity) { // reallocate

	cmp	esi, eax
	jbe	SHORT $LN4@Resize

; 1262 :                 _Resize_reallocate(_Newsize, _Val);

	push	ecx
	push	esi
	mov	ecx, edi
	call	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Resize_reallocate<std::_Value_init_tag>
	pop	edi

; 1272 :     }

	pop	esi
	pop	ebx
	ret	8
$LN4@Resize:

; 1263 :                 return;
; 1264 :             }
; 1265 : 
; 1266 :             const pointer _Oldlast = _Mylast;
; 1267 :             _Mylast                = _Ufill(_Oldlast, _Newsize - _Oldsize, _Val);

	sub	esi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	shl	esi, 2

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	push	esi
	push	0
	push	ebx
	call	_memset

; 1808 :             return _First + _Count;

	lea	eax, DWORD PTR [esi+ebx]

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	add	esp, 12					; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1272 :     }

	mov	DWORD PTR [edi+4], eax
$LN3@Resize:
	pop	edi
	pop	esi
	pop	ebx
	ret	8
??$_Resize@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Resize<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Resize@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Val$dead$ = 12					; size = 4
??$_Resize@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::_Resize<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 1245 :     _CONSTEXPR20_CONTAINER void _Resize(const size_type _Newsize, const _Ty2& _Val) {

	push	ebx
	push	esi

; 1246 :         // trim or append elements, provide strong guarantee
; 1247 :         auto& _My_data      = _Mypair._Myval2;
; 1248 :         pointer& _Myfirst   = _My_data._Myfirst;
; 1249 :         pointer& _Mylast    = _My_data._Mylast;
; 1250 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);
; 1251 :         if (_Newsize < _Oldsize) { // trim

	mov	esi, DWORD PTR __Newsize$[esp+4]
	push	edi
	mov	edi, ecx
	mov	ebx, DWORD PTR [edi+4]
	mov	ecx, ebx
	mov	edx, DWORD PTR [edi]
	sub	ecx, edx
	sar	ecx, 2
	cmp	esi, ecx
	jae	SHORT $LN2@Resize

; 1252 :             const pointer _Newlast = _Myfirst + _Newsize;

	lea	eax, DWORD PTR [edx+esi*4]

; 1272 :     }

	mov	DWORD PTR [edi+4], eax
	pop	edi
	pop	esi
	pop	ebx
	ret	8
$LN2@Resize:

; 1253 :             _Orphan_range(_Newlast, _Mylast);
; 1254 :             _Destroy(_Newlast, _Mylast);
; 1255 :             _Mylast = _Newlast;
; 1256 :             return;
; 1257 :         }
; 1258 : 
; 1259 :         if (_Newsize > _Oldsize) { // append

	jbe	SHORT $LN3@Resize

; 1260 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

	mov	eax, DWORD PTR [edi+8]
	sub	eax, edx
	sar	eax, 2

; 1261 :             if (_Newsize > _Oldcapacity) { // reallocate

	cmp	esi, eax
	jbe	SHORT $LN4@Resize

; 1262 :                 _Resize_reallocate(_Newsize, _Val);

	push	ecx
	push	esi
	mov	ecx, edi
	call	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::_Resize_reallocate<std::_Value_init_tag>
	pop	edi

; 1272 :     }

	pop	esi
	pop	ebx
	ret	8
$LN4@Resize:

; 1263 :                 return;
; 1264 :             }
; 1265 : 
; 1266 :             const pointer _Oldlast = _Mylast;
; 1267 :             _Mylast                = _Ufill(_Oldlast, _Newsize - _Oldsize, _Val);

	sub	esi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	shl	esi, 2

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	push	esi
	push	0
	push	ebx
	call	_memset

; 1808 :             return _First + _Count;

	lea	eax, DWORD PTR [esi+ebx]

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	add	esp, 12					; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1272 :     }

	mov	DWORD PTR [edi+4], eax
$LN3@Resize:
	pop	edi
	pop	esi
	pop	ebx
	ret	8
??$_Resize@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::_Resize<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Resize@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Val$dead$ = 12					; size = 4
??$_Resize@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::_Resize<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 1245 :     _CONSTEXPR20_CONTAINER void _Resize(const size_type _Newsize, const _Ty2& _Val) {

	push	ebx
	push	esi

; 1246 :         // trim or append elements, provide strong guarantee
; 1247 :         auto& _My_data      = _Mypair._Myval2;
; 1248 :         pointer& _Myfirst   = _My_data._Myfirst;
; 1249 :         pointer& _Mylast    = _My_data._Mylast;
; 1250 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);
; 1251 :         if (_Newsize < _Oldsize) { // trim

	mov	esi, DWORD PTR __Newsize$[esp+4]
	push	edi
	mov	edi, ecx
	mov	ebx, DWORD PTR [edi+4]
	mov	ecx, ebx
	mov	edx, DWORD PTR [edi]
	sub	ecx, edx
	sar	ecx, 2
	cmp	esi, ecx
	jae	SHORT $LN2@Resize

; 1252 :             const pointer _Newlast = _Myfirst + _Newsize;

	lea	eax, DWORD PTR [edx+esi*4]

; 1272 :     }

	mov	DWORD PTR [edi+4], eax
	pop	edi
	pop	esi
	pop	ebx
	ret	8
$LN2@Resize:

; 1253 :             _Orphan_range(_Newlast, _Mylast);
; 1254 :             _Destroy(_Newlast, _Mylast);
; 1255 :             _Mylast = _Newlast;
; 1256 :             return;
; 1257 :         }
; 1258 : 
; 1259 :         if (_Newsize > _Oldsize) { // append

	jbe	SHORT $LN3@Resize

; 1260 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

	mov	eax, DWORD PTR [edi+8]
	sub	eax, edx
	sar	eax, 2

; 1261 :             if (_Newsize > _Oldcapacity) { // reallocate

	cmp	esi, eax
	jbe	SHORT $LN4@Resize

; 1262 :                 _Resize_reallocate(_Newsize, _Val);

	push	ecx
	push	esi
	mov	ecx, edi
	call	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::_Resize_reallocate<std::_Value_init_tag>
	pop	edi

; 1272 :     }

	pop	esi
	pop	ebx
	ret	8
$LN4@Resize:

; 1263 :                 return;
; 1264 :             }
; 1265 : 
; 1266 :             const pointer _Oldlast = _Mylast;
; 1267 :             _Mylast                = _Ufill(_Oldlast, _Newsize - _Oldsize, _Val);

	sub	esi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	shl	esi, 2

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	push	esi
	push	0
	push	ebx
	call	_memset

; 1808 :             return _First + _Count;

	lea	eax, DWORD PTR [esi+ebx]

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	add	esp, 12					; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1272 :     }

	mov	DWORD PTR [edi+4], eax
$LN3@Resize:
	pop	edi
	pop	esi
	pop	ebx
	ret	8
??$_Resize@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::_Resize<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Resize@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Val$dead$ = 12					; size = 4
??$_Resize@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::_Resize<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 1245 :     _CONSTEXPR20_CONTAINER void _Resize(const size_type _Newsize, const _Ty2& _Val) {

	push	ebx
	push	esi

; 1246 :         // trim or append elements, provide strong guarantee
; 1247 :         auto& _My_data      = _Mypair._Myval2;
; 1248 :         pointer& _Myfirst   = _My_data._Myfirst;
; 1249 :         pointer& _Mylast    = _My_data._Mylast;
; 1250 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);
; 1251 :         if (_Newsize < _Oldsize) { // trim

	mov	esi, DWORD PTR __Newsize$[esp+4]
	push	edi
	mov	edi, ecx
	mov	ebx, DWORD PTR [edi+4]
	mov	ecx, ebx
	mov	edx, DWORD PTR [edi]
	sub	ecx, edx
	sar	ecx, 2
	cmp	esi, ecx
	jae	SHORT $LN2@Resize

; 1252 :             const pointer _Newlast = _Myfirst + _Newsize;

	lea	eax, DWORD PTR [edx+esi*4]

; 1272 :     }

	mov	DWORD PTR [edi+4], eax
	pop	edi
	pop	esi
	pop	ebx
	ret	8
$LN2@Resize:

; 1253 :             _Orphan_range(_Newlast, _Mylast);
; 1254 :             _Destroy(_Newlast, _Mylast);
; 1255 :             _Mylast = _Newlast;
; 1256 :             return;
; 1257 :         }
; 1258 : 
; 1259 :         if (_Newsize > _Oldsize) { // append

	jbe	SHORT $LN3@Resize

; 1260 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

	mov	eax, DWORD PTR [edi+8]
	sub	eax, edx
	sar	eax, 2

; 1261 :             if (_Newsize > _Oldcapacity) { // reallocate

	cmp	esi, eax
	jbe	SHORT $LN4@Resize

; 1262 :                 _Resize_reallocate(_Newsize, _Val);

	push	ecx
	push	esi
	mov	ecx, edi
	call	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::_Resize_reallocate<std::_Value_init_tag>
	pop	edi

; 1272 :     }

	pop	esi
	pop	ebx
	ret	8
$LN4@Resize:

; 1263 :                 return;
; 1264 :             }
; 1265 : 
; 1266 :             const pointer _Oldlast = _Mylast;
; 1267 :             _Mylast                = _Ufill(_Oldlast, _Newsize - _Oldsize, _Val);

	sub	esi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	shl	esi, 2

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	push	esi
	push	0
	push	ebx
	call	_memset

; 1808 :             return _First + _Count;

	lea	eax, DWORD PTR [esi+ebx]

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	add	esp, 12					; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1272 :     }

	mov	DWORD PTR [edi+4], eax
$LN3@Resize:
	pop	edi
	pop	esi
	pop	ebx
	ret	8
??$_Resize@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::_Resize<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Resize@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Val$dead$ = 12					; size = 4
??$_Resize@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::_Resize<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 1245 :     _CONSTEXPR20_CONTAINER void _Resize(const size_type _Newsize, const _Ty2& _Val) {

	push	ebx
	push	esi

; 1246 :         // trim or append elements, provide strong guarantee
; 1247 :         auto& _My_data      = _Mypair._Myval2;
; 1248 :         pointer& _Myfirst   = _My_data._Myfirst;
; 1249 :         pointer& _Mylast    = _My_data._Mylast;
; 1250 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);
; 1251 :         if (_Newsize < _Oldsize) { // trim

	mov	esi, DWORD PTR __Newsize$[esp+4]
	push	edi
	mov	edi, ecx
	mov	ebx, DWORD PTR [edi+4]
	mov	ecx, ebx
	mov	edx, DWORD PTR [edi]
	sub	ecx, edx
	sar	ecx, 2
	cmp	esi, ecx
	jae	SHORT $LN2@Resize

; 1252 :             const pointer _Newlast = _Myfirst + _Newsize;

	lea	eax, DWORD PTR [edx+esi*4]

; 1272 :     }

	mov	DWORD PTR [edi+4], eax
	pop	edi
	pop	esi
	pop	ebx
	ret	8
$LN2@Resize:

; 1253 :             _Orphan_range(_Newlast, _Mylast);
; 1254 :             _Destroy(_Newlast, _Mylast);
; 1255 :             _Mylast = _Newlast;
; 1256 :             return;
; 1257 :         }
; 1258 : 
; 1259 :         if (_Newsize > _Oldsize) { // append

	jbe	SHORT $LN3@Resize

; 1260 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

	mov	eax, DWORD PTR [edi+8]
	sub	eax, edx
	sar	eax, 2

; 1261 :             if (_Newsize > _Oldcapacity) { // reallocate

	cmp	esi, eax
	jbe	SHORT $LN4@Resize

; 1262 :                 _Resize_reallocate(_Newsize, _Val);

	push	ecx
	push	esi
	mov	ecx, edi
	call	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::_Resize_reallocate<std::_Value_init_tag>
	pop	edi

; 1272 :     }

	pop	esi
	pop	ebx
	ret	8
$LN4@Resize:

; 1263 :                 return;
; 1264 :             }
; 1265 : 
; 1266 :             const pointer _Oldlast = _Mylast;
; 1267 :             _Mylast                = _Ufill(_Oldlast, _Newsize - _Oldsize, _Val);

	sub	esi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	shl	esi, 2

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	push	esi
	push	0
	push	ebx
	call	_memset

; 1808 :             return _First + _Count;

	lea	eax, DWORD PTR [esi+ebx]

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	add	esp, 12					; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1272 :     }

	mov	DWORD PTR [edi+4], eax
$LN3@Resize:
	pop	edi
	pop	esi
	pop	ebx
	ret	8
??$_Resize@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::_Resize<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$addressof@V?$_Vector_val@U?$_Simple_types@PAVIRender_Sector@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAVIRender_Sector@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
??$addressof@V?$_Vector_val@U?$_Simple_types@PAVIRender_Sector@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAVIRender_Sector@@@std@@@0@AAV10@@Z PROC ; std::addressof<std::_Vector_val<std::_Simple_types<IRender_Sector *> > >, COMDAT
; __Val$ = ecx

; 253  :     return __builtin_addressof(_Val);

	mov	eax, ecx

; 254  : }

	ret	0
??$addressof@V?$_Vector_val@U?$_Simple_types@PAVIRender_Sector@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAVIRender_Sector@@@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_Vector_val<std::_Simple_types<IRender_Sector *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$addressof@V?$_Vector_val@U?$_Simple_types@VCFrustum@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@VCFrustum@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
??$addressof@V?$_Vector_val@U?$_Simple_types@VCFrustum@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@VCFrustum@@@std@@@0@AAV10@@Z PROC ; std::addressof<std::_Vector_val<std::_Simple_types<CFrustum> > >, COMDAT
; __Val$ = ecx

; 253  :     return __builtin_addressof(_Val);

	mov	eax, ecx

; 254  : }

	ret	0
??$addressof@V?$_Vector_val@U?$_Simple_types@VCFrustum@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@VCFrustum@@@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_Vector_val<std::_Simple_types<CFrustum> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@XZ
_TEXT	SEGMENT
?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> > >::_Unwrapped, COMDAT
; _this$ = ecx

; 328  :         return _Unfancy(this->_Ptr);

	mov	eax, DWORD PTR [ecx]

; 329  :     }

	ret	0
?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> > >::_Unwrapped
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@XZ
_TEXT	SEGMENT
?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> > >::_Unwrapped, COMDAT
; _this$ = ecx

; 328  :         return _Unfancy(this->_Ptr);

	mov	eax, DWORD PTR [ecx]

; 329  :     }

	ret	0
?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> > >::_Unwrapped
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@XZ
_TEXT	SEGMENT
?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> > >::_Unwrapped, COMDAT
; _this$ = ecx

; 328  :         return _Unfancy(this->_Ptr);

	mov	eax, DWORD PTR [ecx]

; 329  :     }

	ret	0
?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> > >::_Unwrapped
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@XZ
_TEXT	SEGMENT
?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> > >::_Unwrapped, COMDAT
; _this$ = ecx

; 328  :         return _Unfancy(this->_Ptr);

	mov	eax, DWORD PTR [ecx]

; 329  :     }

	ret	0
?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> > >::_Unwrapped
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@XZ
_TEXT	SEGMENT
?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> > >::_Unwrapped, COMDAT
; _this$ = ecx

; 328  :         return _Unfancy(this->_Ptr);

	mov	eax, DWORD PTR [ecx]

; 329  :     }

	ret	0
?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> > >::_Unwrapped
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@XZ
_TEXT	SEGMENT
?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> > >::_Unwrapped, COMDAT
; _this$ = ecx

; 328  :         return _Unfancy(this->_Ptr);

	mov	eax, DWORD PTR [ecx]

; 329  :     }

	ret	0
?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> > >::_Unwrapped
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@XZ
_TEXT	SEGMENT
?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> > >::_Unwrapped, COMDAT
; _this$ = ecx

; 328  :         return _Unfancy(this->_Ptr);

	mov	eax, DWORD PTR [ecx]

; 329  :     }

	ret	0
?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> > >::_Unwrapped
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@XZ
_TEXT	SEGMENT
?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> > >::_Unwrapped, COMDAT
; _this$ = ecx

; 328  :         return _Unfancy(this->_Ptr);

	mov	eax, DWORD PTR [ecx]

; 329  :     }

	ret	0
?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> > >::_Unwrapped
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@XZ
_TEXT	SEGMENT
?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> > >::_Unwrapped, COMDAT
; _this$ = ecx

; 328  :         return _Unfancy(this->_Ptr);

	mov	eax, DWORD PTR [ecx]

; 329  :     }

	ret	0
?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> > >::_Unwrapped
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@XZ
_TEXT	SEGMENT
?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> > >::_Unwrapped, COMDAT
; _this$ = ecx

; 328  :         return _Unfancy(this->_Ptr);

	mov	eax, DWORD PTR [ecx]

; 329  :     }

	ret	0
?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@QBEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> > >::_Unwrapped
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_MatrixItem@R_dsgraph@@@std@@@std@@@std@@QBEPAU_MatrixItem@R_dsgraph@@XZ
_TEXT	SEGMENT
?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_MatrixItem@R_dsgraph@@@std@@@std@@@std@@QBEPAU_MatrixItem@R_dsgraph@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<R_dsgraph::_MatrixItem> > >::_Unwrapped, COMDAT
; _this$ = ecx

; 328  :         return _Unfancy(this->_Ptr);

	mov	eax, DWORD PTR [ecx]

; 329  :     }

	ret	0
?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_MatrixItem@R_dsgraph@@@std@@@std@@@std@@QBEPAU_MatrixItem@R_dsgraph@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<R_dsgraph::_MatrixItem> > >::_Unwrapped
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_NormalItem@R_dsgraph@@@std@@@std@@@std@@QBEPAU_NormalItem@R_dsgraph@@XZ
_TEXT	SEGMENT
?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_NormalItem@R_dsgraph@@@std@@@std@@@std@@QBEPAU_NormalItem@R_dsgraph@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<R_dsgraph::_NormalItem> > >::_Unwrapped, COMDAT
; _this$ = ecx

; 328  :         return _Unfancy(this->_Ptr);

	mov	eax, DWORD PTR [ecx]

; 329  :     }

	ret	0
?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_NormalItem@R_dsgraph@@@std@@@std@@@std@@QBEPAU_NormalItem@R_dsgraph@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<R_dsgraph::_NormalItem> > >::_Unwrapped
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Xlength@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@CAXXZ PROC ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::_Xlength, COMDAT

; 1761 :         _Xlength_error("vector too long");

	push	OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN3@Xlength:
	int	3
?_Xlength@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@CAXXZ ENDP ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Change_array@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@AAEXQAPAVIRender_Visual@@II@Z
_TEXT	SEGMENT
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@AAEXQAPAVIRender_Visual@@II@Z PROC ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::_Change_array, COMDAT
; _this$ = ecx

; 1723 :         const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

	push	esi
	mov	esi, ecx

; 1724 :         // orphan all iterators, discard old array, acquire new array
; 1725 :         auto& _My_data    = _Mypair._Myval2;
; 1726 :         pointer& _Myfirst = _My_data._Myfirst;
; 1727 :         pointer& _Mylast  = _My_data._Mylast;
; 1728 :         pointer& _Myend   = _My_data._Myend;
; 1729 : 
; 1730 :         _My_data._Orphan_all();
; 1731 : 
; 1732 :         if (_Myfirst) { // destroy and deallocate old array

	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN2@Change_arr
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h

; 35   : 								void					deallocate		(pointer p, size_type n) const			{	dlfree	(p);				}

	call	_dlfree
$LN2@Change_arr:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1737 :         _Myfirst = _Newvec;

	mov	ecx, DWORD PTR __Newvec$[esp]

; 1738 :         _Mylast  = _Newvec + _Newsize;

	mov	eax, DWORD PTR __Newsize$[esp]
	mov	DWORD PTR [esi], ecx
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [esi+4], eax

; 1739 :         _Myend   = _Newvec + _Newcapacity;

	mov	eax, DWORD PTR __Newcapacity$[esp]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [esi+8], eax
	pop	esi

; 1740 :     }

	ret	12					; 0000000cH
?_Change_array@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@AAEXQAPAVIRender_Visual@@II@Z ENDP ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Calculate_growth@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@ABEII@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Calculate_growth@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@ABEII@Z PROC ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	edx, DWORD PTR [ecx+8]
	sub	edx, DWORD PTR [ecx]

; 1671 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1672 :         const size_type _Oldcapacity = capacity();
; 1673 :         const auto _Max              = max_size();
; 1674 : 
; 1675 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	mov	ecx, 1073741823				; 3fffffffH

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	sar	edx, 2

; 1670 :     _CONSTEXPR20_CONTAINER size_type _Calculate_growth(const size_type _Newsize) const {

	push	esi

; 1671 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1672 :         const size_type _Oldcapacity = capacity();
; 1673 :         const auto _Max              = max_size();
; 1674 : 
; 1675 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	mov	esi, edx
	shr	esi, 1
	sub	ecx, esi
	cmp	edx, ecx
	jbe	SHORT $LN2@Calculate_

; 1676 :             return _Max; // geometric growth would overflow

	mov	eax, 1073741823				; 3fffffffH
	pop	esi

; 1682 :             return _Newsize; // geometric growth would be insufficient
; 1683 :         }
; 1684 : 
; 1685 :         return _Geometric; // geometric growth is sufficient
; 1686 :     }

	ret	4
$LN2@Calculate_:

; 1677 :         }
; 1678 : 
; 1679 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	lea	eax, DWORD PTR [esi+edx]

; 1680 : 
; 1681 :         if (_Geometric < _Newsize) {

	cmp	eax, DWORD PTR __Newsize$[esp]
	pop	esi
	cmovb	eax, DWORD PTR __Newsize$[esp-4]

; 1682 :             return _Newsize; // geometric growth would be insufficient
; 1683 :         }
; 1684 : 
; 1685 :         return _Geometric; // geometric growth is sufficient
; 1686 :     }

	ret	4
?_Calculate_growth@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@ABEII@Z ENDP ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Umove_if_noexcept@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@AAEXPAPAVIRender_Visual@@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove_if_noexcept@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@AAEXPAPAVIRender_Visual@@00@Z PROC ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::_Umove_if_noexcept, COMDAT
; _this$dead$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1703 :     auto _UFirst      = _Get_unwrapped(_First);

	mov	eax, DWORD PTR __First$[esp-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1659 :     _CONSTEXPR20_CONTAINER void _Umove_if_noexcept(pointer _First, pointer _Last, pointer _Dest) {

	push	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	mov	esi, DWORD PTR __Last$[esp]
	cmp	eax, esi
	je	SHORT $LN7@Umove_if_n

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	edx, DWORD PTR __Dest$[esp]
	sub	edx, eax
$LL8@Umove_if_n:

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx+eax], ecx

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	add	eax, 4
	cmp	eax, esi
	jne	SHORT $LL8@Umove_if_n
$LN7@Umove_if_n:
	pop	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1663 :     }

	ret	12					; 0000000cH
?_Umove_if_noexcept@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@AAEXPAPAVIRender_Visual@@00@Z ENDP ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::_Umove_if_noexcept
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Umove@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@AAEPAPAVIRender_Visual@@PAPAV3@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@AAEPAPAVIRender_Visual@@PAPAV3@00@Z PROC ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::_Umove, COMDAT
; _this$dead$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	mov	ecx, DWORD PTR __First$[esp-4]

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	eax, DWORD PTR __Dest$[esp-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1644 :     _CONSTEXPR20_CONTAINER pointer _Umove(pointer _First, pointer _Last, pointer _Dest) {

	push	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	mov	esi, DWORD PTR __Last$[esp]
	cmp	ecx, esi
	je	SHORT $LN5@Umove
$LL6@Umove:

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	edx, DWORD PTR [ecx]

; 1621 :         ++_Last;

	add	ecx, 4
	mov	DWORD PTR [eax], edx
	add	eax, 4

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	cmp	ecx, esi
	jne	SHORT $LL6@Umove
$LN5@Umove:
	pop	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1647 :     }

	ret	12					; 0000000cH
?_Umove@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@AAEPAPAVIRender_Visual@@PAPAV3@00@Z ENDP ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::_Umove
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?max_size@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QBEIXZ PROC ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::max_size, COMDAT
; _this$dead$ = ecx

; 1540 :         return (_STD min)(

	mov	eax, 1073741823				; 3fffffffH

; 1541 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1542 :     }

	ret	0
?max_size@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QBEIXZ ENDP ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
;	COMDAT ?construct@?$doug_lea_alloc@PAVIRender_Visual@@@@QAEXPAPAVIRender_Visual@@ABQAV2@@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
__Val$ = 12						; size = 4
?construct@?$doug_lea_alloc@PAVIRender_Visual@@@@QAEXPAPAVIRender_Visual@@ABQAV2@@Z PROC ; doug_lea_alloc<IRender_Visual *>::construct, COMDAT
; _this$dead$ = ecx

; 37   : 								void					construct		(pointer p, const T& _Val)				{	::new((void*)p) value_type (_Val); }

	mov	eax, DWORD PTR __Val$[esp-4]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR _p$[esp-4]
	mov	DWORD PTR [eax], ecx
	ret	8
?construct@?$doug_lea_alloc@PAVIRender_Visual@@@@QAEXPAPAVIRender_Visual@@ABQAV2@@Z ENDP ; doug_lea_alloc<IRender_Visual *>::construct
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
;	COMDAT ?allocate@?$doug_lea_alloc@PAVIRender_Visual@@@@QBEPAPAVIRender_Visual@@IPBX@Z
_TEXT	SEGMENT
_n$ = 8							; size = 4
_p$dead$ = 12						; size = 4
?allocate@?$doug_lea_alloc@PAVIRender_Visual@@@@QBEPAPAVIRender_Visual@@IPBX@Z PROC ; doug_lea_alloc<IRender_Visual *>::allocate, COMDAT
; _this$dead$ = ecx

; 33   : 								pointer					allocate		(size_type n, const void* p=0) const	{	return (T*)dlmalloc(sizeof(T)*(u32)n);	}

	mov	eax, DWORD PTR _n$[esp-4]
	lea	ecx, DWORD PTR [eax*4]
	call	_dlmalloc
	ret	8
?allocate@?$doug_lea_alloc@PAVIRender_Visual@@@@QBEPAPAVIRender_Visual@@IPBX@Z ENDP ; doug_lea_alloc<IRender_Visual *>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Make_iterator_offset@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@I@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Offset$ = 12						; size = 4
?_Make_iterator_offset@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@I@Z PROC ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Make_iterator_offset, COMDAT
; _this$ = ecx

; 1817 :         // return the iterator begin() + _Offset without a debugging check
; 1818 :         auto& _My_data = _Mypair._Myval2;
; 1819 :         return iterator(_My_data._Myfirst + _Offset, _STD addressof(_My_data));

	mov	eax, DWORD PTR __Offset$[esp-4]
	mov	ecx, DWORD PTR [ecx]
	lea	ecx, DWORD PTR [ecx+eax*4]

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	DWORD PTR [eax], ecx

; 1820 :     }

	ret	8
?_Make_iterator_offset@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@I@Z ENDP ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Make_iterator_offset
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Xlength@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@CAXXZ PROC ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Xlength, COMDAT

; 1761 :         _Xlength_error("vector too long");

	push	OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN3@Xlength:
	int	3
?_Xlength@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@CAXXZ ENDP ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Change_array@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXQAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@II@Z
_TEXT	SEGMENT
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXQAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@II@Z PROC ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Change_array, COMDAT
; _this$ = ecx

; 1723 :         const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

	push	esi
	mov	esi, ecx

; 1724 :         // orphan all iterators, discard old array, acquire new array
; 1725 :         auto& _My_data    = _Mypair._Myval2;
; 1726 :         pointer& _Myfirst = _My_data._Myfirst;
; 1727 :         pointer& _Mylast  = _My_data._Mylast;
; 1728 :         pointer& _Myend   = _My_data._Myend;
; 1729 : 
; 1730 :         _My_data._Orphan_all();
; 1731 : 
; 1732 :         if (_Myfirst) { // destroy and deallocate old array

	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN2@Change_arr
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h

; 35   : 								void					deallocate		(pointer p, size_type n) const			{	dlfree	(p);				}

	call	_dlfree
$LN2@Change_arr:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1737 :         _Myfirst = _Newvec;

	mov	ecx, DWORD PTR __Newvec$[esp]

; 1738 :         _Mylast  = _Newvec + _Newsize;

	mov	eax, DWORD PTR __Newsize$[esp]
	mov	DWORD PTR [esi], ecx
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [esi+4], eax

; 1739 :         _Myend   = _Newvec + _Newcapacity;

	mov	eax, DWORD PTR __Newcapacity$[esp]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [esi+8], eax
	pop	esi

; 1740 :     }

	ret	12					; 0000000cH
?_Change_array@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXQAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@II@Z ENDP ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Calculate_growth@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEII@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Calculate_growth@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEII@Z PROC ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	edx, DWORD PTR [ecx+8]
	sub	edx, DWORD PTR [ecx]

; 1671 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1672 :         const size_type _Oldcapacity = capacity();
; 1673 :         const auto _Max              = max_size();
; 1674 : 
; 1675 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	mov	ecx, 1073741823				; 3fffffffH

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	sar	edx, 2

; 1670 :     _CONSTEXPR20_CONTAINER size_type _Calculate_growth(const size_type _Newsize) const {

	push	esi

; 1671 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1672 :         const size_type _Oldcapacity = capacity();
; 1673 :         const auto _Max              = max_size();
; 1674 : 
; 1675 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	mov	esi, edx
	shr	esi, 1
	sub	ecx, esi
	cmp	edx, ecx
	jbe	SHORT $LN2@Calculate_

; 1676 :             return _Max; // geometric growth would overflow

	mov	eax, 1073741823				; 3fffffffH
	pop	esi

; 1682 :             return _Newsize; // geometric growth would be insufficient
; 1683 :         }
; 1684 : 
; 1685 :         return _Geometric; // geometric growth is sufficient
; 1686 :     }

	ret	4
$LN2@Calculate_:

; 1677 :         }
; 1678 : 
; 1679 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	lea	eax, DWORD PTR [esi+edx]

; 1680 : 
; 1681 :         if (_Geometric < _Newsize) {

	cmp	eax, DWORD PTR __Newsize$[esp]
	pop	esi
	cmovb	eax, DWORD PTR __Newsize$[esp-4]

; 1682 :             return _Newsize; // geometric growth would be insufficient
; 1683 :         }
; 1684 : 
; 1685 :         return _Geometric; // geometric growth is sufficient
; 1686 :     }

	ret	4
?_Calculate_growth@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEII@Z ENDP ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Umove_if_noexcept@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove_if_noexcept@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@00@Z PROC ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Umove_if_noexcept, COMDAT
; _this$dead$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1703 :     auto _UFirst      = _Get_unwrapped(_First);

	mov	eax, DWORD PTR __First$[esp-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1659 :     _CONSTEXPR20_CONTAINER void _Umove_if_noexcept(pointer _First, pointer _Last, pointer _Dest) {

	push	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	mov	esi, DWORD PTR __Last$[esp]
	cmp	eax, esi
	je	SHORT $LN7@Umove_if_n

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	edx, DWORD PTR __Dest$[esp]
	sub	edx, eax
$LL8@Umove_if_n:

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx+eax], ecx

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	add	eax, 4
	cmp	eax, esi
	jne	SHORT $LL8@Umove_if_n
$LN7@Umove_if_n:
	pop	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1663 :     }

	ret	12					; 0000000cH
?_Umove_if_noexcept@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@00@Z ENDP ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Umove_if_noexcept
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Umove@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU34@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU34@00@Z PROC ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Umove, COMDAT
; _this$dead$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	mov	ecx, DWORD PTR __First$[esp-4]

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	eax, DWORD PTR __Dest$[esp-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1644 :     _CONSTEXPR20_CONTAINER pointer _Umove(pointer _First, pointer _Last, pointer _Dest) {

	push	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	mov	esi, DWORD PTR __Last$[esp]
	cmp	ecx, esi
	je	SHORT $LN5@Umove
$LL6@Umove:

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	edx, DWORD PTR [ecx]

; 1621 :         ++_Last;

	add	ecx, 4
	mov	DWORD PTR [eax], edx
	add	eax, 4

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	cmp	ecx, esi
	jne	SHORT $LL6@Umove
$LN5@Umove:
	pop	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1647 :     }

	ret	12					; 0000000cH
?_Umove@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU34@00@Z ENDP ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Umove
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Ufill@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU34@IU_Value_init_tag@2@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Count$ = 12						; size = 4
___formal$ = 16						; size = 1
?_Ufill@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU34@IU_Value_init_tag@2@@Z PROC ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Ufill, COMDAT
; _this$dead$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	mov	eax, DWORD PTR __Count$[esp-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1633 :     _CONSTEXPR20_CONTAINER pointer _Ufill(pointer _Dest, const size_type _Count, _Value_init_tag) {

	push	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	mov	esi, DWORD PTR __Dest$[esp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1633 :     _CONSTEXPR20_CONTAINER pointer _Ufill(pointer _Dest, const size_type _Count, _Value_init_tag) {

	push	edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	lea	edi, DWORD PTR [eax*4]

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	push	edi
	push	0
	push	esi
	call	_memset
	add	esp, 12					; 0000000cH

; 1808 :             return _First + _Count;

	lea	eax, DWORD PTR [edi+esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1635 :         return _Uninitialized_value_construct_n(_Dest, _Count, _Getal());

	pop	edi
	pop	esi

; 1636 :     }

	ret	12					; 0000000cH
?_Ufill@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU34@IU_Value_init_tag@2@@Z ENDP ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Ufill
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?max_size@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ PROC ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::max_size, COMDAT
; _this$dead$ = ecx

; 1540 :         return (_STD min)(

	mov	eax, 1073741823				; 3fffffffH

; 1541 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1542 :     }

	ret	0
?max_size@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ ENDP ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
;	COMDAT ?construct@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@ABQAU23@@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
__Val$ = 12						; size = 4
?construct@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@ABQAU23@@Z PROC ; doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *>::construct, COMDAT
; _this$dead$ = ecx

; 37   : 								void					construct		(pointer p, const T& _Val)				{	::new((void*)p) value_type (_Val); }

	mov	eax, DWORD PTR __Val$[esp-4]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR _p$[esp-4]
	mov	DWORD PTR [eax], ecx
	ret	8
?construct@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@ABQAU23@@Z ENDP ; doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *>::construct
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
;	COMDAT ?allocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@IPBX@Z
_TEXT	SEGMENT
_n$ = 8							; size = 4
_p$dead$ = 12						; size = 4
?allocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@IPBX@Z PROC ; doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *>::allocate, COMDAT
; _this$dead$ = ecx

; 33   : 								pointer					allocate		(size_type n, const void* p=0) const	{	return (T*)dlmalloc(sizeof(T)*(u32)n);	}

	mov	eax, DWORD PTR _n$[esp-4]
	lea	ecx, DWORD PTR [eax*4]
	call	_dlmalloc
	ret	8
?allocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@IPBX@Z ENDP ; doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Orphan_range@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@Z
_TEXT	SEGMENT
___formal$dead$ = 8					; size = 4
___formal$dead$ = 12					; size = 4
?_Orphan_range@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@Z PROC ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::_Orphan_range, COMDAT
; _this$dead$ = ecx

; 1801 :     _CONSTEXPR20_CONTAINER void _Orphan_range(pointer, pointer) const {}

	ret	8
?_Orphan_range@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ENDP ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Ufill@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU34@IU_Value_init_tag@2@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Count$ = 12						; size = 4
___formal$ = 16						; size = 1
?_Ufill@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU34@IU_Value_init_tag@2@@Z PROC ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::_Ufill, COMDAT
; _this$dead$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	mov	eax, DWORD PTR __Count$[esp-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1633 :     _CONSTEXPR20_CONTAINER pointer _Ufill(pointer _Dest, const size_type _Count, _Value_init_tag) {

	push	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	mov	esi, DWORD PTR __Dest$[esp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1633 :     _CONSTEXPR20_CONTAINER pointer _Ufill(pointer _Dest, const size_type _Count, _Value_init_tag) {

	push	edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	lea	edi, DWORD PTR [eax*4]

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	push	edi
	push	0
	push	esi
	call	_memset
	add	esp, 12					; 0000000cH

; 1808 :             return _First + _Count;

	lea	eax, DWORD PTR [edi+esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1635 :         return _Uninitialized_value_construct_n(_Dest, _Count, _Getal());

	pop	edi
	pop	esi

; 1636 :     }

	ret	12					; 0000000cH
?_Ufill@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU34@IU_Value_init_tag@2@@Z ENDP ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::_Ufill
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Orphan_range@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@0@Z
_TEXT	SEGMENT
___formal$dead$ = 8					; size = 4
___formal$dead$ = 12					; size = 4
?_Orphan_range@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@0@Z PROC ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::_Orphan_range, COMDAT
; _this$dead$ = ecx

; 1801 :     _CONSTEXPR20_CONTAINER void _Orphan_range(pointer, pointer) const {}

	ret	8
?_Orphan_range@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ENDP ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Ufill@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU34@IU_Value_init_tag@2@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Count$ = 12						; size = 4
___formal$ = 16						; size = 1
?_Ufill@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU34@IU_Value_init_tag@2@@Z PROC ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::_Ufill, COMDAT
; _this$dead$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	mov	eax, DWORD PTR __Count$[esp-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1633 :     _CONSTEXPR20_CONTAINER pointer _Ufill(pointer _Dest, const size_type _Count, _Value_init_tag) {

	push	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	mov	esi, DWORD PTR __Dest$[esp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1633 :     _CONSTEXPR20_CONTAINER pointer _Ufill(pointer _Dest, const size_type _Count, _Value_init_tag) {

	push	edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	lea	edi, DWORD PTR [eax*4]

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	push	edi
	push	0
	push	esi
	call	_memset
	add	esp, 12					; 0000000cH

; 1808 :             return _First + _Count;

	lea	eax, DWORD PTR [edi+esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1635 :         return _Uninitialized_value_construct_n(_Dest, _Count, _Getal());

	pop	edi
	pop	esi

; 1636 :     }

	ret	12					; 0000000cH
?_Ufill@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU34@IU_Value_init_tag@2@@Z ENDP ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::_Ufill
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Orphan_range@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z
_TEXT	SEGMENT
___formal$dead$ = 8					; size = 4
___formal$dead$ = 12					; size = 4
?_Orphan_range@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z PROC ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::_Orphan_range, COMDAT
; _this$dead$ = ecx

; 1801 :     _CONSTEXPR20_CONTAINER void _Orphan_range(pointer, pointer) const {}

	ret	8
?_Orphan_range@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ENDP ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Ufill@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU34@IU_Value_init_tag@2@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Count$ = 12						; size = 4
___formal$ = 16						; size = 1
?_Ufill@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU34@IU_Value_init_tag@2@@Z PROC ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::_Ufill, COMDAT
; _this$dead$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	mov	eax, DWORD PTR __Count$[esp-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1633 :     _CONSTEXPR20_CONTAINER pointer _Ufill(pointer _Dest, const size_type _Count, _Value_init_tag) {

	push	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	mov	esi, DWORD PTR __Dest$[esp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1633 :     _CONSTEXPR20_CONTAINER pointer _Ufill(pointer _Dest, const size_type _Count, _Value_init_tag) {

	push	edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	lea	edi, DWORD PTR [eax*4]

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	push	edi
	push	0
	push	esi
	call	_memset
	add	esp, 12					; 0000000cH

; 1808 :             return _First + _Count;

	lea	eax, DWORD PTR [edi+esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1635 :         return _Uninitialized_value_construct_n(_Dest, _Count, _Getal());

	pop	edi
	pop	esi

; 1636 :     }

	ret	12					; 0000000cH
?_Ufill@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU34@IU_Value_init_tag@2@@Z ENDP ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::_Ufill
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Orphan_range@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z
_TEXT	SEGMENT
___formal$dead$ = 8					; size = 4
___formal$dead$ = 12					; size = 4
?_Orphan_range@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z PROC ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::_Orphan_range, COMDAT
; _this$dead$ = ecx

; 1801 :     _CONSTEXPR20_CONTAINER void _Orphan_range(pointer, pointer) const {}

	ret	8
?_Orphan_range@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ENDP ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Ufill@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU34@IU_Value_init_tag@2@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Count$ = 12						; size = 4
___formal$ = 16						; size = 1
?_Ufill@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU34@IU_Value_init_tag@2@@Z PROC ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::_Ufill, COMDAT
; _this$dead$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	mov	eax, DWORD PTR __Count$[esp-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1633 :     _CONSTEXPR20_CONTAINER pointer _Ufill(pointer _Dest, const size_type _Count, _Value_init_tag) {

	push	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	mov	esi, DWORD PTR __Dest$[esp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1633 :     _CONSTEXPR20_CONTAINER pointer _Ufill(pointer _Dest, const size_type _Count, _Value_init_tag) {

	push	edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	lea	edi, DWORD PTR [eax*4]

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	push	edi
	push	0
	push	esi
	call	_memset
	add	esp, 12					; 0000000cH

; 1808 :             return _First + _Count;

	lea	eax, DWORD PTR [edi+esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1635 :         return _Uninitialized_value_construct_n(_Dest, _Count, _Getal());

	pop	edi
	pop	esi

; 1636 :     }

	ret	12					; 0000000cH
?_Ufill@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU34@IU_Value_init_tag@2@@Z ENDP ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::_Ufill
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Make_iterator_offset@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@I@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Offset$ = 12						; size = 4
?_Make_iterator_offset@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@I@Z PROC ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Make_iterator_offset, COMDAT
; _this$ = ecx

; 1817 :         // return the iterator begin() + _Offset without a debugging check
; 1818 :         auto& _My_data = _Mypair._Myval2;
; 1819 :         return iterator(_My_data._Myfirst + _Offset, _STD addressof(_My_data));

	mov	eax, DWORD PTR __Offset$[esp-4]
	mov	ecx, DWORD PTR [ecx]
	lea	ecx, DWORD PTR [ecx+eax*4]

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	DWORD PTR [eax], ecx

; 1820 :     }

	ret	8
?_Make_iterator_offset@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@2@I@Z ENDP ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Make_iterator_offset
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Xlength@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@CAXXZ PROC ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Xlength, COMDAT

; 1761 :         _Xlength_error("vector too long");

	push	OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN3@Xlength:
	int	3
?_Xlength@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@CAXXZ ENDP ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Change_array@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXQAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@II@Z
_TEXT	SEGMENT
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXQAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@II@Z PROC ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Change_array, COMDAT
; _this$ = ecx

; 1723 :         const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

	push	esi
	mov	esi, ecx

; 1724 :         // orphan all iterators, discard old array, acquire new array
; 1725 :         auto& _My_data    = _Mypair._Myval2;
; 1726 :         pointer& _Myfirst = _My_data._Myfirst;
; 1727 :         pointer& _Mylast  = _My_data._Mylast;
; 1728 :         pointer& _Myend   = _My_data._Myend;
; 1729 : 
; 1730 :         _My_data._Orphan_all();
; 1731 : 
; 1732 :         if (_Myfirst) { // destroy and deallocate old array

	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN2@Change_arr
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h

; 35   : 								void					deallocate		(pointer p, size_type n) const			{	dlfree	(p);				}

	call	_dlfree
$LN2@Change_arr:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1737 :         _Myfirst = _Newvec;

	mov	ecx, DWORD PTR __Newvec$[esp]

; 1738 :         _Mylast  = _Newvec + _Newsize;

	mov	eax, DWORD PTR __Newsize$[esp]
	mov	DWORD PTR [esi], ecx
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [esi+4], eax

; 1739 :         _Myend   = _Newvec + _Newcapacity;

	mov	eax, DWORD PTR __Newcapacity$[esp]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [esi+8], eax
	pop	esi

; 1740 :     }

	ret	12					; 0000000cH
?_Change_array@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXQAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@II@Z ENDP ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Calculate_growth@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEII@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Calculate_growth@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEII@Z PROC ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	edx, DWORD PTR [ecx+8]
	sub	edx, DWORD PTR [ecx]

; 1671 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1672 :         const size_type _Oldcapacity = capacity();
; 1673 :         const auto _Max              = max_size();
; 1674 : 
; 1675 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	mov	ecx, 1073741823				; 3fffffffH

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	sar	edx, 2

; 1670 :     _CONSTEXPR20_CONTAINER size_type _Calculate_growth(const size_type _Newsize) const {

	push	esi

; 1671 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1672 :         const size_type _Oldcapacity = capacity();
; 1673 :         const auto _Max              = max_size();
; 1674 : 
; 1675 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	mov	esi, edx
	shr	esi, 1
	sub	ecx, esi
	cmp	edx, ecx
	jbe	SHORT $LN2@Calculate_

; 1676 :             return _Max; // geometric growth would overflow

	mov	eax, 1073741823				; 3fffffffH
	pop	esi

; 1682 :             return _Newsize; // geometric growth would be insufficient
; 1683 :         }
; 1684 : 
; 1685 :         return _Geometric; // geometric growth is sufficient
; 1686 :     }

	ret	4
$LN2@Calculate_:

; 1677 :         }
; 1678 : 
; 1679 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	lea	eax, DWORD PTR [esi+edx]

; 1680 : 
; 1681 :         if (_Geometric < _Newsize) {

	cmp	eax, DWORD PTR __Newsize$[esp]
	pop	esi
	cmovb	eax, DWORD PTR __Newsize$[esp-4]

; 1682 :             return _Newsize; // geometric growth would be insufficient
; 1683 :         }
; 1684 : 
; 1685 :         return _Geometric; // geometric growth is sufficient
; 1686 :     }

	ret	4
?_Calculate_growth@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEII@Z ENDP ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Umove_if_noexcept@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove_if_noexcept@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@00@Z PROC ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Umove_if_noexcept, COMDAT
; _this$dead$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1703 :     auto _UFirst      = _Get_unwrapped(_First);

	mov	eax, DWORD PTR __First$[esp-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1659 :     _CONSTEXPR20_CONTAINER void _Umove_if_noexcept(pointer _First, pointer _Last, pointer _Dest) {

	push	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	mov	esi, DWORD PTR __Last$[esp]
	cmp	eax, esi
	je	SHORT $LN7@Umove_if_n

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	edx, DWORD PTR __Dest$[esp]
	sub	edx, eax
$LL8@Umove_if_n:

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx+eax], ecx

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	add	eax, 4
	cmp	eax, esi
	jne	SHORT $LL8@Umove_if_n
$LN7@Umove_if_n:
	pop	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1663 :     }

	ret	12					; 0000000cH
?_Umove_if_noexcept@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@00@Z ENDP ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Umove_if_noexcept
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Umove@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU34@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU34@00@Z PROC ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Umove, COMDAT
; _this$dead$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	mov	ecx, DWORD PTR __First$[esp-4]

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	eax, DWORD PTR __Dest$[esp-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1644 :     _CONSTEXPR20_CONTAINER pointer _Umove(pointer _First, pointer _Last, pointer _Dest) {

	push	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	mov	esi, DWORD PTR __Last$[esp]
	cmp	ecx, esi
	je	SHORT $LN5@Umove
$LL6@Umove:

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	edx, DWORD PTR [ecx]

; 1621 :         ++_Last;

	add	ecx, 4
	mov	DWORD PTR [eax], edx
	add	eax, 4

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	cmp	ecx, esi
	jne	SHORT $LL6@Umove
$LN5@Umove:
	pop	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1647 :     }

	ret	12					; 0000000cH
?_Umove@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU34@00@Z ENDP ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Umove
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Ufill@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU34@IU_Value_init_tag@2@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Count$ = 12						; size = 4
___formal$ = 16						; size = 1
?_Ufill@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU34@IU_Value_init_tag@2@@Z PROC ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Ufill, COMDAT
; _this$dead$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	mov	eax, DWORD PTR __Count$[esp-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1633 :     _CONSTEXPR20_CONTAINER pointer _Ufill(pointer _Dest, const size_type _Count, _Value_init_tag) {

	push	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	mov	esi, DWORD PTR __Dest$[esp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1633 :     _CONSTEXPR20_CONTAINER pointer _Ufill(pointer _Dest, const size_type _Count, _Value_init_tag) {

	push	edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	lea	edi, DWORD PTR [eax*4]

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	push	edi
	push	0
	push	esi
	call	_memset
	add	esp, 12					; 0000000cH

; 1808 :             return _First + _Count;

	lea	eax, DWORD PTR [edi+esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1635 :         return _Uninitialized_value_construct_n(_Dest, _Count, _Getal());

	pop	edi
	pop	esi

; 1636 :     }

	ret	12					; 0000000cH
?_Ufill@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU34@IU_Value_init_tag@2@@Z ENDP ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Ufill
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?max_size@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ PROC ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::max_size, COMDAT
; _this$dead$ = ecx

; 1540 :         return (_STD min)(

	mov	eax, 1073741823				; 3fffffffH

; 1541 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1542 :     }

	ret	0
?max_size@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ ENDP ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
;	COMDAT ?construct@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@ABQAU23@@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
__Val$ = 12						; size = 4
?construct@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@ABQAU23@@Z PROC ; doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *>::construct, COMDAT
; _this$dead$ = ecx

; 37   : 								void					construct		(pointer p, const T& _Val)				{	::new((void*)p) value_type (_Val); }

	mov	eax, DWORD PTR __Val$[esp-4]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR _p$[esp-4]
	mov	DWORD PTR [eax], ecx
	ret	8
?construct@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@ABQAU23@@Z ENDP ; doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *>::construct
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
;	COMDAT ?allocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@IPBX@Z
_TEXT	SEGMENT
_n$ = 8							; size = 4
_p$dead$ = 12						; size = 4
?allocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@IPBX@Z PROC ; doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *>::allocate, COMDAT
; _this$dead$ = ecx

; 33   : 								pointer					allocate		(size_type n, const void* p=0) const	{	return (T*)dlmalloc(sizeof(T)*(u32)n);	}

	mov	eax, DWORD PTR _n$[esp-4]
	lea	ecx, DWORD PTR [eax*4]
	call	_dlmalloc
	ret	8
?allocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@IPBX@Z ENDP ; doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Orphan_range@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@Z
_TEXT	SEGMENT
___formal$dead$ = 8					; size = 4
___formal$dead$ = 12					; size = 4
?_Orphan_range@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@Z PROC ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::_Orphan_range, COMDAT
; _this$dead$ = ecx

; 1801 :     _CONSTEXPR20_CONTAINER void _Orphan_range(pointer, pointer) const {}

	ret	8
?_Orphan_range@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ENDP ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Ufill@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU34@IU_Value_init_tag@2@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Count$ = 12						; size = 4
___formal$ = 16						; size = 1
?_Ufill@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU34@IU_Value_init_tag@2@@Z PROC ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::_Ufill, COMDAT
; _this$dead$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	mov	eax, DWORD PTR __Count$[esp-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1633 :     _CONSTEXPR20_CONTAINER pointer _Ufill(pointer _Dest, const size_type _Count, _Value_init_tag) {

	push	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	mov	esi, DWORD PTR __Dest$[esp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1633 :     _CONSTEXPR20_CONTAINER pointer _Ufill(pointer _Dest, const size_type _Count, _Value_init_tag) {

	push	edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	lea	edi, DWORD PTR [eax*4]

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	push	edi
	push	0
	push	esi
	call	_memset
	add	esp, 12					; 0000000cH

; 1808 :             return _First + _Count;

	lea	eax, DWORD PTR [edi+esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1635 :         return _Uninitialized_value_construct_n(_Dest, _Count, _Getal());

	pop	edi
	pop	esi

; 1636 :     }

	ret	12					; 0000000cH
?_Ufill@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU34@IU_Value_init_tag@2@@Z ENDP ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::_Ufill
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Orphan_range@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@0@Z
_TEXT	SEGMENT
___formal$dead$ = 8					; size = 4
___formal$dead$ = 12					; size = 4
?_Orphan_range@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@0@Z PROC ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::_Orphan_range, COMDAT
; _this$dead$ = ecx

; 1801 :     _CONSTEXPR20_CONTAINER void _Orphan_range(pointer, pointer) const {}

	ret	8
?_Orphan_range@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ENDP ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Ufill@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU34@IU_Value_init_tag@2@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Count$ = 12						; size = 4
___formal$ = 16						; size = 1
?_Ufill@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU34@IU_Value_init_tag@2@@Z PROC ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::_Ufill, COMDAT
; _this$dead$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	mov	eax, DWORD PTR __Count$[esp-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1633 :     _CONSTEXPR20_CONTAINER pointer _Ufill(pointer _Dest, const size_type _Count, _Value_init_tag) {

	push	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	mov	esi, DWORD PTR __Dest$[esp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1633 :     _CONSTEXPR20_CONTAINER pointer _Ufill(pointer _Dest, const size_type _Count, _Value_init_tag) {

	push	edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	lea	edi, DWORD PTR [eax*4]

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	push	edi
	push	0
	push	esi
	call	_memset
	add	esp, 12					; 0000000cH

; 1808 :             return _First + _Count;

	lea	eax, DWORD PTR [edi+esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1635 :         return _Uninitialized_value_construct_n(_Dest, _Count, _Getal());

	pop	edi
	pop	esi

; 1636 :     }

	ret	12					; 0000000cH
?_Ufill@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU34@IU_Value_init_tag@2@@Z ENDP ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::_Ufill
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Orphan_range@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z
_TEXT	SEGMENT
___formal$dead$ = 8					; size = 4
___formal$dead$ = 12					; size = 4
?_Orphan_range@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z PROC ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::_Orphan_range, COMDAT
; _this$dead$ = ecx

; 1801 :     _CONSTEXPR20_CONTAINER void _Orphan_range(pointer, pointer) const {}

	ret	8
?_Orphan_range@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ENDP ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Ufill@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU34@IU_Value_init_tag@2@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Count$ = 12						; size = 4
___formal$ = 16						; size = 1
?_Ufill@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU34@IU_Value_init_tag@2@@Z PROC ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::_Ufill, COMDAT
; _this$dead$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	mov	eax, DWORD PTR __Count$[esp-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1633 :     _CONSTEXPR20_CONTAINER pointer _Ufill(pointer _Dest, const size_type _Count, _Value_init_tag) {

	push	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	mov	esi, DWORD PTR __Dest$[esp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1633 :     _CONSTEXPR20_CONTAINER pointer _Ufill(pointer _Dest, const size_type _Count, _Value_init_tag) {

	push	edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	lea	edi, DWORD PTR [eax*4]

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	push	edi
	push	0
	push	esi
	call	_memset
	add	esp, 12					; 0000000cH

; 1808 :             return _First + _Count;

	lea	eax, DWORD PTR [edi+esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1635 :         return _Uninitialized_value_construct_n(_Dest, _Count, _Getal());

	pop	edi
	pop	esi

; 1636 :     }

	ret	12					; 0000000cH
?_Ufill@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU34@IU_Value_init_tag@2@@Z ENDP ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::_Ufill
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Orphan_range@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z
_TEXT	SEGMENT
___formal$dead$ = 8					; size = 4
___formal$dead$ = 12					; size = 4
?_Orphan_range@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z PROC ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::_Orphan_range, COMDAT
; _this$dead$ = ecx

; 1801 :     _CONSTEXPR20_CONTAINER void _Orphan_range(pointer, pointer) const {}

	ret	8
?_Orphan_range@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ENDP ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Ufill@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU34@IU_Value_init_tag@2@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Count$ = 12						; size = 4
___formal$ = 16						; size = 1
?_Ufill@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU34@IU_Value_init_tag@2@@Z PROC ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::_Ufill, COMDAT
; _this$dead$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	mov	eax, DWORD PTR __Count$[esp-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1633 :     _CONSTEXPR20_CONTAINER pointer _Ufill(pointer _Dest, const size_type _Count, _Value_init_tag) {

	push	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	mov	esi, DWORD PTR __Dest$[esp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1633 :     _CONSTEXPR20_CONTAINER pointer _Ufill(pointer _Dest, const size_type _Count, _Value_init_tag) {

	push	edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	lea	edi, DWORD PTR [eax*4]

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	push	edi
	push	0
	push	esi
	call	_memset
	add	esp, 12					; 0000000cH

; 1808 :             return _First + _Count;

	lea	eax, DWORD PTR [edi+esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1635 :         return _Uninitialized_value_construct_n(_Dest, _Count, _Getal());

	pop	edi
	pop	esi

; 1636 :     }

	ret	12					; 0000000cH
?_Ufill@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU34@IU_Value_init_tag@2@@Z ENDP ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::_Ufill
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Getal@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@ABEABV?$doug_lea_alloc@PAVIRender_Visual@@@@XZ
_TEXT	SEGMENT
?_Getal@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@ABEABV?$doug_lea_alloc@PAVIRender_Visual@@@@XZ PROC ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::_Getal, COMDAT
; _this$ = ecx

; 1809 :         return _Mypair._Get_first();

	mov	eax, ecx

; 1810 :     }

	ret	0
?_Getal@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@ABEABV?$doug_lea_alloc@PAVIRender_Visual@@@@XZ ENDP ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Umove_if_noexcept1@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@AAEXPAPAVIRender_Visual@@00U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
?_Umove_if_noexcept1@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@AAEXPAPAVIRender_Visual@@00U?$integral_constant@_N$00@2@@Z PROC ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::_Umove_if_noexcept1, COMDAT
; _this$dead$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1703 :     auto _UFirst      = _Get_unwrapped(_First);

	mov	eax, DWORD PTR __First$[esp-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1649 :     _CONSTEXPR20_CONTAINER void _Umove_if_noexcept1(pointer _First, pointer _Last, pointer _Dest, true_type) {

	push	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	mov	esi, DWORD PTR __Last$[esp]
	cmp	eax, esi
	je	SHORT $LN5@Umove_if_n

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	edx, DWORD PTR __Dest$[esp]
	sub	edx, eax
$LL6@Umove_if_n:

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx+eax], ecx

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	add	eax, 4
	cmp	eax, esi
	jne	SHORT $LL6@Umove_if_n
$LN5@Umove_if_n:
	pop	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1652 :     }

	ret	16					; 00000010H
?_Umove_if_noexcept1@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@AAEXPAPAVIRender_Visual@@00U?$integral_constant@_N$00@2@@Z ENDP ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::_Umove_if_noexcept1
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?capacity@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QBEIXZ PROC ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::capacity, COMDAT
; _this$ = ecx

; 1545 :         auto& _My_data = _Mypair._Myval2;
; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2

; 1547 :     }

	ret	0
?capacity@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QBEIXZ ENDP ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?max_size@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@SAIABV?$doug_lea_alloc@PAVIRender_Visual@@@@@Z
_TEXT	SEGMENT
?max_size@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@SAIABV?$doug_lea_alloc@PAVIRender_Visual@@@@@Z PROC ; std::_Normal_allocator_traits<doug_lea_alloc<IRender_Visual *> >::max_size, COMDAT
; __Al$dead$ = ecx

; 591  :         if constexpr (_Has_max_size<_Alloc>::value) {
; 592  :             return _Al.max_size();

	mov	eax, 1073741823				; 3fffffffH

; 593  :         } else {
; 594  :             return (numeric_limits<size_type>::max)() / sizeof(value_type);
; 595  :         }
; 596  :     }

	ret	0
?max_size@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@SAIABV?$doug_lea_alloc@PAVIRender_Visual@@@@@Z ENDP ; std::_Normal_allocator_traits<doug_lea_alloc<IRender_Visual *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Getal@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ
_TEXT	SEGMENT
?_Getal@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ PROC ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Getal, COMDAT
; _this$ = ecx

; 1809 :         return _Mypair._Get_first();

	mov	eax, ecx

; 1810 :     }

	ret	0
?_Getal@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ENDP ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Umove_if_noexcept1@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@00U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
?_Umove_if_noexcept1@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@00U?$integral_constant@_N$00@2@@Z PROC ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Umove_if_noexcept1, COMDAT
; _this$dead$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1703 :     auto _UFirst      = _Get_unwrapped(_First);

	mov	eax, DWORD PTR __First$[esp-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1649 :     _CONSTEXPR20_CONTAINER void _Umove_if_noexcept1(pointer _First, pointer _Last, pointer _Dest, true_type) {

	push	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	mov	esi, DWORD PTR __Last$[esp]
	cmp	eax, esi
	je	SHORT $LN5@Umove_if_n

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	edx, DWORD PTR __Dest$[esp]
	sub	edx, eax
$LL6@Umove_if_n:

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx+eax], ecx

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	add	eax, 4
	cmp	eax, esi
	jne	SHORT $LL6@Umove_if_n
$LN5@Umove_if_n:
	pop	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1652 :     }

	ret	16					; 00000010H
?_Umove_if_noexcept1@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@00U?$integral_constant@_N$00@2@@Z ENDP ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Umove_if_noexcept1
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?capacity@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ PROC ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::capacity, COMDAT
; _this$ = ecx

; 1545 :         auto& _My_data = _Mypair._Myval2;
; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2

; 1547 :     }

	ret	0
?capacity@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ ENDP ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?max_size@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAIABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z
_TEXT	SEGMENT
?max_size@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAIABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z PROC ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::max_size, COMDAT
; __Al$dead$ = ecx

; 591  :         if constexpr (_Has_max_size<_Alloc>::value) {
; 592  :             return _Al.max_size();

	mov	eax, 1073741823				; 3fffffffH

; 593  :         } else {
; 594  :             return (numeric_limits<size_type>::max)() / sizeof(value_type);
; 595  :         }
; 596  :     }

	ret	0
?max_size@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAIABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ENDP ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Getal@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ
_TEXT	SEGMENT
?_Getal@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ PROC ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Getal, COMDAT
; _this$ = ecx

; 1809 :         return _Mypair._Get_first();

	mov	eax, ecx

; 1810 :     }

	ret	0
?_Getal@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ENDP ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Umove_if_noexcept1@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@00U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
?_Umove_if_noexcept1@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@00U?$integral_constant@_N$00@2@@Z PROC ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Umove_if_noexcept1, COMDAT
; _this$dead$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1703 :     auto _UFirst      = _Get_unwrapped(_First);

	mov	eax, DWORD PTR __First$[esp-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1649 :     _CONSTEXPR20_CONTAINER void _Umove_if_noexcept1(pointer _First, pointer _Last, pointer _Dest, true_type) {

	push	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	mov	esi, DWORD PTR __Last$[esp]
	cmp	eax, esi
	je	SHORT $LN5@Umove_if_n

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	edx, DWORD PTR __Dest$[esp]
	sub	edx, eax
$LL6@Umove_if_n:

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx+eax], ecx

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	add	eax, 4
	cmp	eax, esi
	jne	SHORT $LL6@Umove_if_n
$LN5@Umove_if_n:
	pop	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1652 :     }

	ret	16					; 00000010H
?_Umove_if_noexcept1@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@00U?$integral_constant@_N$00@2@@Z ENDP ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Umove_if_noexcept1
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?capacity@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ PROC ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::capacity, COMDAT
; _this$ = ecx

; 1545 :         auto& _My_data = _Mypair._Myval2;
; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2

; 1547 :     }

	ret	0
?capacity@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ ENDP ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?max_size@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAIABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z
_TEXT	SEGMENT
?max_size@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAIABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z PROC ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::max_size, COMDAT
; __Al$dead$ = ecx

; 591  :         if constexpr (_Has_max_size<_Alloc>::value) {
; 592  :             return _Al.max_size();

	mov	eax, 1073741823				; 3fffffffH

; 593  :         } else {
; 594  :             return (numeric_limits<size_type>::max)() / sizeof(value_type);
; 595  :         }
; 596  :     }

	ret	0
?max_size@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAIABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ENDP ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAVIRender_Visual@@@@V?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@std@@$00@std@@QBEABV?$doug_lea_alloc@PAVIRender_Visual@@@@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAVIRender_Visual@@@@V?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@std@@$00@std@@QBEABV?$doug_lea_alloc@PAVIRender_Visual@@@@XZ PROC ; std::_Compressed_pair<doug_lea_alloc<IRender_Visual *>,std::_Vector_val<std::_Simple_types<IRender_Visual *> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1343 :         return *this;

	mov	eax, ecx

; 1344 :     }

	ret	0
?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAVIRender_Visual@@@@V?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@std@@$00@std@@QBEABV?$doug_lea_alloc@PAVIRender_Visual@@@@XZ ENDP ; std::_Compressed_pair<doug_lea_alloc<IRender_Visual *>,std::_Vector_val<std::_Simple_types<IRender_Visual *> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
;	COMDAT ?max_size@?$doug_lea_alloc@PAVIRender_Visual@@@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$doug_lea_alloc@PAVIRender_Visual@@@@QBEIXZ PROC ; doug_lea_alloc<IRender_Visual *>::max_size, COMDAT
; _this$dead$ = ecx

; 39   : 								size_type				max_size		() const								{	size_type _Count = (size_type)(-1) / sizeof (T);	return (0 < _Count ? _Count : 1);	}

	mov	eax, 1073741823				; 3fffffffH
	ret	0
?max_size@?$doug_lea_alloc@PAVIRender_Visual@@@@QBEIXZ ENDP ; doug_lea_alloc<IRender_Visual *>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QBEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QBEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ PROC ; std::_Compressed_pair<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *>,std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1343 :         return *this;

	mov	eax, ecx

; 1344 :     }

	ret	0
?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QBEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ENDP ; std::_Compressed_pair<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *>,std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
;	COMDAT ?max_size@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEIXZ PROC ; doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *>::max_size, COMDAT
; _this$dead$ = ecx

; 39   : 								size_type				max_size		() const								{	size_type _Count = (size_type)(-1) / sizeof (T);	return (0 < _Count ? _Count : 1);	}

	mov	eax, 1073741823				; 3fffffffH
	ret	0
?max_size@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEIXZ ENDP ; doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QBEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QBEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ PROC ; std::_Compressed_pair<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *>,std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1343 :         return *this;

	mov	eax, ecx

; 1344 :     }

	ret	0
?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QBEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ENDP ; std::_Compressed_pair<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *>,std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
;	COMDAT ?max_size@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEIXZ PROC ; doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *>::max_size, COMDAT
; _this$dead$ = ecx

; 39   : 								size_type				max_size		() const								{	size_type _Count = (size_type)(-1) / sizeof (T);	return (0 < _Count ? _Count : 1);	}

	mov	eax, 1073741823				; 3fffffffH
	ret	0
?max_size@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEIXZ ENDP ; doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_NormalItem@R_dsgraph@@@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_NormalItem@R_dsgraph@@@std@@@std@@@0@0@Z
_TEXT	SEGMENT
??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_NormalItem@R_dsgraph@@@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_NormalItem@R_dsgraph@@@std@@@std@@@0@0@Z PROC ; std::_Adl_verify_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<R_dsgraph::_NormalItem> > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<R_dsgraph::_NormalItem> > > >, COMDAT
; __First$dead$ = ecx
; __Last$dead$ = edx

; 1259 :     // check that [_First, _Last) forms an iterator range
; 1260 :     if constexpr (_Range_verifiable_v<_Iter, _Sentinel>) {
; 1261 :         _Verify_range(_First, _Last);
; 1262 :     }
; 1263 : }

	ret	0
??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_NormalItem@R_dsgraph@@@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_NormalItem@R_dsgraph@@@std@@@std@@@0@0@Z ENDP ; std::_Adl_verify_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<R_dsgraph::_NormalItem> > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<R_dsgraph::_NormalItem> > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Pass_fn@P6A_NABU_NormalItem@R_dsgraph@@0@Z$0A@@std@@YAP6A_NABU_NormalItem@R_dsgraph@@0@ZP6A_N00@Z@Z
_TEXT	SEGMENT
??$_Pass_fn@P6A_NABU_NormalItem@R_dsgraph@@0@Z$0A@@std@@YAP6A_NABU_NormalItem@R_dsgraph@@0@ZP6A_N00@Z@Z PROC ; std::_Pass_fn<bool (__cdecl*)(R_dsgraph::_NormalItem const &,R_dsgraph::_NormalItem const &),0>, COMDAT
; __Val$dead$ = ecx

; 253  :     return _Val;

	mov	eax, OFFSET ?cmp_normal_items@@YA_NABU_NormalItem@R_dsgraph@@0@Z ; cmp_normal_items

; 254  : }

	ret	0
??$_Pass_fn@P6A_NABU_NormalItem@R_dsgraph@@0@Z$0A@@std@@YAP6A_NABU_NormalItem@R_dsgraph@@0@ZP6A_N00@Z@Z ENDP ; std::_Pass_fn<bool (__cdecl*)(R_dsgraph::_NormalItem const &,R_dsgraph::_NormalItem const &),0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Sort_unchecked@PAU_NormalItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_NormalItem@R_dsgraph@@0HP6A_NABU12@1@Z@Z
_TEXT	SEGMENT
tv739 = -32						; size = 4
__Hole$1$ = -32						; size = 4
__Last$1$ = -28						; size = 4
__Max_sequence_non_leaf$1$ = -24			; size = 4
__Mid$1$ = -20						; size = 4
__Bottom$1$ = -20					; size = 4
tv745 = -16						; size = 4
__Val$1 = -16						; size = 8
__Mid$2 = -16						; size = 8
__Val$3 = -8						; size = 8
__Val$4 = -8						; size = 8
__Ideal$ = 8						; size = 4
__Pred$ = 12						; size = 4
??$_Sort_unchecked@PAU_NormalItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_NormalItem@R_dsgraph@@0HP6A_NABU12@1@Z@Z PROC ; std::_Sort_unchecked<R_dsgraph::_NormalItem *,bool (__cdecl*)(R_dsgraph::_NormalItem const &,R_dsgraph::_NormalItem const &)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 7046 : _CONSTEXPR20 void _Sort_unchecked(_RanIt _First, _RanIt _Last, _Iter_diff_t<_RanIt> _Ideal, _Pr _Pred) {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 36					; 00000024H
	push	ebx
	mov	ebx, edx

; 7047 :     // order [_First, _Last)
; 7048 :     for (;;) {
; 7049 :         if (_Last - _First <= _ISORT_MAX) { // small

	mov	edx, DWORD PTR __Pred$[ebp]
	push	esi
	mov	esi, ecx
	mov	DWORD PTR __Last$1$[esp+44], ebx
	mov	eax, ebx
	sub	eax, esi
	and	eax, -8					; fffffff8H
	push	edi
	cmp	eax, 256				; 00000100H
	jle	SHORT $LN165@Sort_unche
	mov	edi, DWORD PTR __Ideal$[ebp]
$LL2@Sort_unche:

; 7050 :             _Insertion_sort_unchecked(_First, _Last, _Pred);
; 7051 :             return;
; 7052 :         }
; 7053 : 
; 7054 :         if (_Ideal <= 0) { // heap sort if too many divisions

	test	edi, edi
	jle	$LN166@Sort_unche

; 7055 :             _Make_heap_unchecked(_First, _Last, _Pred);
; 7056 :             _Sort_heap_unchecked(_First, _Last, _Pred);
; 7057 :             return;
; 7058 :         }
; 7059 : 
; 7060 :         // divide and conquer by quicksort
; 7061 :         auto _Mid = _Partition_by_median_guess_unchecked(_First, _Last, _Pred);

	push	edx
	push	ebx
	mov	edx, esi
	lea	ecx, DWORD PTR __Mid$2[esp+56]
	call	??$_Partition_by_median_guess_unchecked@PAU_NormalItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YA?AU?$pair@PAU_NormalItem@R_dsgraph@@PAU12@@0@PAU_NormalItem@R_dsgraph@@0P6A_NABU23@1@Z@Z ; std::_Partition_by_median_guess_unchecked<R_dsgraph::_NormalItem *,bool (__cdecl*)(R_dsgraph::_NormalItem const &,R_dsgraph::_NormalItem const &)>

; 7062 : 
; 7063 :         _Ideal = (_Ideal >> 1) + (_Ideal >> 2); // allow 1.5 log2(N) divisions
; 7064 : 
; 7065 :         if (_Mid.first - _First < _Last - _Mid.second) { // loop on second half

	mov	edx, DWORD PTR __Mid$2[esp+56]
	mov	eax, edi
	sar	eax, 2
	mov	ecx, ebx
	sub	ecx, DWORD PTR __Mid$2[esp+60]
	add	esp, 8
	sar	edi, 1
	and	ecx, -8					; fffffff8H
	add	edi, eax
	mov	eax, edx
	sub	eax, esi
	and	eax, -8					; fffffff8H
	cmp	eax, ecx
	mov	eax, DWORD PTR __Pred$[ebp]
	push	eax
	push	edi
	jge	SHORT $LN7@Sort_unche

; 7066 :             _Sort_unchecked(_First, _Mid.first, _Ideal, _Pred);

	mov	ecx, esi
	call	??$_Sort_unchecked@PAU_NormalItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_NormalItem@R_dsgraph@@0HP6A_NABU12@1@Z@Z ; std::_Sort_unchecked<R_dsgraph::_NormalItem *,bool (__cdecl*)(R_dsgraph::_NormalItem const &,R_dsgraph::_NormalItem const &)>

; 7067 :             _First = _Mid.second;

	mov	esi, DWORD PTR __Mid$2[esp+60]

; 7068 :         } else { // loop on first half

	jmp	SHORT $LN190@Sort_unche
$LN7@Sort_unche:

; 7069 :             _Sort_unchecked(_Mid.second, _Last, _Ideal, _Pred);

	mov	ecx, DWORD PTR __Mid$2[esp+60]
	mov	edx, ebx
	call	??$_Sort_unchecked@PAU_NormalItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_NormalItem@R_dsgraph@@0HP6A_NABU12@1@Z@Z ; std::_Sort_unchecked<R_dsgraph::_NormalItem *,bool (__cdecl*)(R_dsgraph::_NormalItem const &,R_dsgraph::_NormalItem const &)>

; 7070 :             _Last = _Mid.first;

	mov	ebx, DWORD PTR __Mid$2[esp+56]
	mov	DWORD PTR __Last$1$[esp+56], ebx
$LN190@Sort_unche:

; 7047 :     // order [_First, _Last)
; 7048 :     for (;;) {
; 7049 :         if (_Last - _First <= _ISORT_MAX) { // small

	mov	edx, DWORD PTR __Pred$[ebp]
	mov	eax, ebx
	sub	eax, esi
	add	esp, 8
	and	eax, -8					; fffffff8H
	cmp	eax, 256				; 00000100H
	jg	SHORT $LL2@Sort_unche
$LN165@Sort_unche:

; 6921 :     if (_First != _Last) {

	cmp	esi, ebx
	je	$LN45@Sort_unche

; 6922 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

	lea	edi, DWORD PTR [esi+8]
	mov	DWORD PTR __Mid$1$[esp+48], edi
	cmp	edi, ebx
	je	$LN45@Sort_unche
	mov	DWORD PTR tv739[esp+48], esi
$LL11@Sort_unche:

; 6923 :             _BidIt _Hole               = _Mid;
; 6924 :             _Iter_value_t<_BidIt> _Val = _STD move(*_Mid);

	mov	eax, DWORD PTR [edi]
	mov	ebx, edi
	mov	ecx, DWORD PTR [edi+4]
	mov	DWORD PTR __Val$1[esp+48], eax

; 6925 : 
; 6926 :             if (_DEBUG_LT_PRED(_Pred, _Val, *_First)) { // found new earliest element, move to front

	lea	eax, DWORD PTR __Val$1[esp+48]
	push	esi
	push	eax
	mov	DWORD PTR __Val$1[esp+60], ecx
	call	edx
	add	esp, 8
	test	al, al
	je	$LN18@Sort_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4254 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	mov	ecx, edi

; 4255 :     auto _Result                = _CSTD memmove(_Dest_ch - _Count, _First_ch, _Count);

	mov	eax, edi
	sub	ecx, esi
	push	ecx
	sub	eax, ecx
	add	eax, 8
	push	esi
	push	eax
	call	_memmove
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6928 :                 *_First = _STD move(_Val);

	mov	eax, DWORD PTR __Val$1[esp+60]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4255 :     auto _Result                = _CSTD memmove(_Dest_ch - _Count, _First_ch, _Count);

	add	esp, 12					; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6928 :                 *_First = _STD move(_Val);

	mov	ecx, DWORD PTR __Val$1[esp+52]
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], ecx

; 6929 :             } else { // look for insertion point after first

	jmp	$LN19@Sort_unche
$LN166@Sort_unche:

; 5547 :     _Diff _Bottom = _Last - _First;

	sub	ebx, esi
	mov	eax, ebx
	mov	DWORD PTR __Last$1$[esp+48], ebx
	sar	eax, 3

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	mov	edi, eax
	mov	DWORD PTR __Bottom$1$[esp+48], eax
	sar	edi, 1
	test	edi, edi
	jle	$LN29@Sort_unche
	dec	eax
	mov	DWORD PTR tv745[esp+48], eax
	sar	eax, 1
	mov	DWORD PTR __Max_sequence_non_leaf$1$[esp+48], eax
$LL28@Sort_unche:

; 5551 :         _Iter_value_t<_RanIt> _Val = _STD move(*(_First + _Hole));

	mov	eax, DWORD PTR [esi+edi*8-8]
	dec	edi
	mov	DWORD PTR __Val$4[esp+48], eax

; 5552 :         _Pop_heap_hole_by_index(_First, _Hole, _Bottom, _STD move(_Val), _Pred);

	mov	ebx, edi

; 5386 :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

	mov	eax, DWORD PTR __Max_sequence_non_leaf$1$[esp+48]

; 5550 :         --_Hole;

	mov	DWORD PTR __Hole$1$[esp+48], edi

; 5551 :         _Iter_value_t<_RanIt> _Val = _STD move(*(_First + _Hole));

	mov	ecx, DWORD PTR [esi+edi*8+4]
	mov	DWORD PTR __Val$4[esp+52], ecx

; 5386 :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

	cmp	edi, eax
	jge	SHORT $LN34@Sort_unche
	npad	12
$LL33@Sort_unche:

; 5387 :         _Idx = 2 * _Idx + 2;

	lea	edi, DWORD PTR [edi*2+2]

; 5388 :         if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1)))) {

	lea	ecx, DWORD PTR [esi+edi*8]
	lea	eax, DWORD PTR [ecx-8]
	push	eax
	push	ecx
	call	edx
	add	esp, 8
	test	al, al
	je	SHORT $LN35@Sort_unche

; 5389 :             --_Idx;

	dec	edi
$LN35@Sort_unche:

; 5390 :         }
; 5391 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [esi+edi*8]
	mov	ecx, DWORD PTR [esi+edi*8+4]
	mov	edx, DWORD PTR __Pred$[ebp]
	mov	DWORD PTR [esi+ebx*8], eax
	mov	eax, DWORD PTR __Max_sequence_non_leaf$1$[esp+48]
	mov	DWORD PTR [esi+ebx*8+4], ecx

; 5392 :         _Hole             = _Idx;

	mov	ebx, edi
	cmp	edi, eax
	jl	SHORT $LL33@Sort_unche
$LN34@Sort_unche:

; 5393 :     }
; 5394 : 
; 5395 :     if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it

	cmp	edi, eax
	jne	SHORT $LN36@Sort_unche
	mov	ecx, DWORD PTR __Bottom$1$[esp+48]
	test	cl, 1
	jne	SHORT $LN36@Sort_unche

; 5396 :         *(_First + _Hole) = _STD move(*(_First + (_Bottom - 1)));

	mov	eax, DWORD PTR [esi+ecx*8-8]
	mov	ecx, DWORD PTR [esi+ecx*8-4]
	mov	DWORD PTR [esi+ebx*8], eax
	mov	DWORD PTR [esi+ebx*8+4], ecx

; 5397 :         _Hole             = _Bottom - 1;

	mov	ebx, DWORD PTR tv745[esp+48]
$LN36@Sort_unche:

; 5268 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

	mov	edi, DWORD PTR __Hole$1$[esp+48]
	cmp	edi, ebx
	jge	SHORT $LN188@Sort_unche
	npad	4
$LL41@Sort_unche:

; 5267 :     for (_Diff _Idx = (_Hole - 1) >> 1; // shift for codegen

	lea	edi, DWORD PTR [ebx-1]
	sar	edi, 1

; 5268 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

	lea	ecx, DWORD PTR __Val$4[esp+48]
	push	ecx
	lea	eax, DWORD PTR [esi+edi*8]
	push	eax
	call	edx
	add	esp, 8
	test	al, al
	je	SHORT $LN189@Sort_unche

; 5269 :          _Idx = (_Hole - 1) >> 1) { // shift for codegen
; 5270 :         // move _Hole up to parent
; 5271 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [esi+edi*8]
	mov	ecx, DWORD PTR [esi+edi*8+4]
	mov	edx, DWORD PTR __Pred$[ebp]
	mov	DWORD PTR [esi+ebx*8], eax
	mov	DWORD PTR [esi+ebx*8+4], ecx

; 5272 :         _Hole             = _Idx;

	mov	ebx, edi
	cmp	DWORD PTR __Hole$1$[esp+48], edi
	jl	SHORT $LL41@Sort_unche
$LN189@Sort_unche:
	mov	edi, DWORD PTR __Hole$1$[esp+48]
$LN188@Sort_unche:

; 5273 :     }
; 5274 : 
; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	eax, DWORD PTR __Val$4[esp+48]
	mov	ecx, DWORD PTR __Val$4[esp+52]

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	mov	edx, DWORD PTR __Pred$[ebp]

; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	DWORD PTR [esi+ebx*8], eax
	mov	DWORD PTR [esi+ebx*8+4], ecx

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	test	edi, edi
	jg	$LL28@Sort_unche
	mov	ebx, DWORD PTR __Last$1$[esp+48]
	mov	eax, DWORD PTR __Bottom$1$[esp+48]
$LN29@Sort_unche:

; 5774 :     for (; _Last - _First >= 2; --_Last) {

	cmp	eax, 2
	jl	$LN45@Sort_unche
	npad	1
$LL46@Sort_unche:

; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	eax, DWORD PTR [ebx+esi-8]
	mov	ecx, DWORD PTR [ebx+esi-4]
	mov	DWORD PTR __Val$3[esp+48], eax

; 5408 :     *_Dest      = _STD move(*_First);

	mov	eax, DWORD PTR [esi]

; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	DWORD PTR __Val$3[esp+52], ecx

; 5408 :     *_Dest      = _STD move(*_First);

	mov	ecx, DWORD PTR [esi+4]
	mov	DWORD PTR [ebx+esi-8], eax

; 5409 :     using _Diff = _Iter_diff_t<_RanIt>;
; 5410 :     _Pop_heap_hole_by_index(

	lea	eax, DWORD PTR __Val$3[esp+48]
	push	edx
	push	eax
	lea	eax, DWORD PTR [ebx-8]
	mov	DWORD PTR [ebx+esi-4], ecx
	sar	eax, 3
	xor	edx, edx
	push	eax
	mov	ecx, esi
	call	??$_Pop_heap_hole_by_index@PAU_NormalItem@R_dsgraph@@U12@P6A_NABU12@0@Z@std@@YAXPAU_NormalItem@R_dsgraph@@HH$$QAU12@P6A_NABU12@2@Z@Z ; std::_Pop_heap_hole_by_index<R_dsgraph::_NormalItem *,R_dsgraph::_NormalItem,bool (__cdecl*)(R_dsgraph::_NormalItem const &,R_dsgraph::_NormalItem const &)>

; 5774 :     for (; _Last - _First >= 2; --_Last) {

	mov	edx, DWORD PTR __Pred$[ebp]
	sub	ebx, 8
	mov	eax, ebx

; 5410 :     _Pop_heap_hole_by_index(

	add	esp, 12					; 0000000cH

; 5774 :     for (; _Last - _First >= 2; --_Last) {

	and	eax, -8					; fffffff8H
	cmp	eax, 16					; 00000010H
	jge	SHORT $LL46@Sort_unche

; 7071 :         }
; 7072 :     }
; 7073 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN18@Sort_unche:

; 6930 :                 for (_BidIt _Prev = _Hole; _DEBUG_LT_PRED(_Pred, _Val, *--_Prev); _Hole = _Prev) {

	mov	eax, DWORD PTR tv739[esp+48]
	mov	edi, eax
	push	eax
	lea	eax, DWORD PTR __Val$1[esp+52]
	push	eax
	mov	eax, DWORD PTR __Pred$[ebp]
	call	eax
	add	esp, 8
	test	al, al
	je	SHORT $LN15@Sort_unche
$LL16@Sort_unche:

; 6931 :                     *_Hole = _STD move(*_Prev); // move hole down

	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [edi+4]
	mov	DWORD PTR [ebx], eax
	lea	eax, DWORD PTR __Val$1[esp+48]
	mov	DWORD PTR [ebx+4], ecx
	mov	ebx, edi
	sub	edi, 8
	push	edi
	push	eax
	call	DWORD PTR __Pred$[ebp]
	add	esp, 8
	test	al, al
	jne	SHORT $LL16@Sort_unche
$LN15@Sort_unche:

; 6932 :                 }
; 6933 : 
; 6934 :                 *_Hole = _STD move(_Val); // insert element in hole

	mov	eax, DWORD PTR __Val$1[esp+48]
	mov	ecx, DWORD PTR __Val$1[esp+52]
	mov	edi, DWORD PTR __Mid$1$[esp+48]
	mov	DWORD PTR [ebx], eax
	mov	DWORD PTR [ebx+4], ecx
$LN19@Sort_unche:

; 6922 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

	add	DWORD PTR tv739[esp+48], 8
	add	edi, 8
	mov	edx, DWORD PTR __Pred$[ebp]
	mov	DWORD PTR __Mid$1$[esp+48], edi
	cmp	edi, DWORD PTR __Last$1$[esp+48]
	jne	$LL11@Sort_unche
$LN45@Sort_unche:

; 7071 :         }
; 7072 :     }
; 7073 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Sort_unchecked@PAU_NormalItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_NormalItem@R_dsgraph@@0HP6A_NABU12@1@Z@Z ENDP ; std::_Sort_unchecked<R_dsgraph::_NormalItem *,bool (__cdecl*)(R_dsgraph::_NormalItem const &,R_dsgraph::_NormalItem const &)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_MatrixItem@R_dsgraph@@@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_MatrixItem@R_dsgraph@@@std@@@std@@@0@0@Z
_TEXT	SEGMENT
??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_MatrixItem@R_dsgraph@@@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_MatrixItem@R_dsgraph@@@std@@@std@@@0@0@Z PROC ; std::_Adl_verify_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<R_dsgraph::_MatrixItem> > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<R_dsgraph::_MatrixItem> > > >, COMDAT
; __First$dead$ = ecx
; __Last$dead$ = edx

; 1259 :     // check that [_First, _Last) forms an iterator range
; 1260 :     if constexpr (_Range_verifiable_v<_Iter, _Sentinel>) {
; 1261 :         _Verify_range(_First, _Last);
; 1262 :     }
; 1263 : }

	ret	0
??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_MatrixItem@R_dsgraph@@@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_MatrixItem@R_dsgraph@@@std@@@std@@@0@0@Z ENDP ; std::_Adl_verify_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<R_dsgraph::_MatrixItem> > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<R_dsgraph::_MatrixItem> > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Pass_fn@P6A_NABU_MatrixItem@R_dsgraph@@0@Z$0A@@std@@YAP6A_NABU_MatrixItem@R_dsgraph@@0@ZP6A_N00@Z@Z
_TEXT	SEGMENT
??$_Pass_fn@P6A_NABU_MatrixItem@R_dsgraph@@0@Z$0A@@std@@YAP6A_NABU_MatrixItem@R_dsgraph@@0@ZP6A_N00@Z@Z PROC ; std::_Pass_fn<bool (__cdecl*)(R_dsgraph::_MatrixItem const &,R_dsgraph::_MatrixItem const &),0>, COMDAT
; __Val$dead$ = ecx

; 253  :     return _Val;

	mov	eax, OFFSET ?cmp_matrix_items@@YA_NABU_MatrixItem@R_dsgraph@@0@Z ; cmp_matrix_items

; 254  : }

	ret	0
??$_Pass_fn@P6A_NABU_MatrixItem@R_dsgraph@@0@Z$0A@@std@@YAP6A_NABU_MatrixItem@R_dsgraph@@0@ZP6A_N00@Z@Z ENDP ; std::_Pass_fn<bool (__cdecl*)(R_dsgraph::_MatrixItem const &,R_dsgraph::_MatrixItem const &),0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Sort_unchecked@PAU_MatrixItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_MatrixItem@R_dsgraph@@0HP6A_NABU12@1@Z@Z
_TEXT	SEGMENT
__Last$1$ = -116					; size = 4
__Mid$1$ = -112						; size = 4
__Hole$1$ = -112					; size = 4
tv729 = -108						; size = 4
__Hole$1$ = -108					; size = 4
__Max_sequence_non_leaf$1$ = -108			; size = 4
tv722 = -104						; size = 4
__Idx$1$ = -104						; size = 4
__Idx$1$ = -104						; size = 4
__Bottom$1$ = -100					; size = 4
__First$1$ = -100					; size = 4
tv732 = -96						; size = 4
tv721 = -92						; size = 4
$T1 = -88						; size = 4
__Prev$1$ = -88						; size = 4
__Mid$2 = -88						; size = 8
__Val$3 = -80						; size = 76
__Val$4 = -80						; size = 76
__Val$5 = -80						; size = 76
__Ideal$ = 8						; size = 4
__Pred$ = 12						; size = 4
??$_Sort_unchecked@PAU_MatrixItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_MatrixItem@R_dsgraph@@0HP6A_NABU12@1@Z@Z PROC ; std::_Sort_unchecked<R_dsgraph::_MatrixItem *,bool (__cdecl*)(R_dsgraph::_MatrixItem const &,R_dsgraph::_MatrixItem const &)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 7046 : _CONSTEXPR20 void _Sort_unchecked(_RanIt _First, _RanIt _Last, _Iter_diff_t<_RanIt> _Ideal, _Pr _Pred) {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 116				; 00000074H
	push	ebx
	push	esi
	push	edi
	mov	edi, edx
	mov	ebx, ecx

; 7047 :     // order [_First, _Last)
; 7048 :     for (;;) {
; 7049 :         if (_Last - _First <= _ISORT_MAX) { // small

	mov	edx, DWORD PTR __Pred$[ebp]
	mov	eax, edi
	sub	eax, ebx
	mov	DWORD PTR __Last$1$[esp+128], edi
	mov	DWORD PTR __First$1$[esp+128], ebx
	cmp	eax, 2508				; 000009ccH
	jl	$LN165@Sort_unche
	mov	esi, DWORD PTR __Ideal$[ebp]
	npad	3
$LL2@Sort_unche:

; 7050 :             _Insertion_sort_unchecked(_First, _Last, _Pred);
; 7051 :             return;
; 7052 :         }
; 7053 : 
; 7054 :         if (_Ideal <= 0) { // heap sort if too many divisions

	test	esi, esi
	jle	$LN166@Sort_unche

; 7057 :             return;
; 7058 :         }
; 7059 : 
; 7060 :         // divide and conquer by quicksort
; 7061 :         auto _Mid = _Partition_by_median_guess_unchecked(_First, _Last, _Pred);

	push	edx
	push	edi
	mov	edx, ebx
	lea	ecx, DWORD PTR __Mid$2[esp+136]
	call	??$_Partition_by_median_guess_unchecked@PAU_MatrixItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YA?AU?$pair@PAU_MatrixItem@R_dsgraph@@PAU12@@0@PAU_MatrixItem@R_dsgraph@@0P6A_NABU23@1@Z@Z ; std::_Partition_by_median_guess_unchecked<R_dsgraph::_MatrixItem *,bool (__cdecl*)(R_dsgraph::_MatrixItem const &,R_dsgraph::_MatrixItem const &)>

; 7062 : 
; 7063 :         _Ideal = (_Ideal >> 1) + (_Ideal >> 2); // allow 1.5 log2(N) divisions
; 7064 : 
; 7065 :         if (_Mid.first - _First < _Last - _Mid.second) { // loop on second half

	mov	edx, DWORD PTR __Mid$2[esp+136]
	mov	eax, esi
	sar	eax, 2
	add	esp, 8
	sar	esi, 1
	add	esi, eax
	mov	eax, edi
	mov	edi, DWORD PTR __Mid$2[esp+132]
	sub	eax, edi
	sar	eax, 2
	imul	ecx, eax, 678152731
	mov	eax, edx
	sub	eax, ebx
	sar	eax, 2
	imul	eax, eax, 678152731
	cmp	eax, ecx
	mov	eax, DWORD PTR __Pred$[ebp]
	push	eax
	push	esi
	jge	SHORT $LN7@Sort_unche

; 7066 :             _Sort_unchecked(_First, _Mid.first, _Ideal, _Pred);

	mov	ecx, ebx
	call	??$_Sort_unchecked@PAU_MatrixItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_MatrixItem@R_dsgraph@@0HP6A_NABU12@1@Z@Z ; std::_Sort_unchecked<R_dsgraph::_MatrixItem *,bool (__cdecl*)(R_dsgraph::_MatrixItem const &,R_dsgraph::_MatrixItem const &)>

; 7067 :             _First = _Mid.second;

	mov	ebx, edi

; 7068 :         } else { // loop on first half

	mov	edi, DWORD PTR __Last$1$[esp+136]
	mov	DWORD PTR __First$1$[esp+136], ebx
	jmp	SHORT $LN189@Sort_unche
$LN7@Sort_unche:

; 7069 :             _Sort_unchecked(_Mid.second, _Last, _Ideal, _Pred);

	mov	edx, DWORD PTR __Last$1$[esp+136]
	mov	ecx, edi
	call	??$_Sort_unchecked@PAU_MatrixItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_MatrixItem@R_dsgraph@@0HP6A_NABU12@1@Z@Z ; std::_Sort_unchecked<R_dsgraph::_MatrixItem *,bool (__cdecl*)(R_dsgraph::_MatrixItem const &,R_dsgraph::_MatrixItem const &)>

; 7070 :             _Last = _Mid.first;

	mov	edi, DWORD PTR __Mid$2[esp+136]
	mov	DWORD PTR __Last$1$[esp+136], edi
$LN189@Sort_unche:

; 7047 :     // order [_First, _Last)
; 7048 :     for (;;) {
; 7049 :         if (_Last - _First <= _ISORT_MAX) { // small

	mov	edx, DWORD PTR __Pred$[ebp]
	mov	eax, edi
	sub	eax, ebx
	add	esp, 8
	cmp	eax, 2508				; 000009ccH
	jge	$LL2@Sort_unche
$LN165@Sort_unche:

; 6921 :     if (_First != _Last) {

	cmp	ebx, edi
	je	$LN45@Sort_unche

; 6922 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

	lea	eax, DWORD PTR [ebx+76]
	mov	DWORD PTR __Mid$1$[esp+128], eax
	cmp	eax, edi
	je	$LN45@Sort_unche
	mov	DWORD PTR tv722[esp+128], ebx
$LL11@Sort_unche:

; 6923 :             _BidIt _Hole               = _Mid;
; 6924 :             _Iter_value_t<_BidIt> _Val = _STD move(*_Mid);

	mov	esi, eax
	mov	DWORD PTR __Hole$1$[esp+128], eax

; 6925 : 
; 6926 :             if (_DEBUG_LT_PRED(_Pred, _Val, *_First)) { // found new earliest element, move to front

	lea	eax, DWORD PTR __Val$5[esp+128]
	mov	ecx, 19					; 00000013H
	lea	edi, DWORD PTR __Val$5[esp+128]
	push	ebx
	rep movsd
	push	eax
	call	edx
	add	esp, 8
	test	al, al
	je	$LN18@Sort_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4254 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	mov	eax, DWORD PTR __Mid$1$[esp+128]
	mov	ecx, eax
	sub	ecx, ebx

; 4255 :     auto _Result                = _CSTD memmove(_Dest_ch - _Count, _First_ch, _Count);

	push	ecx
	sub	eax, ecx
	add	eax, 76					; 0000004cH
	push	ebx
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6928 :                 *_First = _STD move(_Val);

	mov	edi, ebx

; 6929 :             } else { // look for insertion point after first

	jmp	$LN190@Sort_unche
$LN166@Sort_unche:

; 5547 :     _Diff _Bottom = _Last - _First;

	mov	esi, edi
	sub	esi, ebx
	mov	eax, esi
	mov	DWORD PTR $T1[esp+128], esi
	sar	eax, 2
	imul	ecx, eax, 678152731

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	mov	eax, ecx
	mov	DWORD PTR __Bottom$1$[esp+128], ecx
	sar	eax, 1
	test	eax, eax
	jle	$LN29@Sort_unche
	dec	ecx

; 5420 :         _Pop_heap_hole_unchecked(_First, _Last, _Last, _STD move(_Val), _Pred);
; 5421 :     }
; 5422 : }
; 5423 : 
; 5424 : template <class _RanIt, class _Pr>
; 5425 : _CONSTEXPR20 void pop_heap(_RanIt _First, _RanIt _Last, _Pr _Pred) {
; 5426 :     // pop *_First to *(_Last - 1) and reheap
; 5427 :     _Adl_verify_range(_First, _Last);
; 5428 :     _Pop_heap_unchecked(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Pass_fn(_Pred));
; 5429 : }
; 5430 : 
; 5431 : template <class _RanIt>
; 5432 : _CONSTEXPR20 void pop_heap(_RanIt _First, _RanIt _Last) {
; 5433 :     // pop *_First to *(_Last - 1) and reheap
; 5434 :     _STD pop_heap(_First, _Last, less<>{});
; 5435 : }
; 5436 : 
; 5437 : #ifdef __cpp_lib_concepts
; 5438 : namespace ranges {
; 5439 :     // clang-format off
; 5440 :     template <random_access_iterator _It, class _Ty, class _Pr, class _Pj1, class _Pj2>
; 5441 :         requires sortable<_It, _Pr, _Pj1> && indirectly_writable<_It, _Ty>
; 5442 :             && indirect_strict_weak_order<_Pr, projected<_It, _Pj1>, projected<remove_reference_t<_Ty>*, _Pj2>>
; 5443 :     constexpr void _Pop_heap_hole_by_index(_It _First, iter_difference_t<_It> _Hole,
; 5444 :         const iter_difference_t<_It> _Bottom, _Ty&& _Val, _Pr _Pred, _Pj1 _Proj1, _Pj2 _Proj2) {
; 5445 :         // clang-format on
; 5446 :         // percolate _Hole to _Bottom, then push _Val
; 5447 :         _STL_INTERNAL_CHECK(_Hole >= 0);
; 5448 :         _STL_INTERNAL_CHECK(_Bottom > 0);
; 5449 : 
; 5450 :         using _Diff      = iter_difference_t<_It>;
; 5451 :         const _Diff _Top = _Hole;
; 5452 :         _Diff _Idx       = _Hole;
; 5453 : 
; 5454 :         // Check whether _Idx can have a child before calculating that child's index, since
; 5455 :         // calculating the child's index can trigger integer overflows
; 5456 :         const _Diff _Max_sequence_non_leaf = (_Bottom - 1) >> 1; // shift for codegen
; 5457 :         while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child
; 5458 :             _Idx      = 2 * _Idx + 2;
; 5459 :             auto _Mid = _First + _Idx;
; 5460 :             if (_STD invoke(_Pred, _STD invoke(_Proj1, *_Mid), _STD invoke(_Proj1, *_RANGES prev(_Mid)))) {
; 5461 :                 --_Idx;
; 5462 :                 --_Mid;
; 5463 :             }
; 5464 :             *(_First + _Hole) = _RANGES iter_move(_Mid);
; 5465 :             _Hole             = _Idx;
; 5466 :         }
; 5467 : 
; 5468 :         if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it
; 5469 :             *(_First + _Hole) = _RANGES iter_move(_First + (_Bottom - 1));
; 5470 :             _Hole             = _Bottom - 1;
; 5471 :         }
; 5472 : 
; 5473 :         _RANGES _Push_heap_by_index(_STD move(_First), _Hole, _Top, _STD forward<_Ty>(_Val), _Pred, _Proj1, _Proj2);
; 5474 :     }
; 5475 : 
; 5476 :     // clang-format off
; 5477 :     template <random_access_iterator _It, class _Ty, class _Pr, class _Pj1, class _Pj2>
; 5478 :         requires sortable<_It, _Pr, _Pj1> && indirectly_writable<_It, _Ty>
; 5479 :             && indirect_strict_weak_order<_Pr, projected<_It, _Pj1>, projected<remove_reference_t<_Ty>*, _Pj2>>
; 5480 :     constexpr void _Pop_heap_hole_unchecked(
; 5481 :         _It _First, const _It _Last, const _It _Dest, _Ty&& _Val, _Pr _Pred, _Pj1 _Proj1, _Pj2 _Proj2) {
; 5482 :         // clang-format on
; 5483 :         // pop *_First to *_Dest and reheap
; 5484 :         _STL_INTERNAL_CHECK(_First != _Last);
; 5485 :         _STL_INTERNAL_CHECK(_First != _Dest);
; 5486 : 
; 5487 :         *_Dest            = _RANGES iter_move(_First);
; 5488 :         const auto _Count = _Last - _First;
; 5489 :         _RANGES _Pop_heap_hole_by_index(_STD move(_First), 0, _Count, _STD forward<_Ty>(_Val), _Pred, _Proj1, _Proj2);
; 5490 :     }
; 5491 : 
; 5492 :     // clang-format off
; 5493 :     template <random_access_iterator _It, class _Pr, class _Pj>
; 5494 :         requires sortable<_It, _Pr, _Pj>
; 5495 :     constexpr void _Pop_heap_unchecked(_It _First, _It _Last, _Pr _Pred, _Pj _Proj) {
; 5496 :         // clang-format on
; 5497 :         // pop *_First to *(_Last - 1) and reheap
; 5498 :         if (_Last - _First < 2) {
; 5499 :             return;
; 5500 :         }
; 5501 : 
; 5502 :         --_Last;
; 5503 :         iter_value_t<_It> _Val = _RANGES iter_move(_Last);
; 5504 :         // NB: if _Proj is a _Ref_fn, this aliases the _Proj1 and _Proj2 parameters of _Pop_heap_hole_unchecked
; 5505 :         _RANGES _Pop_heap_hole_unchecked(_STD move(_First), _Last, _Last, _STD move(_Val), _Pred, _Proj, _Proj);
; 5506 :     }
; 5507 : 
; 5508 :     class _Pop_heap_fn : private _Not_quite_object {
; 5509 :     public:
; 5510 :         using _Not_quite_object::_Not_quite_object;
; 5511 : 
; 5512 :         // clang-format off
; 5513 :         template <random_access_iterator _It, sentinel_for<_It> _Se, class _Pr = ranges::less, class _Pj = identity>
; 5514 :             requires sortable<_It, _Pr, _Pj>
; 5515 :         constexpr _It operator()(_It _First, _Se _Last, _Pr _Pred = {}, _Pj _Proj = {}) const {
; 5516 :             _Adl_verify_range(_First, _Last);
; 5517 :             auto _UFirst = _Get_unwrapped(_STD move(_First));
; 5518 :             auto _ULast  = _Get_final_iterator_unwrapped<_It>(_UFirst, _STD move(_Last));
; 5519 :             _Seek_wrapped(_First, _ULast);
; 5520 :             _RANGES _Pop_heap_unchecked(_STD move(_UFirst), _STD move(_ULast), _Pass_fn(_Pred), _Pass_fn(_Proj));
; 5521 :             return _First;
; 5522 :         }
; 5523 : 
; 5524 :         template <random_access_range _Rng, class _Pr = ranges::less, class _Pj = identity>
; 5525 :             requires sortable<iterator_t<_Rng>, _Pr, _Pj>
; 5526 :         constexpr borrowed_iterator_t<_Rng> operator()(_Rng&& _Range, _Pr _Pred = {}, _Pj _Proj = {}) const {
; 5527 :             if constexpr (common_range<_Rng>) {
; 5528 :                 _RANGES _Pop_heap_unchecked(_Ubegin(_Range), _Uend(_Range), _Pass_fn(_Pred), _Pass_fn(_Proj));
; 5529 :                 return _RANGES end(_Range);
; 5530 :             } else {
; 5531 :                 auto _ULast = _Get_final_iterator_unwrapped(_Range);
; 5532 :                 _RANGES _Pop_heap_unchecked(_Ubegin(_Range), _ULast, _Pass_fn(_Pred), _Pass_fn(_Proj));
; 5533 :                 return _Rewrap_iterator(_Range, _STD move(_ULast));
; 5534 :             }
; 5535 :         }
; 5536 :         // clang-format on
; 5537 :     };
; 5538 : 
; 5539 :     inline constexpr _Pop_heap_fn pop_heap{_Not_quite_object::_Construct_tag{}};
; 5540 : } // namespace ranges
; 5541 : #endif // __cpp_lib_concepts
; 5542 : 
; 5543 : template <class _RanIt, class _Pr>
; 5544 : _CONSTEXPR20 void _Make_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {
; 5545 :     // make [_First, _Last) into a heap
; 5546 :     using _Diff   = _Iter_diff_t<_RanIt>;
; 5547 :     _Diff _Bottom = _Last - _First;

	imul	esi, eax, 76
	mov	DWORD PTR tv732[esp+128], ecx
	sar	ecx, 1
	mov	DWORD PTR __Max_sequence_non_leaf$1$[esp+128], ecx
	add	esi, ebx
$LL28@Sort_unche:

; 5549 :         // reheap top half, bottom to top
; 5550 :         --_Hole;

	sub	esi, 76					; 0000004cH

; 5551 :         _Iter_value_t<_RanIt> _Val = _STD move(*(_First + _Hole));

	lea	edi, DWORD PTR __Val$4[esp+128]
	dec	eax
	mov	DWORD PTR tv721[esp+128], esi
	mov	ecx, 19					; 00000013H
	mov	DWORD PTR __Hole$1$[esp+128], eax
	rep movsd

; 5386 :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

	mov	ecx, DWORD PTR __Max_sequence_non_leaf$1$[esp+128]

; 5552 :         _Pop_heap_hole_by_index(_First, _Hole, _Bottom, _STD move(_Val), _Pred);

	mov	edi, eax

; 5381 :     _Diff _Idx       = _Hole;

	mov	esi, eax

; 5382 : 
; 5383 :     // Check whether _Idx can have a child before calculating that child's index, since
; 5384 :     // calculating the child's index can trigger integer overflows
; 5385 :     const _Diff _Max_sequence_non_leaf = (_Bottom - 1) >> 1; // shift for codegen
; 5386 :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

	cmp	eax, ecx
	jge	SHORT $LN34@Sort_unche
	npad	5
$LL33@Sort_unche:

; 5387 :         _Idx = 2 * _Idx + 2;

	lea	esi, DWORD PTR [esi*2+2]

; 5388 :         if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1)))) {

	imul	ecx, esi, 76
	mov	DWORD PTR __Idx$1$[esp+128], esi
	add	ecx, ebx
	lea	eax, DWORD PTR [ecx-76]
	push	eax
	push	ecx
	call	edx
	add	esp, 8
	test	al, al
	je	SHORT $LN35@Sort_unche

; 5389 :             --_Idx;

	dec	esi
	mov	DWORD PTR __Idx$1$[esp+128], esi
$LN35@Sort_unche:

; 5382 : 
; 5383 :     // Check whether _Idx can have a child before calculating that child's index, since
; 5384 :     // calculating the child's index can trigger integer overflows
; 5385 :     const _Diff _Max_sequence_non_leaf = (_Bottom - 1) >> 1; // shift for codegen
; 5386 :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

	mov	edx, DWORD PTR __Pred$[ebp]

; 5390 :         }
; 5391 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	ecx, 19					; 00000013H
	imul	esi, esi, 76
	imul	edi, edi, 76
	add	esi, ebx
	add	edi, ebx
	rep movsd

; 5392 :         _Hole             = _Idx;

	mov	esi, DWORD PTR __Idx$1$[esp+128]
	mov	edi, esi
	cmp	esi, DWORD PTR __Max_sequence_non_leaf$1$[esp+128]
	jl	SHORT $LL33@Sort_unche
	mov	eax, DWORD PTR __Hole$1$[esp+128]
	mov	ecx, DWORD PTR __Max_sequence_non_leaf$1$[esp+128]
$LN34@Sort_unche:

; 5393 :     }
; 5394 : 
; 5395 :     if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it

	cmp	esi, ecx
	jne	SHORT $LN36@Sort_unche
	mov	ecx, DWORD PTR __Bottom$1$[esp+128]
	test	cl, 1
	jne	SHORT $LN36@Sort_unche
	mov	eax, DWORD PTR __Hole$1$[esp+128]

; 5396 :         *(_First + _Hole) = _STD move(*(_First + (_Bottom - 1)));

	imul	esi, ecx, 76
	mov	ecx, 19					; 00000013H
	imul	edi, edi, 76
	add	esi, -76				; ffffffb4H
	add	esi, ebx
	add	edi, ebx
	rep movsd

; 5397 :         _Hole             = _Bottom - 1;

	mov	edi, DWORD PTR tv732[esp+128]
$LN36@Sort_unche:

; 5268 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

	cmp	eax, edi
	jge	SHORT $LN40@Sort_unche
$LL41@Sort_unche:

; 5267 :     for (_Diff _Idx = (_Hole - 1) >> 1; // shift for codegen

	lea	eax, DWORD PTR [edi-1]
	sar	eax, 1

; 5268 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

	imul	esi, eax, 76
	mov	DWORD PTR __Idx$1$[esp+128], eax
	lea	eax, DWORD PTR __Val$4[esp+128]
	push	eax
	add	esi, ebx
	push	esi
	call	edx
	add	esp, 8
	test	al, al
	je	SHORT $LN188@Sort_unche

; 5269 :          _Idx = (_Hole - 1) >> 1) { // shift for codegen
; 5270 :         // move _Hole up to parent
; 5271 :         *(_First + _Hole) = _STD move(*(_First + _Idx));
; 5272 :         _Hole             = _Idx;

	mov	eax, DWORD PTR __Idx$1$[esp+128]
	mov	ecx, 19					; 00000013H
	mov	edx, DWORD PTR __Pred$[ebp]
	imul	edi, edi, 76
	add	edi, ebx
	rep movsd
	mov	edi, eax
	cmp	DWORD PTR __Hole$1$[esp+128], eax
	jl	SHORT $LL41@Sort_unche
$LN188@Sort_unche:
	mov	eax, DWORD PTR __Hole$1$[esp+128]
$LN40@Sort_unche:

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	mov	edx, DWORD PTR __Pred$[ebp]

; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	lea	esi, DWORD PTR __Val$4[esp+128]
	imul	edi, edi, 76
	mov	ecx, 19					; 00000013H
	add	edi, ebx
	rep movsd

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	mov	esi, DWORD PTR tv721[esp+128]
	test	eax, eax
	jg	$LL28@Sort_unche
	mov	esi, DWORD PTR $T1[esp+128]
	mov	edi, DWORD PTR __Last$1$[esp+128]
	mov	ecx, DWORD PTR __Bottom$1$[esp+128]
$LN29@Sort_unche:

; 5774 :     for (; _Last - _First >= 2; --_Last) {

	cmp	ecx, 2
	jl	$LN45@Sort_unche

; 7055 :             _Make_heap_unchecked(_First, _Last, _Pred);
; 7056 :             _Sort_heap_unchecked(_First, _Last, _Pred);

	add	edi, -76				; ffffffb4H
	mov	DWORD PTR tv729[esp+128], edi
	npad	1
$LL46@Sort_unche:

; 5417 :     if (2 <= _Last - _First) {

	sar	esi, 2
	imul	eax, esi, 678152731
	mov	esi, edi
	cmp	eax, 2
	jl	SHORT $LN187@Sort_unche

; 5418 :         --_Last;
; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	ecx, 19					; 00000013H
	lea	edi, DWORD PTR __Val$3[esp+128]
	rep movsd

; 5408 :     *_Dest      = _STD move(*_First);

	mov	edi, DWORD PTR tv729[esp+128]

; 5409 :     using _Diff = _Iter_diff_t<_RanIt>;
; 5410 :     _Pop_heap_hole_by_index(

	lea	eax, DWORD PTR __Val$3[esp+128]
	mov	ecx, 19					; 00000013H
	mov	esi, ebx
	rep movsd
	mov	edi, DWORD PTR tv729[esp+128]
	mov	ecx, ebx
	push	edx
	push	eax
	mov	esi, edi
	xor	edx, edx
	sub	esi, ebx
	mov	eax, esi
	sar	eax, 2
	imul	eax, eax, 678152731
	push	eax
	call	??$_Pop_heap_hole_by_index@PAU_MatrixItem@R_dsgraph@@U12@P6A_NABU12@0@Z@std@@YAXPAU_MatrixItem@R_dsgraph@@HH$$QAU12@P6A_NABU12@2@Z@Z ; std::_Pop_heap_hole_by_index<R_dsgraph::_MatrixItem *,R_dsgraph::_MatrixItem,bool (__cdecl*)(R_dsgraph::_MatrixItem const &,R_dsgraph::_MatrixItem const &)>
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN44@Sort_unche
$LN187@Sort_unche:
	sub	esi, ebx
$LN44@Sort_unche:

; 5774 :     for (; _Last - _First >= 2; --_Last) {

	mov	edx, DWORD PTR __Pred$[ebp]
	sub	edi, 76					; 0000004cH
	mov	DWORD PTR tv729[esp+128], edi
	cmp	esi, 152				; 00000098H
	jge	SHORT $LL46@Sort_unche

; 7071 :         }
; 7072 :     }
; 7073 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN18@Sort_unche:

; 6930 :                 for (_BidIt _Prev = _Hole; _DEBUG_LT_PRED(_Pred, _Val, *--_Prev); _Hole = _Prev) {

	mov	eax, DWORD PTR tv722[esp+128]
	push	eax
	mov	DWORD PTR __Prev$1$[esp+132], eax
	lea	eax, DWORD PTR __Val$5[esp+132]
	push	eax
	mov	eax, DWORD PTR __Pred$[ebp]
	call	eax
	add	esp, 8
	test	al, al
	je	SHORT $LN15@Sort_unche
	mov	ebx, DWORD PTR __Prev$1$[esp+128]
	npad	7
$LL16@Sort_unche:

; 6931 :                     *_Hole = _STD move(*_Prev); // move hole down

	mov	edi, DWORD PTR __Hole$1$[esp+128]
	lea	eax, DWORD PTR __Val$5[esp+128]
	mov	esi, ebx
	mov	DWORD PTR __Hole$1$[esp+128], ebx
	sub	ebx, 76					; 0000004cH
	mov	ecx, 19					; 00000013H
	push	ebx
	rep movsd
	push	eax
	call	DWORD PTR __Pred$[ebp]
	add	esp, 8
	test	al, al
	jne	SHORT $LL16@Sort_unche
	mov	ebx, DWORD PTR __First$1$[esp+128]
$LN15@Sort_unche:

; 6932 :                 }
; 6933 : 
; 6934 :                 *_Hole = _STD move(_Val); // insert element in hole

	mov	edi, DWORD PTR __Hole$1$[esp+128]
$LN190@Sort_unche:

; 6922 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

	mov	eax, DWORD PTR __Mid$1$[esp+128]
	lea	esi, DWORD PTR __Val$5[esp+128]
	add	DWORD PTR tv722[esp+128], 76		; 0000004cH
	add	eax, 76					; 0000004cH
	mov	ecx, 19					; 00000013H
	mov	edx, DWORD PTR __Pred$[ebp]
	rep movsd
	mov	DWORD PTR __Mid$1$[esp+128], eax
	cmp	eax, DWORD PTR __Last$1$[esp+128]
	jne	$LL11@Sort_unche
$LN45@Sort_unche:

; 7071 :         }
; 7072 :     }
; 7073 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Sort_unchecked@PAU_MatrixItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_MatrixItem@R_dsgraph@@0HP6A_NABU12@1@Z@Z ENDP ; std::_Sort_unchecked<R_dsgraph::_MatrixItem *,bool (__cdecl*)(R_dsgraph::_MatrixItem const &,R_dsgraph::_MatrixItem const &)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\xr_resource.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
; File I:\Vitalya\mine\NSProjectX\xrCore\xr_resource.h
;	COMDAT ??$?MVCTexture@@Uresptrcode_texture@@@@YA_NABV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@0@Z
_TEXT	SEGMENT
??$?MVCTexture@@Uresptrcode_texture@@@@YA_NABV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@0@Z PROC ; operator<<CTexture,resptrcode_texture>, COMDAT
; _a$ = ecx
; _b$ = edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	setb	al
; File I:\Vitalya\mine\NSProjectX\xrCore\xr_resource.h

; 96   : template<class T, typename D>			inline bool operator	<	(resptr_core<T,D> const & a, resptr_core<T,D> const & b)		{ return std::less<T *>()(a._get(), b._get());		}

	ret	0
??$?MVCTexture@@Uresptrcode_texture@@@@YA_NABV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@0@Z ENDP ; operator<<CTexture,resptrcode_texture>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$lexicographical_compare@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@std@@@std@@@std@@V12@U?$less@X@2@@std@@YA_NV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@std@@@std@@@0@000U?$less@X@0@@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Last1$ = 12						; size = 4
__First2$ = 16						; size = 4
__Last2$ = 20						; size = 4
__Pred$ = 24						; size = 1
??$lexicographical_compare@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@std@@@std@@@std@@V12@U?$less@X@2@@std@@YA_NV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@std@@@std@@@0@000U?$less@X@0@@Z PROC ; std::lexicographical_compare<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<unsigned int,resptr_core<CTexture,resptrcode_texture> > > > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<unsigned int,resptr_core<CTexture,resptrcode_texture> > > > >,std::less<void> >, COMDAT

; 4988 :     for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, (void) ++_First2) { // something to compare, do it

	mov	ecx, DWORD PTR __Last1$[esp-4]

; 5018 :     // order [_First1, _Last1) vs. [_First2, _Last2)
; 5019 :     _Adl_verify_range(_First1, _Last1);
; 5020 :     _Adl_verify_range(_First2, _Last2);
; 5021 :     const auto _UFirst1 = _Get_unwrapped(_First1);
; 5022 :     const auto _ULast1  = _Get_unwrapped(_Last1);
; 5023 :     const auto _UFirst2 = _Get_unwrapped(_First2);
; 5024 :     const auto _ULast2  = _Get_unwrapped(_Last2);
; 5025 :     return _Lex_compare_unchecked(

	mov	edx, DWORD PTR __First2$[esp-4]

; 4988 :     for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, (void) ++_First2) { // something to compare, do it

	mov	eax, DWORD PTR __Last2$[esp-4]

; 5017 :     _InIt1 _First1, _InIt1 _Last1, _InIt2 _First2, _InIt2 _Last2, _Pr _Pred) {

	push	ebx
	push	ebp
	push	esi
	push	edi

; 5018 :     // order [_First1, _Last1) vs. [_First2, _Last2)
; 5019 :     _Adl_verify_range(_First1, _Last1);
; 5020 :     _Adl_verify_range(_First2, _Last2);
; 5021 :     const auto _UFirst1 = _Get_unwrapped(_First1);
; 5022 :     const auto _ULast1  = _Get_unwrapped(_Last1);
; 5023 :     const auto _UFirst2 = _Get_unwrapped(_First2);
; 5024 :     const auto _ULast2  = _Get_unwrapped(_Last2);
; 5025 :     return _Lex_compare_unchecked(

	mov	edi, DWORD PTR __First1$[esp+12]

; 4988 :     for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, (void) ++_First2) { // something to compare, do it

	cmp	edi, ecx
	je	SHORT $LN53@lexicograp

; 5018 :     // order [_First1, _Last1) vs. [_First2, _Last2)
; 5019 :     _Adl_verify_range(_First1, _Last1);
; 5020 :     _Adl_verify_range(_First2, _Last2);
; 5021 :     const auto _UFirst1 = _Get_unwrapped(_First1);
; 5022 :     const auto _ULast1  = _Get_unwrapped(_Last1);
; 5023 :     const auto _UFirst2 = _Get_unwrapped(_First2);
; 5024 :     const auto _ULast2  = _Get_unwrapped(_Last2);
; 5025 :     return _Lex_compare_unchecked(

	mov	ebp, edi
	sub	ebp, edx
	npad	4
$LL6@lexicograp:

; 4988 :     for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, (void) ++_First2) { // something to compare, do it

	cmp	edx, eax
	je	SHORT $LN11@lexicograp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 362  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

	mov	esi, DWORD PTR [edi]
	cmp	esi, DWORD PTR [edx]
	jb	SHORT $LN44@lexicograp
	ja	SHORT $LN11@lexicograp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

	mov	esi, DWORD PTR [edx+ebp+4]
	cmp	esi, DWORD PTR [edx+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 362  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

	jb	SHORT $LN44@lexicograp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

	mov	esi, DWORD PTR [edx+4]
	cmp	esi, DWORD PTR [edx+ebp+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 362  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

	jb	SHORT $LN11@lexicograp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4988 :     for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, (void) ++_First2) { // something to compare, do it

	add	edi, 8
	add	edx, 8
	cmp	edi, ecx
	jne	SHORT $LL6@lexicograp
$LN53@lexicograp:

; 4989 :         if (_DEBUG_LT_PRED(_Pred, *_First1, *_First2)) {
; 4990 :             return true;
; 4991 :         } else if (_Pred(*_First2, *_First1)) {
; 4992 :             return false;
; 4993 :         }
; 4994 :     }
; 4995 : 
; 4996 :     return _First1 == _Last1 && _First2 != _Last2;

	cmp	edx, eax
	je	SHORT $LN11@lexicograp
$LN44@lexicograp:
	pop	edi

; 5026 :         _UFirst1, _ULast1, _UFirst2, _ULast2, _Pass_fn(_Pred), _Lex_compare_memcmp_classify(_UFirst1, _UFirst2, _Pred));
; 5027 : }

	pop	esi
	pop	ebp
	mov	al, 1
	pop	ebx
	ret	0
$LN11@lexicograp:
	pop	edi
	pop	esi
	pop	ebp
	xor	al, al
	pop	ebx
	ret	0
??$lexicographical_compare@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@std@@@std@@@std@@V12@U?$less@X@2@@std@@YA_NV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@std@@@std@@@0@000U?$less@X@0@@Z ENDP ; std::lexicographical_compare<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<unsigned int,resptr_core<CTexture,resptrcode_texture> > > > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<unsigned int,resptr_core<CTexture,resptrcode_texture> > > > >,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Get_unwrapped@AAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@std@@@std@@@std@@@std@@YA?A_TAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
??$_Get_unwrapped@AAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@std@@@std@@@std@@@std@@YA?A_TAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@std@@@std@@@0@@Z PROC ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<unsigned int,resptr_core<CTexture,resptrcode_texture> > > > > &>, COMDAT
; __It$ = ecx

; 1275 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1276 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1277 :         return _It + 0;
; 1278 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1279 :         return static_cast<_Iter&&>(_It)._Unwrapped();

	mov	eax, DWORD PTR [ecx]

; 1280 :     } else {
; 1281 :         return static_cast<_Iter&&>(_It);
; 1282 :     }
; 1283 : }

	ret	0
??$_Get_unwrapped@AAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@std@@@std@@@std@@@std@@YA?A_TAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@std@@@std@@@0@@Z ENDP ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<unsigned int,resptr_core<CTexture,resptrcode_texture> > > > > &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Lex_compare_memcmp_classify@PAU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@PAU12@X$0A@@std@@YA?A_PABQAU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@0@0ABU?$less@X@0@@Z
_TEXT	SEGMENT
___formal$dead$ = 8					; size = 4
___formal$dead$ = 12					; size = 4
??$_Lex_compare_memcmp_classify@PAU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@PAU12@X$0A@@std@@YA?A_PABQAU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@0@0ABU?$less@X@0@@Z PROC ; std::_Lex_compare_memcmp_classify<std::pair<unsigned int,resptr_core<CTexture,resptrcode_texture> > *,std::pair<unsigned int,resptr_core<CTexture,resptrcode_texture> > *,void,0>, COMDAT
; ___$ReturnUdt$ = ecx
; ___formal$dead$ = edx

; 4956 :     // return lex_compare optimization category for contiguous iterators and less<_FTy>
; 4957 :     return _Lex_compare_check_element_types<less<int>, remove_reference_t<_Iter_ref_t<_CtgIt1>>,

	mov	eax, ecx

; 4958 :         remove_reference_t<_Iter_ref_t<_CtgIt2>>, _FTy>{};
; 4959 : }

	ret	0
??$_Lex_compare_memcmp_classify@PAU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@PAU12@X$0A@@std@@YA?A_PABQAU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@0@0ABU?$less@X@0@@Z ENDP ; std::_Lex_compare_memcmp_classify<std::pair<unsigned int,resptr_core<CTexture,resptrcode_texture> > *,std::pair<unsigned int,resptr_core<CTexture,resptrcode_texture> > *,void,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0@Z
_TEXT	SEGMENT
??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0@Z PROC ; std::_Adl_verify_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> > > >, COMDAT
; __First$dead$ = ecx
; __Last$dead$ = edx

; 1259 :     // check that [_First, _Last) forms an iterator range
; 1260 :     if constexpr (_Range_verifiable_v<_Iter, _Sentinel>) {
; 1261 :         _Verify_range(_First, _Last);
; 1262 :     }
; 1263 : }

	ret	0
??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0@Z ENDP ; std::_Adl_verify_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Pass_fn@P6A_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z$0A@@std@@YAP6A_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0@ZP6A_N00@Z@Z
_TEXT	SEGMENT
??$_Pass_fn@P6A_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z$0A@@std@@YAP6A_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0@ZP6A_N00@Z@Z PROC ; std::_Pass_fn<bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *),0>, COMDAT
; __Val$ = ecx

; 253  :     return _Val;

	mov	eax, ecx

; 254  : }

	ret	0
??$_Pass_fn@P6A_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z$0A@@std@@YAP6A_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0@ZP6A_N00@Z@Z ENDP ; std::_Pass_fn<bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *),0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z
_TEXT	SEGMENT
__Last$1$ = -28						; size = 4
__Hole$1$ = -24						; size = 4
__Val$1$ = -24						; size = 4
__Hole$1$ = -20						; size = 4
__Val$1$ = -20						; size = 4
__Mid$1$ = -16						; size = 4
__Max_sequence_non_leaf$1$ = -16			; size = 4
__First$1$ = -12					; size = 4
__Bottom$1$ = -12					; size = 4
tv742 = -8						; size = 4
__Val$1 = -8						; size = 4
__Mid$2 = -8						; size = 8
__Ideal$ = 8						; size = 4
__Pred$ = 12						; size = 4
??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z PROC ; std::_Sort_unchecked<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 7046 : _CONSTEXPR20 void _Sort_unchecked(_RanIt _First, _RanIt _Last, _Iter_diff_t<_RanIt> _Ideal, _Pr _Pred) {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 28					; 0000001cH
	push	ebx
	mov	ebx, edx
	push	esi
	mov	esi, ecx
	mov	DWORD PTR __Last$1$[esp+36], ebx

; 7047 :     // order [_First, _Last)
; 7048 :     for (;;) {
; 7049 :         if (_Last - _First <= _ISORT_MAX) { // small

	mov	ecx, DWORD PTR __Pred$[ebp]
	mov	eax, ebx
	sub	eax, esi
	mov	DWORD PTR __First$1$[esp+36], esi
	and	eax, -4					; fffffffcH
	push	edi
	cmp	eax, 128				; 00000080H
	jle	SHORT $LN165@Sort_unche
	mov	edi, DWORD PTR __Ideal$[ebp]
	npad	4
$LL2@Sort_unche:

; 7050 :             _Insertion_sort_unchecked(_First, _Last, _Pred);
; 7051 :             return;
; 7052 :         }
; 7053 : 
; 7054 :         if (_Ideal <= 0) { // heap sort if too many divisions

	test	edi, edi
	jle	$LN166@Sort_unche

; 7055 :             _Make_heap_unchecked(_First, _Last, _Pred);
; 7056 :             _Sort_heap_unchecked(_First, _Last, _Pred);
; 7057 :             return;
; 7058 :         }
; 7059 : 
; 7060 :         // divide and conquer by quicksort
; 7061 :         auto _Mid = _Partition_by_median_guess_unchecked(_First, _Last, _Pred);

	push	ecx
	push	ebx
	mov	edx, esi
	lea	ecx, DWORD PTR __Mid$2[esp+48]
	call	??$_Partition_by_median_guess_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YA?AU?$pair@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@0@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU23@1@Z@Z ; std::_Partition_by_median_guess_unchecked<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *)>

; 7062 : 
; 7063 :         _Ideal = (_Ideal >> 1) + (_Ideal >> 2); // allow 1.5 log2(N) divisions
; 7064 : 
; 7065 :         if (_Mid.first - _First < _Last - _Mid.second) { // loop on second half

	mov	edx, DWORD PTR __Mid$2[esp+48]
	mov	eax, edi
	sar	eax, 2
	mov	ecx, ebx
	sub	ecx, DWORD PTR __Mid$2[esp+52]
	add	esp, 8
	sar	edi, 1
	and	ecx, -4					; fffffffcH
	add	edi, eax
	mov	eax, edx
	sub	eax, esi
	and	eax, -4					; fffffffcH
	cmp	eax, ecx
	mov	eax, DWORD PTR __Pred$[ebp]
	push	eax
	push	edi
	jge	SHORT $LN7@Sort_unche

; 7066 :             _Sort_unchecked(_First, _Mid.first, _Ideal, _Pred);

	mov	ecx, esi
	call	??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z ; std::_Sort_unchecked<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *)>

; 7067 :             _First = _Mid.second;

	mov	esi, DWORD PTR __Mid$2[esp+52]
	mov	DWORD PTR __First$1$[esp+48], esi

; 7068 :         } else { // loop on first half

	jmp	SHORT $LN190@Sort_unche
$LN7@Sort_unche:

; 7069 :             _Sort_unchecked(_Mid.second, _Last, _Ideal, _Pred);

	mov	ecx, DWORD PTR __Mid$2[esp+52]
	mov	edx, ebx
	call	??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z ; std::_Sort_unchecked<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *)>

; 7070 :             _Last = _Mid.first;

	mov	ebx, DWORD PTR __Mid$2[esp+48]
	mov	DWORD PTR __Last$1$[esp+48], ebx
$LN190@Sort_unche:

; 7047 :     // order [_First, _Last)
; 7048 :     for (;;) {
; 7049 :         if (_Last - _First <= _ISORT_MAX) { // small

	mov	ecx, DWORD PTR __Pred$[ebp]
	mov	eax, ebx
	sub	eax, esi
	add	esp, 8
	and	eax, -4					; fffffffcH
	cmp	eax, 128				; 00000080H
	jg	SHORT $LL2@Sort_unche
$LN165@Sort_unche:

; 6921 :     if (_First != _Last) {

	cmp	esi, ebx
	je	$LN45@Sort_unche

; 6922 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

	lea	ebx, DWORD PTR [esi+4]
	mov	DWORD PTR __Mid$1$[esp+40], ebx
	cmp	ebx, DWORD PTR __Last$1$[esp+40]
	je	$LN45@Sort_unche
	npad	1
$LL11@Sort_unche:

; 6923 :             _BidIt _Hole               = _Mid;
; 6924 :             _Iter_value_t<_BidIt> _Val = _STD move(*_Mid);
; 6925 : 
; 6926 :             if (_DEBUG_LT_PRED(_Pred, _Val, *_First)) { // found new earliest element, move to front

	push	DWORD PTR [esi]
	mov	edi, DWORD PTR [ebx]
	push	edi
	mov	DWORD PTR __Hole$1$[esp+48], ebx
	mov	DWORD PTR __Val$1$[esp+48], edi
	call	ecx
	add	esp, 8
	test	al, al
	je	$LN18@Sort_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4254 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	mov	ecx, ebx

; 4255 :     auto _Result                = _CSTD memmove(_Dest_ch - _Count, _First_ch, _Count);

	mov	eax, ebx
	sub	ecx, esi
	push	ecx
	sub	eax, ecx
	add	eax, 4
	push	esi
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6928 :                 *_First = _STD move(_Val);

	mov	DWORD PTR [esi], edi

; 6929 :             } else { // look for insertion point after first

	jmp	$LN19@Sort_unche
$LN166@Sort_unche:

; 5547 :     _Diff _Bottom = _Last - _First;

	sub	ebx, esi
	mov	eax, ebx
	mov	DWORD PTR __Last$1$[esp+40], ebx
	sar	eax, 2

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	mov	edx, eax
	mov	DWORD PTR __Bottom$1$[esp+40], eax
	sar	edx, 1
	test	edx, edx
	jle	$LN29@Sort_unche
	dec	eax
	mov	DWORD PTR tv742[esp+40], eax
	sar	eax, 1
	mov	DWORD PTR __Max_sequence_non_leaf$1$[esp+40], eax
	npad	3
$LL28@Sort_unche:

; 5549 :         // reheap top half, bottom to top
; 5550 :         --_Hole;
; 5551 :         _Iter_value_t<_RanIt> _Val = _STD move(*(_First + _Hole));

	mov	ebx, DWORD PTR [esi+edx*4-4]
	dec	edx
	mov	DWORD PTR __Val$1$[esp+40], ebx

; 5552 :         _Pop_heap_hole_by_index(_First, _Hole, _Bottom, _STD move(_Val), _Pred);

	mov	ebx, edx
	mov	DWORD PTR __Hole$1$[esp+40], edx

; 5381 :     _Diff _Idx       = _Hole;

	mov	edi, edx

; 5382 : 
; 5383 :     // Check whether _Idx can have a child before calculating that child's index, since
; 5384 :     // calculating the child's index can trigger integer overflows
; 5385 :     const _Diff _Max_sequence_non_leaf = (_Bottom - 1) >> 1; // shift for codegen
; 5386 :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

	cmp	edx, eax
	jge	SHORT $LN34@Sort_unche
	npad	11
$LL33@Sort_unche:

; 5387 :         _Idx = 2 * _Idx + 2;
; 5388 :         if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1)))) {

	push	DWORD PTR [esi+edi*8+4]
	lea	edi, DWORD PTR [edi*2+2]
	push	DWORD PTR [esi+edi*4]
	call	ecx
	add	esp, 8
	test	al, al
	je	SHORT $LN35@Sort_unche

; 5389 :             --_Idx;

	dec	edi
$LN35@Sort_unche:

; 5390 :         }
; 5391 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [esi+edi*4]
	mov	ecx, DWORD PTR __Pred$[ebp]
	mov	DWORD PTR [esi+ebx*4], eax

; 5392 :         _Hole             = _Idx;

	mov	ebx, edi
	mov	eax, DWORD PTR __Max_sequence_non_leaf$1$[esp+40]
	cmp	edi, eax
	jl	SHORT $LL33@Sort_unche
	mov	edx, DWORD PTR __Hole$1$[esp+40]
$LN34@Sort_unche:

; 5393 :     }
; 5394 : 
; 5395 :     if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it

	cmp	edi, eax
	jne	SHORT $LN36@Sort_unche
	mov	eax, DWORD PTR __Bottom$1$[esp+40]
	test	al, 1
	jne	SHORT $LN36@Sort_unche

; 5396 :         *(_First + _Hole) = _STD move(*(_First + (_Bottom - 1)));

	mov	eax, DWORD PTR [esi+eax*4-4]
	mov	DWORD PTR [esi+ebx*4], eax

; 5397 :         _Hole             = _Bottom - 1;

	mov	ebx, DWORD PTR tv742[esp+40]
$LN36@Sort_unche:

; 5268 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

	cmp	edx, ebx
	jge	SHORT $LN40@Sort_unche
	npad	6
$LL41@Sort_unche:
	push	DWORD PTR __Val$1$[esp+40]
	lea	edi, DWORD PTR [ebx-1]
	sar	edi, 1
	push	DWORD PTR [esi+edi*4]
	call	ecx
	mov	edx, DWORD PTR __Hole$1$[esp+48]
	add	esp, 8
	test	al, al
	je	SHORT $LN40@Sort_unche

; 5269 :          _Idx = (_Hole - 1) >> 1) { // shift for codegen
; 5270 :         // move _Hole up to parent
; 5271 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [esi+edi*4]
	mov	ecx, DWORD PTR __Pred$[ebp]
	mov	DWORD PTR [esi+ebx*4], eax

; 5272 :         _Hole             = _Idx;

	mov	ebx, edi
	cmp	edx, edi
	jl	SHORT $LL41@Sort_unche
$LN40@Sort_unche:

; 5273 :     }
; 5274 : 
; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	eax, DWORD PTR __Val$1$[esp+40]

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	mov	ecx, DWORD PTR __Pred$[ebp]

; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	DWORD PTR [esi+ebx*4], eax

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	mov	eax, DWORD PTR __Max_sequence_non_leaf$1$[esp+40]
	test	edx, edx
	jg	$LL28@Sort_unche
	mov	ebx, DWORD PTR __Last$1$[esp+40]
	mov	eax, DWORD PTR __Bottom$1$[esp+40]
$LN29@Sort_unche:

; 5774 :     for (; _Last - _First >= 2; --_Last) {

	cmp	eax, 2
	jl	$LN45@Sort_unche
	npad	1
$LL46@Sort_unche:

; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	eax, DWORD PTR [ebx+esi-4]

; 5410 :     _Pop_heap_hole_by_index(

	xor	edx, edx

; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	DWORD PTR __Val$1[esp+40], eax

; 5408 :     *_Dest      = _STD move(*_First);

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [ebx+esi-4], eax

; 5409 :     using _Diff = _Iter_diff_t<_RanIt>;
; 5410 :     _Pop_heap_hole_by_index(

	lea	eax, DWORD PTR __Val$1[esp+40]
	push	ecx
	push	eax
	lea	eax, DWORD PTR [ebx-4]
	mov	ecx, esi
	sar	eax, 2
	push	eax
	call	??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ; std::_Pop_heap_hole_by_index<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *)>

; 5774 :     for (; _Last - _First >= 2; --_Last) {

	mov	ecx, DWORD PTR __Pred$[ebp]
	sub	ebx, 4
	mov	eax, ebx

; 5410 :     _Pop_heap_hole_by_index(

	add	esp, 12					; 0000000cH

; 5774 :     for (; _Last - _First >= 2; --_Last) {

	and	eax, -4					; fffffffcH
	cmp	eax, 8
	jge	SHORT $LL46@Sort_unche

; 7071 :         }
; 7072 :     }
; 7073 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN18@Sort_unche:

; 6930 :                 for (_BidIt _Prev = _Hole; _DEBUG_LT_PRED(_Pred, _Val, *--_Prev); _Hole = _Prev) {

	push	DWORD PTR [ebx-4]
	mov	eax, DWORD PTR __Pred$[ebp]
	lea	edi, DWORD PTR [ebx-4]
	push	DWORD PTR __Val$1$[esp+44]
	call	eax
	add	esp, 8
	test	al, al
	je	SHORT $LN15@Sort_unche
	mov	esi, DWORD PTR __Val$1$[esp+40]
	mov	ebx, DWORD PTR __Hole$1$[esp+40]
	npad	4
$LL16@Sort_unche:

; 6931 :                     *_Hole = _STD move(*_Prev); // move hole down

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [ebx], eax
	mov	ebx, edi
	push	DWORD PTR [edi-4]
	sub	edi, 4
	push	esi
	call	DWORD PTR __Pred$[ebp]
	add	esp, 8
	test	al, al
	jne	SHORT $LL16@Sort_unche
	mov	esi, DWORD PTR __First$1$[esp+40]
	mov	DWORD PTR __Hole$1$[esp+40], ebx
	mov	ebx, DWORD PTR __Mid$1$[esp+40]
$LN15@Sort_unche:

; 6932 :                 }
; 6933 : 
; 6934 :                 *_Hole = _STD move(_Val); // insert element in hole

	mov	ecx, DWORD PTR __Hole$1$[esp+40]
	mov	eax, DWORD PTR __Val$1$[esp+40]
	mov	DWORD PTR [ecx], eax
$LN19@Sort_unche:

; 6922 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

	mov	ecx, DWORD PTR __Pred$[ebp]
	add	ebx, 4
	mov	DWORD PTR __Mid$1$[esp+40], ebx
	cmp	ebx, DWORD PTR __Last$1$[esp+40]
	jne	$LL11@Sort_unche
$LN45@Sort_unche:

; 7071 :         }
; 7072 :     }
; 7073 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z ENDP ; std::_Sort_unchecked<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Insert_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@1Uforward_iterator_tag@1@@Z
_TEXT	SEGMENT
__Backout$4 = -68					; size = 12
__Backout$5 = -68					; size = 12
__Backout$6 = -68					; size = 12
__UFirst$7 = -56					; size = 4
__UFirst$8 = -52					; size = 4
__UFirst$9 = -48					; size = 4
__Oldcapacity$1$ = -44					; size = 4
__Whereoff$1$ = -44					; size = 4
tv927 = -44						; size = 4
__Oldlast$ = -40					; size = 4
__Count$ = -36						; size = 4
__Newsize$1$ = -32					; size = 4
__Whereptr$ = -32					; size = 4
_this$1$ = -28						; size = 4
__Oldfirst$1$ = -24					; size = 4
__Newcapacity$1$ = -20					; size = 4
__Mylast$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Where$ = 8						; size = 4
__Count$1$ = 12						; size = 4
__Relocated$10 = 12					; size = 4
__Newvec$11 = 12					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Insert_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@1Uforward_iterator_tag@1@@Z PROC ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Insert_range<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *>, COMDAT
; _this$ = ecx

; 937  :     _CONSTEXPR20_CONTAINER void _Insert_range(const_iterator _Where, _Iter _First, _Iter _Last, forward_iterator_tag) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Insert_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@1Uforward_iterator_tag@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 56					; 00000038H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	eax, ecx
	mov	DWORD PTR _this$1$[ebp], eax

; 938  :         // insert forward range [_First, _Last) at _Where
; 939  :         const pointer _Whereptr = _Where._Ptr;

	mov	edi, DWORD PTR __Where$[ebp]
	mov	DWORD PTR __Whereptr$[ebp], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 1525 :         return _Last - _First; // assume the iterator will do debug checking

	mov	ecx, DWORD PTR __Last$[ebp]
	mov	edx, ecx
	mov	esi, DWORD PTR __First$[ebp]
	sub	edx, esi
	sar	edx, 2
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 940  :         const auto _Count       = _Convert_size<size_type>(static_cast<size_t>(_STD distance(_First, _Last)));

	mov	DWORD PTR __Count$[ebp], edx

; 941  : 
; 942  :         auto& _My_data   = _Mypair._Myval2;
; 943  :         pointer& _Mylast = _My_data._Mylast;

	lea	ebx, DWORD PTR [eax+4]
	mov	DWORD PTR __Mylast$[ebp], ebx

; 944  : 
; 945  :         const pointer _Oldfirst     = _My_data._Myfirst;

	mov	ebx, DWORD PTR [eax]
	mov	DWORD PTR __Oldfirst$1$[ebp], ebx

; 946  :         const pointer _Oldlast      = _Mylast;

	mov	ebx, DWORD PTR [eax+4]
	mov	DWORD PTR __Oldlast$[ebp], ebx

; 947  :         const auto _Unused_capacity = static_cast<size_type>(_My_data._Myend - _Oldlast);

	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR __Oldcapacity$1$[ebp], eax
	sub	eax, ebx
	sar	eax, 2

; 948  : 
; 949  :         if (_Count == 0) { // nothing to do, avoid invalidating iterators

	test	edx, edx
	je	$LN35@Insert_ran

; 950  :         } else if (_Count > _Unused_capacity) { // reallocate

	cmp	edx, eax
	jbe	$LN4@Insert_ran

; 951  :             const auto _Oldsize = static_cast<size_type>(_Oldlast - _Oldfirst);

	mov	ecx, ebx
	sub	ecx, DWORD PTR __Oldfirst$1$[ebp]
	sar	ecx, 2

; 952  : 
; 953  :             if (_Count > max_size() - _Oldsize) {

	mov	eax, 1073741823				; 3fffffffH
	sub	eax, ecx
	cmp	edx, eax
	ja	$LN144@Insert_ran

; 955  :             }
; 956  : 
; 957  :             const size_type _Newsize     = _Oldsize + _Count;

	lea	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR __Newsize$1$[ebp], eax

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	eax, DWORD PTR __Oldcapacity$1$[ebp]
	sub	eax, DWORD PTR __Oldfirst$1$[ebp]
	sar	eax, 2

; 1675 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	mov	edx, eax
	shr	edx, 1
	mov	ecx, 1073741823				; 3fffffffH
	sub	ecx, edx
	cmp	eax, ecx
	jbe	SHORT $LN40@Insert_ran

; 1676 :             return _Max; // geometric growth would overflow

	mov	eax, 1073741823				; 3fffffffH
	jmp	SHORT $LN142@Insert_ran
$LN40@Insert_ran:

; 1677 :         }
; 1678 : 
; 1679 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	add	eax, edx

; 1680 : 
; 1681 :         if (_Geometric < _Newsize) {

	cmp	eax, DWORD PTR __Newsize$1$[ebp]
	cmovb	eax, DWORD PTR __Newsize$1$[ebp]
$LN142@Insert_ran:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h

; 33   : 								pointer					allocate		(size_type n, const void* p=0) const	{	return (T*)dlmalloc(sizeof(T)*(u32)n);	}

	mov	DWORD PTR __Newcapacity$1$[ebp], eax
	lea	ecx, DWORD PTR [eax*4]
	call	_dlmalloc
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 960  :             const pointer _Newvec           = _Getal().allocate(_Newcapacity);

	mov	DWORD PTR __Newvec$11[ebp], eax

; 961  :             const auto _Whereoff            = static_cast<size_type>(_Whereptr - _Oldfirst);

	mov	ecx, edi
	sub	ecx, DWORD PTR __Oldfirst$1$[ebp]
	sar	ecx, 2
	mov	DWORD PTR __Whereoff$1$[ebp], ecx

; 962  :             const pointer _Constructed_last = _Newvec + _Whereoff + _Count;
; 963  :             pointer _Constructed_first      = _Constructed_last;
; 964  : 
; 965  :             _TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 966  :             _Ucopy(_First, _Last, _Newvec + _Whereoff);

	lea	ecx, DWORD PTR [eax+ecx*4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1642 :     auto _UFirst      = _Get_unwrapped(_First);

	mov	DWORD PTR __UFirst$9[ebp], esi

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	DWORD PTR __Backout$6[ebp], ecx
	mov	DWORD PTR __Backout$6[ebp+4], ecx
	mov	eax, DWORD PTR _this$1$[ebp]
	mov	DWORD PTR __Backout$6[ebp+8], eax

; 1658 :     for (; _UFirst != _ULast; ++_UFirst) {

	mov	edx, DWORD PTR __Last$[ebp]
$LL52@Insert_ran:
	cmp	esi, edx
	je	SHORT $LN51@Insert_ran

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [ecx], eax

; 1621 :         ++_Last;

	add	ecx, 4
	mov	DWORD PTR __Backout$6[ebp+4], ecx

; 1658 :     for (; _UFirst != _ULast; ++_UFirst) {

	add	esi, 4
	mov	DWORD PTR __UFirst$9[ebp], esi
	jmp	SHORT $LL52@Insert_ran
$LN51@Insert_ran:

; 1625 :         _First = _Last;

	mov	DWORD PTR __Backout$6[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 969  :             if (_Count == 1 && _Whereptr == _Oldlast) { // one at back, provide strong guarantee

	cmp	DWORD PTR __Count$[ebp], 1
	jne	SHORT $LN8@Insert_ran
	cmp	edi, ebx
	jne	SHORT $LN8@Insert_ran

; 970  :                 _Umove_if_noexcept(_Oldfirst, _Oldlast, _Newvec);

	mov	esi, DWORD PTR __Newvec$11[ebp]
	push	esi
	push	ebx
	push	DWORD PTR __Oldfirst$1$[ebp]
	call	?_Umove_if_noexcept@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@00@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Umove_if_noexcept

; 971  :             } else { // provide basic guarantee

	jmp	SHORT $LN9@Insert_ran
$LN8@Insert_ran:

; 972  :                 _Umove(_Oldfirst, _Whereptr, _Newvec);

	mov	esi, DWORD PTR __Newvec$11[ebp]
	push	esi
	push	edi
	push	DWORD PTR __Oldfirst$1$[ebp]
	call	?_Umove@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU34@00@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Umove

; 973  :                 _Constructed_first = _Newvec;
; 974  :                 _Umove(_Whereptr, _Oldlast, _Newvec + _Whereoff + _Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	eax, DWORD PTR __Whereoff$1$[ebp]
	add	eax, ecx
	lea	eax, DWORD PTR [esi+eax*4]
	push	eax
	push	ebx
	push	edi
	call	?_Umove@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU34@00@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Umove
$LN9@Insert_ran:
	mov	DWORD PTR __$EHRec$[ebp+12], -1

; 1732 :         if (_Myfirst) { // destroy and deallocate old array

	mov	ebx, DWORD PTR _this$1$[ebp]
	mov	ecx, DWORD PTR [ebx]
	test	ecx, ecx
	je	SHORT $LN61@Insert_ran
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h

; 35   : 								void					deallocate		(pointer p, size_type n) const			{	dlfree	(p);				}

	call	_dlfree
$LN61@Insert_ran:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1737 :         _Myfirst = _Newvec;

	mov	DWORD PTR [ebx], esi

; 1738 :         _Mylast  = _Newvec + _Newsize;

	mov	eax, DWORD PTR __Newsize$1$[ebp]
	lea	eax, DWORD PTR [esi+eax*4]
	mov	DWORD PTR [ebx+4], eax

; 1739 :         _Myend   = _Newvec + _Newcapacity;

	mov	eax, DWORD PTR __Newcapacity$1$[ebp]
	lea	eax, DWORD PTR [esi+eax*4]
	mov	DWORD PTR [ebx+8], eax
$LN35@Insert_ran:

; 1042 :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN4@Insert_ran:

; 980  :             _CATCH_END
; 981  : 
; 982  :             _Change_array(_Newvec, _Newsize, _Newcapacity);
; 983  :         } else { // Attempt to provide the strong guarantee for EmplaceConstructible failure.
; 984  :                  // If we encounter copy/move construction/assignment failure, provide the basic guarantee.
; 985  :                  // (For one-at-back, this provides the strong guarantee.)
; 986  : 
; 987  :             const auto _Affected_elements = static_cast<size_type>(_Oldlast - _Whereptr);

	mov	eax, ebx
	sub	eax, edi
	sar	eax, 2
	lea	esi, DWORD PTR [edx*4]
	mov	DWORD PTR tv927[ebp], esi

; 988  : 
; 989  :             if (_Count < _Affected_elements) { // some affected elements must be assigned

	cmp	edx, eax
	mov	esi, DWORD PTR __First$[ebp]
	jae	SHORT $LN10@Insert_ran

; 990  :                 _Mylast = _Umove(_Oldlast - _Count, _Oldlast, _Oldlast);

	mov	eax, ebx
	lea	ecx, DWORD PTR [edx*4]
	sub	eax, ecx
	mov	DWORD PTR __Count$1$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	edx, ebx

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	cmp	eax, ebx
	je	SHORT $LN69@Insert_ran

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	ecx, eax
$LL70@Insert_ran:

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax

; 1621 :         ++_Last;

	add	edx, 4
	add	ecx, 4

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	cmp	ecx, ebx
	jne	SHORT $LL70@Insert_ran
	mov	eax, DWORD PTR __Count$1$[ebp]
$LN69@Insert_ran:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 990  :                 _Mylast = _Umove(_Oldlast - _Count, _Oldlast, _Oldlast);

	mov	ecx, DWORD PTR __Mylast$[ebp]
	mov	DWORD PTR [ecx], edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4254 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	sub	eax, edi

; 4255 :     auto _Result                = _CSTD memmove(_Dest_ch - _Count, _First_ch, _Count);

	push	eax
	push	edi
	sub	ebx, eax
	push	ebx
	call	_memmove
	add	esp, 12					; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 994  :                 _TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 2
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1642 :     auto _UFirst      = _Get_unwrapped(_First);

	mov	DWORD PTR __UFirst$8[ebp], esi

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	DWORD PTR __Backout$5[ebp], edi
	mov	DWORD PTR __Backout$5[ebp+4], edi
	mov	eax, DWORD PTR _this$1$[ebp]
	mov	DWORD PTR __Backout$5[ebp+8], eax

; 1658 :     for (; _UFirst != _ULast; ++_UFirst) {

	mov	edx, DWORD PTR __Last$[ebp]
$LL89@Insert_ran:
	cmp	esi, edx
	je	SHORT $LN114@Insert_ran

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [edi], eax

; 1621 :         ++_Last;

	add	edi, 4
	mov	DWORD PTR __Backout$5[ebp+4], edi

; 1658 :     for (; _UFirst != _ULast; ++_UFirst) {

	add	esi, 4
	mov	DWORD PTR __UFirst$8[ebp], esi
	jmp	SHORT $LL89@Insert_ran
$LN10@Insert_ran:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1015 :                 const pointer _Relocated = _Whereptr + _Count;

	mov	edx, DWORD PTR tv927[ebp]
	add	edx, edi
	mov	DWORD PTR __Relocated$10[ebp], edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	cmp	edi, ebx

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	je	SHORT $LN101@Insert_ran
	mov	ecx, edi
$LL102@Insert_ran:

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax

; 1621 :         ++_Last;

	add	edx, 4

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	add	ecx, 4
	cmp	ecx, ebx
	jne	SHORT $LL102@Insert_ran
	mov	ecx, DWORD PTR __Last$[ebp]
$LN101@Insert_ran:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1016 :                 _Mylast                  = _Umove(_Whereptr, _Oldlast, _Relocated);

	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	DWORD PTR [eax], edx

; 1017 :                 _Destroy(_Whereptr, _Oldlast);
; 1018 : 
; 1019 :                 _TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 6
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1642 :     auto _UFirst      = _Get_unwrapped(_First);

	mov	DWORD PTR __UFirst$7[ebp], esi

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	DWORD PTR __Backout$4[ebp], edi
	mov	DWORD PTR __Backout$4[ebp+4], edi
	mov	eax, DWORD PTR _this$1$[ebp]
	mov	DWORD PTR __Backout$4[ebp+8], eax
$LL115@Insert_ran:

; 1658 :     for (; _UFirst != _ULast; ++_UFirst) {

	cmp	esi, ecx
	je	SHORT $LN114@Insert_ran

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [edi], eax

; 1621 :         ++_Last;

	add	edi, 4
	mov	DWORD PTR __Backout$4[ebp+4], edi

; 1658 :     for (; _UFirst != _ULast; ++_UFirst) {

	add	esi, 4
	mov	DWORD PTR __UFirst$7[ebp], esi
	jmp	SHORT $LL115@Insert_ran
$LN114@Insert_ran:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1042 :     }

	mov	DWORD PTR __Backout$4[ebp], edi
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
__catch$??$_Insert_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@1Uforward_iterator_tag@1@@Z$6:

; 1020 :                 _Ucopy(_First, _Last, _Whereptr);
; 1021 :                 _CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 1022 :                 // glue the broken pieces back together
; 1023 : 
; 1024 :                 _TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 8

; 1025 :                 _Umove(_Relocated, _Mylast, _Whereptr);

	push	DWORD PTR __Whereptr$[ebp]
	mov	esi, DWORD PTR __Mylast$[ebp]
	push	DWORD PTR [esi]
	push	DWORD PTR __Relocated$10[ebp]
	call	?_Umove@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU34@00@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Umove
	mov	DWORD PTR __$EHRec$[ebp+12], 7

; 1026 :                 _CATCH_ALL
; 1027 :                 // vaporize the detached piece
; 1028 :                 _Orphan_range(_Whereptr, _Oldlast);
; 1029 :                 _Destroy(_Relocated, _Mylast);
; 1030 :                 _Mylast = _Whereptr;
; 1031 :                 _RERAISE;
; 1032 :                 _CATCH_END
; 1033 : 
; 1034 :                 _Destroy(_Relocated, _Mylast);
; 1035 :                 _Mylast = _Oldlast;

	mov	eax, DWORD PTR __Oldlast$[ebp]
	mov	DWORD PTR [esi], eax

; 1036 :                 _RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8
$LN144@Insert_ran:

; 954  :                 _Xlength();

	call	?_Xlength@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@CAXXZ ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Xlength
__catch$??$_Insert_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@1Uforward_iterator_tag@1@@Z$0:

; 975  :             }
; 976  :             _CATCH_ALL
; 977  :             _Destroy(_Constructed_first, _Constructed_last);
; 978  :             _Getal().deallocate(_Newvec, _Newcapacity);

	push	ecx
	push	DWORD PTR __Newvec$11[ebp]
	call	?deallocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@I@Z ; doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *>::deallocate

; 979  :             _RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8
__catch$??$_Insert_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@1Uforward_iterator_tag@1@@Z$2:

; 995  :                 _Ucopy(_First, _Last, _Whereptr);
; 996  :                 _CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 997  :                 // glue the broken pieces back together
; 998  : 
; 999  :                 _TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 4

; 1000 :                 _Umove(_Whereptr + _Count, _Whereptr + 2 * _Count, _Whereptr);

	mov	ecx, DWORD PTR __Whereptr$[ebp]
	mov	eax, DWORD PTR __Count$[ebp]
	lea	edi, DWORD PTR [ecx+eax*8]
	lea	esi, DWORD PTR [ecx+eax*4]
	push	ecx
	push	edi
	push	esi
	call	?_Umove@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU34@00@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Umove
	mov	DWORD PTR __$EHRec$[ebp+12], 3

; 1001 :                 _CATCH_ALL
; 1002 :                 // vaporize the detached piece
; 1003 :                 _Orphan_range(_Whereptr, _Oldlast);
; 1004 :                 _Destroy(_Whereptr + _Count, _Mylast);
; 1005 :                 _Mylast = _Whereptr;
; 1006 :                 _RERAISE;
; 1007 :                 _CATCH_END
; 1008 : 
; 1009 :                 _Move_unchecked(_Whereptr + 2 * _Count, _Mylast, _Whereptr + _Count);

	push	esi
	mov	esi, DWORD PTR __Mylast$[ebp]
	mov	edx, DWORD PTR [esi]
	mov	ecx, edi
	call	??$_Move_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z ; std::_Move_unchecked<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *>
	add	esp, 4

; 1010 :                 _Destroy(_Oldlast, _Mylast);
; 1011 :                 _Mylast = _Oldlast;

	mov	eax, DWORD PTR __Oldlast$[ebp]
	mov	DWORD PTR [esi], eax

; 1012 :                 _RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8
__catch$??$_Insert_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@1Uforward_iterator_tag@1@@Z$7:
__catch$??$_Insert_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@1Uforward_iterator_tag@1@@Z$3:

; 1042 :     }

	mov	ecx, DWORD PTR __Whereptr$[ebp]
	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	DWORD PTR [eax], ecx
	push	0
	push	0
	call	__CxxThrowException@8
$LN141@Insert_ran:
	int	3
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Insert_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@1Uforward_iterator_tag@1@@Z:
	npad	1
	npad	1
	mov	eax, OFFSET __ehfuncinfo$??$_Insert_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@1Uforward_iterator_tag@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Insert_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@1Uforward_iterator_tag@1@@Z ENDP ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Insert_range<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *>
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0@Z
_TEXT	SEGMENT
??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0@Z PROC ; std::_Adl_verify_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> > > >, COMDAT
; __First$dead$ = ecx
; __Last$dead$ = edx

; 1259 :     // check that [_First, _Last) forms an iterator range
; 1260 :     if constexpr (_Range_verifiable_v<_Iter, _Sentinel>) {
; 1261 :         _Verify_range(_First, _Last);
; 1262 :     }
; 1263 : }

	ret	0
??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0@Z ENDP ; std::_Adl_verify_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Pass_fn@P6A_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z$0A@@std@@YAP6A_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0@ZP6A_N00@Z@Z
_TEXT	SEGMENT
??$_Pass_fn@P6A_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z$0A@@std@@YAP6A_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0@ZP6A_N00@Z@Z PROC ; std::_Pass_fn<bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *),0>, COMDAT
; __Val$ = ecx

; 253  :     return _Val;

	mov	eax, ecx

; 254  : }

	ret	0
??$_Pass_fn@P6A_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z$0A@@std@@YAP6A_NPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0@ZP6A_N00@Z@Z ENDP ; std::_Pass_fn<bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *),0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z
_TEXT	SEGMENT
__Last$1$ = -28						; size = 4
__Hole$1$ = -24						; size = 4
__Val$1$ = -24						; size = 4
__Hole$1$ = -20						; size = 4
__Val$1$ = -20						; size = 4
__Mid$1$ = -16						; size = 4
__Max_sequence_non_leaf$1$ = -16			; size = 4
__First$1$ = -12					; size = 4
__Bottom$1$ = -12					; size = 4
tv742 = -8						; size = 4
__Val$1 = -8						; size = 4
__Mid$2 = -8						; size = 8
__Ideal$ = 8						; size = 4
__Pred$ = 12						; size = 4
??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z PROC ; std::_Sort_unchecked<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 7046 : _CONSTEXPR20 void _Sort_unchecked(_RanIt _First, _RanIt _Last, _Iter_diff_t<_RanIt> _Ideal, _Pr _Pred) {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 28					; 0000001cH
	push	ebx
	mov	ebx, edx
	push	esi
	mov	esi, ecx
	mov	DWORD PTR __Last$1$[esp+36], ebx

; 7047 :     // order [_First, _Last)
; 7048 :     for (;;) {
; 7049 :         if (_Last - _First <= _ISORT_MAX) { // small

	mov	ecx, DWORD PTR __Pred$[ebp]
	mov	eax, ebx
	sub	eax, esi
	mov	DWORD PTR __First$1$[esp+36], esi
	and	eax, -4					; fffffffcH
	push	edi
	cmp	eax, 128				; 00000080H
	jle	SHORT $LN165@Sort_unche
	mov	edi, DWORD PTR __Ideal$[ebp]
	npad	4
$LL2@Sort_unche:

; 7050 :             _Insertion_sort_unchecked(_First, _Last, _Pred);
; 7051 :             return;
; 7052 :         }
; 7053 : 
; 7054 :         if (_Ideal <= 0) { // heap sort if too many divisions

	test	edi, edi
	jle	$LN166@Sort_unche

; 7055 :             _Make_heap_unchecked(_First, _Last, _Pred);
; 7056 :             _Sort_heap_unchecked(_First, _Last, _Pred);
; 7057 :             return;
; 7058 :         }
; 7059 : 
; 7060 :         // divide and conquer by quicksort
; 7061 :         auto _Mid = _Partition_by_median_guess_unchecked(_First, _Last, _Pred);

	push	ecx
	push	ebx
	mov	edx, esi
	lea	ecx, DWORD PTR __Mid$2[esp+48]
	call	??$_Partition_by_median_guess_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YA?AU?$pair@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@0@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU23@1@Z@Z ; std::_Partition_by_median_guess_unchecked<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *)>

; 7062 : 
; 7063 :         _Ideal = (_Ideal >> 1) + (_Ideal >> 2); // allow 1.5 log2(N) divisions
; 7064 : 
; 7065 :         if (_Mid.first - _First < _Last - _Mid.second) { // loop on second half

	mov	edx, DWORD PTR __Mid$2[esp+48]
	mov	eax, edi
	sar	eax, 2
	mov	ecx, ebx
	sub	ecx, DWORD PTR __Mid$2[esp+52]
	add	esp, 8
	sar	edi, 1
	and	ecx, -4					; fffffffcH
	add	edi, eax
	mov	eax, edx
	sub	eax, esi
	and	eax, -4					; fffffffcH
	cmp	eax, ecx
	mov	eax, DWORD PTR __Pred$[ebp]
	push	eax
	push	edi
	jge	SHORT $LN7@Sort_unche

; 7066 :             _Sort_unchecked(_First, _Mid.first, _Ideal, _Pred);

	mov	ecx, esi
	call	??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z ; std::_Sort_unchecked<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *)>

; 7067 :             _First = _Mid.second;

	mov	esi, DWORD PTR __Mid$2[esp+52]
	mov	DWORD PTR __First$1$[esp+48], esi

; 7068 :         } else { // loop on first half

	jmp	SHORT $LN190@Sort_unche
$LN7@Sort_unche:

; 7069 :             _Sort_unchecked(_Mid.second, _Last, _Ideal, _Pred);

	mov	ecx, DWORD PTR __Mid$2[esp+52]
	mov	edx, ebx
	call	??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z ; std::_Sort_unchecked<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *)>

; 7070 :             _Last = _Mid.first;

	mov	ebx, DWORD PTR __Mid$2[esp+48]
	mov	DWORD PTR __Last$1$[esp+48], ebx
$LN190@Sort_unche:

; 7047 :     // order [_First, _Last)
; 7048 :     for (;;) {
; 7049 :         if (_Last - _First <= _ISORT_MAX) { // small

	mov	ecx, DWORD PTR __Pred$[ebp]
	mov	eax, ebx
	sub	eax, esi
	add	esp, 8
	and	eax, -4					; fffffffcH
	cmp	eax, 128				; 00000080H
	jg	SHORT $LL2@Sort_unche
$LN165@Sort_unche:

; 6921 :     if (_First != _Last) {

	cmp	esi, ebx
	je	$LN45@Sort_unche

; 6922 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

	lea	ebx, DWORD PTR [esi+4]
	mov	DWORD PTR __Mid$1$[esp+40], ebx
	cmp	ebx, DWORD PTR __Last$1$[esp+40]
	je	$LN45@Sort_unche
	npad	1
$LL11@Sort_unche:

; 6923 :             _BidIt _Hole               = _Mid;
; 6924 :             _Iter_value_t<_BidIt> _Val = _STD move(*_Mid);
; 6925 : 
; 6926 :             if (_DEBUG_LT_PRED(_Pred, _Val, *_First)) { // found new earliest element, move to front

	push	DWORD PTR [esi]
	mov	edi, DWORD PTR [ebx]
	push	edi
	mov	DWORD PTR __Hole$1$[esp+48], ebx
	mov	DWORD PTR __Val$1$[esp+48], edi
	call	ecx
	add	esp, 8
	test	al, al
	je	$LN18@Sort_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4254 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	mov	ecx, ebx

; 4255 :     auto _Result                = _CSTD memmove(_Dest_ch - _Count, _First_ch, _Count);

	mov	eax, ebx
	sub	ecx, esi
	push	ecx
	sub	eax, ecx
	add	eax, 4
	push	esi
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6928 :                 *_First = _STD move(_Val);

	mov	DWORD PTR [esi], edi

; 6929 :             } else { // look for insertion point after first

	jmp	$LN19@Sort_unche
$LN166@Sort_unche:

; 5547 :     _Diff _Bottom = _Last - _First;

	sub	ebx, esi
	mov	eax, ebx
	mov	DWORD PTR __Last$1$[esp+40], ebx
	sar	eax, 2

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	mov	edx, eax
	mov	DWORD PTR __Bottom$1$[esp+40], eax
	sar	edx, 1
	test	edx, edx
	jle	$LN29@Sort_unche
	dec	eax
	mov	DWORD PTR tv742[esp+40], eax
	sar	eax, 1
	mov	DWORD PTR __Max_sequence_non_leaf$1$[esp+40], eax
	npad	3
$LL28@Sort_unche:

; 5549 :         // reheap top half, bottom to top
; 5550 :         --_Hole;
; 5551 :         _Iter_value_t<_RanIt> _Val = _STD move(*(_First + _Hole));

	mov	ebx, DWORD PTR [esi+edx*4-4]
	dec	edx
	mov	DWORD PTR __Val$1$[esp+40], ebx

; 5552 :         _Pop_heap_hole_by_index(_First, _Hole, _Bottom, _STD move(_Val), _Pred);

	mov	ebx, edx
	mov	DWORD PTR __Hole$1$[esp+40], edx

; 5381 :     _Diff _Idx       = _Hole;

	mov	edi, edx

; 5382 : 
; 5383 :     // Check whether _Idx can have a child before calculating that child's index, since
; 5384 :     // calculating the child's index can trigger integer overflows
; 5385 :     const _Diff _Max_sequence_non_leaf = (_Bottom - 1) >> 1; // shift for codegen
; 5386 :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

	cmp	edx, eax
	jge	SHORT $LN34@Sort_unche
	npad	11
$LL33@Sort_unche:

; 5387 :         _Idx = 2 * _Idx + 2;
; 5388 :         if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1)))) {

	push	DWORD PTR [esi+edi*8+4]
	lea	edi, DWORD PTR [edi*2+2]
	push	DWORD PTR [esi+edi*4]
	call	ecx
	add	esp, 8
	test	al, al
	je	SHORT $LN35@Sort_unche

; 5389 :             --_Idx;

	dec	edi
$LN35@Sort_unche:

; 5390 :         }
; 5391 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [esi+edi*4]
	mov	ecx, DWORD PTR __Pred$[ebp]
	mov	DWORD PTR [esi+ebx*4], eax

; 5392 :         _Hole             = _Idx;

	mov	ebx, edi
	mov	eax, DWORD PTR __Max_sequence_non_leaf$1$[esp+40]
	cmp	edi, eax
	jl	SHORT $LL33@Sort_unche
	mov	edx, DWORD PTR __Hole$1$[esp+40]
$LN34@Sort_unche:

; 5393 :     }
; 5394 : 
; 5395 :     if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it

	cmp	edi, eax
	jne	SHORT $LN36@Sort_unche
	mov	eax, DWORD PTR __Bottom$1$[esp+40]
	test	al, 1
	jne	SHORT $LN36@Sort_unche

; 5396 :         *(_First + _Hole) = _STD move(*(_First + (_Bottom - 1)));

	mov	eax, DWORD PTR [esi+eax*4-4]
	mov	DWORD PTR [esi+ebx*4], eax

; 5397 :         _Hole             = _Bottom - 1;

	mov	ebx, DWORD PTR tv742[esp+40]
$LN36@Sort_unche:

; 5268 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

	cmp	edx, ebx
	jge	SHORT $LN40@Sort_unche
	npad	6
$LL41@Sort_unche:
	push	DWORD PTR __Val$1$[esp+40]
	lea	edi, DWORD PTR [ebx-1]
	sar	edi, 1
	push	DWORD PTR [esi+edi*4]
	call	ecx
	mov	edx, DWORD PTR __Hole$1$[esp+48]
	add	esp, 8
	test	al, al
	je	SHORT $LN40@Sort_unche

; 5269 :          _Idx = (_Hole - 1) >> 1) { // shift for codegen
; 5270 :         // move _Hole up to parent
; 5271 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [esi+edi*4]
	mov	ecx, DWORD PTR __Pred$[ebp]
	mov	DWORD PTR [esi+ebx*4], eax

; 5272 :         _Hole             = _Idx;

	mov	ebx, edi
	cmp	edx, edi
	jl	SHORT $LL41@Sort_unche
$LN40@Sort_unche:

; 5273 :     }
; 5274 : 
; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	eax, DWORD PTR __Val$1$[esp+40]

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	mov	ecx, DWORD PTR __Pred$[ebp]

; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	DWORD PTR [esi+ebx*4], eax

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	mov	eax, DWORD PTR __Max_sequence_non_leaf$1$[esp+40]
	test	edx, edx
	jg	$LL28@Sort_unche
	mov	ebx, DWORD PTR __Last$1$[esp+40]
	mov	eax, DWORD PTR __Bottom$1$[esp+40]
$LN29@Sort_unche:

; 5774 :     for (; _Last - _First >= 2; --_Last) {

	cmp	eax, 2
	jl	$LN45@Sort_unche
	npad	1
$LL46@Sort_unche:

; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	eax, DWORD PTR [ebx+esi-4]

; 5410 :     _Pop_heap_hole_by_index(

	xor	edx, edx

; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	DWORD PTR __Val$1[esp+40], eax

; 5408 :     *_Dest      = _STD move(*_First);

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [ebx+esi-4], eax

; 5409 :     using _Diff = _Iter_diff_t<_RanIt>;
; 5410 :     _Pop_heap_hole_by_index(

	lea	eax, DWORD PTR __Val$1[esp+40]
	push	ecx
	push	eax
	lea	eax, DWORD PTR [ebx-4]
	mov	ecx, esi
	sar	eax, 2
	push	eax
	call	??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ; std::_Pop_heap_hole_by_index<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *)>

; 5774 :     for (; _Last - _First >= 2; --_Last) {

	mov	ecx, DWORD PTR __Pred$[ebp]
	sub	ebx, 4
	mov	eax, ebx

; 5410 :     _Pop_heap_hole_by_index(

	add	esp, 12					; 0000000cH

; 5774 :     for (; _Last - _First >= 2; --_Last) {

	and	eax, -4					; fffffffcH
	cmp	eax, 8
	jge	SHORT $LL46@Sort_unche

; 7071 :         }
; 7072 :     }
; 7073 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN18@Sort_unche:

; 6930 :                 for (_BidIt _Prev = _Hole; _DEBUG_LT_PRED(_Pred, _Val, *--_Prev); _Hole = _Prev) {

	push	DWORD PTR [ebx-4]
	mov	eax, DWORD PTR __Pred$[ebp]
	lea	edi, DWORD PTR [ebx-4]
	push	DWORD PTR __Val$1$[esp+44]
	call	eax
	add	esp, 8
	test	al, al
	je	SHORT $LN15@Sort_unche
	mov	esi, DWORD PTR __Val$1$[esp+40]
	mov	ebx, DWORD PTR __Hole$1$[esp+40]
	npad	4
$LL16@Sort_unche:

; 6931 :                     *_Hole = _STD move(*_Prev); // move hole down

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [ebx], eax
	mov	ebx, edi
	push	DWORD PTR [edi-4]
	sub	edi, 4
	push	esi
	call	DWORD PTR __Pred$[ebp]
	add	esp, 8
	test	al, al
	jne	SHORT $LL16@Sort_unche
	mov	esi, DWORD PTR __First$1$[esp+40]
	mov	DWORD PTR __Hole$1$[esp+40], ebx
	mov	ebx, DWORD PTR __Mid$1$[esp+40]
$LN15@Sort_unche:

; 6932 :                 }
; 6933 : 
; 6934 :                 *_Hole = _STD move(_Val); // insert element in hole

	mov	ecx, DWORD PTR __Hole$1$[esp+40]
	mov	eax, DWORD PTR __Val$1$[esp+40]
	mov	DWORD PTR [ecx], eax
$LN19@Sort_unche:

; 6922 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

	mov	ecx, DWORD PTR __Pred$[ebp]
	add	ebx, 4
	mov	DWORD PTR __Mid$1$[esp+40], ebx
	cmp	ebx, DWORD PTR __Last$1$[esp+40]
	jne	$LL11@Sort_unche
$LN45@Sort_unche:

; 7071 :         }
; 7072 :     }
; 7073 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z ENDP ; std::_Sort_unchecked<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Insert_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@1Uforward_iterator_tag@1@@Z
_TEXT	SEGMENT
__Backout$4 = -68					; size = 12
__Backout$5 = -68					; size = 12
__Backout$6 = -68					; size = 12
__UFirst$7 = -56					; size = 4
__UFirst$8 = -52					; size = 4
__UFirst$9 = -48					; size = 4
__Oldcapacity$1$ = -44					; size = 4
__Whereoff$1$ = -44					; size = 4
tv927 = -44						; size = 4
__Oldlast$ = -40					; size = 4
__Count$ = -36						; size = 4
__Newsize$1$ = -32					; size = 4
__Whereptr$ = -32					; size = 4
_this$1$ = -28						; size = 4
__Oldfirst$1$ = -24					; size = 4
__Newcapacity$1$ = -20					; size = 4
__Mylast$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Where$ = 8						; size = 4
__Count$1$ = 12						; size = 4
__Relocated$10 = 12					; size = 4
__Newvec$11 = 12					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Insert_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@1Uforward_iterator_tag@1@@Z PROC ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Insert_range<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *>, COMDAT
; _this$ = ecx

; 937  :     _CONSTEXPR20_CONTAINER void _Insert_range(const_iterator _Where, _Iter _First, _Iter _Last, forward_iterator_tag) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Insert_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@1Uforward_iterator_tag@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 56					; 00000038H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	eax, ecx
	mov	DWORD PTR _this$1$[ebp], eax

; 938  :         // insert forward range [_First, _Last) at _Where
; 939  :         const pointer _Whereptr = _Where._Ptr;

	mov	edi, DWORD PTR __Where$[ebp]
	mov	DWORD PTR __Whereptr$[ebp], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 1525 :         return _Last - _First; // assume the iterator will do debug checking

	mov	ecx, DWORD PTR __Last$[ebp]
	mov	edx, ecx
	mov	esi, DWORD PTR __First$[ebp]
	sub	edx, esi
	sar	edx, 2
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 940  :         const auto _Count       = _Convert_size<size_type>(static_cast<size_t>(_STD distance(_First, _Last)));

	mov	DWORD PTR __Count$[ebp], edx

; 941  : 
; 942  :         auto& _My_data   = _Mypair._Myval2;
; 943  :         pointer& _Mylast = _My_data._Mylast;

	lea	ebx, DWORD PTR [eax+4]
	mov	DWORD PTR __Mylast$[ebp], ebx

; 944  : 
; 945  :         const pointer _Oldfirst     = _My_data._Myfirst;

	mov	ebx, DWORD PTR [eax]
	mov	DWORD PTR __Oldfirst$1$[ebp], ebx

; 946  :         const pointer _Oldlast      = _Mylast;

	mov	ebx, DWORD PTR [eax+4]
	mov	DWORD PTR __Oldlast$[ebp], ebx

; 947  :         const auto _Unused_capacity = static_cast<size_type>(_My_data._Myend - _Oldlast);

	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR __Oldcapacity$1$[ebp], eax
	sub	eax, ebx
	sar	eax, 2

; 948  : 
; 949  :         if (_Count == 0) { // nothing to do, avoid invalidating iterators

	test	edx, edx
	je	$LN35@Insert_ran

; 950  :         } else if (_Count > _Unused_capacity) { // reallocate

	cmp	edx, eax
	jbe	$LN4@Insert_ran

; 951  :             const auto _Oldsize = static_cast<size_type>(_Oldlast - _Oldfirst);

	mov	ecx, ebx
	sub	ecx, DWORD PTR __Oldfirst$1$[ebp]
	sar	ecx, 2

; 952  : 
; 953  :             if (_Count > max_size() - _Oldsize) {

	mov	eax, 1073741823				; 3fffffffH
	sub	eax, ecx
	cmp	edx, eax
	ja	$LN144@Insert_ran

; 955  :             }
; 956  : 
; 957  :             const size_type _Newsize     = _Oldsize + _Count;

	lea	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR __Newsize$1$[ebp], eax

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	eax, DWORD PTR __Oldcapacity$1$[ebp]
	sub	eax, DWORD PTR __Oldfirst$1$[ebp]
	sar	eax, 2

; 1675 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	mov	edx, eax
	shr	edx, 1
	mov	ecx, 1073741823				; 3fffffffH
	sub	ecx, edx
	cmp	eax, ecx
	jbe	SHORT $LN40@Insert_ran

; 1676 :             return _Max; // geometric growth would overflow

	mov	eax, 1073741823				; 3fffffffH
	jmp	SHORT $LN142@Insert_ran
$LN40@Insert_ran:

; 1677 :         }
; 1678 : 
; 1679 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	add	eax, edx

; 1680 : 
; 1681 :         if (_Geometric < _Newsize) {

	cmp	eax, DWORD PTR __Newsize$1$[ebp]
	cmovb	eax, DWORD PTR __Newsize$1$[ebp]
$LN142@Insert_ran:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h

; 33   : 								pointer					allocate		(size_type n, const void* p=0) const	{	return (T*)dlmalloc(sizeof(T)*(u32)n);	}

	mov	DWORD PTR __Newcapacity$1$[ebp], eax
	lea	ecx, DWORD PTR [eax*4]
	call	_dlmalloc
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 960  :             const pointer _Newvec           = _Getal().allocate(_Newcapacity);

	mov	DWORD PTR __Newvec$11[ebp], eax

; 961  :             const auto _Whereoff            = static_cast<size_type>(_Whereptr - _Oldfirst);

	mov	ecx, edi
	sub	ecx, DWORD PTR __Oldfirst$1$[ebp]
	sar	ecx, 2
	mov	DWORD PTR __Whereoff$1$[ebp], ecx

; 962  :             const pointer _Constructed_last = _Newvec + _Whereoff + _Count;
; 963  :             pointer _Constructed_first      = _Constructed_last;
; 964  : 
; 965  :             _TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 966  :             _Ucopy(_First, _Last, _Newvec + _Whereoff);

	lea	ecx, DWORD PTR [eax+ecx*4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1642 :     auto _UFirst      = _Get_unwrapped(_First);

	mov	DWORD PTR __UFirst$9[ebp], esi

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	DWORD PTR __Backout$6[ebp], ecx
	mov	DWORD PTR __Backout$6[ebp+4], ecx
	mov	eax, DWORD PTR _this$1$[ebp]
	mov	DWORD PTR __Backout$6[ebp+8], eax

; 1658 :     for (; _UFirst != _ULast; ++_UFirst) {

	mov	edx, DWORD PTR __Last$[ebp]
$LL52@Insert_ran:
	cmp	esi, edx
	je	SHORT $LN51@Insert_ran

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [ecx], eax

; 1621 :         ++_Last;

	add	ecx, 4
	mov	DWORD PTR __Backout$6[ebp+4], ecx

; 1658 :     for (; _UFirst != _ULast; ++_UFirst) {

	add	esi, 4
	mov	DWORD PTR __UFirst$9[ebp], esi
	jmp	SHORT $LL52@Insert_ran
$LN51@Insert_ran:

; 1625 :         _First = _Last;

	mov	DWORD PTR __Backout$6[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 969  :             if (_Count == 1 && _Whereptr == _Oldlast) { // one at back, provide strong guarantee

	cmp	DWORD PTR __Count$[ebp], 1
	jne	SHORT $LN8@Insert_ran
	cmp	edi, ebx
	jne	SHORT $LN8@Insert_ran

; 970  :                 _Umove_if_noexcept(_Oldfirst, _Oldlast, _Newvec);

	mov	esi, DWORD PTR __Newvec$11[ebp]
	push	esi
	push	ebx
	push	DWORD PTR __Oldfirst$1$[ebp]
	call	?_Umove_if_noexcept@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@00@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Umove_if_noexcept

; 971  :             } else { // provide basic guarantee

	jmp	SHORT $LN9@Insert_ran
$LN8@Insert_ran:

; 972  :                 _Umove(_Oldfirst, _Whereptr, _Newvec);

	mov	esi, DWORD PTR __Newvec$11[ebp]
	push	esi
	push	edi
	push	DWORD PTR __Oldfirst$1$[ebp]
	call	?_Umove@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU34@00@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Umove

; 973  :                 _Constructed_first = _Newvec;
; 974  :                 _Umove(_Whereptr, _Oldlast, _Newvec + _Whereoff + _Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	eax, DWORD PTR __Whereoff$1$[ebp]
	add	eax, ecx
	lea	eax, DWORD PTR [esi+eax*4]
	push	eax
	push	ebx
	push	edi
	call	?_Umove@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU34@00@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Umove
$LN9@Insert_ran:
	mov	DWORD PTR __$EHRec$[ebp+12], -1

; 1732 :         if (_Myfirst) { // destroy and deallocate old array

	mov	ebx, DWORD PTR _this$1$[ebp]
	mov	ecx, DWORD PTR [ebx]
	test	ecx, ecx
	je	SHORT $LN61@Insert_ran
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h

; 35   : 								void					deallocate		(pointer p, size_type n) const			{	dlfree	(p);				}

	call	_dlfree
$LN61@Insert_ran:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1737 :         _Myfirst = _Newvec;

	mov	DWORD PTR [ebx], esi

; 1738 :         _Mylast  = _Newvec + _Newsize;

	mov	eax, DWORD PTR __Newsize$1$[ebp]
	lea	eax, DWORD PTR [esi+eax*4]
	mov	DWORD PTR [ebx+4], eax

; 1739 :         _Myend   = _Newvec + _Newcapacity;

	mov	eax, DWORD PTR __Newcapacity$1$[ebp]
	lea	eax, DWORD PTR [esi+eax*4]
	mov	DWORD PTR [ebx+8], eax
$LN35@Insert_ran:

; 1042 :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN4@Insert_ran:

; 980  :             _CATCH_END
; 981  : 
; 982  :             _Change_array(_Newvec, _Newsize, _Newcapacity);
; 983  :         } else { // Attempt to provide the strong guarantee for EmplaceConstructible failure.
; 984  :                  // If we encounter copy/move construction/assignment failure, provide the basic guarantee.
; 985  :                  // (For one-at-back, this provides the strong guarantee.)
; 986  : 
; 987  :             const auto _Affected_elements = static_cast<size_type>(_Oldlast - _Whereptr);

	mov	eax, ebx
	sub	eax, edi
	sar	eax, 2
	lea	esi, DWORD PTR [edx*4]
	mov	DWORD PTR tv927[ebp], esi

; 988  : 
; 989  :             if (_Count < _Affected_elements) { // some affected elements must be assigned

	cmp	edx, eax
	mov	esi, DWORD PTR __First$[ebp]
	jae	SHORT $LN10@Insert_ran

; 990  :                 _Mylast = _Umove(_Oldlast - _Count, _Oldlast, _Oldlast);

	mov	eax, ebx
	lea	ecx, DWORD PTR [edx*4]
	sub	eax, ecx
	mov	DWORD PTR __Count$1$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	edx, ebx

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	cmp	eax, ebx
	je	SHORT $LN69@Insert_ran

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	ecx, eax
$LL70@Insert_ran:

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax

; 1621 :         ++_Last;

	add	edx, 4
	add	ecx, 4

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	cmp	ecx, ebx
	jne	SHORT $LL70@Insert_ran
	mov	eax, DWORD PTR __Count$1$[ebp]
$LN69@Insert_ran:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 990  :                 _Mylast = _Umove(_Oldlast - _Count, _Oldlast, _Oldlast);

	mov	ecx, DWORD PTR __Mylast$[ebp]
	mov	DWORD PTR [ecx], edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4254 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	sub	eax, edi

; 4255 :     auto _Result                = _CSTD memmove(_Dest_ch - _Count, _First_ch, _Count);

	push	eax
	push	edi
	sub	ebx, eax
	push	ebx
	call	_memmove
	add	esp, 12					; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 994  :                 _TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 2
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1642 :     auto _UFirst      = _Get_unwrapped(_First);

	mov	DWORD PTR __UFirst$8[ebp], esi

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	DWORD PTR __Backout$5[ebp], edi
	mov	DWORD PTR __Backout$5[ebp+4], edi
	mov	eax, DWORD PTR _this$1$[ebp]
	mov	DWORD PTR __Backout$5[ebp+8], eax

; 1658 :     for (; _UFirst != _ULast; ++_UFirst) {

	mov	edx, DWORD PTR __Last$[ebp]
$LL89@Insert_ran:
	cmp	esi, edx
	je	SHORT $LN114@Insert_ran

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [edi], eax

; 1621 :         ++_Last;

	add	edi, 4
	mov	DWORD PTR __Backout$5[ebp+4], edi

; 1658 :     for (; _UFirst != _ULast; ++_UFirst) {

	add	esi, 4
	mov	DWORD PTR __UFirst$8[ebp], esi
	jmp	SHORT $LL89@Insert_ran
$LN10@Insert_ran:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1015 :                 const pointer _Relocated = _Whereptr + _Count;

	mov	edx, DWORD PTR tv927[ebp]
	add	edx, edi
	mov	DWORD PTR __Relocated$10[ebp], edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	cmp	edi, ebx

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	je	SHORT $LN101@Insert_ran
	mov	ecx, edi
$LL102@Insert_ran:

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax

; 1621 :         ++_Last;

	add	edx, 4

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	add	ecx, 4
	cmp	ecx, ebx
	jne	SHORT $LL102@Insert_ran
	mov	ecx, DWORD PTR __Last$[ebp]
$LN101@Insert_ran:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1016 :                 _Mylast                  = _Umove(_Whereptr, _Oldlast, _Relocated);

	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	DWORD PTR [eax], edx

; 1017 :                 _Destroy(_Whereptr, _Oldlast);
; 1018 : 
; 1019 :                 _TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 6
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1642 :     auto _UFirst      = _Get_unwrapped(_First);

	mov	DWORD PTR __UFirst$7[ebp], esi

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	DWORD PTR __Backout$4[ebp], edi
	mov	DWORD PTR __Backout$4[ebp+4], edi
	mov	eax, DWORD PTR _this$1$[ebp]
	mov	DWORD PTR __Backout$4[ebp+8], eax
$LL115@Insert_ran:

; 1658 :     for (; _UFirst != _ULast; ++_UFirst) {

	cmp	esi, ecx
	je	SHORT $LN114@Insert_ran

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [edi], eax

; 1621 :         ++_Last;

	add	edi, 4
	mov	DWORD PTR __Backout$4[ebp+4], edi

; 1658 :     for (; _UFirst != _ULast; ++_UFirst) {

	add	esi, 4
	mov	DWORD PTR __UFirst$7[ebp], esi
	jmp	SHORT $LL115@Insert_ran
$LN114@Insert_ran:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1042 :     }

	mov	DWORD PTR __Backout$4[ebp], edi
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
__catch$??$_Insert_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@1Uforward_iterator_tag@1@@Z$6:

; 1020 :                 _Ucopy(_First, _Last, _Whereptr);
; 1021 :                 _CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 1022 :                 // glue the broken pieces back together
; 1023 : 
; 1024 :                 _TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 8

; 1025 :                 _Umove(_Relocated, _Mylast, _Whereptr);

	push	DWORD PTR __Whereptr$[ebp]
	mov	esi, DWORD PTR __Mylast$[ebp]
	push	DWORD PTR [esi]
	push	DWORD PTR __Relocated$10[ebp]
	call	?_Umove@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU34@00@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Umove
	mov	DWORD PTR __$EHRec$[ebp+12], 7

; 1026 :                 _CATCH_ALL
; 1027 :                 // vaporize the detached piece
; 1028 :                 _Orphan_range(_Whereptr, _Oldlast);
; 1029 :                 _Destroy(_Relocated, _Mylast);
; 1030 :                 _Mylast = _Whereptr;
; 1031 :                 _RERAISE;
; 1032 :                 _CATCH_END
; 1033 : 
; 1034 :                 _Destroy(_Relocated, _Mylast);
; 1035 :                 _Mylast = _Oldlast;

	mov	eax, DWORD PTR __Oldlast$[ebp]
	mov	DWORD PTR [esi], eax

; 1036 :                 _RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8
$LN144@Insert_ran:

; 954  :                 _Xlength();

	call	?_Xlength@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@CAXXZ ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Xlength
__catch$??$_Insert_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@1Uforward_iterator_tag@1@@Z$0:

; 975  :             }
; 976  :             _CATCH_ALL
; 977  :             _Destroy(_Constructed_first, _Constructed_last);
; 978  :             _Getal().deallocate(_Newvec, _Newcapacity);

	push	ecx
	push	DWORD PTR __Newvec$11[ebp]
	call	?deallocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@I@Z ; doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *>::deallocate

; 979  :             _RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8
__catch$??$_Insert_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@1Uforward_iterator_tag@1@@Z$2:

; 995  :                 _Ucopy(_First, _Last, _Whereptr);
; 996  :                 _CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 997  :                 // glue the broken pieces back together
; 998  : 
; 999  :                 _TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 4

; 1000 :                 _Umove(_Whereptr + _Count, _Whereptr + 2 * _Count, _Whereptr);

	mov	ecx, DWORD PTR __Whereptr$[ebp]
	mov	eax, DWORD PTR __Count$[ebp]
	lea	edi, DWORD PTR [ecx+eax*8]
	lea	esi, DWORD PTR [ecx+eax*4]
	push	ecx
	push	edi
	push	esi
	call	?_Umove@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU34@00@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Umove
	mov	DWORD PTR __$EHRec$[ebp+12], 3

; 1001 :                 _CATCH_ALL
; 1002 :                 // vaporize the detached piece
; 1003 :                 _Orphan_range(_Whereptr, _Oldlast);
; 1004 :                 _Destroy(_Whereptr + _Count, _Mylast);
; 1005 :                 _Mylast = _Whereptr;
; 1006 :                 _RERAISE;
; 1007 :                 _CATCH_END
; 1008 : 
; 1009 :                 _Move_unchecked(_Whereptr + 2 * _Count, _Mylast, _Whereptr + _Count);

	push	esi
	mov	esi, DWORD PTR __Mylast$[ebp]
	mov	edx, DWORD PTR [esi]
	mov	ecx, edi
	call	??$_Move_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z ; std::_Move_unchecked<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *>
	add	esp, 4

; 1010 :                 _Destroy(_Oldlast, _Mylast);
; 1011 :                 _Mylast = _Oldlast;

	mov	eax, DWORD PTR __Oldlast$[ebp]
	mov	DWORD PTR [esi], eax

; 1012 :                 _RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8
__catch$??$_Insert_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@1Uforward_iterator_tag@1@@Z$7:
__catch$??$_Insert_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@1Uforward_iterator_tag@1@@Z$3:

; 1042 :     }

	mov	ecx, DWORD PTR __Whereptr$[ebp]
	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	DWORD PTR [eax], ecx
	push	0
	push	0
	call	__CxxThrowException@8
$LN141@Insert_ran:
	int	3
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Insert_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@1Uforward_iterator_tag@1@@Z:
	npad	1
	npad	1
	mov	eax, OFFSET __ehfuncinfo$??$_Insert_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@1Uforward_iterator_tag@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Insert_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@1@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@1Uforward_iterator_tag@1@@Z ENDP ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Insert_range<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *>
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0@Z
_TEXT	SEGMENT
??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0@Z PROC ; std::_Adl_verify_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> > > >, COMDAT
; __First$dead$ = ecx
; __Last$dead$ = edx

; 1259 :     // check that [_First, _Last) forms an iterator range
; 1260 :     if constexpr (_Range_verifiable_v<_Iter, _Sentinel>) {
; 1261 :         _Verify_range(_First, _Last);
; 1262 :     }
; 1263 : }

	ret	0
??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0@Z ENDP ; std::_Adl_verify_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Pass_fn@P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z$0A@@std@@YAP6A_NPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@0@ZP6A_N00@Z@Z
_TEXT	SEGMENT
??$_Pass_fn@P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z$0A@@std@@YAP6A_NPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@0@ZP6A_N00@Z@Z PROC ; std::_Pass_fn<bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *),0>, COMDAT
; __Val$dead$ = ecx

; 253  :     return _Val;

	mov	eax, OFFSET ?cmp_vs_nrm@@YA_NPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; cmp_vs_nrm

; 254  : }

	ret	0
??$_Pass_fn@P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z$0A@@std@@YAP6A_NPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@0@ZP6A_N00@Z@Z ENDP ; std::_Pass_fn<bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *),0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z
_TEXT	SEGMENT
__Last$1$ = -28						; size = 4
__Hole$1$ = -24						; size = 4
__Val$1$ = -24						; size = 4
__Hole$1$ = -20						; size = 4
__Val$1$ = -20						; size = 4
__Mid$1$ = -16						; size = 4
__Max_sequence_non_leaf$1$ = -16			; size = 4
__First$1$ = -12					; size = 4
__Bottom$1$ = -12					; size = 4
tv742 = -8						; size = 4
__Val$1 = -8						; size = 4
__Mid$2 = -8						; size = 8
__Ideal$ = 8						; size = 4
__Pred$ = 12						; size = 4
??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z PROC ; std::_Sort_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 7046 : _CONSTEXPR20 void _Sort_unchecked(_RanIt _First, _RanIt _Last, _Iter_diff_t<_RanIt> _Ideal, _Pr _Pred) {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 28					; 0000001cH
	push	ebx
	mov	ebx, edx
	push	esi
	mov	esi, ecx
	mov	DWORD PTR __Last$1$[esp+36], ebx

; 7047 :     // order [_First, _Last)
; 7048 :     for (;;) {
; 7049 :         if (_Last - _First <= _ISORT_MAX) { // small

	mov	ecx, DWORD PTR __Pred$[ebp]
	mov	eax, ebx
	sub	eax, esi
	mov	DWORD PTR __First$1$[esp+36], esi
	and	eax, -4					; fffffffcH
	push	edi
	cmp	eax, 128				; 00000080H
	jle	SHORT $LN165@Sort_unche
	mov	edi, DWORD PTR __Ideal$[ebp]
	npad	4
$LL2@Sort_unche:

; 7050 :             _Insertion_sort_unchecked(_First, _Last, _Pred);
; 7051 :             return;
; 7052 :         }
; 7053 : 
; 7054 :         if (_Ideal <= 0) { // heap sort if too many divisions

	test	edi, edi
	jle	$LN166@Sort_unche

; 7055 :             _Make_heap_unchecked(_First, _Last, _Pred);
; 7056 :             _Sort_heap_unchecked(_First, _Last, _Pred);
; 7057 :             return;
; 7058 :         }
; 7059 : 
; 7060 :         // divide and conquer by quicksort
; 7061 :         auto _Mid = _Partition_by_median_guess_unchecked(_First, _Last, _Pred);

	push	ecx
	push	ebx
	mov	edx, esi
	lea	ecx, DWORD PTR __Mid$2[esp+48]
	call	??$_Partition_by_median_guess_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YA?AU?$pair@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@0@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU23@1@Z@Z ; std::_Partition_by_median_guess_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *)>

; 7062 : 
; 7063 :         _Ideal = (_Ideal >> 1) + (_Ideal >> 2); // allow 1.5 log2(N) divisions
; 7064 : 
; 7065 :         if (_Mid.first - _First < _Last - _Mid.second) { // loop on second half

	mov	edx, DWORD PTR __Mid$2[esp+48]
	mov	eax, edi
	sar	eax, 2
	mov	ecx, ebx
	sub	ecx, DWORD PTR __Mid$2[esp+52]
	add	esp, 8
	sar	edi, 1
	and	ecx, -4					; fffffffcH
	add	edi, eax
	mov	eax, edx
	sub	eax, esi
	and	eax, -4					; fffffffcH
	cmp	eax, ecx
	mov	eax, DWORD PTR __Pred$[ebp]
	push	eax
	push	edi
	jge	SHORT $LN7@Sort_unche

; 7066 :             _Sort_unchecked(_First, _Mid.first, _Ideal, _Pred);

	mov	ecx, esi
	call	??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z ; std::_Sort_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *)>

; 7067 :             _First = _Mid.second;

	mov	esi, DWORD PTR __Mid$2[esp+52]
	mov	DWORD PTR __First$1$[esp+48], esi

; 7068 :         } else { // loop on first half

	jmp	SHORT $LN190@Sort_unche
$LN7@Sort_unche:

; 7069 :             _Sort_unchecked(_Mid.second, _Last, _Ideal, _Pred);

	mov	ecx, DWORD PTR __Mid$2[esp+52]
	mov	edx, ebx
	call	??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z ; std::_Sort_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *)>

; 7070 :             _Last = _Mid.first;

	mov	ebx, DWORD PTR __Mid$2[esp+48]
	mov	DWORD PTR __Last$1$[esp+48], ebx
$LN190@Sort_unche:

; 7047 :     // order [_First, _Last)
; 7048 :     for (;;) {
; 7049 :         if (_Last - _First <= _ISORT_MAX) { // small

	mov	ecx, DWORD PTR __Pred$[ebp]
	mov	eax, ebx
	sub	eax, esi
	add	esp, 8
	and	eax, -4					; fffffffcH
	cmp	eax, 128				; 00000080H
	jg	SHORT $LL2@Sort_unche
$LN165@Sort_unche:

; 6921 :     if (_First != _Last) {

	cmp	esi, ebx
	je	$LN45@Sort_unche

; 6922 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

	lea	ebx, DWORD PTR [esi+4]
	mov	DWORD PTR __Mid$1$[esp+40], ebx
	cmp	ebx, DWORD PTR __Last$1$[esp+40]
	je	$LN45@Sort_unche
	npad	1
$LL11@Sort_unche:

; 6923 :             _BidIt _Hole               = _Mid;
; 6924 :             _Iter_value_t<_BidIt> _Val = _STD move(*_Mid);
; 6925 : 
; 6926 :             if (_DEBUG_LT_PRED(_Pred, _Val, *_First)) { // found new earliest element, move to front

	push	DWORD PTR [esi]
	mov	edi, DWORD PTR [ebx]
	push	edi
	mov	DWORD PTR __Hole$1$[esp+48], ebx
	mov	DWORD PTR __Val$1$[esp+48], edi
	call	ecx
	add	esp, 8
	test	al, al
	je	$LN18@Sort_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4254 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	mov	ecx, ebx

; 4255 :     auto _Result                = _CSTD memmove(_Dest_ch - _Count, _First_ch, _Count);

	mov	eax, ebx
	sub	ecx, esi
	push	ecx
	sub	eax, ecx
	add	eax, 4
	push	esi
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6928 :                 *_First = _STD move(_Val);

	mov	DWORD PTR [esi], edi

; 6929 :             } else { // look for insertion point after first

	jmp	$LN19@Sort_unche
$LN166@Sort_unche:

; 5547 :     _Diff _Bottom = _Last - _First;

	sub	ebx, esi
	mov	eax, ebx
	mov	DWORD PTR __Last$1$[esp+40], ebx
	sar	eax, 2

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	mov	edx, eax
	mov	DWORD PTR __Bottom$1$[esp+40], eax
	sar	edx, 1
	test	edx, edx
	jle	$LN29@Sort_unche
	dec	eax
	mov	DWORD PTR tv742[esp+40], eax
	sar	eax, 1
	mov	DWORD PTR __Max_sequence_non_leaf$1$[esp+40], eax
	npad	3
$LL28@Sort_unche:

; 5549 :         // reheap top half, bottom to top
; 5550 :         --_Hole;
; 5551 :         _Iter_value_t<_RanIt> _Val = _STD move(*(_First + _Hole));

	mov	ebx, DWORD PTR [esi+edx*4-4]
	dec	edx
	mov	DWORD PTR __Val$1$[esp+40], ebx

; 5552 :         _Pop_heap_hole_by_index(_First, _Hole, _Bottom, _STD move(_Val), _Pred);

	mov	ebx, edx
	mov	DWORD PTR __Hole$1$[esp+40], edx

; 5381 :     _Diff _Idx       = _Hole;

	mov	edi, edx

; 5382 : 
; 5383 :     // Check whether _Idx can have a child before calculating that child's index, since
; 5384 :     // calculating the child's index can trigger integer overflows
; 5385 :     const _Diff _Max_sequence_non_leaf = (_Bottom - 1) >> 1; // shift for codegen
; 5386 :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

	cmp	edx, eax
	jge	SHORT $LN34@Sort_unche
	npad	11
$LL33@Sort_unche:

; 5387 :         _Idx = 2 * _Idx + 2;
; 5388 :         if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1)))) {

	push	DWORD PTR [esi+edi*8+4]
	lea	edi, DWORD PTR [edi*2+2]
	push	DWORD PTR [esi+edi*4]
	call	ecx
	add	esp, 8
	test	al, al
	je	SHORT $LN35@Sort_unche

; 5389 :             --_Idx;

	dec	edi
$LN35@Sort_unche:

; 5390 :         }
; 5391 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [esi+edi*4]
	mov	ecx, DWORD PTR __Pred$[ebp]
	mov	DWORD PTR [esi+ebx*4], eax

; 5392 :         _Hole             = _Idx;

	mov	ebx, edi
	mov	eax, DWORD PTR __Max_sequence_non_leaf$1$[esp+40]
	cmp	edi, eax
	jl	SHORT $LL33@Sort_unche
	mov	edx, DWORD PTR __Hole$1$[esp+40]
$LN34@Sort_unche:

; 5393 :     }
; 5394 : 
; 5395 :     if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it

	cmp	edi, eax
	jne	SHORT $LN36@Sort_unche
	mov	eax, DWORD PTR __Bottom$1$[esp+40]
	test	al, 1
	jne	SHORT $LN36@Sort_unche

; 5396 :         *(_First + _Hole) = _STD move(*(_First + (_Bottom - 1)));

	mov	eax, DWORD PTR [esi+eax*4-4]
	mov	DWORD PTR [esi+ebx*4], eax

; 5397 :         _Hole             = _Bottom - 1;

	mov	ebx, DWORD PTR tv742[esp+40]
$LN36@Sort_unche:

; 5268 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

	cmp	edx, ebx
	jge	SHORT $LN40@Sort_unche
	npad	6
$LL41@Sort_unche:
	push	DWORD PTR __Val$1$[esp+40]
	lea	edi, DWORD PTR [ebx-1]
	sar	edi, 1
	push	DWORD PTR [esi+edi*4]
	call	ecx
	mov	edx, DWORD PTR __Hole$1$[esp+48]
	add	esp, 8
	test	al, al
	je	SHORT $LN40@Sort_unche

; 5269 :          _Idx = (_Hole - 1) >> 1) { // shift for codegen
; 5270 :         // move _Hole up to parent
; 5271 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [esi+edi*4]
	mov	ecx, DWORD PTR __Pred$[ebp]
	mov	DWORD PTR [esi+ebx*4], eax

; 5272 :         _Hole             = _Idx;

	mov	ebx, edi
	cmp	edx, edi
	jl	SHORT $LL41@Sort_unche
$LN40@Sort_unche:

; 5273 :     }
; 5274 : 
; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	eax, DWORD PTR __Val$1$[esp+40]

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	mov	ecx, DWORD PTR __Pred$[ebp]

; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	DWORD PTR [esi+ebx*4], eax

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	mov	eax, DWORD PTR __Max_sequence_non_leaf$1$[esp+40]
	test	edx, edx
	jg	$LL28@Sort_unche
	mov	ebx, DWORD PTR __Last$1$[esp+40]
	mov	eax, DWORD PTR __Bottom$1$[esp+40]
$LN29@Sort_unche:

; 5774 :     for (; _Last - _First >= 2; --_Last) {

	cmp	eax, 2
	jl	$LN45@Sort_unche
	npad	1
$LL46@Sort_unche:

; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	eax, DWORD PTR [ebx+esi-4]

; 5410 :     _Pop_heap_hole_by_index(

	xor	edx, edx

; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	DWORD PTR __Val$1[esp+40], eax

; 5408 :     *_Dest      = _STD move(*_First);

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [ebx+esi-4], eax

; 5409 :     using _Diff = _Iter_diff_t<_RanIt>;
; 5410 :     _Pop_heap_hole_by_index(

	lea	eax, DWORD PTR __Val$1[esp+40]
	push	ecx
	push	eax
	lea	eax, DWORD PTR [ebx-4]
	mov	ecx, esi
	sar	eax, 2
	push	eax
	call	??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ; std::_Pop_heap_hole_by_index<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *)>

; 5774 :     for (; _Last - _First >= 2; --_Last) {

	mov	ecx, DWORD PTR __Pred$[ebp]
	sub	ebx, 4
	mov	eax, ebx

; 5410 :     _Pop_heap_hole_by_index(

	add	esp, 12					; 0000000cH

; 5774 :     for (; _Last - _First >= 2; --_Last) {

	and	eax, -4					; fffffffcH
	cmp	eax, 8
	jge	SHORT $LL46@Sort_unche

; 7071 :         }
; 7072 :     }
; 7073 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN18@Sort_unche:

; 6930 :                 for (_BidIt _Prev = _Hole; _DEBUG_LT_PRED(_Pred, _Val, *--_Prev); _Hole = _Prev) {

	push	DWORD PTR [ebx-4]
	mov	eax, DWORD PTR __Pred$[ebp]
	lea	edi, DWORD PTR [ebx-4]
	push	DWORD PTR __Val$1$[esp+44]
	call	eax
	add	esp, 8
	test	al, al
	je	SHORT $LN15@Sort_unche
	mov	esi, DWORD PTR __Val$1$[esp+40]
	mov	ebx, DWORD PTR __Hole$1$[esp+40]
	npad	4
$LL16@Sort_unche:

; 6931 :                     *_Hole = _STD move(*_Prev); // move hole down

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [ebx], eax
	mov	ebx, edi
	push	DWORD PTR [edi-4]
	sub	edi, 4
	push	esi
	call	DWORD PTR __Pred$[ebp]
	add	esp, 8
	test	al, al
	jne	SHORT $LL16@Sort_unche
	mov	esi, DWORD PTR __First$1$[esp+40]
	mov	DWORD PTR __Hole$1$[esp+40], ebx
	mov	ebx, DWORD PTR __Mid$1$[esp+40]
$LN15@Sort_unche:

; 6932 :                 }
; 6933 : 
; 6934 :                 *_Hole = _STD move(_Val); // insert element in hole

	mov	ecx, DWORD PTR __Hole$1$[esp+40]
	mov	eax, DWORD PTR __Val$1$[esp+40]
	mov	DWORD PTR [ecx], eax
$LN19@Sort_unche:

; 6922 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

	mov	ecx, DWORD PTR __Pred$[ebp]
	add	ebx, 4
	mov	DWORD PTR __Mid$1$[esp+40], ebx
	cmp	ebx, DWORD PTR __Last$1$[esp+40]
	jne	$LL11@Sort_unche
$LN45@Sort_unche:

; 7071 :         }
; 7072 :     }
; 7073 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z ENDP ; std::_Sort_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0@Z
_TEXT	SEGMENT
??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0@Z PROC ; std::_Adl_verify_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> > > >, COMDAT
; __First$dead$ = ecx
; __Last$dead$ = edx

; 1259 :     // check that [_First, _Last) forms an iterator range
; 1260 :     if constexpr (_Range_verifiable_v<_Iter, _Sentinel>) {
; 1261 :         _Verify_range(_First, _Last);
; 1262 :     }
; 1263 : }

	ret	0
??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0@Z ENDP ; std::_Adl_verify_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Pass_fn@P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z$0A@@std@@YAP6A_NPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@0@ZP6A_N00@Z@Z
_TEXT	SEGMENT
??$_Pass_fn@P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z$0A@@std@@YAP6A_NPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@0@ZP6A_N00@Z@Z PROC ; std::_Pass_fn<bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *),0>, COMDAT
; __Val$dead$ = ecx

; 253  :     return _Val;

	mov	eax, OFFSET ?cmp_ps_nrm@@YA_NPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; cmp_ps_nrm

; 254  : }

	ret	0
??$_Pass_fn@P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z$0A@@std@@YAP6A_NPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@0@ZP6A_N00@Z@Z ENDP ; std::_Pass_fn<bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *),0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z
_TEXT	SEGMENT
__Last$1$ = -28						; size = 4
__Hole$1$ = -24						; size = 4
__Val$1$ = -24						; size = 4
__Hole$1$ = -20						; size = 4
__Val$1$ = -20						; size = 4
__Mid$1$ = -16						; size = 4
__Max_sequence_non_leaf$1$ = -16			; size = 4
__First$1$ = -12					; size = 4
__Bottom$1$ = -12					; size = 4
tv742 = -8						; size = 4
__Val$1 = -8						; size = 4
__Mid$2 = -8						; size = 8
__Ideal$ = 8						; size = 4
__Pred$ = 12						; size = 4
??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z PROC ; std::_Sort_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 7046 : _CONSTEXPR20 void _Sort_unchecked(_RanIt _First, _RanIt _Last, _Iter_diff_t<_RanIt> _Ideal, _Pr _Pred) {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 28					; 0000001cH
	push	ebx
	mov	ebx, edx
	push	esi
	mov	esi, ecx
	mov	DWORD PTR __Last$1$[esp+36], ebx

; 7047 :     // order [_First, _Last)
; 7048 :     for (;;) {
; 7049 :         if (_Last - _First <= _ISORT_MAX) { // small

	mov	ecx, DWORD PTR __Pred$[ebp]
	mov	eax, ebx
	sub	eax, esi
	mov	DWORD PTR __First$1$[esp+36], esi
	and	eax, -4					; fffffffcH
	push	edi
	cmp	eax, 128				; 00000080H
	jle	SHORT $LN165@Sort_unche
	mov	edi, DWORD PTR __Ideal$[ebp]
	npad	4
$LL2@Sort_unche:

; 7050 :             _Insertion_sort_unchecked(_First, _Last, _Pred);
; 7051 :             return;
; 7052 :         }
; 7053 : 
; 7054 :         if (_Ideal <= 0) { // heap sort if too many divisions

	test	edi, edi
	jle	$LN166@Sort_unche

; 7055 :             _Make_heap_unchecked(_First, _Last, _Pred);
; 7056 :             _Sort_heap_unchecked(_First, _Last, _Pred);
; 7057 :             return;
; 7058 :         }
; 7059 : 
; 7060 :         // divide and conquer by quicksort
; 7061 :         auto _Mid = _Partition_by_median_guess_unchecked(_First, _Last, _Pred);

	push	ecx
	push	ebx
	mov	edx, esi
	lea	ecx, DWORD PTR __Mid$2[esp+48]
	call	??$_Partition_by_median_guess_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YA?AU?$pair@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@0@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU23@1@Z@Z ; std::_Partition_by_median_guess_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *)>

; 7062 : 
; 7063 :         _Ideal = (_Ideal >> 1) + (_Ideal >> 2); // allow 1.5 log2(N) divisions
; 7064 : 
; 7065 :         if (_Mid.first - _First < _Last - _Mid.second) { // loop on second half

	mov	edx, DWORD PTR __Mid$2[esp+48]
	mov	eax, edi
	sar	eax, 2
	mov	ecx, ebx
	sub	ecx, DWORD PTR __Mid$2[esp+52]
	add	esp, 8
	sar	edi, 1
	and	ecx, -4					; fffffffcH
	add	edi, eax
	mov	eax, edx
	sub	eax, esi
	and	eax, -4					; fffffffcH
	cmp	eax, ecx
	mov	eax, DWORD PTR __Pred$[ebp]
	push	eax
	push	edi
	jge	SHORT $LN7@Sort_unche

; 7066 :             _Sort_unchecked(_First, _Mid.first, _Ideal, _Pred);

	mov	ecx, esi
	call	??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z ; std::_Sort_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *)>

; 7067 :             _First = _Mid.second;

	mov	esi, DWORD PTR __Mid$2[esp+52]
	mov	DWORD PTR __First$1$[esp+48], esi

; 7068 :         } else { // loop on first half

	jmp	SHORT $LN190@Sort_unche
$LN7@Sort_unche:

; 7069 :             _Sort_unchecked(_Mid.second, _Last, _Ideal, _Pred);

	mov	ecx, DWORD PTR __Mid$2[esp+52]
	mov	edx, ebx
	call	??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z ; std::_Sort_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *)>

; 7070 :             _Last = _Mid.first;

	mov	ebx, DWORD PTR __Mid$2[esp+48]
	mov	DWORD PTR __Last$1$[esp+48], ebx
$LN190@Sort_unche:

; 7047 :     // order [_First, _Last)
; 7048 :     for (;;) {
; 7049 :         if (_Last - _First <= _ISORT_MAX) { // small

	mov	ecx, DWORD PTR __Pred$[ebp]
	mov	eax, ebx
	sub	eax, esi
	add	esp, 8
	and	eax, -4					; fffffffcH
	cmp	eax, 128				; 00000080H
	jg	SHORT $LL2@Sort_unche
$LN165@Sort_unche:

; 6921 :     if (_First != _Last) {

	cmp	esi, ebx
	je	$LN45@Sort_unche

; 6922 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

	lea	ebx, DWORD PTR [esi+4]
	mov	DWORD PTR __Mid$1$[esp+40], ebx
	cmp	ebx, DWORD PTR __Last$1$[esp+40]
	je	$LN45@Sort_unche
	npad	1
$LL11@Sort_unche:

; 6923 :             _BidIt _Hole               = _Mid;
; 6924 :             _Iter_value_t<_BidIt> _Val = _STD move(*_Mid);
; 6925 : 
; 6926 :             if (_DEBUG_LT_PRED(_Pred, _Val, *_First)) { // found new earliest element, move to front

	push	DWORD PTR [esi]
	mov	edi, DWORD PTR [ebx]
	push	edi
	mov	DWORD PTR __Hole$1$[esp+48], ebx
	mov	DWORD PTR __Val$1$[esp+48], edi
	call	ecx
	add	esp, 8
	test	al, al
	je	$LN18@Sort_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4254 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	mov	ecx, ebx

; 4255 :     auto _Result                = _CSTD memmove(_Dest_ch - _Count, _First_ch, _Count);

	mov	eax, ebx
	sub	ecx, esi
	push	ecx
	sub	eax, ecx
	add	eax, 4
	push	esi
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6928 :                 *_First = _STD move(_Val);

	mov	DWORD PTR [esi], edi

; 6929 :             } else { // look for insertion point after first

	jmp	$LN19@Sort_unche
$LN166@Sort_unche:

; 5547 :     _Diff _Bottom = _Last - _First;

	sub	ebx, esi
	mov	eax, ebx
	mov	DWORD PTR __Last$1$[esp+40], ebx
	sar	eax, 2

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	mov	edx, eax
	mov	DWORD PTR __Bottom$1$[esp+40], eax
	sar	edx, 1
	test	edx, edx
	jle	$LN29@Sort_unche
	dec	eax
	mov	DWORD PTR tv742[esp+40], eax
	sar	eax, 1
	mov	DWORD PTR __Max_sequence_non_leaf$1$[esp+40], eax
	npad	3
$LL28@Sort_unche:

; 5549 :         // reheap top half, bottom to top
; 5550 :         --_Hole;
; 5551 :         _Iter_value_t<_RanIt> _Val = _STD move(*(_First + _Hole));

	mov	ebx, DWORD PTR [esi+edx*4-4]
	dec	edx
	mov	DWORD PTR __Val$1$[esp+40], ebx

; 5552 :         _Pop_heap_hole_by_index(_First, _Hole, _Bottom, _STD move(_Val), _Pred);

	mov	ebx, edx
	mov	DWORD PTR __Hole$1$[esp+40], edx

; 5381 :     _Diff _Idx       = _Hole;

	mov	edi, edx

; 5382 : 
; 5383 :     // Check whether _Idx can have a child before calculating that child's index, since
; 5384 :     // calculating the child's index can trigger integer overflows
; 5385 :     const _Diff _Max_sequence_non_leaf = (_Bottom - 1) >> 1; // shift for codegen
; 5386 :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

	cmp	edx, eax
	jge	SHORT $LN34@Sort_unche
	npad	11
$LL33@Sort_unche:

; 5387 :         _Idx = 2 * _Idx + 2;
; 5388 :         if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1)))) {

	push	DWORD PTR [esi+edi*8+4]
	lea	edi, DWORD PTR [edi*2+2]
	push	DWORD PTR [esi+edi*4]
	call	ecx
	add	esp, 8
	test	al, al
	je	SHORT $LN35@Sort_unche

; 5389 :             --_Idx;

	dec	edi
$LN35@Sort_unche:

; 5390 :         }
; 5391 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [esi+edi*4]
	mov	ecx, DWORD PTR __Pred$[ebp]
	mov	DWORD PTR [esi+ebx*4], eax

; 5392 :         _Hole             = _Idx;

	mov	ebx, edi
	mov	eax, DWORD PTR __Max_sequence_non_leaf$1$[esp+40]
	cmp	edi, eax
	jl	SHORT $LL33@Sort_unche
	mov	edx, DWORD PTR __Hole$1$[esp+40]
$LN34@Sort_unche:

; 5393 :     }
; 5394 : 
; 5395 :     if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it

	cmp	edi, eax
	jne	SHORT $LN36@Sort_unche
	mov	eax, DWORD PTR __Bottom$1$[esp+40]
	test	al, 1
	jne	SHORT $LN36@Sort_unche

; 5396 :         *(_First + _Hole) = _STD move(*(_First + (_Bottom - 1)));

	mov	eax, DWORD PTR [esi+eax*4-4]
	mov	DWORD PTR [esi+ebx*4], eax

; 5397 :         _Hole             = _Bottom - 1;

	mov	ebx, DWORD PTR tv742[esp+40]
$LN36@Sort_unche:

; 5268 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

	cmp	edx, ebx
	jge	SHORT $LN40@Sort_unche
	npad	6
$LL41@Sort_unche:
	push	DWORD PTR __Val$1$[esp+40]
	lea	edi, DWORD PTR [ebx-1]
	sar	edi, 1
	push	DWORD PTR [esi+edi*4]
	call	ecx
	mov	edx, DWORD PTR __Hole$1$[esp+48]
	add	esp, 8
	test	al, al
	je	SHORT $LN40@Sort_unche

; 5269 :          _Idx = (_Hole - 1) >> 1) { // shift for codegen
; 5270 :         // move _Hole up to parent
; 5271 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [esi+edi*4]
	mov	ecx, DWORD PTR __Pred$[ebp]
	mov	DWORD PTR [esi+ebx*4], eax

; 5272 :         _Hole             = _Idx;

	mov	ebx, edi
	cmp	edx, edi
	jl	SHORT $LL41@Sort_unche
$LN40@Sort_unche:

; 5273 :     }
; 5274 : 
; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	eax, DWORD PTR __Val$1$[esp+40]

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	mov	ecx, DWORD PTR __Pred$[ebp]

; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	DWORD PTR [esi+ebx*4], eax

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	mov	eax, DWORD PTR __Max_sequence_non_leaf$1$[esp+40]
	test	edx, edx
	jg	$LL28@Sort_unche
	mov	ebx, DWORD PTR __Last$1$[esp+40]
	mov	eax, DWORD PTR __Bottom$1$[esp+40]
$LN29@Sort_unche:

; 5774 :     for (; _Last - _First >= 2; --_Last) {

	cmp	eax, 2
	jl	$LN45@Sort_unche
	npad	1
$LL46@Sort_unche:

; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	eax, DWORD PTR [ebx+esi-4]

; 5410 :     _Pop_heap_hole_by_index(

	xor	edx, edx

; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	DWORD PTR __Val$1[esp+40], eax

; 5408 :     *_Dest      = _STD move(*_First);

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [ebx+esi-4], eax

; 5409 :     using _Diff = _Iter_diff_t<_RanIt>;
; 5410 :     _Pop_heap_hole_by_index(

	lea	eax, DWORD PTR __Val$1[esp+40]
	push	ecx
	push	eax
	lea	eax, DWORD PTR [ebx-4]
	mov	ecx, esi
	sar	eax, 2
	push	eax
	call	??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ; std::_Pop_heap_hole_by_index<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *)>

; 5774 :     for (; _Last - _First >= 2; --_Last) {

	mov	ecx, DWORD PTR __Pred$[ebp]
	sub	ebx, 4
	mov	eax, ebx

; 5410 :     _Pop_heap_hole_by_index(

	add	esp, 12					; 0000000cH

; 5774 :     for (; _Last - _First >= 2; --_Last) {

	and	eax, -4					; fffffffcH
	cmp	eax, 8
	jge	SHORT $LL46@Sort_unche

; 7071 :         }
; 7072 :     }
; 7073 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN18@Sort_unche:

; 6930 :                 for (_BidIt _Prev = _Hole; _DEBUG_LT_PRED(_Pred, _Val, *--_Prev); _Hole = _Prev) {

	push	DWORD PTR [ebx-4]
	mov	eax, DWORD PTR __Pred$[ebp]
	lea	edi, DWORD PTR [ebx-4]
	push	DWORD PTR __Val$1$[esp+44]
	call	eax
	add	esp, 8
	test	al, al
	je	SHORT $LN15@Sort_unche
	mov	esi, DWORD PTR __Val$1$[esp+40]
	mov	ebx, DWORD PTR __Hole$1$[esp+40]
	npad	4
$LL16@Sort_unche:

; 6931 :                     *_Hole = _STD move(*_Prev); // move hole down

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [ebx], eax
	mov	ebx, edi
	push	DWORD PTR [edi-4]
	sub	edi, 4
	push	esi
	call	DWORD PTR __Pred$[ebp]
	add	esp, 8
	test	al, al
	jne	SHORT $LL16@Sort_unche
	mov	esi, DWORD PTR __First$1$[esp+40]
	mov	DWORD PTR __Hole$1$[esp+40], ebx
	mov	ebx, DWORD PTR __Mid$1$[esp+40]
$LN15@Sort_unche:

; 6932 :                 }
; 6933 : 
; 6934 :                 *_Hole = _STD move(_Val); // insert element in hole

	mov	ecx, DWORD PTR __Hole$1$[esp+40]
	mov	eax, DWORD PTR __Val$1$[esp+40]
	mov	DWORD PTR [ecx], eax
$LN19@Sort_unche:

; 6922 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

	mov	ecx, DWORD PTR __Pred$[ebp]
	add	ebx, 4
	mov	DWORD PTR __Mid$1$[esp+40], ebx
	cmp	ebx, DWORD PTR __Last$1$[esp+40]
	jne	$LL11@Sort_unche
$LN45@Sort_unche:

; 7071 :         }
; 7072 :     }
; 7073 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z ENDP ; std::_Sort_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0@Z
_TEXT	SEGMENT
??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0@Z PROC ; std::_Adl_verify_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> > > >, COMDAT
; __First$dead$ = ecx
; __Last$dead$ = edx

; 1259 :     // check that [_First, _Last) forms an iterator range
; 1260 :     if constexpr (_Range_verifiable_v<_Iter, _Sentinel>) {
; 1261 :         _Verify_range(_First, _Last);
; 1262 :     }
; 1263 : }

	ret	0
??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0@Z ENDP ; std::_Adl_verify_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Pass_fn@P6A_NPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@0@Z$0A@@std@@YAP6A_NPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@0@ZP6A_N00@Z@Z
_TEXT	SEGMENT
??$_Pass_fn@P6A_NPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@0@Z$0A@@std@@YAP6A_NPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@0@ZP6A_N00@Z@Z PROC ; std::_Pass_fn<bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *),0>, COMDAT
; __Val$dead$ = ecx

; 253  :     return _Val;

	mov	eax, OFFSET ?cmp_cs_nrm@@YA_NPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; cmp_cs_nrm

; 254  : }

	ret	0
??$_Pass_fn@P6A_NPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@0@Z$0A@@std@@YAP6A_NPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@0@ZP6A_N00@Z@Z ENDP ; std::_Pass_fn<bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *),0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z
_TEXT	SEGMENT
__Last$1$ = -28						; size = 4
__Hole$1$ = -24						; size = 4
__Val$1$ = -24						; size = 4
__Hole$1$ = -20						; size = 4
__Val$1$ = -20						; size = 4
__Mid$1$ = -16						; size = 4
__Max_sequence_non_leaf$1$ = -16			; size = 4
__First$1$ = -12					; size = 4
__Bottom$1$ = -12					; size = 4
tv742 = -8						; size = 4
__Val$1 = -8						; size = 4
__Mid$2 = -8						; size = 8
__Ideal$ = 8						; size = 4
__Pred$ = 12						; size = 4
??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z PROC ; std::_Sort_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 7046 : _CONSTEXPR20 void _Sort_unchecked(_RanIt _First, _RanIt _Last, _Iter_diff_t<_RanIt> _Ideal, _Pr _Pred) {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 28					; 0000001cH
	push	ebx
	mov	ebx, edx
	push	esi
	mov	esi, ecx
	mov	DWORD PTR __Last$1$[esp+36], ebx

; 7047 :     // order [_First, _Last)
; 7048 :     for (;;) {
; 7049 :         if (_Last - _First <= _ISORT_MAX) { // small

	mov	ecx, DWORD PTR __Pred$[ebp]
	mov	eax, ebx
	sub	eax, esi
	mov	DWORD PTR __First$1$[esp+36], esi
	and	eax, -4					; fffffffcH
	push	edi
	cmp	eax, 128				; 00000080H
	jle	SHORT $LN165@Sort_unche
	mov	edi, DWORD PTR __Ideal$[ebp]
	npad	4
$LL2@Sort_unche:

; 7050 :             _Insertion_sort_unchecked(_First, _Last, _Pred);
; 7051 :             return;
; 7052 :         }
; 7053 : 
; 7054 :         if (_Ideal <= 0) { // heap sort if too many divisions

	test	edi, edi
	jle	$LN166@Sort_unche

; 7055 :             _Make_heap_unchecked(_First, _Last, _Pred);
; 7056 :             _Sort_heap_unchecked(_First, _Last, _Pred);
; 7057 :             return;
; 7058 :         }
; 7059 : 
; 7060 :         // divide and conquer by quicksort
; 7061 :         auto _Mid = _Partition_by_median_guess_unchecked(_First, _Last, _Pred);

	push	ecx
	push	ebx
	mov	edx, esi
	lea	ecx, DWORD PTR __Mid$2[esp+48]
	call	??$_Partition_by_median_guess_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YA?AU?$pair@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@0@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU23@1@Z@Z ; std::_Partition_by_median_guess_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *)>

; 7062 : 
; 7063 :         _Ideal = (_Ideal >> 1) + (_Ideal >> 2); // allow 1.5 log2(N) divisions
; 7064 : 
; 7065 :         if (_Mid.first - _First < _Last - _Mid.second) { // loop on second half

	mov	edx, DWORD PTR __Mid$2[esp+48]
	mov	eax, edi
	sar	eax, 2
	mov	ecx, ebx
	sub	ecx, DWORD PTR __Mid$2[esp+52]
	add	esp, 8
	sar	edi, 1
	and	ecx, -4					; fffffffcH
	add	edi, eax
	mov	eax, edx
	sub	eax, esi
	and	eax, -4					; fffffffcH
	cmp	eax, ecx
	mov	eax, DWORD PTR __Pred$[ebp]
	push	eax
	push	edi
	jge	SHORT $LN7@Sort_unche

; 7066 :             _Sort_unchecked(_First, _Mid.first, _Ideal, _Pred);

	mov	ecx, esi
	call	??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z ; std::_Sort_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *)>

; 7067 :             _First = _Mid.second;

	mov	esi, DWORD PTR __Mid$2[esp+52]
	mov	DWORD PTR __First$1$[esp+48], esi

; 7068 :         } else { // loop on first half

	jmp	SHORT $LN190@Sort_unche
$LN7@Sort_unche:

; 7069 :             _Sort_unchecked(_Mid.second, _Last, _Ideal, _Pred);

	mov	ecx, DWORD PTR __Mid$2[esp+52]
	mov	edx, ebx
	call	??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z ; std::_Sort_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *)>

; 7070 :             _Last = _Mid.first;

	mov	ebx, DWORD PTR __Mid$2[esp+48]
	mov	DWORD PTR __Last$1$[esp+48], ebx
$LN190@Sort_unche:

; 7047 :     // order [_First, _Last)
; 7048 :     for (;;) {
; 7049 :         if (_Last - _First <= _ISORT_MAX) { // small

	mov	ecx, DWORD PTR __Pred$[ebp]
	mov	eax, ebx
	sub	eax, esi
	add	esp, 8
	and	eax, -4					; fffffffcH
	cmp	eax, 128				; 00000080H
	jg	SHORT $LL2@Sort_unche
$LN165@Sort_unche:

; 6921 :     if (_First != _Last) {

	cmp	esi, ebx
	je	$LN45@Sort_unche

; 6922 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

	lea	ebx, DWORD PTR [esi+4]
	mov	DWORD PTR __Mid$1$[esp+40], ebx
	cmp	ebx, DWORD PTR __Last$1$[esp+40]
	je	$LN45@Sort_unche
	npad	1
$LL11@Sort_unche:

; 6923 :             _BidIt _Hole               = _Mid;
; 6924 :             _Iter_value_t<_BidIt> _Val = _STD move(*_Mid);
; 6925 : 
; 6926 :             if (_DEBUG_LT_PRED(_Pred, _Val, *_First)) { // found new earliest element, move to front

	push	DWORD PTR [esi]
	mov	edi, DWORD PTR [ebx]
	push	edi
	mov	DWORD PTR __Hole$1$[esp+48], ebx
	mov	DWORD PTR __Val$1$[esp+48], edi
	call	ecx
	add	esp, 8
	test	al, al
	je	$LN18@Sort_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4254 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	mov	ecx, ebx

; 4255 :     auto _Result                = _CSTD memmove(_Dest_ch - _Count, _First_ch, _Count);

	mov	eax, ebx
	sub	ecx, esi
	push	ecx
	sub	eax, ecx
	add	eax, 4
	push	esi
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6928 :                 *_First = _STD move(_Val);

	mov	DWORD PTR [esi], edi

; 6929 :             } else { // look for insertion point after first

	jmp	$LN19@Sort_unche
$LN166@Sort_unche:

; 5547 :     _Diff _Bottom = _Last - _First;

	sub	ebx, esi
	mov	eax, ebx
	mov	DWORD PTR __Last$1$[esp+40], ebx
	sar	eax, 2

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	mov	edx, eax
	mov	DWORD PTR __Bottom$1$[esp+40], eax
	sar	edx, 1
	test	edx, edx
	jle	$LN29@Sort_unche
	dec	eax
	mov	DWORD PTR tv742[esp+40], eax
	sar	eax, 1
	mov	DWORD PTR __Max_sequence_non_leaf$1$[esp+40], eax
	npad	3
$LL28@Sort_unche:

; 5549 :         // reheap top half, bottom to top
; 5550 :         --_Hole;
; 5551 :         _Iter_value_t<_RanIt> _Val = _STD move(*(_First + _Hole));

	mov	ebx, DWORD PTR [esi+edx*4-4]
	dec	edx
	mov	DWORD PTR __Val$1$[esp+40], ebx

; 5552 :         _Pop_heap_hole_by_index(_First, _Hole, _Bottom, _STD move(_Val), _Pred);

	mov	ebx, edx
	mov	DWORD PTR __Hole$1$[esp+40], edx

; 5381 :     _Diff _Idx       = _Hole;

	mov	edi, edx

; 5382 : 
; 5383 :     // Check whether _Idx can have a child before calculating that child's index, since
; 5384 :     // calculating the child's index can trigger integer overflows
; 5385 :     const _Diff _Max_sequence_non_leaf = (_Bottom - 1) >> 1; // shift for codegen
; 5386 :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

	cmp	edx, eax
	jge	SHORT $LN34@Sort_unche
	npad	11
$LL33@Sort_unche:

; 5387 :         _Idx = 2 * _Idx + 2;
; 5388 :         if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1)))) {

	push	DWORD PTR [esi+edi*8+4]
	lea	edi, DWORD PTR [edi*2+2]
	push	DWORD PTR [esi+edi*4]
	call	ecx
	add	esp, 8
	test	al, al
	je	SHORT $LN35@Sort_unche

; 5389 :             --_Idx;

	dec	edi
$LN35@Sort_unche:

; 5390 :         }
; 5391 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [esi+edi*4]
	mov	ecx, DWORD PTR __Pred$[ebp]
	mov	DWORD PTR [esi+ebx*4], eax

; 5392 :         _Hole             = _Idx;

	mov	ebx, edi
	mov	eax, DWORD PTR __Max_sequence_non_leaf$1$[esp+40]
	cmp	edi, eax
	jl	SHORT $LL33@Sort_unche
	mov	edx, DWORD PTR __Hole$1$[esp+40]
$LN34@Sort_unche:

; 5393 :     }
; 5394 : 
; 5395 :     if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it

	cmp	edi, eax
	jne	SHORT $LN36@Sort_unche
	mov	eax, DWORD PTR __Bottom$1$[esp+40]
	test	al, 1
	jne	SHORT $LN36@Sort_unche

; 5396 :         *(_First + _Hole) = _STD move(*(_First + (_Bottom - 1)));

	mov	eax, DWORD PTR [esi+eax*4-4]
	mov	DWORD PTR [esi+ebx*4], eax

; 5397 :         _Hole             = _Bottom - 1;

	mov	ebx, DWORD PTR tv742[esp+40]
$LN36@Sort_unche:

; 5268 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

	cmp	edx, ebx
	jge	SHORT $LN40@Sort_unche
	npad	6
$LL41@Sort_unche:
	push	DWORD PTR __Val$1$[esp+40]
	lea	edi, DWORD PTR [ebx-1]
	sar	edi, 1
	push	DWORD PTR [esi+edi*4]
	call	ecx
	mov	edx, DWORD PTR __Hole$1$[esp+48]
	add	esp, 8
	test	al, al
	je	SHORT $LN40@Sort_unche

; 5269 :          _Idx = (_Hole - 1) >> 1) { // shift for codegen
; 5270 :         // move _Hole up to parent
; 5271 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [esi+edi*4]
	mov	ecx, DWORD PTR __Pred$[ebp]
	mov	DWORD PTR [esi+ebx*4], eax

; 5272 :         _Hole             = _Idx;

	mov	ebx, edi
	cmp	edx, edi
	jl	SHORT $LL41@Sort_unche
$LN40@Sort_unche:

; 5273 :     }
; 5274 : 
; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	eax, DWORD PTR __Val$1$[esp+40]

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	mov	ecx, DWORD PTR __Pred$[ebp]

; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	DWORD PTR [esi+ebx*4], eax

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	mov	eax, DWORD PTR __Max_sequence_non_leaf$1$[esp+40]
	test	edx, edx
	jg	$LL28@Sort_unche
	mov	ebx, DWORD PTR __Last$1$[esp+40]
	mov	eax, DWORD PTR __Bottom$1$[esp+40]
$LN29@Sort_unche:

; 5774 :     for (; _Last - _First >= 2; --_Last) {

	cmp	eax, 2
	jl	$LN45@Sort_unche
	npad	1
$LL46@Sort_unche:

; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	eax, DWORD PTR [ebx+esi-4]

; 5410 :     _Pop_heap_hole_by_index(

	xor	edx, edx

; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	DWORD PTR __Val$1[esp+40], eax

; 5408 :     *_Dest      = _STD move(*_First);

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [ebx+esi-4], eax

; 5409 :     using _Diff = _Iter_diff_t<_RanIt>;
; 5410 :     _Pop_heap_hole_by_index(

	lea	eax, DWORD PTR __Val$1[esp+40]
	push	ecx
	push	eax
	lea	eax, DWORD PTR [ebx-4]
	mov	ecx, esi
	sar	eax, 2
	push	eax
	call	??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ; std::_Pop_heap_hole_by_index<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *)>

; 5774 :     for (; _Last - _First >= 2; --_Last) {

	mov	ecx, DWORD PTR __Pred$[ebp]
	sub	ebx, 4
	mov	eax, ebx

; 5410 :     _Pop_heap_hole_by_index(

	add	esp, 12					; 0000000cH

; 5774 :     for (; _Last - _First >= 2; --_Last) {

	and	eax, -4					; fffffffcH
	cmp	eax, 8
	jge	SHORT $LL46@Sort_unche

; 7071 :         }
; 7072 :     }
; 7073 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN18@Sort_unche:

; 6930 :                 for (_BidIt _Prev = _Hole; _DEBUG_LT_PRED(_Pred, _Val, *--_Prev); _Hole = _Prev) {

	push	DWORD PTR [ebx-4]
	mov	eax, DWORD PTR __Pred$[ebp]
	lea	edi, DWORD PTR [ebx-4]
	push	DWORD PTR __Val$1$[esp+44]
	call	eax
	add	esp, 8
	test	al, al
	je	SHORT $LN15@Sort_unche
	mov	esi, DWORD PTR __Val$1$[esp+40]
	mov	ebx, DWORD PTR __Hole$1$[esp+40]
	npad	4
$LL16@Sort_unche:

; 6931 :                     *_Hole = _STD move(*_Prev); // move hole down

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [ebx], eax
	mov	ebx, edi
	push	DWORD PTR [edi-4]
	sub	edi, 4
	push	esi
	call	DWORD PTR __Pred$[ebp]
	add	esp, 8
	test	al, al
	jne	SHORT $LL16@Sort_unche
	mov	esi, DWORD PTR __First$1$[esp+40]
	mov	DWORD PTR __Hole$1$[esp+40], ebx
	mov	ebx, DWORD PTR __Mid$1$[esp+40]
$LN15@Sort_unche:

; 6932 :                 }
; 6933 : 
; 6934 :                 *_Hole = _STD move(_Val); // insert element in hole

	mov	ecx, DWORD PTR __Hole$1$[esp+40]
	mov	eax, DWORD PTR __Val$1$[esp+40]
	mov	DWORD PTR [ecx], eax
$LN19@Sort_unche:

; 6922 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

	mov	ecx, DWORD PTR __Pred$[ebp]
	add	ebx, 4
	mov	DWORD PTR __Mid$1$[esp+40], ebx
	cmp	ebx, DWORD PTR __Last$1$[esp+40]
	jne	$LL11@Sort_unche
$LN45@Sort_unche:

; 7071 :         }
; 7072 :     }
; 7073 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z ENDP ; std::_Sort_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0@Z
_TEXT	SEGMENT
??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0@Z PROC ; std::_Adl_verify_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> > > >, COMDAT
; __First$dead$ = ecx
; __Last$dead$ = edx

; 1259 :     // check that [_First, _Last) forms an iterator range
; 1260 :     if constexpr (_Range_verifiable_v<_Iter, _Sentinel>) {
; 1261 :         _Verify_range(_First, _Last);
; 1262 :     }
; 1263 : }

	ret	0
??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0@Z ENDP ; std::_Adl_verify_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Pass_fn@P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@Z$0A@@std@@YAP6A_NPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@ZP6A_N00@Z@Z
_TEXT	SEGMENT
??$_Pass_fn@P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@Z$0A@@std@@YAP6A_NPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@ZP6A_N00@Z@Z PROC ; std::_Pass_fn<bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *),0>, COMDAT
; __Val$dead$ = ecx

; 253  :     return _Val;

	mov	eax, OFFSET ?cmp_states_nrm@@YA_NPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; cmp_states_nrm

; 254  : }

	ret	0
??$_Pass_fn@P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@Z$0A@@std@@YAP6A_NPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@ZP6A_N00@Z@Z ENDP ; std::_Pass_fn<bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *),0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z
_TEXT	SEGMENT
__Last$1$ = -28						; size = 4
__Hole$1$ = -24						; size = 4
__Val$1$ = -24						; size = 4
__Hole$1$ = -20						; size = 4
__Val$1$ = -20						; size = 4
__Mid$1$ = -16						; size = 4
__Max_sequence_non_leaf$1$ = -16			; size = 4
__First$1$ = -12					; size = 4
__Bottom$1$ = -12					; size = 4
tv742 = -8						; size = 4
__Val$1 = -8						; size = 4
__Mid$2 = -8						; size = 8
__Ideal$ = 8						; size = 4
__Pred$ = 12						; size = 4
??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z PROC ; std::_Sort_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 7046 : _CONSTEXPR20 void _Sort_unchecked(_RanIt _First, _RanIt _Last, _Iter_diff_t<_RanIt> _Ideal, _Pr _Pred) {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 28					; 0000001cH
	push	ebx
	mov	ebx, edx
	push	esi
	mov	esi, ecx
	mov	DWORD PTR __Last$1$[esp+36], ebx

; 7047 :     // order [_First, _Last)
; 7048 :     for (;;) {
; 7049 :         if (_Last - _First <= _ISORT_MAX) { // small

	mov	ecx, DWORD PTR __Pred$[ebp]
	mov	eax, ebx
	sub	eax, esi
	mov	DWORD PTR __First$1$[esp+36], esi
	and	eax, -4					; fffffffcH
	push	edi
	cmp	eax, 128				; 00000080H
	jle	SHORT $LN165@Sort_unche
	mov	edi, DWORD PTR __Ideal$[ebp]
	npad	4
$LL2@Sort_unche:

; 7050 :             _Insertion_sort_unchecked(_First, _Last, _Pred);
; 7051 :             return;
; 7052 :         }
; 7053 : 
; 7054 :         if (_Ideal <= 0) { // heap sort if too many divisions

	test	edi, edi
	jle	$LN166@Sort_unche

; 7055 :             _Make_heap_unchecked(_First, _Last, _Pred);
; 7056 :             _Sort_heap_unchecked(_First, _Last, _Pred);
; 7057 :             return;
; 7058 :         }
; 7059 : 
; 7060 :         // divide and conquer by quicksort
; 7061 :         auto _Mid = _Partition_by_median_guess_unchecked(_First, _Last, _Pred);

	push	ecx
	push	ebx
	mov	edx, esi
	lea	ecx, DWORD PTR __Mid$2[esp+48]
	call	??$_Partition_by_median_guess_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YA?AU?$pair@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@0@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU23@1@Z@Z ; std::_Partition_by_median_guess_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *)>

; 7062 : 
; 7063 :         _Ideal = (_Ideal >> 1) + (_Ideal >> 2); // allow 1.5 log2(N) divisions
; 7064 : 
; 7065 :         if (_Mid.first - _First < _Last - _Mid.second) { // loop on second half

	mov	edx, DWORD PTR __Mid$2[esp+48]
	mov	eax, edi
	sar	eax, 2
	mov	ecx, ebx
	sub	ecx, DWORD PTR __Mid$2[esp+52]
	add	esp, 8
	sar	edi, 1
	and	ecx, -4					; fffffffcH
	add	edi, eax
	mov	eax, edx
	sub	eax, esi
	and	eax, -4					; fffffffcH
	cmp	eax, ecx
	mov	eax, DWORD PTR __Pred$[ebp]
	push	eax
	push	edi
	jge	SHORT $LN7@Sort_unche

; 7066 :             _Sort_unchecked(_First, _Mid.first, _Ideal, _Pred);

	mov	ecx, esi
	call	??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z ; std::_Sort_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *)>

; 7067 :             _First = _Mid.second;

	mov	esi, DWORD PTR __Mid$2[esp+52]
	mov	DWORD PTR __First$1$[esp+48], esi

; 7068 :         } else { // loop on first half

	jmp	SHORT $LN190@Sort_unche
$LN7@Sort_unche:

; 7069 :             _Sort_unchecked(_Mid.second, _Last, _Ideal, _Pred);

	mov	ecx, DWORD PTR __Mid$2[esp+52]
	mov	edx, ebx
	call	??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z ; std::_Sort_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *)>

; 7070 :             _Last = _Mid.first;

	mov	ebx, DWORD PTR __Mid$2[esp+48]
	mov	DWORD PTR __Last$1$[esp+48], ebx
$LN190@Sort_unche:

; 7047 :     // order [_First, _Last)
; 7048 :     for (;;) {
; 7049 :         if (_Last - _First <= _ISORT_MAX) { // small

	mov	ecx, DWORD PTR __Pred$[ebp]
	mov	eax, ebx
	sub	eax, esi
	add	esp, 8
	and	eax, -4					; fffffffcH
	cmp	eax, 128				; 00000080H
	jg	SHORT $LL2@Sort_unche
$LN165@Sort_unche:

; 6921 :     if (_First != _Last) {

	cmp	esi, ebx
	je	$LN45@Sort_unche

; 6922 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

	lea	ebx, DWORD PTR [esi+4]
	mov	DWORD PTR __Mid$1$[esp+40], ebx
	cmp	ebx, DWORD PTR __Last$1$[esp+40]
	je	$LN45@Sort_unche
	npad	1
$LL11@Sort_unche:

; 6923 :             _BidIt _Hole               = _Mid;
; 6924 :             _Iter_value_t<_BidIt> _Val = _STD move(*_Mid);
; 6925 : 
; 6926 :             if (_DEBUG_LT_PRED(_Pred, _Val, *_First)) { // found new earliest element, move to front

	push	DWORD PTR [esi]
	mov	edi, DWORD PTR [ebx]
	push	edi
	mov	DWORD PTR __Hole$1$[esp+48], ebx
	mov	DWORD PTR __Val$1$[esp+48], edi
	call	ecx
	add	esp, 8
	test	al, al
	je	$LN18@Sort_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4254 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	mov	ecx, ebx

; 4255 :     auto _Result                = _CSTD memmove(_Dest_ch - _Count, _First_ch, _Count);

	mov	eax, ebx
	sub	ecx, esi
	push	ecx
	sub	eax, ecx
	add	eax, 4
	push	esi
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6928 :                 *_First = _STD move(_Val);

	mov	DWORD PTR [esi], edi

; 6929 :             } else { // look for insertion point after first

	jmp	$LN19@Sort_unche
$LN166@Sort_unche:

; 5547 :     _Diff _Bottom = _Last - _First;

	sub	ebx, esi
	mov	eax, ebx
	mov	DWORD PTR __Last$1$[esp+40], ebx
	sar	eax, 2

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	mov	edx, eax
	mov	DWORD PTR __Bottom$1$[esp+40], eax
	sar	edx, 1
	test	edx, edx
	jle	$LN29@Sort_unche
	dec	eax
	mov	DWORD PTR tv742[esp+40], eax
	sar	eax, 1
	mov	DWORD PTR __Max_sequence_non_leaf$1$[esp+40], eax
	npad	3
$LL28@Sort_unche:

; 5549 :         // reheap top half, bottom to top
; 5550 :         --_Hole;
; 5551 :         _Iter_value_t<_RanIt> _Val = _STD move(*(_First + _Hole));

	mov	ebx, DWORD PTR [esi+edx*4-4]
	dec	edx
	mov	DWORD PTR __Val$1$[esp+40], ebx

; 5552 :         _Pop_heap_hole_by_index(_First, _Hole, _Bottom, _STD move(_Val), _Pred);

	mov	ebx, edx
	mov	DWORD PTR __Hole$1$[esp+40], edx

; 5381 :     _Diff _Idx       = _Hole;

	mov	edi, edx

; 5382 : 
; 5383 :     // Check whether _Idx can have a child before calculating that child's index, since
; 5384 :     // calculating the child's index can trigger integer overflows
; 5385 :     const _Diff _Max_sequence_non_leaf = (_Bottom - 1) >> 1; // shift for codegen
; 5386 :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

	cmp	edx, eax
	jge	SHORT $LN34@Sort_unche
	npad	11
$LL33@Sort_unche:

; 5387 :         _Idx = 2 * _Idx + 2;
; 5388 :         if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1)))) {

	push	DWORD PTR [esi+edi*8+4]
	lea	edi, DWORD PTR [edi*2+2]
	push	DWORD PTR [esi+edi*4]
	call	ecx
	add	esp, 8
	test	al, al
	je	SHORT $LN35@Sort_unche

; 5389 :             --_Idx;

	dec	edi
$LN35@Sort_unche:

; 5390 :         }
; 5391 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [esi+edi*4]
	mov	ecx, DWORD PTR __Pred$[ebp]
	mov	DWORD PTR [esi+ebx*4], eax

; 5392 :         _Hole             = _Idx;

	mov	ebx, edi
	mov	eax, DWORD PTR __Max_sequence_non_leaf$1$[esp+40]
	cmp	edi, eax
	jl	SHORT $LL33@Sort_unche
	mov	edx, DWORD PTR __Hole$1$[esp+40]
$LN34@Sort_unche:

; 5393 :     }
; 5394 : 
; 5395 :     if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it

	cmp	edi, eax
	jne	SHORT $LN36@Sort_unche
	mov	eax, DWORD PTR __Bottom$1$[esp+40]
	test	al, 1
	jne	SHORT $LN36@Sort_unche

; 5396 :         *(_First + _Hole) = _STD move(*(_First + (_Bottom - 1)));

	mov	eax, DWORD PTR [esi+eax*4-4]
	mov	DWORD PTR [esi+ebx*4], eax

; 5397 :         _Hole             = _Bottom - 1;

	mov	ebx, DWORD PTR tv742[esp+40]
$LN36@Sort_unche:

; 5268 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

	cmp	edx, ebx
	jge	SHORT $LN40@Sort_unche
	npad	6
$LL41@Sort_unche:
	push	DWORD PTR __Val$1$[esp+40]
	lea	edi, DWORD PTR [ebx-1]
	sar	edi, 1
	push	DWORD PTR [esi+edi*4]
	call	ecx
	mov	edx, DWORD PTR __Hole$1$[esp+48]
	add	esp, 8
	test	al, al
	je	SHORT $LN40@Sort_unche

; 5269 :          _Idx = (_Hole - 1) >> 1) { // shift for codegen
; 5270 :         // move _Hole up to parent
; 5271 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [esi+edi*4]
	mov	ecx, DWORD PTR __Pred$[ebp]
	mov	DWORD PTR [esi+ebx*4], eax

; 5272 :         _Hole             = _Idx;

	mov	ebx, edi
	cmp	edx, edi
	jl	SHORT $LL41@Sort_unche
$LN40@Sort_unche:

; 5273 :     }
; 5274 : 
; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	eax, DWORD PTR __Val$1$[esp+40]

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	mov	ecx, DWORD PTR __Pred$[ebp]

; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	DWORD PTR [esi+ebx*4], eax

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	mov	eax, DWORD PTR __Max_sequence_non_leaf$1$[esp+40]
	test	edx, edx
	jg	$LL28@Sort_unche
	mov	ebx, DWORD PTR __Last$1$[esp+40]
	mov	eax, DWORD PTR __Bottom$1$[esp+40]
$LN29@Sort_unche:

; 5774 :     for (; _Last - _First >= 2; --_Last) {

	cmp	eax, 2
	jl	$LN45@Sort_unche
	npad	1
$LL46@Sort_unche:

; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	eax, DWORD PTR [ebx+esi-4]

; 5410 :     _Pop_heap_hole_by_index(

	xor	edx, edx

; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	DWORD PTR __Val$1[esp+40], eax

; 5408 :     *_Dest      = _STD move(*_First);

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [ebx+esi-4], eax

; 5409 :     using _Diff = _Iter_diff_t<_RanIt>;
; 5410 :     _Pop_heap_hole_by_index(

	lea	eax, DWORD PTR __Val$1[esp+40]
	push	ecx
	push	eax
	lea	eax, DWORD PTR [ebx-4]
	mov	ecx, esi
	sar	eax, 2
	push	eax
	call	??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ; std::_Pop_heap_hole_by_index<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *)>

; 5774 :     for (; _Last - _First >= 2; --_Last) {

	mov	ecx, DWORD PTR __Pred$[ebp]
	sub	ebx, 4
	mov	eax, ebx

; 5410 :     _Pop_heap_hole_by_index(

	add	esp, 12					; 0000000cH

; 5774 :     for (; _Last - _First >= 2; --_Last) {

	and	eax, -4					; fffffffcH
	cmp	eax, 8
	jge	SHORT $LL46@Sort_unche

; 7071 :         }
; 7072 :     }
; 7073 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN18@Sort_unche:

; 6930 :                 for (_BidIt _Prev = _Hole; _DEBUG_LT_PRED(_Pred, _Val, *--_Prev); _Hole = _Prev) {

	push	DWORD PTR [ebx-4]
	mov	eax, DWORD PTR __Pred$[ebp]
	lea	edi, DWORD PTR [ebx-4]
	push	DWORD PTR __Val$1$[esp+44]
	call	eax
	add	esp, 8
	test	al, al
	je	SHORT $LN15@Sort_unche
	mov	esi, DWORD PTR __Val$1$[esp+40]
	mov	ebx, DWORD PTR __Hole$1$[esp+40]
	npad	4
$LL16@Sort_unche:

; 6931 :                     *_Hole = _STD move(*_Prev); // move hole down

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [ebx], eax
	mov	ebx, edi
	push	DWORD PTR [edi-4]
	sub	edi, 4
	push	esi
	call	DWORD PTR __Pred$[ebp]
	add	esp, 8
	test	al, al
	jne	SHORT $LL16@Sort_unche
	mov	esi, DWORD PTR __First$1$[esp+40]
	mov	DWORD PTR __Hole$1$[esp+40], ebx
	mov	ebx, DWORD PTR __Mid$1$[esp+40]
$LN15@Sort_unche:

; 6932 :                 }
; 6933 : 
; 6934 :                 *_Hole = _STD move(_Val); // insert element in hole

	mov	ecx, DWORD PTR __Hole$1$[esp+40]
	mov	eax, DWORD PTR __Val$1$[esp+40]
	mov	DWORD PTR [ecx], eax
$LN19@Sort_unche:

; 6922 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

	mov	ecx, DWORD PTR __Pred$[ebp]
	add	ebx, 4
	mov	DWORD PTR __Mid$1$[esp+40], ebx
	cmp	ebx, DWORD PTR __Last$1$[esp+40]
	jne	$LL11@Sort_unche
$LN45@Sort_unche:

; 7071 :         }
; 7072 :     }
; 7073 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z ENDP ; std::_Sort_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0@Z
_TEXT	SEGMENT
??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0@Z PROC ; std::_Adl_verify_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> > > >, COMDAT
; __First$dead$ = ecx
; __Last$dead$ = edx

; 1259 :     // check that [_First, _Last) forms an iterator range
; 1260 :     if constexpr (_Range_verifiable_v<_Iter, _Sentinel>) {
; 1261 :         _Verify_range(_First, _Last);
; 1262 :     }
; 1263 : }

	ret	0
??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0@Z ENDP ; std::_Adl_verify_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Pass_fn@P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z$0A@@std@@YAP6A_NPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@0@ZP6A_N00@Z@Z
_TEXT	SEGMENT
??$_Pass_fn@P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z$0A@@std@@YAP6A_NPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@0@ZP6A_N00@Z@Z PROC ; std::_Pass_fn<bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *),0>, COMDAT
; __Val$dead$ = ecx

; 253  :     return _Val;

	mov	eax, OFFSET ?cmp_vs_mat@@YA_NPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; cmp_vs_mat

; 254  : }

	ret	0
??$_Pass_fn@P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z$0A@@std@@YAP6A_NPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@0@ZP6A_N00@Z@Z ENDP ; std::_Pass_fn<bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *),0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z
_TEXT	SEGMENT
__Last$1$ = -28						; size = 4
__Hole$1$ = -24						; size = 4
__Val$1$ = -24						; size = 4
__Hole$1$ = -20						; size = 4
__Val$1$ = -20						; size = 4
__Mid$1$ = -16						; size = 4
__Max_sequence_non_leaf$1$ = -16			; size = 4
__First$1$ = -12					; size = 4
__Bottom$1$ = -12					; size = 4
tv742 = -8						; size = 4
__Val$1 = -8						; size = 4
__Mid$2 = -8						; size = 8
__Ideal$ = 8						; size = 4
__Pred$ = 12						; size = 4
??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z PROC ; std::_Sort_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 7046 : _CONSTEXPR20 void _Sort_unchecked(_RanIt _First, _RanIt _Last, _Iter_diff_t<_RanIt> _Ideal, _Pr _Pred) {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 28					; 0000001cH
	push	ebx
	mov	ebx, edx
	push	esi
	mov	esi, ecx
	mov	DWORD PTR __Last$1$[esp+36], ebx

; 7047 :     // order [_First, _Last)
; 7048 :     for (;;) {
; 7049 :         if (_Last - _First <= _ISORT_MAX) { // small

	mov	ecx, DWORD PTR __Pred$[ebp]
	mov	eax, ebx
	sub	eax, esi
	mov	DWORD PTR __First$1$[esp+36], esi
	and	eax, -4					; fffffffcH
	push	edi
	cmp	eax, 128				; 00000080H
	jle	SHORT $LN165@Sort_unche
	mov	edi, DWORD PTR __Ideal$[ebp]
	npad	4
$LL2@Sort_unche:

; 7050 :             _Insertion_sort_unchecked(_First, _Last, _Pred);
; 7051 :             return;
; 7052 :         }
; 7053 : 
; 7054 :         if (_Ideal <= 0) { // heap sort if too many divisions

	test	edi, edi
	jle	$LN166@Sort_unche

; 7055 :             _Make_heap_unchecked(_First, _Last, _Pred);
; 7056 :             _Sort_heap_unchecked(_First, _Last, _Pred);
; 7057 :             return;
; 7058 :         }
; 7059 : 
; 7060 :         // divide and conquer by quicksort
; 7061 :         auto _Mid = _Partition_by_median_guess_unchecked(_First, _Last, _Pred);

	push	ecx
	push	ebx
	mov	edx, esi
	lea	ecx, DWORD PTR __Mid$2[esp+48]
	call	??$_Partition_by_median_guess_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YA?AU?$pair@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@0@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU23@1@Z@Z ; std::_Partition_by_median_guess_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *)>

; 7062 : 
; 7063 :         _Ideal = (_Ideal >> 1) + (_Ideal >> 2); // allow 1.5 log2(N) divisions
; 7064 : 
; 7065 :         if (_Mid.first - _First < _Last - _Mid.second) { // loop on second half

	mov	edx, DWORD PTR __Mid$2[esp+48]
	mov	eax, edi
	sar	eax, 2
	mov	ecx, ebx
	sub	ecx, DWORD PTR __Mid$2[esp+52]
	add	esp, 8
	sar	edi, 1
	and	ecx, -4					; fffffffcH
	add	edi, eax
	mov	eax, edx
	sub	eax, esi
	and	eax, -4					; fffffffcH
	cmp	eax, ecx
	mov	eax, DWORD PTR __Pred$[ebp]
	push	eax
	push	edi
	jge	SHORT $LN7@Sort_unche

; 7066 :             _Sort_unchecked(_First, _Mid.first, _Ideal, _Pred);

	mov	ecx, esi
	call	??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z ; std::_Sort_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *)>

; 7067 :             _First = _Mid.second;

	mov	esi, DWORD PTR __Mid$2[esp+52]
	mov	DWORD PTR __First$1$[esp+48], esi

; 7068 :         } else { // loop on first half

	jmp	SHORT $LN190@Sort_unche
$LN7@Sort_unche:

; 7069 :             _Sort_unchecked(_Mid.second, _Last, _Ideal, _Pred);

	mov	ecx, DWORD PTR __Mid$2[esp+52]
	mov	edx, ebx
	call	??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z ; std::_Sort_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *)>

; 7070 :             _Last = _Mid.first;

	mov	ebx, DWORD PTR __Mid$2[esp+48]
	mov	DWORD PTR __Last$1$[esp+48], ebx
$LN190@Sort_unche:

; 7047 :     // order [_First, _Last)
; 7048 :     for (;;) {
; 7049 :         if (_Last - _First <= _ISORT_MAX) { // small

	mov	ecx, DWORD PTR __Pred$[ebp]
	mov	eax, ebx
	sub	eax, esi
	add	esp, 8
	and	eax, -4					; fffffffcH
	cmp	eax, 128				; 00000080H
	jg	SHORT $LL2@Sort_unche
$LN165@Sort_unche:

; 6921 :     if (_First != _Last) {

	cmp	esi, ebx
	je	$LN45@Sort_unche

; 6922 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

	lea	ebx, DWORD PTR [esi+4]
	mov	DWORD PTR __Mid$1$[esp+40], ebx
	cmp	ebx, DWORD PTR __Last$1$[esp+40]
	je	$LN45@Sort_unche
	npad	1
$LL11@Sort_unche:

; 6923 :             _BidIt _Hole               = _Mid;
; 6924 :             _Iter_value_t<_BidIt> _Val = _STD move(*_Mid);
; 6925 : 
; 6926 :             if (_DEBUG_LT_PRED(_Pred, _Val, *_First)) { // found new earliest element, move to front

	push	DWORD PTR [esi]
	mov	edi, DWORD PTR [ebx]
	push	edi
	mov	DWORD PTR __Hole$1$[esp+48], ebx
	mov	DWORD PTR __Val$1$[esp+48], edi
	call	ecx
	add	esp, 8
	test	al, al
	je	$LN18@Sort_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4254 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	mov	ecx, ebx

; 4255 :     auto _Result                = _CSTD memmove(_Dest_ch - _Count, _First_ch, _Count);

	mov	eax, ebx
	sub	ecx, esi
	push	ecx
	sub	eax, ecx
	add	eax, 4
	push	esi
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6928 :                 *_First = _STD move(_Val);

	mov	DWORD PTR [esi], edi

; 6929 :             } else { // look for insertion point after first

	jmp	$LN19@Sort_unche
$LN166@Sort_unche:

; 5547 :     _Diff _Bottom = _Last - _First;

	sub	ebx, esi
	mov	eax, ebx
	mov	DWORD PTR __Last$1$[esp+40], ebx
	sar	eax, 2

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	mov	edx, eax
	mov	DWORD PTR __Bottom$1$[esp+40], eax
	sar	edx, 1
	test	edx, edx
	jle	$LN29@Sort_unche
	dec	eax
	mov	DWORD PTR tv742[esp+40], eax
	sar	eax, 1
	mov	DWORD PTR __Max_sequence_non_leaf$1$[esp+40], eax
	npad	3
$LL28@Sort_unche:

; 5549 :         // reheap top half, bottom to top
; 5550 :         --_Hole;
; 5551 :         _Iter_value_t<_RanIt> _Val = _STD move(*(_First + _Hole));

	mov	ebx, DWORD PTR [esi+edx*4-4]
	dec	edx
	mov	DWORD PTR __Val$1$[esp+40], ebx

; 5552 :         _Pop_heap_hole_by_index(_First, _Hole, _Bottom, _STD move(_Val), _Pred);

	mov	ebx, edx
	mov	DWORD PTR __Hole$1$[esp+40], edx

; 5381 :     _Diff _Idx       = _Hole;

	mov	edi, edx

; 5382 : 
; 5383 :     // Check whether _Idx can have a child before calculating that child's index, since
; 5384 :     // calculating the child's index can trigger integer overflows
; 5385 :     const _Diff _Max_sequence_non_leaf = (_Bottom - 1) >> 1; // shift for codegen
; 5386 :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

	cmp	edx, eax
	jge	SHORT $LN34@Sort_unche
	npad	11
$LL33@Sort_unche:

; 5387 :         _Idx = 2 * _Idx + 2;
; 5388 :         if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1)))) {

	push	DWORD PTR [esi+edi*8+4]
	lea	edi, DWORD PTR [edi*2+2]
	push	DWORD PTR [esi+edi*4]
	call	ecx
	add	esp, 8
	test	al, al
	je	SHORT $LN35@Sort_unche

; 5389 :             --_Idx;

	dec	edi
$LN35@Sort_unche:

; 5390 :         }
; 5391 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [esi+edi*4]
	mov	ecx, DWORD PTR __Pred$[ebp]
	mov	DWORD PTR [esi+ebx*4], eax

; 5392 :         _Hole             = _Idx;

	mov	ebx, edi
	mov	eax, DWORD PTR __Max_sequence_non_leaf$1$[esp+40]
	cmp	edi, eax
	jl	SHORT $LL33@Sort_unche
	mov	edx, DWORD PTR __Hole$1$[esp+40]
$LN34@Sort_unche:

; 5393 :     }
; 5394 : 
; 5395 :     if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it

	cmp	edi, eax
	jne	SHORT $LN36@Sort_unche
	mov	eax, DWORD PTR __Bottom$1$[esp+40]
	test	al, 1
	jne	SHORT $LN36@Sort_unche

; 5396 :         *(_First + _Hole) = _STD move(*(_First + (_Bottom - 1)));

	mov	eax, DWORD PTR [esi+eax*4-4]
	mov	DWORD PTR [esi+ebx*4], eax

; 5397 :         _Hole             = _Bottom - 1;

	mov	ebx, DWORD PTR tv742[esp+40]
$LN36@Sort_unche:

; 5268 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

	cmp	edx, ebx
	jge	SHORT $LN40@Sort_unche
	npad	6
$LL41@Sort_unche:
	push	DWORD PTR __Val$1$[esp+40]
	lea	edi, DWORD PTR [ebx-1]
	sar	edi, 1
	push	DWORD PTR [esi+edi*4]
	call	ecx
	mov	edx, DWORD PTR __Hole$1$[esp+48]
	add	esp, 8
	test	al, al
	je	SHORT $LN40@Sort_unche

; 5269 :          _Idx = (_Hole - 1) >> 1) { // shift for codegen
; 5270 :         // move _Hole up to parent
; 5271 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [esi+edi*4]
	mov	ecx, DWORD PTR __Pred$[ebp]
	mov	DWORD PTR [esi+ebx*4], eax

; 5272 :         _Hole             = _Idx;

	mov	ebx, edi
	cmp	edx, edi
	jl	SHORT $LL41@Sort_unche
$LN40@Sort_unche:

; 5273 :     }
; 5274 : 
; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	eax, DWORD PTR __Val$1$[esp+40]

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	mov	ecx, DWORD PTR __Pred$[ebp]

; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	DWORD PTR [esi+ebx*4], eax

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	mov	eax, DWORD PTR __Max_sequence_non_leaf$1$[esp+40]
	test	edx, edx
	jg	$LL28@Sort_unche
	mov	ebx, DWORD PTR __Last$1$[esp+40]
	mov	eax, DWORD PTR __Bottom$1$[esp+40]
$LN29@Sort_unche:

; 5774 :     for (; _Last - _First >= 2; --_Last) {

	cmp	eax, 2
	jl	$LN45@Sort_unche
	npad	1
$LL46@Sort_unche:

; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	eax, DWORD PTR [ebx+esi-4]

; 5410 :     _Pop_heap_hole_by_index(

	xor	edx, edx

; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	DWORD PTR __Val$1[esp+40], eax

; 5408 :     *_Dest      = _STD move(*_First);

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [ebx+esi-4], eax

; 5409 :     using _Diff = _Iter_diff_t<_RanIt>;
; 5410 :     _Pop_heap_hole_by_index(

	lea	eax, DWORD PTR __Val$1[esp+40]
	push	ecx
	push	eax
	lea	eax, DWORD PTR [ebx-4]
	mov	ecx, esi
	sar	eax, 2
	push	eax
	call	??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ; std::_Pop_heap_hole_by_index<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *)>

; 5774 :     for (; _Last - _First >= 2; --_Last) {

	mov	ecx, DWORD PTR __Pred$[ebp]
	sub	ebx, 4
	mov	eax, ebx

; 5410 :     _Pop_heap_hole_by_index(

	add	esp, 12					; 0000000cH

; 5774 :     for (; _Last - _First >= 2; --_Last) {

	and	eax, -4					; fffffffcH
	cmp	eax, 8
	jge	SHORT $LL46@Sort_unche

; 7071 :         }
; 7072 :     }
; 7073 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN18@Sort_unche:

; 6930 :                 for (_BidIt _Prev = _Hole; _DEBUG_LT_PRED(_Pred, _Val, *--_Prev); _Hole = _Prev) {

	push	DWORD PTR [ebx-4]
	mov	eax, DWORD PTR __Pred$[ebp]
	lea	edi, DWORD PTR [ebx-4]
	push	DWORD PTR __Val$1$[esp+44]
	call	eax
	add	esp, 8
	test	al, al
	je	SHORT $LN15@Sort_unche
	mov	esi, DWORD PTR __Val$1$[esp+40]
	mov	ebx, DWORD PTR __Hole$1$[esp+40]
	npad	4
$LL16@Sort_unche:

; 6931 :                     *_Hole = _STD move(*_Prev); // move hole down

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [ebx], eax
	mov	ebx, edi
	push	DWORD PTR [edi-4]
	sub	edi, 4
	push	esi
	call	DWORD PTR __Pred$[ebp]
	add	esp, 8
	test	al, al
	jne	SHORT $LL16@Sort_unche
	mov	esi, DWORD PTR __First$1$[esp+40]
	mov	DWORD PTR __Hole$1$[esp+40], ebx
	mov	ebx, DWORD PTR __Mid$1$[esp+40]
$LN15@Sort_unche:

; 6932 :                 }
; 6933 : 
; 6934 :                 *_Hole = _STD move(_Val); // insert element in hole

	mov	ecx, DWORD PTR __Hole$1$[esp+40]
	mov	eax, DWORD PTR __Val$1$[esp+40]
	mov	DWORD PTR [ecx], eax
$LN19@Sort_unche:

; 6922 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

	mov	ecx, DWORD PTR __Pred$[ebp]
	add	ebx, 4
	mov	DWORD PTR __Mid$1$[esp+40], ebx
	cmp	ebx, DWORD PTR __Last$1$[esp+40]
	jne	$LL11@Sort_unche
$LN45@Sort_unche:

; 7071 :         }
; 7072 :     }
; 7073 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z ENDP ; std::_Sort_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0@Z
_TEXT	SEGMENT
??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0@Z PROC ; std::_Adl_verify_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> > > >, COMDAT
; __First$dead$ = ecx
; __Last$dead$ = edx

; 1259 :     // check that [_First, _Last) forms an iterator range
; 1260 :     if constexpr (_Range_verifiable_v<_Iter, _Sentinel>) {
; 1261 :         _Verify_range(_First, _Last);
; 1262 :     }
; 1263 : }

	ret	0
??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0@Z ENDP ; std::_Adl_verify_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Pass_fn@P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z$0A@@std@@YAP6A_NPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@0@ZP6A_N00@Z@Z
_TEXT	SEGMENT
??$_Pass_fn@P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z$0A@@std@@YAP6A_NPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@0@ZP6A_N00@Z@Z PROC ; std::_Pass_fn<bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *),0>, COMDAT
; __Val$dead$ = ecx

; 253  :     return _Val;

	mov	eax, OFFSET ?cmp_ps_mat@@YA_NPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; cmp_ps_mat

; 254  : }

	ret	0
??$_Pass_fn@P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z$0A@@std@@YAP6A_NPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@0@ZP6A_N00@Z@Z ENDP ; std::_Pass_fn<bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *),0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z
_TEXT	SEGMENT
__Last$1$ = -28						; size = 4
__Hole$1$ = -24						; size = 4
__Val$1$ = -24						; size = 4
__Hole$1$ = -20						; size = 4
__Val$1$ = -20						; size = 4
__Mid$1$ = -16						; size = 4
__Max_sequence_non_leaf$1$ = -16			; size = 4
__First$1$ = -12					; size = 4
__Bottom$1$ = -12					; size = 4
tv742 = -8						; size = 4
__Val$1 = -8						; size = 4
__Mid$2 = -8						; size = 8
__Ideal$ = 8						; size = 4
__Pred$ = 12						; size = 4
??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z PROC ; std::_Sort_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 7046 : _CONSTEXPR20 void _Sort_unchecked(_RanIt _First, _RanIt _Last, _Iter_diff_t<_RanIt> _Ideal, _Pr _Pred) {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 28					; 0000001cH
	push	ebx
	mov	ebx, edx
	push	esi
	mov	esi, ecx
	mov	DWORD PTR __Last$1$[esp+36], ebx

; 7047 :     // order [_First, _Last)
; 7048 :     for (;;) {
; 7049 :         if (_Last - _First <= _ISORT_MAX) { // small

	mov	ecx, DWORD PTR __Pred$[ebp]
	mov	eax, ebx
	sub	eax, esi
	mov	DWORD PTR __First$1$[esp+36], esi
	and	eax, -4					; fffffffcH
	push	edi
	cmp	eax, 128				; 00000080H
	jle	SHORT $LN165@Sort_unche
	mov	edi, DWORD PTR __Ideal$[ebp]
	npad	4
$LL2@Sort_unche:

; 7050 :             _Insertion_sort_unchecked(_First, _Last, _Pred);
; 7051 :             return;
; 7052 :         }
; 7053 : 
; 7054 :         if (_Ideal <= 0) { // heap sort if too many divisions

	test	edi, edi
	jle	$LN166@Sort_unche

; 7055 :             _Make_heap_unchecked(_First, _Last, _Pred);
; 7056 :             _Sort_heap_unchecked(_First, _Last, _Pred);
; 7057 :             return;
; 7058 :         }
; 7059 : 
; 7060 :         // divide and conquer by quicksort
; 7061 :         auto _Mid = _Partition_by_median_guess_unchecked(_First, _Last, _Pred);

	push	ecx
	push	ebx
	mov	edx, esi
	lea	ecx, DWORD PTR __Mid$2[esp+48]
	call	??$_Partition_by_median_guess_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YA?AU?$pair@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@0@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU23@1@Z@Z ; std::_Partition_by_median_guess_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *)>

; 7062 : 
; 7063 :         _Ideal = (_Ideal >> 1) + (_Ideal >> 2); // allow 1.5 log2(N) divisions
; 7064 : 
; 7065 :         if (_Mid.first - _First < _Last - _Mid.second) { // loop on second half

	mov	edx, DWORD PTR __Mid$2[esp+48]
	mov	eax, edi
	sar	eax, 2
	mov	ecx, ebx
	sub	ecx, DWORD PTR __Mid$2[esp+52]
	add	esp, 8
	sar	edi, 1
	and	ecx, -4					; fffffffcH
	add	edi, eax
	mov	eax, edx
	sub	eax, esi
	and	eax, -4					; fffffffcH
	cmp	eax, ecx
	mov	eax, DWORD PTR __Pred$[ebp]
	push	eax
	push	edi
	jge	SHORT $LN7@Sort_unche

; 7066 :             _Sort_unchecked(_First, _Mid.first, _Ideal, _Pred);

	mov	ecx, esi
	call	??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z ; std::_Sort_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *)>

; 7067 :             _First = _Mid.second;

	mov	esi, DWORD PTR __Mid$2[esp+52]
	mov	DWORD PTR __First$1$[esp+48], esi

; 7068 :         } else { // loop on first half

	jmp	SHORT $LN190@Sort_unche
$LN7@Sort_unche:

; 7069 :             _Sort_unchecked(_Mid.second, _Last, _Ideal, _Pred);

	mov	ecx, DWORD PTR __Mid$2[esp+52]
	mov	edx, ebx
	call	??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z ; std::_Sort_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *)>

; 7070 :             _Last = _Mid.first;

	mov	ebx, DWORD PTR __Mid$2[esp+48]
	mov	DWORD PTR __Last$1$[esp+48], ebx
$LN190@Sort_unche:

; 7047 :     // order [_First, _Last)
; 7048 :     for (;;) {
; 7049 :         if (_Last - _First <= _ISORT_MAX) { // small

	mov	ecx, DWORD PTR __Pred$[ebp]
	mov	eax, ebx
	sub	eax, esi
	add	esp, 8
	and	eax, -4					; fffffffcH
	cmp	eax, 128				; 00000080H
	jg	SHORT $LL2@Sort_unche
$LN165@Sort_unche:

; 6921 :     if (_First != _Last) {

	cmp	esi, ebx
	je	$LN45@Sort_unche

; 6922 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

	lea	ebx, DWORD PTR [esi+4]
	mov	DWORD PTR __Mid$1$[esp+40], ebx
	cmp	ebx, DWORD PTR __Last$1$[esp+40]
	je	$LN45@Sort_unche
	npad	1
$LL11@Sort_unche:

; 6923 :             _BidIt _Hole               = _Mid;
; 6924 :             _Iter_value_t<_BidIt> _Val = _STD move(*_Mid);
; 6925 : 
; 6926 :             if (_DEBUG_LT_PRED(_Pred, _Val, *_First)) { // found new earliest element, move to front

	push	DWORD PTR [esi]
	mov	edi, DWORD PTR [ebx]
	push	edi
	mov	DWORD PTR __Hole$1$[esp+48], ebx
	mov	DWORD PTR __Val$1$[esp+48], edi
	call	ecx
	add	esp, 8
	test	al, al
	je	$LN18@Sort_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4254 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	mov	ecx, ebx

; 4255 :     auto _Result                = _CSTD memmove(_Dest_ch - _Count, _First_ch, _Count);

	mov	eax, ebx
	sub	ecx, esi
	push	ecx
	sub	eax, ecx
	add	eax, 4
	push	esi
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6928 :                 *_First = _STD move(_Val);

	mov	DWORD PTR [esi], edi

; 6929 :             } else { // look for insertion point after first

	jmp	$LN19@Sort_unche
$LN166@Sort_unche:

; 5547 :     _Diff _Bottom = _Last - _First;

	sub	ebx, esi
	mov	eax, ebx
	mov	DWORD PTR __Last$1$[esp+40], ebx
	sar	eax, 2

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	mov	edx, eax
	mov	DWORD PTR __Bottom$1$[esp+40], eax
	sar	edx, 1
	test	edx, edx
	jle	$LN29@Sort_unche
	dec	eax
	mov	DWORD PTR tv742[esp+40], eax
	sar	eax, 1
	mov	DWORD PTR __Max_sequence_non_leaf$1$[esp+40], eax
	npad	3
$LL28@Sort_unche:

; 5549 :         // reheap top half, bottom to top
; 5550 :         --_Hole;
; 5551 :         _Iter_value_t<_RanIt> _Val = _STD move(*(_First + _Hole));

	mov	ebx, DWORD PTR [esi+edx*4-4]
	dec	edx
	mov	DWORD PTR __Val$1$[esp+40], ebx

; 5552 :         _Pop_heap_hole_by_index(_First, _Hole, _Bottom, _STD move(_Val), _Pred);

	mov	ebx, edx
	mov	DWORD PTR __Hole$1$[esp+40], edx

; 5381 :     _Diff _Idx       = _Hole;

	mov	edi, edx

; 5382 : 
; 5383 :     // Check whether _Idx can have a child before calculating that child's index, since
; 5384 :     // calculating the child's index can trigger integer overflows
; 5385 :     const _Diff _Max_sequence_non_leaf = (_Bottom - 1) >> 1; // shift for codegen
; 5386 :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

	cmp	edx, eax
	jge	SHORT $LN34@Sort_unche
	npad	11
$LL33@Sort_unche:

; 5387 :         _Idx = 2 * _Idx + 2;
; 5388 :         if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1)))) {

	push	DWORD PTR [esi+edi*8+4]
	lea	edi, DWORD PTR [edi*2+2]
	push	DWORD PTR [esi+edi*4]
	call	ecx
	add	esp, 8
	test	al, al
	je	SHORT $LN35@Sort_unche

; 5389 :             --_Idx;

	dec	edi
$LN35@Sort_unche:

; 5390 :         }
; 5391 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [esi+edi*4]
	mov	ecx, DWORD PTR __Pred$[ebp]
	mov	DWORD PTR [esi+ebx*4], eax

; 5392 :         _Hole             = _Idx;

	mov	ebx, edi
	mov	eax, DWORD PTR __Max_sequence_non_leaf$1$[esp+40]
	cmp	edi, eax
	jl	SHORT $LL33@Sort_unche
	mov	edx, DWORD PTR __Hole$1$[esp+40]
$LN34@Sort_unche:

; 5393 :     }
; 5394 : 
; 5395 :     if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it

	cmp	edi, eax
	jne	SHORT $LN36@Sort_unche
	mov	eax, DWORD PTR __Bottom$1$[esp+40]
	test	al, 1
	jne	SHORT $LN36@Sort_unche

; 5396 :         *(_First + _Hole) = _STD move(*(_First + (_Bottom - 1)));

	mov	eax, DWORD PTR [esi+eax*4-4]
	mov	DWORD PTR [esi+ebx*4], eax

; 5397 :         _Hole             = _Bottom - 1;

	mov	ebx, DWORD PTR tv742[esp+40]
$LN36@Sort_unche:

; 5268 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

	cmp	edx, ebx
	jge	SHORT $LN40@Sort_unche
	npad	6
$LL41@Sort_unche:
	push	DWORD PTR __Val$1$[esp+40]
	lea	edi, DWORD PTR [ebx-1]
	sar	edi, 1
	push	DWORD PTR [esi+edi*4]
	call	ecx
	mov	edx, DWORD PTR __Hole$1$[esp+48]
	add	esp, 8
	test	al, al
	je	SHORT $LN40@Sort_unche

; 5269 :          _Idx = (_Hole - 1) >> 1) { // shift for codegen
; 5270 :         // move _Hole up to parent
; 5271 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [esi+edi*4]
	mov	ecx, DWORD PTR __Pred$[ebp]
	mov	DWORD PTR [esi+ebx*4], eax

; 5272 :         _Hole             = _Idx;

	mov	ebx, edi
	cmp	edx, edi
	jl	SHORT $LL41@Sort_unche
$LN40@Sort_unche:

; 5273 :     }
; 5274 : 
; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	eax, DWORD PTR __Val$1$[esp+40]

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	mov	ecx, DWORD PTR __Pred$[ebp]

; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	DWORD PTR [esi+ebx*4], eax

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	mov	eax, DWORD PTR __Max_sequence_non_leaf$1$[esp+40]
	test	edx, edx
	jg	$LL28@Sort_unche
	mov	ebx, DWORD PTR __Last$1$[esp+40]
	mov	eax, DWORD PTR __Bottom$1$[esp+40]
$LN29@Sort_unche:

; 5774 :     for (; _Last - _First >= 2; --_Last) {

	cmp	eax, 2
	jl	$LN45@Sort_unche
	npad	1
$LL46@Sort_unche:

; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	eax, DWORD PTR [ebx+esi-4]

; 5410 :     _Pop_heap_hole_by_index(

	xor	edx, edx

; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	DWORD PTR __Val$1[esp+40], eax

; 5408 :     *_Dest      = _STD move(*_First);

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [ebx+esi-4], eax

; 5409 :     using _Diff = _Iter_diff_t<_RanIt>;
; 5410 :     _Pop_heap_hole_by_index(

	lea	eax, DWORD PTR __Val$1[esp+40]
	push	ecx
	push	eax
	lea	eax, DWORD PTR [ebx-4]
	mov	ecx, esi
	sar	eax, 2
	push	eax
	call	??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ; std::_Pop_heap_hole_by_index<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *)>

; 5774 :     for (; _Last - _First >= 2; --_Last) {

	mov	ecx, DWORD PTR __Pred$[ebp]
	sub	ebx, 4
	mov	eax, ebx

; 5410 :     _Pop_heap_hole_by_index(

	add	esp, 12					; 0000000cH

; 5774 :     for (; _Last - _First >= 2; --_Last) {

	and	eax, -4					; fffffffcH
	cmp	eax, 8
	jge	SHORT $LL46@Sort_unche

; 7071 :         }
; 7072 :     }
; 7073 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN18@Sort_unche:

; 6930 :                 for (_BidIt _Prev = _Hole; _DEBUG_LT_PRED(_Pred, _Val, *--_Prev); _Hole = _Prev) {

	push	DWORD PTR [ebx-4]
	mov	eax, DWORD PTR __Pred$[ebp]
	lea	edi, DWORD PTR [ebx-4]
	push	DWORD PTR __Val$1$[esp+44]
	call	eax
	add	esp, 8
	test	al, al
	je	SHORT $LN15@Sort_unche
	mov	esi, DWORD PTR __Val$1$[esp+40]
	mov	ebx, DWORD PTR __Hole$1$[esp+40]
	npad	4
$LL16@Sort_unche:

; 6931 :                     *_Hole = _STD move(*_Prev); // move hole down

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [ebx], eax
	mov	ebx, edi
	push	DWORD PTR [edi-4]
	sub	edi, 4
	push	esi
	call	DWORD PTR __Pred$[ebp]
	add	esp, 8
	test	al, al
	jne	SHORT $LL16@Sort_unche
	mov	esi, DWORD PTR __First$1$[esp+40]
	mov	DWORD PTR __Hole$1$[esp+40], ebx
	mov	ebx, DWORD PTR __Mid$1$[esp+40]
$LN15@Sort_unche:

; 6932 :                 }
; 6933 : 
; 6934 :                 *_Hole = _STD move(_Val); // insert element in hole

	mov	ecx, DWORD PTR __Hole$1$[esp+40]
	mov	eax, DWORD PTR __Val$1$[esp+40]
	mov	DWORD PTR [ecx], eax
$LN19@Sort_unche:

; 6922 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

	mov	ecx, DWORD PTR __Pred$[ebp]
	add	ebx, 4
	mov	DWORD PTR __Mid$1$[esp+40], ebx
	cmp	ebx, DWORD PTR __Last$1$[esp+40]
	jne	$LL11@Sort_unche
$LN45@Sort_unche:

; 7071 :         }
; 7072 :     }
; 7073 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z ENDP ; std::_Sort_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0@Z
_TEXT	SEGMENT
??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0@Z PROC ; std::_Adl_verify_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> > > >, COMDAT
; __First$dead$ = ecx
; __Last$dead$ = edx

; 1259 :     // check that [_First, _Last) forms an iterator range
; 1260 :     if constexpr (_Range_verifiable_v<_Iter, _Sentinel>) {
; 1261 :         _Verify_range(_First, _Last);
; 1262 :     }
; 1263 : }

	ret	0
??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0@Z ENDP ; std::_Adl_verify_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Pass_fn@P6A_NPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@0@Z$0A@@std@@YAP6A_NPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@0@ZP6A_N00@Z@Z
_TEXT	SEGMENT
??$_Pass_fn@P6A_NPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@0@Z$0A@@std@@YAP6A_NPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@0@ZP6A_N00@Z@Z PROC ; std::_Pass_fn<bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *),0>, COMDAT
; __Val$dead$ = ecx

; 253  :     return _Val;

	mov	eax, OFFSET ?cmp_cs_mat@@YA_NPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; cmp_cs_mat

; 254  : }

	ret	0
??$_Pass_fn@P6A_NPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@0@Z$0A@@std@@YAP6A_NPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@0@ZP6A_N00@Z@Z ENDP ; std::_Pass_fn<bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *),0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z
_TEXT	SEGMENT
__Last$1$ = -28						; size = 4
__Hole$1$ = -24						; size = 4
__Val$1$ = -24						; size = 4
__Hole$1$ = -20						; size = 4
__Val$1$ = -20						; size = 4
__Mid$1$ = -16						; size = 4
__Max_sequence_non_leaf$1$ = -16			; size = 4
__First$1$ = -12					; size = 4
__Bottom$1$ = -12					; size = 4
tv742 = -8						; size = 4
__Val$1 = -8						; size = 4
__Mid$2 = -8						; size = 8
__Ideal$ = 8						; size = 4
__Pred$ = 12						; size = 4
??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z PROC ; std::_Sort_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 7046 : _CONSTEXPR20 void _Sort_unchecked(_RanIt _First, _RanIt _Last, _Iter_diff_t<_RanIt> _Ideal, _Pr _Pred) {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 28					; 0000001cH
	push	ebx
	mov	ebx, edx
	push	esi
	mov	esi, ecx
	mov	DWORD PTR __Last$1$[esp+36], ebx

; 7047 :     // order [_First, _Last)
; 7048 :     for (;;) {
; 7049 :         if (_Last - _First <= _ISORT_MAX) { // small

	mov	ecx, DWORD PTR __Pred$[ebp]
	mov	eax, ebx
	sub	eax, esi
	mov	DWORD PTR __First$1$[esp+36], esi
	and	eax, -4					; fffffffcH
	push	edi
	cmp	eax, 128				; 00000080H
	jle	SHORT $LN165@Sort_unche
	mov	edi, DWORD PTR __Ideal$[ebp]
	npad	4
$LL2@Sort_unche:

; 7050 :             _Insertion_sort_unchecked(_First, _Last, _Pred);
; 7051 :             return;
; 7052 :         }
; 7053 : 
; 7054 :         if (_Ideal <= 0) { // heap sort if too many divisions

	test	edi, edi
	jle	$LN166@Sort_unche

; 7055 :             _Make_heap_unchecked(_First, _Last, _Pred);
; 7056 :             _Sort_heap_unchecked(_First, _Last, _Pred);
; 7057 :             return;
; 7058 :         }
; 7059 : 
; 7060 :         // divide and conquer by quicksort
; 7061 :         auto _Mid = _Partition_by_median_guess_unchecked(_First, _Last, _Pred);

	push	ecx
	push	ebx
	mov	edx, esi
	lea	ecx, DWORD PTR __Mid$2[esp+48]
	call	??$_Partition_by_median_guess_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YA?AU?$pair@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@0@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU23@1@Z@Z ; std::_Partition_by_median_guess_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *)>

; 7062 : 
; 7063 :         _Ideal = (_Ideal >> 1) + (_Ideal >> 2); // allow 1.5 log2(N) divisions
; 7064 : 
; 7065 :         if (_Mid.first - _First < _Last - _Mid.second) { // loop on second half

	mov	edx, DWORD PTR __Mid$2[esp+48]
	mov	eax, edi
	sar	eax, 2
	mov	ecx, ebx
	sub	ecx, DWORD PTR __Mid$2[esp+52]
	add	esp, 8
	sar	edi, 1
	and	ecx, -4					; fffffffcH
	add	edi, eax
	mov	eax, edx
	sub	eax, esi
	and	eax, -4					; fffffffcH
	cmp	eax, ecx
	mov	eax, DWORD PTR __Pred$[ebp]
	push	eax
	push	edi
	jge	SHORT $LN7@Sort_unche

; 7066 :             _Sort_unchecked(_First, _Mid.first, _Ideal, _Pred);

	mov	ecx, esi
	call	??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z ; std::_Sort_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *)>

; 7067 :             _First = _Mid.second;

	mov	esi, DWORD PTR __Mid$2[esp+52]
	mov	DWORD PTR __First$1$[esp+48], esi

; 7068 :         } else { // loop on first half

	jmp	SHORT $LN190@Sort_unche
$LN7@Sort_unche:

; 7069 :             _Sort_unchecked(_Mid.second, _Last, _Ideal, _Pred);

	mov	ecx, DWORD PTR __Mid$2[esp+52]
	mov	edx, ebx
	call	??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z ; std::_Sort_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *)>

; 7070 :             _Last = _Mid.first;

	mov	ebx, DWORD PTR __Mid$2[esp+48]
	mov	DWORD PTR __Last$1$[esp+48], ebx
$LN190@Sort_unche:

; 7047 :     // order [_First, _Last)
; 7048 :     for (;;) {
; 7049 :         if (_Last - _First <= _ISORT_MAX) { // small

	mov	ecx, DWORD PTR __Pred$[ebp]
	mov	eax, ebx
	sub	eax, esi
	add	esp, 8
	and	eax, -4					; fffffffcH
	cmp	eax, 128				; 00000080H
	jg	SHORT $LL2@Sort_unche
$LN165@Sort_unche:

; 6921 :     if (_First != _Last) {

	cmp	esi, ebx
	je	$LN45@Sort_unche

; 6922 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

	lea	ebx, DWORD PTR [esi+4]
	mov	DWORD PTR __Mid$1$[esp+40], ebx
	cmp	ebx, DWORD PTR __Last$1$[esp+40]
	je	$LN45@Sort_unche
	npad	1
$LL11@Sort_unche:

; 6923 :             _BidIt _Hole               = _Mid;
; 6924 :             _Iter_value_t<_BidIt> _Val = _STD move(*_Mid);
; 6925 : 
; 6926 :             if (_DEBUG_LT_PRED(_Pred, _Val, *_First)) { // found new earliest element, move to front

	push	DWORD PTR [esi]
	mov	edi, DWORD PTR [ebx]
	push	edi
	mov	DWORD PTR __Hole$1$[esp+48], ebx
	mov	DWORD PTR __Val$1$[esp+48], edi
	call	ecx
	add	esp, 8
	test	al, al
	je	$LN18@Sort_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4254 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	mov	ecx, ebx

; 4255 :     auto _Result                = _CSTD memmove(_Dest_ch - _Count, _First_ch, _Count);

	mov	eax, ebx
	sub	ecx, esi
	push	ecx
	sub	eax, ecx
	add	eax, 4
	push	esi
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6928 :                 *_First = _STD move(_Val);

	mov	DWORD PTR [esi], edi

; 6929 :             } else { // look for insertion point after first

	jmp	$LN19@Sort_unche
$LN166@Sort_unche:

; 5547 :     _Diff _Bottom = _Last - _First;

	sub	ebx, esi
	mov	eax, ebx
	mov	DWORD PTR __Last$1$[esp+40], ebx
	sar	eax, 2

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	mov	edx, eax
	mov	DWORD PTR __Bottom$1$[esp+40], eax
	sar	edx, 1
	test	edx, edx
	jle	$LN29@Sort_unche
	dec	eax
	mov	DWORD PTR tv742[esp+40], eax
	sar	eax, 1
	mov	DWORD PTR __Max_sequence_non_leaf$1$[esp+40], eax
	npad	3
$LL28@Sort_unche:

; 5549 :         // reheap top half, bottom to top
; 5550 :         --_Hole;
; 5551 :         _Iter_value_t<_RanIt> _Val = _STD move(*(_First + _Hole));

	mov	ebx, DWORD PTR [esi+edx*4-4]
	dec	edx
	mov	DWORD PTR __Val$1$[esp+40], ebx

; 5552 :         _Pop_heap_hole_by_index(_First, _Hole, _Bottom, _STD move(_Val), _Pred);

	mov	ebx, edx
	mov	DWORD PTR __Hole$1$[esp+40], edx

; 5381 :     _Diff _Idx       = _Hole;

	mov	edi, edx

; 5382 : 
; 5383 :     // Check whether _Idx can have a child before calculating that child's index, since
; 5384 :     // calculating the child's index can trigger integer overflows
; 5385 :     const _Diff _Max_sequence_non_leaf = (_Bottom - 1) >> 1; // shift for codegen
; 5386 :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

	cmp	edx, eax
	jge	SHORT $LN34@Sort_unche
	npad	11
$LL33@Sort_unche:

; 5387 :         _Idx = 2 * _Idx + 2;
; 5388 :         if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1)))) {

	push	DWORD PTR [esi+edi*8+4]
	lea	edi, DWORD PTR [edi*2+2]
	push	DWORD PTR [esi+edi*4]
	call	ecx
	add	esp, 8
	test	al, al
	je	SHORT $LN35@Sort_unche

; 5389 :             --_Idx;

	dec	edi
$LN35@Sort_unche:

; 5390 :         }
; 5391 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [esi+edi*4]
	mov	ecx, DWORD PTR __Pred$[ebp]
	mov	DWORD PTR [esi+ebx*4], eax

; 5392 :         _Hole             = _Idx;

	mov	ebx, edi
	mov	eax, DWORD PTR __Max_sequence_non_leaf$1$[esp+40]
	cmp	edi, eax
	jl	SHORT $LL33@Sort_unche
	mov	edx, DWORD PTR __Hole$1$[esp+40]
$LN34@Sort_unche:

; 5393 :     }
; 5394 : 
; 5395 :     if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it

	cmp	edi, eax
	jne	SHORT $LN36@Sort_unche
	mov	eax, DWORD PTR __Bottom$1$[esp+40]
	test	al, 1
	jne	SHORT $LN36@Sort_unche

; 5396 :         *(_First + _Hole) = _STD move(*(_First + (_Bottom - 1)));

	mov	eax, DWORD PTR [esi+eax*4-4]
	mov	DWORD PTR [esi+ebx*4], eax

; 5397 :         _Hole             = _Bottom - 1;

	mov	ebx, DWORD PTR tv742[esp+40]
$LN36@Sort_unche:

; 5268 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

	cmp	edx, ebx
	jge	SHORT $LN40@Sort_unche
	npad	6
$LL41@Sort_unche:
	push	DWORD PTR __Val$1$[esp+40]
	lea	edi, DWORD PTR [ebx-1]
	sar	edi, 1
	push	DWORD PTR [esi+edi*4]
	call	ecx
	mov	edx, DWORD PTR __Hole$1$[esp+48]
	add	esp, 8
	test	al, al
	je	SHORT $LN40@Sort_unche

; 5269 :          _Idx = (_Hole - 1) >> 1) { // shift for codegen
; 5270 :         // move _Hole up to parent
; 5271 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [esi+edi*4]
	mov	ecx, DWORD PTR __Pred$[ebp]
	mov	DWORD PTR [esi+ebx*4], eax

; 5272 :         _Hole             = _Idx;

	mov	ebx, edi
	cmp	edx, edi
	jl	SHORT $LL41@Sort_unche
$LN40@Sort_unche:

; 5273 :     }
; 5274 : 
; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	eax, DWORD PTR __Val$1$[esp+40]

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	mov	ecx, DWORD PTR __Pred$[ebp]

; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	DWORD PTR [esi+ebx*4], eax

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	mov	eax, DWORD PTR __Max_sequence_non_leaf$1$[esp+40]
	test	edx, edx
	jg	$LL28@Sort_unche
	mov	ebx, DWORD PTR __Last$1$[esp+40]
	mov	eax, DWORD PTR __Bottom$1$[esp+40]
$LN29@Sort_unche:

; 5774 :     for (; _Last - _First >= 2; --_Last) {

	cmp	eax, 2
	jl	$LN45@Sort_unche
	npad	1
$LL46@Sort_unche:

; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	eax, DWORD PTR [ebx+esi-4]

; 5410 :     _Pop_heap_hole_by_index(

	xor	edx, edx

; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	DWORD PTR __Val$1[esp+40], eax

; 5408 :     *_Dest      = _STD move(*_First);

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [ebx+esi-4], eax

; 5409 :     using _Diff = _Iter_diff_t<_RanIt>;
; 5410 :     _Pop_heap_hole_by_index(

	lea	eax, DWORD PTR __Val$1[esp+40]
	push	ecx
	push	eax
	lea	eax, DWORD PTR [ebx-4]
	mov	ecx, esi
	sar	eax, 2
	push	eax
	call	??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ; std::_Pop_heap_hole_by_index<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *)>

; 5774 :     for (; _Last - _First >= 2; --_Last) {

	mov	ecx, DWORD PTR __Pred$[ebp]
	sub	ebx, 4
	mov	eax, ebx

; 5410 :     _Pop_heap_hole_by_index(

	add	esp, 12					; 0000000cH

; 5774 :     for (; _Last - _First >= 2; --_Last) {

	and	eax, -4					; fffffffcH
	cmp	eax, 8
	jge	SHORT $LL46@Sort_unche

; 7071 :         }
; 7072 :     }
; 7073 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN18@Sort_unche:

; 6930 :                 for (_BidIt _Prev = _Hole; _DEBUG_LT_PRED(_Pred, _Val, *--_Prev); _Hole = _Prev) {

	push	DWORD PTR [ebx-4]
	mov	eax, DWORD PTR __Pred$[ebp]
	lea	edi, DWORD PTR [ebx-4]
	push	DWORD PTR __Val$1$[esp+44]
	call	eax
	add	esp, 8
	test	al, al
	je	SHORT $LN15@Sort_unche
	mov	esi, DWORD PTR __Val$1$[esp+40]
	mov	ebx, DWORD PTR __Hole$1$[esp+40]
	npad	4
$LL16@Sort_unche:

; 6931 :                     *_Hole = _STD move(*_Prev); // move hole down

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [ebx], eax
	mov	ebx, edi
	push	DWORD PTR [edi-4]
	sub	edi, 4
	push	esi
	call	DWORD PTR __Pred$[ebp]
	add	esp, 8
	test	al, al
	jne	SHORT $LL16@Sort_unche
	mov	esi, DWORD PTR __First$1$[esp+40]
	mov	DWORD PTR __Hole$1$[esp+40], ebx
	mov	ebx, DWORD PTR __Mid$1$[esp+40]
$LN15@Sort_unche:

; 6932 :                 }
; 6933 : 
; 6934 :                 *_Hole = _STD move(_Val); // insert element in hole

	mov	ecx, DWORD PTR __Hole$1$[esp+40]
	mov	eax, DWORD PTR __Val$1$[esp+40]
	mov	DWORD PTR [ecx], eax
$LN19@Sort_unche:

; 6922 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

	mov	ecx, DWORD PTR __Pred$[ebp]
	add	ebx, 4
	mov	DWORD PTR __Mid$1$[esp+40], ebx
	cmp	ebx, DWORD PTR __Last$1$[esp+40]
	jne	$LL11@Sort_unche
$LN45@Sort_unche:

; 7071 :         }
; 7072 :     }
; 7073 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z ENDP ; std::_Sort_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0@Z
_TEXT	SEGMENT
??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0@Z PROC ; std::_Adl_verify_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> > > >, COMDAT
; __First$dead$ = ecx
; __Last$dead$ = edx

; 1259 :     // check that [_First, _Last) forms an iterator range
; 1260 :     if constexpr (_Range_verifiable_v<_Iter, _Sentinel>) {
; 1261 :         _Verify_range(_First, _Last);
; 1262 :     }
; 1263 : }

	ret	0
??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@@0@0@Z ENDP ; std::_Adl_verify_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Pass_fn@P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@Z$0A@@std@@YAP6A_NPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@ZP6A_N00@Z@Z
_TEXT	SEGMENT
??$_Pass_fn@P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@Z$0A@@std@@YAP6A_NPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@ZP6A_N00@Z@Z PROC ; std::_Pass_fn<bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *),0>, COMDAT
; __Val$dead$ = ecx

; 253  :     return _Val;

	mov	eax, OFFSET ?cmp_states_mat@@YA_NPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ; cmp_states_mat

; 254  : }

	ret	0
??$_Pass_fn@P6A_NPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@Z$0A@@std@@YAP6A_NPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@ZP6A_N00@Z@Z ENDP ; std::_Pass_fn<bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *),0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z
_TEXT	SEGMENT
__Last$1$ = -28						; size = 4
__Hole$1$ = -24						; size = 4
__Val$1$ = -24						; size = 4
__Hole$1$ = -20						; size = 4
__Val$1$ = -20						; size = 4
__Mid$1$ = -16						; size = 4
__Max_sequence_non_leaf$1$ = -16			; size = 4
__First$1$ = -12					; size = 4
__Bottom$1$ = -12					; size = 4
tv742 = -8						; size = 4
__Val$1 = -8						; size = 4
__Mid$2 = -8						; size = 8
__Ideal$ = 8						; size = 4
__Pred$ = 12						; size = 4
??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z PROC ; std::_Sort_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 7046 : _CONSTEXPR20 void _Sort_unchecked(_RanIt _First, _RanIt _Last, _Iter_diff_t<_RanIt> _Ideal, _Pr _Pred) {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 28					; 0000001cH
	push	ebx
	mov	ebx, edx
	push	esi
	mov	esi, ecx
	mov	DWORD PTR __Last$1$[esp+36], ebx

; 7047 :     // order [_First, _Last)
; 7048 :     for (;;) {
; 7049 :         if (_Last - _First <= _ISORT_MAX) { // small

	mov	ecx, DWORD PTR __Pred$[ebp]
	mov	eax, ebx
	sub	eax, esi
	mov	DWORD PTR __First$1$[esp+36], esi
	and	eax, -4					; fffffffcH
	push	edi
	cmp	eax, 128				; 00000080H
	jle	SHORT $LN165@Sort_unche
	mov	edi, DWORD PTR __Ideal$[ebp]
	npad	4
$LL2@Sort_unche:

; 7050 :             _Insertion_sort_unchecked(_First, _Last, _Pred);
; 7051 :             return;
; 7052 :         }
; 7053 : 
; 7054 :         if (_Ideal <= 0) { // heap sort if too many divisions

	test	edi, edi
	jle	$LN166@Sort_unche

; 7055 :             _Make_heap_unchecked(_First, _Last, _Pred);
; 7056 :             _Sort_heap_unchecked(_First, _Last, _Pred);
; 7057 :             return;
; 7058 :         }
; 7059 : 
; 7060 :         // divide and conquer by quicksort
; 7061 :         auto _Mid = _Partition_by_median_guess_unchecked(_First, _Last, _Pred);

	push	ecx
	push	ebx
	mov	edx, esi
	lea	ecx, DWORD PTR __Mid$2[esp+48]
	call	??$_Partition_by_median_guess_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YA?AU?$pair@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@0@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU23@1@Z@Z ; std::_Partition_by_median_guess_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *)>

; 7062 : 
; 7063 :         _Ideal = (_Ideal >> 1) + (_Ideal >> 2); // allow 1.5 log2(N) divisions
; 7064 : 
; 7065 :         if (_Mid.first - _First < _Last - _Mid.second) { // loop on second half

	mov	edx, DWORD PTR __Mid$2[esp+48]
	mov	eax, edi
	sar	eax, 2
	mov	ecx, ebx
	sub	ecx, DWORD PTR __Mid$2[esp+52]
	add	esp, 8
	sar	edi, 1
	and	ecx, -4					; fffffffcH
	add	edi, eax
	mov	eax, edx
	sub	eax, esi
	and	eax, -4					; fffffffcH
	cmp	eax, ecx
	mov	eax, DWORD PTR __Pred$[ebp]
	push	eax
	push	edi
	jge	SHORT $LN7@Sort_unche

; 7066 :             _Sort_unchecked(_First, _Mid.first, _Ideal, _Pred);

	mov	ecx, esi
	call	??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z ; std::_Sort_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *)>

; 7067 :             _First = _Mid.second;

	mov	esi, DWORD PTR __Mid$2[esp+52]
	mov	DWORD PTR __First$1$[esp+48], esi

; 7068 :         } else { // loop on first half

	jmp	SHORT $LN190@Sort_unche
$LN7@Sort_unche:

; 7069 :             _Sort_unchecked(_Mid.second, _Last, _Ideal, _Pred);

	mov	ecx, DWORD PTR __Mid$2[esp+52]
	mov	edx, ebx
	call	??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z ; std::_Sort_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *)>

; 7070 :             _Last = _Mid.first;

	mov	ebx, DWORD PTR __Mid$2[esp+48]
	mov	DWORD PTR __Last$1$[esp+48], ebx
$LN190@Sort_unche:

; 7047 :     // order [_First, _Last)
; 7048 :     for (;;) {
; 7049 :         if (_Last - _First <= _ISORT_MAX) { // small

	mov	ecx, DWORD PTR __Pred$[ebp]
	mov	eax, ebx
	sub	eax, esi
	add	esp, 8
	and	eax, -4					; fffffffcH
	cmp	eax, 128				; 00000080H
	jg	SHORT $LL2@Sort_unche
$LN165@Sort_unche:

; 6921 :     if (_First != _Last) {

	cmp	esi, ebx
	je	$LN45@Sort_unche

; 6922 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

	lea	ebx, DWORD PTR [esi+4]
	mov	DWORD PTR __Mid$1$[esp+40], ebx
	cmp	ebx, DWORD PTR __Last$1$[esp+40]
	je	$LN45@Sort_unche
	npad	1
$LL11@Sort_unche:

; 6923 :             _BidIt _Hole               = _Mid;
; 6924 :             _Iter_value_t<_BidIt> _Val = _STD move(*_Mid);
; 6925 : 
; 6926 :             if (_DEBUG_LT_PRED(_Pred, _Val, *_First)) { // found new earliest element, move to front

	push	DWORD PTR [esi]
	mov	edi, DWORD PTR [ebx]
	push	edi
	mov	DWORD PTR __Hole$1$[esp+48], ebx
	mov	DWORD PTR __Val$1$[esp+48], edi
	call	ecx
	add	esp, 8
	test	al, al
	je	$LN18@Sort_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4254 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	mov	ecx, ebx

; 4255 :     auto _Result                = _CSTD memmove(_Dest_ch - _Count, _First_ch, _Count);

	mov	eax, ebx
	sub	ecx, esi
	push	ecx
	sub	eax, ecx
	add	eax, 4
	push	esi
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6928 :                 *_First = _STD move(_Val);

	mov	DWORD PTR [esi], edi

; 6929 :             } else { // look for insertion point after first

	jmp	$LN19@Sort_unche
$LN166@Sort_unche:

; 5547 :     _Diff _Bottom = _Last - _First;

	sub	ebx, esi
	mov	eax, ebx
	mov	DWORD PTR __Last$1$[esp+40], ebx
	sar	eax, 2

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	mov	edx, eax
	mov	DWORD PTR __Bottom$1$[esp+40], eax
	sar	edx, 1
	test	edx, edx
	jle	$LN29@Sort_unche
	dec	eax
	mov	DWORD PTR tv742[esp+40], eax
	sar	eax, 1
	mov	DWORD PTR __Max_sequence_non_leaf$1$[esp+40], eax
	npad	3
$LL28@Sort_unche:

; 5549 :         // reheap top half, bottom to top
; 5550 :         --_Hole;
; 5551 :         _Iter_value_t<_RanIt> _Val = _STD move(*(_First + _Hole));

	mov	ebx, DWORD PTR [esi+edx*4-4]
	dec	edx
	mov	DWORD PTR __Val$1$[esp+40], ebx

; 5552 :         _Pop_heap_hole_by_index(_First, _Hole, _Bottom, _STD move(_Val), _Pred);

	mov	ebx, edx
	mov	DWORD PTR __Hole$1$[esp+40], edx

; 5381 :     _Diff _Idx       = _Hole;

	mov	edi, edx

; 5382 : 
; 5383 :     // Check whether _Idx can have a child before calculating that child's index, since
; 5384 :     // calculating the child's index can trigger integer overflows
; 5385 :     const _Diff _Max_sequence_non_leaf = (_Bottom - 1) >> 1; // shift for codegen
; 5386 :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

	cmp	edx, eax
	jge	SHORT $LN34@Sort_unche
	npad	11
$LL33@Sort_unche:

; 5387 :         _Idx = 2 * _Idx + 2;
; 5388 :         if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1)))) {

	push	DWORD PTR [esi+edi*8+4]
	lea	edi, DWORD PTR [edi*2+2]
	push	DWORD PTR [esi+edi*4]
	call	ecx
	add	esp, 8
	test	al, al
	je	SHORT $LN35@Sort_unche

; 5389 :             --_Idx;

	dec	edi
$LN35@Sort_unche:

; 5390 :         }
; 5391 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [esi+edi*4]
	mov	ecx, DWORD PTR __Pred$[ebp]
	mov	DWORD PTR [esi+ebx*4], eax

; 5392 :         _Hole             = _Idx;

	mov	ebx, edi
	mov	eax, DWORD PTR __Max_sequence_non_leaf$1$[esp+40]
	cmp	edi, eax
	jl	SHORT $LL33@Sort_unche
	mov	edx, DWORD PTR __Hole$1$[esp+40]
$LN34@Sort_unche:

; 5393 :     }
; 5394 : 
; 5395 :     if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it

	cmp	edi, eax
	jne	SHORT $LN36@Sort_unche
	mov	eax, DWORD PTR __Bottom$1$[esp+40]
	test	al, 1
	jne	SHORT $LN36@Sort_unche

; 5396 :         *(_First + _Hole) = _STD move(*(_First + (_Bottom - 1)));

	mov	eax, DWORD PTR [esi+eax*4-4]
	mov	DWORD PTR [esi+ebx*4], eax

; 5397 :         _Hole             = _Bottom - 1;

	mov	ebx, DWORD PTR tv742[esp+40]
$LN36@Sort_unche:

; 5268 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

	cmp	edx, ebx
	jge	SHORT $LN40@Sort_unche
	npad	6
$LL41@Sort_unche:
	push	DWORD PTR __Val$1$[esp+40]
	lea	edi, DWORD PTR [ebx-1]
	sar	edi, 1
	push	DWORD PTR [esi+edi*4]
	call	ecx
	mov	edx, DWORD PTR __Hole$1$[esp+48]
	add	esp, 8
	test	al, al
	je	SHORT $LN40@Sort_unche

; 5269 :          _Idx = (_Hole - 1) >> 1) { // shift for codegen
; 5270 :         // move _Hole up to parent
; 5271 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [esi+edi*4]
	mov	ecx, DWORD PTR __Pred$[ebp]
	mov	DWORD PTR [esi+ebx*4], eax

; 5272 :         _Hole             = _Idx;

	mov	ebx, edi
	cmp	edx, edi
	jl	SHORT $LL41@Sort_unche
$LN40@Sort_unche:

; 5273 :     }
; 5274 : 
; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	eax, DWORD PTR __Val$1$[esp+40]

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	mov	ecx, DWORD PTR __Pred$[ebp]

; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	DWORD PTR [esi+ebx*4], eax

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	mov	eax, DWORD PTR __Max_sequence_non_leaf$1$[esp+40]
	test	edx, edx
	jg	$LL28@Sort_unche
	mov	ebx, DWORD PTR __Last$1$[esp+40]
	mov	eax, DWORD PTR __Bottom$1$[esp+40]
$LN29@Sort_unche:

; 5774 :     for (; _Last - _First >= 2; --_Last) {

	cmp	eax, 2
	jl	$LN45@Sort_unche
	npad	1
$LL46@Sort_unche:

; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	eax, DWORD PTR [ebx+esi-4]

; 5410 :     _Pop_heap_hole_by_index(

	xor	edx, edx

; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	DWORD PTR __Val$1[esp+40], eax

; 5408 :     *_Dest      = _STD move(*_First);

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [ebx+esi-4], eax

; 5409 :     using _Diff = _Iter_diff_t<_RanIt>;
; 5410 :     _Pop_heap_hole_by_index(

	lea	eax, DWORD PTR __Val$1[esp+40]
	push	ecx
	push	eax
	lea	eax, DWORD PTR [ebx-4]
	mov	ecx, esi
	sar	eax, 2
	push	eax
	call	??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ; std::_Pop_heap_hole_by_index<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *)>

; 5774 :     for (; _Last - _First >= 2; --_Last) {

	mov	ecx, DWORD PTR __Pred$[ebp]
	sub	ebx, 4
	mov	eax, ebx

; 5410 :     _Pop_heap_hole_by_index(

	add	esp, 12					; 0000000cH

; 5774 :     for (; _Last - _First >= 2; --_Last) {

	and	eax, -4					; fffffffcH
	cmp	eax, 8
	jge	SHORT $LL46@Sort_unche

; 7071 :         }
; 7072 :     }
; 7073 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN18@Sort_unche:

; 6930 :                 for (_BidIt _Prev = _Hole; _DEBUG_LT_PRED(_Pred, _Val, *--_Prev); _Hole = _Prev) {

	push	DWORD PTR [ebx-4]
	mov	eax, DWORD PTR __Pred$[ebp]
	lea	edi, DWORD PTR [ebx-4]
	push	DWORD PTR __Val$1$[esp+44]
	call	eax
	add	esp, 8
	test	al, al
	je	SHORT $LN15@Sort_unche
	mov	esi, DWORD PTR __Val$1$[esp+40]
	mov	ebx, DWORD PTR __Hole$1$[esp+40]
	npad	4
$LL16@Sort_unche:

; 6931 :                     *_Hole = _STD move(*_Prev); // move hole down

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [ebx], eax
	mov	ebx, edi
	push	DWORD PTR [edi-4]
	sub	edi, 4
	push	esi
	call	DWORD PTR __Pred$[ebp]
	add	esp, 8
	test	al, al
	jne	SHORT $LL16@Sort_unche
	mov	esi, DWORD PTR __First$1$[esp+40]
	mov	DWORD PTR __Hole$1$[esp+40], ebx
	mov	ebx, DWORD PTR __Mid$1$[esp+40]
$LN15@Sort_unche:

; 6932 :                 }
; 6933 : 
; 6934 :                 *_Hole = _STD move(_Val); // insert element in hole

	mov	ecx, DWORD PTR __Hole$1$[esp+40]
	mov	eax, DWORD PTR __Val$1$[esp+40]
	mov	DWORD PTR [ecx], eax
$LN19@Sort_unche:

; 6922 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

	mov	ecx, DWORD PTR __Pred$[ebp]
	add	ebx, 4
	mov	DWORD PTR __Mid$1$[esp+40], ebx
	cmp	ebx, DWORD PTR __Last$1$[esp+40]
	jne	$LL11@Sort_unche
$LN45@Sort_unche:

; 7071 :         }
; 7072 :     }
; 7073 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@0HP6A_NPAU12@1@Z@Z ENDP ; std::_Sort_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
__Newvec$ = -24						; size = 4
tv370 = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Oldsize$1$ = 8					; size = 4
__Newsize$ = 8						; size = 4
__Val$dead$ = 12					; size = 4
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Resize_reallocate<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 1216 :     _CONSTEXPR20_CONTAINER void _Resize_reallocate(const size_type _Newsize, const _Ty2& _Val) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	esi, ecx

; 1217 :         if (_Newsize > max_size()) {

	mov	edi, DWORD PTR __Newsize$[ebp]
	cmp	edi, 1073741823				; 3fffffffH
	ja	$LN42@Resize_rea

; 1219 :         }
; 1220 : 
; 1221 :         auto& _My_data    = _Mypair._Myval2;
; 1222 :         pointer& _Myfirst = _My_data._Myfirst;
; 1223 :         pointer& _Mylast  = _My_data._Mylast;
; 1224 : 
; 1225 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);

	mov	ecx, DWORD PTR [esi+4]
	sub	ecx, DWORD PTR [esi]
	sar	ecx, 2
	mov	DWORD PTR __Oldsize$1$[ebp], ecx

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	ecx, DWORD PTR [esi+8]
	sub	ecx, DWORD PTR [esi]
	sar	ecx, 2

; 1675 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	mov	edx, ecx
	shr	edx, 1
	mov	eax, 1073741823				; 3fffffffH
	sub	eax, edx
	cmp	ecx, eax
	jbe	SHORT $LN10@Resize_rea

; 1676 :             return _Max; // geometric growth would overflow

	mov	eax, 1073741823				; 3fffffffH
	jmp	SHORT $LN11@Resize_rea
$LN10@Resize_rea:

; 1677 :         }
; 1678 : 
; 1679 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	lea	eax, DWORD PTR [edx+ecx]

; 1680 : 
; 1681 :         if (_Geometric < _Newsize) {

	cmp	eax, edi
	cmovb	eax, edi
$LN11@Resize_rea:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h

; 33   : 								pointer					allocate		(size_type n, const void* p=0) const	{	return (T*)dlmalloc(sizeof(T)*(u32)n);	}

	shl	eax, 2
	mov	DWORD PTR tv370[ebp], eax
	mov	ecx, eax
	call	_dlmalloc
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1228 :         const pointer _Newvec         = _Getal().allocate(_Newcapacity);

	mov	ebx, eax
	mov	DWORD PTR __Newvec$[ebp], ebx

; 1229 :         const pointer _Appended_first = _Newvec + _Oldsize;

	mov	ecx, DWORD PTR __Oldsize$1$[ebp]
	lea	edx, DWORD PTR [ebx+ecx*4]

; 1230 :         pointer _Appended_last        = _Appended_first;
; 1231 : 
; 1232 :         _TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1233 :         _Appended_last = _Ufill(_Appended_first, _Newsize - _Oldsize, _Val);

	mov	eax, edi
	sub	eax, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	shl	eax, 2

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	push	eax
	push	0
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1234 :         _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);

	push	ebx
	push	DWORD PTR [esi+4]
	push	DWORD PTR [esi]
	call	?_Umove_if_noexcept@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@00@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Umove_if_noexcept
	mov	DWORD PTR __$EHRec$[ebp+12], -1

; 1732 :         if (_Myfirst) { // destroy and deallocate old array

	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN35@Resize_rea
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h

; 35   : 								void					deallocate		(pointer p, size_type n) const			{	dlfree	(p);				}

	call	_dlfree
$LN35@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1737 :         _Myfirst = _Newvec;

	mov	DWORD PTR [esi], ebx

; 1738 :         _Mylast  = _Newvec + _Newsize;

	lea	eax, DWORD PTR [ebx+edi*4]
	mov	DWORD PTR [esi+4], eax

; 1739 :         _Myend   = _Newvec + _Newcapacity;

	mov	eax, DWORD PTR tv370[ebp]
	add	eax, ebx
	mov	DWORD PTR [esi+8], eax

; 1239 :         _CATCH_END
; 1240 : 
; 1241 :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 1242 :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
__catch$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z$0:

; 1235 :         _CATCH_ALL
; 1236 :         _Destroy(_Appended_first, _Appended_last);
; 1237 :         _Getal().deallocate(_Newvec, _Newcapacity);

	push	ecx
	push	DWORD PTR __Newvec$[ebp]
	call	?deallocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@I@Z ; doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *>::deallocate

; 1238 :         _RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8
$LN42@Resize_rea:

; 1218 :             _Xlength();

	call	?_Xlength@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@CAXXZ ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Xlength
$LN40@Resize_rea:
	int	3
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z:
	npad	1
	npad	1
	mov	eax, OFFSET __ehfuncinfo$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Resize_reallocate<std::_Value_init_tag>
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
__Backout$2 = -44					; size = 12
__Newvec$ = -32						; size = 4
__UFirst$3 = -28					; size = 4
__Oldsize$1$ = -24					; size = 4
__Newcapacity$1$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Val$dead$ = 12					; size = 4
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::_Resize_reallocate<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 1216 :     _CONSTEXPR20_CONTAINER void _Resize_reallocate(const size_type _Newsize, const _Ty2& _Val) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	esi, ecx

; 1217 :         if (_Newsize > max_size()) {

	mov	edi, DWORD PTR __Newsize$[ebp]
	cmp	edi, 1073741823				; 3fffffffH
	ja	$LN61@Resize_rea

; 1219 :         }
; 1220 : 
; 1221 :         auto& _My_data    = _Mypair._Myval2;
; 1222 :         pointer& _Myfirst = _My_data._Myfirst;
; 1223 :         pointer& _Mylast  = _My_data._Mylast;
; 1224 : 
; 1225 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);

	mov	ecx, DWORD PTR [esi+4]
	sub	ecx, DWORD PTR [esi]
	sar	ecx, 2
	mov	DWORD PTR __Oldsize$1$[ebp], ecx

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	ecx, DWORD PTR [esi+8]
	sub	ecx, DWORD PTR [esi]
	sar	ecx, 2

; 1675 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	mov	edx, ecx
	shr	edx, 1
	mov	eax, 1073741823				; 3fffffffH
	sub	eax, edx
	cmp	ecx, eax
	jbe	SHORT $LN10@Resize_rea

; 1676 :             return _Max; // geometric growth would overflow

	mov	eax, 1073741823				; 3fffffffH
	jmp	SHORT $LN59@Resize_rea
$LN10@Resize_rea:

; 1677 :         }
; 1678 : 
; 1679 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	lea	eax, DWORD PTR [edx+ecx]

; 1680 : 
; 1681 :         if (_Geometric < _Newsize) {

	cmp	eax, edi
	cmovb	eax, edi
$LN59@Resize_rea:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h

; 33   : 								pointer					allocate		(size_type n, const void* p=0) const	{	return (T*)dlmalloc(sizeof(T)*(u32)n);	}

	mov	DWORD PTR __Newcapacity$1$[ebp], eax
	lea	ecx, DWORD PTR [eax*4]
	call	_dlmalloc
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1228 :         const pointer _Newvec         = _Getal().allocate(_Newcapacity);

	mov	ebx, eax
	mov	DWORD PTR __Newvec$[ebp], ebx

; 1229 :         const pointer _Appended_first = _Newvec + _Oldsize;

	mov	ecx, DWORD PTR __Oldsize$1$[ebp]
	lea	edx, DWORD PTR [ebx+ecx*4]

; 1230 :         pointer _Appended_last        = _Appended_first;
; 1231 : 
; 1232 :         _TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1233 :         _Appended_last = _Ufill(_Appended_first, _Newsize - _Oldsize, _Val);

	mov	eax, edi
	sub	eax, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	shl	eax, 2

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	push	eax
	push	0
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1234 :         _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);

	mov	edi, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1703 :     auto _UFirst      = _Get_unwrapped(_First);

	mov	DWORD PTR __UFirst$3[ebp], ecx

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	DWORD PTR __Backout$2[ebp], ebx
	mov	edx, ebx
	mov	DWORD PTR __Backout$2[ebp+4], edx
	mov	DWORD PTR __Backout$2[ebp+8], esi
	npad	6
$LL41@Resize_rea:

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	cmp	ecx, edi
	je	SHORT $LN40@Resize_rea

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax

; 1621 :         ++_Last;

	add	edx, 4
	mov	DWORD PTR __Backout$2[ebp+4], edx

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	add	ecx, 4
	mov	DWORD PTR __UFirst$3[ebp], ecx
	jmp	SHORT $LL41@Resize_rea
$LN40@Resize_rea:

; 1625 :         _First = _Last;

	mov	DWORD PTR __Backout$2[ebp], edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
	mov	DWORD PTR __$EHRec$[ebp+12], -1

; 1732 :         if (_Myfirst) { // destroy and deallocate old array

	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN50@Resize_rea
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h

; 35   : 								void					deallocate		(pointer p, size_type n) const			{	dlfree	(p);				}

	call	_dlfree
$LN50@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1737 :         _Myfirst = _Newvec;

	mov	DWORD PTR [esi], ebx

; 1738 :         _Mylast  = _Newvec + _Newsize;

	mov	eax, DWORD PTR __Newsize$[ebp]
	lea	eax, DWORD PTR [ebx+eax*4]
	mov	DWORD PTR [esi+4], eax

; 1739 :         _Myend   = _Newvec + _Newcapacity;

	mov	eax, DWORD PTR __Newcapacity$1$[ebp]
	lea	eax, DWORD PTR [ebx+eax*4]
	mov	DWORD PTR [esi+8], eax

; 1239 :         _CATCH_END
; 1240 : 
; 1241 :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 1242 :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
__catch$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z$0:

; 1235 :         _CATCH_ALL
; 1236 :         _Destroy(_Appended_first, _Appended_last);
; 1237 :         _Getal().deallocate(_Newvec, _Newcapacity);

	push	ecx
	push	DWORD PTR __Newvec$[ebp]
	call	?deallocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@I@Z ; doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *>::deallocate

; 1238 :         _RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8
$LN61@Resize_rea:

; 1218 :             _Xlength();

	call	?_Xlength@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@CAXXZ ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::_Xlength
$LN58@Resize_rea:
	int	3
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z:
	npad	1
	npad	1
	mov	eax, OFFSET __ehfuncinfo$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::_Resize_reallocate<std::_Value_init_tag>
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
__Backout$2 = -44					; size = 12
__Newvec$ = -32						; size = 4
__UFirst$3 = -28					; size = 4
__Oldsize$1$ = -24					; size = 4
__Newcapacity$1$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Val$dead$ = 12					; size = 4
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::_Resize_reallocate<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 1216 :     _CONSTEXPR20_CONTAINER void _Resize_reallocate(const size_type _Newsize, const _Ty2& _Val) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	esi, ecx

; 1217 :         if (_Newsize > max_size()) {

	mov	edi, DWORD PTR __Newsize$[ebp]
	cmp	edi, 1073741823				; 3fffffffH
	ja	$LN61@Resize_rea

; 1219 :         }
; 1220 : 
; 1221 :         auto& _My_data    = _Mypair._Myval2;
; 1222 :         pointer& _Myfirst = _My_data._Myfirst;
; 1223 :         pointer& _Mylast  = _My_data._Mylast;
; 1224 : 
; 1225 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);

	mov	ecx, DWORD PTR [esi+4]
	sub	ecx, DWORD PTR [esi]
	sar	ecx, 2
	mov	DWORD PTR __Oldsize$1$[ebp], ecx

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	ecx, DWORD PTR [esi+8]
	sub	ecx, DWORD PTR [esi]
	sar	ecx, 2

; 1675 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	mov	edx, ecx
	shr	edx, 1
	mov	eax, 1073741823				; 3fffffffH
	sub	eax, edx
	cmp	ecx, eax
	jbe	SHORT $LN10@Resize_rea

; 1676 :             return _Max; // geometric growth would overflow

	mov	eax, 1073741823				; 3fffffffH
	jmp	SHORT $LN59@Resize_rea
$LN10@Resize_rea:

; 1677 :         }
; 1678 : 
; 1679 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	lea	eax, DWORD PTR [edx+ecx]

; 1680 : 
; 1681 :         if (_Geometric < _Newsize) {

	cmp	eax, edi
	cmovb	eax, edi
$LN59@Resize_rea:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h

; 33   : 								pointer					allocate		(size_type n, const void* p=0) const	{	return (T*)dlmalloc(sizeof(T)*(u32)n);	}

	mov	DWORD PTR __Newcapacity$1$[ebp], eax
	lea	ecx, DWORD PTR [eax*4]
	call	_dlmalloc
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1228 :         const pointer _Newvec         = _Getal().allocate(_Newcapacity);

	mov	ebx, eax
	mov	DWORD PTR __Newvec$[ebp], ebx

; 1229 :         const pointer _Appended_first = _Newvec + _Oldsize;

	mov	ecx, DWORD PTR __Oldsize$1$[ebp]
	lea	edx, DWORD PTR [ebx+ecx*4]

; 1230 :         pointer _Appended_last        = _Appended_first;
; 1231 : 
; 1232 :         _TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1233 :         _Appended_last = _Ufill(_Appended_first, _Newsize - _Oldsize, _Val);

	mov	eax, edi
	sub	eax, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	shl	eax, 2

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	push	eax
	push	0
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1234 :         _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);

	mov	edi, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1703 :     auto _UFirst      = _Get_unwrapped(_First);

	mov	DWORD PTR __UFirst$3[ebp], ecx

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	DWORD PTR __Backout$2[ebp], ebx
	mov	edx, ebx
	mov	DWORD PTR __Backout$2[ebp+4], edx
	mov	DWORD PTR __Backout$2[ebp+8], esi
	npad	6
$LL41@Resize_rea:

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	cmp	ecx, edi
	je	SHORT $LN40@Resize_rea

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax

; 1621 :         ++_Last;

	add	edx, 4
	mov	DWORD PTR __Backout$2[ebp+4], edx

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	add	ecx, 4
	mov	DWORD PTR __UFirst$3[ebp], ecx
	jmp	SHORT $LL41@Resize_rea
$LN40@Resize_rea:

; 1625 :         _First = _Last;

	mov	DWORD PTR __Backout$2[ebp], edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
	mov	DWORD PTR __$EHRec$[ebp+12], -1

; 1732 :         if (_Myfirst) { // destroy and deallocate old array

	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN50@Resize_rea
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h

; 35   : 								void					deallocate		(pointer p, size_type n) const			{	dlfree	(p);				}

	call	_dlfree
$LN50@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1737 :         _Myfirst = _Newvec;

	mov	DWORD PTR [esi], ebx

; 1738 :         _Mylast  = _Newvec + _Newsize;

	mov	eax, DWORD PTR __Newsize$[ebp]
	lea	eax, DWORD PTR [ebx+eax*4]
	mov	DWORD PTR [esi+4], eax

; 1739 :         _Myend   = _Newvec + _Newcapacity;

	mov	eax, DWORD PTR __Newcapacity$1$[ebp]
	lea	eax, DWORD PTR [ebx+eax*4]
	mov	DWORD PTR [esi+8], eax

; 1239 :         _CATCH_END
; 1240 : 
; 1241 :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 1242 :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
__catch$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z$0:

; 1235 :         _CATCH_ALL
; 1236 :         _Destroy(_Appended_first, _Appended_last);
; 1237 :         _Getal().deallocate(_Newvec, _Newcapacity);

	push	ecx
	push	DWORD PTR __Newvec$[ebp]
	call	?deallocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@I@Z ; doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *>::deallocate

; 1238 :         _RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8
$LN61@Resize_rea:

; 1218 :             _Xlength();

	call	?_Xlength@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@CAXXZ ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::_Xlength
$LN58@Resize_rea:
	int	3
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z:
	npad	1
	npad	1
	mov	eax, OFFSET __ehfuncinfo$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::_Resize_reallocate<std::_Value_init_tag>
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
__Backout$2 = -44					; size = 12
__Newvec$ = -32						; size = 4
__UFirst$3 = -28					; size = 4
__Oldsize$1$ = -24					; size = 4
__Newcapacity$1$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Val$dead$ = 12					; size = 4
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::_Resize_reallocate<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 1216 :     _CONSTEXPR20_CONTAINER void _Resize_reallocate(const size_type _Newsize, const _Ty2& _Val) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	esi, ecx

; 1217 :         if (_Newsize > max_size()) {

	mov	edi, DWORD PTR __Newsize$[ebp]
	cmp	edi, 1073741823				; 3fffffffH
	ja	$LN61@Resize_rea

; 1219 :         }
; 1220 : 
; 1221 :         auto& _My_data    = _Mypair._Myval2;
; 1222 :         pointer& _Myfirst = _My_data._Myfirst;
; 1223 :         pointer& _Mylast  = _My_data._Mylast;
; 1224 : 
; 1225 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);

	mov	ecx, DWORD PTR [esi+4]
	sub	ecx, DWORD PTR [esi]
	sar	ecx, 2
	mov	DWORD PTR __Oldsize$1$[ebp], ecx

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	ecx, DWORD PTR [esi+8]
	sub	ecx, DWORD PTR [esi]
	sar	ecx, 2

; 1675 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	mov	edx, ecx
	shr	edx, 1
	mov	eax, 1073741823				; 3fffffffH
	sub	eax, edx
	cmp	ecx, eax
	jbe	SHORT $LN10@Resize_rea

; 1676 :             return _Max; // geometric growth would overflow

	mov	eax, 1073741823				; 3fffffffH
	jmp	SHORT $LN59@Resize_rea
$LN10@Resize_rea:

; 1677 :         }
; 1678 : 
; 1679 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	lea	eax, DWORD PTR [edx+ecx]

; 1680 : 
; 1681 :         if (_Geometric < _Newsize) {

	cmp	eax, edi
	cmovb	eax, edi
$LN59@Resize_rea:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h

; 33   : 								pointer					allocate		(size_type n, const void* p=0) const	{	return (T*)dlmalloc(sizeof(T)*(u32)n);	}

	mov	DWORD PTR __Newcapacity$1$[ebp], eax
	lea	ecx, DWORD PTR [eax*4]
	call	_dlmalloc
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1228 :         const pointer _Newvec         = _Getal().allocate(_Newcapacity);

	mov	ebx, eax
	mov	DWORD PTR __Newvec$[ebp], ebx

; 1229 :         const pointer _Appended_first = _Newvec + _Oldsize;

	mov	ecx, DWORD PTR __Oldsize$1$[ebp]
	lea	edx, DWORD PTR [ebx+ecx*4]

; 1230 :         pointer _Appended_last        = _Appended_first;
; 1231 : 
; 1232 :         _TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1233 :         _Appended_last = _Ufill(_Appended_first, _Newsize - _Oldsize, _Val);

	mov	eax, edi
	sub	eax, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	shl	eax, 2

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	push	eax
	push	0
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1234 :         _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);

	mov	edi, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1703 :     auto _UFirst      = _Get_unwrapped(_First);

	mov	DWORD PTR __UFirst$3[ebp], ecx

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	DWORD PTR __Backout$2[ebp], ebx
	mov	edx, ebx
	mov	DWORD PTR __Backout$2[ebp+4], edx
	mov	DWORD PTR __Backout$2[ebp+8], esi
	npad	6
$LL41@Resize_rea:

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	cmp	ecx, edi
	je	SHORT $LN40@Resize_rea

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax

; 1621 :         ++_Last;

	add	edx, 4
	mov	DWORD PTR __Backout$2[ebp+4], edx

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	add	ecx, 4
	mov	DWORD PTR __UFirst$3[ebp], ecx
	jmp	SHORT $LL41@Resize_rea
$LN40@Resize_rea:

; 1625 :         _First = _Last;

	mov	DWORD PTR __Backout$2[ebp], edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
	mov	DWORD PTR __$EHRec$[ebp+12], -1

; 1732 :         if (_Myfirst) { // destroy and deallocate old array

	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN50@Resize_rea
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h

; 35   : 								void					deallocate		(pointer p, size_type n) const			{	dlfree	(p);				}

	call	_dlfree
$LN50@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1737 :         _Myfirst = _Newvec;

	mov	DWORD PTR [esi], ebx

; 1738 :         _Mylast  = _Newvec + _Newsize;

	mov	eax, DWORD PTR __Newsize$[ebp]
	lea	eax, DWORD PTR [ebx+eax*4]
	mov	DWORD PTR [esi+4], eax

; 1739 :         _Myend   = _Newvec + _Newcapacity;

	mov	eax, DWORD PTR __Newcapacity$1$[ebp]
	lea	eax, DWORD PTR [ebx+eax*4]
	mov	DWORD PTR [esi+8], eax

; 1239 :         _CATCH_END
; 1240 : 
; 1241 :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 1242 :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
__catch$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z$0:

; 1235 :         _CATCH_ALL
; 1236 :         _Destroy(_Appended_first, _Appended_last);
; 1237 :         _Getal().deallocate(_Newvec, _Newcapacity);

	push	ecx
	push	DWORD PTR __Newvec$[ebp]
	call	?deallocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@I@Z ; doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *>::deallocate

; 1238 :         _RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8
$LN61@Resize_rea:

; 1218 :             _Xlength();

	call	?_Xlength@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@CAXXZ ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::_Xlength
$LN58@Resize_rea:
	int	3
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z:
	npad	1
	npad	1
	mov	eax, OFFSET __ehfuncinfo$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::_Resize_reallocate<std::_Value_init_tag>
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
__Backout$2 = -44					; size = 12
__Newvec$ = -32						; size = 4
__UFirst$3 = -28					; size = 4
__Oldsize$1$ = -24					; size = 4
__Newcapacity$1$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Val$dead$ = 12					; size = 4
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::_Resize_reallocate<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 1216 :     _CONSTEXPR20_CONTAINER void _Resize_reallocate(const size_type _Newsize, const _Ty2& _Val) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	esi, ecx

; 1217 :         if (_Newsize > max_size()) {

	mov	edi, DWORD PTR __Newsize$[ebp]
	cmp	edi, 1073741823				; 3fffffffH
	ja	$LN61@Resize_rea

; 1219 :         }
; 1220 : 
; 1221 :         auto& _My_data    = _Mypair._Myval2;
; 1222 :         pointer& _Myfirst = _My_data._Myfirst;
; 1223 :         pointer& _Mylast  = _My_data._Mylast;
; 1224 : 
; 1225 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);

	mov	ecx, DWORD PTR [esi+4]
	sub	ecx, DWORD PTR [esi]
	sar	ecx, 2
	mov	DWORD PTR __Oldsize$1$[ebp], ecx

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	ecx, DWORD PTR [esi+8]
	sub	ecx, DWORD PTR [esi]
	sar	ecx, 2

; 1675 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	mov	edx, ecx
	shr	edx, 1
	mov	eax, 1073741823				; 3fffffffH
	sub	eax, edx
	cmp	ecx, eax
	jbe	SHORT $LN10@Resize_rea

; 1676 :             return _Max; // geometric growth would overflow

	mov	eax, 1073741823				; 3fffffffH
	jmp	SHORT $LN59@Resize_rea
$LN10@Resize_rea:

; 1677 :         }
; 1678 : 
; 1679 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	lea	eax, DWORD PTR [edx+ecx]

; 1680 : 
; 1681 :         if (_Geometric < _Newsize) {

	cmp	eax, edi
	cmovb	eax, edi
$LN59@Resize_rea:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h

; 33   : 								pointer					allocate		(size_type n, const void* p=0) const	{	return (T*)dlmalloc(sizeof(T)*(u32)n);	}

	mov	DWORD PTR __Newcapacity$1$[ebp], eax
	lea	ecx, DWORD PTR [eax*4]
	call	_dlmalloc
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1228 :         const pointer _Newvec         = _Getal().allocate(_Newcapacity);

	mov	ebx, eax
	mov	DWORD PTR __Newvec$[ebp], ebx

; 1229 :         const pointer _Appended_first = _Newvec + _Oldsize;

	mov	ecx, DWORD PTR __Oldsize$1$[ebp]
	lea	edx, DWORD PTR [ebx+ecx*4]

; 1230 :         pointer _Appended_last        = _Appended_first;
; 1231 : 
; 1232 :         _TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1233 :         _Appended_last = _Ufill(_Appended_first, _Newsize - _Oldsize, _Val);

	mov	eax, edi
	sub	eax, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	shl	eax, 2

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	push	eax
	push	0
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1234 :         _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);

	mov	edi, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1703 :     auto _UFirst      = _Get_unwrapped(_First);

	mov	DWORD PTR __UFirst$3[ebp], ecx

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	DWORD PTR __Backout$2[ebp], ebx
	mov	edx, ebx
	mov	DWORD PTR __Backout$2[ebp+4], edx
	mov	DWORD PTR __Backout$2[ebp+8], esi
	npad	6
$LL41@Resize_rea:

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	cmp	ecx, edi
	je	SHORT $LN40@Resize_rea

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax

; 1621 :         ++_Last;

	add	edx, 4
	mov	DWORD PTR __Backout$2[ebp+4], edx

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	add	ecx, 4
	mov	DWORD PTR __UFirst$3[ebp], ecx
	jmp	SHORT $LL41@Resize_rea
$LN40@Resize_rea:

; 1625 :         _First = _Last;

	mov	DWORD PTR __Backout$2[ebp], edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
	mov	DWORD PTR __$EHRec$[ebp+12], -1

; 1732 :         if (_Myfirst) { // destroy and deallocate old array

	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN50@Resize_rea
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h

; 35   : 								void					deallocate		(pointer p, size_type n) const			{	dlfree	(p);				}

	call	_dlfree
$LN50@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1737 :         _Myfirst = _Newvec;

	mov	DWORD PTR [esi], ebx

; 1738 :         _Mylast  = _Newvec + _Newsize;

	mov	eax, DWORD PTR __Newsize$[ebp]
	lea	eax, DWORD PTR [ebx+eax*4]
	mov	DWORD PTR [esi+4], eax

; 1739 :         _Myend   = _Newvec + _Newcapacity;

	mov	eax, DWORD PTR __Newcapacity$1$[ebp]
	lea	eax, DWORD PTR [ebx+eax*4]
	mov	DWORD PTR [esi+8], eax

; 1239 :         _CATCH_END
; 1240 : 
; 1241 :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 1242 :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
__catch$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z$0:

; 1235 :         _CATCH_ALL
; 1236 :         _Destroy(_Appended_first, _Appended_last);
; 1237 :         _Getal().deallocate(_Newvec, _Newcapacity);

	push	ecx
	push	DWORD PTR __Newvec$[ebp]
	call	?deallocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@I@Z ; doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *>::deallocate

; 1238 :         _RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8
$LN61@Resize_rea:

; 1218 :             _Xlength();

	call	?_Xlength@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@CAXXZ ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::_Xlength
$LN58@Resize_rea:
	int	3
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z:
	npad	1
	npad	1
	mov	eax, OFFSET __ehfuncinfo$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::_Resize_reallocate<std::_Value_init_tag>
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
__Newvec$ = -24						; size = 4
tv370 = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Oldsize$1$ = 8					; size = 4
__Newsize$ = 8						; size = 4
__Val$dead$ = 12					; size = 4
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Resize_reallocate<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 1216 :     _CONSTEXPR20_CONTAINER void _Resize_reallocate(const size_type _Newsize, const _Ty2& _Val) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	esi, ecx

; 1217 :         if (_Newsize > max_size()) {

	mov	edi, DWORD PTR __Newsize$[ebp]
	cmp	edi, 1073741823				; 3fffffffH
	ja	$LN42@Resize_rea

; 1219 :         }
; 1220 : 
; 1221 :         auto& _My_data    = _Mypair._Myval2;
; 1222 :         pointer& _Myfirst = _My_data._Myfirst;
; 1223 :         pointer& _Mylast  = _My_data._Mylast;
; 1224 : 
; 1225 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);

	mov	ecx, DWORD PTR [esi+4]
	sub	ecx, DWORD PTR [esi]
	sar	ecx, 2
	mov	DWORD PTR __Oldsize$1$[ebp], ecx

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	ecx, DWORD PTR [esi+8]
	sub	ecx, DWORD PTR [esi]
	sar	ecx, 2

; 1675 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	mov	edx, ecx
	shr	edx, 1
	mov	eax, 1073741823				; 3fffffffH
	sub	eax, edx
	cmp	ecx, eax
	jbe	SHORT $LN10@Resize_rea

; 1676 :             return _Max; // geometric growth would overflow

	mov	eax, 1073741823				; 3fffffffH
	jmp	SHORT $LN11@Resize_rea
$LN10@Resize_rea:

; 1677 :         }
; 1678 : 
; 1679 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	lea	eax, DWORD PTR [edx+ecx]

; 1680 : 
; 1681 :         if (_Geometric < _Newsize) {

	cmp	eax, edi
	cmovb	eax, edi
$LN11@Resize_rea:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h

; 33   : 								pointer					allocate		(size_type n, const void* p=0) const	{	return (T*)dlmalloc(sizeof(T)*(u32)n);	}

	shl	eax, 2
	mov	DWORD PTR tv370[ebp], eax
	mov	ecx, eax
	call	_dlmalloc
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1228 :         const pointer _Newvec         = _Getal().allocate(_Newcapacity);

	mov	ebx, eax
	mov	DWORD PTR __Newvec$[ebp], ebx

; 1229 :         const pointer _Appended_first = _Newvec + _Oldsize;

	mov	ecx, DWORD PTR __Oldsize$1$[ebp]
	lea	edx, DWORD PTR [ebx+ecx*4]

; 1230 :         pointer _Appended_last        = _Appended_first;
; 1231 : 
; 1232 :         _TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1233 :         _Appended_last = _Ufill(_Appended_first, _Newsize - _Oldsize, _Val);

	mov	eax, edi
	sub	eax, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	shl	eax, 2

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	push	eax
	push	0
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1234 :         _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);

	push	ebx
	push	DWORD PTR [esi+4]
	push	DWORD PTR [esi]
	call	?_Umove_if_noexcept@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@00@Z ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Umove_if_noexcept
	mov	DWORD PTR __$EHRec$[ebp+12], -1

; 1732 :         if (_Myfirst) { // destroy and deallocate old array

	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN35@Resize_rea
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h

; 35   : 								void					deallocate		(pointer p, size_type n) const			{	dlfree	(p);				}

	call	_dlfree
$LN35@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1737 :         _Myfirst = _Newvec;

	mov	DWORD PTR [esi], ebx

; 1738 :         _Mylast  = _Newvec + _Newsize;

	lea	eax, DWORD PTR [ebx+edi*4]
	mov	DWORD PTR [esi+4], eax

; 1739 :         _Myend   = _Newvec + _Newcapacity;

	mov	eax, DWORD PTR tv370[ebp]
	add	eax, ebx
	mov	DWORD PTR [esi+8], eax

; 1239 :         _CATCH_END
; 1240 : 
; 1241 :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 1242 :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
__catch$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z$0:

; 1235 :         _CATCH_ALL
; 1236 :         _Destroy(_Appended_first, _Appended_last);
; 1237 :         _Getal().deallocate(_Newvec, _Newcapacity);

	push	ecx
	push	DWORD PTR __Newvec$[ebp]
	call	?deallocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@I@Z ; doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *>::deallocate

; 1238 :         _RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8
$LN42@Resize_rea:

; 1218 :             _Xlength();

	call	?_Xlength@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@CAXXZ ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Xlength
$LN40@Resize_rea:
	int	3
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z:
	npad	1
	npad	1
	mov	eax, OFFSET __ehfuncinfo$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Resize_reallocate<std::_Value_init_tag>
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
__Backout$2 = -44					; size = 12
__Newvec$ = -32						; size = 4
__UFirst$3 = -28					; size = 4
__Oldsize$1$ = -24					; size = 4
__Newcapacity$1$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Val$dead$ = 12					; size = 4
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::_Resize_reallocate<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 1216 :     _CONSTEXPR20_CONTAINER void _Resize_reallocate(const size_type _Newsize, const _Ty2& _Val) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	esi, ecx

; 1217 :         if (_Newsize > max_size()) {

	mov	edi, DWORD PTR __Newsize$[ebp]
	cmp	edi, 1073741823				; 3fffffffH
	ja	$LN61@Resize_rea

; 1219 :         }
; 1220 : 
; 1221 :         auto& _My_data    = _Mypair._Myval2;
; 1222 :         pointer& _Myfirst = _My_data._Myfirst;
; 1223 :         pointer& _Mylast  = _My_data._Mylast;
; 1224 : 
; 1225 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);

	mov	ecx, DWORD PTR [esi+4]
	sub	ecx, DWORD PTR [esi]
	sar	ecx, 2
	mov	DWORD PTR __Oldsize$1$[ebp], ecx

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	ecx, DWORD PTR [esi+8]
	sub	ecx, DWORD PTR [esi]
	sar	ecx, 2

; 1675 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	mov	edx, ecx
	shr	edx, 1
	mov	eax, 1073741823				; 3fffffffH
	sub	eax, edx
	cmp	ecx, eax
	jbe	SHORT $LN10@Resize_rea

; 1676 :             return _Max; // geometric growth would overflow

	mov	eax, 1073741823				; 3fffffffH
	jmp	SHORT $LN59@Resize_rea
$LN10@Resize_rea:

; 1677 :         }
; 1678 : 
; 1679 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	lea	eax, DWORD PTR [edx+ecx]

; 1680 : 
; 1681 :         if (_Geometric < _Newsize) {

	cmp	eax, edi
	cmovb	eax, edi
$LN59@Resize_rea:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h

; 33   : 								pointer					allocate		(size_type n, const void* p=0) const	{	return (T*)dlmalloc(sizeof(T)*(u32)n);	}

	mov	DWORD PTR __Newcapacity$1$[ebp], eax
	lea	ecx, DWORD PTR [eax*4]
	call	_dlmalloc
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1228 :         const pointer _Newvec         = _Getal().allocate(_Newcapacity);

	mov	ebx, eax
	mov	DWORD PTR __Newvec$[ebp], ebx

; 1229 :         const pointer _Appended_first = _Newvec + _Oldsize;

	mov	ecx, DWORD PTR __Oldsize$1$[ebp]
	lea	edx, DWORD PTR [ebx+ecx*4]

; 1230 :         pointer _Appended_last        = _Appended_first;
; 1231 : 
; 1232 :         _TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1233 :         _Appended_last = _Ufill(_Appended_first, _Newsize - _Oldsize, _Val);

	mov	eax, edi
	sub	eax, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	shl	eax, 2

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	push	eax
	push	0
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1234 :         _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);

	mov	edi, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1703 :     auto _UFirst      = _Get_unwrapped(_First);

	mov	DWORD PTR __UFirst$3[ebp], ecx

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	DWORD PTR __Backout$2[ebp], ebx
	mov	edx, ebx
	mov	DWORD PTR __Backout$2[ebp+4], edx
	mov	DWORD PTR __Backout$2[ebp+8], esi
	npad	6
$LL41@Resize_rea:

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	cmp	ecx, edi
	je	SHORT $LN40@Resize_rea

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax

; 1621 :         ++_Last;

	add	edx, 4
	mov	DWORD PTR __Backout$2[ebp+4], edx

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	add	ecx, 4
	mov	DWORD PTR __UFirst$3[ebp], ecx
	jmp	SHORT $LL41@Resize_rea
$LN40@Resize_rea:

; 1625 :         _First = _Last;

	mov	DWORD PTR __Backout$2[ebp], edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
	mov	DWORD PTR __$EHRec$[ebp+12], -1

; 1732 :         if (_Myfirst) { // destroy and deallocate old array

	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN50@Resize_rea
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h

; 35   : 								void					deallocate		(pointer p, size_type n) const			{	dlfree	(p);				}

	call	_dlfree
$LN50@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1737 :         _Myfirst = _Newvec;

	mov	DWORD PTR [esi], ebx

; 1738 :         _Mylast  = _Newvec + _Newsize;

	mov	eax, DWORD PTR __Newsize$[ebp]
	lea	eax, DWORD PTR [ebx+eax*4]
	mov	DWORD PTR [esi+4], eax

; 1739 :         _Myend   = _Newvec + _Newcapacity;

	mov	eax, DWORD PTR __Newcapacity$1$[ebp]
	lea	eax, DWORD PTR [ebx+eax*4]
	mov	DWORD PTR [esi+8], eax

; 1239 :         _CATCH_END
; 1240 : 
; 1241 :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 1242 :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
__catch$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z$0:

; 1235 :         _CATCH_ALL
; 1236 :         _Destroy(_Appended_first, _Appended_last);
; 1237 :         _Getal().deallocate(_Newvec, _Newcapacity);

	push	ecx
	push	DWORD PTR __Newvec$[ebp]
	call	?deallocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@I@Z ; doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *>::deallocate

; 1238 :         _RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8
$LN61@Resize_rea:

; 1218 :             _Xlength();

	call	?_Xlength@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@CAXXZ ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::_Xlength
$LN58@Resize_rea:
	int	3
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z:
	npad	1
	npad	1
	mov	eax, OFFSET __ehfuncinfo$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::_Resize_reallocate<std::_Value_init_tag>
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
__Backout$2 = -44					; size = 12
__Newvec$ = -32						; size = 4
__UFirst$3 = -28					; size = 4
__Oldsize$1$ = -24					; size = 4
__Newcapacity$1$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Val$dead$ = 12					; size = 4
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::_Resize_reallocate<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 1216 :     _CONSTEXPR20_CONTAINER void _Resize_reallocate(const size_type _Newsize, const _Ty2& _Val) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	esi, ecx

; 1217 :         if (_Newsize > max_size()) {

	mov	edi, DWORD PTR __Newsize$[ebp]
	cmp	edi, 1073741823				; 3fffffffH
	ja	$LN61@Resize_rea

; 1219 :         }
; 1220 : 
; 1221 :         auto& _My_data    = _Mypair._Myval2;
; 1222 :         pointer& _Myfirst = _My_data._Myfirst;
; 1223 :         pointer& _Mylast  = _My_data._Mylast;
; 1224 : 
; 1225 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);

	mov	ecx, DWORD PTR [esi+4]
	sub	ecx, DWORD PTR [esi]
	sar	ecx, 2
	mov	DWORD PTR __Oldsize$1$[ebp], ecx

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	ecx, DWORD PTR [esi+8]
	sub	ecx, DWORD PTR [esi]
	sar	ecx, 2

; 1675 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	mov	edx, ecx
	shr	edx, 1
	mov	eax, 1073741823				; 3fffffffH
	sub	eax, edx
	cmp	ecx, eax
	jbe	SHORT $LN10@Resize_rea

; 1676 :             return _Max; // geometric growth would overflow

	mov	eax, 1073741823				; 3fffffffH
	jmp	SHORT $LN59@Resize_rea
$LN10@Resize_rea:

; 1677 :         }
; 1678 : 
; 1679 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	lea	eax, DWORD PTR [edx+ecx]

; 1680 : 
; 1681 :         if (_Geometric < _Newsize) {

	cmp	eax, edi
	cmovb	eax, edi
$LN59@Resize_rea:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h

; 33   : 								pointer					allocate		(size_type n, const void* p=0) const	{	return (T*)dlmalloc(sizeof(T)*(u32)n);	}

	mov	DWORD PTR __Newcapacity$1$[ebp], eax
	lea	ecx, DWORD PTR [eax*4]
	call	_dlmalloc
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1228 :         const pointer _Newvec         = _Getal().allocate(_Newcapacity);

	mov	ebx, eax
	mov	DWORD PTR __Newvec$[ebp], ebx

; 1229 :         const pointer _Appended_first = _Newvec + _Oldsize;

	mov	ecx, DWORD PTR __Oldsize$1$[ebp]
	lea	edx, DWORD PTR [ebx+ecx*4]

; 1230 :         pointer _Appended_last        = _Appended_first;
; 1231 : 
; 1232 :         _TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1233 :         _Appended_last = _Ufill(_Appended_first, _Newsize - _Oldsize, _Val);

	mov	eax, edi
	sub	eax, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	shl	eax, 2

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	push	eax
	push	0
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1234 :         _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);

	mov	edi, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1703 :     auto _UFirst      = _Get_unwrapped(_First);

	mov	DWORD PTR __UFirst$3[ebp], ecx

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	DWORD PTR __Backout$2[ebp], ebx
	mov	edx, ebx
	mov	DWORD PTR __Backout$2[ebp+4], edx
	mov	DWORD PTR __Backout$2[ebp+8], esi
	npad	6
$LL41@Resize_rea:

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	cmp	ecx, edi
	je	SHORT $LN40@Resize_rea

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax

; 1621 :         ++_Last;

	add	edx, 4
	mov	DWORD PTR __Backout$2[ebp+4], edx

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	add	ecx, 4
	mov	DWORD PTR __UFirst$3[ebp], ecx
	jmp	SHORT $LL41@Resize_rea
$LN40@Resize_rea:

; 1625 :         _First = _Last;

	mov	DWORD PTR __Backout$2[ebp], edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
	mov	DWORD PTR __$EHRec$[ebp+12], -1

; 1732 :         if (_Myfirst) { // destroy and deallocate old array

	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN50@Resize_rea
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h

; 35   : 								void					deallocate		(pointer p, size_type n) const			{	dlfree	(p);				}

	call	_dlfree
$LN50@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1737 :         _Myfirst = _Newvec;

	mov	DWORD PTR [esi], ebx

; 1738 :         _Mylast  = _Newvec + _Newsize;

	mov	eax, DWORD PTR __Newsize$[ebp]
	lea	eax, DWORD PTR [ebx+eax*4]
	mov	DWORD PTR [esi+4], eax

; 1739 :         _Myend   = _Newvec + _Newcapacity;

	mov	eax, DWORD PTR __Newcapacity$1$[ebp]
	lea	eax, DWORD PTR [ebx+eax*4]
	mov	DWORD PTR [esi+8], eax

; 1239 :         _CATCH_END
; 1240 : 
; 1241 :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 1242 :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
__catch$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z$0:

; 1235 :         _CATCH_ALL
; 1236 :         _Destroy(_Appended_first, _Appended_last);
; 1237 :         _Getal().deallocate(_Newvec, _Newcapacity);

	push	ecx
	push	DWORD PTR __Newvec$[ebp]
	call	?deallocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@I@Z ; doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *>::deallocate

; 1238 :         _RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8
$LN61@Resize_rea:

; 1218 :             _Xlength();

	call	?_Xlength@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@CAXXZ ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::_Xlength
$LN58@Resize_rea:
	int	3
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z:
	npad	1
	npad	1
	mov	eax, OFFSET __ehfuncinfo$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::_Resize_reallocate<std::_Value_init_tag>
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
__Backout$2 = -44					; size = 12
__Newvec$ = -32						; size = 4
__UFirst$3 = -28					; size = 4
__Oldsize$1$ = -24					; size = 4
__Newcapacity$1$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Val$dead$ = 12					; size = 4
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::_Resize_reallocate<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 1216 :     _CONSTEXPR20_CONTAINER void _Resize_reallocate(const size_type _Newsize, const _Ty2& _Val) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	esi, ecx

; 1217 :         if (_Newsize > max_size()) {

	mov	edi, DWORD PTR __Newsize$[ebp]
	cmp	edi, 1073741823				; 3fffffffH
	ja	$LN61@Resize_rea

; 1219 :         }
; 1220 : 
; 1221 :         auto& _My_data    = _Mypair._Myval2;
; 1222 :         pointer& _Myfirst = _My_data._Myfirst;
; 1223 :         pointer& _Mylast  = _My_data._Mylast;
; 1224 : 
; 1225 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);

	mov	ecx, DWORD PTR [esi+4]
	sub	ecx, DWORD PTR [esi]
	sar	ecx, 2
	mov	DWORD PTR __Oldsize$1$[ebp], ecx

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	ecx, DWORD PTR [esi+8]
	sub	ecx, DWORD PTR [esi]
	sar	ecx, 2

; 1675 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	mov	edx, ecx
	shr	edx, 1
	mov	eax, 1073741823				; 3fffffffH
	sub	eax, edx
	cmp	ecx, eax
	jbe	SHORT $LN10@Resize_rea

; 1676 :             return _Max; // geometric growth would overflow

	mov	eax, 1073741823				; 3fffffffH
	jmp	SHORT $LN59@Resize_rea
$LN10@Resize_rea:

; 1677 :         }
; 1678 : 
; 1679 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	lea	eax, DWORD PTR [edx+ecx]

; 1680 : 
; 1681 :         if (_Geometric < _Newsize) {

	cmp	eax, edi
	cmovb	eax, edi
$LN59@Resize_rea:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h

; 33   : 								pointer					allocate		(size_type n, const void* p=0) const	{	return (T*)dlmalloc(sizeof(T)*(u32)n);	}

	mov	DWORD PTR __Newcapacity$1$[ebp], eax
	lea	ecx, DWORD PTR [eax*4]
	call	_dlmalloc
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1228 :         const pointer _Newvec         = _Getal().allocate(_Newcapacity);

	mov	ebx, eax
	mov	DWORD PTR __Newvec$[ebp], ebx

; 1229 :         const pointer _Appended_first = _Newvec + _Oldsize;

	mov	ecx, DWORD PTR __Oldsize$1$[ebp]
	lea	edx, DWORD PTR [ebx+ecx*4]

; 1230 :         pointer _Appended_last        = _Appended_first;
; 1231 : 
; 1232 :         _TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1233 :         _Appended_last = _Ufill(_Appended_first, _Newsize - _Oldsize, _Val);

	mov	eax, edi
	sub	eax, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	shl	eax, 2

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	push	eax
	push	0
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1234 :         _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);

	mov	edi, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1703 :     auto _UFirst      = _Get_unwrapped(_First);

	mov	DWORD PTR __UFirst$3[ebp], ecx

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	DWORD PTR __Backout$2[ebp], ebx
	mov	edx, ebx
	mov	DWORD PTR __Backout$2[ebp+4], edx
	mov	DWORD PTR __Backout$2[ebp+8], esi
	npad	6
$LL41@Resize_rea:

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	cmp	ecx, edi
	je	SHORT $LN40@Resize_rea

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax

; 1621 :         ++_Last;

	add	edx, 4
	mov	DWORD PTR __Backout$2[ebp+4], edx

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	add	ecx, 4
	mov	DWORD PTR __UFirst$3[ebp], ecx
	jmp	SHORT $LL41@Resize_rea
$LN40@Resize_rea:

; 1625 :         _First = _Last;

	mov	DWORD PTR __Backout$2[ebp], edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
	mov	DWORD PTR __$EHRec$[ebp+12], -1

; 1732 :         if (_Myfirst) { // destroy and deallocate old array

	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN50@Resize_rea
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h

; 35   : 								void					deallocate		(pointer p, size_type n) const			{	dlfree	(p);				}

	call	_dlfree
$LN50@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1737 :         _Myfirst = _Newvec;

	mov	DWORD PTR [esi], ebx

; 1738 :         _Mylast  = _Newvec + _Newsize;

	mov	eax, DWORD PTR __Newsize$[ebp]
	lea	eax, DWORD PTR [ebx+eax*4]
	mov	DWORD PTR [esi+4], eax

; 1739 :         _Myend   = _Newvec + _Newcapacity;

	mov	eax, DWORD PTR __Newcapacity$1$[ebp]
	lea	eax, DWORD PTR [ebx+eax*4]
	mov	DWORD PTR [esi+8], eax

; 1239 :         _CATCH_END
; 1240 : 
; 1241 :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 1242 :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
__catch$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z$0:

; 1235 :         _CATCH_ALL
; 1236 :         _Destroy(_Appended_first, _Appended_last);
; 1237 :         _Getal().deallocate(_Newvec, _Newcapacity);

	push	ecx
	push	DWORD PTR __Newvec$[ebp]
	call	?deallocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@I@Z ; doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *>::deallocate

; 1238 :         _RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8
$LN61@Resize_rea:

; 1218 :             _Xlength();

	call	?_Xlength@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@CAXXZ ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::_Xlength
$LN58@Resize_rea:
	int	3
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z:
	npad	1
	npad	1
	mov	eax, OFFSET __ehfuncinfo$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::_Resize_reallocate<std::_Value_init_tag>
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
__Backout$2 = -44					; size = 12
__Newvec$ = -32						; size = 4
__UFirst$3 = -28					; size = 4
__Oldsize$1$ = -24					; size = 4
__Newcapacity$1$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Val$dead$ = 12					; size = 4
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::_Resize_reallocate<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 1216 :     _CONSTEXPR20_CONTAINER void _Resize_reallocate(const size_type _Newsize, const _Ty2& _Val) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	esi, ecx

; 1217 :         if (_Newsize > max_size()) {

	mov	edi, DWORD PTR __Newsize$[ebp]
	cmp	edi, 1073741823				; 3fffffffH
	ja	$LN61@Resize_rea

; 1219 :         }
; 1220 : 
; 1221 :         auto& _My_data    = _Mypair._Myval2;
; 1222 :         pointer& _Myfirst = _My_data._Myfirst;
; 1223 :         pointer& _Mylast  = _My_data._Mylast;
; 1224 : 
; 1225 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);

	mov	ecx, DWORD PTR [esi+4]
	sub	ecx, DWORD PTR [esi]
	sar	ecx, 2
	mov	DWORD PTR __Oldsize$1$[ebp], ecx

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	ecx, DWORD PTR [esi+8]
	sub	ecx, DWORD PTR [esi]
	sar	ecx, 2

; 1675 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	mov	edx, ecx
	shr	edx, 1
	mov	eax, 1073741823				; 3fffffffH
	sub	eax, edx
	cmp	ecx, eax
	jbe	SHORT $LN10@Resize_rea

; 1676 :             return _Max; // geometric growth would overflow

	mov	eax, 1073741823				; 3fffffffH
	jmp	SHORT $LN59@Resize_rea
$LN10@Resize_rea:

; 1677 :         }
; 1678 : 
; 1679 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	lea	eax, DWORD PTR [edx+ecx]

; 1680 : 
; 1681 :         if (_Geometric < _Newsize) {

	cmp	eax, edi
	cmovb	eax, edi
$LN59@Resize_rea:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h

; 33   : 								pointer					allocate		(size_type n, const void* p=0) const	{	return (T*)dlmalloc(sizeof(T)*(u32)n);	}

	mov	DWORD PTR __Newcapacity$1$[ebp], eax
	lea	ecx, DWORD PTR [eax*4]
	call	_dlmalloc
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1228 :         const pointer _Newvec         = _Getal().allocate(_Newcapacity);

	mov	ebx, eax
	mov	DWORD PTR __Newvec$[ebp], ebx

; 1229 :         const pointer _Appended_first = _Newvec + _Oldsize;

	mov	ecx, DWORD PTR __Oldsize$1$[ebp]
	lea	edx, DWORD PTR [ebx+ecx*4]

; 1230 :         pointer _Appended_last        = _Appended_first;
; 1231 : 
; 1232 :         _TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1233 :         _Appended_last = _Ufill(_Appended_first, _Newsize - _Oldsize, _Val);

	mov	eax, edi
	sub	eax, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	shl	eax, 2

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	push	eax
	push	0
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1234 :         _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);

	mov	edi, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1703 :     auto _UFirst      = _Get_unwrapped(_First);

	mov	DWORD PTR __UFirst$3[ebp], ecx

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	DWORD PTR __Backout$2[ebp], ebx
	mov	edx, ebx
	mov	DWORD PTR __Backout$2[ebp+4], edx
	mov	DWORD PTR __Backout$2[ebp+8], esi
	npad	6
$LL41@Resize_rea:

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	cmp	ecx, edi
	je	SHORT $LN40@Resize_rea

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax

; 1621 :         ++_Last;

	add	edx, 4
	mov	DWORD PTR __Backout$2[ebp+4], edx

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	add	ecx, 4
	mov	DWORD PTR __UFirst$3[ebp], ecx
	jmp	SHORT $LL41@Resize_rea
$LN40@Resize_rea:

; 1625 :         _First = _Last;

	mov	DWORD PTR __Backout$2[ebp], edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
	mov	DWORD PTR __$EHRec$[ebp+12], -1

; 1732 :         if (_Myfirst) { // destroy and deallocate old array

	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN50@Resize_rea
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h

; 35   : 								void					deallocate		(pointer p, size_type n) const			{	dlfree	(p);				}

	call	_dlfree
$LN50@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1737 :         _Myfirst = _Newvec;

	mov	DWORD PTR [esi], ebx

; 1738 :         _Mylast  = _Newvec + _Newsize;

	mov	eax, DWORD PTR __Newsize$[ebp]
	lea	eax, DWORD PTR [ebx+eax*4]
	mov	DWORD PTR [esi+4], eax

; 1739 :         _Myend   = _Newvec + _Newcapacity;

	mov	eax, DWORD PTR __Newcapacity$1$[ebp]
	lea	eax, DWORD PTR [ebx+eax*4]
	mov	DWORD PTR [esi+8], eax

; 1239 :         _CATCH_END
; 1240 : 
; 1241 :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 1242 :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
__catch$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z$0:

; 1235 :         _CATCH_ALL
; 1236 :         _Destroy(_Appended_first, _Appended_last);
; 1237 :         _Getal().deallocate(_Newvec, _Newcapacity);

	push	ecx
	push	DWORD PTR __Newvec$[ebp]
	call	?deallocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@I@Z ; doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *>::deallocate

; 1238 :         _RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8
$LN61@Resize_rea:

; 1218 :             _Xlength();

	call	?_Xlength@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@CAXXZ ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::_Xlength
$LN58@Resize_rea:
	int	3
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z:
	npad	1
	npad	1
	mov	eax, OFFSET __ehfuncinfo$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::_Resize_reallocate<std::_Value_init_tag>
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAPAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@YAPAPAVIRender_Visual@@QAPAV1@0PAPAV1@AAV?$doug_lea_alloc@PAVIRender_Visual@@@@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Al$dead$ = 12						; size = 4
??$_Uninitialized_move@PAPAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@YAPAPAVIRender_Visual@@QAPAV1@0PAPAV1@AAV?$doug_lea_alloc@PAVIRender_Visual@@@@@Z PROC ; std::_Uninitialized_move<IRender_Visual * *,doug_lea_alloc<IRender_Visual *> >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	eax, DWORD PTR __Dest$[esp-4]

; 1699 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

	push	esi
	mov	esi, edx

; 1700 :     // move [_First, _Last) to raw _Dest, using _Al
; 1701 :     // note: only called internally from elsewhere in the STL
; 1702 :     using _Ptrval     = typename _Alloc::value_type*;
; 1703 :     auto _UFirst      = _Get_unwrapped(_First);
; 1704 :     const auto _ULast = _Get_unwrapped(_Last);
; 1705 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1706 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1707 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1708 :         if (!_STD is_constant_evaluated())
; 1709 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1710 :         {
; 1711 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1712 :             return _Dest + (_ULast - _UFirst);
; 1713 :         }
; 1714 :     }
; 1715 : 
; 1716 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	cmp	ecx, esi
	je	SHORT $LN3@Uninitiali
	npad	5
$LL4@Uninitiali:

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	edx, DWORD PTR [ecx]

; 1621 :         ++_Last;

	add	ecx, 4
	mov	DWORD PTR [eax], edx
	add	eax, 4

; 1700 :     // move [_First, _Last) to raw _Dest, using _Al
; 1701 :     // note: only called internally from elsewhere in the STL
; 1702 :     using _Ptrval     = typename _Alloc::value_type*;
; 1703 :     auto _UFirst      = _Get_unwrapped(_First);
; 1704 :     const auto _ULast = _Get_unwrapped(_Last);
; 1705 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1706 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1707 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1708 :         if (!_STD is_constant_evaluated())
; 1709 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1710 :         {
; 1711 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1712 :             return _Dest + (_ULast - _UFirst);
; 1713 :         }
; 1714 :     }
; 1715 : 
; 1716 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	cmp	ecx, esi
	jne	SHORT $LL4@Uninitiali
$LN3@Uninitiali:
	pop	esi

; 1718 :         _Backout._Emplace_back(_STD move(*_UFirst));
; 1719 :     }
; 1720 : 
; 1721 :     return _Backout._Release();
; 1722 : }

	ret	0
??$_Uninitialized_move@PAPAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@YAPAPAVIRender_Visual@@QAPAV1@0PAPAV1@AAV?$doug_lea_alloc@PAVIRender_Visual@@@@@Z ENDP ; std::_Uninitialized_move<IRender_Visual * *,doug_lea_alloc<IRender_Visual *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0PAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Al$dead$ = 12						; size = 4
??$_Uninitialized_move@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0PAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z PROC ; std::_Uninitialized_move<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	eax, DWORD PTR __Dest$[esp-4]

; 1699 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

	push	esi
	mov	esi, edx

; 1700 :     // move [_First, _Last) to raw _Dest, using _Al
; 1701 :     // note: only called internally from elsewhere in the STL
; 1702 :     using _Ptrval     = typename _Alloc::value_type*;
; 1703 :     auto _UFirst      = _Get_unwrapped(_First);
; 1704 :     const auto _ULast = _Get_unwrapped(_Last);
; 1705 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1706 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1707 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1708 :         if (!_STD is_constant_evaluated())
; 1709 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1710 :         {
; 1711 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1712 :             return _Dest + (_ULast - _UFirst);
; 1713 :         }
; 1714 :     }
; 1715 : 
; 1716 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	cmp	ecx, esi
	je	SHORT $LN3@Uninitiali
	npad	5
$LL4@Uninitiali:

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	edx, DWORD PTR [ecx]

; 1621 :         ++_Last;

	add	ecx, 4
	mov	DWORD PTR [eax], edx
	add	eax, 4

; 1700 :     // move [_First, _Last) to raw _Dest, using _Al
; 1701 :     // note: only called internally from elsewhere in the STL
; 1702 :     using _Ptrval     = typename _Alloc::value_type*;
; 1703 :     auto _UFirst      = _Get_unwrapped(_First);
; 1704 :     const auto _ULast = _Get_unwrapped(_Last);
; 1705 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1706 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1707 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1708 :         if (!_STD is_constant_evaluated())
; 1709 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1710 :         {
; 1711 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1712 :             return _Dest + (_ULast - _UFirst);
; 1713 :         }
; 1714 :     }
; 1715 : 
; 1716 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	cmp	ecx, esi
	jne	SHORT $LL4@Uninitiali
$LN3@Uninitiali:
	pop	esi

; 1718 :         _Backout._Emplace_back(_STD move(*_UFirst));
; 1719 :     }
; 1720 : 
; 1721 :     return _Backout._Release();
; 1722 : }

	ret	0
??$_Uninitialized_move@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0PAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ENDP ; std::_Uninitialized_move<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Get_unwrapped@ABQAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_TABQAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
??$_Get_unwrapped@ABQAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_TABQAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; std::_Get_unwrapped<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * * const &>, COMDAT
; __It$ = ecx

; 1275 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1276 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1277 :         return _It + 0;

	mov	eax, DWORD PTR [ecx]

; 1278 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1279 :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 1280 :     } else {
; 1281 :         return static_cast<_Iter&&>(_It);
; 1282 :     }
; 1283 : }

	ret	0
??$_Get_unwrapped@ABQAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_TABQAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; std::_Get_unwrapped<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * * const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@IAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z
_TEXT	SEGMENT
__Al$dead$ = 8						; size = 4
??$_Uninitialized_value_construct_n@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@IAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z PROC ; std::_Uninitialized_value_construct_n<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >, COMDAT
; __First$ = ecx
; __Count$ = edx

; 1798 :     _Alloc_ptr_t<_Alloc> _First, _Alloc_size_t<_Alloc> _Count, _Alloc& _Al) {

	push	esi
	push	edi

; 1799 :     // value-initialize _Count objects to raw _First, using _Al
; 1800 :     using _Ptrty = typename _Alloc::value_type*;
; 1801 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 1802 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1803 :         if (!_STD is_constant_evaluated())
; 1804 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1805 :         {
; 1806 :             auto _PFirst = _Unfancy(_First);
; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	lea	esi, DWORD PTR [edx*4]
	mov	edi, ecx

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	push	esi
	push	0
	push	edi
	call	_memset
	add	esp, 12					; 0000000cH

; 1808 :             return _First + _Count;

	lea	eax, DWORD PTR [esi+edi]
	pop	edi
	pop	esi

; 1809 :         }
; 1810 :     }
; 1811 : 
; 1812 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};
; 1813 :     for (; 0 < _Count; --_Count) {
; 1814 :         _Backout._Emplace_back();
; 1815 :     }
; 1816 : 
; 1817 :     return _Backout._Release();
; 1818 : }

	ret	0
??$_Uninitialized_value_construct_n@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@IAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ENDP ; std::_Uninitialized_value_construct_n<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@IAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z
_TEXT	SEGMENT
__Al$dead$ = 8						; size = 4
??$_Uninitialized_value_construct_n@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@IAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z PROC ; std::_Uninitialized_value_construct_n<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >, COMDAT
; __First$ = ecx
; __Count$ = edx

; 1798 :     _Alloc_ptr_t<_Alloc> _First, _Alloc_size_t<_Alloc> _Count, _Alloc& _Al) {

	push	esi
	push	edi

; 1799 :     // value-initialize _Count objects to raw _First, using _Al
; 1800 :     using _Ptrty = typename _Alloc::value_type*;
; 1801 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 1802 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1803 :         if (!_STD is_constant_evaluated())
; 1804 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1805 :         {
; 1806 :             auto _PFirst = _Unfancy(_First);
; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	lea	esi, DWORD PTR [edx*4]
	mov	edi, ecx

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	push	esi
	push	0
	push	edi
	call	_memset
	add	esp, 12					; 0000000cH

; 1808 :             return _First + _Count;

	lea	eax, DWORD PTR [esi+edi]
	pop	edi
	pop	esi

; 1809 :         }
; 1810 :     }
; 1811 : 
; 1812 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};
; 1813 :     for (; 0 < _Count; --_Count) {
; 1814 :         _Backout._Emplace_back();
; 1815 :     }
; 1816 : 
; 1817 :     return _Backout._Release();
; 1818 : }

	ret	0
??$_Uninitialized_value_construct_n@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@IAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ENDP ; std::_Uninitialized_value_construct_n<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@IAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z
_TEXT	SEGMENT
__Al$dead$ = 8						; size = 4
??$_Uninitialized_value_construct_n@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@IAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z PROC ; std::_Uninitialized_value_construct_n<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >, COMDAT
; __First$ = ecx
; __Count$ = edx

; 1798 :     _Alloc_ptr_t<_Alloc> _First, _Alloc_size_t<_Alloc> _Count, _Alloc& _Al) {

	push	esi
	push	edi

; 1799 :     // value-initialize _Count objects to raw _First, using _Al
; 1800 :     using _Ptrty = typename _Alloc::value_type*;
; 1801 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 1802 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1803 :         if (!_STD is_constant_evaluated())
; 1804 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1805 :         {
; 1806 :             auto _PFirst = _Unfancy(_First);
; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	lea	esi, DWORD PTR [edx*4]
	mov	edi, ecx

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	push	esi
	push	0
	push	edi
	call	_memset
	add	esp, 12					; 0000000cH

; 1808 :             return _First + _Count;

	lea	eax, DWORD PTR [esi+edi]
	pop	edi
	pop	esi

; 1809 :         }
; 1810 :     }
; 1811 : 
; 1812 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};
; 1813 :     for (; 0 < _Count; --_Count) {
; 1814 :         _Backout._Emplace_back();
; 1815 :     }
; 1816 : 
; 1817 :     return _Backout._Release();
; 1818 : }

	ret	0
??$_Uninitialized_value_construct_n@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@IAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ENDP ; std::_Uninitialized_value_construct_n<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@IAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z
_TEXT	SEGMENT
__Al$dead$ = 8						; size = 4
??$_Uninitialized_value_construct_n@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@IAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z PROC ; std::_Uninitialized_value_construct_n<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >, COMDAT
; __First$ = ecx
; __Count$ = edx

; 1798 :     _Alloc_ptr_t<_Alloc> _First, _Alloc_size_t<_Alloc> _Count, _Alloc& _Al) {

	push	esi
	push	edi

; 1799 :     // value-initialize _Count objects to raw _First, using _Al
; 1800 :     using _Ptrty = typename _Alloc::value_type*;
; 1801 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 1802 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1803 :         if (!_STD is_constant_evaluated())
; 1804 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1805 :         {
; 1806 :             auto _PFirst = _Unfancy(_First);
; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	lea	esi, DWORD PTR [edx*4]
	mov	edi, ecx

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	push	esi
	push	0
	push	edi
	call	_memset
	add	esp, 12					; 0000000cH

; 1808 :             return _First + _Count;

	lea	eax, DWORD PTR [esi+edi]
	pop	edi
	pop	esi

; 1809 :         }
; 1810 :     }
; 1811 : 
; 1812 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};
; 1813 :     for (; 0 < _Count; --_Count) {
; 1814 :         _Backout._Emplace_back();
; 1815 :     }
; 1816 : 
; 1817 :     return _Backout._Release();
; 1818 : }

	ret	0
??$_Uninitialized_value_construct_n@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@IAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ENDP ; std::_Uninitialized_value_construct_n<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@IAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z
_TEXT	SEGMENT
__Al$dead$ = 8						; size = 4
??$_Uninitialized_value_construct_n@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@IAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z PROC ; std::_Uninitialized_value_construct_n<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >, COMDAT
; __First$ = ecx
; __Count$ = edx

; 1798 :     _Alloc_ptr_t<_Alloc> _First, _Alloc_size_t<_Alloc> _Count, _Alloc& _Al) {

	push	esi
	push	edi

; 1799 :     // value-initialize _Count objects to raw _First, using _Al
; 1800 :     using _Ptrty = typename _Alloc::value_type*;
; 1801 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 1802 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1803 :         if (!_STD is_constant_evaluated())
; 1804 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1805 :         {
; 1806 :             auto _PFirst = _Unfancy(_First);
; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	lea	esi, DWORD PTR [edx*4]
	mov	edi, ecx

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	push	esi
	push	0
	push	edi
	call	_memset
	add	esp, 12					; 0000000cH

; 1808 :             return _First + _Count;

	lea	eax, DWORD PTR [esi+edi]
	pop	edi
	pop	esi

; 1809 :         }
; 1810 :     }
; 1811 : 
; 1812 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};
; 1813 :     for (; 0 < _Count; --_Count) {
; 1814 :         _Backout._Emplace_back();
; 1815 :     }
; 1816 : 
; 1817 :     return _Backout._Release();
; 1818 : }

	ret	0
??$_Uninitialized_value_construct_n@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@IAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ENDP ; std::_Uninitialized_value_construct_n<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0PAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Al$dead$ = 12						; size = 4
??$_Uninitialized_move@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0PAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z PROC ; std::_Uninitialized_move<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	eax, DWORD PTR __Dest$[esp-4]

; 1699 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

	push	esi
	mov	esi, edx

; 1700 :     // move [_First, _Last) to raw _Dest, using _Al
; 1701 :     // note: only called internally from elsewhere in the STL
; 1702 :     using _Ptrval     = typename _Alloc::value_type*;
; 1703 :     auto _UFirst      = _Get_unwrapped(_First);
; 1704 :     const auto _ULast = _Get_unwrapped(_Last);
; 1705 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1706 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1707 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1708 :         if (!_STD is_constant_evaluated())
; 1709 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1710 :         {
; 1711 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1712 :             return _Dest + (_ULast - _UFirst);
; 1713 :         }
; 1714 :     }
; 1715 : 
; 1716 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	cmp	ecx, esi
	je	SHORT $LN3@Uninitiali
	npad	5
$LL4@Uninitiali:

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	edx, DWORD PTR [ecx]

; 1621 :         ++_Last;

	add	ecx, 4
	mov	DWORD PTR [eax], edx
	add	eax, 4

; 1700 :     // move [_First, _Last) to raw _Dest, using _Al
; 1701 :     // note: only called internally from elsewhere in the STL
; 1702 :     using _Ptrval     = typename _Alloc::value_type*;
; 1703 :     auto _UFirst      = _Get_unwrapped(_First);
; 1704 :     const auto _ULast = _Get_unwrapped(_Last);
; 1705 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1706 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1707 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1708 :         if (!_STD is_constant_evaluated())
; 1709 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1710 :         {
; 1711 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1712 :             return _Dest + (_ULast - _UFirst);
; 1713 :         }
; 1714 :     }
; 1715 : 
; 1716 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	cmp	ecx, esi
	jne	SHORT $LL4@Uninitiali
$LN3@Uninitiali:
	pop	esi

; 1718 :         _Backout._Emplace_back(_STD move(*_UFirst));
; 1719 :     }
; 1720 : 
; 1721 :     return _Backout._Release();
; 1722 : }

	ret	0
??$_Uninitialized_move@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0PAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ENDP ; std::_Uninitialized_move<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Get_unwrapped@ABQAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_TABQAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
??$_Get_unwrapped@ABQAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_TABQAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; std::_Get_unwrapped<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * * const &>, COMDAT
; __It$ = ecx

; 1275 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1276 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1277 :         return _It + 0;

	mov	eax, DWORD PTR [ecx]

; 1278 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1279 :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 1280 :     } else {
; 1281 :         return static_cast<_Iter&&>(_It);
; 1282 :     }
; 1283 : }

	ret	0
??$_Get_unwrapped@ABQAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_TABQAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; std::_Get_unwrapped<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * * const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@IAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z
_TEXT	SEGMENT
__Al$dead$ = 8						; size = 4
??$_Uninitialized_value_construct_n@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@IAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z PROC ; std::_Uninitialized_value_construct_n<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >, COMDAT
; __First$ = ecx
; __Count$ = edx

; 1798 :     _Alloc_ptr_t<_Alloc> _First, _Alloc_size_t<_Alloc> _Count, _Alloc& _Al) {

	push	esi
	push	edi

; 1799 :     // value-initialize _Count objects to raw _First, using _Al
; 1800 :     using _Ptrty = typename _Alloc::value_type*;
; 1801 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 1802 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1803 :         if (!_STD is_constant_evaluated())
; 1804 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1805 :         {
; 1806 :             auto _PFirst = _Unfancy(_First);
; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	lea	esi, DWORD PTR [edx*4]
	mov	edi, ecx

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	push	esi
	push	0
	push	edi
	call	_memset
	add	esp, 12					; 0000000cH

; 1808 :             return _First + _Count;

	lea	eax, DWORD PTR [esi+edi]
	pop	edi
	pop	esi

; 1809 :         }
; 1810 :     }
; 1811 : 
; 1812 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};
; 1813 :     for (; 0 < _Count; --_Count) {
; 1814 :         _Backout._Emplace_back();
; 1815 :     }
; 1816 : 
; 1817 :     return _Backout._Release();
; 1818 : }

	ret	0
??$_Uninitialized_value_construct_n@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@IAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ENDP ; std::_Uninitialized_value_construct_n<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@IAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z
_TEXT	SEGMENT
__Al$dead$ = 8						; size = 4
??$_Uninitialized_value_construct_n@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@IAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z PROC ; std::_Uninitialized_value_construct_n<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >, COMDAT
; __First$ = ecx
; __Count$ = edx

; 1798 :     _Alloc_ptr_t<_Alloc> _First, _Alloc_size_t<_Alloc> _Count, _Alloc& _Al) {

	push	esi
	push	edi

; 1799 :     // value-initialize _Count objects to raw _First, using _Al
; 1800 :     using _Ptrty = typename _Alloc::value_type*;
; 1801 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 1802 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1803 :         if (!_STD is_constant_evaluated())
; 1804 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1805 :         {
; 1806 :             auto _PFirst = _Unfancy(_First);
; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	lea	esi, DWORD PTR [edx*4]
	mov	edi, ecx

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	push	esi
	push	0
	push	edi
	call	_memset
	add	esp, 12					; 0000000cH

; 1808 :             return _First + _Count;

	lea	eax, DWORD PTR [esi+edi]
	pop	edi
	pop	esi

; 1809 :         }
; 1810 :     }
; 1811 : 
; 1812 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};
; 1813 :     for (; 0 < _Count; --_Count) {
; 1814 :         _Backout._Emplace_back();
; 1815 :     }
; 1816 : 
; 1817 :     return _Backout._Release();
; 1818 : }

	ret	0
??$_Uninitialized_value_construct_n@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@IAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ENDP ; std::_Uninitialized_value_construct_n<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@IAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z
_TEXT	SEGMENT
__Al$dead$ = 8						; size = 4
??$_Uninitialized_value_construct_n@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@IAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z PROC ; std::_Uninitialized_value_construct_n<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >, COMDAT
; __First$ = ecx
; __Count$ = edx

; 1798 :     _Alloc_ptr_t<_Alloc> _First, _Alloc_size_t<_Alloc> _Count, _Alloc& _Al) {

	push	esi
	push	edi

; 1799 :     // value-initialize _Count objects to raw _First, using _Al
; 1800 :     using _Ptrty = typename _Alloc::value_type*;
; 1801 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 1802 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1803 :         if (!_STD is_constant_evaluated())
; 1804 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1805 :         {
; 1806 :             auto _PFirst = _Unfancy(_First);
; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	lea	esi, DWORD PTR [edx*4]
	mov	edi, ecx

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	push	esi
	push	0
	push	edi
	call	_memset
	add	esp, 12					; 0000000cH

; 1808 :             return _First + _Count;

	lea	eax, DWORD PTR [esi+edi]
	pop	edi
	pop	esi

; 1809 :         }
; 1810 :     }
; 1811 : 
; 1812 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};
; 1813 :     for (; 0 < _Count; --_Count) {
; 1814 :         _Backout._Emplace_back();
; 1815 :     }
; 1816 : 
; 1817 :     return _Backout._Release();
; 1818 : }

	ret	0
??$_Uninitialized_value_construct_n@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@IAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ENDP ; std::_Uninitialized_value_construct_n<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@IAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z
_TEXT	SEGMENT
__Al$dead$ = 8						; size = 4
??$_Uninitialized_value_construct_n@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@IAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z PROC ; std::_Uninitialized_value_construct_n<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >, COMDAT
; __First$ = ecx
; __Count$ = edx

; 1798 :     _Alloc_ptr_t<_Alloc> _First, _Alloc_size_t<_Alloc> _Count, _Alloc& _Al) {

	push	esi
	push	edi

; 1799 :     // value-initialize _Count objects to raw _First, using _Al
; 1800 :     using _Ptrty = typename _Alloc::value_type*;
; 1801 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 1802 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1803 :         if (!_STD is_constant_evaluated())
; 1804 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1805 :         {
; 1806 :             auto _PFirst = _Unfancy(_First);
; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	lea	esi, DWORD PTR [edx*4]
	mov	edi, ecx

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	push	esi
	push	0
	push	edi
	call	_memset
	add	esp, 12					; 0000000cH

; 1808 :             return _First + _Count;

	lea	eax, DWORD PTR [esi+edi]
	pop	edi
	pop	esi

; 1809 :         }
; 1810 :     }
; 1811 : 
; 1812 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};
; 1813 :     for (; 0 < _Count; --_Count) {
; 1814 :         _Backout._Emplace_back();
; 1815 :     }
; 1816 : 
; 1817 :     return _Backout._Release();
; 1818 : }

	ret	0
??$_Uninitialized_value_construct_n@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@IAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ENDP ; std::_Uninitialized_value_construct_n<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@IAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z
_TEXT	SEGMENT
__Al$dead$ = 8						; size = 4
??$_Uninitialized_value_construct_n@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@IAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z PROC ; std::_Uninitialized_value_construct_n<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >, COMDAT
; __First$ = ecx
; __Count$ = edx

; 1798 :     _Alloc_ptr_t<_Alloc> _First, _Alloc_size_t<_Alloc> _Count, _Alloc& _Al) {

	push	esi
	push	edi

; 1799 :     // value-initialize _Count objects to raw _First, using _Al
; 1800 :     using _Ptrty = typename _Alloc::value_type*;
; 1801 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 1802 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1803 :         if (!_STD is_constant_evaluated())
; 1804 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1805 :         {
; 1806 :             auto _PFirst = _Unfancy(_First);
; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

	lea	esi, DWORD PTR [edx*4]
	mov	edi, ecx

; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	push	esi
	push	0
	push	edi
	call	_memset
	add	esp, 12					; 0000000cH

; 1808 :             return _First + _Count;

	lea	eax, DWORD PTR [esi+edi]
	pop	edi
	pop	esi

; 1809 :         }
; 1810 :     }
; 1811 : 
; 1812 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};
; 1813 :     for (; 0 < _Count; --_Count) {
; 1814 :         _Backout._Emplace_back();
; 1815 :     }
; 1816 : 
; 1817 :     return _Backout._Release();
; 1818 : }

	ret	0
??$_Uninitialized_value_construct_n@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@IAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ENDP ; std::_Uninitialized_value_construct_n<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@XZ
_TEXT	SEGMENT
?_Release@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@XZ PROC ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::_Release, COMDAT
; _this$ = ecx

; 1625 :         _First = _Last;

	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [ecx], eax

; 1626 :         return _Last;
; 1627 :     }

	ret	0
?_Release@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@XZ ENDP ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::_Release
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@XZ PROC ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::~_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >, COMDAT
; _this$ = ecx

; 1615 :         _Destroy_range(_First, _Last, _Al);
; 1616 :     }

	ret	0
??1?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@XZ ENDP ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::~_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Al_$ = 12						; size = 4
??0?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z PROC ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >, COMDAT
; _this$ = ecx

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	eax, DWORD PTR __Dest$[esp-4]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR __Al_$[esp-4]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, ecx
	ret	8
??0?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ENDP ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@XZ
_TEXT	SEGMENT
?_Release@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@XZ PROC ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::_Release, COMDAT
; _this$ = ecx

; 1625 :         _First = _Last;

	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [ecx], eax

; 1626 :         return _Last;
; 1627 :     }

	ret	0
?_Release@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@XZ ENDP ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::_Release
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@XZ PROC ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::~_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >, COMDAT
; _this$ = ecx

; 1615 :         _Destroy_range(_First, _Last, _Al);
; 1616 :     }

	ret	0
??1?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@XZ ENDP ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::~_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Al_$ = 12						; size = 4
??0?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z PROC ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >, COMDAT
; _this$ = ecx

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	eax, DWORD PTR __Dest$[esp-4]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR __Al_$[esp-4]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, ecx
	ret	8
??0?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ENDP ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@XZ
_TEXT	SEGMENT
?_Release@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@XZ PROC ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::_Release, COMDAT
; _this$ = ecx

; 1625 :         _First = _Last;

	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [ecx], eax

; 1626 :         return _Last;
; 1627 :     }

	ret	0
?_Release@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@XZ ENDP ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::_Release
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@XZ PROC ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::~_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >, COMDAT
; _this$ = ecx

; 1615 :         _Destroy_range(_First, _Last, _Al);
; 1616 :     }

	ret	0
??1?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@XZ ENDP ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::~_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Al_$ = 12						; size = 4
??0?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z PROC ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >, COMDAT
; _this$ = ecx

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	eax, DWORD PTR __Dest$[esp-4]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR __Al_$[esp-4]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, ecx
	ret	8
??0?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ENDP ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@XZ
_TEXT	SEGMENT
?_Release@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@XZ PROC ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::_Release, COMDAT
; _this$ = ecx

; 1625 :         _First = _Last;

	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [ecx], eax

; 1626 :         return _Last;
; 1627 :     }

	ret	0
?_Release@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@XZ ENDP ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::_Release
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@XZ PROC ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::~_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >, COMDAT
; _this$ = ecx

; 1615 :         _Destroy_range(_First, _Last, _Al);
; 1616 :     }

	ret	0
??1?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@XZ ENDP ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::~_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Al_$ = 12						; size = 4
??0?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z PROC ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >, COMDAT
; _this$ = ecx

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	eax, DWORD PTR __Dest$[esp-4]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR __Al_$[esp-4]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, ecx
	ret	8
??0?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ENDP ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@XZ
_TEXT	SEGMENT
?_Release@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@XZ PROC ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Release, COMDAT
; _this$ = ecx

; 1625 :         _First = _Last;

	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [ecx], eax

; 1626 :         return _Last;
; 1627 :     }

	ret	0
?_Release@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@XZ ENDP ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Release
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@XZ PROC ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::~_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >, COMDAT
; _this$ = ecx

; 1615 :         _Destroy_range(_First, _Last, _Al);
; 1616 :     }

	ret	0
??1?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@XZ ENDP ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::~_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Al_$ = 12						; size = 4
??0?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z PROC ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >, COMDAT
; _this$ = ecx

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	eax, DWORD PTR __Dest$[esp-4]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR __Al_$[esp-4]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, ecx
	ret	8
??0?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ENDP ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@XZ
_TEXT	SEGMENT
?_Release@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@XZ PROC ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::_Release, COMDAT
; _this$ = ecx

; 1625 :         _First = _Last;

	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [ecx], eax

; 1626 :         return _Last;
; 1627 :     }

	ret	0
?_Release@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@XZ ENDP ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::_Release
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@XZ PROC ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::~_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >, COMDAT
; _this$ = ecx

; 1615 :         _Destroy_range(_First, _Last, _Al);
; 1616 :     }

	ret	0
??1?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@XZ ENDP ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::~_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Al_$ = 12						; size = 4
??0?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z PROC ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >, COMDAT
; _this$ = ecx

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	eax, DWORD PTR __Dest$[esp-4]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR __Al_$[esp-4]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, ecx
	ret	8
??0?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ENDP ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@XZ
_TEXT	SEGMENT
?_Release@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@XZ PROC ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::_Release, COMDAT
; _this$ = ecx

; 1625 :         _First = _Last;

	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [ecx], eax

; 1626 :         return _Last;
; 1627 :     }

	ret	0
?_Release@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@XZ ENDP ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::_Release
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@XZ PROC ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::~_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >, COMDAT
; _this$ = ecx

; 1615 :         _Destroy_range(_First, _Last, _Al);
; 1616 :     }

	ret	0
??1?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@XZ ENDP ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::~_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Al_$ = 12						; size = 4
??0?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z PROC ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >, COMDAT
; _this$ = ecx

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	eax, DWORD PTR __Dest$[esp-4]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR __Al_$[esp-4]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, ecx
	ret	8
??0?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ENDP ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@XZ
_TEXT	SEGMENT
?_Release@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@XZ PROC ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::_Release, COMDAT
; _this$ = ecx

; 1625 :         _First = _Last;

	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [ecx], eax

; 1626 :         return _Last;
; 1627 :     }

	ret	0
?_Release@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@XZ ENDP ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::_Release
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@XZ PROC ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::~_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >, COMDAT
; _this$ = ecx

; 1615 :         _Destroy_range(_First, _Last, _Al);
; 1616 :     }

	ret	0
??1?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@XZ ENDP ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::~_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Al_$ = 12						; size = 4
??0?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z PROC ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >, COMDAT
; _this$ = ecx

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	eax, DWORD PTR __Dest$[esp-4]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR __Al_$[esp-4]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, ecx
	ret	8
??0?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ENDP ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@XZ
_TEXT	SEGMENT
?_Release@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@XZ PROC ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::_Release, COMDAT
; _this$ = ecx

; 1625 :         _First = _Last;

	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [ecx], eax

; 1626 :         return _Last;
; 1627 :     }

	ret	0
?_Release@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@XZ ENDP ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::_Release
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@XZ PROC ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::~_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >, COMDAT
; _this$ = ecx

; 1615 :         _Destroy_range(_First, _Last, _Al);
; 1616 :     }

	ret	0
??1?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@XZ ENDP ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::~_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Al_$ = 12						; size = 4
??0?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z PROC ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >, COMDAT
; _this$ = ecx

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	eax, DWORD PTR __Dest$[esp-4]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR __Al_$[esp-4]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, ecx
	ret	8
??0?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ENDP ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@XZ
_TEXT	SEGMENT
?_Release@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@XZ PROC ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Release, COMDAT
; _this$ = ecx

; 1625 :         _First = _Last;

	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [ecx], eax

; 1626 :         return _Last;
; 1627 :     }

	ret	0
?_Release@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@XZ ENDP ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Release
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@XZ PROC ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::~_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >, COMDAT
; _this$ = ecx

; 1615 :         _Destroy_range(_First, _Last, _Al);
; 1616 :     }

	ret	0
??1?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@XZ ENDP ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::~_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Al_$ = 12						; size = 4
??0?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z PROC ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >, COMDAT
; _this$ = ecx

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	eax, DWORD PTR __Dest$[esp-4]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR __Al_$[esp-4]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, ecx
	ret	8
??0?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAE@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ENDP ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAEPAPAVIRender_Visual@@XZ
_TEXT	SEGMENT
?_Release@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAEPAPAVIRender_Visual@@XZ PROC ; std::_Uninitialized_backout_al<doug_lea_alloc<IRender_Visual *> >::_Release, COMDAT
; _this$ = ecx

; 1625 :         _First = _Last;

	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [ecx], eax

; 1626 :         return _Last;
; 1627 :     }

	ret	0
?_Release@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAEPAPAVIRender_Visual@@XZ ENDP ; std::_Uninitialized_backout_al<doug_lea_alloc<IRender_Visual *> >::_Release
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAE@XZ PROC ; std::_Uninitialized_backout_al<doug_lea_alloc<IRender_Visual *> >::~_Uninitialized_backout_al<doug_lea_alloc<IRender_Visual *> >, COMDAT
; _this$ = ecx

; 1615 :         _Destroy_range(_First, _Last, _Al);
; 1616 :     }

	ret	0
??1?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAE@XZ ENDP ; std::_Uninitialized_backout_al<doug_lea_alloc<IRender_Visual *> >::~_Uninitialized_backout_al<doug_lea_alloc<IRender_Visual *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAE@PAPAVIRender_Visual@@AAV?$doug_lea_alloc@PAVIRender_Visual@@@@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Al_$ = 12						; size = 4
??0?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAE@PAPAVIRender_Visual@@AAV?$doug_lea_alloc@PAVIRender_Visual@@@@@Z PROC ; std::_Uninitialized_backout_al<doug_lea_alloc<IRender_Visual *> >::_Uninitialized_backout_al<doug_lea_alloc<IRender_Visual *> >, COMDAT
; _this$ = ecx

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	eax, DWORD PTR __Dest$[esp-4]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR __Al_$[esp-4]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, ecx
	ret	8
??0?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAE@PAPAVIRender_Visual@@AAV?$doug_lea_alloc@PAVIRender_Visual@@@@@Z ENDP ; std::_Uninitialized_backout_al<doug_lea_alloc<IRender_Visual *> >::_Uninitialized_backout_al<doug_lea_alloc<IRender_Visual *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??R?$less@PAVCTexture@@@std@@QBE_NABQAVCTexture@@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??R?$less@PAVCTexture@@@std@@QBE_NABQAVCTexture@@0@Z PROC ; std::less<CTexture *>::operator(), COMDAT
; _this$dead$ = ecx

; 117  :         return _Left < _Right;

	mov	eax, DWORD PTR __Left$[esp-4]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR __Right$[esp-4]
	cmp	ecx, DWORD PTR [eax]
	setb	al

; 118  :     }

	ret	8
??R?$less@PAVCTexture@@@std@@QBE_NABQAVCTexture@@0@Z ENDP ; std::less<CTexture *>::operator()
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@std@@@std@@@std@@QBEPAU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@2@XZ
_TEXT	SEGMENT
?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@std@@@std@@@std@@QBEPAU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@2@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<unsigned int,resptr_core<CTexture,resptrcode_texture> > > > >::_Unwrapped, COMDAT
; _this$ = ecx

; 328  :         return _Unfancy(this->_Ptr);

	mov	eax, DWORD PTR [ecx]

; 329  :     }

	ret	0
?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@std@@@std@@@std@@QBEPAU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@2@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<unsigned int,resptr_core<CTexture,resptrcode_texture> > > > >::_Unwrapped
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Xlength@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@CAXXZ PROC ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::_Xlength, COMDAT

; 1761 :         _Xlength_error("vector too long");

	push	OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN3@Xlength:
	int	3
?_Xlength@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@CAXXZ ENDP ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Change_array@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXQAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@II@Z
_TEXT	SEGMENT
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXQAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@II@Z PROC ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::_Change_array, COMDAT
; _this$ = ecx

; 1723 :         const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

	push	esi
	mov	esi, ecx

; 1724 :         // orphan all iterators, discard old array, acquire new array
; 1725 :         auto& _My_data    = _Mypair._Myval2;
; 1726 :         pointer& _Myfirst = _My_data._Myfirst;
; 1727 :         pointer& _Mylast  = _My_data._Mylast;
; 1728 :         pointer& _Myend   = _My_data._Myend;
; 1729 : 
; 1730 :         _My_data._Orphan_all();
; 1731 : 
; 1732 :         if (_Myfirst) { // destroy and deallocate old array

	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN2@Change_arr
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h

; 35   : 								void					deallocate		(pointer p, size_type n) const			{	dlfree	(p);				}

	call	_dlfree
$LN2@Change_arr:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1737 :         _Myfirst = _Newvec;

	mov	ecx, DWORD PTR __Newvec$[esp]

; 1738 :         _Mylast  = _Newvec + _Newsize;

	mov	eax, DWORD PTR __Newsize$[esp]
	mov	DWORD PTR [esi], ecx
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [esi+4], eax

; 1739 :         _Myend   = _Newvec + _Newcapacity;

	mov	eax, DWORD PTR __Newcapacity$[esp]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [esi+8], eax
	pop	esi

; 1740 :     }

	ret	12					; 0000000cH
?_Change_array@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXQAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@II@Z ENDP ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Calculate_growth@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEII@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Calculate_growth@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEII@Z PROC ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	edx, DWORD PTR [ecx+8]
	sub	edx, DWORD PTR [ecx]

; 1671 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1672 :         const size_type _Oldcapacity = capacity();
; 1673 :         const auto _Max              = max_size();
; 1674 : 
; 1675 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	mov	ecx, 1073741823				; 3fffffffH

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	sar	edx, 2

; 1670 :     _CONSTEXPR20_CONTAINER size_type _Calculate_growth(const size_type _Newsize) const {

	push	esi

; 1671 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1672 :         const size_type _Oldcapacity = capacity();
; 1673 :         const auto _Max              = max_size();
; 1674 : 
; 1675 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	mov	esi, edx
	shr	esi, 1
	sub	ecx, esi
	cmp	edx, ecx
	jbe	SHORT $LN2@Calculate_

; 1676 :             return _Max; // geometric growth would overflow

	mov	eax, 1073741823				; 3fffffffH
	pop	esi

; 1682 :             return _Newsize; // geometric growth would be insufficient
; 1683 :         }
; 1684 : 
; 1685 :         return _Geometric; // geometric growth is sufficient
; 1686 :     }

	ret	4
$LN2@Calculate_:

; 1677 :         }
; 1678 : 
; 1679 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	lea	eax, DWORD PTR [esi+edx]

; 1680 : 
; 1681 :         if (_Geometric < _Newsize) {

	cmp	eax, DWORD PTR __Newsize$[esp]
	pop	esi
	cmovb	eax, DWORD PTR __Newsize$[esp-4]

; 1682 :             return _Newsize; // geometric growth would be insufficient
; 1683 :         }
; 1684 : 
; 1685 :         return _Geometric; // geometric growth is sufficient
; 1686 :     }

	ret	4
?_Calculate_growth@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEII@Z ENDP ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Umove_if_noexcept@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove_if_noexcept@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@00@Z PROC ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::_Umove_if_noexcept, COMDAT
; _this$dead$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1703 :     auto _UFirst      = _Get_unwrapped(_First);

	mov	eax, DWORD PTR __First$[esp-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1659 :     _CONSTEXPR20_CONTAINER void _Umove_if_noexcept(pointer _First, pointer _Last, pointer _Dest) {

	push	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	mov	esi, DWORD PTR __Last$[esp]
	cmp	eax, esi
	je	SHORT $LN7@Umove_if_n

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	edx, DWORD PTR __Dest$[esp]
	sub	edx, eax
$LL8@Umove_if_n:

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx+eax], ecx

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	add	eax, 4
	cmp	eax, esi
	jne	SHORT $LL8@Umove_if_n
$LN7@Umove_if_n:
	pop	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1663 :     }

	ret	12					; 0000000cH
?_Umove_if_noexcept@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@00@Z ENDP ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::_Umove_if_noexcept
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?max_size@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ PROC ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::max_size, COMDAT
; _this$dead$ = ecx

; 1540 :         return (_STD min)(

	mov	eax, 1073741823				; 3fffffffH

; 1541 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1542 :     }

	ret	0
?max_size@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ ENDP ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
;	COMDAT ?allocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@IPBX@Z
_TEXT	SEGMENT
_n$ = 8							; size = 4
_p$dead$ = 12						; size = 4
?allocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@IPBX@Z PROC ; doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *>::allocate, COMDAT
; _this$dead$ = ecx

; 33   : 								pointer					allocate		(size_type n, const void* p=0) const	{	return (T*)dlmalloc(sizeof(T)*(u32)n);	}

	mov	eax, DWORD PTR _n$[esp-4]
	lea	ecx, DWORD PTR [eax*4]
	call	_dlmalloc
	ret	8
?allocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@IPBX@Z ENDP ; doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Xlength@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@CAXXZ PROC ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::_Xlength, COMDAT

; 1761 :         _Xlength_error("vector too long");

	push	OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN3@Xlength:
	int	3
?_Xlength@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@CAXXZ ENDP ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Change_array@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXQAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@II@Z
_TEXT	SEGMENT
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXQAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@II@Z PROC ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::_Change_array, COMDAT
; _this$ = ecx

; 1723 :         const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

	push	esi
	mov	esi, ecx

; 1724 :         // orphan all iterators, discard old array, acquire new array
; 1725 :         auto& _My_data    = _Mypair._Myval2;
; 1726 :         pointer& _Myfirst = _My_data._Myfirst;
; 1727 :         pointer& _Mylast  = _My_data._Mylast;
; 1728 :         pointer& _Myend   = _My_data._Myend;
; 1729 : 
; 1730 :         _My_data._Orphan_all();
; 1731 : 
; 1732 :         if (_Myfirst) { // destroy and deallocate old array

	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN2@Change_arr
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h

; 35   : 								void					deallocate		(pointer p, size_type n) const			{	dlfree	(p);				}

	call	_dlfree
$LN2@Change_arr:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1737 :         _Myfirst = _Newvec;

	mov	ecx, DWORD PTR __Newvec$[esp]

; 1738 :         _Mylast  = _Newvec + _Newsize;

	mov	eax, DWORD PTR __Newsize$[esp]
	mov	DWORD PTR [esi], ecx
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [esi+4], eax

; 1739 :         _Myend   = _Newvec + _Newcapacity;

	mov	eax, DWORD PTR __Newcapacity$[esp]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [esi+8], eax
	pop	esi

; 1740 :     }

	ret	12					; 0000000cH
?_Change_array@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXQAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@II@Z ENDP ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Calculate_growth@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEII@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Calculate_growth@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEII@Z PROC ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	edx, DWORD PTR [ecx+8]
	sub	edx, DWORD PTR [ecx]

; 1671 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1672 :         const size_type _Oldcapacity = capacity();
; 1673 :         const auto _Max              = max_size();
; 1674 : 
; 1675 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	mov	ecx, 1073741823				; 3fffffffH

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	sar	edx, 2

; 1670 :     _CONSTEXPR20_CONTAINER size_type _Calculate_growth(const size_type _Newsize) const {

	push	esi

; 1671 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1672 :         const size_type _Oldcapacity = capacity();
; 1673 :         const auto _Max              = max_size();
; 1674 : 
; 1675 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	mov	esi, edx
	shr	esi, 1
	sub	ecx, esi
	cmp	edx, ecx
	jbe	SHORT $LN2@Calculate_

; 1676 :             return _Max; // geometric growth would overflow

	mov	eax, 1073741823				; 3fffffffH
	pop	esi

; 1682 :             return _Newsize; // geometric growth would be insufficient
; 1683 :         }
; 1684 : 
; 1685 :         return _Geometric; // geometric growth is sufficient
; 1686 :     }

	ret	4
$LN2@Calculate_:

; 1677 :         }
; 1678 : 
; 1679 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	lea	eax, DWORD PTR [esi+edx]

; 1680 : 
; 1681 :         if (_Geometric < _Newsize) {

	cmp	eax, DWORD PTR __Newsize$[esp]
	pop	esi
	cmovb	eax, DWORD PTR __Newsize$[esp-4]

; 1682 :             return _Newsize; // geometric growth would be insufficient
; 1683 :         }
; 1684 : 
; 1685 :         return _Geometric; // geometric growth is sufficient
; 1686 :     }

	ret	4
?_Calculate_growth@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEII@Z ENDP ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Umove_if_noexcept@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove_if_noexcept@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@00@Z PROC ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::_Umove_if_noexcept, COMDAT
; _this$dead$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1703 :     auto _UFirst      = _Get_unwrapped(_First);

	mov	eax, DWORD PTR __First$[esp-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1659 :     _CONSTEXPR20_CONTAINER void _Umove_if_noexcept(pointer _First, pointer _Last, pointer _Dest) {

	push	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	mov	esi, DWORD PTR __Last$[esp]
	cmp	eax, esi
	je	SHORT $LN7@Umove_if_n

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	edx, DWORD PTR __Dest$[esp]
	sub	edx, eax
$LL8@Umove_if_n:

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx+eax], ecx

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	add	eax, 4
	cmp	eax, esi
	jne	SHORT $LL8@Umove_if_n
$LN7@Umove_if_n:
	pop	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1663 :     }

	ret	12					; 0000000cH
?_Umove_if_noexcept@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@00@Z ENDP ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::_Umove_if_noexcept
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?max_size@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ PROC ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::max_size, COMDAT
; _this$dead$ = ecx

; 1540 :         return (_STD min)(

	mov	eax, 1073741823				; 3fffffffH

; 1541 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1542 :     }

	ret	0
?max_size@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ ENDP ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
;	COMDAT ?allocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@IPBX@Z
_TEXT	SEGMENT
_n$ = 8							; size = 4
_p$dead$ = 12						; size = 4
?allocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@IPBX@Z PROC ; doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *>::allocate, COMDAT
; _this$dead$ = ecx

; 33   : 								pointer					allocate		(size_type n, const void* p=0) const	{	return (T*)dlmalloc(sizeof(T)*(u32)n);	}

	mov	eax, DWORD PTR _n$[esp-4]
	lea	ecx, DWORD PTR [eax*4]
	call	_dlmalloc
	ret	8
?allocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@IPBX@Z ENDP ; doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Xlength@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@CAXXZ PROC ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::_Xlength, COMDAT

; 1761 :         _Xlength_error("vector too long");

	push	OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN3@Xlength:
	int	3
?_Xlength@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@CAXXZ ENDP ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Change_array@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXQAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@II@Z
_TEXT	SEGMENT
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXQAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@II@Z PROC ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::_Change_array, COMDAT
; _this$ = ecx

; 1723 :         const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

	push	esi
	mov	esi, ecx

; 1724 :         // orphan all iterators, discard old array, acquire new array
; 1725 :         auto& _My_data    = _Mypair._Myval2;
; 1726 :         pointer& _Myfirst = _My_data._Myfirst;
; 1727 :         pointer& _Mylast  = _My_data._Mylast;
; 1728 :         pointer& _Myend   = _My_data._Myend;
; 1729 : 
; 1730 :         _My_data._Orphan_all();
; 1731 : 
; 1732 :         if (_Myfirst) { // destroy and deallocate old array

	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN2@Change_arr
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h

; 35   : 								void					deallocate		(pointer p, size_type n) const			{	dlfree	(p);				}

	call	_dlfree
$LN2@Change_arr:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1737 :         _Myfirst = _Newvec;

	mov	ecx, DWORD PTR __Newvec$[esp]

; 1738 :         _Mylast  = _Newvec + _Newsize;

	mov	eax, DWORD PTR __Newsize$[esp]
	mov	DWORD PTR [esi], ecx
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [esi+4], eax

; 1739 :         _Myend   = _Newvec + _Newcapacity;

	mov	eax, DWORD PTR __Newcapacity$[esp]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [esi+8], eax
	pop	esi

; 1740 :     }

	ret	12					; 0000000cH
?_Change_array@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXQAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@II@Z ENDP ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Calculate_growth@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEII@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Calculate_growth@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEII@Z PROC ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	edx, DWORD PTR [ecx+8]
	sub	edx, DWORD PTR [ecx]

; 1671 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1672 :         const size_type _Oldcapacity = capacity();
; 1673 :         const auto _Max              = max_size();
; 1674 : 
; 1675 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	mov	ecx, 1073741823				; 3fffffffH

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	sar	edx, 2

; 1670 :     _CONSTEXPR20_CONTAINER size_type _Calculate_growth(const size_type _Newsize) const {

	push	esi

; 1671 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1672 :         const size_type _Oldcapacity = capacity();
; 1673 :         const auto _Max              = max_size();
; 1674 : 
; 1675 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	mov	esi, edx
	shr	esi, 1
	sub	ecx, esi
	cmp	edx, ecx
	jbe	SHORT $LN2@Calculate_

; 1676 :             return _Max; // geometric growth would overflow

	mov	eax, 1073741823				; 3fffffffH
	pop	esi

; 1682 :             return _Newsize; // geometric growth would be insufficient
; 1683 :         }
; 1684 : 
; 1685 :         return _Geometric; // geometric growth is sufficient
; 1686 :     }

	ret	4
$LN2@Calculate_:

; 1677 :         }
; 1678 : 
; 1679 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	lea	eax, DWORD PTR [esi+edx]

; 1680 : 
; 1681 :         if (_Geometric < _Newsize) {

	cmp	eax, DWORD PTR __Newsize$[esp]
	pop	esi
	cmovb	eax, DWORD PTR __Newsize$[esp-4]

; 1682 :             return _Newsize; // geometric growth would be insufficient
; 1683 :         }
; 1684 : 
; 1685 :         return _Geometric; // geometric growth is sufficient
; 1686 :     }

	ret	4
?_Calculate_growth@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEII@Z ENDP ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Umove_if_noexcept@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove_if_noexcept@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@00@Z PROC ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::_Umove_if_noexcept, COMDAT
; _this$dead$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1703 :     auto _UFirst      = _Get_unwrapped(_First);

	mov	eax, DWORD PTR __First$[esp-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1659 :     _CONSTEXPR20_CONTAINER void _Umove_if_noexcept(pointer _First, pointer _Last, pointer _Dest) {

	push	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	mov	esi, DWORD PTR __Last$[esp]
	cmp	eax, esi
	je	SHORT $LN7@Umove_if_n

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	edx, DWORD PTR __Dest$[esp]
	sub	edx, eax
$LL8@Umove_if_n:

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx+eax], ecx

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	add	eax, 4
	cmp	eax, esi
	jne	SHORT $LL8@Umove_if_n
$LN7@Umove_if_n:
	pop	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1663 :     }

	ret	12					; 0000000cH
?_Umove_if_noexcept@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@00@Z ENDP ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::_Umove_if_noexcept
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?max_size@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ PROC ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::max_size, COMDAT
; _this$dead$ = ecx

; 1540 :         return (_STD min)(

	mov	eax, 1073741823				; 3fffffffH

; 1541 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1542 :     }

	ret	0
?max_size@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ ENDP ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
;	COMDAT ?allocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@IPBX@Z
_TEXT	SEGMENT
_n$ = 8							; size = 4
_p$dead$ = 12						; size = 4
?allocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@IPBX@Z PROC ; doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *>::allocate, COMDAT
; _this$dead$ = ecx

; 33   : 								pointer					allocate		(size_type n, const void* p=0) const	{	return (T*)dlmalloc(sizeof(T)*(u32)n);	}

	mov	eax, DWORD PTR _n$[esp-4]
	lea	ecx, DWORD PTR [eax*4]
	call	_dlmalloc
	ret	8
?allocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@IPBX@Z ENDP ; doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Xlength@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@CAXXZ PROC ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::_Xlength, COMDAT

; 1761 :         _Xlength_error("vector too long");

	push	OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN3@Xlength:
	int	3
?_Xlength@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@CAXXZ ENDP ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Change_array@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXQAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@II@Z
_TEXT	SEGMENT
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXQAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@II@Z PROC ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::_Change_array, COMDAT
; _this$ = ecx

; 1723 :         const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

	push	esi
	mov	esi, ecx

; 1724 :         // orphan all iterators, discard old array, acquire new array
; 1725 :         auto& _My_data    = _Mypair._Myval2;
; 1726 :         pointer& _Myfirst = _My_data._Myfirst;
; 1727 :         pointer& _Mylast  = _My_data._Mylast;
; 1728 :         pointer& _Myend   = _My_data._Myend;
; 1729 : 
; 1730 :         _My_data._Orphan_all();
; 1731 : 
; 1732 :         if (_Myfirst) { // destroy and deallocate old array

	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN2@Change_arr
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h

; 35   : 								void					deallocate		(pointer p, size_type n) const			{	dlfree	(p);				}

	call	_dlfree
$LN2@Change_arr:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1737 :         _Myfirst = _Newvec;

	mov	ecx, DWORD PTR __Newvec$[esp]

; 1738 :         _Mylast  = _Newvec + _Newsize;

	mov	eax, DWORD PTR __Newsize$[esp]
	mov	DWORD PTR [esi], ecx
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [esi+4], eax

; 1739 :         _Myend   = _Newvec + _Newcapacity;

	mov	eax, DWORD PTR __Newcapacity$[esp]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [esi+8], eax
	pop	esi

; 1740 :     }

	ret	12					; 0000000cH
?_Change_array@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXQAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@II@Z ENDP ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Calculate_growth@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEII@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Calculate_growth@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEII@Z PROC ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	edx, DWORD PTR [ecx+8]
	sub	edx, DWORD PTR [ecx]

; 1671 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1672 :         const size_type _Oldcapacity = capacity();
; 1673 :         const auto _Max              = max_size();
; 1674 : 
; 1675 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	mov	ecx, 1073741823				; 3fffffffH

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	sar	edx, 2

; 1670 :     _CONSTEXPR20_CONTAINER size_type _Calculate_growth(const size_type _Newsize) const {

	push	esi

; 1671 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1672 :         const size_type _Oldcapacity = capacity();
; 1673 :         const auto _Max              = max_size();
; 1674 : 
; 1675 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	mov	esi, edx
	shr	esi, 1
	sub	ecx, esi
	cmp	edx, ecx
	jbe	SHORT $LN2@Calculate_

; 1676 :             return _Max; // geometric growth would overflow

	mov	eax, 1073741823				; 3fffffffH
	pop	esi

; 1682 :             return _Newsize; // geometric growth would be insufficient
; 1683 :         }
; 1684 : 
; 1685 :         return _Geometric; // geometric growth is sufficient
; 1686 :     }

	ret	4
$LN2@Calculate_:

; 1677 :         }
; 1678 : 
; 1679 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	lea	eax, DWORD PTR [esi+edx]

; 1680 : 
; 1681 :         if (_Geometric < _Newsize) {

	cmp	eax, DWORD PTR __Newsize$[esp]
	pop	esi
	cmovb	eax, DWORD PTR __Newsize$[esp-4]

; 1682 :             return _Newsize; // geometric growth would be insufficient
; 1683 :         }
; 1684 : 
; 1685 :         return _Geometric; // geometric growth is sufficient
; 1686 :     }

	ret	4
?_Calculate_growth@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEII@Z ENDP ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Umove_if_noexcept@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove_if_noexcept@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@00@Z PROC ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::_Umove_if_noexcept, COMDAT
; _this$dead$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1703 :     auto _UFirst      = _Get_unwrapped(_First);

	mov	eax, DWORD PTR __First$[esp-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1659 :     _CONSTEXPR20_CONTAINER void _Umove_if_noexcept(pointer _First, pointer _Last, pointer _Dest) {

	push	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	mov	esi, DWORD PTR __Last$[esp]
	cmp	eax, esi
	je	SHORT $LN7@Umove_if_n

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	edx, DWORD PTR __Dest$[esp]
	sub	edx, eax
$LL8@Umove_if_n:

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx+eax], ecx

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	add	eax, 4
	cmp	eax, esi
	jne	SHORT $LL8@Umove_if_n
$LN7@Umove_if_n:
	pop	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1663 :     }

	ret	12					; 0000000cH
?_Umove_if_noexcept@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@00@Z ENDP ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::_Umove_if_noexcept
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?max_size@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ PROC ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::max_size, COMDAT
; _this$dead$ = ecx

; 1540 :         return (_STD min)(

	mov	eax, 1073741823				; 3fffffffH

; 1541 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1542 :     }

	ret	0
?max_size@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ ENDP ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
;	COMDAT ?allocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@IPBX@Z
_TEXT	SEGMENT
_n$ = 8							; size = 4
_p$dead$ = 12						; size = 4
?allocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@IPBX@Z PROC ; doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *>::allocate, COMDAT
; _this$dead$ = ecx

; 33   : 								pointer					allocate		(size_type n, const void* p=0) const	{	return (T*)dlmalloc(sizeof(T)*(u32)n);	}

	mov	eax, DWORD PTR _n$[esp-4]
	lea	ecx, DWORD PTR [eax*4]
	call	_dlmalloc
	ret	8
?allocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@IPBX@Z ENDP ; doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Xlength@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@CAXXZ PROC ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::_Xlength, COMDAT

; 1761 :         _Xlength_error("vector too long");

	push	OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN3@Xlength:
	int	3
?_Xlength@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@CAXXZ ENDP ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Change_array@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXQAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@II@Z
_TEXT	SEGMENT
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXQAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@II@Z PROC ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::_Change_array, COMDAT
; _this$ = ecx

; 1723 :         const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

	push	esi
	mov	esi, ecx

; 1724 :         // orphan all iterators, discard old array, acquire new array
; 1725 :         auto& _My_data    = _Mypair._Myval2;
; 1726 :         pointer& _Myfirst = _My_data._Myfirst;
; 1727 :         pointer& _Mylast  = _My_data._Mylast;
; 1728 :         pointer& _Myend   = _My_data._Myend;
; 1729 : 
; 1730 :         _My_data._Orphan_all();
; 1731 : 
; 1732 :         if (_Myfirst) { // destroy and deallocate old array

	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN2@Change_arr
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h

; 35   : 								void					deallocate		(pointer p, size_type n) const			{	dlfree	(p);				}

	call	_dlfree
$LN2@Change_arr:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1737 :         _Myfirst = _Newvec;

	mov	ecx, DWORD PTR __Newvec$[esp]

; 1738 :         _Mylast  = _Newvec + _Newsize;

	mov	eax, DWORD PTR __Newsize$[esp]
	mov	DWORD PTR [esi], ecx
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [esi+4], eax

; 1739 :         _Myend   = _Newvec + _Newcapacity;

	mov	eax, DWORD PTR __Newcapacity$[esp]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [esi+8], eax
	pop	esi

; 1740 :     }

	ret	12					; 0000000cH
?_Change_array@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXQAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@II@Z ENDP ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Calculate_growth@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEII@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Calculate_growth@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEII@Z PROC ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	edx, DWORD PTR [ecx+8]
	sub	edx, DWORD PTR [ecx]

; 1671 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1672 :         const size_type _Oldcapacity = capacity();
; 1673 :         const auto _Max              = max_size();
; 1674 : 
; 1675 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	mov	ecx, 1073741823				; 3fffffffH

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	sar	edx, 2

; 1670 :     _CONSTEXPR20_CONTAINER size_type _Calculate_growth(const size_type _Newsize) const {

	push	esi

; 1671 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1672 :         const size_type _Oldcapacity = capacity();
; 1673 :         const auto _Max              = max_size();
; 1674 : 
; 1675 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	mov	esi, edx
	shr	esi, 1
	sub	ecx, esi
	cmp	edx, ecx
	jbe	SHORT $LN2@Calculate_

; 1676 :             return _Max; // geometric growth would overflow

	mov	eax, 1073741823				; 3fffffffH
	pop	esi

; 1682 :             return _Newsize; // geometric growth would be insufficient
; 1683 :         }
; 1684 : 
; 1685 :         return _Geometric; // geometric growth is sufficient
; 1686 :     }

	ret	4
$LN2@Calculate_:

; 1677 :         }
; 1678 : 
; 1679 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	lea	eax, DWORD PTR [esi+edx]

; 1680 : 
; 1681 :         if (_Geometric < _Newsize) {

	cmp	eax, DWORD PTR __Newsize$[esp]
	pop	esi
	cmovb	eax, DWORD PTR __Newsize$[esp-4]

; 1682 :             return _Newsize; // geometric growth would be insufficient
; 1683 :         }
; 1684 : 
; 1685 :         return _Geometric; // geometric growth is sufficient
; 1686 :     }

	ret	4
?_Calculate_growth@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEII@Z ENDP ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Umove_if_noexcept@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove_if_noexcept@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@00@Z PROC ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::_Umove_if_noexcept, COMDAT
; _this$dead$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1703 :     auto _UFirst      = _Get_unwrapped(_First);

	mov	eax, DWORD PTR __First$[esp-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1659 :     _CONSTEXPR20_CONTAINER void _Umove_if_noexcept(pointer _First, pointer _Last, pointer _Dest) {

	push	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	mov	esi, DWORD PTR __Last$[esp]
	cmp	eax, esi
	je	SHORT $LN7@Umove_if_n

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	edx, DWORD PTR __Dest$[esp]
	sub	edx, eax
$LL8@Umove_if_n:

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx+eax], ecx

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	add	eax, 4
	cmp	eax, esi
	jne	SHORT $LL8@Umove_if_n
$LN7@Umove_if_n:
	pop	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1663 :     }

	ret	12					; 0000000cH
?_Umove_if_noexcept@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@00@Z ENDP ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::_Umove_if_noexcept
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?max_size@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ PROC ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::max_size, COMDAT
; _this$dead$ = ecx

; 1540 :         return (_STD min)(

	mov	eax, 1073741823				; 3fffffffH

; 1541 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1542 :     }

	ret	0
?max_size@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ ENDP ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
;	COMDAT ?allocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@IPBX@Z
_TEXT	SEGMENT
_n$ = 8							; size = 4
_p$dead$ = 12						; size = 4
?allocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@IPBX@Z PROC ; doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *>::allocate, COMDAT
; _this$dead$ = ecx

; 33   : 								pointer					allocate		(size_type n, const void* p=0) const	{	return (T*)dlmalloc(sizeof(T)*(u32)n);	}

	mov	eax, DWORD PTR _n$[esp-4]
	lea	ecx, DWORD PTR [eax*4]
	call	_dlmalloc
	ret	8
?allocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@IPBX@Z ENDP ; doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Xlength@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@CAXXZ PROC ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::_Xlength, COMDAT

; 1761 :         _Xlength_error("vector too long");

	push	OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN3@Xlength:
	int	3
?_Xlength@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@CAXXZ ENDP ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Change_array@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXQAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@II@Z
_TEXT	SEGMENT
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXQAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@II@Z PROC ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::_Change_array, COMDAT
; _this$ = ecx

; 1723 :         const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

	push	esi
	mov	esi, ecx

; 1724 :         // orphan all iterators, discard old array, acquire new array
; 1725 :         auto& _My_data    = _Mypair._Myval2;
; 1726 :         pointer& _Myfirst = _My_data._Myfirst;
; 1727 :         pointer& _Mylast  = _My_data._Mylast;
; 1728 :         pointer& _Myend   = _My_data._Myend;
; 1729 : 
; 1730 :         _My_data._Orphan_all();
; 1731 : 
; 1732 :         if (_Myfirst) { // destroy and deallocate old array

	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN2@Change_arr
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h

; 35   : 								void					deallocate		(pointer p, size_type n) const			{	dlfree	(p);				}

	call	_dlfree
$LN2@Change_arr:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1737 :         _Myfirst = _Newvec;

	mov	ecx, DWORD PTR __Newvec$[esp]

; 1738 :         _Mylast  = _Newvec + _Newsize;

	mov	eax, DWORD PTR __Newsize$[esp]
	mov	DWORD PTR [esi], ecx
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [esi+4], eax

; 1739 :         _Myend   = _Newvec + _Newcapacity;

	mov	eax, DWORD PTR __Newcapacity$[esp]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [esi+8], eax
	pop	esi

; 1740 :     }

	ret	12					; 0000000cH
?_Change_array@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXQAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@II@Z ENDP ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Calculate_growth@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEII@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Calculate_growth@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEII@Z PROC ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	edx, DWORD PTR [ecx+8]
	sub	edx, DWORD PTR [ecx]

; 1671 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1672 :         const size_type _Oldcapacity = capacity();
; 1673 :         const auto _Max              = max_size();
; 1674 : 
; 1675 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	mov	ecx, 1073741823				; 3fffffffH

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	sar	edx, 2

; 1670 :     _CONSTEXPR20_CONTAINER size_type _Calculate_growth(const size_type _Newsize) const {

	push	esi

; 1671 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1672 :         const size_type _Oldcapacity = capacity();
; 1673 :         const auto _Max              = max_size();
; 1674 : 
; 1675 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	mov	esi, edx
	shr	esi, 1
	sub	ecx, esi
	cmp	edx, ecx
	jbe	SHORT $LN2@Calculate_

; 1676 :             return _Max; // geometric growth would overflow

	mov	eax, 1073741823				; 3fffffffH
	pop	esi

; 1682 :             return _Newsize; // geometric growth would be insufficient
; 1683 :         }
; 1684 : 
; 1685 :         return _Geometric; // geometric growth is sufficient
; 1686 :     }

	ret	4
$LN2@Calculate_:

; 1677 :         }
; 1678 : 
; 1679 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	lea	eax, DWORD PTR [esi+edx]

; 1680 : 
; 1681 :         if (_Geometric < _Newsize) {

	cmp	eax, DWORD PTR __Newsize$[esp]
	pop	esi
	cmovb	eax, DWORD PTR __Newsize$[esp-4]

; 1682 :             return _Newsize; // geometric growth would be insufficient
; 1683 :         }
; 1684 : 
; 1685 :         return _Geometric; // geometric growth is sufficient
; 1686 :     }

	ret	4
?_Calculate_growth@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEII@Z ENDP ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Umove_if_noexcept@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove_if_noexcept@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@00@Z PROC ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::_Umove_if_noexcept, COMDAT
; _this$dead$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1703 :     auto _UFirst      = _Get_unwrapped(_First);

	mov	eax, DWORD PTR __First$[esp-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1659 :     _CONSTEXPR20_CONTAINER void _Umove_if_noexcept(pointer _First, pointer _Last, pointer _Dest) {

	push	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	mov	esi, DWORD PTR __Last$[esp]
	cmp	eax, esi
	je	SHORT $LN7@Umove_if_n

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	edx, DWORD PTR __Dest$[esp]
	sub	edx, eax
$LL8@Umove_if_n:

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx+eax], ecx

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	add	eax, 4
	cmp	eax, esi
	jne	SHORT $LL8@Umove_if_n
$LN7@Umove_if_n:
	pop	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1663 :     }

	ret	12					; 0000000cH
?_Umove_if_noexcept@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@00@Z ENDP ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::_Umove_if_noexcept
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?max_size@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ PROC ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::max_size, COMDAT
; _this$dead$ = ecx

; 1540 :         return (_STD min)(

	mov	eax, 1073741823				; 3fffffffH

; 1541 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1542 :     }

	ret	0
?max_size@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ ENDP ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
;	COMDAT ?allocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@IPBX@Z
_TEXT	SEGMENT
_n$ = 8							; size = 4
_p$dead$ = 12						; size = 4
?allocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@IPBX@Z PROC ; doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *>::allocate, COMDAT
; _this$dead$ = ecx

; 33   : 								pointer					allocate		(size_type n, const void* p=0) const	{	return (T*)dlmalloc(sizeof(T)*(u32)n);	}

	mov	eax, DWORD PTR _n$[esp-4]
	lea	ecx, DWORD PTR [eax*4]
	call	_dlmalloc
	ret	8
?allocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@IPBX@Z ENDP ; doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Xlength@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@CAXXZ PROC ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::_Xlength, COMDAT

; 1761 :         _Xlength_error("vector too long");

	push	OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN3@Xlength:
	int	3
?_Xlength@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@CAXXZ ENDP ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Change_array@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXQAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@II@Z
_TEXT	SEGMENT
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXQAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@II@Z PROC ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::_Change_array, COMDAT
; _this$ = ecx

; 1723 :         const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

	push	esi
	mov	esi, ecx

; 1724 :         // orphan all iterators, discard old array, acquire new array
; 1725 :         auto& _My_data    = _Mypair._Myval2;
; 1726 :         pointer& _Myfirst = _My_data._Myfirst;
; 1727 :         pointer& _Mylast  = _My_data._Mylast;
; 1728 :         pointer& _Myend   = _My_data._Myend;
; 1729 : 
; 1730 :         _My_data._Orphan_all();
; 1731 : 
; 1732 :         if (_Myfirst) { // destroy and deallocate old array

	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN2@Change_arr
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h

; 35   : 								void					deallocate		(pointer p, size_type n) const			{	dlfree	(p);				}

	call	_dlfree
$LN2@Change_arr:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1737 :         _Myfirst = _Newvec;

	mov	ecx, DWORD PTR __Newvec$[esp]

; 1738 :         _Mylast  = _Newvec + _Newsize;

	mov	eax, DWORD PTR __Newsize$[esp]
	mov	DWORD PTR [esi], ecx
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [esi+4], eax

; 1739 :         _Myend   = _Newvec + _Newcapacity;

	mov	eax, DWORD PTR __Newcapacity$[esp]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [esi+8], eax
	pop	esi

; 1740 :     }

	ret	12					; 0000000cH
?_Change_array@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXQAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@II@Z ENDP ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Calculate_growth@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEII@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Calculate_growth@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEII@Z PROC ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	edx, DWORD PTR [ecx+8]
	sub	edx, DWORD PTR [ecx]

; 1671 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1672 :         const size_type _Oldcapacity = capacity();
; 1673 :         const auto _Max              = max_size();
; 1674 : 
; 1675 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	mov	ecx, 1073741823				; 3fffffffH

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	sar	edx, 2

; 1670 :     _CONSTEXPR20_CONTAINER size_type _Calculate_growth(const size_type _Newsize) const {

	push	esi

; 1671 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1672 :         const size_type _Oldcapacity = capacity();
; 1673 :         const auto _Max              = max_size();
; 1674 : 
; 1675 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	mov	esi, edx
	shr	esi, 1
	sub	ecx, esi
	cmp	edx, ecx
	jbe	SHORT $LN2@Calculate_

; 1676 :             return _Max; // geometric growth would overflow

	mov	eax, 1073741823				; 3fffffffH
	pop	esi

; 1682 :             return _Newsize; // geometric growth would be insufficient
; 1683 :         }
; 1684 : 
; 1685 :         return _Geometric; // geometric growth is sufficient
; 1686 :     }

	ret	4
$LN2@Calculate_:

; 1677 :         }
; 1678 : 
; 1679 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	lea	eax, DWORD PTR [esi+edx]

; 1680 : 
; 1681 :         if (_Geometric < _Newsize) {

	cmp	eax, DWORD PTR __Newsize$[esp]
	pop	esi
	cmovb	eax, DWORD PTR __Newsize$[esp-4]

; 1682 :             return _Newsize; // geometric growth would be insufficient
; 1683 :         }
; 1684 : 
; 1685 :         return _Geometric; // geometric growth is sufficient
; 1686 :     }

	ret	4
?_Calculate_growth@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEII@Z ENDP ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Umove_if_noexcept@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove_if_noexcept@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@00@Z PROC ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::_Umove_if_noexcept, COMDAT
; _this$dead$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1703 :     auto _UFirst      = _Get_unwrapped(_First);

	mov	eax, DWORD PTR __First$[esp-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1659 :     _CONSTEXPR20_CONTAINER void _Umove_if_noexcept(pointer _First, pointer _Last, pointer _Dest) {

	push	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	mov	esi, DWORD PTR __Last$[esp]
	cmp	eax, esi
	je	SHORT $LN7@Umove_if_n

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	edx, DWORD PTR __Dest$[esp]
	sub	edx, eax
$LL8@Umove_if_n:

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx+eax], ecx

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	add	eax, 4
	cmp	eax, esi
	jne	SHORT $LL8@Umove_if_n
$LN7@Umove_if_n:
	pop	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1663 :     }

	ret	12					; 0000000cH
?_Umove_if_noexcept@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@00@Z ENDP ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::_Umove_if_noexcept
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?max_size@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ PROC ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::max_size, COMDAT
; _this$dead$ = ecx

; 1540 :         return (_STD min)(

	mov	eax, 1073741823				; 3fffffffH

; 1541 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1542 :     }

	ret	0
?max_size@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ ENDP ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
;	COMDAT ?allocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@IPBX@Z
_TEXT	SEGMENT
_n$ = 8							; size = 4
_p$dead$ = 12						; size = 4
?allocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@IPBX@Z PROC ; doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *>::allocate, COMDAT
; _this$dead$ = ecx

; 33   : 								pointer					allocate		(size_type n, const void* p=0) const	{	return (T*)dlmalloc(sizeof(T)*(u32)n);	}

	mov	eax, DWORD PTR _n$[esp-4]
	lea	ecx, DWORD PTR [eax*4]
	call	_dlmalloc
	ret	8
?allocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@IPBX@Z ENDP ; doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Xlength@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@CAXXZ PROC ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::_Xlength, COMDAT

; 1761 :         _Xlength_error("vector too long");

	push	OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN3@Xlength:
	int	3
?_Xlength@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@CAXXZ ENDP ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Change_array@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXQAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@II@Z
_TEXT	SEGMENT
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXQAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@II@Z PROC ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::_Change_array, COMDAT
; _this$ = ecx

; 1723 :         const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

	push	esi
	mov	esi, ecx

; 1724 :         // orphan all iterators, discard old array, acquire new array
; 1725 :         auto& _My_data    = _Mypair._Myval2;
; 1726 :         pointer& _Myfirst = _My_data._Myfirst;
; 1727 :         pointer& _Mylast  = _My_data._Mylast;
; 1728 :         pointer& _Myend   = _My_data._Myend;
; 1729 : 
; 1730 :         _My_data._Orphan_all();
; 1731 : 
; 1732 :         if (_Myfirst) { // destroy and deallocate old array

	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN2@Change_arr
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h

; 35   : 								void					deallocate		(pointer p, size_type n) const			{	dlfree	(p);				}

	call	_dlfree
$LN2@Change_arr:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1737 :         _Myfirst = _Newvec;

	mov	ecx, DWORD PTR __Newvec$[esp]

; 1738 :         _Mylast  = _Newvec + _Newsize;

	mov	eax, DWORD PTR __Newsize$[esp]
	mov	DWORD PTR [esi], ecx
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [esi+4], eax

; 1739 :         _Myend   = _Newvec + _Newcapacity;

	mov	eax, DWORD PTR __Newcapacity$[esp]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [esi+8], eax
	pop	esi

; 1740 :     }

	ret	12					; 0000000cH
?_Change_array@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXQAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@II@Z ENDP ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Calculate_growth@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEII@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Calculate_growth@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEII@Z PROC ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	edx, DWORD PTR [ecx+8]
	sub	edx, DWORD PTR [ecx]

; 1671 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1672 :         const size_type _Oldcapacity = capacity();
; 1673 :         const auto _Max              = max_size();
; 1674 : 
; 1675 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	mov	ecx, 1073741823				; 3fffffffH

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	sar	edx, 2

; 1670 :     _CONSTEXPR20_CONTAINER size_type _Calculate_growth(const size_type _Newsize) const {

	push	esi

; 1671 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1672 :         const size_type _Oldcapacity = capacity();
; 1673 :         const auto _Max              = max_size();
; 1674 : 
; 1675 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	mov	esi, edx
	shr	esi, 1
	sub	ecx, esi
	cmp	edx, ecx
	jbe	SHORT $LN2@Calculate_

; 1676 :             return _Max; // geometric growth would overflow

	mov	eax, 1073741823				; 3fffffffH
	pop	esi

; 1682 :             return _Newsize; // geometric growth would be insufficient
; 1683 :         }
; 1684 : 
; 1685 :         return _Geometric; // geometric growth is sufficient
; 1686 :     }

	ret	4
$LN2@Calculate_:

; 1677 :         }
; 1678 : 
; 1679 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	lea	eax, DWORD PTR [esi+edx]

; 1680 : 
; 1681 :         if (_Geometric < _Newsize) {

	cmp	eax, DWORD PTR __Newsize$[esp]
	pop	esi
	cmovb	eax, DWORD PTR __Newsize$[esp-4]

; 1682 :             return _Newsize; // geometric growth would be insufficient
; 1683 :         }
; 1684 : 
; 1685 :         return _Geometric; // geometric growth is sufficient
; 1686 :     }

	ret	4
?_Calculate_growth@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEII@Z ENDP ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Umove_if_noexcept@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove_if_noexcept@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@00@Z PROC ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::_Umove_if_noexcept, COMDAT
; _this$dead$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1703 :     auto _UFirst      = _Get_unwrapped(_First);

	mov	eax, DWORD PTR __First$[esp-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1659 :     _CONSTEXPR20_CONTAINER void _Umove_if_noexcept(pointer _First, pointer _Last, pointer _Dest) {

	push	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	mov	esi, DWORD PTR __Last$[esp]
	cmp	eax, esi
	je	SHORT $LN7@Umove_if_n

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	edx, DWORD PTR __Dest$[esp]
	sub	edx, eax
$LL8@Umove_if_n:

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx+eax], ecx

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	add	eax, 4
	cmp	eax, esi
	jne	SHORT $LL8@Umove_if_n
$LN7@Umove_if_n:
	pop	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1663 :     }

	ret	12					; 0000000cH
?_Umove_if_noexcept@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@00@Z ENDP ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::_Umove_if_noexcept
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?max_size@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ PROC ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::max_size, COMDAT
; _this$dead$ = ecx

; 1540 :         return (_STD min)(

	mov	eax, 1073741823				; 3fffffffH

; 1541 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1542 :     }

	ret	0
?max_size@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ ENDP ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
;	COMDAT ?allocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@IPBX@Z
_TEXT	SEGMENT
_n$ = 8							; size = 4
_p$dead$ = 12						; size = 4
?allocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@IPBX@Z PROC ; doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *>::allocate, COMDAT
; _this$dead$ = ecx

; 33   : 								pointer					allocate		(size_type n, const void* p=0) const	{	return (T*)dlmalloc(sizeof(T)*(u32)n);	}

	mov	eax, DWORD PTR _n$[esp-4]
	lea	ecx, DWORD PTR [eax*4]
	call	_dlmalloc
	ret	8
?allocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@IPBX@Z ENDP ; doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Getal@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ
_TEXT	SEGMENT
?_Getal@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ PROC ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::_Getal, COMDAT
; _this$ = ecx

; 1809 :         return _Mypair._Get_first();

	mov	eax, ecx

; 1810 :     }

	ret	0
?_Getal@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ENDP ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Umove_if_noexcept1@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@00U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
?_Umove_if_noexcept1@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@00U?$integral_constant@_N$00@2@@Z PROC ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::_Umove_if_noexcept1, COMDAT
; _this$dead$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1703 :     auto _UFirst      = _Get_unwrapped(_First);

	mov	eax, DWORD PTR __First$[esp-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1649 :     _CONSTEXPR20_CONTAINER void _Umove_if_noexcept1(pointer _First, pointer _Last, pointer _Dest, true_type) {

	push	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	mov	esi, DWORD PTR __Last$[esp]
	cmp	eax, esi
	je	SHORT $LN5@Umove_if_n

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	edx, DWORD PTR __Dest$[esp]
	sub	edx, eax
$LL6@Umove_if_n:

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx+eax], ecx

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	add	eax, 4
	cmp	eax, esi
	jne	SHORT $LL6@Umove_if_n
$LN5@Umove_if_n:
	pop	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1652 :     }

	ret	16					; 00000010H
?_Umove_if_noexcept1@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@00U?$integral_constant@_N$00@2@@Z ENDP ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::_Umove_if_noexcept1
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?capacity@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ PROC ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::capacity, COMDAT
; _this$ = ecx

; 1545 :         auto& _My_data = _Mypair._Myval2;
; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2

; 1547 :     }

	ret	0
?capacity@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ ENDP ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?max_size@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAIABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z
_TEXT	SEGMENT
?max_size@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAIABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z PROC ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::max_size, COMDAT
; __Al$dead$ = ecx

; 591  :         if constexpr (_Has_max_size<_Alloc>::value) {
; 592  :             return _Al.max_size();

	mov	eax, 1073741823				; 3fffffffH

; 593  :         } else {
; 594  :             return (numeric_limits<size_type>::max)() / sizeof(value_type);
; 595  :         }
; 596  :     }

	ret	0
?max_size@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAIABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ENDP ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Getal@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ
_TEXT	SEGMENT
?_Getal@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ PROC ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::_Getal, COMDAT
; _this$ = ecx

; 1809 :         return _Mypair._Get_first();

	mov	eax, ecx

; 1810 :     }

	ret	0
?_Getal@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ENDP ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Umove_if_noexcept1@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@00U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
?_Umove_if_noexcept1@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@00U?$integral_constant@_N$00@2@@Z PROC ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::_Umove_if_noexcept1, COMDAT
; _this$dead$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1703 :     auto _UFirst      = _Get_unwrapped(_First);

	mov	eax, DWORD PTR __First$[esp-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1649 :     _CONSTEXPR20_CONTAINER void _Umove_if_noexcept1(pointer _First, pointer _Last, pointer _Dest, true_type) {

	push	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	mov	esi, DWORD PTR __Last$[esp]
	cmp	eax, esi
	je	SHORT $LN5@Umove_if_n

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	edx, DWORD PTR __Dest$[esp]
	sub	edx, eax
$LL6@Umove_if_n:

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx+eax], ecx

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	add	eax, 4
	cmp	eax, esi
	jne	SHORT $LL6@Umove_if_n
$LN5@Umove_if_n:
	pop	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1652 :     }

	ret	16					; 00000010H
?_Umove_if_noexcept1@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@00U?$integral_constant@_N$00@2@@Z ENDP ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::_Umove_if_noexcept1
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?capacity@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ PROC ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::capacity, COMDAT
; _this$ = ecx

; 1545 :         auto& _My_data = _Mypair._Myval2;
; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2

; 1547 :     }

	ret	0
?capacity@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ ENDP ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?max_size@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAIABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z
_TEXT	SEGMENT
?max_size@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAIABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z PROC ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::max_size, COMDAT
; __Al$dead$ = ecx

; 591  :         if constexpr (_Has_max_size<_Alloc>::value) {
; 592  :             return _Al.max_size();

	mov	eax, 1073741823				; 3fffffffH

; 593  :         } else {
; 594  :             return (numeric_limits<size_type>::max)() / sizeof(value_type);
; 595  :         }
; 596  :     }

	ret	0
?max_size@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAIABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ENDP ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Getal@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ
_TEXT	SEGMENT
?_Getal@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ PROC ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::_Getal, COMDAT
; _this$ = ecx

; 1809 :         return _Mypair._Get_first();

	mov	eax, ecx

; 1810 :     }

	ret	0
?_Getal@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ENDP ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Umove_if_noexcept1@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@00U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
?_Umove_if_noexcept1@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@00U?$integral_constant@_N$00@2@@Z PROC ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::_Umove_if_noexcept1, COMDAT
; _this$dead$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1703 :     auto _UFirst      = _Get_unwrapped(_First);

	mov	eax, DWORD PTR __First$[esp-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1649 :     _CONSTEXPR20_CONTAINER void _Umove_if_noexcept1(pointer _First, pointer _Last, pointer _Dest, true_type) {

	push	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	mov	esi, DWORD PTR __Last$[esp]
	cmp	eax, esi
	je	SHORT $LN5@Umove_if_n

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	edx, DWORD PTR __Dest$[esp]
	sub	edx, eax
$LL6@Umove_if_n:

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx+eax], ecx

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	add	eax, 4
	cmp	eax, esi
	jne	SHORT $LL6@Umove_if_n
$LN5@Umove_if_n:
	pop	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1652 :     }

	ret	16					; 00000010H
?_Umove_if_noexcept1@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@00U?$integral_constant@_N$00@2@@Z ENDP ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::_Umove_if_noexcept1
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?capacity@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ PROC ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::capacity, COMDAT
; _this$ = ecx

; 1545 :         auto& _My_data = _Mypair._Myval2;
; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2

; 1547 :     }

	ret	0
?capacity@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ ENDP ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?max_size@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAIABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z
_TEXT	SEGMENT
?max_size@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAIABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z PROC ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::max_size, COMDAT
; __Al$dead$ = ecx

; 591  :         if constexpr (_Has_max_size<_Alloc>::value) {
; 592  :             return _Al.max_size();

	mov	eax, 1073741823				; 3fffffffH

; 593  :         } else {
; 594  :             return (numeric_limits<size_type>::max)() / sizeof(value_type);
; 595  :         }
; 596  :     }

	ret	0
?max_size@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAIABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ENDP ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Getal@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ
_TEXT	SEGMENT
?_Getal@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ PROC ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::_Getal, COMDAT
; _this$ = ecx

; 1809 :         return _Mypair._Get_first();

	mov	eax, ecx

; 1810 :     }

	ret	0
?_Getal@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ENDP ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Umove_if_noexcept1@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@00U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
?_Umove_if_noexcept1@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@00U?$integral_constant@_N$00@2@@Z PROC ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::_Umove_if_noexcept1, COMDAT
; _this$dead$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1703 :     auto _UFirst      = _Get_unwrapped(_First);

	mov	eax, DWORD PTR __First$[esp-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1649 :     _CONSTEXPR20_CONTAINER void _Umove_if_noexcept1(pointer _First, pointer _Last, pointer _Dest, true_type) {

	push	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	mov	esi, DWORD PTR __Last$[esp]
	cmp	eax, esi
	je	SHORT $LN5@Umove_if_n

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	edx, DWORD PTR __Dest$[esp]
	sub	edx, eax
$LL6@Umove_if_n:

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx+eax], ecx

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	add	eax, 4
	cmp	eax, esi
	jne	SHORT $LL6@Umove_if_n
$LN5@Umove_if_n:
	pop	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1652 :     }

	ret	16					; 00000010H
?_Umove_if_noexcept1@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@00U?$integral_constant@_N$00@2@@Z ENDP ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::_Umove_if_noexcept1
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?capacity@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ PROC ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::capacity, COMDAT
; _this$ = ecx

; 1545 :         auto& _My_data = _Mypair._Myval2;
; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2

; 1547 :     }

	ret	0
?capacity@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ ENDP ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?max_size@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAIABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z
_TEXT	SEGMENT
?max_size@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAIABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z PROC ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::max_size, COMDAT
; __Al$dead$ = ecx

; 591  :         if constexpr (_Has_max_size<_Alloc>::value) {
; 592  :             return _Al.max_size();

	mov	eax, 1073741823				; 3fffffffH

; 593  :         } else {
; 594  :             return (numeric_limits<size_type>::max)() / sizeof(value_type);
; 595  :         }
; 596  :     }

	ret	0
?max_size@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAIABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ENDP ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Getal@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ
_TEXT	SEGMENT
?_Getal@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ PROC ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::_Getal, COMDAT
; _this$ = ecx

; 1809 :         return _Mypair._Get_first();

	mov	eax, ecx

; 1810 :     }

	ret	0
?_Getal@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ENDP ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Umove_if_noexcept1@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@00U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
?_Umove_if_noexcept1@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@00U?$integral_constant@_N$00@2@@Z PROC ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::_Umove_if_noexcept1, COMDAT
; _this$dead$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1703 :     auto _UFirst      = _Get_unwrapped(_First);

	mov	eax, DWORD PTR __First$[esp-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1649 :     _CONSTEXPR20_CONTAINER void _Umove_if_noexcept1(pointer _First, pointer _Last, pointer _Dest, true_type) {

	push	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	mov	esi, DWORD PTR __Last$[esp]
	cmp	eax, esi
	je	SHORT $LN5@Umove_if_n

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	edx, DWORD PTR __Dest$[esp]
	sub	edx, eax
$LL6@Umove_if_n:

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx+eax], ecx

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	add	eax, 4
	cmp	eax, esi
	jne	SHORT $LL6@Umove_if_n
$LN5@Umove_if_n:
	pop	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1652 :     }

	ret	16					; 00000010H
?_Umove_if_noexcept1@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@00U?$integral_constant@_N$00@2@@Z ENDP ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::_Umove_if_noexcept1
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?capacity@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ PROC ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::capacity, COMDAT
; _this$ = ecx

; 1545 :         auto& _My_data = _Mypair._Myval2;
; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2

; 1547 :     }

	ret	0
?capacity@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ ENDP ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?max_size@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAIABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z
_TEXT	SEGMENT
?max_size@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAIABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z PROC ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::max_size, COMDAT
; __Al$dead$ = ecx

; 591  :         if constexpr (_Has_max_size<_Alloc>::value) {
; 592  :             return _Al.max_size();

	mov	eax, 1073741823				; 3fffffffH

; 593  :         } else {
; 594  :             return (numeric_limits<size_type>::max)() / sizeof(value_type);
; 595  :         }
; 596  :     }

	ret	0
?max_size@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAIABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ENDP ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Getal@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ
_TEXT	SEGMENT
?_Getal@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ PROC ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::_Getal, COMDAT
; _this$ = ecx

; 1809 :         return _Mypair._Get_first();

	mov	eax, ecx

; 1810 :     }

	ret	0
?_Getal@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ENDP ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Umove_if_noexcept1@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@00U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
?_Umove_if_noexcept1@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@00U?$integral_constant@_N$00@2@@Z PROC ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::_Umove_if_noexcept1, COMDAT
; _this$dead$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1703 :     auto _UFirst      = _Get_unwrapped(_First);

	mov	eax, DWORD PTR __First$[esp-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1649 :     _CONSTEXPR20_CONTAINER void _Umove_if_noexcept1(pointer _First, pointer _Last, pointer _Dest, true_type) {

	push	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	mov	esi, DWORD PTR __Last$[esp]
	cmp	eax, esi
	je	SHORT $LN5@Umove_if_n

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	edx, DWORD PTR __Dest$[esp]
	sub	edx, eax
$LL6@Umove_if_n:

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx+eax], ecx

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	add	eax, 4
	cmp	eax, esi
	jne	SHORT $LL6@Umove_if_n
$LN5@Umove_if_n:
	pop	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1652 :     }

	ret	16					; 00000010H
?_Umove_if_noexcept1@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@00U?$integral_constant@_N$00@2@@Z ENDP ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::_Umove_if_noexcept1
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?capacity@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ PROC ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::capacity, COMDAT
; _this$ = ecx

; 1545 :         auto& _My_data = _Mypair._Myval2;
; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2

; 1547 :     }

	ret	0
?capacity@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ ENDP ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?max_size@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAIABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z
_TEXT	SEGMENT
?max_size@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAIABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z PROC ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::max_size, COMDAT
; __Al$dead$ = ecx

; 591  :         if constexpr (_Has_max_size<_Alloc>::value) {
; 592  :             return _Al.max_size();

	mov	eax, 1073741823				; 3fffffffH

; 593  :         } else {
; 594  :             return (numeric_limits<size_type>::max)() / sizeof(value_type);
; 595  :         }
; 596  :     }

	ret	0
?max_size@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAIABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ENDP ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Getal@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ
_TEXT	SEGMENT
?_Getal@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ PROC ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::_Getal, COMDAT
; _this$ = ecx

; 1809 :         return _Mypair._Get_first();

	mov	eax, ecx

; 1810 :     }

	ret	0
?_Getal@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ENDP ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Umove_if_noexcept1@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@00U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
?_Umove_if_noexcept1@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@00U?$integral_constant@_N$00@2@@Z PROC ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::_Umove_if_noexcept1, COMDAT
; _this$dead$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1703 :     auto _UFirst      = _Get_unwrapped(_First);

	mov	eax, DWORD PTR __First$[esp-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1649 :     _CONSTEXPR20_CONTAINER void _Umove_if_noexcept1(pointer _First, pointer _Last, pointer _Dest, true_type) {

	push	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	mov	esi, DWORD PTR __Last$[esp]
	cmp	eax, esi
	je	SHORT $LN5@Umove_if_n

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	edx, DWORD PTR __Dest$[esp]
	sub	edx, eax
$LL6@Umove_if_n:

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx+eax], ecx

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	add	eax, 4
	cmp	eax, esi
	jne	SHORT $LL6@Umove_if_n
$LN5@Umove_if_n:
	pop	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1652 :     }

	ret	16					; 00000010H
?_Umove_if_noexcept1@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@00U?$integral_constant@_N$00@2@@Z ENDP ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::_Umove_if_noexcept1
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?capacity@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ PROC ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::capacity, COMDAT
; _this$ = ecx

; 1545 :         auto& _My_data = _Mypair._Myval2;
; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2

; 1547 :     }

	ret	0
?capacity@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ ENDP ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?max_size@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAIABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z
_TEXT	SEGMENT
?max_size@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAIABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z PROC ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::max_size, COMDAT
; __Al$dead$ = ecx

; 591  :         if constexpr (_Has_max_size<_Alloc>::value) {
; 592  :             return _Al.max_size();

	mov	eax, 1073741823				; 3fffffffH

; 593  :         } else {
; 594  :             return (numeric_limits<size_type>::max)() / sizeof(value_type);
; 595  :         }
; 596  :     }

	ret	0
?max_size@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAIABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ENDP ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Getal@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ
_TEXT	SEGMENT
?_Getal@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ PROC ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::_Getal, COMDAT
; _this$ = ecx

; 1809 :         return _Mypair._Get_first();

	mov	eax, ecx

; 1810 :     }

	ret	0
?_Getal@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@ABEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ENDP ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Umove_if_noexcept1@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@00U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
?_Umove_if_noexcept1@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@00U?$integral_constant@_N$00@2@@Z PROC ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::_Umove_if_noexcept1, COMDAT
; _this$dead$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1703 :     auto _UFirst      = _Get_unwrapped(_First);

	mov	eax, DWORD PTR __First$[esp-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1649 :     _CONSTEXPR20_CONTAINER void _Umove_if_noexcept1(pointer _First, pointer _Last, pointer _Dest, true_type) {

	push	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	mov	esi, DWORD PTR __Last$[esp]
	cmp	eax, esi
	je	SHORT $LN5@Umove_if_n

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	edx, DWORD PTR __Dest$[esp]
	sub	edx, eax
$LL6@Umove_if_n:

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx+eax], ecx

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	add	eax, 4
	cmp	eax, esi
	jne	SHORT $LL6@Umove_if_n
$LN5@Umove_if_n:
	pop	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1652 :     }

	ret	16					; 00000010H
?_Umove_if_noexcept1@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@00U?$integral_constant@_N$00@2@@Z ENDP ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::_Umove_if_noexcept1
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?capacity@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ PROC ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::capacity, COMDAT
; _this$ = ecx

; 1545 :         auto& _My_data = _Mypair._Myval2;
; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2

; 1547 :     }

	ret	0
?capacity@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QBEIXZ ENDP ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?max_size@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAIABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z
_TEXT	SEGMENT
?max_size@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAIABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z PROC ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::max_size, COMDAT
; __Al$dead$ = ecx

; 591  :         if constexpr (_Has_max_size<_Alloc>::value) {
; 592  :             return _Al.max_size();

	mov	eax, 1073741823				; 3fffffffH

; 593  :         } else {
; 594  :             return (numeric_limits<size_type>::max)() / sizeof(value_type);
; 595  :         }
; 596  :     }

	ret	0
?max_size@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAIABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ENDP ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QBEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QBEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ PROC ; std::_Compressed_pair<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *>,std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1343 :         return *this;

	mov	eax, ecx

; 1344 :     }

	ret	0
?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QBEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ENDP ; std::_Compressed_pair<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *>,std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
;	COMDAT ?max_size@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEIXZ PROC ; doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *>::max_size, COMDAT
; _this$dead$ = ecx

; 39   : 								size_type				max_size		() const								{	size_type _Count = (size_type)(-1) / sizeof (T);	return (0 < _Count ? _Count : 1);	}

	mov	eax, 1073741823				; 3fffffffH
	ret	0
?max_size@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEIXZ ENDP ; doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QBEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QBEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ PROC ; std::_Compressed_pair<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *>,std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1343 :         return *this;

	mov	eax, ecx

; 1344 :     }

	ret	0
?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QBEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ENDP ; std::_Compressed_pair<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *>,std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
;	COMDAT ?max_size@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEIXZ PROC ; doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *>::max_size, COMDAT
; _this$dead$ = ecx

; 39   : 								size_type				max_size		() const								{	size_type _Count = (size_type)(-1) / sizeof (T);	return (0 < _Count ? _Count : 1);	}

	mov	eax, 1073741823				; 3fffffffH
	ret	0
?max_size@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEIXZ ENDP ; doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QBEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QBEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ PROC ; std::_Compressed_pair<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *>,std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1343 :         return *this;

	mov	eax, ecx

; 1344 :     }

	ret	0
?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QBEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ENDP ; std::_Compressed_pair<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *>,std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
;	COMDAT ?max_size@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEIXZ PROC ; doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *>::max_size, COMDAT
; _this$dead$ = ecx

; 39   : 								size_type				max_size		() const								{	size_type _Count = (size_type)(-1) / sizeof (T);	return (0 < _Count ? _Count : 1);	}

	mov	eax, 1073741823				; 3fffffffH
	ret	0
?max_size@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEIXZ ENDP ; doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QBEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QBEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ PROC ; std::_Compressed_pair<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *>,std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1343 :         return *this;

	mov	eax, ecx

; 1344 :     }

	ret	0
?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QBEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ENDP ; std::_Compressed_pair<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *>,std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
;	COMDAT ?max_size@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEIXZ PROC ; doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *>::max_size, COMDAT
; _this$dead$ = ecx

; 39   : 								size_type				max_size		() const								{	size_type _Count = (size_type)(-1) / sizeof (T);	return (0 < _Count ? _Count : 1);	}

	mov	eax, 1073741823				; 3fffffffH
	ret	0
?max_size@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEIXZ ENDP ; doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QBEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QBEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ PROC ; std::_Compressed_pair<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *>,std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1343 :         return *this;

	mov	eax, ecx

; 1344 :     }

	ret	0
?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QBEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ENDP ; std::_Compressed_pair<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *>,std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
;	COMDAT ?max_size@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEIXZ PROC ; doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *>::max_size, COMDAT
; _this$dead$ = ecx

; 39   : 								size_type				max_size		() const								{	size_type _Count = (size_type)(-1) / sizeof (T);	return (0 < _Count ? _Count : 1);	}

	mov	eax, 1073741823				; 3fffffffH
	ret	0
?max_size@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEIXZ ENDP ; doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QBEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QBEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ PROC ; std::_Compressed_pair<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *>,std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1343 :         return *this;

	mov	eax, ecx

; 1344 :     }

	ret	0
?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QBEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ENDP ; std::_Compressed_pair<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *>,std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
;	COMDAT ?max_size@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEIXZ PROC ; doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *>::max_size, COMDAT
; _this$dead$ = ecx

; 39   : 								size_type				max_size		() const								{	size_type _Count = (size_type)(-1) / sizeof (T);	return (0 < _Count ? _Count : 1);	}

	mov	eax, 1073741823				; 3fffffffH
	ret	0
?max_size@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEIXZ ENDP ; doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QBEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QBEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ PROC ; std::_Compressed_pair<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *>,std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1343 :         return *this;

	mov	eax, ecx

; 1344 :     }

	ret	0
?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QBEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ENDP ; std::_Compressed_pair<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *>,std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
;	COMDAT ?max_size@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEIXZ PROC ; doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *>::max_size, COMDAT
; _this$dead$ = ecx

; 39   : 								size_type				max_size		() const								{	size_type _Count = (size_type)(-1) / sizeof (T);	return (0 < _Count ? _Count : 1);	}

	mov	eax, 1073741823				; 3fffffffH
	ret	0
?max_size@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEIXZ ENDP ; doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QBEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QBEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ PROC ; std::_Compressed_pair<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *>,std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1343 :         return *this;

	mov	eax, ecx

; 1344 :     }

	ret	0
?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QBEABV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ENDP ; std::_Compressed_pair<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *>,std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
;	COMDAT ?max_size@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEIXZ PROC ; doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *>::max_size, COMDAT
; _this$dead$ = ecx

; 39   : 								size_type				max_size		() const								{	size_type _Count = (size_type)(-1) / sizeof (T);	return (0 < _Count ? _Count : 1);	}

	mov	eax, 1073741823				; 3fffffffH
	ret	0
?max_size@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEIXZ ENDP ; doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Insertion_sort_unchecked@PAU_NormalItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAPAU_NormalItem@R_dsgraph@@QAU12@0P6A_NABU12@1@Z@Z
_TEXT	SEGMENT
tv195 = -16						; size = 4
__Last$1$ = -12						; size = 4
__Val$1 = -8						; size = 8
__Pred$ = 8						; size = 4
??$_Insertion_sort_unchecked@PAU_NormalItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAPAU_NormalItem@R_dsgraph@@QAU12@0P6A_NABU12@1@Z@Z PROC ; std::_Insertion_sort_unchecked<R_dsgraph::_NormalItem *,bool (__cdecl*)(R_dsgraph::_NormalItem const &,R_dsgraph::_NormalItem const &)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 6919 : _CONSTEXPR20 _BidIt _Insertion_sort_unchecked(const _BidIt _First, const _BidIt _Last, _Pr _Pred) {

	sub	esp, 16					; 00000010H
	push	ebx
	push	ebp
	mov	eax, edx
	mov	ebp, ecx
	mov	DWORD PTR __Last$1$[esp+24], eax
	push	esi
	push	edi

; 6920 :     // insertion sort [_First, _Last)
; 6921 :     if (_First != _Last) {

	cmp	ebp, eax
	je	$LN3@Insertion_

; 6922 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

	lea	ebx, DWORD PTR [ebp+8]
	cmp	ebx, eax
	je	$LN3@Insertion_
	mov	esi, ebp
	mov	DWORD PTR tv195[esp+32], ebp
$LL2@Insertion_:

; 6923 :             _BidIt _Hole               = _Mid;
; 6924 :             _Iter_value_t<_BidIt> _Val = _STD move(*_Mid);

	mov	eax, DWORD PTR [ebx]
	mov	edi, ebx
	mov	ecx, DWORD PTR [ebx+4]
	mov	DWORD PTR __Val$1[esp+32], eax

; 6925 : 
; 6926 :             if (_DEBUG_LT_PRED(_Pred, _Val, *_First)) { // found new earliest element, move to front

	lea	eax, DWORD PTR __Val$1[esp+32]
	push	ebp
	push	eax
	mov	DWORD PTR __Val$1[esp+44], ecx
	call	DWORD PTR __Pred$[esp+36]
	add	esp, 8
	test	al, al
	je	SHORT $LN9@Insertion_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4254 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	mov	ecx, ebx

; 4255 :     auto _Result                = _CSTD memmove(_Dest_ch - _Count, _First_ch, _Count);

	mov	eax, ebx
	sub	ecx, ebp
	push	ecx
	sub	eax, ecx
	add	eax, 8
	push	ebp
	push	eax
	call	_memmove
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6928 :                 *_First = _STD move(_Val);

	mov	eax, DWORD PTR __Val$1[esp+44]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4255 :     auto _Result                = _CSTD memmove(_Dest_ch - _Count, _First_ch, _Count);

	add	esp, 12					; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6928 :                 *_First = _STD move(_Val);

	mov	ecx, DWORD PTR __Val$1[esp+36]
	mov	DWORD PTR [ebp], eax
	mov	DWORD PTR [ebp+4], ecx

; 6929 :             } else { // look for insertion point after first

	jmp	SHORT $LN10@Insertion_
$LN9@Insertion_:

; 6930 :                 for (_BidIt _Prev = _Hole; _DEBUG_LT_PRED(_Pred, _Val, *--_Prev); _Hole = _Prev) {

	push	DWORD PTR tv195[esp+32]
	lea	eax, DWORD PTR __Val$1[esp+36]
	push	eax
	call	DWORD PTR __Pred$[esp+36]
	add	esp, 8
	test	al, al
	je	SHORT $LN6@Insertion_
$LL7@Insertion_:

; 6931 :                     *_Hole = _STD move(*_Prev); // move hole down

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [esi+4]
	mov	DWORD PTR [edi], eax
	lea	eax, DWORD PTR __Val$1[esp+32]
	mov	DWORD PTR [edi+4], ecx
	mov	edi, esi
	sub	esi, 8
	push	esi
	push	eax
	call	DWORD PTR __Pred$[esp+36]
	add	esp, 8
	test	al, al
	jne	SHORT $LL7@Insertion_
$LN6@Insertion_:

; 6932 :                 }
; 6933 : 
; 6934 :                 *_Hole = _STD move(_Val); // insert element in hole

	mov	eax, DWORD PTR __Val$1[esp+32]
	mov	ecx, DWORD PTR __Val$1[esp+36]
	mov	esi, DWORD PTR tv195[esp+32]
	mov	DWORD PTR [edi], eax
	mov	DWORD PTR [edi+4], ecx
$LN10@Insertion_:

; 6922 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

	mov	eax, DWORD PTR __Last$1$[esp+32]
	add	ebx, 8
	add	esi, 8
	mov	DWORD PTR tv195[esp+32], esi
	cmp	ebx, eax
	jne	$LL2@Insertion_
$LN3@Insertion_:

; 6935 :             }
; 6936 :         }
; 6937 :     }
; 6938 : 
; 6939 :     return _Last;
; 6940 : }

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 16					; 00000010H
	ret	0
??$_Insertion_sort_unchecked@PAU_NormalItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAPAU_NormalItem@R_dsgraph@@QAU12@0P6A_NABU12@1@Z@Z ENDP ; std::_Insertion_sort_unchecked<R_dsgraph::_NormalItem *,bool (__cdecl*)(R_dsgraph::_NormalItem const &,R_dsgraph::_NormalItem const &)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Make_heap_unchecked@PAU_NormalItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_NormalItem@R_dsgraph@@0P6A_NABU12@1@Z@Z
_TEXT	SEGMENT
__Hole$1$ = -24						; size = 4
__Bottom$1$ = -20					; size = 4
tv259 = -16						; size = 4
__Max_sequence_non_leaf$1$ = -12			; size = 4
__Val$1 = -8						; size = 8
__Pred$ = 8						; size = 4
??$_Make_heap_unchecked@PAU_NormalItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_NormalItem@R_dsgraph@@0P6A_NABU12@1@Z@Z PROC ; std::_Make_heap_unchecked<R_dsgraph::_NormalItem *,bool (__cdecl*)(R_dsgraph::_NormalItem const &,R_dsgraph::_NormalItem const &)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 5544 : _CONSTEXPR20 void _Make_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

	sub	esp, 24					; 00000018H
	push	ebx
	push	ebp
	push	esi
	mov	eax, edx
	push	edi
	mov	edi, ecx

; 5545 :     // make [_First, _Last) into a heap
; 5546 :     using _Diff   = _Iter_diff_t<_RanIt>;
; 5547 :     _Diff _Bottom = _Last - _First;

	sub	eax, edi
	sar	eax, 3

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	mov	edx, eax
	mov	DWORD PTR __Bottom$1$[esp+40], eax
	sar	edx, 1
	test	edx, edx
	jle	$LN3@Make_heap_
	dec	eax
	mov	ebp, eax
	mov	DWORD PTR tv259[esp+40], eax
	sar	ebp, 1
	mov	DWORD PTR __Max_sequence_non_leaf$1$[esp+40], ebp
	npad	3
$LL2@Make_heap_:

; 5549 :         // reheap top half, bottom to top
; 5550 :         --_Hole;
; 5551 :         _Iter_value_t<_RanIt> _Val = _STD move(*(_First + _Hole));

	mov	eax, DWORD PTR [edi+edx*8-8]
	dec	edx
	mov	DWORD PTR __Hole$1$[esp+40], edx

; 5552 :         _Pop_heap_hole_by_index(_First, _Hole, _Bottom, _STD move(_Val), _Pred);

	mov	ebx, edx
	mov	DWORD PTR __Val$1[esp+40], eax

; 5381 :     _Diff _Idx       = _Hole;

	mov	esi, edx

; 5549 :         // reheap top half, bottom to top
; 5550 :         --_Hole;
; 5551 :         _Iter_value_t<_RanIt> _Val = _STD move(*(_First + _Hole));

	mov	ecx, DWORD PTR [edi+edx*8+4]
	mov	DWORD PTR __Val$1[esp+44], ecx

; 5386 :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

	cmp	edx, ebp
	jge	SHORT $LN8@Make_heap_
	npad	3
$LL7@Make_heap_:

; 5387 :         _Idx = 2 * _Idx + 2;

	lea	esi, DWORD PTR [esi*2+2]

; 5388 :         if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1)))) {

	lea	ecx, DWORD PTR [edi+esi*8]
	lea	eax, DWORD PTR [ecx-8]
	push	eax
	push	ecx
	call	DWORD PTR __Pred$[esp+44]
	add	esp, 8
	test	al, al
	je	SHORT $LN9@Make_heap_

; 5389 :             --_Idx;

	dec	esi
$LN9@Make_heap_:

; 5390 :         }
; 5391 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [edi+esi*8]
	mov	ecx, DWORD PTR [edi+esi*8+4]
	mov	DWORD PTR [edi+ebx*8], eax
	mov	DWORD PTR [edi+ebx*8+4], ecx

; 5392 :         _Hole             = _Idx;

	mov	ebx, esi
	cmp	esi, ebp
	jl	SHORT $LL7@Make_heap_
	mov	edx, DWORD PTR __Hole$1$[esp+40]
$LN8@Make_heap_:

; 5393 :     }
; 5394 : 
; 5395 :     if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it

	cmp	esi, ebp
	jne	SHORT $LN10@Make_heap_
	mov	ecx, DWORD PTR __Bottom$1$[esp+40]
	test	cl, 1
	jne	SHORT $LN10@Make_heap_

; 5396 :         *(_First + _Hole) = _STD move(*(_First + (_Bottom - 1)));

	mov	eax, DWORD PTR [edi+ecx*8-8]
	mov	ecx, DWORD PTR [edi+ecx*8-4]
	mov	DWORD PTR [edi+ebx*8], eax
	mov	DWORD PTR [edi+ebx*8+4], ecx

; 5397 :         _Hole             = _Bottom - 1;

	mov	ebx, DWORD PTR tv259[esp+40]
$LN10@Make_heap_:

; 5268 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

	cmp	edx, ebx
	jge	SHORT $LN29@Make_heap_
$LL15@Make_heap_:

; 5267 :     for (_Diff _Idx = (_Hole - 1) >> 1; // shift for codegen

	lea	esi, DWORD PTR [ebx-1]
	sar	esi, 1

; 5268 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

	lea	eax, DWORD PTR __Val$1[esp+40]
	push	eax
	lea	ebp, DWORD PTR [edi+esi*8]
	push	ebp
	call	DWORD PTR __Pred$[esp+44]
	mov	edx, DWORD PTR __Hole$1$[esp+48]
	add	esp, 8
	test	al, al
	je	SHORT $LN30@Make_heap_

; 5269 :          _Idx = (_Hole - 1) >> 1) { // shift for codegen
; 5270 :         // move _Hole up to parent
; 5271 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [ebp]
	mov	ecx, DWORD PTR [ebp+4]
	mov	DWORD PTR [edi+ebx*8], eax
	mov	DWORD PTR [edi+ebx*8+4], ecx

; 5272 :         _Hole             = _Idx;

	mov	ebx, esi
	cmp	edx, esi
	jl	SHORT $LL15@Make_heap_
$LN30@Make_heap_:
	mov	ebp, DWORD PTR __Max_sequence_non_leaf$1$[esp+40]
$LN29@Make_heap_:

; 5273 :     }
; 5274 : 
; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	eax, DWORD PTR __Val$1[esp+40]
	mov	ecx, DWORD PTR __Val$1[esp+44]
	mov	DWORD PTR [edi+ebx*8], eax
	mov	DWORD PTR [edi+ebx*8+4], ecx

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	test	edx, edx
	jg	$LL2@Make_heap_
$LN3@Make_heap_:

; 5553 :     }
; 5554 : }

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 24					; 00000018H
	ret	0
??$_Make_heap_unchecked@PAU_NormalItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_NormalItem@R_dsgraph@@0P6A_NABU12@1@Z@Z ENDP ; std::_Make_heap_unchecked<R_dsgraph::_NormalItem *,bool (__cdecl*)(R_dsgraph::_NormalItem const &,R_dsgraph::_NormalItem const &)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Sort_heap_unchecked@PAU_NormalItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_NormalItem@R_dsgraph@@0P6A_NABU12@1@Z@Z
_TEXT	SEGMENT
__Val$1 = -8						; size = 8
__Pred$ = 8						; size = 4
??$_Sort_heap_unchecked@PAU_NormalItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_NormalItem@R_dsgraph@@0P6A_NABU12@1@Z@Z PROC ; std::_Sort_heap_unchecked<R_dsgraph::_NormalItem *,bool (__cdecl*)(R_dsgraph::_NormalItem const &,R_dsgraph::_NormalItem const &)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 5772 : _CONSTEXPR20 void _Sort_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	push	edi
	mov	esi, edx
	mov	edi, ecx

; 5773 :     // order heap by repeatedly popping
; 5774 :     for (; _Last - _First >= 2; --_Last) {

	sub	esi, edi
	mov	eax, esi
	and	eax, -8					; fffffff8H
	cmp	eax, 16					; 00000010H
	jl	SHORT $LN3@Sort_heap_
	mov	ebx, DWORD PTR __Pred$[esp+20]
	npad	6
$LL4@Sort_heap_:

; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	eax, DWORD PTR [edi+esi-8]

; 5410 :     _Pop_heap_hole_by_index(

	xor	edx, edx

; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	ecx, DWORD PTR [edi+esi-4]
	mov	DWORD PTR __Val$1[esp+24], eax

; 5408 :     *_Dest      = _STD move(*_First);

	mov	eax, DWORD PTR [edi]

; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	DWORD PTR __Val$1[esp+28], ecx

; 5408 :     *_Dest      = _STD move(*_First);

	mov	ecx, DWORD PTR [edi+4]
	mov	DWORD PTR [edi+esi-8], eax

; 5409 :     using _Diff = _Iter_diff_t<_RanIt>;
; 5410 :     _Pop_heap_hole_by_index(

	lea	eax, DWORD PTR __Val$1[esp+24]
	push	ebx
	push	eax
	lea	eax, DWORD PTR [esi-8]
	mov	DWORD PTR [edi+esi-4], ecx
	sar	eax, 3
	mov	ecx, edi
	push	eax
	call	??$_Pop_heap_hole_by_index@PAU_NormalItem@R_dsgraph@@U12@P6A_NABU12@0@Z@std@@YAXPAU_NormalItem@R_dsgraph@@HH$$QAU12@P6A_NABU12@2@Z@Z ; std::_Pop_heap_hole_by_index<R_dsgraph::_NormalItem *,R_dsgraph::_NormalItem,bool (__cdecl*)(R_dsgraph::_NormalItem const &,R_dsgraph::_NormalItem const &)>

; 5773 :     // order heap by repeatedly popping
; 5774 :     for (; _Last - _First >= 2; --_Last) {

	sub	esi, 8

; 5410 :     _Pop_heap_hole_by_index(

	add	esp, 12					; 0000000cH

; 5773 :     // order heap by repeatedly popping
; 5774 :     for (; _Last - _First >= 2; --_Last) {

	mov	eax, esi
	and	eax, -8					; fffffff8H
	cmp	eax, 16					; 00000010H
	jge	SHORT $LL4@Sort_heap_
$LN3@Sort_heap_:

; 5775 :         _Pop_heap_unchecked(_First, _Last, _Pred);
; 5776 :     }
; 5777 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 12					; 0000000cH
	ret	0
??$_Sort_heap_unchecked@PAU_NormalItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_NormalItem@R_dsgraph@@0P6A_NABU12@1@Z@Z ENDP ; std::_Sort_heap_unchecked<R_dsgraph::_NormalItem *,bool (__cdecl*)(R_dsgraph::_NormalItem const &,R_dsgraph::_NormalItem const &)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Partition_by_median_guess_unchecked@PAU_NormalItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YA?AU?$pair@PAU_NormalItem@R_dsgraph@@PAU12@@0@PAU_NormalItem@R_dsgraph@@0P6A_NABU23@1@Z@Z
_TEXT	SEGMENT
__Glast$1$ = -24					; size = 4
__First$1$ = -20					; size = 4
__Plast$1$ = -16					; size = 4
$T1 = -12						; size = 4
__Gfirst$1$ = -12					; size = 4
$T2 = -8						; size = 4
tv498 = -8						; size = 4
tv497 = -8						; size = 4
$T3 = -8						; size = 4
__Last$1$ = -8						; size = 4
___$ReturnUdt$1$ = -4					; size = 4
__Last$ = 8						; size = 4
__Pred$ = 12						; size = 4
??$_Partition_by_median_guess_unchecked@PAU_NormalItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YA?AU?$pair@PAU_NormalItem@R_dsgraph@@PAU12@@0@PAU_NormalItem@R_dsgraph@@0P6A_NABU23@1@Z@Z PROC ; std::_Partition_by_median_guess_unchecked<R_dsgraph::_NormalItem *,bool (__cdecl*)(R_dsgraph::_NormalItem const &,R_dsgraph::_NormalItem const &)>, COMDAT
; ___$ReturnUdt$ = ecx
; __First$ = edx

; 6976 : _CONSTEXPR20 pair<_RanIt, _RanIt> _Partition_by_median_guess_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

	sub	esp, 28					; 0000001cH
	push	ebx

; 6963 :     if (40 < _Count) { // Tukey's ninther

	mov	ebx, DWORD PTR __Pred$[esp+28]

; 6976 : _CONSTEXPR20 pair<_RanIt, _RanIt> _Partition_by_median_guess_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

	push	ebp
	push	esi
	push	edi

; 6977 :     // partition [_First, _Last)
; 6978 :     _RanIt _Mid = _First + ((_Last - _First) >> 1); // shift for codegen

	mov	edi, DWORD PTR __Last$[esp+40]
	mov	eax, edi
	sub	eax, edx
	mov	DWORD PTR ___$ReturnUdt$1$[esp+44], ecx
	sar	eax, 4
	mov	DWORD PTR __First$1$[esp+44], edx

; 6979 :     _Guess_median_unchecked(_First, _Mid, _Prev_iter(_Last), _Pred);

	lea	ecx, DWORD PTR [edi-8]
	mov	DWORD PTR __Last$1$[esp+44], ecx
	lea	esi, DWORD PTR [edx+eax*8]

; 6962 :     const _Diff _Count = _Last - _First;

	mov	eax, ecx
	sub	eax, edx
	sar	eax, 3

; 6963 :     if (40 < _Count) { // Tukey's ninther

	cmp	eax, 40					; 00000028H
	jle	SHORT $LN35@Partition_

; 6964 :         const _Diff _Step     = (_Count + 1) >> 3; // +1 can't overflow because range was made inclusive in caller
; 6965 :         const _Diff _Two_step = _Step << 1; // note: intentionally discards low-order bit
; 6966 :         _Med3_unchecked(_First, _First + _Step, _First + _Two_step, _Pred);

	mov	ebp, DWORD PTR __Pred$[esp+40]
	inc	eax
	sar	eax, 3
	mov	ebx, eax
	shl	ebx, 4
	push	ebp
	lea	edi, DWORD PTR [eax*8]
	lea	ecx, DWORD PTR [edi+edx]
	lea	eax, DWORD PTR [ebx+edx]
	mov	DWORD PTR $T1[esp+48], ecx
	mov	edx, ecx
	mov	ecx, DWORD PTR __First$1$[esp+48]
	push	eax
	call	??$_Med3_unchecked@PAU_NormalItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_NormalItem@R_dsgraph@@00P6A_NABU12@1@Z@Z ; std::_Med3_unchecked<R_dsgraph::_NormalItem *,bool (__cdecl*)(R_dsgraph::_NormalItem const &,R_dsgraph::_NormalItem const &)>

; 6967 :         _Med3_unchecked(_Mid - _Step, _Mid, _Mid + _Step, _Pred);

	lea	eax, DWORD PTR [edi+esi]
	mov	ecx, esi
	push	ebp
	push	eax
	sub	ecx, edi
	mov	edx, esi
	call	??$_Med3_unchecked@PAU_NormalItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_NormalItem@R_dsgraph@@00P6A_NABU12@1@Z@Z ; std::_Med3_unchecked<R_dsgraph::_NormalItem *,bool (__cdecl*)(R_dsgraph::_NormalItem const &,R_dsgraph::_NormalItem const &)>

; 6968 :         _Med3_unchecked(_Last - _Two_step, _Last - _Step, _Last, _Pred);

	mov	eax, DWORD PTR __Last$1$[esp+60]
	mov	ecx, eax
	sub	ecx, edi
	push	ebp
	push	eax
	sub	eax, ebx
	mov	DWORD PTR $T3[esp+68], ecx
	mov	edx, ecx
	mov	ecx, eax
	call	??$_Med3_unchecked@PAU_NormalItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_NormalItem@R_dsgraph@@00P6A_NABU12@1@Z@Z ; std::_Med3_unchecked<R_dsgraph::_NormalItem *,bool (__cdecl*)(R_dsgraph::_NormalItem const &,R_dsgraph::_NormalItem const &)>

; 6969 :         _Med3_unchecked(_First + _Step, _Mid, _Last - _Step, _Pred);
; 6970 :     } else {

	mov	edi, DWORD PTR __Last$[esp+64]
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR $T3[esp+44]
	mov	ebx, ebp
	mov	eax, DWORD PTR $T1[esp+44]
	jmp	SHORT $LN36@Partition_
$LN35@Partition_:

; 6971 :         _Med3_unchecked(_First, _Mid, _Last, _Pred);

	mov	eax, edx
$LN36@Partition_:

; 6980 :     _RanIt _Pfirst = _Mid;

	push	ebx
	push	ecx
	mov	edx, esi
	mov	ecx, eax
	call	??$_Med3_unchecked@PAU_NormalItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_NormalItem@R_dsgraph@@00P6A_NABU12@1@Z@Z ; std::_Med3_unchecked<R_dsgraph::_NormalItem *,bool (__cdecl*)(R_dsgraph::_NormalItem const &,R_dsgraph::_NormalItem const &)>
	add	esp, 8

; 6981 :     _RanIt _Plast  = _Next_iter(_Pfirst);

	lea	ebp, DWORD PTR [esi+8]
	mov	DWORD PTR __Plast$1$[esp+44], ebp

; 6982 : 
; 6983 :     while (_First < _Pfirst && !_DEBUG_LT_PRED(_Pred, *_Prev_iter(_Pfirst), *_Pfirst)
; 6984 :            && !_Pred(*_Pfirst, *_Prev_iter(_Pfirst))) {

	cmp	DWORD PTR __First$1$[esp+44], esi
	jae	SHORT $LN70@Partition_
	mov	edi, DWORD PTR __First$1$[esp+44]
	npad	4
$LL2@Partition_:
	lea	eax, DWORD PTR [esi-8]
	push	esi
	push	eax
	mov	DWORD PTR tv498[esp+52], eax
	call	ebx
	add	esp, 8
	test	al, al
	jne	SHORT $LN95@Partition_
	push	DWORD PTR tv498[esp+44]
	push	esi
	call	ebx
	add	esp, 8
	test	al, al
	jne	SHORT $LN95@Partition_

; 6985 :         --_Pfirst;

	mov	esi, DWORD PTR tv498[esp+44]
	cmp	edi, esi
	jb	SHORT $LL2@Partition_
$LN95@Partition_:
	mov	edi, DWORD PTR __Last$[esp+40]
$LN70@Partition_:

; 6986 :     }
; 6987 : 
; 6988 :     while (_Plast < _Last && !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst) && !_Pred(*_Pfirst, *_Plast)) {

	cmp	ebp, edi
	jae	SHORT $LN5@Partition_
$LL4@Partition_:
	push	esi
	push	ebp
	call	ebx
	add	esp, 8
	test	al, al
	jne	SHORT $LN96@Partition_
	push	ebp
	push	esi
	call	ebx
	add	esp, 8
	test	al, al
	jne	SHORT $LN96@Partition_

; 6989 :         ++_Plast;

	add	ebp, 8
	cmp	ebp, edi
	jb	SHORT $LL4@Partition_
$LN96@Partition_:
	mov	DWORD PTR __Plast$1$[esp+44], ebp
$LN5@Partition_:

; 6990 :     }
; 6991 : 
; 6992 :     _RanIt _Gfirst = _Plast;
; 6993 :     _RanIt _Glast  = _Pfirst;

	mov	edi, esi
	mov	ebx, ebp
	mov	DWORD PTR __Glast$1$[esp+44], edi
$LN100@Partition_:

; 6994 : 
; 6995 :     for (;;) { // partition
; 6996 :         for (; _Gfirst < _Last; ++_Gfirst) {

	mov	DWORD PTR __Gfirst$1$[esp+44], ebx
	npad	3
$LL6@Partition_:
	cmp	ebx, DWORD PTR __Last$[esp+40]
	jae	SHORT $LN74@Partition_
	mov	edi, DWORD PTR __Pred$[esp+40]
	npad	6
$LL11@Partition_:

; 6997 :             if (_DEBUG_LT_PRED(_Pred, *_Pfirst, *_Gfirst)) {

	push	ebx
	push	esi
	call	edi
	add	esp, 8
	test	al, al
	jne	SHORT $LN9@Partition_

; 6998 :                 continue;
; 6999 :             } else if (_Pred(*_Gfirst, *_Pfirst)) {

	push	esi
	push	ebx
	call	edi
	add	esp, 8
	test	al, al
	jne	SHORT $LN97@Partition_

; 7000 :                 break;
; 7001 :             } else if (_Plast != _Gfirst) {

	lea	eax, DWORD PTR [ebp+8]
	mov	DWORD PTR tv497[esp+44], eax
	cmp	ebp, ebx
	je	SHORT $LN19@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	edi, DWORD PTR [ebp+4]
	mov	edx, DWORD PTR [ebp]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebx]
	mov	ecx, DWORD PTR [ebx+4]
	mov	DWORD PTR [ebp], eax
	mov	DWORD PTR [ebp+4], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7003 :                 ++_Plast;

	mov	ebp, DWORD PTR tv497[esp+44]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebx+4], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7004 :             } else {

	mov	edi, DWORD PTR __Pred$[esp+40]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebx], edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7004 :             } else {

	jmp	SHORT $LN9@Partition_
$LN19@Partition_:

; 7005 :                 ++_Plast;

	mov	ebp, eax
$LN9@Partition_:

; 6994 : 
; 6995 :     for (;;) { // partition
; 6996 :         for (; _Gfirst < _Last; ++_Gfirst) {

	add	ebx, 8
	cmp	ebx, DWORD PTR __Last$[esp+40]
	jb	SHORT $LL11@Partition_
$LN97@Partition_:
	mov	edi, DWORD PTR __Glast$1$[esp+44]
	mov	DWORD PTR __Plast$1$[esp+44], ebp
	mov	DWORD PTR __Gfirst$1$[esp+44], ebx
$LN74@Partition_:

; 7009 :         for (; _First < _Glast; --_Glast) {

	mov	eax, DWORD PTR __First$1$[esp+44]
	cmp	edi, eax
	jbe	SHORT $LN99@Partition_
	lea	ebx, DWORD PTR [edi-8]
	mov	ebp, eax
$LL14@Partition_:

; 7010 :             if (_DEBUG_LT_PRED(_Pred, *_Prev_iter(_Glast), *_Pfirst)) {

	push	esi
	push	ebx
	call	DWORD PTR __Pred$[esp+48]
	add	esp, 8
	test	al, al
	jne	SHORT $LN12@Partition_

; 7011 :                 continue;
; 7012 :             } else if (_Pred(*_Pfirst, *_Prev_iter(_Glast))) {

	push	ebx
	push	esi
	call	DWORD PTR __Pred$[esp+48]
	add	esp, 8
	test	al, al
	jne	SHORT $LN98@Partition_

; 7013 :                 break;
; 7014 :             } else if (--_Pfirst != _Prev_iter(_Glast)) {

	sub	esi, 8
	cmp	esi, ebx
	je	SHORT $LN12@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	edi, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebx]
	mov	ecx, DWORD PTR [ebx+4]
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], ecx

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebx+4], edi
	mov	edi, DWORD PTR __Glast$1$[esp+44]
	mov	DWORD PTR [ebx], edx
$LN12@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7009 :         for (; _First < _Glast; --_Glast) {

	sub	edi, 8
	sub	ebx, 8
	mov	DWORD PTR __Glast$1$[esp+44], edi
	cmp	ebp, edi
	jb	SHORT $LL14@Partition_
$LN98@Partition_:
	mov	eax, DWORD PTR __First$1$[esp+44]

; 7015 :                 _STD iter_swap(_Pfirst, _Prev_iter(_Glast));
; 7016 :             }
; 7017 :         }
; 7018 : 
; 7019 :         if (_Glast == _First && _Gfirst == _Last) {

	cmp	edi, eax
	mov	ebx, DWORD PTR __Gfirst$1$[esp+44]
	mov	ebp, DWORD PTR __Plast$1$[esp+44]
$LN99@Partition_:
	jne	SHORT $LN27@Partition_
	cmp	ebx, DWORD PTR __Last$[esp+40]
	je	$LN76@Partition_

; 7020 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);
; 7021 :         }
; 7022 : 
; 7023 :         if (_Glast == _First) { // no room at bottom, rotate pivot upward
; 7024 :             if (_Plast != _Gfirst) {

	cmp	ebp, ebx
	je	SHORT $LN29@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	edx, DWORD PTR [esi]
	mov	edi, DWORD PTR [esi+4]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebp]
	mov	ecx, DWORD PTR [ebp+4]
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], ecx

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebp], edx
	mov	DWORD PTR [ebp+4], edi
$LN29@Partition_:

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	edi, DWORD PTR [esi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7028 :             ++_Plast;

	add	ebp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	edx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebx]
	mov	ecx, DWORD PTR [ebx+4]
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7030 :             ++_Pfirst;

	add	esi, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebx+4], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7031 :             ++_Gfirst;

	mov	edi, DWORD PTR __Glast$1$[esp+44]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebx], edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7031 :             ++_Gfirst;

	add	ebx, 8
	mov	DWORD PTR __Plast$1$[esp+44], ebp
	jmp	$LN100@Partition_
$LN27@Partition_:

; 7032 :         } else if (_Gfirst == _Last) { // no room at top, rotate pivot downward

	add	edi, -8					; fffffff8H
	mov	DWORD PTR __Glast$1$[esp+44], edi
	cmp	ebx, DWORD PTR __Last$[esp+40]
	jne	SHORT $LN30@Partition_

; 7033 :             if (--_Glast != --_Pfirst) {

	sub	esi, 8
	cmp	edi, esi
	je	SHORT $LN86@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	eax, DWORD PTR [edi+4]
	mov	edx, DWORD PTR [edi]

; 101  :     _Left    = _STD move(_Right);

	mov	ecx, DWORD PTR [esi+4]
	mov	DWORD PTR $T2[esp+44], eax
	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [edi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	eax, DWORD PTR $T2[esp+44]
	mov	DWORD PTR [edi+4], ecx
	mov	DWORD PTR [esi], edx
	mov	DWORD PTR [esi+4], eax
	jmp	SHORT $LN32@Partition_
$LN86@Partition_:
	mov	eax, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR $T2[esp+44], eax
$LN32@Partition_:

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebp-8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7037 :             _STD iter_swap(_Pfirst, --_Plast);

	sub	ebp, 8
	mov	DWORD PTR __Plast$1$[esp+44], ebp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 101  :     _Left    = _STD move(_Right);

	mov	ecx, DWORD PTR [ebp+4]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	eax, DWORD PTR $T2[esp+44]
	mov	DWORD PTR [esi+4], ecx
	mov	DWORD PTR [ebp], edx
	mov	DWORD PTR [ebp+4], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7038 :         } else {

	jmp	$LL6@Partition_
$LN30@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	edx, DWORD PTR [ebx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7039 :             _STD iter_swap(_Gfirst, --_Glast);

	mov	DWORD PTR __Glast$1$[esp+44], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 101  :     _Left    = _STD move(_Right);

	mov	ecx, DWORD PTR __Glast$1$[esp+44]
	mov	edi, DWORD PTR [ebx+4]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [ebx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	eax, DWORD PTR __Glast$1$[esp+44]
	mov	DWORD PTR [ebx+4], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7040 :             ++_Gfirst;

	add	ebx, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [eax+4], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7042 :     }

	mov	edi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [eax], edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7042 :     }

	jmp	$LN100@Partition_
$LN76@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	eax, DWORD PTR ___$ReturnUdt$1$[esp+44]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7043 : }

	pop	edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	DWORD PTR [eax], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7043 : }

	pop	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	DWORD PTR [eax+4], ebp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7043 : }

	pop	ebp
	pop	ebx
	add	esp, 28					; 0000001cH
	ret	0
??$_Partition_by_median_guess_unchecked@PAU_NormalItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YA?AU?$pair@PAU_NormalItem@R_dsgraph@@PAU12@@0@PAU_NormalItem@R_dsgraph@@0P6A_NABU23@1@Z@Z ENDP ; std::_Partition_by_median_guess_unchecked<R_dsgraph::_NormalItem *,bool (__cdecl*)(R_dsgraph::_NormalItem const &,R_dsgraph::_NormalItem const &)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Insertion_sort_unchecked@PAU_MatrixItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAPAU_MatrixItem@R_dsgraph@@QAU12@0P6A_NABU12@1@Z@Z
_TEXT	SEGMENT
__Hole$1$ = -96						; size = 4
tv186 = -92						; size = 4
__Mid$1$ = -88						; size = 4
__First$1$ = -84					; size = 4
__Last$1$ = -80						; size = 4
__Val$1 = -76						; size = 76
__Pred$ = 8						; size = 4
??$_Insertion_sort_unchecked@PAU_MatrixItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAPAU_MatrixItem@R_dsgraph@@QAU12@0P6A_NABU12@1@Z@Z PROC ; std::_Insertion_sort_unchecked<R_dsgraph::_MatrixItem *,bool (__cdecl*)(R_dsgraph::_MatrixItem const &,R_dsgraph::_MatrixItem const &)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 6919 : _CONSTEXPR20 _BidIt _Insertion_sort_unchecked(const _BidIt _First, const _BidIt _Last, _Pr _Pred) {

	sub	esp, 96					; 00000060H
	mov	eax, edx
	mov	DWORD PTR __First$1$[esp+96], ecx
	mov	DWORD PTR __Last$1$[esp+96], eax

; 6920 :     // insertion sort [_First, _Last)
; 6921 :     if (_First != _Last) {

	cmp	ecx, eax
	je	$LN3@Insertion_

; 6922 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

	push	ebp
	lea	ebp, DWORD PTR [ecx+76]
	mov	DWORD PTR __Mid$1$[esp+100], ebp
	cmp	ebp, eax
	je	$LN27@Insertion_
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	mov	DWORD PTR tv186[esp+112], ecx
	npad	2
$LL2@Insertion_:

; 6923 :             _BidIt _Hole               = _Mid;
; 6924 :             _Iter_value_t<_BidIt> _Val = _STD move(*_Mid);

	mov	ecx, 19					; 00000013H
	mov	DWORD PTR __Hole$1$[esp+112], ebp
	mov	esi, ebp
	lea	edi, DWORD PTR __Val$1[esp+112]
	rep movsd

; 6925 : 
; 6926 :             if (_DEBUG_LT_PRED(_Pred, _Val, *_First)) { // found new earliest element, move to front

	mov	edi, DWORD PTR __First$1$[esp+112]
	lea	eax, DWORD PTR __Val$1[esp+112]
	push	edi
	push	eax
	call	DWORD PTR __Pred$[esp+116]
	add	esp, 8
	test	al, al
	je	SHORT $LN9@Insertion_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4254 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	mov	ecx, ebp

; 4255 :     auto _Result                = _CSTD memmove(_Dest_ch - _Count, _First_ch, _Count);

	mov	eax, ebp
	sub	ecx, edi
	push	ecx
	sub	eax, ecx
	add	eax, 76					; 0000004cH
	push	edi
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6929 :             } else { // look for insertion point after first

	jmp	SHORT $LN28@Insertion_
$LN9@Insertion_:

; 6930 :                 for (_BidIt _Prev = _Hole; _DEBUG_LT_PRED(_Pred, _Val, *--_Prev); _Hole = _Prev) {

	push	DWORD PTR tv186[esp+112]
	lea	eax, DWORD PTR __Val$1[esp+116]
	push	eax
	call	DWORD PTR __Pred$[esp+116]
	add	esp, 8
	test	al, al
	je	SHORT $LN6@Insertion_
	mov	ebp, DWORD PTR __Hole$1$[esp+112]
$LL7@Insertion_:

; 6931 :                     *_Hole = _STD move(*_Prev); // move hole down

	mov	edi, ebp
	lea	eax, DWORD PTR __Val$1[esp+112]
	mov	esi, ebx
	mov	ebp, ebx
	sub	ebx, 76					; 0000004cH
	mov	ecx, 19					; 00000013H
	push	ebx
	rep movsd
	push	eax
	call	DWORD PTR __Pred$[esp+116]
	add	esp, 8
	test	al, al
	jne	SHORT $LL7@Insertion_
	mov	DWORD PTR __Hole$1$[esp+112], ebp
	mov	ebp, DWORD PTR __Mid$1$[esp+112]
$LN6@Insertion_:

; 6932 :                 }
; 6933 : 
; 6934 :                 *_Hole = _STD move(_Val); // insert element in hole

	mov	edi, DWORD PTR __Hole$1$[esp+112]
	mov	ebx, DWORD PTR tv186[esp+112]
$LN28@Insertion_:

; 6922 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

	mov	eax, DWORD PTR __Last$1$[esp+112]
	lea	esi, DWORD PTR __Val$1[esp+112]
	add	ebp, 76					; 0000004cH
	add	ebx, 76					; 0000004cH
	mov	DWORD PTR __Mid$1$[esp+112], ebp
	mov	ecx, 19					; 00000013H
	mov	DWORD PTR tv186[esp+112], ebx
	rep movsd
	cmp	ebp, eax
	jne	$LL2@Insertion_

; 6935 :             }
; 6936 :         }
; 6937 :     }
; 6938 : 
; 6939 :     return _Last;

	pop	edi
	pop	esi
	pop	ebx
$LN27@Insertion_:
	pop	ebp
$LN3@Insertion_:

; 6940 : }

	add	esp, 96					; 00000060H
	ret	0
??$_Insertion_sort_unchecked@PAU_MatrixItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAPAU_MatrixItem@R_dsgraph@@QAU12@0P6A_NABU12@1@Z@Z ENDP ; std::_Insertion_sort_unchecked<R_dsgraph::_MatrixItem *,bool (__cdecl*)(R_dsgraph::_MatrixItem const &,R_dsgraph::_MatrixItem const &)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Make_heap_unchecked@PAU_MatrixItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_MatrixItem@R_dsgraph@@0P6A_NABU12@1@Z@Z
_TEXT	SEGMENT
__Hole$1$ = -96						; size = 4
__Max_sequence_non_leaf$1$ = -92			; size = 4
__Bottom$1$ = -88					; size = 4
tv276 = -84						; size = 4
tv273 = -80						; size = 4
__Val$1 = -76						; size = 76
__Pred$ = 8						; size = 4
??$_Make_heap_unchecked@PAU_MatrixItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_MatrixItem@R_dsgraph@@0P6A_NABU12@1@Z@Z PROC ; std::_Make_heap_unchecked<R_dsgraph::_MatrixItem *,bool (__cdecl*)(R_dsgraph::_MatrixItem const &,R_dsgraph::_MatrixItem const &)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 5544 : _CONSTEXPR20 void _Make_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

	sub	esp, 96					; 00000060H
	push	ebp
	mov	ebp, ecx

; 5545 :     // make [_First, _Last) into a heap
; 5546 :     using _Diff   = _Iter_diff_t<_RanIt>;
; 5547 :     _Diff _Bottom = _Last - _First;

	sub	edx, ebp
	sar	edx, 2
	imul	eax, edx, 678152731

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	mov	edx, eax
	mov	DWORD PTR __Bottom$1$[esp+100], eax
	sar	edx, 1
	test	edx, edx
	jle	$LN3@Make_heap_

; 5545 :     // make [_First, _Last) into a heap
; 5546 :     using _Diff   = _Iter_diff_t<_RanIt>;
; 5547 :     _Diff _Bottom = _Last - _First;

	push	ebx
	dec	eax
	imul	ebx, edx, 76
	mov	DWORD PTR tv276[esp+104], eax
	sar	eax, 1
	push	esi
	push	edi
	mov	DWORD PTR __Max_sequence_non_leaf$1$[esp+112], eax
	add	ebx, ebp
$LL2@Make_heap_:

; 5386 :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

	mov	eax, DWORD PTR __Max_sequence_non_leaf$1$[esp+112]

; 5549 :         // reheap top half, bottom to top
; 5550 :         --_Hole;
; 5551 :         _Iter_value_t<_RanIt> _Val = _STD move(*(_First + _Hole));

	lea	edi, DWORD PTR __Val$1[esp+112]
	sub	ebx, 76					; 0000004cH
	dec	edx
	mov	DWORD PTR tv273[esp+112], ebx
	mov	esi, ebx
	mov	DWORD PTR __Hole$1$[esp+112], edx
	mov	ecx, 19					; 00000013H

; 5381 :     _Diff _Idx       = _Hole;

	mov	ebx, edx

; 5549 :         // reheap top half, bottom to top
; 5550 :         --_Hole;
; 5551 :         _Iter_value_t<_RanIt> _Val = _STD move(*(_First + _Hole));

	rep movsd

; 5552 :         _Pop_heap_hole_by_index(_First, _Hole, _Bottom, _STD move(_Val), _Pred);

	mov	edi, edx

; 5386 :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

	cmp	edx, eax
	jge	SHORT $LN8@Make_heap_
	npad	7
$LL7@Make_heap_:

; 5387 :         _Idx = 2 * _Idx + 2;

	lea	ebx, DWORD PTR [ebx*2+2]

; 5388 :         if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1)))) {

	imul	ecx, ebx, 76
	add	ecx, ebp
	lea	eax, DWORD PTR [ecx-76]
	push	eax
	push	ecx
	call	DWORD PTR __Pred$[esp+116]
	add	esp, 8
	test	al, al
	je	SHORT $LN9@Make_heap_

; 5389 :             --_Idx;

	dec	ebx
$LN9@Make_heap_:

; 5382 : 
; 5383 :     // Check whether _Idx can have a child before calculating that child's index, since
; 5384 :     // calculating the child's index can trigger integer overflows
; 5385 :     const _Diff _Max_sequence_non_leaf = (_Bottom - 1) >> 1; // shift for codegen
; 5386 :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

	mov	eax, DWORD PTR __Max_sequence_non_leaf$1$[esp+112]

; 5390 :         }
; 5391 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	ecx, 19					; 00000013H
	imul	edi, edi, 76
	imul	esi, ebx, 76
	add	edi, ebp
	add	esi, ebp
	rep movsd

; 5392 :         _Hole             = _Idx;

	mov	edi, ebx
	cmp	ebx, eax
	jl	SHORT $LL7@Make_heap_
	mov	edx, DWORD PTR __Hole$1$[esp+112]
$LN8@Make_heap_:

; 5393 :     }
; 5394 : 
; 5395 :     if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it

	cmp	ebx, eax
	jne	SHORT $LN10@Make_heap_
	mov	eax, DWORD PTR __Bottom$1$[esp+112]
	test	al, 1
	jne	SHORT $LN10@Make_heap_

; 5396 :         *(_First + _Hole) = _STD move(*(_First + (_Bottom - 1)));

	imul	eax, eax, 76
	lea	esi, DWORD PTR [ebp-76]
	imul	edi, edi, 76
	mov	ecx, 19					; 00000013H
	add	esi, eax
	add	edi, ebp
	rep movsd

; 5397 :         _Hole             = _Bottom - 1;

	mov	edi, DWORD PTR tv276[esp+112]
$LN10@Make_heap_:

; 5268 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

	cmp	edx, edi
	jge	SHORT $LN29@Make_heap_
$LL15@Make_heap_:

; 5267 :     for (_Diff _Idx = (_Hole - 1) >> 1; // shift for codegen

	lea	ebx, DWORD PTR [edi-1]
	sar	ebx, 1

; 5268 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

	lea	eax, DWORD PTR __Val$1[esp+112]
	imul	esi, ebx, 76
	push	eax
	add	esi, ebp
	push	esi
	call	DWORD PTR __Pred$[esp+116]
	mov	edx, DWORD PTR __Hole$1$[esp+120]
	add	esp, 8
	test	al, al
	je	SHORT $LN29@Make_heap_

; 5269 :          _Idx = (_Hole - 1) >> 1) { // shift for codegen
; 5270 :         // move _Hole up to parent
; 5271 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	imul	edi, edi, 76
	mov	ecx, 19					; 00000013H
	add	edi, ebp
	rep movsd

; 5272 :         _Hole             = _Idx;

	mov	edi, ebx
	cmp	edx, ebx
	jl	SHORT $LL15@Make_heap_
$LN29@Make_heap_:

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	mov	ebx, DWORD PTR tv273[esp+112]

; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	lea	esi, DWORD PTR __Val$1[esp+112]
	imul	edi, edi, 76
	mov	ecx, 19					; 00000013H
	add	edi, ebp
	rep movsd

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	test	edx, edx
	jg	$LL2@Make_heap_
	pop	edi
	pop	esi
	pop	ebx
$LN3@Make_heap_:
	pop	ebp

; 5553 :     }
; 5554 : }

	add	esp, 96					; 00000060H
	ret	0
??$_Make_heap_unchecked@PAU_MatrixItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_MatrixItem@R_dsgraph@@0P6A_NABU12@1@Z@Z ENDP ; std::_Make_heap_unchecked<R_dsgraph::_MatrixItem *,bool (__cdecl*)(R_dsgraph::_MatrixItem const &,R_dsgraph::_MatrixItem const &)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Sort_heap_unchecked@PAU_MatrixItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_MatrixItem@R_dsgraph@@0P6A_NABU12@1@Z@Z
_TEXT	SEGMENT
__Val$1 = -76						; size = 76
__Pred$ = 8						; size = 4
??$_Sort_heap_unchecked@PAU_MatrixItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_MatrixItem@R_dsgraph@@0P6A_NABU12@1@Z@Z PROC ; std::_Sort_heap_unchecked<R_dsgraph::_MatrixItem *,bool (__cdecl*)(R_dsgraph::_MatrixItem const &,R_dsgraph::_MatrixItem const &)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 5772 : _CONSTEXPR20 void _Sort_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

	sub	esp, 76					; 0000004cH
	push	ebp
	push	esi
	mov	ebp, ecx

; 5773 :     // order heap by repeatedly popping
; 5774 :     for (; _Last - _First >= 2; --_Last) {

	mov	esi, edx
	sub	esi, ebp
	cmp	esi, 152				; 00000098H
	jl	SHORT $LN3@Sort_heap_
	push	ebx
	push	edi
	lea	ebx, DWORD PTR [edx-76]
	npad	8
$LL4@Sort_heap_:

; 5417 :     if (2 <= _Last - _First) {

	mov	eax, -1356305461			; af286bcbH
	mul	esi
	sub	esi, edx
	shr	esi, 1
	add	esi, edx
	shr	esi, 6
	cmp	esi, 2
	mov	esi, ebx
	jl	SHORT $LN16@Sort_heap_

; 5410 :     _Pop_heap_hole_by_index(

	push	DWORD PTR __Pred$[esp+88]

; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	ecx, 19					; 00000013H
	lea	edi, DWORD PTR __Val$1[esp+96]
	rep movsd

; 5408 :     *_Dest      = _STD move(*_First);

	mov	ecx, 19					; 00000013H

; 5409 :     using _Diff = _Iter_diff_t<_RanIt>;
; 5410 :     _Pop_heap_hole_by_index(

	lea	eax, DWORD PTR __Val$1[esp+96]
	mov	esi, ebp
	mov	edi, ebx
	rep movsd
	push	eax
	mov	esi, ebx
	xor	edx, edx
	sub	esi, ebp
	mov	ecx, ebp
	mov	eax, esi
	sar	eax, 2
	imul	eax, eax, 678152731
	push	eax
	call	??$_Pop_heap_hole_by_index@PAU_MatrixItem@R_dsgraph@@U12@P6A_NABU12@0@Z@std@@YAXPAU_MatrixItem@R_dsgraph@@HH$$QAU12@P6A_NABU12@2@Z@Z ; std::_Pop_heap_hole_by_index<R_dsgraph::_MatrixItem *,R_dsgraph::_MatrixItem,bool (__cdecl*)(R_dsgraph::_MatrixItem const &,R_dsgraph::_MatrixItem const &)>
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN2@Sort_heap_
$LN16@Sort_heap_:
	sub	esi, ebp
$LN2@Sort_heap_:

; 5773 :     // order heap by repeatedly popping
; 5774 :     for (; _Last - _First >= 2; --_Last) {

	sub	ebx, 76					; 0000004cH
	cmp	esi, 152				; 00000098H
	jge	SHORT $LL4@Sort_heap_
	pop	edi
	pop	ebx
$LN3@Sort_heap_:
	pop	esi

; 5775 :         _Pop_heap_unchecked(_First, _Last, _Pred);
; 5776 :     }
; 5777 : }

	pop	ebp
	add	esp, 76					; 0000004cH
	ret	0
??$_Sort_heap_unchecked@PAU_MatrixItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_MatrixItem@R_dsgraph@@0P6A_NABU12@1@Z@Z ENDP ; std::_Sort_heap_unchecked<R_dsgraph::_MatrixItem *,bool (__cdecl*)(R_dsgraph::_MatrixItem const &,R_dsgraph::_MatrixItem const &)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Partition_by_median_guess_unchecked@PAU_MatrixItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YA?AU?$pair@PAU_MatrixItem@R_dsgraph@@PAU12@@0@PAU_MatrixItem@R_dsgraph@@0P6A_NABU23@1@Z@Z
_TEXT	SEGMENT
__Plast$1$ = -584					; size = 4
tv530 = -580						; size = 4
tv529 = -580						; size = 4
tv524 = -580						; size = 4
$T1 = -580						; size = 4
__Last$1$ = -580					; size = 4
$T2 = -576						; size = 4
__Gfirst$1$ = -576					; size = 4
__Glast$1$ = -572					; size = 4
__First$1$ = -568					; size = 4
___$ReturnUdt$1$ = -564					; size = 4
__Tmp$3 = -560						; size = 76
__Tmp$4 = -480						; size = 76
__Tmp$5 = -400						; size = 76
__Tmp$6 = -320						; size = 76
__Tmp$7 = -240						; size = 76
__Tmp$8 = -160						; size = 76
__Tmp$9 = -80						; size = 76
__Last$ = 8						; size = 4
__Pred$ = 12						; size = 4
??$_Partition_by_median_guess_unchecked@PAU_MatrixItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YA?AU?$pair@PAU_MatrixItem@R_dsgraph@@PAU12@@0@PAU_MatrixItem@R_dsgraph@@0P6A_NABU23@1@Z@Z PROC ; std::_Partition_by_median_guess_unchecked<R_dsgraph::_MatrixItem *,bool (__cdecl*)(R_dsgraph::_MatrixItem const &,R_dsgraph::_MatrixItem const &)>, COMDAT
; ___$ReturnUdt$ = ecx
; __First$ = edx

; 6976 : _CONSTEXPR20 pair<_RanIt, _RanIt> _Partition_by_median_guess_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 588				; 0000024cH
	push	ebx
	push	esi

; 6977 :     // partition [_First, _Last)
; 6978 :     _RanIt _Mid = _First + ((_Last - _First) >> 1); // shift for codegen

	mov	esi, DWORD PTR __Last$[ebp]
	mov	eax, esi
	sub	eax, edx
	mov	DWORD PTR __First$1$[esp+596], edx
	sar	eax, 2

; 6979 :     _Guess_median_unchecked(_First, _Mid, _Prev_iter(_Last), _Pred);

	add	esi, -76				; ffffffb4H
	imul	eax, eax, 678152731
	push	edi

; 6963 :     if (40 < _Count) { // Tukey's ninther

	mov	edi, DWORD PTR __Pred$[ebp]

; 6976 : _CONSTEXPR20 pair<_RanIt, _RanIt> _Partition_by_median_guess_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

	mov	DWORD PTR ___$ReturnUdt$1$[esp+600], ecx

; 6979 :     _Guess_median_unchecked(_First, _Mid, _Prev_iter(_Last), _Pred);

	mov	DWORD PTR __Last$1$[esp+600], esi
	sar	eax, 1
	imul	ebx, eax, 76

; 6962 :     const _Diff _Count = _Last - _First;

	mov	eax, esi
	sub	eax, edx
	sar	eax, 2
	imul	eax, eax, 678152731

; 6977 :     // partition [_First, _Last)
; 6978 :     _RanIt _Mid = _First + ((_Last - _First) >> 1); // shift for codegen

	add	ebx, edx

; 6963 :     if (40 < _Count) { // Tukey's ninther

	cmp	eax, 40					; 00000028H
	jle	SHORT $LN35@Partition_

; 6964 :         const _Diff _Step     = (_Count + 1) >> 3; // +1 can't overflow because range was made inclusive in caller
; 6965 :         const _Diff _Two_step = _Step << 1; // note: intentionally discards low-order bit
; 6966 :         _Med3_unchecked(_First, _First + _Step, _First + _Two_step, _Pred);

	push	DWORD PTR __Pred$[ebp]
	inc	eax
	sar	eax, 3
	imul	esi, eax, 76
	imul	edi, eax, 152
	lea	ecx, DWORD PTR [esi+edx]
	lea	eax, DWORD PTR [edi+edx]
	mov	DWORD PTR $T2[esp+604], ecx
	mov	edx, ecx
	mov	ecx, DWORD PTR __First$1$[esp+604]
	push	eax
	call	??$_Med3_unchecked@PAU_MatrixItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_MatrixItem@R_dsgraph@@00P6A_NABU12@1@Z@Z ; std::_Med3_unchecked<R_dsgraph::_MatrixItem *,bool (__cdecl*)(R_dsgraph::_MatrixItem const &,R_dsgraph::_MatrixItem const &)>

; 6967 :         _Med3_unchecked(_Mid - _Step, _Mid, _Mid + _Step, _Pred);

	push	DWORD PTR __Pred$[ebp]
	lea	eax, DWORD PTR [esi+ebx]
	mov	ecx, ebx
	push	eax
	sub	ecx, esi
	mov	edx, ebx
	call	??$_Med3_unchecked@PAU_MatrixItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_MatrixItem@R_dsgraph@@00P6A_NABU12@1@Z@Z ; std::_Med3_unchecked<R_dsgraph::_MatrixItem *,bool (__cdecl*)(R_dsgraph::_MatrixItem const &,R_dsgraph::_MatrixItem const &)>

; 6968 :         _Med3_unchecked(_Last - _Two_step, _Last - _Step, _Last, _Pred);

	mov	eax, DWORD PTR __Last$1$[esp+616]
	mov	ecx, eax
	push	DWORD PTR __Pred$[ebp]
	sub	ecx, esi
	push	eax
	sub	eax, edi
	mov	DWORD PTR $T1[esp+624], ecx
	mov	edx, ecx
	mov	ecx, eax
	call	??$_Med3_unchecked@PAU_MatrixItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_MatrixItem@R_dsgraph@@00P6A_NABU12@1@Z@Z ; std::_Med3_unchecked<R_dsgraph::_MatrixItem *,bool (__cdecl*)(R_dsgraph::_MatrixItem const &,R_dsgraph::_MatrixItem const &)>

; 6969 :         _Med3_unchecked(_First + _Step, _Mid, _Last - _Step, _Pred);
; 6970 :     } else {

	mov	edi, DWORD PTR __Pred$[ebp]
	add	esp, 24					; 00000018H
	mov	esi, DWORD PTR $T1[esp+600]
	mov	ecx, DWORD PTR $T2[esp+600]
	jmp	SHORT $LN36@Partition_
$LN35@Partition_:

; 6971 :         _Med3_unchecked(_First, _Mid, _Last, _Pred);

	mov	ecx, edx
$LN36@Partition_:

; 6980 :     _RanIt _Pfirst = _Mid;

	push	edi
	push	esi
	mov	edx, ebx
	call	??$_Med3_unchecked@PAU_MatrixItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_MatrixItem@R_dsgraph@@00P6A_NABU12@1@Z@Z ; std::_Med3_unchecked<R_dsgraph::_MatrixItem *,bool (__cdecl*)(R_dsgraph::_MatrixItem const &,R_dsgraph::_MatrixItem const &)>
	add	esp, 8

; 6981 :     _RanIt _Plast  = _Next_iter(_Pfirst);

	lea	esi, DWORD PTR [ebx+76]
	mov	DWORD PTR __Plast$1$[esp+600], esi

; 6982 : 
; 6983 :     while (_First < _Pfirst && !_DEBUG_LT_PRED(_Pred, *_Prev_iter(_Pfirst), *_Pfirst)
; 6984 :            && !_Pred(*_Pfirst, *_Prev_iter(_Pfirst))) {

	cmp	DWORD PTR __First$1$[esp+600], ebx
	jae	SHORT $LN70@Partition_
	mov	esi, DWORD PTR __First$1$[esp+600]
	npad	4
$LL2@Partition_:
	lea	eax, DWORD PTR [ebx-76]
	push	ebx
	push	eax
	mov	DWORD PTR tv530[esp+608], eax
	call	edi
	add	esp, 8
	test	al, al
	jne	SHORT $LN94@Partition_
	push	DWORD PTR tv530[esp+600]
	push	ebx
	call	edi
	add	esp, 8
	test	al, al
	jne	SHORT $LN94@Partition_

; 6985 :         --_Pfirst;

	mov	ebx, DWORD PTR tv530[esp+600]
	cmp	esi, ebx
	jb	SHORT $LL2@Partition_
$LN94@Partition_:
	mov	esi, DWORD PTR __Plast$1$[esp+600]
$LN70@Partition_:

; 6986 :     }
; 6987 : 
; 6988 :     while (_Plast < _Last && !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst) && !_Pred(*_Pfirst, *_Plast)) {

	mov	ecx, DWORD PTR __Last$[ebp]
	cmp	esi, ecx
	jae	SHORT $LN5@Partition_
$LL4@Partition_:
	push	ebx
	push	esi
	call	edi
	add	esp, 8
	test	al, al
	jne	SHORT $LN102@Partition_
	push	esi
	push	ebx
	call	edi
	mov	ecx, DWORD PTR __Last$[ebp]
	add	esp, 8
	test	al, al
	jne	SHORT $LN95@Partition_

; 6989 :         ++_Plast;

	add	esi, 76					; 0000004cH
	cmp	esi, ecx
	jb	SHORT $LL4@Partition_

; 6986 :     }
; 6987 : 
; 6988 :     while (_Plast < _Last && !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst) && !_Pred(*_Pfirst, *_Plast)) {

	jmp	SHORT $LN95@Partition_
$LN102@Partition_:
	mov	ecx, DWORD PTR __Last$[ebp]
$LN95@Partition_:
	mov	DWORD PTR __Plast$1$[esp+600], esi
$LN5@Partition_:

; 6990 :     }
; 6991 : 
; 6992 :     _RanIt _Gfirst = _Plast;

	mov	eax, esi

; 6993 :     _RanIt _Glast  = _Pfirst;

	mov	edx, ebx
$LN105@Partition_:

; 6994 : 
; 6995 :     for (;;) { // partition
; 6996 :         for (; _Gfirst < _Last; ++_Gfirst) {

	mov	DWORD PTR __Glast$1$[esp+600], edx
$LN104@Partition_:
	mov	DWORD PTR __Gfirst$1$[esp+600], eax
$LL6@Partition_:
	cmp	eax, ecx
	jae	SHORT $LN74@Partition_
	npad	4
$LL11@Partition_:

; 6997 :             if (_DEBUG_LT_PRED(_Pred, *_Pfirst, *_Gfirst)) {

	push	eax
	push	ebx
	call	edi
	add	esp, 8
	test	al, al
	jne	SHORT $LN98@Partition_

; 6998 :                 continue;
; 6999 :             } else if (_Pred(*_Gfirst, *_Pfirst)) {

	push	ebx
	push	DWORD PTR __Gfirst$1$[esp+604]
	call	edi
	add	esp, 8
	test	al, al
	jne	SHORT $LN96@Partition_

; 7000 :                 break;
; 7001 :             } else if (_Plast != _Gfirst) {

	mov	eax, DWORD PTR __Gfirst$1$[esp+600]
	lea	ecx, DWORD PTR [esi+76]
	mov	DWORD PTR tv529[esp+600], ecx
	cmp	esi, eax
	je	SHORT $LN19@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, 19					; 00000013H
	lea	edi, DWORD PTR __Tmp$3[esp+600]
	rep movsd

; 101  :     _Left    = _STD move(_Right);

	mov	edi, DWORD PTR __Plast$1$[esp+600]
	mov	ecx, 19					; 00000013H
	mov	esi, eax
	rep movsd

; 102  :     _Right   = _STD move(_Tmp);

	mov	ecx, 19					; 00000013H
	lea	esi, DWORD PTR __Tmp$3[esp+600]
	mov	edi, eax
	rep movsd
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7003 :                 ++_Plast;

	mov	esi, DWORD PTR tv529[esp+600]

; 7004 :             } else {

	mov	edi, DWORD PTR __Pred$[ebp]
	mov	DWORD PTR __Plast$1$[esp+600], esi
	jmp	SHORT $LN9@Partition_
$LN19@Partition_:

; 7005 :                 ++_Plast;

	mov	esi, ecx
	mov	DWORD PTR __Plast$1$[esp+600], esi
	jmp	SHORT $LN9@Partition_
$LN98@Partition_:

; 6997 :             if (_DEBUG_LT_PRED(_Pred, *_Pfirst, *_Gfirst)) {

	mov	eax, DWORD PTR __Gfirst$1$[esp+600]
$LN9@Partition_:

; 6994 : 
; 6995 :     for (;;) { // partition
; 6996 :         for (; _Gfirst < _Last; ++_Gfirst) {

	add	eax, 76					; 0000004cH
	mov	DWORD PTR __Gfirst$1$[esp+600], eax
	cmp	eax, DWORD PTR __Last$[ebp]
	jb	SHORT $LL11@Partition_
$LN96@Partition_:
	mov	edx, DWORD PTR __Glast$1$[esp+600]
$LN74@Partition_:

; 7006 :             }
; 7007 :         }
; 7008 : 
; 7009 :         for (; _First < _Glast; --_Glast) {

	mov	esi, DWORD PTR __First$1$[esp+600]
	cmp	edx, esi
	jbe	SHORT $LN103@Partition_
	lea	eax, DWORD PTR [edx-76]
	mov	DWORD PTR tv524[esp+600], eax
$LL14@Partition_:

; 7010 :             if (_DEBUG_LT_PRED(_Pred, *_Prev_iter(_Glast), *_Pfirst)) {

	push	ebx
	push	eax
	call	edi
	add	esp, 8
	test	al, al
	jne	SHORT $LN99@Partition_

; 7011 :                 continue;
; 7012 :             } else if (_Pred(*_Pfirst, *_Prev_iter(_Glast))) {

	push	DWORD PTR tv524[esp+600]
	push	ebx
	call	edi
	add	esp, 8
	test	al, al
	jne	SHORT $LN100@Partition_

; 7013 :                 break;
; 7014 :             } else if (--_Pfirst != _Prev_iter(_Glast)) {

	mov	eax, DWORD PTR tv524[esp+600]
	sub	ebx, 76					; 0000004cH
	cmp	ebx, eax
	je	SHORT $LN12@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, 19					; 00000013H
	lea	edi, DWORD PTR __Tmp$4[esp+600]
	mov	esi, ebx
	rep movsd

; 101  :     _Left    = _STD move(_Right);

	mov	ecx, 19					; 00000013H
	mov	esi, eax
	mov	edi, ebx
	rep movsd

; 102  :     _Right   = _STD move(_Tmp);

	mov	ecx, 19					; 00000013H
	lea	esi, DWORD PTR __Tmp$4[esp+600]
	mov	edi, eax
	rep movsd
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7010 :             if (_DEBUG_LT_PRED(_Pred, *_Prev_iter(_Glast), *_Pfirst)) {

	mov	edi, DWORD PTR __Pred$[ebp]
	mov	esi, DWORD PTR __First$1$[esp+600]
	jmp	SHORT $LN12@Partition_
$LN99@Partition_:
	mov	eax, DWORD PTR tv524[esp+600]
$LN12@Partition_:

; 7006 :             }
; 7007 :         }
; 7008 : 
; 7009 :         for (; _First < _Glast; --_Glast) {

	mov	edx, DWORD PTR __Glast$1$[esp+600]
	sub	eax, 76					; 0000004cH
	sub	edx, 76					; 0000004cH
	mov	DWORD PTR tv524[esp+600], eax
	mov	DWORD PTR __Glast$1$[esp+600], edx
	cmp	esi, edx
	jb	SHORT $LL14@Partition_

; 7011 :                 continue;
; 7012 :             } else if (_Pred(*_Pfirst, *_Prev_iter(_Glast))) {

	jmp	SHORT $LN75@Partition_
$LN100@Partition_:
	mov	edx, DWORD PTR __Glast$1$[esp+600]
$LN75@Partition_:

; 7015 :                 _STD iter_swap(_Pfirst, _Prev_iter(_Glast));
; 7016 :             }
; 7017 :         }
; 7018 : 
; 7019 :         if (_Glast == _First && _Gfirst == _Last) {

	cmp	edx, esi
$LN103@Partition_:
	mov	eax, DWORD PTR __Gfirst$1$[esp+600]
	jne	$LN27@Partition_
	mov	edx, DWORD PTR __Plast$1$[esp+600]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	$LN76@Partition_

; 7020 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);
; 7021 :         }
; 7022 : 
; 7023 :         if (_Glast == _First) { // no room at bottom, rotate pivot upward
; 7024 :             if (_Plast != _Gfirst) {

	cmp	edx, eax
	je	SHORT $LN29@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, 19					; 00000013H
	lea	edi, DWORD PTR __Tmp$5[esp+600]
	mov	esi, ebx
	rep movsd

; 101  :     _Left    = _STD move(_Right);

	mov	ecx, 19					; 00000013H
	mov	esi, edx
	mov	edi, ebx
	rep movsd

; 102  :     _Right   = _STD move(_Tmp);

	mov	ecx, 19					; 00000013H
	lea	esi, DWORD PTR __Tmp$5[esp+600]
	mov	edi, edx
	rep movsd
$LN29@Partition_:

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	esi, ebx
	lea	edi, DWORD PTR __Tmp$6[esp+600]
	mov	ecx, 19					; 00000013H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7028 :             ++_Plast;

	add	edx, 76					; 0000004cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	rep movsd

; 101  :     _Left    = _STD move(_Right);

	mov	esi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7028 :             ++_Plast;

	mov	DWORD PTR __Plast$1$[esp+600], edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 101  :     _Left    = _STD move(_Right);

	mov	edi, ebx
	mov	ecx, 19					; 00000013H
	rep movsd

; 102  :     _Right   = _STD move(_Tmp);

	mov	edi, eax
	lea	esi, DWORD PTR __Tmp$6[esp+600]
	mov	ecx, 19					; 00000013H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7030 :             ++_Pfirst;

	add	ebx, 76					; 0000004cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 102  :     _Right   = _STD move(_Tmp);

	rep movsd
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7031 :             ++_Gfirst;

	mov	edi, DWORD PTR __Pred$[ebp]
	mov	esi, edx
	mov	edx, DWORD PTR __Glast$1$[esp+600]
	add	eax, 76					; 0000004cH
	mov	ecx, DWORD PTR __Last$[ebp]
	jmp	$LN104@Partition_
$LN27@Partition_:

; 7032 :         } else if (_Gfirst == _Last) { // no room at top, rotate pivot downward

	add	edx, -76				; ffffffb4H
	mov	DWORD PTR __Glast$1$[esp+600], edx
	cmp	eax, DWORD PTR __Last$[ebp]
	jne	SHORT $LN30@Partition_

; 7033 :             if (--_Glast != --_Pfirst) {

	sub	ebx, 76					; 0000004cH
	cmp	edx, ebx
	je	SHORT $LN32@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, 19					; 00000013H
	lea	edi, DWORD PTR __Tmp$7[esp+600]
	mov	esi, edx
	rep movsd

; 101  :     _Left    = _STD move(_Right);

	mov	ecx, 19					; 00000013H
	mov	esi, ebx
	mov	edi, edx
	rep movsd

; 102  :     _Right   = _STD move(_Tmp);

	mov	ecx, 19					; 00000013H
	lea	esi, DWORD PTR __Tmp$7[esp+600]
	mov	edi, ebx
	rep movsd
$LN32@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7037 :             _STD iter_swap(_Pfirst, --_Plast);

	mov	edx, DWORD PTR __Plast$1$[esp+600]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	lea	edi, DWORD PTR __Tmp$8[esp+600]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7037 :             _STD iter_swap(_Pfirst, --_Plast);

	sub	edx, 76					; 0000004cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, 19					; 00000013H
	mov	esi, ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7037 :             _STD iter_swap(_Pfirst, --_Plast);

	mov	DWORD PTR __Plast$1$[esp+600], edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	rep movsd

; 101  :     _Left    = _STD move(_Right);

	mov	esi, edx
	mov	ecx, 19					; 00000013H
	mov	edi, ebx
	rep movsd

; 102  :     _Right   = _STD move(_Tmp);

	mov	edi, edx
	lea	esi, DWORD PTR __Tmp$8[esp+600]
	mov	ecx, 19					; 00000013H
	rep movsd
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7038 :         } else {

	mov	edi, DWORD PTR __Pred$[ebp]
	mov	esi, edx
	mov	edx, DWORD PTR __Glast$1$[esp+600]
	mov	ecx, DWORD PTR __Last$[ebp]
	jmp	$LL6@Partition_
$LN30@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	esi, eax
	lea	edi, DWORD PTR __Tmp$9[esp+600]
	mov	ecx, 19					; 00000013H
	rep movsd

; 101  :     _Left    = _STD move(_Right);

	mov	edi, eax
	mov	ecx, 19					; 00000013H
	mov	esi, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7040 :             ++_Gfirst;

	add	eax, 76					; 0000004cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 101  :     _Left    = _STD move(_Right);

	rep movsd

; 102  :     _Right   = _STD move(_Tmp);

	mov	ecx, 19					; 00000013H
	lea	esi, DWORD PTR __Tmp$9[esp+600]
	mov	edi, edx
	rep movsd
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7042 :     }

	mov	esi, DWORD PTR __Plast$1$[esp+600]
	mov	edi, DWORD PTR __Pred$[ebp]
	mov	ecx, DWORD PTR __Last$[ebp]
	jmp	$LN105@Partition_
$LN76@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	eax, DWORD PTR ___$ReturnUdt$1$[esp+600]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7043 : }

	pop	edi
	pop	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	DWORD PTR [eax], ebx
	mov	DWORD PTR [eax+4], edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7043 : }

	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Partition_by_median_guess_unchecked@PAU_MatrixItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YA?AU?$pair@PAU_MatrixItem@R_dsgraph@@PAU12@@0@PAU_MatrixItem@R_dsgraph@@0P6A_NABU23@1@Z@Z ENDP ; std::_Partition_by_median_guess_unchecked<R_dsgraph::_MatrixItem *,bool (__cdecl*)(R_dsgraph::_MatrixItem const &,R_dsgraph::_MatrixItem const &)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@std@@@std@@@0@0@Z
_TEXT	SEGMENT
??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@std@@@std@@@0@0@Z PROC ; std::_Adl_verify_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<unsigned int,resptr_core<CTexture,resptrcode_texture> > > > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<unsigned int,resptr_core<CTexture,resptrcode_texture> > > > > >, COMDAT
; __First$dead$ = ecx
; __Last$dead$ = edx

; 1259 :     // check that [_First, _Last) forms an iterator range
; 1260 :     if constexpr (_Range_verifiable_v<_Iter, _Sentinel>) {
; 1261 :         _Verify_range(_First, _Last);
; 1262 :     }
; 1263 : }

	ret	0
??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@std@@@std@@@0@0@Z ENDP ; std::_Adl_verify_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<unsigned int,resptr_core<CTexture,resptrcode_texture> > > > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<unsigned int,resptr_core<CTexture,resptrcode_texture> > > > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Lex_compare_unchecked@PAU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@PAU12@U?$less@X@2@@std@@YA_NPAU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@0@000U?$less@X@0@U?$_Lex_compare_optimize@X@0@@Z
_TEXT	SEGMENT
__First2$ = 8						; size = 4
__Last2$ = 12						; size = 4
__Pred$ = 16						; size = 1
___formal$ = 20						; size = 1
??$_Lex_compare_unchecked@PAU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@PAU12@U?$less@X@2@@std@@YA_NPAU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@0@000U?$less@X@0@U?$_Lex_compare_optimize@X@0@@Z PROC ; std::_Lex_compare_unchecked<std::pair<unsigned int,resptr_core<CTexture,resptrcode_texture> > *,std::pair<unsigned int,resptr_core<CTexture,resptrcode_texture> > *,std::less<void> >, COMDAT
; __First1$ = ecx
; __Last1$ = edx

; 4986 :     _InIt1 _First1, _InIt1 _Last1, _InIt2 _First2, _InIt2 _Last2, _Pr _Pred, _Lex_compare_optimize<void>) {

	push	ebx
	push	esi

; 4988 :     for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, (void) ++_First2) { // something to compare, do it

	mov	esi, DWORD PTR __First2$[esp+4]
	mov	ebx, edx
	push	edi
	mov	edi, DWORD PTR __Last2$[esp+8]
	cmp	ecx, ebx
	je	SHORT $LN51@Lex_compar
$LL4@Lex_compar:
	cmp	esi, edi
	je	SHORT $LN9@Lex_compar
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 362  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [esi]
	jb	SHORT $LN42@Lex_compar
	ja	SHORT $LN9@Lex_compar
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [esi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 362  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

	jb	SHORT $LN42@Lex_compar
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

	mov	eax, DWORD PTR [esi+4]
	cmp	eax, DWORD PTR [ecx+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 362  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

	jb	SHORT $LN9@Lex_compar
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4988 :     for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, (void) ++_First2) { // something to compare, do it

	add	ecx, 8
	add	esi, 8
	cmp	ecx, ebx
	jne	SHORT $LL4@Lex_compar
$LN51@Lex_compar:

; 4989 :         if (_DEBUG_LT_PRED(_Pred, *_First1, *_First2)) {
; 4990 :             return true;
; 4991 :         } else if (_Pred(*_First2, *_First1)) {
; 4992 :             return false;
; 4993 :         }
; 4994 :     }
; 4995 : 
; 4996 :     return _First1 == _Last1 && _First2 != _Last2;

	cmp	esi, edi
	jne	SHORT $LN42@Lex_compar
$LN9@Lex_compar:
	pop	edi

; 4997 : }

	pop	esi
	xor	al, al
	pop	ebx
	ret	0
$LN42@Lex_compar:
	pop	edi
	pop	esi
	mov	al, 1
	pop	ebx
	ret	0
??$_Lex_compare_unchecked@PAU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@PAU12@U?$less@X@2@@std@@YA_NPAU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@0@000U?$less@X@0@U?$_Lex_compare_optimize@X@0@@Z ENDP ; std::_Lex_compare_unchecked<std::pair<unsigned int,resptr_core<CTexture,resptrcode_texture> > *,std::pair<unsigned int,resptr_core<CTexture,resptrcode_texture> > *,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Insertion_sort_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0P6A_NPAU12@1@Z@Z
_TEXT	SEGMENT
__First$1$ = -8						; size = 4
__Last$1$ = -4						; size = 4
__Pred$ = 8						; size = 4
??$_Insertion_sort_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0P6A_NPAU12@1@Z@Z PROC ; std::_Insertion_sort_unchecked<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 6919 : _CONSTEXPR20 _BidIt _Insertion_sort_unchecked(const _BidIt _First, const _BidIt _Last, _Pr _Pred) {

	sub	esp, 8
	push	esi
	mov	eax, edx
	mov	esi, ecx
	mov	DWORD PTR __Last$1$[esp+12], eax
	mov	DWORD PTR __First$1$[esp+12], esi

; 6920 :     // insertion sort [_First, _Last)
; 6921 :     if (_First != _Last) {

	cmp	esi, eax
	je	SHORT $LN3@Insertion_

; 6922 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

	push	edi
	lea	edi, DWORD PTR [esi+4]
	cmp	edi, eax
	je	SHORT $LN27@Insertion_
	push	ebx
	push	ebp
	npad	2
$LL2@Insertion_:

; 6923 :             _BidIt _Hole               = _Mid;
; 6924 :             _Iter_value_t<_BidIt> _Val = _STD move(*_Mid);
; 6925 : 
; 6926 :             if (_DEBUG_LT_PRED(_Pred, _Val, *_First)) { // found new earliest element, move to front

	push	DWORD PTR [esi]
	mov	ebx, DWORD PTR [edi]
	mov	ebp, edi
	push	ebx
	call	DWORD PTR __Pred$[esp+28]
	add	esp, 8
	test	al, al
	je	SHORT $LN9@Insertion_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4254 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	mov	ecx, edi

; 4255 :     auto _Result                = _CSTD memmove(_Dest_ch - _Count, _First_ch, _Count);

	mov	eax, edi
	sub	ecx, esi
	push	ecx
	sub	eax, ecx
	add	eax, 4
	push	esi
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6928 :                 *_First = _STD move(_Val);

	mov	DWORD PTR [esi], ebx

; 6929 :             } else { // look for insertion point after first

	jmp	SHORT $LN10@Insertion_
$LN9@Insertion_:

; 6930 :                 for (_BidIt _Prev = _Hole; _DEBUG_LT_PRED(_Pred, _Val, *--_Prev); _Hole = _Prev) {

	push	DWORD PTR [edi-4]
	lea	esi, DWORD PTR [edi-4]
	push	ebx
	call	DWORD PTR __Pred$[esp+28]
	add	esp, 8
	test	al, al
	je	SHORT $LN6@Insertion_
	npad	2
$LL7@Insertion_:

; 6931 :                     *_Hole = _STD move(*_Prev); // move hole down

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [ebp], eax
	mov	ebp, esi
	push	DWORD PTR [esi-4]
	sub	esi, 4
	push	ebx
	call	DWORD PTR __Pred$[esp+28]
	add	esp, 8
	test	al, al
	jne	SHORT $LL7@Insertion_
$LN6@Insertion_:
	mov	esi, DWORD PTR __First$1$[esp+24]

; 6932 :                 }
; 6933 : 
; 6934 :                 *_Hole = _STD move(_Val); // insert element in hole

	mov	DWORD PTR [ebp], ebx
$LN10@Insertion_:

; 6922 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

	mov	eax, DWORD PTR __Last$1$[esp+24]
	add	edi, 4
	cmp	edi, eax
	jne	SHORT $LL2@Insertion_

; 6935 :             }
; 6936 :         }
; 6937 :     }
; 6938 : 
; 6939 :     return _Last;

	pop	ebp
	pop	ebx
$LN27@Insertion_:
	pop	edi
$LN3@Insertion_:
	pop	esi

; 6940 : }

	add	esp, 8
	ret	0
??$_Insertion_sort_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0P6A_NPAU12@1@Z@Z ENDP ; std::_Insertion_sort_unchecked<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Make_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z
_TEXT	SEGMENT
__Val$1$ = -20						; size = 4
__Max_sequence_non_leaf$1$ = -16			; size = 4
__Hole$1$ = -12						; size = 4
__Bottom$1$ = -8					; size = 4
tv268 = -4						; size = 4
__Pred$ = 8						; size = 4
??$_Make_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z PROC ; std::_Make_heap_unchecked<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 5544 : _CONSTEXPR20 void _Make_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

	sub	esp, 20					; 00000014H
	push	ebx
	mov	eax, edx
	mov	ebx, ecx

; 5545 :     // make [_First, _Last) into a heap
; 5546 :     using _Diff   = _Iter_diff_t<_RanIt>;
; 5547 :     _Diff _Bottom = _Last - _First;

	sub	eax, ebx
	sar	eax, 2
	push	ebp

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	mov	ebp, eax
	mov	DWORD PTR __Bottom$1$[esp+28], eax
	sar	ebp, 1
	test	ebp, ebp
	jle	$LN3@Make_heap_

; 5385 :     const _Diff _Max_sequence_non_leaf = (_Bottom - 1) >> 1; // shift for codegen

	mov	ecx, DWORD PTR __Pred$[esp+24]
	dec	eax
	mov	DWORD PTR tv268[esp+28], eax
	sar	eax, 1
	push	esi
	mov	DWORD PTR __Max_sequence_non_leaf$1$[esp+32], eax
	push	edi
	npad	1
$LL2@Make_heap_:

; 5549 :         // reheap top half, bottom to top
; 5550 :         --_Hole;
; 5551 :         _Iter_value_t<_RanIt> _Val = _STD move(*(_First + _Hole));

	mov	edx, DWORD PTR [ebx+ebp*4-4]
	dec	ebp
	mov	DWORD PTR __Hole$1$[esp+36], ebp

; 5552 :         _Pop_heap_hole_by_index(_First, _Hole, _Bottom, _STD move(_Val), _Pred);

	mov	edi, ebp
	mov	DWORD PTR __Val$1$[esp+36], edx

; 5381 :     _Diff _Idx       = _Hole;

	mov	esi, ebp

; 5386 :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

	cmp	ebp, eax
	jge	SHORT $LN8@Make_heap_
	mov	ebp, DWORD PTR __Max_sequence_non_leaf$1$[esp+36]
	npad	7
$LL7@Make_heap_:

; 5387 :         _Idx = 2 * _Idx + 2;
; 5388 :         if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1)))) {

	push	DWORD PTR [ebx+esi*8+4]
	lea	esi, DWORD PTR [esi*2+2]
	push	DWORD PTR [ebx+esi*4]
	call	ecx
	add	esp, 8
	test	al, al
	je	SHORT $LN9@Make_heap_

; 5389 :             --_Idx;

	dec	esi
$LN9@Make_heap_:

; 5390 :         }
; 5391 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [ebx+esi*4]
	mov	ecx, DWORD PTR __Pred$[esp+32]
	mov	DWORD PTR [ebx+edi*4], eax

; 5392 :         _Hole             = _Idx;

	mov	edi, esi
	cmp	esi, ebp
	jl	SHORT $LL7@Make_heap_
	mov	ebp, DWORD PTR __Hole$1$[esp+36]
	mov	eax, DWORD PTR __Max_sequence_non_leaf$1$[esp+36]
	mov	edx, DWORD PTR __Val$1$[esp+36]
$LN8@Make_heap_:

; 5393 :     }
; 5394 : 
; 5395 :     if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it

	cmp	esi, eax
	jne	SHORT $LN10@Make_heap_
	mov	eax, DWORD PTR __Bottom$1$[esp+36]
	test	al, 1
	jne	SHORT $LN10@Make_heap_

; 5396 :         *(_First + _Hole) = _STD move(*(_First + (_Bottom - 1)));

	mov	eax, DWORD PTR [ebx+eax*4-4]
	mov	DWORD PTR [ebx+edi*4], eax

; 5397 :         _Hole             = _Bottom - 1;

	mov	edi, DWORD PTR tv268[esp+36]
$LN10@Make_heap_:

; 5268 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

	cmp	ebp, edi
	jge	SHORT $LN29@Make_heap_
	npad	1
$LL15@Make_heap_:

; 5267 :     for (_Diff _Idx = (_Hole - 1) >> 1; // shift for codegen

	lea	esi, DWORD PTR [edi-1]
	sar	esi, 1

; 5268 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

	push	edx
	push	DWORD PTR [ebx+esi*4]
	call	ecx
	add	esp, 8
	test	al, al
	je	SHORT $LN29@Make_heap_

; 5269 :          _Idx = (_Hole - 1) >> 1) { // shift for codegen
; 5270 :         // move _Hole up to parent
; 5271 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [ebx+esi*4]
	mov	ecx, DWORD PTR __Pred$[esp+32]
	mov	edx, DWORD PTR __Val$1$[esp+36]
	mov	DWORD PTR [ebx+edi*4], eax

; 5272 :         _Hole             = _Idx;

	mov	edi, esi
	cmp	ebp, esi
	jl	SHORT $LL15@Make_heap_
$LN29@Make_heap_:

; 5273 :     }
; 5274 : 
; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	eax, DWORD PTR __Val$1$[esp+36]

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	mov	ecx, DWORD PTR __Pred$[esp+32]

; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	DWORD PTR [ebx+edi*4], eax

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	mov	eax, DWORD PTR __Max_sequence_non_leaf$1$[esp+36]
	test	ebp, ebp
	jg	$LL2@Make_heap_
	pop	edi
	pop	esi
$LN3@Make_heap_:
	pop	ebp

; 5553 :     }
; 5554 : }

	pop	ebx
	add	esp, 20					; 00000014H
	ret	0
??$_Make_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z ENDP ; std::_Make_heap_unchecked<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Sort_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z
_TEXT	SEGMENT
__Val$1 = -4						; size = 4
__Pred$ = 8						; size = 4
??$_Sort_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z PROC ; std::_Sort_heap_unchecked<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 5772 : _CONSTEXPR20 void _Sort_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

	push	ecx
	push	esi
	push	edi
	mov	esi, edx
	mov	edi, ecx

; 5773 :     // order heap by repeatedly popping
; 5774 :     for (; _Last - _First >= 2; --_Last) {

	sub	esi, edi
	mov	eax, esi
	and	eax, -4					; fffffffcH
	cmp	eax, 8
	jl	SHORT $LN3@Sort_heap_
	push	ebx
	mov	ebx, DWORD PTR __Pred$[esp+12]
	npad	8
$LL4@Sort_heap_:

; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	eax, DWORD PTR [edi+esi-4]

; 5410 :     _Pop_heap_hole_by_index(

	xor	edx, edx

; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	DWORD PTR __Val$1[esp+16], eax

; 5410 :     _Pop_heap_hole_by_index(

	mov	ecx, edi
	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [edi+esi-4], eax
	lea	eax, DWORD PTR __Val$1[esp+16]
	push	ebx
	push	eax
	lea	eax, DWORD PTR [esi-4]
	sar	eax, 2
	push	eax
	call	??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ; std::_Pop_heap_hole_by_index<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *)>

; 5773 :     // order heap by repeatedly popping
; 5774 :     for (; _Last - _First >= 2; --_Last) {

	sub	esi, 4

; 5410 :     _Pop_heap_hole_by_index(

	add	esp, 12					; 0000000cH

; 5773 :     // order heap by repeatedly popping
; 5774 :     for (; _Last - _First >= 2; --_Last) {

	mov	eax, esi
	and	eax, -4					; fffffffcH
	cmp	eax, 8
	jge	SHORT $LL4@Sort_heap_
	pop	ebx
$LN3@Sort_heap_:
	pop	edi

; 5775 :         _Pop_heap_unchecked(_First, _Last, _Pred);
; 5776 :     }
; 5777 : }

	pop	esi
	pop	ecx
	ret	0
??$_Sort_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z ENDP ; std::_Sort_heap_unchecked<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Partition_by_median_guess_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YA?AU?$pair@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@0@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU23@1@Z@Z
_TEXT	SEGMENT
__Plast$1$ = -20					; size = 4
__Glast$1$ = -16					; size = 4
__First$1$ = -12					; size = 4
__Gfirst$1$ = -8					; size = 4
___$ReturnUdt$1$ = -4					; size = 4
__Last$ = 8						; size = 4
__Pred$ = 12						; size = 4
??$_Partition_by_median_guess_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YA?AU?$pair@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@0@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU23@1@Z@Z PROC ; std::_Partition_by_median_guess_unchecked<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *)>, COMDAT
; ___$ReturnUdt$ = ecx
; __First$ = edx

; 6976 : _CONSTEXPR20 pair<_RanIt, _RanIt> _Partition_by_median_guess_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

	sub	esp, 20					; 00000014H
	push	ebx
	push	ebp

; 6977 :     // partition [_First, _Last)
; 6978 :     _RanIt _Mid = _First + ((_Last - _First) >> 1); // shift for codegen
; 6979 :     _Guess_median_unchecked(_First, _Mid, _Prev_iter(_Last), _Pred);

	mov	ebp, DWORD PTR __Pred$[esp+24]
	mov	ebx, edx
	push	esi
	push	edi
	mov	edi, DWORD PTR __Last$[esp+32]
	mov	eax, edi
	sub	eax, ebx
	mov	DWORD PTR ___$ReturnUdt$1$[esp+36], ecx
	sar	eax, 3
	mov	ecx, ebx
	push	ebp
	mov	DWORD PTR __First$1$[esp+40], ebx
	lea	esi, DWORD PTR [ebx+eax*4]
	lea	eax, DWORD PTR [edi-4]
	mov	edx, esi
	push	eax
	call	??$_Guess_median_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z ; std::_Guess_median_unchecked<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *)>
	add	esp, 8

; 6980 :     _RanIt _Pfirst = _Mid;
; 6981 :     _RanIt _Plast  = _Next_iter(_Pfirst);

	lea	ebx, DWORD PTR [esi+4]
	mov	DWORD PTR __Plast$1$[esp+36], ebx

; 6982 : 
; 6983 :     while (_First < _Pfirst && !_DEBUG_LT_PRED(_Pred, *_Prev_iter(_Pfirst), *_Pfirst)
; 6984 :            && !_Pred(*_Pfirst, *_Prev_iter(_Pfirst))) {

	cmp	DWORD PTR __First$1$[esp+36], esi
	jae	SHORT $LN66@Partition_
	mov	ebx, DWORD PTR __First$1$[esp+36]
$LL2@Partition_:
	push	DWORD PTR [esi]
	push	DWORD PTR [esi-4]
	call	ebp
	add	esp, 8
	test	al, al
	jne	SHORT $LN91@Partition_
	push	DWORD PTR [esi-4]
	push	DWORD PTR [esi]
	call	ebp
	add	esp, 8
	test	al, al
	jne	SHORT $LN91@Partition_

; 6985 :         --_Pfirst;

	add	esi, -4					; fffffffcH
	cmp	ebx, esi
	jb	SHORT $LL2@Partition_
$LN91@Partition_:
	mov	ebx, DWORD PTR __Plast$1$[esp+36]
$LN66@Partition_:

; 6986 :     }
; 6987 : 
; 6988 :     while (_Plast < _Last && !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst) && !_Pred(*_Pfirst, *_Plast)) {

	cmp	ebx, edi
	jae	SHORT $LN5@Partition_
$LL4@Partition_:
	push	DWORD PTR [esi]
	push	DWORD PTR [ebx]
	call	ebp
	add	esp, 8
	test	al, al
	jne	SHORT $LN92@Partition_
	push	DWORD PTR [ebx]
	push	DWORD PTR [esi]
	call	ebp
	add	esp, 8
	test	al, al
	jne	SHORT $LN92@Partition_

; 6989 :         ++_Plast;

	add	ebx, 4
	cmp	ebx, edi
	jb	SHORT $LL4@Partition_
$LN92@Partition_:
	mov	DWORD PTR __Plast$1$[esp+36], ebx
$LN5@Partition_:

; 6990 :     }
; 6991 : 
; 6992 :     _RanIt _Gfirst = _Plast;

	mov	edi, ebx

; 6993 :     _RanIt _Glast  = _Pfirst;

	mov	ebp, esi
$LN97@Partition_:

; 6996 :         for (; _Gfirst < _Last; ++_Gfirst) {

	mov	DWORD PTR __Glast$1$[esp+36], ebp
$LN96@Partition_:
	mov	DWORD PTR __Gfirst$1$[esp+36], edi
$LL6@Partition_:
	cmp	edi, DWORD PTR __Last$[esp+32]
	jae	SHORT $LN70@Partition_
	mov	ebp, DWORD PTR __Last$[esp+32]
	npad	5
$LL11@Partition_:

; 6997 :             if (_DEBUG_LT_PRED(_Pred, *_Pfirst, *_Gfirst)) {

	push	DWORD PTR [edi]
	push	DWORD PTR [esi]
	call	DWORD PTR __Pred$[esp+40]
	add	esp, 8
	test	al, al
	jne	SHORT $LN9@Partition_

; 6998 :                 continue;
; 6999 :             } else if (_Pred(*_Gfirst, *_Pfirst)) {

	push	DWORD PTR [esi]
	push	DWORD PTR [edi]
	call	DWORD PTR __Pred$[esp+40]
	add	esp, 8
	test	al, al
	jne	SHORT $LN93@Partition_

; 7000 :                 break;
; 7001 :             } else if (_Plast != _Gfirst) {

	cmp	ebx, edi
	je	SHORT $LN19@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [ebx]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [ebx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN19@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6996 :         for (; _Gfirst < _Last; ++_Gfirst) {

	add	ebx, 4
$LN9@Partition_:
	add	edi, 4
	cmp	edi, ebp
	jb	SHORT $LL11@Partition_
$LN93@Partition_:
	mov	ebp, DWORD PTR __Glast$1$[esp+36]
	mov	DWORD PTR __Plast$1$[esp+36], ebx
	mov	DWORD PTR __Gfirst$1$[esp+36], edi
$LN70@Partition_:

; 7009 :         for (; _First < _Glast; --_Glast) {

	mov	eax, DWORD PTR __First$1$[esp+36]
	cmp	ebp, eax
	jbe	SHORT $LN95@Partition_
	mov	edi, DWORD PTR __Glast$1$[esp+36]
	mov	ebx, eax
	lea	ebp, DWORD PTR [edi-4]
$LL14@Partition_:

; 7010 :             if (_DEBUG_LT_PRED(_Pred, *_Prev_iter(_Glast), *_Pfirst)) {

	push	DWORD PTR [esi]
	push	DWORD PTR [ebp]
	call	DWORD PTR __Pred$[esp+40]
	add	esp, 8
	test	al, al
	jne	SHORT $LN12@Partition_

; 7011 :                 continue;
; 7012 :             } else if (_Pred(*_Pfirst, *_Prev_iter(_Glast))) {

	push	DWORD PTR [ebp]
	push	DWORD PTR [esi]
	call	DWORD PTR __Pred$[esp+40]
	add	esp, 8
	test	al, al
	jne	SHORT $LN94@Partition_

; 7013 :                 break;
; 7014 :             } else if (--_Pfirst != _Prev_iter(_Glast)) {

	sub	esi, 4
	cmp	esi, ebp
	je	SHORT $LN12@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebp]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebp], ecx
$LN12@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7009 :         for (; _First < _Glast; --_Glast) {

	sub	edi, 4
	sub	ebp, 4
	cmp	ebx, edi
	jb	SHORT $LL14@Partition_
$LN94@Partition_:
	mov	eax, DWORD PTR __First$1$[esp+36]
	mov	ebx, DWORD PTR __Plast$1$[esp+36]
	mov	DWORD PTR __Glast$1$[esp+36], edi
	mov	ebp, DWORD PTR __Glast$1$[esp+36]

; 7015 :                 _STD iter_swap(_Pfirst, _Prev_iter(_Glast));
; 7016 :             }
; 7017 :         }
; 7018 : 
; 7019 :         if (_Glast == _First && _Gfirst == _Last) {

	cmp	ebp, eax
	mov	edi, DWORD PTR __Gfirst$1$[esp+36]
$LN95@Partition_:
	jne	SHORT $LN27@Partition_
	cmp	edi, DWORD PTR __Last$[esp+32]
	je	SHORT $LN72@Partition_

; 7021 :         }
; 7022 : 
; 7023 :         if (_Glast == _First) { // no room at bottom, rotate pivot upward
; 7024 :             if (_Plast != _Gfirst) {

	cmp	ebx, edi
	je	SHORT $LN29@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebx], ecx
$LN29@Partition_:

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7028 :             ++_Plast;

	add	ebx, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7030 :             ++_Pfirst;

	add	esi, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7031 :             ++_Gfirst;

	add	edi, 4
	mov	DWORD PTR __Plast$1$[esp+36], ebx
	jmp	$LN96@Partition_
$LN27@Partition_:

; 7032 :         } else if (_Gfirst == _Last) { // no room at top, rotate pivot downward

	add	ebp, -4					; fffffffcH
	mov	DWORD PTR __Glast$1$[esp+36], ebp
	cmp	edi, DWORD PTR __Last$[esp+32]
	jne	SHORT $LN30@Partition_

; 7033 :             if (--_Glast != --_Pfirst) {

	sub	esi, 4
	cmp	ebp, esi
	je	SHORT $LN82@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7037 :             _STD iter_swap(_Pfirst, --_Plast);

	sub	ebx, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [ebp]

; 101  :     _Left    = _STD move(_Right);

	mov	DWORD PTR [ebp], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [esi], ecx

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR [esi], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7037 :             _STD iter_swap(_Pfirst, --_Plast);

	mov	DWORD PTR __Plast$1$[esp+36], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebx], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7038 :         } else {

	jmp	$LL6@Partition_
$LN82@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 102  :     _Right   = _STD move(_Tmp);

	mov	ecx, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7037 :             _STD iter_swap(_Pfirst, --_Plast);

	sub	ebx, 4
	mov	DWORD PTR __Plast$1$[esp+36], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebx], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7038 :         } else {

	jmp	$LL6@Partition_
$LN30@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [edi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebp]
	mov	DWORD PTR [edi], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7040 :             ++_Gfirst;

	add	edi, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7042 :     }

	jmp	$LN97@Partition_
$LN72@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	eax, DWORD PTR ___$ReturnUdt$1$[esp+36]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7020 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);

	pop	edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	DWORD PTR [eax], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7020 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);

	pop	esi
	pop	ebp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	DWORD PTR [eax+4], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7020 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);

	pop	ebx

; 7043 : }

	add	esp, 20					; 00000014H
	ret	0
??$_Partition_by_median_guess_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YA?AU?$pair@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@0@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU23@1@Z@Z ENDP ; std::_Partition_by_median_guess_unchecked<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$distance@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAHPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z
_TEXT	SEGMENT
??$distance@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAHPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z PROC ; std::distance<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 1524 :     if constexpr (_Is_random_iter_v<_InIt>) {
; 1525 :         return _Last - _First; // assume the iterator will do debug checking

	sub	edx, ecx
	sar	edx, 2
	mov	eax, edx

; 1526 :     } else {
; 1527 :         _Adl_verify_range(_First, _Last);
; 1528 :         auto _UFirst             = _Get_unwrapped(_First);
; 1529 :         const auto _ULast        = _Get_unwrapped(_Last);
; 1530 :         _Iter_diff_t<_InIt> _Off = 0;
; 1531 :         for (; _UFirst != _ULast; ++_UFirst) {
; 1532 :             ++_Off;
; 1533 :         }
; 1534 : 
; 1535 :         return _Off;
; 1536 :     }
; 1537 : }

	ret	0
??$distance@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAHPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ENDP ; std::distance<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Ucopy@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU23@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Ucopy@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU23@00@Z PROC ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Ucopy<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *>, COMDAT
; _this$dead$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1658 :     for (; _UFirst != _ULast; ++_UFirst) {

	mov	ecx, DWORD PTR __First$[esp-4]

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	eax, DWORD PTR __Dest$[esp-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1639 :     _CONSTEXPR20_CONTAINER pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Dest) {

	push	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1658 :     for (; _UFirst != _ULast; ++_UFirst) {

	mov	esi, DWORD PTR __Last$[esp]
	cmp	ecx, esi
	je	SHORT $LN5@Ucopy
$LL6@Ucopy:

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	edx, DWORD PTR [ecx]

; 1621 :         ++_Last;

	add	ecx, 4
	mov	DWORD PTR [eax], edx
	add	eax, 4

; 1658 :     for (; _UFirst != _ULast; ++_UFirst) {

	cmp	ecx, esi
	jne	SHORT $LL6@Ucopy
$LN5@Ucopy:
	pop	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1642 :     }

	ret	12					; 0000000cH
??$_Ucopy@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU23@00@Z ENDP ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Ucopy<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Move_backward_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
??$_Move_backward_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z PROC ; std::_Move_backward_unchecked<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 4255 :     auto _Result                = _CSTD memmove(_Dest_ch - _Count, _First_ch, _Count);

	mov	eax, DWORD PTR __Dest$[esp-4]
	sub	edx, ecx
	push	edx
	push	ecx
	sub	eax, edx
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH

; 4351 :     // move [_First, _Last) backwards to [..., _Dest)
; 4352 :     // note: _Move_backward_unchecked has callers other than the move_backward family
; 4353 :     if constexpr (_Ptr_move_cat<_BidIt1, _BidIt2>::_Trivially_copyable) {
; 4354 : #ifdef __cpp_lib_is_constant_evaluated
; 4355 :         if (!_STD is_constant_evaluated())
; 4356 : #endif // __cpp_lib_is_constant_evaluated
; 4357 :         {
; 4358 :             return _Copy_backward_memmove(_First, _Last, _Dest);
; 4359 :         }
; 4360 :     }
; 4361 : 
; 4362 :     while (_First != _Last) {
; 4363 :         *--_Dest = _STD move(*--_Last);
; 4364 :     }
; 4365 : 
; 4366 :     return _Dest;
; 4367 : }

	ret	0
??$_Move_backward_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z ENDP ; std::_Move_backward_unchecked<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Move_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
??$_Move_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z PROC ; std::_Move_unchecked<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 4308 : _CONSTEXPR20 _OutIt _Move_unchecked(_InIt _First, _InIt _Last, _OutIt _Dest) {

	push	esi

; 4066 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	esi, DWORD PTR __Dest$[esp]

; 4308 : _CONSTEXPR20 _OutIt _Move_unchecked(_InIt _First, _InIt _Last, _OutIt _Dest) {

	push	edi
	mov	edi, edx

; 4065 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	sub	edi, ecx

; 4066 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	push	edi
	push	ecx
	push	esi
	call	_memmove
	add	esp, 12					; 0000000cH

; 4067 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4068 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

	lea	eax, DWORD PTR [edi+esi]

; 4309 :     // move [_First, _Last) to [_Dest, ...)
; 4310 :     // note: _Move_unchecked has callers other than the move family
; 4311 :     if constexpr (_Ptr_move_cat<_InIt, _OutIt>::_Trivially_copyable) {
; 4312 : #ifdef __cpp_lib_is_constant_evaluated
; 4313 :         if (!_STD is_constant_evaluated())
; 4314 : #endif // __cpp_lib_is_constant_evaluated
; 4315 :         {
; 4316 :             return _Copy_memmove(_First, _Last, _Dest);

	pop	edi
	pop	esi

; 4317 :         }
; 4318 :     }
; 4319 : 
; 4320 :     for (; _First != _Last; ++_Dest, (void) ++_First) {
; 4321 :         *_Dest = _STD move(*_First);
; 4322 :     }
; 4323 : 
; 4324 :     return _Dest;
; 4325 : }

	ret	0
??$_Move_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z ENDP ; std::_Move_unchecked<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Insertion_sort_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0P6A_NPAU12@1@Z@Z
_TEXT	SEGMENT
__First$1$ = -8						; size = 4
__Last$1$ = -4						; size = 4
__Pred$ = 8						; size = 4
??$_Insertion_sort_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0P6A_NPAU12@1@Z@Z PROC ; std::_Insertion_sort_unchecked<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 6919 : _CONSTEXPR20 _BidIt _Insertion_sort_unchecked(const _BidIt _First, const _BidIt _Last, _Pr _Pred) {

	sub	esp, 8
	push	esi
	mov	eax, edx
	mov	esi, ecx
	mov	DWORD PTR __Last$1$[esp+12], eax
	mov	DWORD PTR __First$1$[esp+12], esi

; 6920 :     // insertion sort [_First, _Last)
; 6921 :     if (_First != _Last) {

	cmp	esi, eax
	je	SHORT $LN3@Insertion_

; 6922 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

	push	edi
	lea	edi, DWORD PTR [esi+4]
	cmp	edi, eax
	je	SHORT $LN27@Insertion_
	push	ebx
	push	ebp
	npad	2
$LL2@Insertion_:

; 6923 :             _BidIt _Hole               = _Mid;
; 6924 :             _Iter_value_t<_BidIt> _Val = _STD move(*_Mid);
; 6925 : 
; 6926 :             if (_DEBUG_LT_PRED(_Pred, _Val, *_First)) { // found new earliest element, move to front

	push	DWORD PTR [esi]
	mov	ebx, DWORD PTR [edi]
	mov	ebp, edi
	push	ebx
	call	DWORD PTR __Pred$[esp+28]
	add	esp, 8
	test	al, al
	je	SHORT $LN9@Insertion_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4254 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	mov	ecx, edi

; 4255 :     auto _Result                = _CSTD memmove(_Dest_ch - _Count, _First_ch, _Count);

	mov	eax, edi
	sub	ecx, esi
	push	ecx
	sub	eax, ecx
	add	eax, 4
	push	esi
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6928 :                 *_First = _STD move(_Val);

	mov	DWORD PTR [esi], ebx

; 6929 :             } else { // look for insertion point after first

	jmp	SHORT $LN10@Insertion_
$LN9@Insertion_:

; 6930 :                 for (_BidIt _Prev = _Hole; _DEBUG_LT_PRED(_Pred, _Val, *--_Prev); _Hole = _Prev) {

	push	DWORD PTR [edi-4]
	lea	esi, DWORD PTR [edi-4]
	push	ebx
	call	DWORD PTR __Pred$[esp+28]
	add	esp, 8
	test	al, al
	je	SHORT $LN6@Insertion_
	npad	2
$LL7@Insertion_:

; 6931 :                     *_Hole = _STD move(*_Prev); // move hole down

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [ebp], eax
	mov	ebp, esi
	push	DWORD PTR [esi-4]
	sub	esi, 4
	push	ebx
	call	DWORD PTR __Pred$[esp+28]
	add	esp, 8
	test	al, al
	jne	SHORT $LL7@Insertion_
$LN6@Insertion_:
	mov	esi, DWORD PTR __First$1$[esp+24]

; 6932 :                 }
; 6933 : 
; 6934 :                 *_Hole = _STD move(_Val); // insert element in hole

	mov	DWORD PTR [ebp], ebx
$LN10@Insertion_:

; 6922 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

	mov	eax, DWORD PTR __Last$1$[esp+24]
	add	edi, 4
	cmp	edi, eax
	jne	SHORT $LL2@Insertion_

; 6935 :             }
; 6936 :         }
; 6937 :     }
; 6938 : 
; 6939 :     return _Last;

	pop	ebp
	pop	ebx
$LN27@Insertion_:
	pop	edi
$LN3@Insertion_:
	pop	esi

; 6940 : }

	add	esp, 8
	ret	0
??$_Insertion_sort_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0P6A_NPAU12@1@Z@Z ENDP ; std::_Insertion_sort_unchecked<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Make_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z
_TEXT	SEGMENT
__Val$1$ = -20						; size = 4
__Max_sequence_non_leaf$1$ = -16			; size = 4
__Hole$1$ = -12						; size = 4
__Bottom$1$ = -8					; size = 4
tv268 = -4						; size = 4
__Pred$ = 8						; size = 4
??$_Make_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z PROC ; std::_Make_heap_unchecked<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 5544 : _CONSTEXPR20 void _Make_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

	sub	esp, 20					; 00000014H
	push	ebx
	mov	eax, edx
	mov	ebx, ecx

; 5545 :     // make [_First, _Last) into a heap
; 5546 :     using _Diff   = _Iter_diff_t<_RanIt>;
; 5547 :     _Diff _Bottom = _Last - _First;

	sub	eax, ebx
	sar	eax, 2
	push	ebp

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	mov	ebp, eax
	mov	DWORD PTR __Bottom$1$[esp+28], eax
	sar	ebp, 1
	test	ebp, ebp
	jle	$LN3@Make_heap_

; 5385 :     const _Diff _Max_sequence_non_leaf = (_Bottom - 1) >> 1; // shift for codegen

	mov	ecx, DWORD PTR __Pred$[esp+24]
	dec	eax
	mov	DWORD PTR tv268[esp+28], eax
	sar	eax, 1
	push	esi
	mov	DWORD PTR __Max_sequence_non_leaf$1$[esp+32], eax
	push	edi
	npad	1
$LL2@Make_heap_:

; 5549 :         // reheap top half, bottom to top
; 5550 :         --_Hole;
; 5551 :         _Iter_value_t<_RanIt> _Val = _STD move(*(_First + _Hole));

	mov	edx, DWORD PTR [ebx+ebp*4-4]
	dec	ebp
	mov	DWORD PTR __Hole$1$[esp+36], ebp

; 5552 :         _Pop_heap_hole_by_index(_First, _Hole, _Bottom, _STD move(_Val), _Pred);

	mov	edi, ebp
	mov	DWORD PTR __Val$1$[esp+36], edx

; 5381 :     _Diff _Idx       = _Hole;

	mov	esi, ebp

; 5386 :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

	cmp	ebp, eax
	jge	SHORT $LN8@Make_heap_
	mov	ebp, DWORD PTR __Max_sequence_non_leaf$1$[esp+36]
	npad	7
$LL7@Make_heap_:

; 5387 :         _Idx = 2 * _Idx + 2;
; 5388 :         if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1)))) {

	push	DWORD PTR [ebx+esi*8+4]
	lea	esi, DWORD PTR [esi*2+2]
	push	DWORD PTR [ebx+esi*4]
	call	ecx
	add	esp, 8
	test	al, al
	je	SHORT $LN9@Make_heap_

; 5389 :             --_Idx;

	dec	esi
$LN9@Make_heap_:

; 5390 :         }
; 5391 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [ebx+esi*4]
	mov	ecx, DWORD PTR __Pred$[esp+32]
	mov	DWORD PTR [ebx+edi*4], eax

; 5392 :         _Hole             = _Idx;

	mov	edi, esi
	cmp	esi, ebp
	jl	SHORT $LL7@Make_heap_
	mov	ebp, DWORD PTR __Hole$1$[esp+36]
	mov	eax, DWORD PTR __Max_sequence_non_leaf$1$[esp+36]
	mov	edx, DWORD PTR __Val$1$[esp+36]
$LN8@Make_heap_:

; 5393 :     }
; 5394 : 
; 5395 :     if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it

	cmp	esi, eax
	jne	SHORT $LN10@Make_heap_
	mov	eax, DWORD PTR __Bottom$1$[esp+36]
	test	al, 1
	jne	SHORT $LN10@Make_heap_

; 5396 :         *(_First + _Hole) = _STD move(*(_First + (_Bottom - 1)));

	mov	eax, DWORD PTR [ebx+eax*4-4]
	mov	DWORD PTR [ebx+edi*4], eax

; 5397 :         _Hole             = _Bottom - 1;

	mov	edi, DWORD PTR tv268[esp+36]
$LN10@Make_heap_:

; 5268 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

	cmp	ebp, edi
	jge	SHORT $LN29@Make_heap_
	npad	1
$LL15@Make_heap_:

; 5267 :     for (_Diff _Idx = (_Hole - 1) >> 1; // shift for codegen

	lea	esi, DWORD PTR [edi-1]
	sar	esi, 1

; 5268 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

	push	edx
	push	DWORD PTR [ebx+esi*4]
	call	ecx
	add	esp, 8
	test	al, al
	je	SHORT $LN29@Make_heap_

; 5269 :          _Idx = (_Hole - 1) >> 1) { // shift for codegen
; 5270 :         // move _Hole up to parent
; 5271 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [ebx+esi*4]
	mov	ecx, DWORD PTR __Pred$[esp+32]
	mov	edx, DWORD PTR __Val$1$[esp+36]
	mov	DWORD PTR [ebx+edi*4], eax

; 5272 :         _Hole             = _Idx;

	mov	edi, esi
	cmp	ebp, esi
	jl	SHORT $LL15@Make_heap_
$LN29@Make_heap_:

; 5273 :     }
; 5274 : 
; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	eax, DWORD PTR __Val$1$[esp+36]

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	mov	ecx, DWORD PTR __Pred$[esp+32]

; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	DWORD PTR [ebx+edi*4], eax

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	mov	eax, DWORD PTR __Max_sequence_non_leaf$1$[esp+36]
	test	ebp, ebp
	jg	$LL2@Make_heap_
	pop	edi
	pop	esi
$LN3@Make_heap_:
	pop	ebp

; 5553 :     }
; 5554 : }

	pop	ebx
	add	esp, 20					; 00000014H
	ret	0
??$_Make_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z ENDP ; std::_Make_heap_unchecked<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Sort_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z
_TEXT	SEGMENT
__Val$1 = -4						; size = 4
__Pred$ = 8						; size = 4
??$_Sort_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z PROC ; std::_Sort_heap_unchecked<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 5772 : _CONSTEXPR20 void _Sort_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

	push	ecx
	push	esi
	push	edi
	mov	esi, edx
	mov	edi, ecx

; 5773 :     // order heap by repeatedly popping
; 5774 :     for (; _Last - _First >= 2; --_Last) {

	sub	esi, edi
	mov	eax, esi
	and	eax, -4					; fffffffcH
	cmp	eax, 8
	jl	SHORT $LN3@Sort_heap_
	push	ebx
	mov	ebx, DWORD PTR __Pred$[esp+12]
	npad	8
$LL4@Sort_heap_:

; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	eax, DWORD PTR [edi+esi-4]

; 5410 :     _Pop_heap_hole_by_index(

	xor	edx, edx

; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	DWORD PTR __Val$1[esp+16], eax

; 5410 :     _Pop_heap_hole_by_index(

	mov	ecx, edi
	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [edi+esi-4], eax
	lea	eax, DWORD PTR __Val$1[esp+16]
	push	ebx
	push	eax
	lea	eax, DWORD PTR [esi-4]
	sar	eax, 2
	push	eax
	call	??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ; std::_Pop_heap_hole_by_index<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *)>

; 5773 :     // order heap by repeatedly popping
; 5774 :     for (; _Last - _First >= 2; --_Last) {

	sub	esi, 4

; 5410 :     _Pop_heap_hole_by_index(

	add	esp, 12					; 0000000cH

; 5773 :     // order heap by repeatedly popping
; 5774 :     for (; _Last - _First >= 2; --_Last) {

	mov	eax, esi
	and	eax, -4					; fffffffcH
	cmp	eax, 8
	jge	SHORT $LL4@Sort_heap_
	pop	ebx
$LN3@Sort_heap_:
	pop	edi

; 5775 :         _Pop_heap_unchecked(_First, _Last, _Pred);
; 5776 :     }
; 5777 : }

	pop	esi
	pop	ecx
	ret	0
??$_Sort_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z ENDP ; std::_Sort_heap_unchecked<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Partition_by_median_guess_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YA?AU?$pair@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@0@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU23@1@Z@Z
_TEXT	SEGMENT
__Plast$1$ = -20					; size = 4
__Glast$1$ = -16					; size = 4
__First$1$ = -12					; size = 4
__Gfirst$1$ = -8					; size = 4
___$ReturnUdt$1$ = -4					; size = 4
__Last$ = 8						; size = 4
__Pred$ = 12						; size = 4
??$_Partition_by_median_guess_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YA?AU?$pair@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@0@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU23@1@Z@Z PROC ; std::_Partition_by_median_guess_unchecked<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *)>, COMDAT
; ___$ReturnUdt$ = ecx
; __First$ = edx

; 6976 : _CONSTEXPR20 pair<_RanIt, _RanIt> _Partition_by_median_guess_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

	sub	esp, 20					; 00000014H
	push	ebx
	push	ebp

; 6977 :     // partition [_First, _Last)
; 6978 :     _RanIt _Mid = _First + ((_Last - _First) >> 1); // shift for codegen
; 6979 :     _Guess_median_unchecked(_First, _Mid, _Prev_iter(_Last), _Pred);

	mov	ebp, DWORD PTR __Pred$[esp+24]
	mov	ebx, edx
	push	esi
	push	edi
	mov	edi, DWORD PTR __Last$[esp+32]
	mov	eax, edi
	sub	eax, ebx
	mov	DWORD PTR ___$ReturnUdt$1$[esp+36], ecx
	sar	eax, 3
	mov	ecx, ebx
	push	ebp
	mov	DWORD PTR __First$1$[esp+40], ebx
	lea	esi, DWORD PTR [ebx+eax*4]
	lea	eax, DWORD PTR [edi-4]
	mov	edx, esi
	push	eax
	call	??$_Guess_median_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z ; std::_Guess_median_unchecked<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *)>
	add	esp, 8

; 6980 :     _RanIt _Pfirst = _Mid;
; 6981 :     _RanIt _Plast  = _Next_iter(_Pfirst);

	lea	ebx, DWORD PTR [esi+4]
	mov	DWORD PTR __Plast$1$[esp+36], ebx

; 6982 : 
; 6983 :     while (_First < _Pfirst && !_DEBUG_LT_PRED(_Pred, *_Prev_iter(_Pfirst), *_Pfirst)
; 6984 :            && !_Pred(*_Pfirst, *_Prev_iter(_Pfirst))) {

	cmp	DWORD PTR __First$1$[esp+36], esi
	jae	SHORT $LN66@Partition_
	mov	ebx, DWORD PTR __First$1$[esp+36]
$LL2@Partition_:
	push	DWORD PTR [esi]
	push	DWORD PTR [esi-4]
	call	ebp
	add	esp, 8
	test	al, al
	jne	SHORT $LN91@Partition_
	push	DWORD PTR [esi-4]
	push	DWORD PTR [esi]
	call	ebp
	add	esp, 8
	test	al, al
	jne	SHORT $LN91@Partition_

; 6985 :         --_Pfirst;

	add	esi, -4					; fffffffcH
	cmp	ebx, esi
	jb	SHORT $LL2@Partition_
$LN91@Partition_:
	mov	ebx, DWORD PTR __Plast$1$[esp+36]
$LN66@Partition_:

; 6986 :     }
; 6987 : 
; 6988 :     while (_Plast < _Last && !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst) && !_Pred(*_Pfirst, *_Plast)) {

	cmp	ebx, edi
	jae	SHORT $LN5@Partition_
$LL4@Partition_:
	push	DWORD PTR [esi]
	push	DWORD PTR [ebx]
	call	ebp
	add	esp, 8
	test	al, al
	jne	SHORT $LN92@Partition_
	push	DWORD PTR [ebx]
	push	DWORD PTR [esi]
	call	ebp
	add	esp, 8
	test	al, al
	jne	SHORT $LN92@Partition_

; 6989 :         ++_Plast;

	add	ebx, 4
	cmp	ebx, edi
	jb	SHORT $LL4@Partition_
$LN92@Partition_:
	mov	DWORD PTR __Plast$1$[esp+36], ebx
$LN5@Partition_:

; 6990 :     }
; 6991 : 
; 6992 :     _RanIt _Gfirst = _Plast;

	mov	edi, ebx

; 6993 :     _RanIt _Glast  = _Pfirst;

	mov	ebp, esi
$LN97@Partition_:

; 6996 :         for (; _Gfirst < _Last; ++_Gfirst) {

	mov	DWORD PTR __Glast$1$[esp+36], ebp
$LN96@Partition_:
	mov	DWORD PTR __Gfirst$1$[esp+36], edi
$LL6@Partition_:
	cmp	edi, DWORD PTR __Last$[esp+32]
	jae	SHORT $LN70@Partition_
	mov	ebp, DWORD PTR __Last$[esp+32]
	npad	5
$LL11@Partition_:

; 6997 :             if (_DEBUG_LT_PRED(_Pred, *_Pfirst, *_Gfirst)) {

	push	DWORD PTR [edi]
	push	DWORD PTR [esi]
	call	DWORD PTR __Pred$[esp+40]
	add	esp, 8
	test	al, al
	jne	SHORT $LN9@Partition_

; 6998 :                 continue;
; 6999 :             } else if (_Pred(*_Gfirst, *_Pfirst)) {

	push	DWORD PTR [esi]
	push	DWORD PTR [edi]
	call	DWORD PTR __Pred$[esp+40]
	add	esp, 8
	test	al, al
	jne	SHORT $LN93@Partition_

; 7000 :                 break;
; 7001 :             } else if (_Plast != _Gfirst) {

	cmp	ebx, edi
	je	SHORT $LN19@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [ebx]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [ebx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN19@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6996 :         for (; _Gfirst < _Last; ++_Gfirst) {

	add	ebx, 4
$LN9@Partition_:
	add	edi, 4
	cmp	edi, ebp
	jb	SHORT $LL11@Partition_
$LN93@Partition_:
	mov	ebp, DWORD PTR __Glast$1$[esp+36]
	mov	DWORD PTR __Plast$1$[esp+36], ebx
	mov	DWORD PTR __Gfirst$1$[esp+36], edi
$LN70@Partition_:

; 7009 :         for (; _First < _Glast; --_Glast) {

	mov	eax, DWORD PTR __First$1$[esp+36]
	cmp	ebp, eax
	jbe	SHORT $LN95@Partition_
	mov	edi, DWORD PTR __Glast$1$[esp+36]
	mov	ebx, eax
	lea	ebp, DWORD PTR [edi-4]
$LL14@Partition_:

; 7010 :             if (_DEBUG_LT_PRED(_Pred, *_Prev_iter(_Glast), *_Pfirst)) {

	push	DWORD PTR [esi]
	push	DWORD PTR [ebp]
	call	DWORD PTR __Pred$[esp+40]
	add	esp, 8
	test	al, al
	jne	SHORT $LN12@Partition_

; 7011 :                 continue;
; 7012 :             } else if (_Pred(*_Pfirst, *_Prev_iter(_Glast))) {

	push	DWORD PTR [ebp]
	push	DWORD PTR [esi]
	call	DWORD PTR __Pred$[esp+40]
	add	esp, 8
	test	al, al
	jne	SHORT $LN94@Partition_

; 7013 :                 break;
; 7014 :             } else if (--_Pfirst != _Prev_iter(_Glast)) {

	sub	esi, 4
	cmp	esi, ebp
	je	SHORT $LN12@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebp]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebp], ecx
$LN12@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7009 :         for (; _First < _Glast; --_Glast) {

	sub	edi, 4
	sub	ebp, 4
	cmp	ebx, edi
	jb	SHORT $LL14@Partition_
$LN94@Partition_:
	mov	eax, DWORD PTR __First$1$[esp+36]
	mov	ebx, DWORD PTR __Plast$1$[esp+36]
	mov	DWORD PTR __Glast$1$[esp+36], edi
	mov	ebp, DWORD PTR __Glast$1$[esp+36]

; 7015 :                 _STD iter_swap(_Pfirst, _Prev_iter(_Glast));
; 7016 :             }
; 7017 :         }
; 7018 : 
; 7019 :         if (_Glast == _First && _Gfirst == _Last) {

	cmp	ebp, eax
	mov	edi, DWORD PTR __Gfirst$1$[esp+36]
$LN95@Partition_:
	jne	SHORT $LN27@Partition_
	cmp	edi, DWORD PTR __Last$[esp+32]
	je	SHORT $LN72@Partition_

; 7021 :         }
; 7022 : 
; 7023 :         if (_Glast == _First) { // no room at bottom, rotate pivot upward
; 7024 :             if (_Plast != _Gfirst) {

	cmp	ebx, edi
	je	SHORT $LN29@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebx], ecx
$LN29@Partition_:

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7028 :             ++_Plast;

	add	ebx, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7030 :             ++_Pfirst;

	add	esi, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7031 :             ++_Gfirst;

	add	edi, 4
	mov	DWORD PTR __Plast$1$[esp+36], ebx
	jmp	$LN96@Partition_
$LN27@Partition_:

; 7032 :         } else if (_Gfirst == _Last) { // no room at top, rotate pivot downward

	add	ebp, -4					; fffffffcH
	mov	DWORD PTR __Glast$1$[esp+36], ebp
	cmp	edi, DWORD PTR __Last$[esp+32]
	jne	SHORT $LN30@Partition_

; 7033 :             if (--_Glast != --_Pfirst) {

	sub	esi, 4
	cmp	ebp, esi
	je	SHORT $LN82@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7037 :             _STD iter_swap(_Pfirst, --_Plast);

	sub	ebx, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [ebp]

; 101  :     _Left    = _STD move(_Right);

	mov	DWORD PTR [ebp], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [esi], ecx

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR [esi], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7037 :             _STD iter_swap(_Pfirst, --_Plast);

	mov	DWORD PTR __Plast$1$[esp+36], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebx], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7038 :         } else {

	jmp	$LL6@Partition_
$LN82@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 102  :     _Right   = _STD move(_Tmp);

	mov	ecx, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7037 :             _STD iter_swap(_Pfirst, --_Plast);

	sub	ebx, 4
	mov	DWORD PTR __Plast$1$[esp+36], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebx], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7038 :         } else {

	jmp	$LL6@Partition_
$LN30@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [edi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebp]
	mov	DWORD PTR [edi], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7040 :             ++_Gfirst;

	add	edi, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7042 :     }

	jmp	$LN97@Partition_
$LN72@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	eax, DWORD PTR ___$ReturnUdt$1$[esp+36]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7020 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);

	pop	edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	DWORD PTR [eax], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7020 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);

	pop	esi
	pop	ebp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	DWORD PTR [eax+4], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7020 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);

	pop	ebx

; 7043 : }

	add	esp, 20					; 00000014H
	ret	0
??$_Partition_by_median_guess_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YA?AU?$pair@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@0@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU23@1@Z@Z ENDP ; std::_Partition_by_median_guess_unchecked<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$distance@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAHPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z
_TEXT	SEGMENT
??$distance@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAHPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z PROC ; std::distance<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 1524 :     if constexpr (_Is_random_iter_v<_InIt>) {
; 1525 :         return _Last - _First; // assume the iterator will do debug checking

	sub	edx, ecx
	sar	edx, 2
	mov	eax, edx

; 1526 :     } else {
; 1527 :         _Adl_verify_range(_First, _Last);
; 1528 :         auto _UFirst             = _Get_unwrapped(_First);
; 1529 :         const auto _ULast        = _Get_unwrapped(_Last);
; 1530 :         _Iter_diff_t<_InIt> _Off = 0;
; 1531 :         for (; _UFirst != _ULast; ++_UFirst) {
; 1532 :             ++_Off;
; 1533 :         }
; 1534 : 
; 1535 :         return _Off;
; 1536 :     }
; 1537 : }

	ret	0
??$distance@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAHPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ENDP ; std::distance<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Ucopy@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU23@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Ucopy@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU23@00@Z PROC ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Ucopy<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *>, COMDAT
; _this$dead$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1658 :     for (; _UFirst != _ULast; ++_UFirst) {

	mov	ecx, DWORD PTR __First$[esp-4]

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	eax, DWORD PTR __Dest$[esp-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1639 :     _CONSTEXPR20_CONTAINER pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Dest) {

	push	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1658 :     for (; _UFirst != _ULast; ++_UFirst) {

	mov	esi, DWORD PTR __Last$[esp]
	cmp	ecx, esi
	je	SHORT $LN5@Ucopy
$LL6@Ucopy:

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	edx, DWORD PTR [ecx]

; 1621 :         ++_Last;

	add	ecx, 4
	mov	DWORD PTR [eax], edx
	add	eax, 4

; 1658 :     for (; _UFirst != _ULast; ++_UFirst) {

	cmp	ecx, esi
	jne	SHORT $LL6@Ucopy
$LN5@Ucopy:
	pop	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1642 :     }

	ret	12					; 0000000cH
??$_Ucopy@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU23@00@Z ENDP ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Ucopy<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Move_backward_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
??$_Move_backward_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z PROC ; std::_Move_backward_unchecked<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 4255 :     auto _Result                = _CSTD memmove(_Dest_ch - _Count, _First_ch, _Count);

	mov	eax, DWORD PTR __Dest$[esp-4]
	sub	edx, ecx
	push	edx
	push	ecx
	sub	eax, edx
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH

; 4351 :     // move [_First, _Last) backwards to [..., _Dest)
; 4352 :     // note: _Move_backward_unchecked has callers other than the move_backward family
; 4353 :     if constexpr (_Ptr_move_cat<_BidIt1, _BidIt2>::_Trivially_copyable) {
; 4354 : #ifdef __cpp_lib_is_constant_evaluated
; 4355 :         if (!_STD is_constant_evaluated())
; 4356 : #endif // __cpp_lib_is_constant_evaluated
; 4357 :         {
; 4358 :             return _Copy_backward_memmove(_First, _Last, _Dest);
; 4359 :         }
; 4360 :     }
; 4361 : 
; 4362 :     while (_First != _Last) {
; 4363 :         *--_Dest = _STD move(*--_Last);
; 4364 :     }
; 4365 : 
; 4366 :     return _Dest;
; 4367 : }

	ret	0
??$_Move_backward_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z ENDP ; std::_Move_backward_unchecked<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Move_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
??$_Move_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z PROC ; std::_Move_unchecked<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 4308 : _CONSTEXPR20 _OutIt _Move_unchecked(_InIt _First, _InIt _Last, _OutIt _Dest) {

	push	esi

; 4066 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	esi, DWORD PTR __Dest$[esp]

; 4308 : _CONSTEXPR20 _OutIt _Move_unchecked(_InIt _First, _InIt _Last, _OutIt _Dest) {

	push	edi
	mov	edi, edx

; 4065 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	sub	edi, ecx

; 4066 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	push	edi
	push	ecx
	push	esi
	call	_memmove
	add	esp, 12					; 0000000cH

; 4067 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4068 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

	lea	eax, DWORD PTR [edi+esi]

; 4309 :     // move [_First, _Last) to [_Dest, ...)
; 4310 :     // note: _Move_unchecked has callers other than the move family
; 4311 :     if constexpr (_Ptr_move_cat<_InIt, _OutIt>::_Trivially_copyable) {
; 4312 : #ifdef __cpp_lib_is_constant_evaluated
; 4313 :         if (!_STD is_constant_evaluated())
; 4314 : #endif // __cpp_lib_is_constant_evaluated
; 4315 :         {
; 4316 :             return _Copy_memmove(_First, _Last, _Dest);

	pop	edi
	pop	esi

; 4317 :         }
; 4318 :     }
; 4319 : 
; 4320 :     for (; _First != _Last; ++_Dest, (void) ++_First) {
; 4321 :         *_Dest = _STD move(*_First);
; 4322 :     }
; 4323 : 
; 4324 :     return _Dest;
; 4325 : }

	ret	0
??$_Move_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z ENDP ; std::_Move_unchecked<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Insertion_sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0P6A_NPAU12@1@Z@Z
_TEXT	SEGMENT
__First$1$ = -8						; size = 4
__Last$1$ = -4						; size = 4
__Pred$ = 8						; size = 4
??$_Insertion_sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0P6A_NPAU12@1@Z@Z PROC ; std::_Insertion_sort_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 6919 : _CONSTEXPR20 _BidIt _Insertion_sort_unchecked(const _BidIt _First, const _BidIt _Last, _Pr _Pred) {

	sub	esp, 8
	push	esi
	mov	eax, edx
	mov	esi, ecx
	mov	DWORD PTR __Last$1$[esp+12], eax
	mov	DWORD PTR __First$1$[esp+12], esi

; 6920 :     // insertion sort [_First, _Last)
; 6921 :     if (_First != _Last) {

	cmp	esi, eax
	je	SHORT $LN3@Insertion_

; 6922 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

	push	edi
	lea	edi, DWORD PTR [esi+4]
	cmp	edi, eax
	je	SHORT $LN27@Insertion_
	push	ebx
	push	ebp
	npad	2
$LL2@Insertion_:

; 6923 :             _BidIt _Hole               = _Mid;
; 6924 :             _Iter_value_t<_BidIt> _Val = _STD move(*_Mid);
; 6925 : 
; 6926 :             if (_DEBUG_LT_PRED(_Pred, _Val, *_First)) { // found new earliest element, move to front

	push	DWORD PTR [esi]
	mov	ebx, DWORD PTR [edi]
	mov	ebp, edi
	push	ebx
	call	DWORD PTR __Pred$[esp+28]
	add	esp, 8
	test	al, al
	je	SHORT $LN9@Insertion_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4254 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	mov	ecx, edi

; 4255 :     auto _Result                = _CSTD memmove(_Dest_ch - _Count, _First_ch, _Count);

	mov	eax, edi
	sub	ecx, esi
	push	ecx
	sub	eax, ecx
	add	eax, 4
	push	esi
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6928 :                 *_First = _STD move(_Val);

	mov	DWORD PTR [esi], ebx

; 6929 :             } else { // look for insertion point after first

	jmp	SHORT $LN10@Insertion_
$LN9@Insertion_:

; 6930 :                 for (_BidIt _Prev = _Hole; _DEBUG_LT_PRED(_Pred, _Val, *--_Prev); _Hole = _Prev) {

	push	DWORD PTR [edi-4]
	lea	esi, DWORD PTR [edi-4]
	push	ebx
	call	DWORD PTR __Pred$[esp+28]
	add	esp, 8
	test	al, al
	je	SHORT $LN6@Insertion_
	npad	2
$LL7@Insertion_:

; 6931 :                     *_Hole = _STD move(*_Prev); // move hole down

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [ebp], eax
	mov	ebp, esi
	push	DWORD PTR [esi-4]
	sub	esi, 4
	push	ebx
	call	DWORD PTR __Pred$[esp+28]
	add	esp, 8
	test	al, al
	jne	SHORT $LL7@Insertion_
$LN6@Insertion_:
	mov	esi, DWORD PTR __First$1$[esp+24]

; 6932 :                 }
; 6933 : 
; 6934 :                 *_Hole = _STD move(_Val); // insert element in hole

	mov	DWORD PTR [ebp], ebx
$LN10@Insertion_:

; 6922 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

	mov	eax, DWORD PTR __Last$1$[esp+24]
	add	edi, 4
	cmp	edi, eax
	jne	SHORT $LL2@Insertion_

; 6935 :             }
; 6936 :         }
; 6937 :     }
; 6938 : 
; 6939 :     return _Last;

	pop	ebp
	pop	ebx
$LN27@Insertion_:
	pop	edi
$LN3@Insertion_:
	pop	esi

; 6940 : }

	add	esp, 8
	ret	0
??$_Insertion_sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0P6A_NPAU12@1@Z@Z ENDP ; std::_Insertion_sort_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Make_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z
_TEXT	SEGMENT
__Val$1$ = -20						; size = 4
__Max_sequence_non_leaf$1$ = -16			; size = 4
__Hole$1$ = -12						; size = 4
__Bottom$1$ = -8					; size = 4
tv268 = -4						; size = 4
__Pred$ = 8						; size = 4
??$_Make_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z PROC ; std::_Make_heap_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 5544 : _CONSTEXPR20 void _Make_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

	sub	esp, 20					; 00000014H
	push	ebx
	mov	eax, edx
	mov	ebx, ecx

; 5545 :     // make [_First, _Last) into a heap
; 5546 :     using _Diff   = _Iter_diff_t<_RanIt>;
; 5547 :     _Diff _Bottom = _Last - _First;

	sub	eax, ebx
	sar	eax, 2
	push	ebp

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	mov	ebp, eax
	mov	DWORD PTR __Bottom$1$[esp+28], eax
	sar	ebp, 1
	test	ebp, ebp
	jle	$LN3@Make_heap_

; 5385 :     const _Diff _Max_sequence_non_leaf = (_Bottom - 1) >> 1; // shift for codegen

	mov	ecx, DWORD PTR __Pred$[esp+24]
	dec	eax
	mov	DWORD PTR tv268[esp+28], eax
	sar	eax, 1
	push	esi
	mov	DWORD PTR __Max_sequence_non_leaf$1$[esp+32], eax
	push	edi
	npad	1
$LL2@Make_heap_:

; 5549 :         // reheap top half, bottom to top
; 5550 :         --_Hole;
; 5551 :         _Iter_value_t<_RanIt> _Val = _STD move(*(_First + _Hole));

	mov	edx, DWORD PTR [ebx+ebp*4-4]
	dec	ebp
	mov	DWORD PTR __Hole$1$[esp+36], ebp

; 5552 :         _Pop_heap_hole_by_index(_First, _Hole, _Bottom, _STD move(_Val), _Pred);

	mov	edi, ebp
	mov	DWORD PTR __Val$1$[esp+36], edx

; 5381 :     _Diff _Idx       = _Hole;

	mov	esi, ebp

; 5386 :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

	cmp	ebp, eax
	jge	SHORT $LN8@Make_heap_
	mov	ebp, DWORD PTR __Max_sequence_non_leaf$1$[esp+36]
	npad	7
$LL7@Make_heap_:

; 5387 :         _Idx = 2 * _Idx + 2;
; 5388 :         if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1)))) {

	push	DWORD PTR [ebx+esi*8+4]
	lea	esi, DWORD PTR [esi*2+2]
	push	DWORD PTR [ebx+esi*4]
	call	ecx
	add	esp, 8
	test	al, al
	je	SHORT $LN9@Make_heap_

; 5389 :             --_Idx;

	dec	esi
$LN9@Make_heap_:

; 5390 :         }
; 5391 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [ebx+esi*4]
	mov	ecx, DWORD PTR __Pred$[esp+32]
	mov	DWORD PTR [ebx+edi*4], eax

; 5392 :         _Hole             = _Idx;

	mov	edi, esi
	cmp	esi, ebp
	jl	SHORT $LL7@Make_heap_
	mov	ebp, DWORD PTR __Hole$1$[esp+36]
	mov	eax, DWORD PTR __Max_sequence_non_leaf$1$[esp+36]
	mov	edx, DWORD PTR __Val$1$[esp+36]
$LN8@Make_heap_:

; 5393 :     }
; 5394 : 
; 5395 :     if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it

	cmp	esi, eax
	jne	SHORT $LN10@Make_heap_
	mov	eax, DWORD PTR __Bottom$1$[esp+36]
	test	al, 1
	jne	SHORT $LN10@Make_heap_

; 5396 :         *(_First + _Hole) = _STD move(*(_First + (_Bottom - 1)));

	mov	eax, DWORD PTR [ebx+eax*4-4]
	mov	DWORD PTR [ebx+edi*4], eax

; 5397 :         _Hole             = _Bottom - 1;

	mov	edi, DWORD PTR tv268[esp+36]
$LN10@Make_heap_:

; 5268 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

	cmp	ebp, edi
	jge	SHORT $LN29@Make_heap_
	npad	1
$LL15@Make_heap_:

; 5267 :     for (_Diff _Idx = (_Hole - 1) >> 1; // shift for codegen

	lea	esi, DWORD PTR [edi-1]
	sar	esi, 1

; 5268 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

	push	edx
	push	DWORD PTR [ebx+esi*4]
	call	ecx
	add	esp, 8
	test	al, al
	je	SHORT $LN29@Make_heap_

; 5269 :          _Idx = (_Hole - 1) >> 1) { // shift for codegen
; 5270 :         // move _Hole up to parent
; 5271 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [ebx+esi*4]
	mov	ecx, DWORD PTR __Pred$[esp+32]
	mov	edx, DWORD PTR __Val$1$[esp+36]
	mov	DWORD PTR [ebx+edi*4], eax

; 5272 :         _Hole             = _Idx;

	mov	edi, esi
	cmp	ebp, esi
	jl	SHORT $LL15@Make_heap_
$LN29@Make_heap_:

; 5273 :     }
; 5274 : 
; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	eax, DWORD PTR __Val$1$[esp+36]

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	mov	ecx, DWORD PTR __Pred$[esp+32]

; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	DWORD PTR [ebx+edi*4], eax

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	mov	eax, DWORD PTR __Max_sequence_non_leaf$1$[esp+36]
	test	ebp, ebp
	jg	$LL2@Make_heap_
	pop	edi
	pop	esi
$LN3@Make_heap_:
	pop	ebp

; 5553 :     }
; 5554 : }

	pop	ebx
	add	esp, 20					; 00000014H
	ret	0
??$_Make_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z ENDP ; std::_Make_heap_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Sort_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z
_TEXT	SEGMENT
__Val$1 = -4						; size = 4
__Pred$ = 8						; size = 4
??$_Sort_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z PROC ; std::_Sort_heap_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 5772 : _CONSTEXPR20 void _Sort_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

	push	ecx
	push	esi
	push	edi
	mov	esi, edx
	mov	edi, ecx

; 5773 :     // order heap by repeatedly popping
; 5774 :     for (; _Last - _First >= 2; --_Last) {

	sub	esi, edi
	mov	eax, esi
	and	eax, -4					; fffffffcH
	cmp	eax, 8
	jl	SHORT $LN3@Sort_heap_
	push	ebx
	mov	ebx, DWORD PTR __Pred$[esp+12]
	npad	8
$LL4@Sort_heap_:

; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	eax, DWORD PTR [edi+esi-4]

; 5410 :     _Pop_heap_hole_by_index(

	xor	edx, edx

; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	DWORD PTR __Val$1[esp+16], eax

; 5410 :     _Pop_heap_hole_by_index(

	mov	ecx, edi
	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [edi+esi-4], eax
	lea	eax, DWORD PTR __Val$1[esp+16]
	push	ebx
	push	eax
	lea	eax, DWORD PTR [esi-4]
	sar	eax, 2
	push	eax
	call	??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ; std::_Pop_heap_hole_by_index<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *)>

; 5773 :     // order heap by repeatedly popping
; 5774 :     for (; _Last - _First >= 2; --_Last) {

	sub	esi, 4

; 5410 :     _Pop_heap_hole_by_index(

	add	esp, 12					; 0000000cH

; 5773 :     // order heap by repeatedly popping
; 5774 :     for (; _Last - _First >= 2; --_Last) {

	mov	eax, esi
	and	eax, -4					; fffffffcH
	cmp	eax, 8
	jge	SHORT $LL4@Sort_heap_
	pop	ebx
$LN3@Sort_heap_:
	pop	edi

; 5775 :         _Pop_heap_unchecked(_First, _Last, _Pred);
; 5776 :     }
; 5777 : }

	pop	esi
	pop	ecx
	ret	0
??$_Sort_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z ENDP ; std::_Sort_heap_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Partition_by_median_guess_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YA?AU?$pair@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@0@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU23@1@Z@Z
_TEXT	SEGMENT
__Plast$1$ = -20					; size = 4
__Glast$1$ = -16					; size = 4
__First$1$ = -12					; size = 4
__Gfirst$1$ = -8					; size = 4
___$ReturnUdt$1$ = -4					; size = 4
__Last$ = 8						; size = 4
__Pred$ = 12						; size = 4
??$_Partition_by_median_guess_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YA?AU?$pair@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@0@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU23@1@Z@Z PROC ; std::_Partition_by_median_guess_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *)>, COMDAT
; ___$ReturnUdt$ = ecx
; __First$ = edx

; 6976 : _CONSTEXPR20 pair<_RanIt, _RanIt> _Partition_by_median_guess_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

	sub	esp, 20					; 00000014H
	push	ebx
	push	ebp

; 6977 :     // partition [_First, _Last)
; 6978 :     _RanIt _Mid = _First + ((_Last - _First) >> 1); // shift for codegen
; 6979 :     _Guess_median_unchecked(_First, _Mid, _Prev_iter(_Last), _Pred);

	mov	ebp, DWORD PTR __Pred$[esp+24]
	mov	ebx, edx
	push	esi
	push	edi
	mov	edi, DWORD PTR __Last$[esp+32]
	mov	eax, edi
	sub	eax, ebx
	mov	DWORD PTR ___$ReturnUdt$1$[esp+36], ecx
	sar	eax, 3
	mov	ecx, ebx
	push	ebp
	mov	DWORD PTR __First$1$[esp+40], ebx
	lea	esi, DWORD PTR [ebx+eax*4]
	lea	eax, DWORD PTR [edi-4]
	mov	edx, esi
	push	eax
	call	??$_Guess_median_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z ; std::_Guess_median_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *)>
	add	esp, 8

; 6980 :     _RanIt _Pfirst = _Mid;
; 6981 :     _RanIt _Plast  = _Next_iter(_Pfirst);

	lea	ebx, DWORD PTR [esi+4]
	mov	DWORD PTR __Plast$1$[esp+36], ebx

; 6982 : 
; 6983 :     while (_First < _Pfirst && !_DEBUG_LT_PRED(_Pred, *_Prev_iter(_Pfirst), *_Pfirst)
; 6984 :            && !_Pred(*_Pfirst, *_Prev_iter(_Pfirst))) {

	cmp	DWORD PTR __First$1$[esp+36], esi
	jae	SHORT $LN66@Partition_
	mov	ebx, DWORD PTR __First$1$[esp+36]
$LL2@Partition_:
	push	DWORD PTR [esi]
	push	DWORD PTR [esi-4]
	call	ebp
	add	esp, 8
	test	al, al
	jne	SHORT $LN91@Partition_
	push	DWORD PTR [esi-4]
	push	DWORD PTR [esi]
	call	ebp
	add	esp, 8
	test	al, al
	jne	SHORT $LN91@Partition_

; 6985 :         --_Pfirst;

	add	esi, -4					; fffffffcH
	cmp	ebx, esi
	jb	SHORT $LL2@Partition_
$LN91@Partition_:
	mov	ebx, DWORD PTR __Plast$1$[esp+36]
$LN66@Partition_:

; 6986 :     }
; 6987 : 
; 6988 :     while (_Plast < _Last && !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst) && !_Pred(*_Pfirst, *_Plast)) {

	cmp	ebx, edi
	jae	SHORT $LN5@Partition_
$LL4@Partition_:
	push	DWORD PTR [esi]
	push	DWORD PTR [ebx]
	call	ebp
	add	esp, 8
	test	al, al
	jne	SHORT $LN92@Partition_
	push	DWORD PTR [ebx]
	push	DWORD PTR [esi]
	call	ebp
	add	esp, 8
	test	al, al
	jne	SHORT $LN92@Partition_

; 6989 :         ++_Plast;

	add	ebx, 4
	cmp	ebx, edi
	jb	SHORT $LL4@Partition_
$LN92@Partition_:
	mov	DWORD PTR __Plast$1$[esp+36], ebx
$LN5@Partition_:

; 6990 :     }
; 6991 : 
; 6992 :     _RanIt _Gfirst = _Plast;

	mov	edi, ebx

; 6993 :     _RanIt _Glast  = _Pfirst;

	mov	ebp, esi
$LN97@Partition_:

; 6996 :         for (; _Gfirst < _Last; ++_Gfirst) {

	mov	DWORD PTR __Glast$1$[esp+36], ebp
$LN96@Partition_:
	mov	DWORD PTR __Gfirst$1$[esp+36], edi
$LL6@Partition_:
	cmp	edi, DWORD PTR __Last$[esp+32]
	jae	SHORT $LN70@Partition_
	mov	ebp, DWORD PTR __Last$[esp+32]
	npad	5
$LL11@Partition_:

; 6997 :             if (_DEBUG_LT_PRED(_Pred, *_Pfirst, *_Gfirst)) {

	push	DWORD PTR [edi]
	push	DWORD PTR [esi]
	call	DWORD PTR __Pred$[esp+40]
	add	esp, 8
	test	al, al
	jne	SHORT $LN9@Partition_

; 6998 :                 continue;
; 6999 :             } else if (_Pred(*_Gfirst, *_Pfirst)) {

	push	DWORD PTR [esi]
	push	DWORD PTR [edi]
	call	DWORD PTR __Pred$[esp+40]
	add	esp, 8
	test	al, al
	jne	SHORT $LN93@Partition_

; 7000 :                 break;
; 7001 :             } else if (_Plast != _Gfirst) {

	cmp	ebx, edi
	je	SHORT $LN19@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [ebx]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [ebx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN19@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6996 :         for (; _Gfirst < _Last; ++_Gfirst) {

	add	ebx, 4
$LN9@Partition_:
	add	edi, 4
	cmp	edi, ebp
	jb	SHORT $LL11@Partition_
$LN93@Partition_:
	mov	ebp, DWORD PTR __Glast$1$[esp+36]
	mov	DWORD PTR __Plast$1$[esp+36], ebx
	mov	DWORD PTR __Gfirst$1$[esp+36], edi
$LN70@Partition_:

; 7009 :         for (; _First < _Glast; --_Glast) {

	mov	eax, DWORD PTR __First$1$[esp+36]
	cmp	ebp, eax
	jbe	SHORT $LN95@Partition_
	mov	edi, DWORD PTR __Glast$1$[esp+36]
	mov	ebx, eax
	lea	ebp, DWORD PTR [edi-4]
$LL14@Partition_:

; 7010 :             if (_DEBUG_LT_PRED(_Pred, *_Prev_iter(_Glast), *_Pfirst)) {

	push	DWORD PTR [esi]
	push	DWORD PTR [ebp]
	call	DWORD PTR __Pred$[esp+40]
	add	esp, 8
	test	al, al
	jne	SHORT $LN12@Partition_

; 7011 :                 continue;
; 7012 :             } else if (_Pred(*_Pfirst, *_Prev_iter(_Glast))) {

	push	DWORD PTR [ebp]
	push	DWORD PTR [esi]
	call	DWORD PTR __Pred$[esp+40]
	add	esp, 8
	test	al, al
	jne	SHORT $LN94@Partition_

; 7013 :                 break;
; 7014 :             } else if (--_Pfirst != _Prev_iter(_Glast)) {

	sub	esi, 4
	cmp	esi, ebp
	je	SHORT $LN12@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebp]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebp], ecx
$LN12@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7009 :         for (; _First < _Glast; --_Glast) {

	sub	edi, 4
	sub	ebp, 4
	cmp	ebx, edi
	jb	SHORT $LL14@Partition_
$LN94@Partition_:
	mov	eax, DWORD PTR __First$1$[esp+36]
	mov	ebx, DWORD PTR __Plast$1$[esp+36]
	mov	DWORD PTR __Glast$1$[esp+36], edi
	mov	ebp, DWORD PTR __Glast$1$[esp+36]

; 7015 :                 _STD iter_swap(_Pfirst, _Prev_iter(_Glast));
; 7016 :             }
; 7017 :         }
; 7018 : 
; 7019 :         if (_Glast == _First && _Gfirst == _Last) {

	cmp	ebp, eax
	mov	edi, DWORD PTR __Gfirst$1$[esp+36]
$LN95@Partition_:
	jne	SHORT $LN27@Partition_
	cmp	edi, DWORD PTR __Last$[esp+32]
	je	SHORT $LN72@Partition_

; 7021 :         }
; 7022 : 
; 7023 :         if (_Glast == _First) { // no room at bottom, rotate pivot upward
; 7024 :             if (_Plast != _Gfirst) {

	cmp	ebx, edi
	je	SHORT $LN29@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebx], ecx
$LN29@Partition_:

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7028 :             ++_Plast;

	add	ebx, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7030 :             ++_Pfirst;

	add	esi, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7031 :             ++_Gfirst;

	add	edi, 4
	mov	DWORD PTR __Plast$1$[esp+36], ebx
	jmp	$LN96@Partition_
$LN27@Partition_:

; 7032 :         } else if (_Gfirst == _Last) { // no room at top, rotate pivot downward

	add	ebp, -4					; fffffffcH
	mov	DWORD PTR __Glast$1$[esp+36], ebp
	cmp	edi, DWORD PTR __Last$[esp+32]
	jne	SHORT $LN30@Partition_

; 7033 :             if (--_Glast != --_Pfirst) {

	sub	esi, 4
	cmp	ebp, esi
	je	SHORT $LN82@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7037 :             _STD iter_swap(_Pfirst, --_Plast);

	sub	ebx, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [ebp]

; 101  :     _Left    = _STD move(_Right);

	mov	DWORD PTR [ebp], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [esi], ecx

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR [esi], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7037 :             _STD iter_swap(_Pfirst, --_Plast);

	mov	DWORD PTR __Plast$1$[esp+36], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebx], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7038 :         } else {

	jmp	$LL6@Partition_
$LN82@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 102  :     _Right   = _STD move(_Tmp);

	mov	ecx, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7037 :             _STD iter_swap(_Pfirst, --_Plast);

	sub	ebx, 4
	mov	DWORD PTR __Plast$1$[esp+36], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebx], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7038 :         } else {

	jmp	$LL6@Partition_
$LN30@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [edi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebp]
	mov	DWORD PTR [edi], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7040 :             ++_Gfirst;

	add	edi, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7042 :     }

	jmp	$LN97@Partition_
$LN72@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	eax, DWORD PTR ___$ReturnUdt$1$[esp+36]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7020 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);

	pop	edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	DWORD PTR [eax], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7020 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);

	pop	esi
	pop	ebp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	DWORD PTR [eax+4], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7020 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);

	pop	ebx

; 7043 : }

	add	esp, 20					; 00000014H
	ret	0
??$_Partition_by_median_guess_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YA?AU?$pair@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@0@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU23@1@Z@Z ENDP ; std::_Partition_by_median_guess_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Insertion_sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0P6A_NPAU12@1@Z@Z
_TEXT	SEGMENT
__First$1$ = -8						; size = 4
__Last$1$ = -4						; size = 4
__Pred$ = 8						; size = 4
??$_Insertion_sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0P6A_NPAU12@1@Z@Z PROC ; std::_Insertion_sort_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 6919 : _CONSTEXPR20 _BidIt _Insertion_sort_unchecked(const _BidIt _First, const _BidIt _Last, _Pr _Pred) {

	sub	esp, 8
	push	esi
	mov	eax, edx
	mov	esi, ecx
	mov	DWORD PTR __Last$1$[esp+12], eax
	mov	DWORD PTR __First$1$[esp+12], esi

; 6920 :     // insertion sort [_First, _Last)
; 6921 :     if (_First != _Last) {

	cmp	esi, eax
	je	SHORT $LN3@Insertion_

; 6922 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

	push	edi
	lea	edi, DWORD PTR [esi+4]
	cmp	edi, eax
	je	SHORT $LN27@Insertion_
	push	ebx
	push	ebp
	npad	2
$LL2@Insertion_:

; 6923 :             _BidIt _Hole               = _Mid;
; 6924 :             _Iter_value_t<_BidIt> _Val = _STD move(*_Mid);
; 6925 : 
; 6926 :             if (_DEBUG_LT_PRED(_Pred, _Val, *_First)) { // found new earliest element, move to front

	push	DWORD PTR [esi]
	mov	ebx, DWORD PTR [edi]
	mov	ebp, edi
	push	ebx
	call	DWORD PTR __Pred$[esp+28]
	add	esp, 8
	test	al, al
	je	SHORT $LN9@Insertion_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4254 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	mov	ecx, edi

; 4255 :     auto _Result                = _CSTD memmove(_Dest_ch - _Count, _First_ch, _Count);

	mov	eax, edi
	sub	ecx, esi
	push	ecx
	sub	eax, ecx
	add	eax, 4
	push	esi
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6928 :                 *_First = _STD move(_Val);

	mov	DWORD PTR [esi], ebx

; 6929 :             } else { // look for insertion point after first

	jmp	SHORT $LN10@Insertion_
$LN9@Insertion_:

; 6930 :                 for (_BidIt _Prev = _Hole; _DEBUG_LT_PRED(_Pred, _Val, *--_Prev); _Hole = _Prev) {

	push	DWORD PTR [edi-4]
	lea	esi, DWORD PTR [edi-4]
	push	ebx
	call	DWORD PTR __Pred$[esp+28]
	add	esp, 8
	test	al, al
	je	SHORT $LN6@Insertion_
	npad	2
$LL7@Insertion_:

; 6931 :                     *_Hole = _STD move(*_Prev); // move hole down

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [ebp], eax
	mov	ebp, esi
	push	DWORD PTR [esi-4]
	sub	esi, 4
	push	ebx
	call	DWORD PTR __Pred$[esp+28]
	add	esp, 8
	test	al, al
	jne	SHORT $LL7@Insertion_
$LN6@Insertion_:
	mov	esi, DWORD PTR __First$1$[esp+24]

; 6932 :                 }
; 6933 : 
; 6934 :                 *_Hole = _STD move(_Val); // insert element in hole

	mov	DWORD PTR [ebp], ebx
$LN10@Insertion_:

; 6922 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

	mov	eax, DWORD PTR __Last$1$[esp+24]
	add	edi, 4
	cmp	edi, eax
	jne	SHORT $LL2@Insertion_

; 6935 :             }
; 6936 :         }
; 6937 :     }
; 6938 : 
; 6939 :     return _Last;

	pop	ebp
	pop	ebx
$LN27@Insertion_:
	pop	edi
$LN3@Insertion_:
	pop	esi

; 6940 : }

	add	esp, 8
	ret	0
??$_Insertion_sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0P6A_NPAU12@1@Z@Z ENDP ; std::_Insertion_sort_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Make_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z
_TEXT	SEGMENT
__Val$1$ = -20						; size = 4
__Max_sequence_non_leaf$1$ = -16			; size = 4
__Hole$1$ = -12						; size = 4
__Bottom$1$ = -8					; size = 4
tv268 = -4						; size = 4
__Pred$ = 8						; size = 4
??$_Make_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z PROC ; std::_Make_heap_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 5544 : _CONSTEXPR20 void _Make_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

	sub	esp, 20					; 00000014H
	push	ebx
	mov	eax, edx
	mov	ebx, ecx

; 5545 :     // make [_First, _Last) into a heap
; 5546 :     using _Diff   = _Iter_diff_t<_RanIt>;
; 5547 :     _Diff _Bottom = _Last - _First;

	sub	eax, ebx
	sar	eax, 2
	push	ebp

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	mov	ebp, eax
	mov	DWORD PTR __Bottom$1$[esp+28], eax
	sar	ebp, 1
	test	ebp, ebp
	jle	$LN3@Make_heap_

; 5385 :     const _Diff _Max_sequence_non_leaf = (_Bottom - 1) >> 1; // shift for codegen

	mov	ecx, DWORD PTR __Pred$[esp+24]
	dec	eax
	mov	DWORD PTR tv268[esp+28], eax
	sar	eax, 1
	push	esi
	mov	DWORD PTR __Max_sequence_non_leaf$1$[esp+32], eax
	push	edi
	npad	1
$LL2@Make_heap_:

; 5549 :         // reheap top half, bottom to top
; 5550 :         --_Hole;
; 5551 :         _Iter_value_t<_RanIt> _Val = _STD move(*(_First + _Hole));

	mov	edx, DWORD PTR [ebx+ebp*4-4]
	dec	ebp
	mov	DWORD PTR __Hole$1$[esp+36], ebp

; 5552 :         _Pop_heap_hole_by_index(_First, _Hole, _Bottom, _STD move(_Val), _Pred);

	mov	edi, ebp
	mov	DWORD PTR __Val$1$[esp+36], edx

; 5381 :     _Diff _Idx       = _Hole;

	mov	esi, ebp

; 5386 :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

	cmp	ebp, eax
	jge	SHORT $LN8@Make_heap_
	mov	ebp, DWORD PTR __Max_sequence_non_leaf$1$[esp+36]
	npad	7
$LL7@Make_heap_:

; 5387 :         _Idx = 2 * _Idx + 2;
; 5388 :         if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1)))) {

	push	DWORD PTR [ebx+esi*8+4]
	lea	esi, DWORD PTR [esi*2+2]
	push	DWORD PTR [ebx+esi*4]
	call	ecx
	add	esp, 8
	test	al, al
	je	SHORT $LN9@Make_heap_

; 5389 :             --_Idx;

	dec	esi
$LN9@Make_heap_:

; 5390 :         }
; 5391 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [ebx+esi*4]
	mov	ecx, DWORD PTR __Pred$[esp+32]
	mov	DWORD PTR [ebx+edi*4], eax

; 5392 :         _Hole             = _Idx;

	mov	edi, esi
	cmp	esi, ebp
	jl	SHORT $LL7@Make_heap_
	mov	ebp, DWORD PTR __Hole$1$[esp+36]
	mov	eax, DWORD PTR __Max_sequence_non_leaf$1$[esp+36]
	mov	edx, DWORD PTR __Val$1$[esp+36]
$LN8@Make_heap_:

; 5393 :     }
; 5394 : 
; 5395 :     if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it

	cmp	esi, eax
	jne	SHORT $LN10@Make_heap_
	mov	eax, DWORD PTR __Bottom$1$[esp+36]
	test	al, 1
	jne	SHORT $LN10@Make_heap_

; 5396 :         *(_First + _Hole) = _STD move(*(_First + (_Bottom - 1)));

	mov	eax, DWORD PTR [ebx+eax*4-4]
	mov	DWORD PTR [ebx+edi*4], eax

; 5397 :         _Hole             = _Bottom - 1;

	mov	edi, DWORD PTR tv268[esp+36]
$LN10@Make_heap_:

; 5268 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

	cmp	ebp, edi
	jge	SHORT $LN29@Make_heap_
	npad	1
$LL15@Make_heap_:

; 5267 :     for (_Diff _Idx = (_Hole - 1) >> 1; // shift for codegen

	lea	esi, DWORD PTR [edi-1]
	sar	esi, 1

; 5268 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

	push	edx
	push	DWORD PTR [ebx+esi*4]
	call	ecx
	add	esp, 8
	test	al, al
	je	SHORT $LN29@Make_heap_

; 5269 :          _Idx = (_Hole - 1) >> 1) { // shift for codegen
; 5270 :         // move _Hole up to parent
; 5271 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [ebx+esi*4]
	mov	ecx, DWORD PTR __Pred$[esp+32]
	mov	edx, DWORD PTR __Val$1$[esp+36]
	mov	DWORD PTR [ebx+edi*4], eax

; 5272 :         _Hole             = _Idx;

	mov	edi, esi
	cmp	ebp, esi
	jl	SHORT $LL15@Make_heap_
$LN29@Make_heap_:

; 5273 :     }
; 5274 : 
; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	eax, DWORD PTR __Val$1$[esp+36]

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	mov	ecx, DWORD PTR __Pred$[esp+32]

; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	DWORD PTR [ebx+edi*4], eax

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	mov	eax, DWORD PTR __Max_sequence_non_leaf$1$[esp+36]
	test	ebp, ebp
	jg	$LL2@Make_heap_
	pop	edi
	pop	esi
$LN3@Make_heap_:
	pop	ebp

; 5553 :     }
; 5554 : }

	pop	ebx
	add	esp, 20					; 00000014H
	ret	0
??$_Make_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z ENDP ; std::_Make_heap_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Sort_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z
_TEXT	SEGMENT
__Val$1 = -4						; size = 4
__Pred$ = 8						; size = 4
??$_Sort_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z PROC ; std::_Sort_heap_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 5772 : _CONSTEXPR20 void _Sort_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

	push	ecx
	push	esi
	push	edi
	mov	esi, edx
	mov	edi, ecx

; 5773 :     // order heap by repeatedly popping
; 5774 :     for (; _Last - _First >= 2; --_Last) {

	sub	esi, edi
	mov	eax, esi
	and	eax, -4					; fffffffcH
	cmp	eax, 8
	jl	SHORT $LN3@Sort_heap_
	push	ebx
	mov	ebx, DWORD PTR __Pred$[esp+12]
	npad	8
$LL4@Sort_heap_:

; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	eax, DWORD PTR [edi+esi-4]

; 5410 :     _Pop_heap_hole_by_index(

	xor	edx, edx

; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	DWORD PTR __Val$1[esp+16], eax

; 5410 :     _Pop_heap_hole_by_index(

	mov	ecx, edi
	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [edi+esi-4], eax
	lea	eax, DWORD PTR __Val$1[esp+16]
	push	ebx
	push	eax
	lea	eax, DWORD PTR [esi-4]
	sar	eax, 2
	push	eax
	call	??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ; std::_Pop_heap_hole_by_index<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *)>

; 5773 :     // order heap by repeatedly popping
; 5774 :     for (; _Last - _First >= 2; --_Last) {

	sub	esi, 4

; 5410 :     _Pop_heap_hole_by_index(

	add	esp, 12					; 0000000cH

; 5773 :     // order heap by repeatedly popping
; 5774 :     for (; _Last - _First >= 2; --_Last) {

	mov	eax, esi
	and	eax, -4					; fffffffcH
	cmp	eax, 8
	jge	SHORT $LL4@Sort_heap_
	pop	ebx
$LN3@Sort_heap_:
	pop	edi

; 5775 :         _Pop_heap_unchecked(_First, _Last, _Pred);
; 5776 :     }
; 5777 : }

	pop	esi
	pop	ecx
	ret	0
??$_Sort_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z ENDP ; std::_Sort_heap_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Partition_by_median_guess_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YA?AU?$pair@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@0@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU23@1@Z@Z
_TEXT	SEGMENT
__Plast$1$ = -20					; size = 4
__Glast$1$ = -16					; size = 4
__First$1$ = -12					; size = 4
__Gfirst$1$ = -8					; size = 4
___$ReturnUdt$1$ = -4					; size = 4
__Last$ = 8						; size = 4
__Pred$ = 12						; size = 4
??$_Partition_by_median_guess_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YA?AU?$pair@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@0@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU23@1@Z@Z PROC ; std::_Partition_by_median_guess_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *)>, COMDAT
; ___$ReturnUdt$ = ecx
; __First$ = edx

; 6976 : _CONSTEXPR20 pair<_RanIt, _RanIt> _Partition_by_median_guess_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

	sub	esp, 20					; 00000014H
	push	ebx
	push	ebp

; 6977 :     // partition [_First, _Last)
; 6978 :     _RanIt _Mid = _First + ((_Last - _First) >> 1); // shift for codegen
; 6979 :     _Guess_median_unchecked(_First, _Mid, _Prev_iter(_Last), _Pred);

	mov	ebp, DWORD PTR __Pred$[esp+24]
	mov	ebx, edx
	push	esi
	push	edi
	mov	edi, DWORD PTR __Last$[esp+32]
	mov	eax, edi
	sub	eax, ebx
	mov	DWORD PTR ___$ReturnUdt$1$[esp+36], ecx
	sar	eax, 3
	mov	ecx, ebx
	push	ebp
	mov	DWORD PTR __First$1$[esp+40], ebx
	lea	esi, DWORD PTR [ebx+eax*4]
	lea	eax, DWORD PTR [edi-4]
	mov	edx, esi
	push	eax
	call	??$_Guess_median_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z ; std::_Guess_median_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *)>
	add	esp, 8

; 6980 :     _RanIt _Pfirst = _Mid;
; 6981 :     _RanIt _Plast  = _Next_iter(_Pfirst);

	lea	ebx, DWORD PTR [esi+4]
	mov	DWORD PTR __Plast$1$[esp+36], ebx

; 6982 : 
; 6983 :     while (_First < _Pfirst && !_DEBUG_LT_PRED(_Pred, *_Prev_iter(_Pfirst), *_Pfirst)
; 6984 :            && !_Pred(*_Pfirst, *_Prev_iter(_Pfirst))) {

	cmp	DWORD PTR __First$1$[esp+36], esi
	jae	SHORT $LN66@Partition_
	mov	ebx, DWORD PTR __First$1$[esp+36]
$LL2@Partition_:
	push	DWORD PTR [esi]
	push	DWORD PTR [esi-4]
	call	ebp
	add	esp, 8
	test	al, al
	jne	SHORT $LN91@Partition_
	push	DWORD PTR [esi-4]
	push	DWORD PTR [esi]
	call	ebp
	add	esp, 8
	test	al, al
	jne	SHORT $LN91@Partition_

; 6985 :         --_Pfirst;

	add	esi, -4					; fffffffcH
	cmp	ebx, esi
	jb	SHORT $LL2@Partition_
$LN91@Partition_:
	mov	ebx, DWORD PTR __Plast$1$[esp+36]
$LN66@Partition_:

; 6986 :     }
; 6987 : 
; 6988 :     while (_Plast < _Last && !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst) && !_Pred(*_Pfirst, *_Plast)) {

	cmp	ebx, edi
	jae	SHORT $LN5@Partition_
$LL4@Partition_:
	push	DWORD PTR [esi]
	push	DWORD PTR [ebx]
	call	ebp
	add	esp, 8
	test	al, al
	jne	SHORT $LN92@Partition_
	push	DWORD PTR [ebx]
	push	DWORD PTR [esi]
	call	ebp
	add	esp, 8
	test	al, al
	jne	SHORT $LN92@Partition_

; 6989 :         ++_Plast;

	add	ebx, 4
	cmp	ebx, edi
	jb	SHORT $LL4@Partition_
$LN92@Partition_:
	mov	DWORD PTR __Plast$1$[esp+36], ebx
$LN5@Partition_:

; 6990 :     }
; 6991 : 
; 6992 :     _RanIt _Gfirst = _Plast;

	mov	edi, ebx

; 6993 :     _RanIt _Glast  = _Pfirst;

	mov	ebp, esi
$LN97@Partition_:

; 6996 :         for (; _Gfirst < _Last; ++_Gfirst) {

	mov	DWORD PTR __Glast$1$[esp+36], ebp
$LN96@Partition_:
	mov	DWORD PTR __Gfirst$1$[esp+36], edi
$LL6@Partition_:
	cmp	edi, DWORD PTR __Last$[esp+32]
	jae	SHORT $LN70@Partition_
	mov	ebp, DWORD PTR __Last$[esp+32]
	npad	5
$LL11@Partition_:

; 6997 :             if (_DEBUG_LT_PRED(_Pred, *_Pfirst, *_Gfirst)) {

	push	DWORD PTR [edi]
	push	DWORD PTR [esi]
	call	DWORD PTR __Pred$[esp+40]
	add	esp, 8
	test	al, al
	jne	SHORT $LN9@Partition_

; 6998 :                 continue;
; 6999 :             } else if (_Pred(*_Gfirst, *_Pfirst)) {

	push	DWORD PTR [esi]
	push	DWORD PTR [edi]
	call	DWORD PTR __Pred$[esp+40]
	add	esp, 8
	test	al, al
	jne	SHORT $LN93@Partition_

; 7000 :                 break;
; 7001 :             } else if (_Plast != _Gfirst) {

	cmp	ebx, edi
	je	SHORT $LN19@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [ebx]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [ebx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN19@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6996 :         for (; _Gfirst < _Last; ++_Gfirst) {

	add	ebx, 4
$LN9@Partition_:
	add	edi, 4
	cmp	edi, ebp
	jb	SHORT $LL11@Partition_
$LN93@Partition_:
	mov	ebp, DWORD PTR __Glast$1$[esp+36]
	mov	DWORD PTR __Plast$1$[esp+36], ebx
	mov	DWORD PTR __Gfirst$1$[esp+36], edi
$LN70@Partition_:

; 7009 :         for (; _First < _Glast; --_Glast) {

	mov	eax, DWORD PTR __First$1$[esp+36]
	cmp	ebp, eax
	jbe	SHORT $LN95@Partition_
	mov	edi, DWORD PTR __Glast$1$[esp+36]
	mov	ebx, eax
	lea	ebp, DWORD PTR [edi-4]
$LL14@Partition_:

; 7010 :             if (_DEBUG_LT_PRED(_Pred, *_Prev_iter(_Glast), *_Pfirst)) {

	push	DWORD PTR [esi]
	push	DWORD PTR [ebp]
	call	DWORD PTR __Pred$[esp+40]
	add	esp, 8
	test	al, al
	jne	SHORT $LN12@Partition_

; 7011 :                 continue;
; 7012 :             } else if (_Pred(*_Pfirst, *_Prev_iter(_Glast))) {

	push	DWORD PTR [ebp]
	push	DWORD PTR [esi]
	call	DWORD PTR __Pred$[esp+40]
	add	esp, 8
	test	al, al
	jne	SHORT $LN94@Partition_

; 7013 :                 break;
; 7014 :             } else if (--_Pfirst != _Prev_iter(_Glast)) {

	sub	esi, 4
	cmp	esi, ebp
	je	SHORT $LN12@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebp]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebp], ecx
$LN12@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7009 :         for (; _First < _Glast; --_Glast) {

	sub	edi, 4
	sub	ebp, 4
	cmp	ebx, edi
	jb	SHORT $LL14@Partition_
$LN94@Partition_:
	mov	eax, DWORD PTR __First$1$[esp+36]
	mov	ebx, DWORD PTR __Plast$1$[esp+36]
	mov	DWORD PTR __Glast$1$[esp+36], edi
	mov	ebp, DWORD PTR __Glast$1$[esp+36]

; 7015 :                 _STD iter_swap(_Pfirst, _Prev_iter(_Glast));
; 7016 :             }
; 7017 :         }
; 7018 : 
; 7019 :         if (_Glast == _First && _Gfirst == _Last) {

	cmp	ebp, eax
	mov	edi, DWORD PTR __Gfirst$1$[esp+36]
$LN95@Partition_:
	jne	SHORT $LN27@Partition_
	cmp	edi, DWORD PTR __Last$[esp+32]
	je	SHORT $LN72@Partition_

; 7021 :         }
; 7022 : 
; 7023 :         if (_Glast == _First) { // no room at bottom, rotate pivot upward
; 7024 :             if (_Plast != _Gfirst) {

	cmp	ebx, edi
	je	SHORT $LN29@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebx], ecx
$LN29@Partition_:

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7028 :             ++_Plast;

	add	ebx, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7030 :             ++_Pfirst;

	add	esi, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7031 :             ++_Gfirst;

	add	edi, 4
	mov	DWORD PTR __Plast$1$[esp+36], ebx
	jmp	$LN96@Partition_
$LN27@Partition_:

; 7032 :         } else if (_Gfirst == _Last) { // no room at top, rotate pivot downward

	add	ebp, -4					; fffffffcH
	mov	DWORD PTR __Glast$1$[esp+36], ebp
	cmp	edi, DWORD PTR __Last$[esp+32]
	jne	SHORT $LN30@Partition_

; 7033 :             if (--_Glast != --_Pfirst) {

	sub	esi, 4
	cmp	ebp, esi
	je	SHORT $LN82@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7037 :             _STD iter_swap(_Pfirst, --_Plast);

	sub	ebx, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [ebp]

; 101  :     _Left    = _STD move(_Right);

	mov	DWORD PTR [ebp], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [esi], ecx

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR [esi], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7037 :             _STD iter_swap(_Pfirst, --_Plast);

	mov	DWORD PTR __Plast$1$[esp+36], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebx], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7038 :         } else {

	jmp	$LL6@Partition_
$LN82@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 102  :     _Right   = _STD move(_Tmp);

	mov	ecx, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7037 :             _STD iter_swap(_Pfirst, --_Plast);

	sub	ebx, 4
	mov	DWORD PTR __Plast$1$[esp+36], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebx], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7038 :         } else {

	jmp	$LL6@Partition_
$LN30@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [edi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebp]
	mov	DWORD PTR [edi], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7040 :             ++_Gfirst;

	add	edi, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7042 :     }

	jmp	$LN97@Partition_
$LN72@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	eax, DWORD PTR ___$ReturnUdt$1$[esp+36]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7020 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);

	pop	edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	DWORD PTR [eax], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7020 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);

	pop	esi
	pop	ebp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	DWORD PTR [eax+4], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7020 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);

	pop	ebx

; 7043 : }

	add	esp, 20					; 00000014H
	ret	0
??$_Partition_by_median_guess_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YA?AU?$pair@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@0@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU23@1@Z@Z ENDP ; std::_Partition_by_median_guess_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Insertion_sort_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0P6A_NPAU12@1@Z@Z
_TEXT	SEGMENT
__First$1$ = -8						; size = 4
__Last$1$ = -4						; size = 4
__Pred$ = 8						; size = 4
??$_Insertion_sort_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0P6A_NPAU12@1@Z@Z PROC ; std::_Insertion_sort_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 6919 : _CONSTEXPR20 _BidIt _Insertion_sort_unchecked(const _BidIt _First, const _BidIt _Last, _Pr _Pred) {

	sub	esp, 8
	push	esi
	mov	eax, edx
	mov	esi, ecx
	mov	DWORD PTR __Last$1$[esp+12], eax
	mov	DWORD PTR __First$1$[esp+12], esi

; 6920 :     // insertion sort [_First, _Last)
; 6921 :     if (_First != _Last) {

	cmp	esi, eax
	je	SHORT $LN3@Insertion_

; 6922 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

	push	edi
	lea	edi, DWORD PTR [esi+4]
	cmp	edi, eax
	je	SHORT $LN27@Insertion_
	push	ebx
	push	ebp
	npad	2
$LL2@Insertion_:

; 6923 :             _BidIt _Hole               = _Mid;
; 6924 :             _Iter_value_t<_BidIt> _Val = _STD move(*_Mid);
; 6925 : 
; 6926 :             if (_DEBUG_LT_PRED(_Pred, _Val, *_First)) { // found new earliest element, move to front

	push	DWORD PTR [esi]
	mov	ebx, DWORD PTR [edi]
	mov	ebp, edi
	push	ebx
	call	DWORD PTR __Pred$[esp+28]
	add	esp, 8
	test	al, al
	je	SHORT $LN9@Insertion_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4254 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	mov	ecx, edi

; 4255 :     auto _Result                = _CSTD memmove(_Dest_ch - _Count, _First_ch, _Count);

	mov	eax, edi
	sub	ecx, esi
	push	ecx
	sub	eax, ecx
	add	eax, 4
	push	esi
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6928 :                 *_First = _STD move(_Val);

	mov	DWORD PTR [esi], ebx

; 6929 :             } else { // look for insertion point after first

	jmp	SHORT $LN10@Insertion_
$LN9@Insertion_:

; 6930 :                 for (_BidIt _Prev = _Hole; _DEBUG_LT_PRED(_Pred, _Val, *--_Prev); _Hole = _Prev) {

	push	DWORD PTR [edi-4]
	lea	esi, DWORD PTR [edi-4]
	push	ebx
	call	DWORD PTR __Pred$[esp+28]
	add	esp, 8
	test	al, al
	je	SHORT $LN6@Insertion_
	npad	2
$LL7@Insertion_:

; 6931 :                     *_Hole = _STD move(*_Prev); // move hole down

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [ebp], eax
	mov	ebp, esi
	push	DWORD PTR [esi-4]
	sub	esi, 4
	push	ebx
	call	DWORD PTR __Pred$[esp+28]
	add	esp, 8
	test	al, al
	jne	SHORT $LL7@Insertion_
$LN6@Insertion_:
	mov	esi, DWORD PTR __First$1$[esp+24]

; 6932 :                 }
; 6933 : 
; 6934 :                 *_Hole = _STD move(_Val); // insert element in hole

	mov	DWORD PTR [ebp], ebx
$LN10@Insertion_:

; 6922 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

	mov	eax, DWORD PTR __Last$1$[esp+24]
	add	edi, 4
	cmp	edi, eax
	jne	SHORT $LL2@Insertion_

; 6935 :             }
; 6936 :         }
; 6937 :     }
; 6938 : 
; 6939 :     return _Last;

	pop	ebp
	pop	ebx
$LN27@Insertion_:
	pop	edi
$LN3@Insertion_:
	pop	esi

; 6940 : }

	add	esp, 8
	ret	0
??$_Insertion_sort_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0P6A_NPAU12@1@Z@Z ENDP ; std::_Insertion_sort_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Make_heap_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z
_TEXT	SEGMENT
__Val$1$ = -20						; size = 4
__Max_sequence_non_leaf$1$ = -16			; size = 4
__Hole$1$ = -12						; size = 4
__Bottom$1$ = -8					; size = 4
tv268 = -4						; size = 4
__Pred$ = 8						; size = 4
??$_Make_heap_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z PROC ; std::_Make_heap_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 5544 : _CONSTEXPR20 void _Make_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

	sub	esp, 20					; 00000014H
	push	ebx
	mov	eax, edx
	mov	ebx, ecx

; 5545 :     // make [_First, _Last) into a heap
; 5546 :     using _Diff   = _Iter_diff_t<_RanIt>;
; 5547 :     _Diff _Bottom = _Last - _First;

	sub	eax, ebx
	sar	eax, 2
	push	ebp

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	mov	ebp, eax
	mov	DWORD PTR __Bottom$1$[esp+28], eax
	sar	ebp, 1
	test	ebp, ebp
	jle	$LN3@Make_heap_

; 5385 :     const _Diff _Max_sequence_non_leaf = (_Bottom - 1) >> 1; // shift for codegen

	mov	ecx, DWORD PTR __Pred$[esp+24]
	dec	eax
	mov	DWORD PTR tv268[esp+28], eax
	sar	eax, 1
	push	esi
	mov	DWORD PTR __Max_sequence_non_leaf$1$[esp+32], eax
	push	edi
	npad	1
$LL2@Make_heap_:

; 5549 :         // reheap top half, bottom to top
; 5550 :         --_Hole;
; 5551 :         _Iter_value_t<_RanIt> _Val = _STD move(*(_First + _Hole));

	mov	edx, DWORD PTR [ebx+ebp*4-4]
	dec	ebp
	mov	DWORD PTR __Hole$1$[esp+36], ebp

; 5552 :         _Pop_heap_hole_by_index(_First, _Hole, _Bottom, _STD move(_Val), _Pred);

	mov	edi, ebp
	mov	DWORD PTR __Val$1$[esp+36], edx

; 5381 :     _Diff _Idx       = _Hole;

	mov	esi, ebp

; 5386 :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

	cmp	ebp, eax
	jge	SHORT $LN8@Make_heap_
	mov	ebp, DWORD PTR __Max_sequence_non_leaf$1$[esp+36]
	npad	7
$LL7@Make_heap_:

; 5387 :         _Idx = 2 * _Idx + 2;
; 5388 :         if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1)))) {

	push	DWORD PTR [ebx+esi*8+4]
	lea	esi, DWORD PTR [esi*2+2]
	push	DWORD PTR [ebx+esi*4]
	call	ecx
	add	esp, 8
	test	al, al
	je	SHORT $LN9@Make_heap_

; 5389 :             --_Idx;

	dec	esi
$LN9@Make_heap_:

; 5390 :         }
; 5391 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [ebx+esi*4]
	mov	ecx, DWORD PTR __Pred$[esp+32]
	mov	DWORD PTR [ebx+edi*4], eax

; 5392 :         _Hole             = _Idx;

	mov	edi, esi
	cmp	esi, ebp
	jl	SHORT $LL7@Make_heap_
	mov	ebp, DWORD PTR __Hole$1$[esp+36]
	mov	eax, DWORD PTR __Max_sequence_non_leaf$1$[esp+36]
	mov	edx, DWORD PTR __Val$1$[esp+36]
$LN8@Make_heap_:

; 5393 :     }
; 5394 : 
; 5395 :     if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it

	cmp	esi, eax
	jne	SHORT $LN10@Make_heap_
	mov	eax, DWORD PTR __Bottom$1$[esp+36]
	test	al, 1
	jne	SHORT $LN10@Make_heap_

; 5396 :         *(_First + _Hole) = _STD move(*(_First + (_Bottom - 1)));

	mov	eax, DWORD PTR [ebx+eax*4-4]
	mov	DWORD PTR [ebx+edi*4], eax

; 5397 :         _Hole             = _Bottom - 1;

	mov	edi, DWORD PTR tv268[esp+36]
$LN10@Make_heap_:

; 5268 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

	cmp	ebp, edi
	jge	SHORT $LN29@Make_heap_
	npad	1
$LL15@Make_heap_:

; 5267 :     for (_Diff _Idx = (_Hole - 1) >> 1; // shift for codegen

	lea	esi, DWORD PTR [edi-1]
	sar	esi, 1

; 5268 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

	push	edx
	push	DWORD PTR [ebx+esi*4]
	call	ecx
	add	esp, 8
	test	al, al
	je	SHORT $LN29@Make_heap_

; 5269 :          _Idx = (_Hole - 1) >> 1) { // shift for codegen
; 5270 :         // move _Hole up to parent
; 5271 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [ebx+esi*4]
	mov	ecx, DWORD PTR __Pred$[esp+32]
	mov	edx, DWORD PTR __Val$1$[esp+36]
	mov	DWORD PTR [ebx+edi*4], eax

; 5272 :         _Hole             = _Idx;

	mov	edi, esi
	cmp	ebp, esi
	jl	SHORT $LL15@Make_heap_
$LN29@Make_heap_:

; 5273 :     }
; 5274 : 
; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	eax, DWORD PTR __Val$1$[esp+36]

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	mov	ecx, DWORD PTR __Pred$[esp+32]

; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	DWORD PTR [ebx+edi*4], eax

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	mov	eax, DWORD PTR __Max_sequence_non_leaf$1$[esp+36]
	test	ebp, ebp
	jg	$LL2@Make_heap_
	pop	edi
	pop	esi
$LN3@Make_heap_:
	pop	ebp

; 5553 :     }
; 5554 : }

	pop	ebx
	add	esp, 20					; 00000014H
	ret	0
??$_Make_heap_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z ENDP ; std::_Make_heap_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Sort_heap_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z
_TEXT	SEGMENT
__Val$1 = -4						; size = 4
__Pred$ = 8						; size = 4
??$_Sort_heap_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z PROC ; std::_Sort_heap_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 5772 : _CONSTEXPR20 void _Sort_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

	push	ecx
	push	esi
	push	edi
	mov	esi, edx
	mov	edi, ecx

; 5773 :     // order heap by repeatedly popping
; 5774 :     for (; _Last - _First >= 2; --_Last) {

	sub	esi, edi
	mov	eax, esi
	and	eax, -4					; fffffffcH
	cmp	eax, 8
	jl	SHORT $LN3@Sort_heap_
	push	ebx
	mov	ebx, DWORD PTR __Pred$[esp+12]
	npad	8
$LL4@Sort_heap_:

; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	eax, DWORD PTR [edi+esi-4]

; 5410 :     _Pop_heap_hole_by_index(

	xor	edx, edx

; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	DWORD PTR __Val$1[esp+16], eax

; 5410 :     _Pop_heap_hole_by_index(

	mov	ecx, edi
	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [edi+esi-4], eax
	lea	eax, DWORD PTR __Val$1[esp+16]
	push	ebx
	push	eax
	lea	eax, DWORD PTR [esi-4]
	sar	eax, 2
	push	eax
	call	??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ; std::_Pop_heap_hole_by_index<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *)>

; 5773 :     // order heap by repeatedly popping
; 5774 :     for (; _Last - _First >= 2; --_Last) {

	sub	esi, 4

; 5410 :     _Pop_heap_hole_by_index(

	add	esp, 12					; 0000000cH

; 5773 :     // order heap by repeatedly popping
; 5774 :     for (; _Last - _First >= 2; --_Last) {

	mov	eax, esi
	and	eax, -4					; fffffffcH
	cmp	eax, 8
	jge	SHORT $LL4@Sort_heap_
	pop	ebx
$LN3@Sort_heap_:
	pop	edi

; 5775 :         _Pop_heap_unchecked(_First, _Last, _Pred);
; 5776 :     }
; 5777 : }

	pop	esi
	pop	ecx
	ret	0
??$_Sort_heap_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z ENDP ; std::_Sort_heap_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Partition_by_median_guess_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YA?AU?$pair@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@0@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU23@1@Z@Z
_TEXT	SEGMENT
__Plast$1$ = -20					; size = 4
__Glast$1$ = -16					; size = 4
__First$1$ = -12					; size = 4
__Gfirst$1$ = -8					; size = 4
___$ReturnUdt$1$ = -4					; size = 4
__Last$ = 8						; size = 4
__Pred$ = 12						; size = 4
??$_Partition_by_median_guess_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YA?AU?$pair@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@0@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU23@1@Z@Z PROC ; std::_Partition_by_median_guess_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *)>, COMDAT
; ___$ReturnUdt$ = ecx
; __First$ = edx

; 6976 : _CONSTEXPR20 pair<_RanIt, _RanIt> _Partition_by_median_guess_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

	sub	esp, 20					; 00000014H
	push	ebx
	push	ebp

; 6977 :     // partition [_First, _Last)
; 6978 :     _RanIt _Mid = _First + ((_Last - _First) >> 1); // shift for codegen
; 6979 :     _Guess_median_unchecked(_First, _Mid, _Prev_iter(_Last), _Pred);

	mov	ebp, DWORD PTR __Pred$[esp+24]
	mov	ebx, edx
	push	esi
	push	edi
	mov	edi, DWORD PTR __Last$[esp+32]
	mov	eax, edi
	sub	eax, ebx
	mov	DWORD PTR ___$ReturnUdt$1$[esp+36], ecx
	sar	eax, 3
	mov	ecx, ebx
	push	ebp
	mov	DWORD PTR __First$1$[esp+40], ebx
	lea	esi, DWORD PTR [ebx+eax*4]
	lea	eax, DWORD PTR [edi-4]
	mov	edx, esi
	push	eax
	call	??$_Guess_median_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z ; std::_Guess_median_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *)>
	add	esp, 8

; 6980 :     _RanIt _Pfirst = _Mid;
; 6981 :     _RanIt _Plast  = _Next_iter(_Pfirst);

	lea	ebx, DWORD PTR [esi+4]
	mov	DWORD PTR __Plast$1$[esp+36], ebx

; 6982 : 
; 6983 :     while (_First < _Pfirst && !_DEBUG_LT_PRED(_Pred, *_Prev_iter(_Pfirst), *_Pfirst)
; 6984 :            && !_Pred(*_Pfirst, *_Prev_iter(_Pfirst))) {

	cmp	DWORD PTR __First$1$[esp+36], esi
	jae	SHORT $LN66@Partition_
	mov	ebx, DWORD PTR __First$1$[esp+36]
$LL2@Partition_:
	push	DWORD PTR [esi]
	push	DWORD PTR [esi-4]
	call	ebp
	add	esp, 8
	test	al, al
	jne	SHORT $LN91@Partition_
	push	DWORD PTR [esi-4]
	push	DWORD PTR [esi]
	call	ebp
	add	esp, 8
	test	al, al
	jne	SHORT $LN91@Partition_

; 6985 :         --_Pfirst;

	add	esi, -4					; fffffffcH
	cmp	ebx, esi
	jb	SHORT $LL2@Partition_
$LN91@Partition_:
	mov	ebx, DWORD PTR __Plast$1$[esp+36]
$LN66@Partition_:

; 6986 :     }
; 6987 : 
; 6988 :     while (_Plast < _Last && !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst) && !_Pred(*_Pfirst, *_Plast)) {

	cmp	ebx, edi
	jae	SHORT $LN5@Partition_
$LL4@Partition_:
	push	DWORD PTR [esi]
	push	DWORD PTR [ebx]
	call	ebp
	add	esp, 8
	test	al, al
	jne	SHORT $LN92@Partition_
	push	DWORD PTR [ebx]
	push	DWORD PTR [esi]
	call	ebp
	add	esp, 8
	test	al, al
	jne	SHORT $LN92@Partition_

; 6989 :         ++_Plast;

	add	ebx, 4
	cmp	ebx, edi
	jb	SHORT $LL4@Partition_
$LN92@Partition_:
	mov	DWORD PTR __Plast$1$[esp+36], ebx
$LN5@Partition_:

; 6990 :     }
; 6991 : 
; 6992 :     _RanIt _Gfirst = _Plast;

	mov	edi, ebx

; 6993 :     _RanIt _Glast  = _Pfirst;

	mov	ebp, esi
$LN97@Partition_:

; 6996 :         for (; _Gfirst < _Last; ++_Gfirst) {

	mov	DWORD PTR __Glast$1$[esp+36], ebp
$LN96@Partition_:
	mov	DWORD PTR __Gfirst$1$[esp+36], edi
$LL6@Partition_:
	cmp	edi, DWORD PTR __Last$[esp+32]
	jae	SHORT $LN70@Partition_
	mov	ebp, DWORD PTR __Last$[esp+32]
	npad	5
$LL11@Partition_:

; 6997 :             if (_DEBUG_LT_PRED(_Pred, *_Pfirst, *_Gfirst)) {

	push	DWORD PTR [edi]
	push	DWORD PTR [esi]
	call	DWORD PTR __Pred$[esp+40]
	add	esp, 8
	test	al, al
	jne	SHORT $LN9@Partition_

; 6998 :                 continue;
; 6999 :             } else if (_Pred(*_Gfirst, *_Pfirst)) {

	push	DWORD PTR [esi]
	push	DWORD PTR [edi]
	call	DWORD PTR __Pred$[esp+40]
	add	esp, 8
	test	al, al
	jne	SHORT $LN93@Partition_

; 7000 :                 break;
; 7001 :             } else if (_Plast != _Gfirst) {

	cmp	ebx, edi
	je	SHORT $LN19@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [ebx]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [ebx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN19@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6996 :         for (; _Gfirst < _Last; ++_Gfirst) {

	add	ebx, 4
$LN9@Partition_:
	add	edi, 4
	cmp	edi, ebp
	jb	SHORT $LL11@Partition_
$LN93@Partition_:
	mov	ebp, DWORD PTR __Glast$1$[esp+36]
	mov	DWORD PTR __Plast$1$[esp+36], ebx
	mov	DWORD PTR __Gfirst$1$[esp+36], edi
$LN70@Partition_:

; 7009 :         for (; _First < _Glast; --_Glast) {

	mov	eax, DWORD PTR __First$1$[esp+36]
	cmp	ebp, eax
	jbe	SHORT $LN95@Partition_
	mov	edi, DWORD PTR __Glast$1$[esp+36]
	mov	ebx, eax
	lea	ebp, DWORD PTR [edi-4]
$LL14@Partition_:

; 7010 :             if (_DEBUG_LT_PRED(_Pred, *_Prev_iter(_Glast), *_Pfirst)) {

	push	DWORD PTR [esi]
	push	DWORD PTR [ebp]
	call	DWORD PTR __Pred$[esp+40]
	add	esp, 8
	test	al, al
	jne	SHORT $LN12@Partition_

; 7011 :                 continue;
; 7012 :             } else if (_Pred(*_Pfirst, *_Prev_iter(_Glast))) {

	push	DWORD PTR [ebp]
	push	DWORD PTR [esi]
	call	DWORD PTR __Pred$[esp+40]
	add	esp, 8
	test	al, al
	jne	SHORT $LN94@Partition_

; 7013 :                 break;
; 7014 :             } else if (--_Pfirst != _Prev_iter(_Glast)) {

	sub	esi, 4
	cmp	esi, ebp
	je	SHORT $LN12@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebp]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebp], ecx
$LN12@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7009 :         for (; _First < _Glast; --_Glast) {

	sub	edi, 4
	sub	ebp, 4
	cmp	ebx, edi
	jb	SHORT $LL14@Partition_
$LN94@Partition_:
	mov	eax, DWORD PTR __First$1$[esp+36]
	mov	ebx, DWORD PTR __Plast$1$[esp+36]
	mov	DWORD PTR __Glast$1$[esp+36], edi
	mov	ebp, DWORD PTR __Glast$1$[esp+36]

; 7015 :                 _STD iter_swap(_Pfirst, _Prev_iter(_Glast));
; 7016 :             }
; 7017 :         }
; 7018 : 
; 7019 :         if (_Glast == _First && _Gfirst == _Last) {

	cmp	ebp, eax
	mov	edi, DWORD PTR __Gfirst$1$[esp+36]
$LN95@Partition_:
	jne	SHORT $LN27@Partition_
	cmp	edi, DWORD PTR __Last$[esp+32]
	je	SHORT $LN72@Partition_

; 7021 :         }
; 7022 : 
; 7023 :         if (_Glast == _First) { // no room at bottom, rotate pivot upward
; 7024 :             if (_Plast != _Gfirst) {

	cmp	ebx, edi
	je	SHORT $LN29@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebx], ecx
$LN29@Partition_:

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7028 :             ++_Plast;

	add	ebx, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7030 :             ++_Pfirst;

	add	esi, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7031 :             ++_Gfirst;

	add	edi, 4
	mov	DWORD PTR __Plast$1$[esp+36], ebx
	jmp	$LN96@Partition_
$LN27@Partition_:

; 7032 :         } else if (_Gfirst == _Last) { // no room at top, rotate pivot downward

	add	ebp, -4					; fffffffcH
	mov	DWORD PTR __Glast$1$[esp+36], ebp
	cmp	edi, DWORD PTR __Last$[esp+32]
	jne	SHORT $LN30@Partition_

; 7033 :             if (--_Glast != --_Pfirst) {

	sub	esi, 4
	cmp	ebp, esi
	je	SHORT $LN82@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7037 :             _STD iter_swap(_Pfirst, --_Plast);

	sub	ebx, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [ebp]

; 101  :     _Left    = _STD move(_Right);

	mov	DWORD PTR [ebp], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [esi], ecx

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR [esi], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7037 :             _STD iter_swap(_Pfirst, --_Plast);

	mov	DWORD PTR __Plast$1$[esp+36], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebx], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7038 :         } else {

	jmp	$LL6@Partition_
$LN82@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 102  :     _Right   = _STD move(_Tmp);

	mov	ecx, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7037 :             _STD iter_swap(_Pfirst, --_Plast);

	sub	ebx, 4
	mov	DWORD PTR __Plast$1$[esp+36], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebx], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7038 :         } else {

	jmp	$LL6@Partition_
$LN30@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [edi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebp]
	mov	DWORD PTR [edi], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7040 :             ++_Gfirst;

	add	edi, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7042 :     }

	jmp	$LN97@Partition_
$LN72@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	eax, DWORD PTR ___$ReturnUdt$1$[esp+36]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7020 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);

	pop	edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	DWORD PTR [eax], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7020 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);

	pop	esi
	pop	ebp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	DWORD PTR [eax+4], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7020 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);

	pop	ebx

; 7043 : }

	add	esp, 20					; 00000014H
	ret	0
??$_Partition_by_median_guess_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YA?AU?$pair@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@0@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU23@1@Z@Z ENDP ; std::_Partition_by_median_guess_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Insertion_sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0P6A_NPAU12@1@Z@Z
_TEXT	SEGMENT
__First$1$ = -8						; size = 4
__Last$1$ = -4						; size = 4
__Pred$ = 8						; size = 4
??$_Insertion_sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0P6A_NPAU12@1@Z@Z PROC ; std::_Insertion_sort_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 6919 : _CONSTEXPR20 _BidIt _Insertion_sort_unchecked(const _BidIt _First, const _BidIt _Last, _Pr _Pred) {

	sub	esp, 8
	push	esi
	mov	eax, edx
	mov	esi, ecx
	mov	DWORD PTR __Last$1$[esp+12], eax
	mov	DWORD PTR __First$1$[esp+12], esi

; 6920 :     // insertion sort [_First, _Last)
; 6921 :     if (_First != _Last) {

	cmp	esi, eax
	je	SHORT $LN3@Insertion_

; 6922 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

	push	edi
	lea	edi, DWORD PTR [esi+4]
	cmp	edi, eax
	je	SHORT $LN27@Insertion_
	push	ebx
	push	ebp
	npad	2
$LL2@Insertion_:

; 6923 :             _BidIt _Hole               = _Mid;
; 6924 :             _Iter_value_t<_BidIt> _Val = _STD move(*_Mid);
; 6925 : 
; 6926 :             if (_DEBUG_LT_PRED(_Pred, _Val, *_First)) { // found new earliest element, move to front

	push	DWORD PTR [esi]
	mov	ebx, DWORD PTR [edi]
	mov	ebp, edi
	push	ebx
	call	DWORD PTR __Pred$[esp+28]
	add	esp, 8
	test	al, al
	je	SHORT $LN9@Insertion_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4254 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	mov	ecx, edi

; 4255 :     auto _Result                = _CSTD memmove(_Dest_ch - _Count, _First_ch, _Count);

	mov	eax, edi
	sub	ecx, esi
	push	ecx
	sub	eax, ecx
	add	eax, 4
	push	esi
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6928 :                 *_First = _STD move(_Val);

	mov	DWORD PTR [esi], ebx

; 6929 :             } else { // look for insertion point after first

	jmp	SHORT $LN10@Insertion_
$LN9@Insertion_:

; 6930 :                 for (_BidIt _Prev = _Hole; _DEBUG_LT_PRED(_Pred, _Val, *--_Prev); _Hole = _Prev) {

	push	DWORD PTR [edi-4]
	lea	esi, DWORD PTR [edi-4]
	push	ebx
	call	DWORD PTR __Pred$[esp+28]
	add	esp, 8
	test	al, al
	je	SHORT $LN6@Insertion_
	npad	2
$LL7@Insertion_:

; 6931 :                     *_Hole = _STD move(*_Prev); // move hole down

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [ebp], eax
	mov	ebp, esi
	push	DWORD PTR [esi-4]
	sub	esi, 4
	push	ebx
	call	DWORD PTR __Pred$[esp+28]
	add	esp, 8
	test	al, al
	jne	SHORT $LL7@Insertion_
$LN6@Insertion_:
	mov	esi, DWORD PTR __First$1$[esp+24]

; 6932 :                 }
; 6933 : 
; 6934 :                 *_Hole = _STD move(_Val); // insert element in hole

	mov	DWORD PTR [ebp], ebx
$LN10@Insertion_:

; 6922 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

	mov	eax, DWORD PTR __Last$1$[esp+24]
	add	edi, 4
	cmp	edi, eax
	jne	SHORT $LL2@Insertion_

; 6935 :             }
; 6936 :         }
; 6937 :     }
; 6938 : 
; 6939 :     return _Last;

	pop	ebp
	pop	ebx
$LN27@Insertion_:
	pop	edi
$LN3@Insertion_:
	pop	esi

; 6940 : }

	add	esp, 8
	ret	0
??$_Insertion_sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0P6A_NPAU12@1@Z@Z ENDP ; std::_Insertion_sort_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Make_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z
_TEXT	SEGMENT
__Val$1$ = -20						; size = 4
__Max_sequence_non_leaf$1$ = -16			; size = 4
__Hole$1$ = -12						; size = 4
__Bottom$1$ = -8					; size = 4
tv268 = -4						; size = 4
__Pred$ = 8						; size = 4
??$_Make_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z PROC ; std::_Make_heap_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 5544 : _CONSTEXPR20 void _Make_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

	sub	esp, 20					; 00000014H
	push	ebx
	mov	eax, edx
	mov	ebx, ecx

; 5545 :     // make [_First, _Last) into a heap
; 5546 :     using _Diff   = _Iter_diff_t<_RanIt>;
; 5547 :     _Diff _Bottom = _Last - _First;

	sub	eax, ebx
	sar	eax, 2
	push	ebp

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	mov	ebp, eax
	mov	DWORD PTR __Bottom$1$[esp+28], eax
	sar	ebp, 1
	test	ebp, ebp
	jle	$LN3@Make_heap_

; 5385 :     const _Diff _Max_sequence_non_leaf = (_Bottom - 1) >> 1; // shift for codegen

	mov	ecx, DWORD PTR __Pred$[esp+24]
	dec	eax
	mov	DWORD PTR tv268[esp+28], eax
	sar	eax, 1
	push	esi
	mov	DWORD PTR __Max_sequence_non_leaf$1$[esp+32], eax
	push	edi
	npad	1
$LL2@Make_heap_:

; 5549 :         // reheap top half, bottom to top
; 5550 :         --_Hole;
; 5551 :         _Iter_value_t<_RanIt> _Val = _STD move(*(_First + _Hole));

	mov	edx, DWORD PTR [ebx+ebp*4-4]
	dec	ebp
	mov	DWORD PTR __Hole$1$[esp+36], ebp

; 5552 :         _Pop_heap_hole_by_index(_First, _Hole, _Bottom, _STD move(_Val), _Pred);

	mov	edi, ebp
	mov	DWORD PTR __Val$1$[esp+36], edx

; 5381 :     _Diff _Idx       = _Hole;

	mov	esi, ebp

; 5386 :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

	cmp	ebp, eax
	jge	SHORT $LN8@Make_heap_
	mov	ebp, DWORD PTR __Max_sequence_non_leaf$1$[esp+36]
	npad	7
$LL7@Make_heap_:

; 5387 :         _Idx = 2 * _Idx + 2;
; 5388 :         if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1)))) {

	push	DWORD PTR [ebx+esi*8+4]
	lea	esi, DWORD PTR [esi*2+2]
	push	DWORD PTR [ebx+esi*4]
	call	ecx
	add	esp, 8
	test	al, al
	je	SHORT $LN9@Make_heap_

; 5389 :             --_Idx;

	dec	esi
$LN9@Make_heap_:

; 5390 :         }
; 5391 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [ebx+esi*4]
	mov	ecx, DWORD PTR __Pred$[esp+32]
	mov	DWORD PTR [ebx+edi*4], eax

; 5392 :         _Hole             = _Idx;

	mov	edi, esi
	cmp	esi, ebp
	jl	SHORT $LL7@Make_heap_
	mov	ebp, DWORD PTR __Hole$1$[esp+36]
	mov	eax, DWORD PTR __Max_sequence_non_leaf$1$[esp+36]
	mov	edx, DWORD PTR __Val$1$[esp+36]
$LN8@Make_heap_:

; 5393 :     }
; 5394 : 
; 5395 :     if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it

	cmp	esi, eax
	jne	SHORT $LN10@Make_heap_
	mov	eax, DWORD PTR __Bottom$1$[esp+36]
	test	al, 1
	jne	SHORT $LN10@Make_heap_

; 5396 :         *(_First + _Hole) = _STD move(*(_First + (_Bottom - 1)));

	mov	eax, DWORD PTR [ebx+eax*4-4]
	mov	DWORD PTR [ebx+edi*4], eax

; 5397 :         _Hole             = _Bottom - 1;

	mov	edi, DWORD PTR tv268[esp+36]
$LN10@Make_heap_:

; 5268 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

	cmp	ebp, edi
	jge	SHORT $LN29@Make_heap_
	npad	1
$LL15@Make_heap_:

; 5267 :     for (_Diff _Idx = (_Hole - 1) >> 1; // shift for codegen

	lea	esi, DWORD PTR [edi-1]
	sar	esi, 1

; 5268 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

	push	edx
	push	DWORD PTR [ebx+esi*4]
	call	ecx
	add	esp, 8
	test	al, al
	je	SHORT $LN29@Make_heap_

; 5269 :          _Idx = (_Hole - 1) >> 1) { // shift for codegen
; 5270 :         // move _Hole up to parent
; 5271 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [ebx+esi*4]
	mov	ecx, DWORD PTR __Pred$[esp+32]
	mov	edx, DWORD PTR __Val$1$[esp+36]
	mov	DWORD PTR [ebx+edi*4], eax

; 5272 :         _Hole             = _Idx;

	mov	edi, esi
	cmp	ebp, esi
	jl	SHORT $LL15@Make_heap_
$LN29@Make_heap_:

; 5273 :     }
; 5274 : 
; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	eax, DWORD PTR __Val$1$[esp+36]

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	mov	ecx, DWORD PTR __Pred$[esp+32]

; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	DWORD PTR [ebx+edi*4], eax

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	mov	eax, DWORD PTR __Max_sequence_non_leaf$1$[esp+36]
	test	ebp, ebp
	jg	$LL2@Make_heap_
	pop	edi
	pop	esi
$LN3@Make_heap_:
	pop	ebp

; 5553 :     }
; 5554 : }

	pop	ebx
	add	esp, 20					; 00000014H
	ret	0
??$_Make_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z ENDP ; std::_Make_heap_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Sort_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z
_TEXT	SEGMENT
__Val$1 = -4						; size = 4
__Pred$ = 8						; size = 4
??$_Sort_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z PROC ; std::_Sort_heap_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 5772 : _CONSTEXPR20 void _Sort_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

	push	ecx
	push	esi
	push	edi
	mov	esi, edx
	mov	edi, ecx

; 5773 :     // order heap by repeatedly popping
; 5774 :     for (; _Last - _First >= 2; --_Last) {

	sub	esi, edi
	mov	eax, esi
	and	eax, -4					; fffffffcH
	cmp	eax, 8
	jl	SHORT $LN3@Sort_heap_
	push	ebx
	mov	ebx, DWORD PTR __Pred$[esp+12]
	npad	8
$LL4@Sort_heap_:

; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	eax, DWORD PTR [edi+esi-4]

; 5410 :     _Pop_heap_hole_by_index(

	xor	edx, edx

; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	DWORD PTR __Val$1[esp+16], eax

; 5410 :     _Pop_heap_hole_by_index(

	mov	ecx, edi
	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [edi+esi-4], eax
	lea	eax, DWORD PTR __Val$1[esp+16]
	push	ebx
	push	eax
	lea	eax, DWORD PTR [esi-4]
	sar	eax, 2
	push	eax
	call	??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ; std::_Pop_heap_hole_by_index<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *)>

; 5773 :     // order heap by repeatedly popping
; 5774 :     for (; _Last - _First >= 2; --_Last) {

	sub	esi, 4

; 5410 :     _Pop_heap_hole_by_index(

	add	esp, 12					; 0000000cH

; 5773 :     // order heap by repeatedly popping
; 5774 :     for (; _Last - _First >= 2; --_Last) {

	mov	eax, esi
	and	eax, -4					; fffffffcH
	cmp	eax, 8
	jge	SHORT $LL4@Sort_heap_
	pop	ebx
$LN3@Sort_heap_:
	pop	edi

; 5775 :         _Pop_heap_unchecked(_First, _Last, _Pred);
; 5776 :     }
; 5777 : }

	pop	esi
	pop	ecx
	ret	0
??$_Sort_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z ENDP ; std::_Sort_heap_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Partition_by_median_guess_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YA?AU?$pair@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@0@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU23@1@Z@Z
_TEXT	SEGMENT
__Plast$1$ = -20					; size = 4
__Glast$1$ = -16					; size = 4
__First$1$ = -12					; size = 4
__Gfirst$1$ = -8					; size = 4
___$ReturnUdt$1$ = -4					; size = 4
__Last$ = 8						; size = 4
__Pred$ = 12						; size = 4
??$_Partition_by_median_guess_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YA?AU?$pair@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@0@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU23@1@Z@Z PROC ; std::_Partition_by_median_guess_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *)>, COMDAT
; ___$ReturnUdt$ = ecx
; __First$ = edx

; 6976 : _CONSTEXPR20 pair<_RanIt, _RanIt> _Partition_by_median_guess_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

	sub	esp, 20					; 00000014H
	push	ebx
	push	ebp

; 6977 :     // partition [_First, _Last)
; 6978 :     _RanIt _Mid = _First + ((_Last - _First) >> 1); // shift for codegen
; 6979 :     _Guess_median_unchecked(_First, _Mid, _Prev_iter(_Last), _Pred);

	mov	ebp, DWORD PTR __Pred$[esp+24]
	mov	ebx, edx
	push	esi
	push	edi
	mov	edi, DWORD PTR __Last$[esp+32]
	mov	eax, edi
	sub	eax, ebx
	mov	DWORD PTR ___$ReturnUdt$1$[esp+36], ecx
	sar	eax, 3
	mov	ecx, ebx
	push	ebp
	mov	DWORD PTR __First$1$[esp+40], ebx
	lea	esi, DWORD PTR [ebx+eax*4]
	lea	eax, DWORD PTR [edi-4]
	mov	edx, esi
	push	eax
	call	??$_Guess_median_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z ; std::_Guess_median_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *)>
	add	esp, 8

; 6980 :     _RanIt _Pfirst = _Mid;
; 6981 :     _RanIt _Plast  = _Next_iter(_Pfirst);

	lea	ebx, DWORD PTR [esi+4]
	mov	DWORD PTR __Plast$1$[esp+36], ebx

; 6982 : 
; 6983 :     while (_First < _Pfirst && !_DEBUG_LT_PRED(_Pred, *_Prev_iter(_Pfirst), *_Pfirst)
; 6984 :            && !_Pred(*_Pfirst, *_Prev_iter(_Pfirst))) {

	cmp	DWORD PTR __First$1$[esp+36], esi
	jae	SHORT $LN66@Partition_
	mov	ebx, DWORD PTR __First$1$[esp+36]
$LL2@Partition_:
	push	DWORD PTR [esi]
	push	DWORD PTR [esi-4]
	call	ebp
	add	esp, 8
	test	al, al
	jne	SHORT $LN91@Partition_
	push	DWORD PTR [esi-4]
	push	DWORD PTR [esi]
	call	ebp
	add	esp, 8
	test	al, al
	jne	SHORT $LN91@Partition_

; 6985 :         --_Pfirst;

	add	esi, -4					; fffffffcH
	cmp	ebx, esi
	jb	SHORT $LL2@Partition_
$LN91@Partition_:
	mov	ebx, DWORD PTR __Plast$1$[esp+36]
$LN66@Partition_:

; 6986 :     }
; 6987 : 
; 6988 :     while (_Plast < _Last && !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst) && !_Pred(*_Pfirst, *_Plast)) {

	cmp	ebx, edi
	jae	SHORT $LN5@Partition_
$LL4@Partition_:
	push	DWORD PTR [esi]
	push	DWORD PTR [ebx]
	call	ebp
	add	esp, 8
	test	al, al
	jne	SHORT $LN92@Partition_
	push	DWORD PTR [ebx]
	push	DWORD PTR [esi]
	call	ebp
	add	esp, 8
	test	al, al
	jne	SHORT $LN92@Partition_

; 6989 :         ++_Plast;

	add	ebx, 4
	cmp	ebx, edi
	jb	SHORT $LL4@Partition_
$LN92@Partition_:
	mov	DWORD PTR __Plast$1$[esp+36], ebx
$LN5@Partition_:

; 6990 :     }
; 6991 : 
; 6992 :     _RanIt _Gfirst = _Plast;

	mov	edi, ebx

; 6993 :     _RanIt _Glast  = _Pfirst;

	mov	ebp, esi
$LN97@Partition_:

; 6996 :         for (; _Gfirst < _Last; ++_Gfirst) {

	mov	DWORD PTR __Glast$1$[esp+36], ebp
$LN96@Partition_:
	mov	DWORD PTR __Gfirst$1$[esp+36], edi
$LL6@Partition_:
	cmp	edi, DWORD PTR __Last$[esp+32]
	jae	SHORT $LN70@Partition_
	mov	ebp, DWORD PTR __Last$[esp+32]
	npad	5
$LL11@Partition_:

; 6997 :             if (_DEBUG_LT_PRED(_Pred, *_Pfirst, *_Gfirst)) {

	push	DWORD PTR [edi]
	push	DWORD PTR [esi]
	call	DWORD PTR __Pred$[esp+40]
	add	esp, 8
	test	al, al
	jne	SHORT $LN9@Partition_

; 6998 :                 continue;
; 6999 :             } else if (_Pred(*_Gfirst, *_Pfirst)) {

	push	DWORD PTR [esi]
	push	DWORD PTR [edi]
	call	DWORD PTR __Pred$[esp+40]
	add	esp, 8
	test	al, al
	jne	SHORT $LN93@Partition_

; 7000 :                 break;
; 7001 :             } else if (_Plast != _Gfirst) {

	cmp	ebx, edi
	je	SHORT $LN19@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [ebx]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [ebx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN19@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6996 :         for (; _Gfirst < _Last; ++_Gfirst) {

	add	ebx, 4
$LN9@Partition_:
	add	edi, 4
	cmp	edi, ebp
	jb	SHORT $LL11@Partition_
$LN93@Partition_:
	mov	ebp, DWORD PTR __Glast$1$[esp+36]
	mov	DWORD PTR __Plast$1$[esp+36], ebx
	mov	DWORD PTR __Gfirst$1$[esp+36], edi
$LN70@Partition_:

; 7009 :         for (; _First < _Glast; --_Glast) {

	mov	eax, DWORD PTR __First$1$[esp+36]
	cmp	ebp, eax
	jbe	SHORT $LN95@Partition_
	mov	edi, DWORD PTR __Glast$1$[esp+36]
	mov	ebx, eax
	lea	ebp, DWORD PTR [edi-4]
$LL14@Partition_:

; 7010 :             if (_DEBUG_LT_PRED(_Pred, *_Prev_iter(_Glast), *_Pfirst)) {

	push	DWORD PTR [esi]
	push	DWORD PTR [ebp]
	call	DWORD PTR __Pred$[esp+40]
	add	esp, 8
	test	al, al
	jne	SHORT $LN12@Partition_

; 7011 :                 continue;
; 7012 :             } else if (_Pred(*_Pfirst, *_Prev_iter(_Glast))) {

	push	DWORD PTR [ebp]
	push	DWORD PTR [esi]
	call	DWORD PTR __Pred$[esp+40]
	add	esp, 8
	test	al, al
	jne	SHORT $LN94@Partition_

; 7013 :                 break;
; 7014 :             } else if (--_Pfirst != _Prev_iter(_Glast)) {

	sub	esi, 4
	cmp	esi, ebp
	je	SHORT $LN12@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebp]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebp], ecx
$LN12@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7009 :         for (; _First < _Glast; --_Glast) {

	sub	edi, 4
	sub	ebp, 4
	cmp	ebx, edi
	jb	SHORT $LL14@Partition_
$LN94@Partition_:
	mov	eax, DWORD PTR __First$1$[esp+36]
	mov	ebx, DWORD PTR __Plast$1$[esp+36]
	mov	DWORD PTR __Glast$1$[esp+36], edi
	mov	ebp, DWORD PTR __Glast$1$[esp+36]

; 7015 :                 _STD iter_swap(_Pfirst, _Prev_iter(_Glast));
; 7016 :             }
; 7017 :         }
; 7018 : 
; 7019 :         if (_Glast == _First && _Gfirst == _Last) {

	cmp	ebp, eax
	mov	edi, DWORD PTR __Gfirst$1$[esp+36]
$LN95@Partition_:
	jne	SHORT $LN27@Partition_
	cmp	edi, DWORD PTR __Last$[esp+32]
	je	SHORT $LN72@Partition_

; 7021 :         }
; 7022 : 
; 7023 :         if (_Glast == _First) { // no room at bottom, rotate pivot upward
; 7024 :             if (_Plast != _Gfirst) {

	cmp	ebx, edi
	je	SHORT $LN29@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebx], ecx
$LN29@Partition_:

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7028 :             ++_Plast;

	add	ebx, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7030 :             ++_Pfirst;

	add	esi, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7031 :             ++_Gfirst;

	add	edi, 4
	mov	DWORD PTR __Plast$1$[esp+36], ebx
	jmp	$LN96@Partition_
$LN27@Partition_:

; 7032 :         } else if (_Gfirst == _Last) { // no room at top, rotate pivot downward

	add	ebp, -4					; fffffffcH
	mov	DWORD PTR __Glast$1$[esp+36], ebp
	cmp	edi, DWORD PTR __Last$[esp+32]
	jne	SHORT $LN30@Partition_

; 7033 :             if (--_Glast != --_Pfirst) {

	sub	esi, 4
	cmp	ebp, esi
	je	SHORT $LN82@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7037 :             _STD iter_swap(_Pfirst, --_Plast);

	sub	ebx, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [ebp]

; 101  :     _Left    = _STD move(_Right);

	mov	DWORD PTR [ebp], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [esi], ecx

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR [esi], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7037 :             _STD iter_swap(_Pfirst, --_Plast);

	mov	DWORD PTR __Plast$1$[esp+36], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebx], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7038 :         } else {

	jmp	$LL6@Partition_
$LN82@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 102  :     _Right   = _STD move(_Tmp);

	mov	ecx, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7037 :             _STD iter_swap(_Pfirst, --_Plast);

	sub	ebx, 4
	mov	DWORD PTR __Plast$1$[esp+36], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebx], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7038 :         } else {

	jmp	$LL6@Partition_
$LN30@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [edi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebp]
	mov	DWORD PTR [edi], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7040 :             ++_Gfirst;

	add	edi, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7042 :     }

	jmp	$LN97@Partition_
$LN72@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	eax, DWORD PTR ___$ReturnUdt$1$[esp+36]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7020 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);

	pop	edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	DWORD PTR [eax], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7020 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);

	pop	esi
	pop	ebp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	DWORD PTR [eax+4], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7020 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);

	pop	ebx

; 7043 : }

	add	esp, 20					; 00000014H
	ret	0
??$_Partition_by_median_guess_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YA?AU?$pair@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@0@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU23@1@Z@Z ENDP ; std::_Partition_by_median_guess_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Insertion_sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0P6A_NPAU12@1@Z@Z
_TEXT	SEGMENT
__First$1$ = -8						; size = 4
__Last$1$ = -4						; size = 4
__Pred$ = 8						; size = 4
??$_Insertion_sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0P6A_NPAU12@1@Z@Z PROC ; std::_Insertion_sort_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 6919 : _CONSTEXPR20 _BidIt _Insertion_sort_unchecked(const _BidIt _First, const _BidIt _Last, _Pr _Pred) {

	sub	esp, 8
	push	esi
	mov	eax, edx
	mov	esi, ecx
	mov	DWORD PTR __Last$1$[esp+12], eax
	mov	DWORD PTR __First$1$[esp+12], esi

; 6920 :     // insertion sort [_First, _Last)
; 6921 :     if (_First != _Last) {

	cmp	esi, eax
	je	SHORT $LN3@Insertion_

; 6922 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

	push	edi
	lea	edi, DWORD PTR [esi+4]
	cmp	edi, eax
	je	SHORT $LN27@Insertion_
	push	ebx
	push	ebp
	npad	2
$LL2@Insertion_:

; 6923 :             _BidIt _Hole               = _Mid;
; 6924 :             _Iter_value_t<_BidIt> _Val = _STD move(*_Mid);
; 6925 : 
; 6926 :             if (_DEBUG_LT_PRED(_Pred, _Val, *_First)) { // found new earliest element, move to front

	push	DWORD PTR [esi]
	mov	ebx, DWORD PTR [edi]
	mov	ebp, edi
	push	ebx
	call	DWORD PTR __Pred$[esp+28]
	add	esp, 8
	test	al, al
	je	SHORT $LN9@Insertion_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4254 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	mov	ecx, edi

; 4255 :     auto _Result                = _CSTD memmove(_Dest_ch - _Count, _First_ch, _Count);

	mov	eax, edi
	sub	ecx, esi
	push	ecx
	sub	eax, ecx
	add	eax, 4
	push	esi
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6928 :                 *_First = _STD move(_Val);

	mov	DWORD PTR [esi], ebx

; 6929 :             } else { // look for insertion point after first

	jmp	SHORT $LN10@Insertion_
$LN9@Insertion_:

; 6930 :                 for (_BidIt _Prev = _Hole; _DEBUG_LT_PRED(_Pred, _Val, *--_Prev); _Hole = _Prev) {

	push	DWORD PTR [edi-4]
	lea	esi, DWORD PTR [edi-4]
	push	ebx
	call	DWORD PTR __Pred$[esp+28]
	add	esp, 8
	test	al, al
	je	SHORT $LN6@Insertion_
	npad	2
$LL7@Insertion_:

; 6931 :                     *_Hole = _STD move(*_Prev); // move hole down

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [ebp], eax
	mov	ebp, esi
	push	DWORD PTR [esi-4]
	sub	esi, 4
	push	ebx
	call	DWORD PTR __Pred$[esp+28]
	add	esp, 8
	test	al, al
	jne	SHORT $LL7@Insertion_
$LN6@Insertion_:
	mov	esi, DWORD PTR __First$1$[esp+24]

; 6932 :                 }
; 6933 : 
; 6934 :                 *_Hole = _STD move(_Val); // insert element in hole

	mov	DWORD PTR [ebp], ebx
$LN10@Insertion_:

; 6922 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

	mov	eax, DWORD PTR __Last$1$[esp+24]
	add	edi, 4
	cmp	edi, eax
	jne	SHORT $LL2@Insertion_

; 6935 :             }
; 6936 :         }
; 6937 :     }
; 6938 : 
; 6939 :     return _Last;

	pop	ebp
	pop	ebx
$LN27@Insertion_:
	pop	edi
$LN3@Insertion_:
	pop	esi

; 6940 : }

	add	esp, 8
	ret	0
??$_Insertion_sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0P6A_NPAU12@1@Z@Z ENDP ; std::_Insertion_sort_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Make_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z
_TEXT	SEGMENT
__Val$1$ = -20						; size = 4
__Max_sequence_non_leaf$1$ = -16			; size = 4
__Hole$1$ = -12						; size = 4
__Bottom$1$ = -8					; size = 4
tv268 = -4						; size = 4
__Pred$ = 8						; size = 4
??$_Make_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z PROC ; std::_Make_heap_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 5544 : _CONSTEXPR20 void _Make_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

	sub	esp, 20					; 00000014H
	push	ebx
	mov	eax, edx
	mov	ebx, ecx

; 5545 :     // make [_First, _Last) into a heap
; 5546 :     using _Diff   = _Iter_diff_t<_RanIt>;
; 5547 :     _Diff _Bottom = _Last - _First;

	sub	eax, ebx
	sar	eax, 2
	push	ebp

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	mov	ebp, eax
	mov	DWORD PTR __Bottom$1$[esp+28], eax
	sar	ebp, 1
	test	ebp, ebp
	jle	$LN3@Make_heap_

; 5385 :     const _Diff _Max_sequence_non_leaf = (_Bottom - 1) >> 1; // shift for codegen

	mov	ecx, DWORD PTR __Pred$[esp+24]
	dec	eax
	mov	DWORD PTR tv268[esp+28], eax
	sar	eax, 1
	push	esi
	mov	DWORD PTR __Max_sequence_non_leaf$1$[esp+32], eax
	push	edi
	npad	1
$LL2@Make_heap_:

; 5549 :         // reheap top half, bottom to top
; 5550 :         --_Hole;
; 5551 :         _Iter_value_t<_RanIt> _Val = _STD move(*(_First + _Hole));

	mov	edx, DWORD PTR [ebx+ebp*4-4]
	dec	ebp
	mov	DWORD PTR __Hole$1$[esp+36], ebp

; 5552 :         _Pop_heap_hole_by_index(_First, _Hole, _Bottom, _STD move(_Val), _Pred);

	mov	edi, ebp
	mov	DWORD PTR __Val$1$[esp+36], edx

; 5381 :     _Diff _Idx       = _Hole;

	mov	esi, ebp

; 5386 :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

	cmp	ebp, eax
	jge	SHORT $LN8@Make_heap_
	mov	ebp, DWORD PTR __Max_sequence_non_leaf$1$[esp+36]
	npad	7
$LL7@Make_heap_:

; 5387 :         _Idx = 2 * _Idx + 2;
; 5388 :         if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1)))) {

	push	DWORD PTR [ebx+esi*8+4]
	lea	esi, DWORD PTR [esi*2+2]
	push	DWORD PTR [ebx+esi*4]
	call	ecx
	add	esp, 8
	test	al, al
	je	SHORT $LN9@Make_heap_

; 5389 :             --_Idx;

	dec	esi
$LN9@Make_heap_:

; 5390 :         }
; 5391 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [ebx+esi*4]
	mov	ecx, DWORD PTR __Pred$[esp+32]
	mov	DWORD PTR [ebx+edi*4], eax

; 5392 :         _Hole             = _Idx;

	mov	edi, esi
	cmp	esi, ebp
	jl	SHORT $LL7@Make_heap_
	mov	ebp, DWORD PTR __Hole$1$[esp+36]
	mov	eax, DWORD PTR __Max_sequence_non_leaf$1$[esp+36]
	mov	edx, DWORD PTR __Val$1$[esp+36]
$LN8@Make_heap_:

; 5393 :     }
; 5394 : 
; 5395 :     if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it

	cmp	esi, eax
	jne	SHORT $LN10@Make_heap_
	mov	eax, DWORD PTR __Bottom$1$[esp+36]
	test	al, 1
	jne	SHORT $LN10@Make_heap_

; 5396 :         *(_First + _Hole) = _STD move(*(_First + (_Bottom - 1)));

	mov	eax, DWORD PTR [ebx+eax*4-4]
	mov	DWORD PTR [ebx+edi*4], eax

; 5397 :         _Hole             = _Bottom - 1;

	mov	edi, DWORD PTR tv268[esp+36]
$LN10@Make_heap_:

; 5268 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

	cmp	ebp, edi
	jge	SHORT $LN29@Make_heap_
	npad	1
$LL15@Make_heap_:

; 5267 :     for (_Diff _Idx = (_Hole - 1) >> 1; // shift for codegen

	lea	esi, DWORD PTR [edi-1]
	sar	esi, 1

; 5268 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

	push	edx
	push	DWORD PTR [ebx+esi*4]
	call	ecx
	add	esp, 8
	test	al, al
	je	SHORT $LN29@Make_heap_

; 5269 :          _Idx = (_Hole - 1) >> 1) { // shift for codegen
; 5270 :         // move _Hole up to parent
; 5271 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [ebx+esi*4]
	mov	ecx, DWORD PTR __Pred$[esp+32]
	mov	edx, DWORD PTR __Val$1$[esp+36]
	mov	DWORD PTR [ebx+edi*4], eax

; 5272 :         _Hole             = _Idx;

	mov	edi, esi
	cmp	ebp, esi
	jl	SHORT $LL15@Make_heap_
$LN29@Make_heap_:

; 5273 :     }
; 5274 : 
; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	eax, DWORD PTR __Val$1$[esp+36]

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	mov	ecx, DWORD PTR __Pred$[esp+32]

; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	DWORD PTR [ebx+edi*4], eax

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	mov	eax, DWORD PTR __Max_sequence_non_leaf$1$[esp+36]
	test	ebp, ebp
	jg	$LL2@Make_heap_
	pop	edi
	pop	esi
$LN3@Make_heap_:
	pop	ebp

; 5553 :     }
; 5554 : }

	pop	ebx
	add	esp, 20					; 00000014H
	ret	0
??$_Make_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z ENDP ; std::_Make_heap_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Sort_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z
_TEXT	SEGMENT
__Val$1 = -4						; size = 4
__Pred$ = 8						; size = 4
??$_Sort_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z PROC ; std::_Sort_heap_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 5772 : _CONSTEXPR20 void _Sort_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

	push	ecx
	push	esi
	push	edi
	mov	esi, edx
	mov	edi, ecx

; 5773 :     // order heap by repeatedly popping
; 5774 :     for (; _Last - _First >= 2; --_Last) {

	sub	esi, edi
	mov	eax, esi
	and	eax, -4					; fffffffcH
	cmp	eax, 8
	jl	SHORT $LN3@Sort_heap_
	push	ebx
	mov	ebx, DWORD PTR __Pred$[esp+12]
	npad	8
$LL4@Sort_heap_:

; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	eax, DWORD PTR [edi+esi-4]

; 5410 :     _Pop_heap_hole_by_index(

	xor	edx, edx

; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	DWORD PTR __Val$1[esp+16], eax

; 5410 :     _Pop_heap_hole_by_index(

	mov	ecx, edi
	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [edi+esi-4], eax
	lea	eax, DWORD PTR __Val$1[esp+16]
	push	ebx
	push	eax
	lea	eax, DWORD PTR [esi-4]
	sar	eax, 2
	push	eax
	call	??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ; std::_Pop_heap_hole_by_index<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *)>

; 5773 :     // order heap by repeatedly popping
; 5774 :     for (; _Last - _First >= 2; --_Last) {

	sub	esi, 4

; 5410 :     _Pop_heap_hole_by_index(

	add	esp, 12					; 0000000cH

; 5773 :     // order heap by repeatedly popping
; 5774 :     for (; _Last - _First >= 2; --_Last) {

	mov	eax, esi
	and	eax, -4					; fffffffcH
	cmp	eax, 8
	jge	SHORT $LL4@Sort_heap_
	pop	ebx
$LN3@Sort_heap_:
	pop	edi

; 5775 :         _Pop_heap_unchecked(_First, _Last, _Pred);
; 5776 :     }
; 5777 : }

	pop	esi
	pop	ecx
	ret	0
??$_Sort_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z ENDP ; std::_Sort_heap_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Partition_by_median_guess_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YA?AU?$pair@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@0@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU23@1@Z@Z
_TEXT	SEGMENT
__Plast$1$ = -20					; size = 4
__Glast$1$ = -16					; size = 4
__First$1$ = -12					; size = 4
__Gfirst$1$ = -8					; size = 4
___$ReturnUdt$1$ = -4					; size = 4
__Last$ = 8						; size = 4
__Pred$ = 12						; size = 4
??$_Partition_by_median_guess_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YA?AU?$pair@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@0@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU23@1@Z@Z PROC ; std::_Partition_by_median_guess_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *)>, COMDAT
; ___$ReturnUdt$ = ecx
; __First$ = edx

; 6976 : _CONSTEXPR20 pair<_RanIt, _RanIt> _Partition_by_median_guess_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

	sub	esp, 20					; 00000014H
	push	ebx
	push	ebp

; 6977 :     // partition [_First, _Last)
; 6978 :     _RanIt _Mid = _First + ((_Last - _First) >> 1); // shift for codegen
; 6979 :     _Guess_median_unchecked(_First, _Mid, _Prev_iter(_Last), _Pred);

	mov	ebp, DWORD PTR __Pred$[esp+24]
	mov	ebx, edx
	push	esi
	push	edi
	mov	edi, DWORD PTR __Last$[esp+32]
	mov	eax, edi
	sub	eax, ebx
	mov	DWORD PTR ___$ReturnUdt$1$[esp+36], ecx
	sar	eax, 3
	mov	ecx, ebx
	push	ebp
	mov	DWORD PTR __First$1$[esp+40], ebx
	lea	esi, DWORD PTR [ebx+eax*4]
	lea	eax, DWORD PTR [edi-4]
	mov	edx, esi
	push	eax
	call	??$_Guess_median_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z ; std::_Guess_median_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *)>
	add	esp, 8

; 6980 :     _RanIt _Pfirst = _Mid;
; 6981 :     _RanIt _Plast  = _Next_iter(_Pfirst);

	lea	ebx, DWORD PTR [esi+4]
	mov	DWORD PTR __Plast$1$[esp+36], ebx

; 6982 : 
; 6983 :     while (_First < _Pfirst && !_DEBUG_LT_PRED(_Pred, *_Prev_iter(_Pfirst), *_Pfirst)
; 6984 :            && !_Pred(*_Pfirst, *_Prev_iter(_Pfirst))) {

	cmp	DWORD PTR __First$1$[esp+36], esi
	jae	SHORT $LN66@Partition_
	mov	ebx, DWORD PTR __First$1$[esp+36]
$LL2@Partition_:
	push	DWORD PTR [esi]
	push	DWORD PTR [esi-4]
	call	ebp
	add	esp, 8
	test	al, al
	jne	SHORT $LN91@Partition_
	push	DWORD PTR [esi-4]
	push	DWORD PTR [esi]
	call	ebp
	add	esp, 8
	test	al, al
	jne	SHORT $LN91@Partition_

; 6985 :         --_Pfirst;

	add	esi, -4					; fffffffcH
	cmp	ebx, esi
	jb	SHORT $LL2@Partition_
$LN91@Partition_:
	mov	ebx, DWORD PTR __Plast$1$[esp+36]
$LN66@Partition_:

; 6986 :     }
; 6987 : 
; 6988 :     while (_Plast < _Last && !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst) && !_Pred(*_Pfirst, *_Plast)) {

	cmp	ebx, edi
	jae	SHORT $LN5@Partition_
$LL4@Partition_:
	push	DWORD PTR [esi]
	push	DWORD PTR [ebx]
	call	ebp
	add	esp, 8
	test	al, al
	jne	SHORT $LN92@Partition_
	push	DWORD PTR [ebx]
	push	DWORD PTR [esi]
	call	ebp
	add	esp, 8
	test	al, al
	jne	SHORT $LN92@Partition_

; 6989 :         ++_Plast;

	add	ebx, 4
	cmp	ebx, edi
	jb	SHORT $LL4@Partition_
$LN92@Partition_:
	mov	DWORD PTR __Plast$1$[esp+36], ebx
$LN5@Partition_:

; 6990 :     }
; 6991 : 
; 6992 :     _RanIt _Gfirst = _Plast;

	mov	edi, ebx

; 6993 :     _RanIt _Glast  = _Pfirst;

	mov	ebp, esi
$LN97@Partition_:

; 6996 :         for (; _Gfirst < _Last; ++_Gfirst) {

	mov	DWORD PTR __Glast$1$[esp+36], ebp
$LN96@Partition_:
	mov	DWORD PTR __Gfirst$1$[esp+36], edi
$LL6@Partition_:
	cmp	edi, DWORD PTR __Last$[esp+32]
	jae	SHORT $LN70@Partition_
	mov	ebp, DWORD PTR __Last$[esp+32]
	npad	5
$LL11@Partition_:

; 6997 :             if (_DEBUG_LT_PRED(_Pred, *_Pfirst, *_Gfirst)) {

	push	DWORD PTR [edi]
	push	DWORD PTR [esi]
	call	DWORD PTR __Pred$[esp+40]
	add	esp, 8
	test	al, al
	jne	SHORT $LN9@Partition_

; 6998 :                 continue;
; 6999 :             } else if (_Pred(*_Gfirst, *_Pfirst)) {

	push	DWORD PTR [esi]
	push	DWORD PTR [edi]
	call	DWORD PTR __Pred$[esp+40]
	add	esp, 8
	test	al, al
	jne	SHORT $LN93@Partition_

; 7000 :                 break;
; 7001 :             } else if (_Plast != _Gfirst) {

	cmp	ebx, edi
	je	SHORT $LN19@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [ebx]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [ebx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN19@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6996 :         for (; _Gfirst < _Last; ++_Gfirst) {

	add	ebx, 4
$LN9@Partition_:
	add	edi, 4
	cmp	edi, ebp
	jb	SHORT $LL11@Partition_
$LN93@Partition_:
	mov	ebp, DWORD PTR __Glast$1$[esp+36]
	mov	DWORD PTR __Plast$1$[esp+36], ebx
	mov	DWORD PTR __Gfirst$1$[esp+36], edi
$LN70@Partition_:

; 7009 :         for (; _First < _Glast; --_Glast) {

	mov	eax, DWORD PTR __First$1$[esp+36]
	cmp	ebp, eax
	jbe	SHORT $LN95@Partition_
	mov	edi, DWORD PTR __Glast$1$[esp+36]
	mov	ebx, eax
	lea	ebp, DWORD PTR [edi-4]
$LL14@Partition_:

; 7010 :             if (_DEBUG_LT_PRED(_Pred, *_Prev_iter(_Glast), *_Pfirst)) {

	push	DWORD PTR [esi]
	push	DWORD PTR [ebp]
	call	DWORD PTR __Pred$[esp+40]
	add	esp, 8
	test	al, al
	jne	SHORT $LN12@Partition_

; 7011 :                 continue;
; 7012 :             } else if (_Pred(*_Pfirst, *_Prev_iter(_Glast))) {

	push	DWORD PTR [ebp]
	push	DWORD PTR [esi]
	call	DWORD PTR __Pred$[esp+40]
	add	esp, 8
	test	al, al
	jne	SHORT $LN94@Partition_

; 7013 :                 break;
; 7014 :             } else if (--_Pfirst != _Prev_iter(_Glast)) {

	sub	esi, 4
	cmp	esi, ebp
	je	SHORT $LN12@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebp]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebp], ecx
$LN12@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7009 :         for (; _First < _Glast; --_Glast) {

	sub	edi, 4
	sub	ebp, 4
	cmp	ebx, edi
	jb	SHORT $LL14@Partition_
$LN94@Partition_:
	mov	eax, DWORD PTR __First$1$[esp+36]
	mov	ebx, DWORD PTR __Plast$1$[esp+36]
	mov	DWORD PTR __Glast$1$[esp+36], edi
	mov	ebp, DWORD PTR __Glast$1$[esp+36]

; 7015 :                 _STD iter_swap(_Pfirst, _Prev_iter(_Glast));
; 7016 :             }
; 7017 :         }
; 7018 : 
; 7019 :         if (_Glast == _First && _Gfirst == _Last) {

	cmp	ebp, eax
	mov	edi, DWORD PTR __Gfirst$1$[esp+36]
$LN95@Partition_:
	jne	SHORT $LN27@Partition_
	cmp	edi, DWORD PTR __Last$[esp+32]
	je	SHORT $LN72@Partition_

; 7021 :         }
; 7022 : 
; 7023 :         if (_Glast == _First) { // no room at bottom, rotate pivot upward
; 7024 :             if (_Plast != _Gfirst) {

	cmp	ebx, edi
	je	SHORT $LN29@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebx], ecx
$LN29@Partition_:

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7028 :             ++_Plast;

	add	ebx, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7030 :             ++_Pfirst;

	add	esi, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7031 :             ++_Gfirst;

	add	edi, 4
	mov	DWORD PTR __Plast$1$[esp+36], ebx
	jmp	$LN96@Partition_
$LN27@Partition_:

; 7032 :         } else if (_Gfirst == _Last) { // no room at top, rotate pivot downward

	add	ebp, -4					; fffffffcH
	mov	DWORD PTR __Glast$1$[esp+36], ebp
	cmp	edi, DWORD PTR __Last$[esp+32]
	jne	SHORT $LN30@Partition_

; 7033 :             if (--_Glast != --_Pfirst) {

	sub	esi, 4
	cmp	ebp, esi
	je	SHORT $LN82@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7037 :             _STD iter_swap(_Pfirst, --_Plast);

	sub	ebx, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [ebp]

; 101  :     _Left    = _STD move(_Right);

	mov	DWORD PTR [ebp], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [esi], ecx

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR [esi], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7037 :             _STD iter_swap(_Pfirst, --_Plast);

	mov	DWORD PTR __Plast$1$[esp+36], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebx], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7038 :         } else {

	jmp	$LL6@Partition_
$LN82@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 102  :     _Right   = _STD move(_Tmp);

	mov	ecx, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7037 :             _STD iter_swap(_Pfirst, --_Plast);

	sub	ebx, 4
	mov	DWORD PTR __Plast$1$[esp+36], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebx], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7038 :         } else {

	jmp	$LL6@Partition_
$LN30@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [edi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebp]
	mov	DWORD PTR [edi], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7040 :             ++_Gfirst;

	add	edi, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7042 :     }

	jmp	$LN97@Partition_
$LN72@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	eax, DWORD PTR ___$ReturnUdt$1$[esp+36]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7020 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);

	pop	edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	DWORD PTR [eax], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7020 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);

	pop	esi
	pop	ebp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	DWORD PTR [eax+4], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7020 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);

	pop	ebx

; 7043 : }

	add	esp, 20					; 00000014H
	ret	0
??$_Partition_by_median_guess_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YA?AU?$pair@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@0@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU23@1@Z@Z ENDP ; std::_Partition_by_median_guess_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Insertion_sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0P6A_NPAU12@1@Z@Z
_TEXT	SEGMENT
__First$1$ = -8						; size = 4
__Last$1$ = -4						; size = 4
__Pred$ = 8						; size = 4
??$_Insertion_sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0P6A_NPAU12@1@Z@Z PROC ; std::_Insertion_sort_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 6919 : _CONSTEXPR20 _BidIt _Insertion_sort_unchecked(const _BidIt _First, const _BidIt _Last, _Pr _Pred) {

	sub	esp, 8
	push	esi
	mov	eax, edx
	mov	esi, ecx
	mov	DWORD PTR __Last$1$[esp+12], eax
	mov	DWORD PTR __First$1$[esp+12], esi

; 6920 :     // insertion sort [_First, _Last)
; 6921 :     if (_First != _Last) {

	cmp	esi, eax
	je	SHORT $LN3@Insertion_

; 6922 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

	push	edi
	lea	edi, DWORD PTR [esi+4]
	cmp	edi, eax
	je	SHORT $LN27@Insertion_
	push	ebx
	push	ebp
	npad	2
$LL2@Insertion_:

; 6923 :             _BidIt _Hole               = _Mid;
; 6924 :             _Iter_value_t<_BidIt> _Val = _STD move(*_Mid);
; 6925 : 
; 6926 :             if (_DEBUG_LT_PRED(_Pred, _Val, *_First)) { // found new earliest element, move to front

	push	DWORD PTR [esi]
	mov	ebx, DWORD PTR [edi]
	mov	ebp, edi
	push	ebx
	call	DWORD PTR __Pred$[esp+28]
	add	esp, 8
	test	al, al
	je	SHORT $LN9@Insertion_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4254 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	mov	ecx, edi

; 4255 :     auto _Result                = _CSTD memmove(_Dest_ch - _Count, _First_ch, _Count);

	mov	eax, edi
	sub	ecx, esi
	push	ecx
	sub	eax, ecx
	add	eax, 4
	push	esi
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6928 :                 *_First = _STD move(_Val);

	mov	DWORD PTR [esi], ebx

; 6929 :             } else { // look for insertion point after first

	jmp	SHORT $LN10@Insertion_
$LN9@Insertion_:

; 6930 :                 for (_BidIt _Prev = _Hole; _DEBUG_LT_PRED(_Pred, _Val, *--_Prev); _Hole = _Prev) {

	push	DWORD PTR [edi-4]
	lea	esi, DWORD PTR [edi-4]
	push	ebx
	call	DWORD PTR __Pred$[esp+28]
	add	esp, 8
	test	al, al
	je	SHORT $LN6@Insertion_
	npad	2
$LL7@Insertion_:

; 6931 :                     *_Hole = _STD move(*_Prev); // move hole down

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [ebp], eax
	mov	ebp, esi
	push	DWORD PTR [esi-4]
	sub	esi, 4
	push	ebx
	call	DWORD PTR __Pred$[esp+28]
	add	esp, 8
	test	al, al
	jne	SHORT $LL7@Insertion_
$LN6@Insertion_:
	mov	esi, DWORD PTR __First$1$[esp+24]

; 6932 :                 }
; 6933 : 
; 6934 :                 *_Hole = _STD move(_Val); // insert element in hole

	mov	DWORD PTR [ebp], ebx
$LN10@Insertion_:

; 6922 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

	mov	eax, DWORD PTR __Last$1$[esp+24]
	add	edi, 4
	cmp	edi, eax
	jne	SHORT $LL2@Insertion_

; 6935 :             }
; 6936 :         }
; 6937 :     }
; 6938 : 
; 6939 :     return _Last;

	pop	ebp
	pop	ebx
$LN27@Insertion_:
	pop	edi
$LN3@Insertion_:
	pop	esi

; 6940 : }

	add	esp, 8
	ret	0
??$_Insertion_sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0P6A_NPAU12@1@Z@Z ENDP ; std::_Insertion_sort_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Make_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z
_TEXT	SEGMENT
__Val$1$ = -20						; size = 4
__Max_sequence_non_leaf$1$ = -16			; size = 4
__Hole$1$ = -12						; size = 4
__Bottom$1$ = -8					; size = 4
tv268 = -4						; size = 4
__Pred$ = 8						; size = 4
??$_Make_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z PROC ; std::_Make_heap_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 5544 : _CONSTEXPR20 void _Make_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

	sub	esp, 20					; 00000014H
	push	ebx
	mov	eax, edx
	mov	ebx, ecx

; 5545 :     // make [_First, _Last) into a heap
; 5546 :     using _Diff   = _Iter_diff_t<_RanIt>;
; 5547 :     _Diff _Bottom = _Last - _First;

	sub	eax, ebx
	sar	eax, 2
	push	ebp

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	mov	ebp, eax
	mov	DWORD PTR __Bottom$1$[esp+28], eax
	sar	ebp, 1
	test	ebp, ebp
	jle	$LN3@Make_heap_

; 5385 :     const _Diff _Max_sequence_non_leaf = (_Bottom - 1) >> 1; // shift for codegen

	mov	ecx, DWORD PTR __Pred$[esp+24]
	dec	eax
	mov	DWORD PTR tv268[esp+28], eax
	sar	eax, 1
	push	esi
	mov	DWORD PTR __Max_sequence_non_leaf$1$[esp+32], eax
	push	edi
	npad	1
$LL2@Make_heap_:

; 5549 :         // reheap top half, bottom to top
; 5550 :         --_Hole;
; 5551 :         _Iter_value_t<_RanIt> _Val = _STD move(*(_First + _Hole));

	mov	edx, DWORD PTR [ebx+ebp*4-4]
	dec	ebp
	mov	DWORD PTR __Hole$1$[esp+36], ebp

; 5552 :         _Pop_heap_hole_by_index(_First, _Hole, _Bottom, _STD move(_Val), _Pred);

	mov	edi, ebp
	mov	DWORD PTR __Val$1$[esp+36], edx

; 5381 :     _Diff _Idx       = _Hole;

	mov	esi, ebp

; 5386 :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

	cmp	ebp, eax
	jge	SHORT $LN8@Make_heap_
	mov	ebp, DWORD PTR __Max_sequence_non_leaf$1$[esp+36]
	npad	7
$LL7@Make_heap_:

; 5387 :         _Idx = 2 * _Idx + 2;
; 5388 :         if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1)))) {

	push	DWORD PTR [ebx+esi*8+4]
	lea	esi, DWORD PTR [esi*2+2]
	push	DWORD PTR [ebx+esi*4]
	call	ecx
	add	esp, 8
	test	al, al
	je	SHORT $LN9@Make_heap_

; 5389 :             --_Idx;

	dec	esi
$LN9@Make_heap_:

; 5390 :         }
; 5391 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [ebx+esi*4]
	mov	ecx, DWORD PTR __Pred$[esp+32]
	mov	DWORD PTR [ebx+edi*4], eax

; 5392 :         _Hole             = _Idx;

	mov	edi, esi
	cmp	esi, ebp
	jl	SHORT $LL7@Make_heap_
	mov	ebp, DWORD PTR __Hole$1$[esp+36]
	mov	eax, DWORD PTR __Max_sequence_non_leaf$1$[esp+36]
	mov	edx, DWORD PTR __Val$1$[esp+36]
$LN8@Make_heap_:

; 5393 :     }
; 5394 : 
; 5395 :     if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it

	cmp	esi, eax
	jne	SHORT $LN10@Make_heap_
	mov	eax, DWORD PTR __Bottom$1$[esp+36]
	test	al, 1
	jne	SHORT $LN10@Make_heap_

; 5396 :         *(_First + _Hole) = _STD move(*(_First + (_Bottom - 1)));

	mov	eax, DWORD PTR [ebx+eax*4-4]
	mov	DWORD PTR [ebx+edi*4], eax

; 5397 :         _Hole             = _Bottom - 1;

	mov	edi, DWORD PTR tv268[esp+36]
$LN10@Make_heap_:

; 5268 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

	cmp	ebp, edi
	jge	SHORT $LN29@Make_heap_
	npad	1
$LL15@Make_heap_:

; 5267 :     for (_Diff _Idx = (_Hole - 1) >> 1; // shift for codegen

	lea	esi, DWORD PTR [edi-1]
	sar	esi, 1

; 5268 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

	push	edx
	push	DWORD PTR [ebx+esi*4]
	call	ecx
	add	esp, 8
	test	al, al
	je	SHORT $LN29@Make_heap_

; 5269 :          _Idx = (_Hole - 1) >> 1) { // shift for codegen
; 5270 :         // move _Hole up to parent
; 5271 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [ebx+esi*4]
	mov	ecx, DWORD PTR __Pred$[esp+32]
	mov	edx, DWORD PTR __Val$1$[esp+36]
	mov	DWORD PTR [ebx+edi*4], eax

; 5272 :         _Hole             = _Idx;

	mov	edi, esi
	cmp	ebp, esi
	jl	SHORT $LL15@Make_heap_
$LN29@Make_heap_:

; 5273 :     }
; 5274 : 
; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	eax, DWORD PTR __Val$1$[esp+36]

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	mov	ecx, DWORD PTR __Pred$[esp+32]

; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	DWORD PTR [ebx+edi*4], eax

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	mov	eax, DWORD PTR __Max_sequence_non_leaf$1$[esp+36]
	test	ebp, ebp
	jg	$LL2@Make_heap_
	pop	edi
	pop	esi
$LN3@Make_heap_:
	pop	ebp

; 5553 :     }
; 5554 : }

	pop	ebx
	add	esp, 20					; 00000014H
	ret	0
??$_Make_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z ENDP ; std::_Make_heap_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Sort_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z
_TEXT	SEGMENT
__Val$1 = -4						; size = 4
__Pred$ = 8						; size = 4
??$_Sort_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z PROC ; std::_Sort_heap_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 5772 : _CONSTEXPR20 void _Sort_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

	push	ecx
	push	esi
	push	edi
	mov	esi, edx
	mov	edi, ecx

; 5773 :     // order heap by repeatedly popping
; 5774 :     for (; _Last - _First >= 2; --_Last) {

	sub	esi, edi
	mov	eax, esi
	and	eax, -4					; fffffffcH
	cmp	eax, 8
	jl	SHORT $LN3@Sort_heap_
	push	ebx
	mov	ebx, DWORD PTR __Pred$[esp+12]
	npad	8
$LL4@Sort_heap_:

; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	eax, DWORD PTR [edi+esi-4]

; 5410 :     _Pop_heap_hole_by_index(

	xor	edx, edx

; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	DWORD PTR __Val$1[esp+16], eax

; 5410 :     _Pop_heap_hole_by_index(

	mov	ecx, edi
	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [edi+esi-4], eax
	lea	eax, DWORD PTR __Val$1[esp+16]
	push	ebx
	push	eax
	lea	eax, DWORD PTR [esi-4]
	sar	eax, 2
	push	eax
	call	??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ; std::_Pop_heap_hole_by_index<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *)>

; 5773 :     // order heap by repeatedly popping
; 5774 :     for (; _Last - _First >= 2; --_Last) {

	sub	esi, 4

; 5410 :     _Pop_heap_hole_by_index(

	add	esp, 12					; 0000000cH

; 5773 :     // order heap by repeatedly popping
; 5774 :     for (; _Last - _First >= 2; --_Last) {

	mov	eax, esi
	and	eax, -4					; fffffffcH
	cmp	eax, 8
	jge	SHORT $LL4@Sort_heap_
	pop	ebx
$LN3@Sort_heap_:
	pop	edi

; 5775 :         _Pop_heap_unchecked(_First, _Last, _Pred);
; 5776 :     }
; 5777 : }

	pop	esi
	pop	ecx
	ret	0
??$_Sort_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z ENDP ; std::_Sort_heap_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Partition_by_median_guess_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YA?AU?$pair@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@0@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU23@1@Z@Z
_TEXT	SEGMENT
__Plast$1$ = -20					; size = 4
__Glast$1$ = -16					; size = 4
__First$1$ = -12					; size = 4
__Gfirst$1$ = -8					; size = 4
___$ReturnUdt$1$ = -4					; size = 4
__Last$ = 8						; size = 4
__Pred$ = 12						; size = 4
??$_Partition_by_median_guess_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YA?AU?$pair@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@0@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU23@1@Z@Z PROC ; std::_Partition_by_median_guess_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *)>, COMDAT
; ___$ReturnUdt$ = ecx
; __First$ = edx

; 6976 : _CONSTEXPR20 pair<_RanIt, _RanIt> _Partition_by_median_guess_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

	sub	esp, 20					; 00000014H
	push	ebx
	push	ebp

; 6977 :     // partition [_First, _Last)
; 6978 :     _RanIt _Mid = _First + ((_Last - _First) >> 1); // shift for codegen
; 6979 :     _Guess_median_unchecked(_First, _Mid, _Prev_iter(_Last), _Pred);

	mov	ebp, DWORD PTR __Pred$[esp+24]
	mov	ebx, edx
	push	esi
	push	edi
	mov	edi, DWORD PTR __Last$[esp+32]
	mov	eax, edi
	sub	eax, ebx
	mov	DWORD PTR ___$ReturnUdt$1$[esp+36], ecx
	sar	eax, 3
	mov	ecx, ebx
	push	ebp
	mov	DWORD PTR __First$1$[esp+40], ebx
	lea	esi, DWORD PTR [ebx+eax*4]
	lea	eax, DWORD PTR [edi-4]
	mov	edx, esi
	push	eax
	call	??$_Guess_median_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z ; std::_Guess_median_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *)>
	add	esp, 8

; 6980 :     _RanIt _Pfirst = _Mid;
; 6981 :     _RanIt _Plast  = _Next_iter(_Pfirst);

	lea	ebx, DWORD PTR [esi+4]
	mov	DWORD PTR __Plast$1$[esp+36], ebx

; 6982 : 
; 6983 :     while (_First < _Pfirst && !_DEBUG_LT_PRED(_Pred, *_Prev_iter(_Pfirst), *_Pfirst)
; 6984 :            && !_Pred(*_Pfirst, *_Prev_iter(_Pfirst))) {

	cmp	DWORD PTR __First$1$[esp+36], esi
	jae	SHORT $LN66@Partition_
	mov	ebx, DWORD PTR __First$1$[esp+36]
$LL2@Partition_:
	push	DWORD PTR [esi]
	push	DWORD PTR [esi-4]
	call	ebp
	add	esp, 8
	test	al, al
	jne	SHORT $LN91@Partition_
	push	DWORD PTR [esi-4]
	push	DWORD PTR [esi]
	call	ebp
	add	esp, 8
	test	al, al
	jne	SHORT $LN91@Partition_

; 6985 :         --_Pfirst;

	add	esi, -4					; fffffffcH
	cmp	ebx, esi
	jb	SHORT $LL2@Partition_
$LN91@Partition_:
	mov	ebx, DWORD PTR __Plast$1$[esp+36]
$LN66@Partition_:

; 6986 :     }
; 6987 : 
; 6988 :     while (_Plast < _Last && !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst) && !_Pred(*_Pfirst, *_Plast)) {

	cmp	ebx, edi
	jae	SHORT $LN5@Partition_
$LL4@Partition_:
	push	DWORD PTR [esi]
	push	DWORD PTR [ebx]
	call	ebp
	add	esp, 8
	test	al, al
	jne	SHORT $LN92@Partition_
	push	DWORD PTR [ebx]
	push	DWORD PTR [esi]
	call	ebp
	add	esp, 8
	test	al, al
	jne	SHORT $LN92@Partition_

; 6989 :         ++_Plast;

	add	ebx, 4
	cmp	ebx, edi
	jb	SHORT $LL4@Partition_
$LN92@Partition_:
	mov	DWORD PTR __Plast$1$[esp+36], ebx
$LN5@Partition_:

; 6990 :     }
; 6991 : 
; 6992 :     _RanIt _Gfirst = _Plast;

	mov	edi, ebx

; 6993 :     _RanIt _Glast  = _Pfirst;

	mov	ebp, esi
$LN97@Partition_:

; 6996 :         for (; _Gfirst < _Last; ++_Gfirst) {

	mov	DWORD PTR __Glast$1$[esp+36], ebp
$LN96@Partition_:
	mov	DWORD PTR __Gfirst$1$[esp+36], edi
$LL6@Partition_:
	cmp	edi, DWORD PTR __Last$[esp+32]
	jae	SHORT $LN70@Partition_
	mov	ebp, DWORD PTR __Last$[esp+32]
	npad	5
$LL11@Partition_:

; 6997 :             if (_DEBUG_LT_PRED(_Pred, *_Pfirst, *_Gfirst)) {

	push	DWORD PTR [edi]
	push	DWORD PTR [esi]
	call	DWORD PTR __Pred$[esp+40]
	add	esp, 8
	test	al, al
	jne	SHORT $LN9@Partition_

; 6998 :                 continue;
; 6999 :             } else if (_Pred(*_Gfirst, *_Pfirst)) {

	push	DWORD PTR [esi]
	push	DWORD PTR [edi]
	call	DWORD PTR __Pred$[esp+40]
	add	esp, 8
	test	al, al
	jne	SHORT $LN93@Partition_

; 7000 :                 break;
; 7001 :             } else if (_Plast != _Gfirst) {

	cmp	ebx, edi
	je	SHORT $LN19@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [ebx]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [ebx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN19@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6996 :         for (; _Gfirst < _Last; ++_Gfirst) {

	add	ebx, 4
$LN9@Partition_:
	add	edi, 4
	cmp	edi, ebp
	jb	SHORT $LL11@Partition_
$LN93@Partition_:
	mov	ebp, DWORD PTR __Glast$1$[esp+36]
	mov	DWORD PTR __Plast$1$[esp+36], ebx
	mov	DWORD PTR __Gfirst$1$[esp+36], edi
$LN70@Partition_:

; 7009 :         for (; _First < _Glast; --_Glast) {

	mov	eax, DWORD PTR __First$1$[esp+36]
	cmp	ebp, eax
	jbe	SHORT $LN95@Partition_
	mov	edi, DWORD PTR __Glast$1$[esp+36]
	mov	ebx, eax
	lea	ebp, DWORD PTR [edi-4]
$LL14@Partition_:

; 7010 :             if (_DEBUG_LT_PRED(_Pred, *_Prev_iter(_Glast), *_Pfirst)) {

	push	DWORD PTR [esi]
	push	DWORD PTR [ebp]
	call	DWORD PTR __Pred$[esp+40]
	add	esp, 8
	test	al, al
	jne	SHORT $LN12@Partition_

; 7011 :                 continue;
; 7012 :             } else if (_Pred(*_Pfirst, *_Prev_iter(_Glast))) {

	push	DWORD PTR [ebp]
	push	DWORD PTR [esi]
	call	DWORD PTR __Pred$[esp+40]
	add	esp, 8
	test	al, al
	jne	SHORT $LN94@Partition_

; 7013 :                 break;
; 7014 :             } else if (--_Pfirst != _Prev_iter(_Glast)) {

	sub	esi, 4
	cmp	esi, ebp
	je	SHORT $LN12@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebp]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebp], ecx
$LN12@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7009 :         for (; _First < _Glast; --_Glast) {

	sub	edi, 4
	sub	ebp, 4
	cmp	ebx, edi
	jb	SHORT $LL14@Partition_
$LN94@Partition_:
	mov	eax, DWORD PTR __First$1$[esp+36]
	mov	ebx, DWORD PTR __Plast$1$[esp+36]
	mov	DWORD PTR __Glast$1$[esp+36], edi
	mov	ebp, DWORD PTR __Glast$1$[esp+36]

; 7015 :                 _STD iter_swap(_Pfirst, _Prev_iter(_Glast));
; 7016 :             }
; 7017 :         }
; 7018 : 
; 7019 :         if (_Glast == _First && _Gfirst == _Last) {

	cmp	ebp, eax
	mov	edi, DWORD PTR __Gfirst$1$[esp+36]
$LN95@Partition_:
	jne	SHORT $LN27@Partition_
	cmp	edi, DWORD PTR __Last$[esp+32]
	je	SHORT $LN72@Partition_

; 7021 :         }
; 7022 : 
; 7023 :         if (_Glast == _First) { // no room at bottom, rotate pivot upward
; 7024 :             if (_Plast != _Gfirst) {

	cmp	ebx, edi
	je	SHORT $LN29@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebx], ecx
$LN29@Partition_:

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7028 :             ++_Plast;

	add	ebx, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7030 :             ++_Pfirst;

	add	esi, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7031 :             ++_Gfirst;

	add	edi, 4
	mov	DWORD PTR __Plast$1$[esp+36], ebx
	jmp	$LN96@Partition_
$LN27@Partition_:

; 7032 :         } else if (_Gfirst == _Last) { // no room at top, rotate pivot downward

	add	ebp, -4					; fffffffcH
	mov	DWORD PTR __Glast$1$[esp+36], ebp
	cmp	edi, DWORD PTR __Last$[esp+32]
	jne	SHORT $LN30@Partition_

; 7033 :             if (--_Glast != --_Pfirst) {

	sub	esi, 4
	cmp	ebp, esi
	je	SHORT $LN82@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7037 :             _STD iter_swap(_Pfirst, --_Plast);

	sub	ebx, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [ebp]

; 101  :     _Left    = _STD move(_Right);

	mov	DWORD PTR [ebp], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [esi], ecx

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR [esi], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7037 :             _STD iter_swap(_Pfirst, --_Plast);

	mov	DWORD PTR __Plast$1$[esp+36], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebx], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7038 :         } else {

	jmp	$LL6@Partition_
$LN82@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 102  :     _Right   = _STD move(_Tmp);

	mov	ecx, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7037 :             _STD iter_swap(_Pfirst, --_Plast);

	sub	ebx, 4
	mov	DWORD PTR __Plast$1$[esp+36], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebx], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7038 :         } else {

	jmp	$LL6@Partition_
$LN30@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [edi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebp]
	mov	DWORD PTR [edi], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7040 :             ++_Gfirst;

	add	edi, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7042 :     }

	jmp	$LN97@Partition_
$LN72@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	eax, DWORD PTR ___$ReturnUdt$1$[esp+36]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7020 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);

	pop	edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	DWORD PTR [eax], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7020 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);

	pop	esi
	pop	ebp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	DWORD PTR [eax+4], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7020 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);

	pop	ebx

; 7043 : }

	add	esp, 20					; 00000014H
	ret	0
??$_Partition_by_median_guess_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YA?AU?$pair@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@0@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU23@1@Z@Z ENDP ; std::_Partition_by_median_guess_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Insertion_sort_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0P6A_NPAU12@1@Z@Z
_TEXT	SEGMENT
__First$1$ = -8						; size = 4
__Last$1$ = -4						; size = 4
__Pred$ = 8						; size = 4
??$_Insertion_sort_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0P6A_NPAU12@1@Z@Z PROC ; std::_Insertion_sort_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 6919 : _CONSTEXPR20 _BidIt _Insertion_sort_unchecked(const _BidIt _First, const _BidIt _Last, _Pr _Pred) {

	sub	esp, 8
	push	esi
	mov	eax, edx
	mov	esi, ecx
	mov	DWORD PTR __Last$1$[esp+12], eax
	mov	DWORD PTR __First$1$[esp+12], esi

; 6920 :     // insertion sort [_First, _Last)
; 6921 :     if (_First != _Last) {

	cmp	esi, eax
	je	SHORT $LN3@Insertion_

; 6922 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

	push	edi
	lea	edi, DWORD PTR [esi+4]
	cmp	edi, eax
	je	SHORT $LN27@Insertion_
	push	ebx
	push	ebp
	npad	2
$LL2@Insertion_:

; 6923 :             _BidIt _Hole               = _Mid;
; 6924 :             _Iter_value_t<_BidIt> _Val = _STD move(*_Mid);
; 6925 : 
; 6926 :             if (_DEBUG_LT_PRED(_Pred, _Val, *_First)) { // found new earliest element, move to front

	push	DWORD PTR [esi]
	mov	ebx, DWORD PTR [edi]
	mov	ebp, edi
	push	ebx
	call	DWORD PTR __Pred$[esp+28]
	add	esp, 8
	test	al, al
	je	SHORT $LN9@Insertion_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4254 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	mov	ecx, edi

; 4255 :     auto _Result                = _CSTD memmove(_Dest_ch - _Count, _First_ch, _Count);

	mov	eax, edi
	sub	ecx, esi
	push	ecx
	sub	eax, ecx
	add	eax, 4
	push	esi
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6928 :                 *_First = _STD move(_Val);

	mov	DWORD PTR [esi], ebx

; 6929 :             } else { // look for insertion point after first

	jmp	SHORT $LN10@Insertion_
$LN9@Insertion_:

; 6930 :                 for (_BidIt _Prev = _Hole; _DEBUG_LT_PRED(_Pred, _Val, *--_Prev); _Hole = _Prev) {

	push	DWORD PTR [edi-4]
	lea	esi, DWORD PTR [edi-4]
	push	ebx
	call	DWORD PTR __Pred$[esp+28]
	add	esp, 8
	test	al, al
	je	SHORT $LN6@Insertion_
	npad	2
$LL7@Insertion_:

; 6931 :                     *_Hole = _STD move(*_Prev); // move hole down

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [ebp], eax
	mov	ebp, esi
	push	DWORD PTR [esi-4]
	sub	esi, 4
	push	ebx
	call	DWORD PTR __Pred$[esp+28]
	add	esp, 8
	test	al, al
	jne	SHORT $LL7@Insertion_
$LN6@Insertion_:
	mov	esi, DWORD PTR __First$1$[esp+24]

; 6932 :                 }
; 6933 : 
; 6934 :                 *_Hole = _STD move(_Val); // insert element in hole

	mov	DWORD PTR [ebp], ebx
$LN10@Insertion_:

; 6922 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

	mov	eax, DWORD PTR __Last$1$[esp+24]
	add	edi, 4
	cmp	edi, eax
	jne	SHORT $LL2@Insertion_

; 6935 :             }
; 6936 :         }
; 6937 :     }
; 6938 : 
; 6939 :     return _Last;

	pop	ebp
	pop	ebx
$LN27@Insertion_:
	pop	edi
$LN3@Insertion_:
	pop	esi

; 6940 : }

	add	esp, 8
	ret	0
??$_Insertion_sort_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0P6A_NPAU12@1@Z@Z ENDP ; std::_Insertion_sort_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Make_heap_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z
_TEXT	SEGMENT
__Val$1$ = -20						; size = 4
__Max_sequence_non_leaf$1$ = -16			; size = 4
__Hole$1$ = -12						; size = 4
__Bottom$1$ = -8					; size = 4
tv268 = -4						; size = 4
__Pred$ = 8						; size = 4
??$_Make_heap_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z PROC ; std::_Make_heap_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 5544 : _CONSTEXPR20 void _Make_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

	sub	esp, 20					; 00000014H
	push	ebx
	mov	eax, edx
	mov	ebx, ecx

; 5545 :     // make [_First, _Last) into a heap
; 5546 :     using _Diff   = _Iter_diff_t<_RanIt>;
; 5547 :     _Diff _Bottom = _Last - _First;

	sub	eax, ebx
	sar	eax, 2
	push	ebp

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	mov	ebp, eax
	mov	DWORD PTR __Bottom$1$[esp+28], eax
	sar	ebp, 1
	test	ebp, ebp
	jle	$LN3@Make_heap_

; 5385 :     const _Diff _Max_sequence_non_leaf = (_Bottom - 1) >> 1; // shift for codegen

	mov	ecx, DWORD PTR __Pred$[esp+24]
	dec	eax
	mov	DWORD PTR tv268[esp+28], eax
	sar	eax, 1
	push	esi
	mov	DWORD PTR __Max_sequence_non_leaf$1$[esp+32], eax
	push	edi
	npad	1
$LL2@Make_heap_:

; 5549 :         // reheap top half, bottom to top
; 5550 :         --_Hole;
; 5551 :         _Iter_value_t<_RanIt> _Val = _STD move(*(_First + _Hole));

	mov	edx, DWORD PTR [ebx+ebp*4-4]
	dec	ebp
	mov	DWORD PTR __Hole$1$[esp+36], ebp

; 5552 :         _Pop_heap_hole_by_index(_First, _Hole, _Bottom, _STD move(_Val), _Pred);

	mov	edi, ebp
	mov	DWORD PTR __Val$1$[esp+36], edx

; 5381 :     _Diff _Idx       = _Hole;

	mov	esi, ebp

; 5386 :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

	cmp	ebp, eax
	jge	SHORT $LN8@Make_heap_
	mov	ebp, DWORD PTR __Max_sequence_non_leaf$1$[esp+36]
	npad	7
$LL7@Make_heap_:

; 5387 :         _Idx = 2 * _Idx + 2;
; 5388 :         if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1)))) {

	push	DWORD PTR [ebx+esi*8+4]
	lea	esi, DWORD PTR [esi*2+2]
	push	DWORD PTR [ebx+esi*4]
	call	ecx
	add	esp, 8
	test	al, al
	je	SHORT $LN9@Make_heap_

; 5389 :             --_Idx;

	dec	esi
$LN9@Make_heap_:

; 5390 :         }
; 5391 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [ebx+esi*4]
	mov	ecx, DWORD PTR __Pred$[esp+32]
	mov	DWORD PTR [ebx+edi*4], eax

; 5392 :         _Hole             = _Idx;

	mov	edi, esi
	cmp	esi, ebp
	jl	SHORT $LL7@Make_heap_
	mov	ebp, DWORD PTR __Hole$1$[esp+36]
	mov	eax, DWORD PTR __Max_sequence_non_leaf$1$[esp+36]
	mov	edx, DWORD PTR __Val$1$[esp+36]
$LN8@Make_heap_:

; 5393 :     }
; 5394 : 
; 5395 :     if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it

	cmp	esi, eax
	jne	SHORT $LN10@Make_heap_
	mov	eax, DWORD PTR __Bottom$1$[esp+36]
	test	al, 1
	jne	SHORT $LN10@Make_heap_

; 5396 :         *(_First + _Hole) = _STD move(*(_First + (_Bottom - 1)));

	mov	eax, DWORD PTR [ebx+eax*4-4]
	mov	DWORD PTR [ebx+edi*4], eax

; 5397 :         _Hole             = _Bottom - 1;

	mov	edi, DWORD PTR tv268[esp+36]
$LN10@Make_heap_:

; 5268 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

	cmp	ebp, edi
	jge	SHORT $LN29@Make_heap_
	npad	1
$LL15@Make_heap_:

; 5267 :     for (_Diff _Idx = (_Hole - 1) >> 1; // shift for codegen

	lea	esi, DWORD PTR [edi-1]
	sar	esi, 1

; 5268 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

	push	edx
	push	DWORD PTR [ebx+esi*4]
	call	ecx
	add	esp, 8
	test	al, al
	je	SHORT $LN29@Make_heap_

; 5269 :          _Idx = (_Hole - 1) >> 1) { // shift for codegen
; 5270 :         // move _Hole up to parent
; 5271 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [ebx+esi*4]
	mov	ecx, DWORD PTR __Pred$[esp+32]
	mov	edx, DWORD PTR __Val$1$[esp+36]
	mov	DWORD PTR [ebx+edi*4], eax

; 5272 :         _Hole             = _Idx;

	mov	edi, esi
	cmp	ebp, esi
	jl	SHORT $LL15@Make_heap_
$LN29@Make_heap_:

; 5273 :     }
; 5274 : 
; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	eax, DWORD PTR __Val$1$[esp+36]

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	mov	ecx, DWORD PTR __Pred$[esp+32]

; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	DWORD PTR [ebx+edi*4], eax

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	mov	eax, DWORD PTR __Max_sequence_non_leaf$1$[esp+36]
	test	ebp, ebp
	jg	$LL2@Make_heap_
	pop	edi
	pop	esi
$LN3@Make_heap_:
	pop	ebp

; 5553 :     }
; 5554 : }

	pop	ebx
	add	esp, 20					; 00000014H
	ret	0
??$_Make_heap_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z ENDP ; std::_Make_heap_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Sort_heap_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z
_TEXT	SEGMENT
__Val$1 = -4						; size = 4
__Pred$ = 8						; size = 4
??$_Sort_heap_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z PROC ; std::_Sort_heap_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 5772 : _CONSTEXPR20 void _Sort_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

	push	ecx
	push	esi
	push	edi
	mov	esi, edx
	mov	edi, ecx

; 5773 :     // order heap by repeatedly popping
; 5774 :     for (; _Last - _First >= 2; --_Last) {

	sub	esi, edi
	mov	eax, esi
	and	eax, -4					; fffffffcH
	cmp	eax, 8
	jl	SHORT $LN3@Sort_heap_
	push	ebx
	mov	ebx, DWORD PTR __Pred$[esp+12]
	npad	8
$LL4@Sort_heap_:

; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	eax, DWORD PTR [edi+esi-4]

; 5410 :     _Pop_heap_hole_by_index(

	xor	edx, edx

; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	DWORD PTR __Val$1[esp+16], eax

; 5410 :     _Pop_heap_hole_by_index(

	mov	ecx, edi
	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [edi+esi-4], eax
	lea	eax, DWORD PTR __Val$1[esp+16]
	push	ebx
	push	eax
	lea	eax, DWORD PTR [esi-4]
	sar	eax, 2
	push	eax
	call	??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ; std::_Pop_heap_hole_by_index<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *)>

; 5773 :     // order heap by repeatedly popping
; 5774 :     for (; _Last - _First >= 2; --_Last) {

	sub	esi, 4

; 5410 :     _Pop_heap_hole_by_index(

	add	esp, 12					; 0000000cH

; 5773 :     // order heap by repeatedly popping
; 5774 :     for (; _Last - _First >= 2; --_Last) {

	mov	eax, esi
	and	eax, -4					; fffffffcH
	cmp	eax, 8
	jge	SHORT $LL4@Sort_heap_
	pop	ebx
$LN3@Sort_heap_:
	pop	edi

; 5775 :         _Pop_heap_unchecked(_First, _Last, _Pred);
; 5776 :     }
; 5777 : }

	pop	esi
	pop	ecx
	ret	0
??$_Sort_heap_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z ENDP ; std::_Sort_heap_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Partition_by_median_guess_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YA?AU?$pair@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@0@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU23@1@Z@Z
_TEXT	SEGMENT
__Plast$1$ = -20					; size = 4
__Glast$1$ = -16					; size = 4
__First$1$ = -12					; size = 4
__Gfirst$1$ = -8					; size = 4
___$ReturnUdt$1$ = -4					; size = 4
__Last$ = 8						; size = 4
__Pred$ = 12						; size = 4
??$_Partition_by_median_guess_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YA?AU?$pair@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@0@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU23@1@Z@Z PROC ; std::_Partition_by_median_guess_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *)>, COMDAT
; ___$ReturnUdt$ = ecx
; __First$ = edx

; 6976 : _CONSTEXPR20 pair<_RanIt, _RanIt> _Partition_by_median_guess_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

	sub	esp, 20					; 00000014H
	push	ebx
	push	ebp

; 6977 :     // partition [_First, _Last)
; 6978 :     _RanIt _Mid = _First + ((_Last - _First) >> 1); // shift for codegen
; 6979 :     _Guess_median_unchecked(_First, _Mid, _Prev_iter(_Last), _Pred);

	mov	ebp, DWORD PTR __Pred$[esp+24]
	mov	ebx, edx
	push	esi
	push	edi
	mov	edi, DWORD PTR __Last$[esp+32]
	mov	eax, edi
	sub	eax, ebx
	mov	DWORD PTR ___$ReturnUdt$1$[esp+36], ecx
	sar	eax, 3
	mov	ecx, ebx
	push	ebp
	mov	DWORD PTR __First$1$[esp+40], ebx
	lea	esi, DWORD PTR [ebx+eax*4]
	lea	eax, DWORD PTR [edi-4]
	mov	edx, esi
	push	eax
	call	??$_Guess_median_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z ; std::_Guess_median_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *)>
	add	esp, 8

; 6980 :     _RanIt _Pfirst = _Mid;
; 6981 :     _RanIt _Plast  = _Next_iter(_Pfirst);

	lea	ebx, DWORD PTR [esi+4]
	mov	DWORD PTR __Plast$1$[esp+36], ebx

; 6982 : 
; 6983 :     while (_First < _Pfirst && !_DEBUG_LT_PRED(_Pred, *_Prev_iter(_Pfirst), *_Pfirst)
; 6984 :            && !_Pred(*_Pfirst, *_Prev_iter(_Pfirst))) {

	cmp	DWORD PTR __First$1$[esp+36], esi
	jae	SHORT $LN66@Partition_
	mov	ebx, DWORD PTR __First$1$[esp+36]
$LL2@Partition_:
	push	DWORD PTR [esi]
	push	DWORD PTR [esi-4]
	call	ebp
	add	esp, 8
	test	al, al
	jne	SHORT $LN91@Partition_
	push	DWORD PTR [esi-4]
	push	DWORD PTR [esi]
	call	ebp
	add	esp, 8
	test	al, al
	jne	SHORT $LN91@Partition_

; 6985 :         --_Pfirst;

	add	esi, -4					; fffffffcH
	cmp	ebx, esi
	jb	SHORT $LL2@Partition_
$LN91@Partition_:
	mov	ebx, DWORD PTR __Plast$1$[esp+36]
$LN66@Partition_:

; 6986 :     }
; 6987 : 
; 6988 :     while (_Plast < _Last && !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst) && !_Pred(*_Pfirst, *_Plast)) {

	cmp	ebx, edi
	jae	SHORT $LN5@Partition_
$LL4@Partition_:
	push	DWORD PTR [esi]
	push	DWORD PTR [ebx]
	call	ebp
	add	esp, 8
	test	al, al
	jne	SHORT $LN92@Partition_
	push	DWORD PTR [ebx]
	push	DWORD PTR [esi]
	call	ebp
	add	esp, 8
	test	al, al
	jne	SHORT $LN92@Partition_

; 6989 :         ++_Plast;

	add	ebx, 4
	cmp	ebx, edi
	jb	SHORT $LL4@Partition_
$LN92@Partition_:
	mov	DWORD PTR __Plast$1$[esp+36], ebx
$LN5@Partition_:

; 6990 :     }
; 6991 : 
; 6992 :     _RanIt _Gfirst = _Plast;

	mov	edi, ebx

; 6993 :     _RanIt _Glast  = _Pfirst;

	mov	ebp, esi
$LN97@Partition_:

; 6996 :         for (; _Gfirst < _Last; ++_Gfirst) {

	mov	DWORD PTR __Glast$1$[esp+36], ebp
$LN96@Partition_:
	mov	DWORD PTR __Gfirst$1$[esp+36], edi
$LL6@Partition_:
	cmp	edi, DWORD PTR __Last$[esp+32]
	jae	SHORT $LN70@Partition_
	mov	ebp, DWORD PTR __Last$[esp+32]
	npad	5
$LL11@Partition_:

; 6997 :             if (_DEBUG_LT_PRED(_Pred, *_Pfirst, *_Gfirst)) {

	push	DWORD PTR [edi]
	push	DWORD PTR [esi]
	call	DWORD PTR __Pred$[esp+40]
	add	esp, 8
	test	al, al
	jne	SHORT $LN9@Partition_

; 6998 :                 continue;
; 6999 :             } else if (_Pred(*_Gfirst, *_Pfirst)) {

	push	DWORD PTR [esi]
	push	DWORD PTR [edi]
	call	DWORD PTR __Pred$[esp+40]
	add	esp, 8
	test	al, al
	jne	SHORT $LN93@Partition_

; 7000 :                 break;
; 7001 :             } else if (_Plast != _Gfirst) {

	cmp	ebx, edi
	je	SHORT $LN19@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [ebx]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [ebx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN19@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6996 :         for (; _Gfirst < _Last; ++_Gfirst) {

	add	ebx, 4
$LN9@Partition_:
	add	edi, 4
	cmp	edi, ebp
	jb	SHORT $LL11@Partition_
$LN93@Partition_:
	mov	ebp, DWORD PTR __Glast$1$[esp+36]
	mov	DWORD PTR __Plast$1$[esp+36], ebx
	mov	DWORD PTR __Gfirst$1$[esp+36], edi
$LN70@Partition_:

; 7009 :         for (; _First < _Glast; --_Glast) {

	mov	eax, DWORD PTR __First$1$[esp+36]
	cmp	ebp, eax
	jbe	SHORT $LN95@Partition_
	mov	edi, DWORD PTR __Glast$1$[esp+36]
	mov	ebx, eax
	lea	ebp, DWORD PTR [edi-4]
$LL14@Partition_:

; 7010 :             if (_DEBUG_LT_PRED(_Pred, *_Prev_iter(_Glast), *_Pfirst)) {

	push	DWORD PTR [esi]
	push	DWORD PTR [ebp]
	call	DWORD PTR __Pred$[esp+40]
	add	esp, 8
	test	al, al
	jne	SHORT $LN12@Partition_

; 7011 :                 continue;
; 7012 :             } else if (_Pred(*_Pfirst, *_Prev_iter(_Glast))) {

	push	DWORD PTR [ebp]
	push	DWORD PTR [esi]
	call	DWORD PTR __Pred$[esp+40]
	add	esp, 8
	test	al, al
	jne	SHORT $LN94@Partition_

; 7013 :                 break;
; 7014 :             } else if (--_Pfirst != _Prev_iter(_Glast)) {

	sub	esi, 4
	cmp	esi, ebp
	je	SHORT $LN12@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebp]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebp], ecx
$LN12@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7009 :         for (; _First < _Glast; --_Glast) {

	sub	edi, 4
	sub	ebp, 4
	cmp	ebx, edi
	jb	SHORT $LL14@Partition_
$LN94@Partition_:
	mov	eax, DWORD PTR __First$1$[esp+36]
	mov	ebx, DWORD PTR __Plast$1$[esp+36]
	mov	DWORD PTR __Glast$1$[esp+36], edi
	mov	ebp, DWORD PTR __Glast$1$[esp+36]

; 7015 :                 _STD iter_swap(_Pfirst, _Prev_iter(_Glast));
; 7016 :             }
; 7017 :         }
; 7018 : 
; 7019 :         if (_Glast == _First && _Gfirst == _Last) {

	cmp	ebp, eax
	mov	edi, DWORD PTR __Gfirst$1$[esp+36]
$LN95@Partition_:
	jne	SHORT $LN27@Partition_
	cmp	edi, DWORD PTR __Last$[esp+32]
	je	SHORT $LN72@Partition_

; 7021 :         }
; 7022 : 
; 7023 :         if (_Glast == _First) { // no room at bottom, rotate pivot upward
; 7024 :             if (_Plast != _Gfirst) {

	cmp	ebx, edi
	je	SHORT $LN29@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebx], ecx
$LN29@Partition_:

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7028 :             ++_Plast;

	add	ebx, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7030 :             ++_Pfirst;

	add	esi, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7031 :             ++_Gfirst;

	add	edi, 4
	mov	DWORD PTR __Plast$1$[esp+36], ebx
	jmp	$LN96@Partition_
$LN27@Partition_:

; 7032 :         } else if (_Gfirst == _Last) { // no room at top, rotate pivot downward

	add	ebp, -4					; fffffffcH
	mov	DWORD PTR __Glast$1$[esp+36], ebp
	cmp	edi, DWORD PTR __Last$[esp+32]
	jne	SHORT $LN30@Partition_

; 7033 :             if (--_Glast != --_Pfirst) {

	sub	esi, 4
	cmp	ebp, esi
	je	SHORT $LN82@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7037 :             _STD iter_swap(_Pfirst, --_Plast);

	sub	ebx, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [ebp]

; 101  :     _Left    = _STD move(_Right);

	mov	DWORD PTR [ebp], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [esi], ecx

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR [esi], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7037 :             _STD iter_swap(_Pfirst, --_Plast);

	mov	DWORD PTR __Plast$1$[esp+36], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebx], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7038 :         } else {

	jmp	$LL6@Partition_
$LN82@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 102  :     _Right   = _STD move(_Tmp);

	mov	ecx, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7037 :             _STD iter_swap(_Pfirst, --_Plast);

	sub	ebx, 4
	mov	DWORD PTR __Plast$1$[esp+36], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebx], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7038 :         } else {

	jmp	$LL6@Partition_
$LN30@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [edi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebp]
	mov	DWORD PTR [edi], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7040 :             ++_Gfirst;

	add	edi, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7042 :     }

	jmp	$LN97@Partition_
$LN72@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	eax, DWORD PTR ___$ReturnUdt$1$[esp+36]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7020 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);

	pop	edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	DWORD PTR [eax], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7020 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);

	pop	esi
	pop	ebp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	DWORD PTR [eax+4], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7020 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);

	pop	ebx

; 7043 : }

	add	esp, 20					; 00000014H
	ret	0
??$_Partition_by_median_guess_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YA?AU?$pair@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@0@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU23@1@Z@Z ENDP ; std::_Partition_by_median_guess_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Insertion_sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0P6A_NPAU12@1@Z@Z
_TEXT	SEGMENT
__First$1$ = -8						; size = 4
__Last$1$ = -4						; size = 4
__Pred$ = 8						; size = 4
??$_Insertion_sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0P6A_NPAU12@1@Z@Z PROC ; std::_Insertion_sort_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 6919 : _CONSTEXPR20 _BidIt _Insertion_sort_unchecked(const _BidIt _First, const _BidIt _Last, _Pr _Pred) {

	sub	esp, 8
	push	esi
	mov	eax, edx
	mov	esi, ecx
	mov	DWORD PTR __Last$1$[esp+12], eax
	mov	DWORD PTR __First$1$[esp+12], esi

; 6920 :     // insertion sort [_First, _Last)
; 6921 :     if (_First != _Last) {

	cmp	esi, eax
	je	SHORT $LN3@Insertion_

; 6922 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

	push	edi
	lea	edi, DWORD PTR [esi+4]
	cmp	edi, eax
	je	SHORT $LN27@Insertion_
	push	ebx
	push	ebp
	npad	2
$LL2@Insertion_:

; 6923 :             _BidIt _Hole               = _Mid;
; 6924 :             _Iter_value_t<_BidIt> _Val = _STD move(*_Mid);
; 6925 : 
; 6926 :             if (_DEBUG_LT_PRED(_Pred, _Val, *_First)) { // found new earliest element, move to front

	push	DWORD PTR [esi]
	mov	ebx, DWORD PTR [edi]
	mov	ebp, edi
	push	ebx
	call	DWORD PTR __Pred$[esp+28]
	add	esp, 8
	test	al, al
	je	SHORT $LN9@Insertion_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility

; 4254 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	mov	ecx, edi

; 4255 :     auto _Result                = _CSTD memmove(_Dest_ch - _Count, _First_ch, _Count);

	mov	eax, edi
	sub	ecx, esi
	push	ecx
	sub	eax, ecx
	add	eax, 4
	push	esi
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6928 :                 *_First = _STD move(_Val);

	mov	DWORD PTR [esi], ebx

; 6929 :             } else { // look for insertion point after first

	jmp	SHORT $LN10@Insertion_
$LN9@Insertion_:

; 6930 :                 for (_BidIt _Prev = _Hole; _DEBUG_LT_PRED(_Pred, _Val, *--_Prev); _Hole = _Prev) {

	push	DWORD PTR [edi-4]
	lea	esi, DWORD PTR [edi-4]
	push	ebx
	call	DWORD PTR __Pred$[esp+28]
	add	esp, 8
	test	al, al
	je	SHORT $LN6@Insertion_
	npad	2
$LL7@Insertion_:

; 6931 :                     *_Hole = _STD move(*_Prev); // move hole down

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [ebp], eax
	mov	ebp, esi
	push	DWORD PTR [esi-4]
	sub	esi, 4
	push	ebx
	call	DWORD PTR __Pred$[esp+28]
	add	esp, 8
	test	al, al
	jne	SHORT $LL7@Insertion_
$LN6@Insertion_:
	mov	esi, DWORD PTR __First$1$[esp+24]

; 6932 :                 }
; 6933 : 
; 6934 :                 *_Hole = _STD move(_Val); // insert element in hole

	mov	DWORD PTR [ebp], ebx
$LN10@Insertion_:

; 6922 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

	mov	eax, DWORD PTR __Last$1$[esp+24]
	add	edi, 4
	cmp	edi, eax
	jne	SHORT $LL2@Insertion_

; 6935 :             }
; 6936 :         }
; 6937 :     }
; 6938 : 
; 6939 :     return _Last;

	pop	ebp
	pop	ebx
$LN27@Insertion_:
	pop	edi
$LN3@Insertion_:
	pop	esi

; 6940 : }

	add	esp, 8
	ret	0
??$_Insertion_sort_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0P6A_NPAU12@1@Z@Z ENDP ; std::_Insertion_sort_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Make_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z
_TEXT	SEGMENT
__Val$1$ = -20						; size = 4
__Max_sequence_non_leaf$1$ = -16			; size = 4
__Hole$1$ = -12						; size = 4
__Bottom$1$ = -8					; size = 4
tv268 = -4						; size = 4
__Pred$ = 8						; size = 4
??$_Make_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z PROC ; std::_Make_heap_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 5544 : _CONSTEXPR20 void _Make_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

	sub	esp, 20					; 00000014H
	push	ebx
	mov	eax, edx
	mov	ebx, ecx

; 5545 :     // make [_First, _Last) into a heap
; 5546 :     using _Diff   = _Iter_diff_t<_RanIt>;
; 5547 :     _Diff _Bottom = _Last - _First;

	sub	eax, ebx
	sar	eax, 2
	push	ebp

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	mov	ebp, eax
	mov	DWORD PTR __Bottom$1$[esp+28], eax
	sar	ebp, 1
	test	ebp, ebp
	jle	$LN3@Make_heap_

; 5385 :     const _Diff _Max_sequence_non_leaf = (_Bottom - 1) >> 1; // shift for codegen

	mov	ecx, DWORD PTR __Pred$[esp+24]
	dec	eax
	mov	DWORD PTR tv268[esp+28], eax
	sar	eax, 1
	push	esi
	mov	DWORD PTR __Max_sequence_non_leaf$1$[esp+32], eax
	push	edi
	npad	1
$LL2@Make_heap_:

; 5549 :         // reheap top half, bottom to top
; 5550 :         --_Hole;
; 5551 :         _Iter_value_t<_RanIt> _Val = _STD move(*(_First + _Hole));

	mov	edx, DWORD PTR [ebx+ebp*4-4]
	dec	ebp
	mov	DWORD PTR __Hole$1$[esp+36], ebp

; 5552 :         _Pop_heap_hole_by_index(_First, _Hole, _Bottom, _STD move(_Val), _Pred);

	mov	edi, ebp
	mov	DWORD PTR __Val$1$[esp+36], edx

; 5381 :     _Diff _Idx       = _Hole;

	mov	esi, ebp

; 5386 :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

	cmp	ebp, eax
	jge	SHORT $LN8@Make_heap_
	mov	ebp, DWORD PTR __Max_sequence_non_leaf$1$[esp+36]
	npad	7
$LL7@Make_heap_:

; 5387 :         _Idx = 2 * _Idx + 2;
; 5388 :         if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1)))) {

	push	DWORD PTR [ebx+esi*8+4]
	lea	esi, DWORD PTR [esi*2+2]
	push	DWORD PTR [ebx+esi*4]
	call	ecx
	add	esp, 8
	test	al, al
	je	SHORT $LN9@Make_heap_

; 5389 :             --_Idx;

	dec	esi
$LN9@Make_heap_:

; 5390 :         }
; 5391 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [ebx+esi*4]
	mov	ecx, DWORD PTR __Pred$[esp+32]
	mov	DWORD PTR [ebx+edi*4], eax

; 5392 :         _Hole             = _Idx;

	mov	edi, esi
	cmp	esi, ebp
	jl	SHORT $LL7@Make_heap_
	mov	ebp, DWORD PTR __Hole$1$[esp+36]
	mov	eax, DWORD PTR __Max_sequence_non_leaf$1$[esp+36]
	mov	edx, DWORD PTR __Val$1$[esp+36]
$LN8@Make_heap_:

; 5393 :     }
; 5394 : 
; 5395 :     if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it

	cmp	esi, eax
	jne	SHORT $LN10@Make_heap_
	mov	eax, DWORD PTR __Bottom$1$[esp+36]
	test	al, 1
	jne	SHORT $LN10@Make_heap_

; 5396 :         *(_First + _Hole) = _STD move(*(_First + (_Bottom - 1)));

	mov	eax, DWORD PTR [ebx+eax*4-4]
	mov	DWORD PTR [ebx+edi*4], eax

; 5397 :         _Hole             = _Bottom - 1;

	mov	edi, DWORD PTR tv268[esp+36]
$LN10@Make_heap_:

; 5268 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

	cmp	ebp, edi
	jge	SHORT $LN29@Make_heap_
	npad	1
$LL15@Make_heap_:

; 5267 :     for (_Diff _Idx = (_Hole - 1) >> 1; // shift for codegen

	lea	esi, DWORD PTR [edi-1]
	sar	esi, 1

; 5268 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

	push	edx
	push	DWORD PTR [ebx+esi*4]
	call	ecx
	add	esp, 8
	test	al, al
	je	SHORT $LN29@Make_heap_

; 5269 :          _Idx = (_Hole - 1) >> 1) { // shift for codegen
; 5270 :         // move _Hole up to parent
; 5271 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [ebx+esi*4]
	mov	ecx, DWORD PTR __Pred$[esp+32]
	mov	edx, DWORD PTR __Val$1$[esp+36]
	mov	DWORD PTR [ebx+edi*4], eax

; 5272 :         _Hole             = _Idx;

	mov	edi, esi
	cmp	ebp, esi
	jl	SHORT $LL15@Make_heap_
$LN29@Make_heap_:

; 5273 :     }
; 5274 : 
; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	eax, DWORD PTR __Val$1$[esp+36]

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	mov	ecx, DWORD PTR __Pred$[esp+32]

; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	DWORD PTR [ebx+edi*4], eax

; 5548 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

	mov	eax, DWORD PTR __Max_sequence_non_leaf$1$[esp+36]
	test	ebp, ebp
	jg	$LL2@Make_heap_
	pop	edi
	pop	esi
$LN3@Make_heap_:
	pop	ebp

; 5553 :     }
; 5554 : }

	pop	ebx
	add	esp, 20					; 00000014H
	ret	0
??$_Make_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z ENDP ; std::_Make_heap_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Sort_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z
_TEXT	SEGMENT
__Val$1 = -4						; size = 4
__Pred$ = 8						; size = 4
??$_Sort_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z PROC ; std::_Sort_heap_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 5772 : _CONSTEXPR20 void _Sort_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

	push	ecx
	push	esi
	push	edi
	mov	esi, edx
	mov	edi, ecx

; 5773 :     // order heap by repeatedly popping
; 5774 :     for (; _Last - _First >= 2; --_Last) {

	sub	esi, edi
	mov	eax, esi
	and	eax, -4					; fffffffcH
	cmp	eax, 8
	jl	SHORT $LN3@Sort_heap_
	push	ebx
	mov	ebx, DWORD PTR __Pred$[esp+12]
	npad	8
$LL4@Sort_heap_:

; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	eax, DWORD PTR [edi+esi-4]

; 5410 :     _Pop_heap_hole_by_index(

	xor	edx, edx

; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	DWORD PTR __Val$1[esp+16], eax

; 5410 :     _Pop_heap_hole_by_index(

	mov	ecx, edi
	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [edi+esi-4], eax
	lea	eax, DWORD PTR __Val$1[esp+16]
	push	ebx
	push	eax
	lea	eax, DWORD PTR [esi-4]
	sar	eax, 2
	push	eax
	call	??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ; std::_Pop_heap_hole_by_index<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *)>

; 5773 :     // order heap by repeatedly popping
; 5774 :     for (; _Last - _First >= 2; --_Last) {

	sub	esi, 4

; 5410 :     _Pop_heap_hole_by_index(

	add	esp, 12					; 0000000cH

; 5773 :     // order heap by repeatedly popping
; 5774 :     for (; _Last - _First >= 2; --_Last) {

	mov	eax, esi
	and	eax, -4					; fffffffcH
	cmp	eax, 8
	jge	SHORT $LL4@Sort_heap_
	pop	ebx
$LN3@Sort_heap_:
	pop	edi

; 5775 :         _Pop_heap_unchecked(_First, _Last, _Pred);
; 5776 :     }
; 5777 : }

	pop	esi
	pop	ecx
	ret	0
??$_Sort_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z ENDP ; std::_Sort_heap_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Partition_by_median_guess_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YA?AU?$pair@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@0@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU23@1@Z@Z
_TEXT	SEGMENT
__Plast$1$ = -20					; size = 4
__Glast$1$ = -16					; size = 4
__First$1$ = -12					; size = 4
__Gfirst$1$ = -8					; size = 4
___$ReturnUdt$1$ = -4					; size = 4
__Last$ = 8						; size = 4
__Pred$ = 12						; size = 4
??$_Partition_by_median_guess_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YA?AU?$pair@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@0@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU23@1@Z@Z PROC ; std::_Partition_by_median_guess_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *)>, COMDAT
; ___$ReturnUdt$ = ecx
; __First$ = edx

; 6976 : _CONSTEXPR20 pair<_RanIt, _RanIt> _Partition_by_median_guess_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

	sub	esp, 20					; 00000014H
	push	ebx
	push	ebp

; 6977 :     // partition [_First, _Last)
; 6978 :     _RanIt _Mid = _First + ((_Last - _First) >> 1); // shift for codegen
; 6979 :     _Guess_median_unchecked(_First, _Mid, _Prev_iter(_Last), _Pred);

	mov	ebp, DWORD PTR __Pred$[esp+24]
	mov	ebx, edx
	push	esi
	push	edi
	mov	edi, DWORD PTR __Last$[esp+32]
	mov	eax, edi
	sub	eax, ebx
	mov	DWORD PTR ___$ReturnUdt$1$[esp+36], ecx
	sar	eax, 3
	mov	ecx, ebx
	push	ebp
	mov	DWORD PTR __First$1$[esp+40], ebx
	lea	esi, DWORD PTR [ebx+eax*4]
	lea	eax, DWORD PTR [edi-4]
	mov	edx, esi
	push	eax
	call	??$_Guess_median_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z ; std::_Guess_median_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *)>
	add	esp, 8

; 6980 :     _RanIt _Pfirst = _Mid;
; 6981 :     _RanIt _Plast  = _Next_iter(_Pfirst);

	lea	ebx, DWORD PTR [esi+4]
	mov	DWORD PTR __Plast$1$[esp+36], ebx

; 6982 : 
; 6983 :     while (_First < _Pfirst && !_DEBUG_LT_PRED(_Pred, *_Prev_iter(_Pfirst), *_Pfirst)
; 6984 :            && !_Pred(*_Pfirst, *_Prev_iter(_Pfirst))) {

	cmp	DWORD PTR __First$1$[esp+36], esi
	jae	SHORT $LN66@Partition_
	mov	ebx, DWORD PTR __First$1$[esp+36]
$LL2@Partition_:
	push	DWORD PTR [esi]
	push	DWORD PTR [esi-4]
	call	ebp
	add	esp, 8
	test	al, al
	jne	SHORT $LN91@Partition_
	push	DWORD PTR [esi-4]
	push	DWORD PTR [esi]
	call	ebp
	add	esp, 8
	test	al, al
	jne	SHORT $LN91@Partition_

; 6985 :         --_Pfirst;

	add	esi, -4					; fffffffcH
	cmp	ebx, esi
	jb	SHORT $LL2@Partition_
$LN91@Partition_:
	mov	ebx, DWORD PTR __Plast$1$[esp+36]
$LN66@Partition_:

; 6986 :     }
; 6987 : 
; 6988 :     while (_Plast < _Last && !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst) && !_Pred(*_Pfirst, *_Plast)) {

	cmp	ebx, edi
	jae	SHORT $LN5@Partition_
$LL4@Partition_:
	push	DWORD PTR [esi]
	push	DWORD PTR [ebx]
	call	ebp
	add	esp, 8
	test	al, al
	jne	SHORT $LN92@Partition_
	push	DWORD PTR [ebx]
	push	DWORD PTR [esi]
	call	ebp
	add	esp, 8
	test	al, al
	jne	SHORT $LN92@Partition_

; 6989 :         ++_Plast;

	add	ebx, 4
	cmp	ebx, edi
	jb	SHORT $LL4@Partition_
$LN92@Partition_:
	mov	DWORD PTR __Plast$1$[esp+36], ebx
$LN5@Partition_:

; 6990 :     }
; 6991 : 
; 6992 :     _RanIt _Gfirst = _Plast;

	mov	edi, ebx

; 6993 :     _RanIt _Glast  = _Pfirst;

	mov	ebp, esi
$LN97@Partition_:

; 6996 :         for (; _Gfirst < _Last; ++_Gfirst) {

	mov	DWORD PTR __Glast$1$[esp+36], ebp
$LN96@Partition_:
	mov	DWORD PTR __Gfirst$1$[esp+36], edi
$LL6@Partition_:
	cmp	edi, DWORD PTR __Last$[esp+32]
	jae	SHORT $LN70@Partition_
	mov	ebp, DWORD PTR __Last$[esp+32]
	npad	5
$LL11@Partition_:

; 6997 :             if (_DEBUG_LT_PRED(_Pred, *_Pfirst, *_Gfirst)) {

	push	DWORD PTR [edi]
	push	DWORD PTR [esi]
	call	DWORD PTR __Pred$[esp+40]
	add	esp, 8
	test	al, al
	jne	SHORT $LN9@Partition_

; 6998 :                 continue;
; 6999 :             } else if (_Pred(*_Gfirst, *_Pfirst)) {

	push	DWORD PTR [esi]
	push	DWORD PTR [edi]
	call	DWORD PTR __Pred$[esp+40]
	add	esp, 8
	test	al, al
	jne	SHORT $LN93@Partition_

; 7000 :                 break;
; 7001 :             } else if (_Plast != _Gfirst) {

	cmp	ebx, edi
	je	SHORT $LN19@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [ebx]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [ebx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN19@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6996 :         for (; _Gfirst < _Last; ++_Gfirst) {

	add	ebx, 4
$LN9@Partition_:
	add	edi, 4
	cmp	edi, ebp
	jb	SHORT $LL11@Partition_
$LN93@Partition_:
	mov	ebp, DWORD PTR __Glast$1$[esp+36]
	mov	DWORD PTR __Plast$1$[esp+36], ebx
	mov	DWORD PTR __Gfirst$1$[esp+36], edi
$LN70@Partition_:

; 7009 :         for (; _First < _Glast; --_Glast) {

	mov	eax, DWORD PTR __First$1$[esp+36]
	cmp	ebp, eax
	jbe	SHORT $LN95@Partition_
	mov	edi, DWORD PTR __Glast$1$[esp+36]
	mov	ebx, eax
	lea	ebp, DWORD PTR [edi-4]
$LL14@Partition_:

; 7010 :             if (_DEBUG_LT_PRED(_Pred, *_Prev_iter(_Glast), *_Pfirst)) {

	push	DWORD PTR [esi]
	push	DWORD PTR [ebp]
	call	DWORD PTR __Pred$[esp+40]
	add	esp, 8
	test	al, al
	jne	SHORT $LN12@Partition_

; 7011 :                 continue;
; 7012 :             } else if (_Pred(*_Pfirst, *_Prev_iter(_Glast))) {

	push	DWORD PTR [ebp]
	push	DWORD PTR [esi]
	call	DWORD PTR __Pred$[esp+40]
	add	esp, 8
	test	al, al
	jne	SHORT $LN94@Partition_

; 7013 :                 break;
; 7014 :             } else if (--_Pfirst != _Prev_iter(_Glast)) {

	sub	esi, 4
	cmp	esi, ebp
	je	SHORT $LN12@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebp]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebp], ecx
$LN12@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7009 :         for (; _First < _Glast; --_Glast) {

	sub	edi, 4
	sub	ebp, 4
	cmp	ebx, edi
	jb	SHORT $LL14@Partition_
$LN94@Partition_:
	mov	eax, DWORD PTR __First$1$[esp+36]
	mov	ebx, DWORD PTR __Plast$1$[esp+36]
	mov	DWORD PTR __Glast$1$[esp+36], edi
	mov	ebp, DWORD PTR __Glast$1$[esp+36]

; 7015 :                 _STD iter_swap(_Pfirst, _Prev_iter(_Glast));
; 7016 :             }
; 7017 :         }
; 7018 : 
; 7019 :         if (_Glast == _First && _Gfirst == _Last) {

	cmp	ebp, eax
	mov	edi, DWORD PTR __Gfirst$1$[esp+36]
$LN95@Partition_:
	jne	SHORT $LN27@Partition_
	cmp	edi, DWORD PTR __Last$[esp+32]
	je	SHORT $LN72@Partition_

; 7021 :         }
; 7022 : 
; 7023 :         if (_Glast == _First) { // no room at bottom, rotate pivot upward
; 7024 :             if (_Plast != _Gfirst) {

	cmp	ebx, edi
	je	SHORT $LN29@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebx], ecx
$LN29@Partition_:

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7028 :             ++_Plast;

	add	ebx, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7030 :             ++_Pfirst;

	add	esi, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7031 :             ++_Gfirst;

	add	edi, 4
	mov	DWORD PTR __Plast$1$[esp+36], ebx
	jmp	$LN96@Partition_
$LN27@Partition_:

; 7032 :         } else if (_Gfirst == _Last) { // no room at top, rotate pivot downward

	add	ebp, -4					; fffffffcH
	mov	DWORD PTR __Glast$1$[esp+36], ebp
	cmp	edi, DWORD PTR __Last$[esp+32]
	jne	SHORT $LN30@Partition_

; 7033 :             if (--_Glast != --_Pfirst) {

	sub	esi, 4
	cmp	ebp, esi
	je	SHORT $LN82@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7037 :             _STD iter_swap(_Pfirst, --_Plast);

	sub	ebx, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [ebp]

; 101  :     _Left    = _STD move(_Right);

	mov	DWORD PTR [ebp], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [esi], ecx

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR [esi], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7037 :             _STD iter_swap(_Pfirst, --_Plast);

	mov	DWORD PTR __Plast$1$[esp+36], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebx], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7038 :         } else {

	jmp	$LL6@Partition_
$LN82@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 102  :     _Right   = _STD move(_Tmp);

	mov	ecx, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7037 :             _STD iter_swap(_Pfirst, --_Plast);

	sub	ebx, 4
	mov	DWORD PTR __Plast$1$[esp+36], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebx], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7038 :         } else {

	jmp	$LL6@Partition_
$LN30@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [edi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebp]
	mov	DWORD PTR [edi], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7040 :             ++_Gfirst;

	add	edi, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7042 :     }

	jmp	$LN97@Partition_
$LN72@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	eax, DWORD PTR ___$ReturnUdt$1$[esp+36]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7020 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);

	pop	edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	DWORD PTR [eax], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7020 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);

	pop	esi
	pop	ebp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	DWORD PTR [eax+4], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 7020 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);

	pop	ebx

; 7043 : }

	add	esp, 20					; 00000014H
	ret	0
??$_Partition_by_median_guess_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YA?AU?$pair@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@0@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU23@1@Z@Z ENDP ; std::_Partition_by_median_guess_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Emplace_back@PAVIRender_Visual@@@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAEX$$QAPAVIRender_Visual@@@Z
_TEXT	SEGMENT
_<_Vals_0>$ = 8						; size = 4
??$_Emplace_back@PAVIRender_Visual@@@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAEX$$QAPAVIRender_Visual@@@Z PROC ; std::_Uninitialized_backout_al<doug_lea_alloc<IRender_Visual *> >::_Emplace_back<IRender_Visual *>, COMDAT
; _this$ = ecx

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _<_Vals_0>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 1621 :         ++_Last;

	add	DWORD PTR [ecx+4], 4

; 1622 :     }

	ret	4
??$_Emplace_back@PAVIRender_Visual@@@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAEX$$QAPAVIRender_Visual@@@Z ENDP ; std::_Uninitialized_backout_al<doug_lea_alloc<IRender_Visual *> >::_Emplace_back<IRender_Visual *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$move@AAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z
_TEXT	SEGMENT
??$move@AAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z PROC ; std::move<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * &>, COMDAT
; __Arg$ = ecx

; 1397 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	eax, ecx

; 1398 : }

	ret	0
??$move@AAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z ENDP ; std::move<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Emplace_back@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEX$$QAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
_<_Vals_0>$ = 8						; size = 4
??$_Emplace_back@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEX$$QAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Emplace_back<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *>, COMDAT
; _this$ = ecx

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _<_Vals_0>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 1621 :         ++_Last;

	add	DWORD PTR [ecx+4], 4

; 1622 :     }

	ret	4
??$_Emplace_back@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEX$$QAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Emplace_back<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Zero_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0@Z
_TEXT	SEGMENT
??$_Zero_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0@Z PROC ; std::_Zero_range<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 1789 : _Ptr _Zero_range(const _Ptr _First, const _Ptr _Last) { // fill [_First, _Last) with zeroes

	push	esi
	mov	esi, edx

; 1790 :     char* const _First_ch = reinterpret_cast<char*>(_To_address(_First));
; 1791 :     char* const _Last_ch  = reinterpret_cast<char*>(_To_address(_Last));
; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	mov	eax, esi
	sub	eax, ecx
	push	eax
	push	0
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 1793 :     return _Last;

	mov	eax, esi
	pop	esi

; 1794 : }

	ret	0
??$_Zero_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0@Z ENDP ; std::_Zero_range<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_To_address@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_PABQAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
??$_To_address@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_PABQAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; std::_To_address<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *>, COMDAT
; __Val$ = ecx

; 3981 :     _STL_INTERNAL_STATIC_ASSERT(is_pointer_v<_Iter>);
; 3982 :     return _Val;

	mov	eax, DWORD PTR [ecx]

; 3983 : }

	ret	0
??$_To_address@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_PABQAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; std::_To_address<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ
_TEXT	SEGMENT
??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ PROC ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Emplace_back<>, COMDAT
; _this$ = ecx

; 570  :             ::new (static_cast<void*>(_Ptr)) _Ty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], 0

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);
; 1621 :         ++_Last;

	add	DWORD PTR [ecx+4], 4

; 1622 :     }

	ret	0
??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ ENDP ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Emplace_back<>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Zero_range@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0@Z
_TEXT	SEGMENT
??$_Zero_range@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0@Z PROC ; std::_Zero_range<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 1789 : _Ptr _Zero_range(const _Ptr _First, const _Ptr _Last) { // fill [_First, _Last) with zeroes

	push	esi
	mov	esi, edx

; 1790 :     char* const _First_ch = reinterpret_cast<char*>(_To_address(_First));
; 1791 :     char* const _Last_ch  = reinterpret_cast<char*>(_To_address(_Last));
; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	mov	eax, esi
	sub	eax, ecx
	push	eax
	push	0
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 1793 :     return _Last;

	mov	eax, esi
	pop	esi

; 1794 : }

	ret	0
??$_Zero_range@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0@Z ENDP ; std::_Zero_range<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_To_address@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_PABQAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
??$_To_address@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_PABQAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; std::_To_address<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *>, COMDAT
; __Val$ = ecx

; 3981 :     _STL_INTERNAL_STATIC_ASSERT(is_pointer_v<_Iter>);
; 3982 :     return _Val;

	mov	eax, DWORD PTR [ecx]

; 3983 : }

	ret	0
??$_To_address@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_PABQAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; std::_To_address<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ
_TEXT	SEGMENT
??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ PROC ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::_Emplace_back<>, COMDAT
; _this$ = ecx

; 570  :             ::new (static_cast<void*>(_Ptr)) _Ty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], 0

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);
; 1621 :         ++_Last;

	add	DWORD PTR [ecx+4], 4

; 1622 :     }

	ret	0
??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ ENDP ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::_Emplace_back<>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Zero_range@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0@Z
_TEXT	SEGMENT
??$_Zero_range@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0@Z PROC ; std::_Zero_range<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 1789 : _Ptr _Zero_range(const _Ptr _First, const _Ptr _Last) { // fill [_First, _Last) with zeroes

	push	esi
	mov	esi, edx

; 1790 :     char* const _First_ch = reinterpret_cast<char*>(_To_address(_First));
; 1791 :     char* const _Last_ch  = reinterpret_cast<char*>(_To_address(_Last));
; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	mov	eax, esi
	sub	eax, ecx
	push	eax
	push	0
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 1793 :     return _Last;

	mov	eax, esi
	pop	esi

; 1794 : }

	ret	0
??$_Zero_range@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0@Z ENDP ; std::_Zero_range<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_To_address@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_PABQAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
??$_To_address@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_PABQAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; std::_To_address<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *>, COMDAT
; __Val$ = ecx

; 3981 :     _STL_INTERNAL_STATIC_ASSERT(is_pointer_v<_Iter>);
; 3982 :     return _Val;

	mov	eax, DWORD PTR [ecx]

; 3983 : }

	ret	0
??$_To_address@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_PABQAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; std::_To_address<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ
_TEXT	SEGMENT
??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ PROC ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::_Emplace_back<>, COMDAT
; _this$ = ecx

; 570  :             ::new (static_cast<void*>(_Ptr)) _Ty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], 0

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);
; 1621 :         ++_Last;

	add	DWORD PTR [ecx+4], 4

; 1622 :     }

	ret	0
??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ ENDP ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::_Emplace_back<>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Zero_range@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0@Z
_TEXT	SEGMENT
??$_Zero_range@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0@Z PROC ; std::_Zero_range<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 1789 : _Ptr _Zero_range(const _Ptr _First, const _Ptr _Last) { // fill [_First, _Last) with zeroes

	push	esi
	mov	esi, edx

; 1790 :     char* const _First_ch = reinterpret_cast<char*>(_To_address(_First));
; 1791 :     char* const _Last_ch  = reinterpret_cast<char*>(_To_address(_Last));
; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	mov	eax, esi
	sub	eax, ecx
	push	eax
	push	0
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 1793 :     return _Last;

	mov	eax, esi
	pop	esi

; 1794 : }

	ret	0
??$_Zero_range@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0@Z ENDP ; std::_Zero_range<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_To_address@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_PABQAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
??$_To_address@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_PABQAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; std::_To_address<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *>, COMDAT
; __Val$ = ecx

; 3981 :     _STL_INTERNAL_STATIC_ASSERT(is_pointer_v<_Iter>);
; 3982 :     return _Val;

	mov	eax, DWORD PTR [ecx]

; 3983 : }

	ret	0
??$_To_address@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_PABQAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; std::_To_address<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ
_TEXT	SEGMENT
??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ PROC ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::_Emplace_back<>, COMDAT
; _this$ = ecx

; 570  :             ::new (static_cast<void*>(_Ptr)) _Ty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], 0

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);
; 1621 :         ++_Last;

	add	DWORD PTR [ecx+4], 4

; 1622 :     }

	ret	0
??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ ENDP ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::_Emplace_back<>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Zero_range@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0@Z
_TEXT	SEGMENT
??$_Zero_range@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0@Z PROC ; std::_Zero_range<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 1789 : _Ptr _Zero_range(const _Ptr _First, const _Ptr _Last) { // fill [_First, _Last) with zeroes

	push	esi
	mov	esi, edx

; 1790 :     char* const _First_ch = reinterpret_cast<char*>(_To_address(_First));
; 1791 :     char* const _Last_ch  = reinterpret_cast<char*>(_To_address(_Last));
; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	mov	eax, esi
	sub	eax, ecx
	push	eax
	push	0
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 1793 :     return _Last;

	mov	eax, esi
	pop	esi

; 1794 : }

	ret	0
??$_Zero_range@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0@Z ENDP ; std::_Zero_range<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_To_address@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_PABQAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
??$_To_address@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_PABQAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; std::_To_address<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *>, COMDAT
; __Val$ = ecx

; 3981 :     _STL_INTERNAL_STATIC_ASSERT(is_pointer_v<_Iter>);
; 3982 :     return _Val;

	mov	eax, DWORD PTR [ecx]

; 3983 : }

	ret	0
??$_To_address@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_PABQAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; std::_To_address<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ
_TEXT	SEGMENT
??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ PROC ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::_Emplace_back<>, COMDAT
; _this$ = ecx

; 570  :             ::new (static_cast<void*>(_Ptr)) _Ty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], 0

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);
; 1621 :         ++_Last;

	add	DWORD PTR [ecx+4], 4

; 1622 :     }

	ret	0
??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ ENDP ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::_Emplace_back<>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$move@AAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z
_TEXT	SEGMENT
??$move@AAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z PROC ; std::move<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * &>, COMDAT
; __Arg$ = ecx

; 1397 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	eax, ecx

; 1398 : }

	ret	0
??$move@AAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z ENDP ; std::move<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Emplace_back@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEX$$QAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
_<_Vals_0>$ = 8						; size = 4
??$_Emplace_back@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEX$$QAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Emplace_back<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *>, COMDAT
; _this$ = ecx

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _<_Vals_0>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 1621 :         ++_Last;

	add	DWORD PTR [ecx+4], 4

; 1622 :     }

	ret	4
??$_Emplace_back@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEX$$QAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Emplace_back<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Zero_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0@Z
_TEXT	SEGMENT
??$_Zero_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0@Z PROC ; std::_Zero_range<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 1789 : _Ptr _Zero_range(const _Ptr _First, const _Ptr _Last) { // fill [_First, _Last) with zeroes

	push	esi
	mov	esi, edx

; 1790 :     char* const _First_ch = reinterpret_cast<char*>(_To_address(_First));
; 1791 :     char* const _Last_ch  = reinterpret_cast<char*>(_To_address(_Last));
; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	mov	eax, esi
	sub	eax, ecx
	push	eax
	push	0
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 1793 :     return _Last;

	mov	eax, esi
	pop	esi

; 1794 : }

	ret	0
??$_Zero_range@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0@Z ENDP ; std::_Zero_range<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_To_address@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_PABQAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
??$_To_address@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_PABQAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; std::_To_address<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *>, COMDAT
; __Val$ = ecx

; 3981 :     _STL_INTERNAL_STATIC_ASSERT(is_pointer_v<_Iter>);
; 3982 :     return _Val;

	mov	eax, DWORD PTR [ecx]

; 3983 : }

	ret	0
??$_To_address@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_PABQAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; std::_To_address<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ
_TEXT	SEGMENT
??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ PROC ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Emplace_back<>, COMDAT
; _this$ = ecx

; 570  :             ::new (static_cast<void*>(_Ptr)) _Ty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], 0

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);
; 1621 :         ++_Last;

	add	DWORD PTR [ecx+4], 4

; 1622 :     }

	ret	0
??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ ENDP ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Emplace_back<>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Zero_range@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0@Z
_TEXT	SEGMENT
??$_Zero_range@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0@Z PROC ; std::_Zero_range<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 1789 : _Ptr _Zero_range(const _Ptr _First, const _Ptr _Last) { // fill [_First, _Last) with zeroes

	push	esi
	mov	esi, edx

; 1790 :     char* const _First_ch = reinterpret_cast<char*>(_To_address(_First));
; 1791 :     char* const _Last_ch  = reinterpret_cast<char*>(_To_address(_Last));
; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	mov	eax, esi
	sub	eax, ecx
	push	eax
	push	0
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 1793 :     return _Last;

	mov	eax, esi
	pop	esi

; 1794 : }

	ret	0
??$_Zero_range@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0@Z ENDP ; std::_Zero_range<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_To_address@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_PABQAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
??$_To_address@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_PABQAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; std::_To_address<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *>, COMDAT
; __Val$ = ecx

; 3981 :     _STL_INTERNAL_STATIC_ASSERT(is_pointer_v<_Iter>);
; 3982 :     return _Val;

	mov	eax, DWORD PTR [ecx]

; 3983 : }

	ret	0
??$_To_address@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_PABQAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; std::_To_address<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ
_TEXT	SEGMENT
??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ PROC ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::_Emplace_back<>, COMDAT
; _this$ = ecx

; 570  :             ::new (static_cast<void*>(_Ptr)) _Ty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], 0

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);
; 1621 :         ++_Last;

	add	DWORD PTR [ecx+4], 4

; 1622 :     }

	ret	0
??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ ENDP ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::_Emplace_back<>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Zero_range@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0@Z
_TEXT	SEGMENT
??$_Zero_range@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0@Z PROC ; std::_Zero_range<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 1789 : _Ptr _Zero_range(const _Ptr _First, const _Ptr _Last) { // fill [_First, _Last) with zeroes

	push	esi
	mov	esi, edx

; 1790 :     char* const _First_ch = reinterpret_cast<char*>(_To_address(_First));
; 1791 :     char* const _Last_ch  = reinterpret_cast<char*>(_To_address(_Last));
; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	mov	eax, esi
	sub	eax, ecx
	push	eax
	push	0
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 1793 :     return _Last;

	mov	eax, esi
	pop	esi

; 1794 : }

	ret	0
??$_Zero_range@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0@Z ENDP ; std::_Zero_range<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_To_address@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_PABQAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
??$_To_address@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_PABQAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; std::_To_address<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *>, COMDAT
; __Val$ = ecx

; 3981 :     _STL_INTERNAL_STATIC_ASSERT(is_pointer_v<_Iter>);
; 3982 :     return _Val;

	mov	eax, DWORD PTR [ecx]

; 3983 : }

	ret	0
??$_To_address@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_PABQAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; std::_To_address<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ
_TEXT	SEGMENT
??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ PROC ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::_Emplace_back<>, COMDAT
; _this$ = ecx

; 570  :             ::new (static_cast<void*>(_Ptr)) _Ty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], 0

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);
; 1621 :         ++_Last;

	add	DWORD PTR [ecx+4], 4

; 1622 :     }

	ret	0
??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ ENDP ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::_Emplace_back<>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Zero_range@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0@Z
_TEXT	SEGMENT
??$_Zero_range@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0@Z PROC ; std::_Zero_range<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 1789 : _Ptr _Zero_range(const _Ptr _First, const _Ptr _Last) { // fill [_First, _Last) with zeroes

	push	esi
	mov	esi, edx

; 1790 :     char* const _First_ch = reinterpret_cast<char*>(_To_address(_First));
; 1791 :     char* const _Last_ch  = reinterpret_cast<char*>(_To_address(_Last));
; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	mov	eax, esi
	sub	eax, ecx
	push	eax
	push	0
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 1793 :     return _Last;

	mov	eax, esi
	pop	esi

; 1794 : }

	ret	0
??$_Zero_range@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0@Z ENDP ; std::_Zero_range<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_To_address@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_PABQAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
??$_To_address@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_PABQAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; std::_To_address<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *>, COMDAT
; __Val$ = ecx

; 3981 :     _STL_INTERNAL_STATIC_ASSERT(is_pointer_v<_Iter>);
; 3982 :     return _Val;

	mov	eax, DWORD PTR [ecx]

; 3983 : }

	ret	0
??$_To_address@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_PABQAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; std::_To_address<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ
_TEXT	SEGMENT
??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ PROC ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::_Emplace_back<>, COMDAT
; _this$ = ecx

; 570  :             ::new (static_cast<void*>(_Ptr)) _Ty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], 0

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);
; 1621 :         ++_Last;

	add	DWORD PTR [ecx+4], 4

; 1622 :     }

	ret	0
??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ ENDP ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::_Emplace_back<>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Zero_range@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0@Z
_TEXT	SEGMENT
??$_Zero_range@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0@Z PROC ; std::_Zero_range<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 1789 : _Ptr _Zero_range(const _Ptr _First, const _Ptr _Last) { // fill [_First, _Last) with zeroes

	push	esi
	mov	esi, edx

; 1790 :     char* const _First_ch = reinterpret_cast<char*>(_To_address(_First));
; 1791 :     char* const _Last_ch  = reinterpret_cast<char*>(_To_address(_Last));
; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	mov	eax, esi
	sub	eax, ecx
	push	eax
	push	0
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 1793 :     return _Last;

	mov	eax, esi
	pop	esi

; 1794 : }

	ret	0
??$_Zero_range@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0@Z ENDP ; std::_Zero_range<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_To_address@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_PABQAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
??$_To_address@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_PABQAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; std::_To_address<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *>, COMDAT
; __Val$ = ecx

; 3981 :     _STL_INTERNAL_STATIC_ASSERT(is_pointer_v<_Iter>);
; 3982 :     return _Val;

	mov	eax, DWORD PTR [ecx]

; 3983 : }

	ret	0
??$_To_address@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_PABQAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; std::_To_address<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ
_TEXT	SEGMENT
??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ PROC ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::_Emplace_back<>, COMDAT
; _this$ = ecx

; 570  :             ::new (static_cast<void*>(_Ptr)) _Ty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], 0

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);
; 1621 :         ++_Last;

	add	DWORD PTR [ecx+4], 4

; 1622 :     }

	ret	0
??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ ENDP ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::_Emplace_back<>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$_Unfancy@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@std@@YAPAU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@0@PAU10@@Z
_TEXT	SEGMENT
??$_Unfancy@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@std@@YAPAU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@0@PAU10@@Z PROC ; std::_Unfancy<std::pair<unsigned int,resptr_core<CTexture,resptrcode_texture> > >, COMDAT
; __Ptr$ = ecx

; 266  :     return _Ptr;

	mov	eax, ecx

; 267  : }

	ret	0
??$_Unfancy@U?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@@std@@YAPAU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@0@PAU10@@Z ENDP ; std::_Unfancy<std::pair<unsigned int,resptr_core<CTexture,resptrcode_texture> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0PAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Al$dead$ = 12						; size = 4
??$_Uninitialized_move@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0PAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z PROC ; std::_Uninitialized_move<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	eax, DWORD PTR __Dest$[esp-4]

; 1699 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

	push	esi
	mov	esi, edx

; 1700 :     // move [_First, _Last) to raw _Dest, using _Al
; 1701 :     // note: only called internally from elsewhere in the STL
; 1702 :     using _Ptrval     = typename _Alloc::value_type*;
; 1703 :     auto _UFirst      = _Get_unwrapped(_First);
; 1704 :     const auto _ULast = _Get_unwrapped(_Last);
; 1705 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1706 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1707 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1708 :         if (!_STD is_constant_evaluated())
; 1709 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1710 :         {
; 1711 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1712 :             return _Dest + (_ULast - _UFirst);
; 1713 :         }
; 1714 :     }
; 1715 : 
; 1716 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	cmp	ecx, esi
	je	SHORT $LN3@Uninitiali
	npad	5
$LL4@Uninitiali:

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	edx, DWORD PTR [ecx]

; 1621 :         ++_Last;

	add	ecx, 4
	mov	DWORD PTR [eax], edx
	add	eax, 4

; 1700 :     // move [_First, _Last) to raw _Dest, using _Al
; 1701 :     // note: only called internally from elsewhere in the STL
; 1702 :     using _Ptrval     = typename _Alloc::value_type*;
; 1703 :     auto _UFirst      = _Get_unwrapped(_First);
; 1704 :     const auto _ULast = _Get_unwrapped(_Last);
; 1705 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1706 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1707 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1708 :         if (!_STD is_constant_evaluated())
; 1709 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1710 :         {
; 1711 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1712 :             return _Dest + (_ULast - _UFirst);
; 1713 :         }
; 1714 :     }
; 1715 : 
; 1716 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	cmp	ecx, esi
	jne	SHORT $LL4@Uninitiali
$LN3@Uninitiali:
	pop	esi

; 1718 :         _Backout._Emplace_back(_STD move(*_UFirst));
; 1719 :     }
; 1720 : 
; 1721 :     return _Backout._Release();
; 1722 : }

	ret	0
??$_Uninitialized_move@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0PAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ENDP ; std::_Uninitialized_move<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Get_unwrapped@ABQAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_TABQAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
??$_Get_unwrapped@ABQAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_TABQAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; std::_Get_unwrapped<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * * const &>, COMDAT
; __It$ = ecx

; 1275 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1276 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1277 :         return _It + 0;

	mov	eax, DWORD PTR [ecx]

; 1278 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1279 :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 1280 :     } else {
; 1281 :         return static_cast<_Iter&&>(_It);
; 1282 :     }
; 1283 : }

	ret	0
??$_Get_unwrapped@ABQAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_TABQAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; std::_Get_unwrapped<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * * const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0PAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Al$dead$ = 12						; size = 4
??$_Uninitialized_move@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0PAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z PROC ; std::_Uninitialized_move<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	eax, DWORD PTR __Dest$[esp-4]

; 1699 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

	push	esi
	mov	esi, edx

; 1700 :     // move [_First, _Last) to raw _Dest, using _Al
; 1701 :     // note: only called internally from elsewhere in the STL
; 1702 :     using _Ptrval     = typename _Alloc::value_type*;
; 1703 :     auto _UFirst      = _Get_unwrapped(_First);
; 1704 :     const auto _ULast = _Get_unwrapped(_Last);
; 1705 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1706 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1707 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1708 :         if (!_STD is_constant_evaluated())
; 1709 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1710 :         {
; 1711 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1712 :             return _Dest + (_ULast - _UFirst);
; 1713 :         }
; 1714 :     }
; 1715 : 
; 1716 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	cmp	ecx, esi
	je	SHORT $LN3@Uninitiali
	npad	5
$LL4@Uninitiali:

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	edx, DWORD PTR [ecx]

; 1621 :         ++_Last;

	add	ecx, 4
	mov	DWORD PTR [eax], edx
	add	eax, 4

; 1700 :     // move [_First, _Last) to raw _Dest, using _Al
; 1701 :     // note: only called internally from elsewhere in the STL
; 1702 :     using _Ptrval     = typename _Alloc::value_type*;
; 1703 :     auto _UFirst      = _Get_unwrapped(_First);
; 1704 :     const auto _ULast = _Get_unwrapped(_Last);
; 1705 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1706 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1707 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1708 :         if (!_STD is_constant_evaluated())
; 1709 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1710 :         {
; 1711 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1712 :             return _Dest + (_ULast - _UFirst);
; 1713 :         }
; 1714 :     }
; 1715 : 
; 1716 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	cmp	ecx, esi
	jne	SHORT $LL4@Uninitiali
$LN3@Uninitiali:
	pop	esi

; 1718 :         _Backout._Emplace_back(_STD move(*_UFirst));
; 1719 :     }
; 1720 : 
; 1721 :     return _Backout._Release();
; 1722 : }

	ret	0
??$_Uninitialized_move@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0PAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ENDP ; std::_Uninitialized_move<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Get_unwrapped@ABQAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_TABQAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
??$_Get_unwrapped@ABQAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_TABQAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; std::_Get_unwrapped<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * * const &>, COMDAT
; __It$ = ecx

; 1275 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1276 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1277 :         return _It + 0;

	mov	eax, DWORD PTR [ecx]

; 1278 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1279 :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 1280 :     } else {
; 1281 :         return static_cast<_Iter&&>(_It);
; 1282 :     }
; 1283 : }

	ret	0
??$_Get_unwrapped@ABQAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_TABQAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; std::_Get_unwrapped<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * * const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0PAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Al$dead$ = 12						; size = 4
??$_Uninitialized_move@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0PAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z PROC ; std::_Uninitialized_move<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	eax, DWORD PTR __Dest$[esp-4]

; 1699 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

	push	esi
	mov	esi, edx

; 1700 :     // move [_First, _Last) to raw _Dest, using _Al
; 1701 :     // note: only called internally from elsewhere in the STL
; 1702 :     using _Ptrval     = typename _Alloc::value_type*;
; 1703 :     auto _UFirst      = _Get_unwrapped(_First);
; 1704 :     const auto _ULast = _Get_unwrapped(_Last);
; 1705 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1706 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1707 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1708 :         if (!_STD is_constant_evaluated())
; 1709 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1710 :         {
; 1711 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1712 :             return _Dest + (_ULast - _UFirst);
; 1713 :         }
; 1714 :     }
; 1715 : 
; 1716 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	cmp	ecx, esi
	je	SHORT $LN3@Uninitiali
	npad	5
$LL4@Uninitiali:

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	edx, DWORD PTR [ecx]

; 1621 :         ++_Last;

	add	ecx, 4
	mov	DWORD PTR [eax], edx
	add	eax, 4

; 1700 :     // move [_First, _Last) to raw _Dest, using _Al
; 1701 :     // note: only called internally from elsewhere in the STL
; 1702 :     using _Ptrval     = typename _Alloc::value_type*;
; 1703 :     auto _UFirst      = _Get_unwrapped(_First);
; 1704 :     const auto _ULast = _Get_unwrapped(_Last);
; 1705 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1706 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1707 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1708 :         if (!_STD is_constant_evaluated())
; 1709 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1710 :         {
; 1711 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1712 :             return _Dest + (_ULast - _UFirst);
; 1713 :         }
; 1714 :     }
; 1715 : 
; 1716 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	cmp	ecx, esi
	jne	SHORT $LL4@Uninitiali
$LN3@Uninitiali:
	pop	esi

; 1718 :         _Backout._Emplace_back(_STD move(*_UFirst));
; 1719 :     }
; 1720 : 
; 1721 :     return _Backout._Release();
; 1722 : }

	ret	0
??$_Uninitialized_move@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0PAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ENDP ; std::_Uninitialized_move<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Get_unwrapped@ABQAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_TABQAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
??$_Get_unwrapped@ABQAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_TABQAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; std::_Get_unwrapped<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * * const &>, COMDAT
; __It$ = ecx

; 1275 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1276 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1277 :         return _It + 0;

	mov	eax, DWORD PTR [ecx]

; 1278 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1279 :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 1280 :     } else {
; 1281 :         return static_cast<_Iter&&>(_It);
; 1282 :     }
; 1283 : }

	ret	0
??$_Get_unwrapped@ABQAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_TABQAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; std::_Get_unwrapped<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * * const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0PAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Al$dead$ = 12						; size = 4
??$_Uninitialized_move@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0PAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z PROC ; std::_Uninitialized_move<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	eax, DWORD PTR __Dest$[esp-4]

; 1699 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

	push	esi
	mov	esi, edx

; 1700 :     // move [_First, _Last) to raw _Dest, using _Al
; 1701 :     // note: only called internally from elsewhere in the STL
; 1702 :     using _Ptrval     = typename _Alloc::value_type*;
; 1703 :     auto _UFirst      = _Get_unwrapped(_First);
; 1704 :     const auto _ULast = _Get_unwrapped(_Last);
; 1705 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1706 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1707 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1708 :         if (!_STD is_constant_evaluated())
; 1709 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1710 :         {
; 1711 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1712 :             return _Dest + (_ULast - _UFirst);
; 1713 :         }
; 1714 :     }
; 1715 : 
; 1716 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	cmp	ecx, esi
	je	SHORT $LN3@Uninitiali
	npad	5
$LL4@Uninitiali:

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	edx, DWORD PTR [ecx]

; 1621 :         ++_Last;

	add	ecx, 4
	mov	DWORD PTR [eax], edx
	add	eax, 4

; 1700 :     // move [_First, _Last) to raw _Dest, using _Al
; 1701 :     // note: only called internally from elsewhere in the STL
; 1702 :     using _Ptrval     = typename _Alloc::value_type*;
; 1703 :     auto _UFirst      = _Get_unwrapped(_First);
; 1704 :     const auto _ULast = _Get_unwrapped(_Last);
; 1705 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1706 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1707 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1708 :         if (!_STD is_constant_evaluated())
; 1709 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1710 :         {
; 1711 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1712 :             return _Dest + (_ULast - _UFirst);
; 1713 :         }
; 1714 :     }
; 1715 : 
; 1716 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	cmp	ecx, esi
	jne	SHORT $LL4@Uninitiali
$LN3@Uninitiali:
	pop	esi

; 1718 :         _Backout._Emplace_back(_STD move(*_UFirst));
; 1719 :     }
; 1720 : 
; 1721 :     return _Backout._Release();
; 1722 : }

	ret	0
??$_Uninitialized_move@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0PAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ENDP ; std::_Uninitialized_move<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Get_unwrapped@ABQAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_TABQAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
??$_Get_unwrapped@ABQAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_TABQAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; std::_Get_unwrapped<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * * const &>, COMDAT
; __It$ = ecx

; 1275 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1276 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1277 :         return _It + 0;

	mov	eax, DWORD PTR [ecx]

; 1278 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1279 :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 1280 :     } else {
; 1281 :         return static_cast<_Iter&&>(_It);
; 1282 :     }
; 1283 : }

	ret	0
??$_Get_unwrapped@ABQAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_TABQAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; std::_Get_unwrapped<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * * const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0PAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Al$dead$ = 12						; size = 4
??$_Uninitialized_move@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0PAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z PROC ; std::_Uninitialized_move<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	eax, DWORD PTR __Dest$[esp-4]

; 1699 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

	push	esi
	mov	esi, edx

; 1700 :     // move [_First, _Last) to raw _Dest, using _Al
; 1701 :     // note: only called internally from elsewhere in the STL
; 1702 :     using _Ptrval     = typename _Alloc::value_type*;
; 1703 :     auto _UFirst      = _Get_unwrapped(_First);
; 1704 :     const auto _ULast = _Get_unwrapped(_Last);
; 1705 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1706 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1707 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1708 :         if (!_STD is_constant_evaluated())
; 1709 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1710 :         {
; 1711 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1712 :             return _Dest + (_ULast - _UFirst);
; 1713 :         }
; 1714 :     }
; 1715 : 
; 1716 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	cmp	ecx, esi
	je	SHORT $LN3@Uninitiali
	npad	5
$LL4@Uninitiali:

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	edx, DWORD PTR [ecx]

; 1621 :         ++_Last;

	add	ecx, 4
	mov	DWORD PTR [eax], edx
	add	eax, 4

; 1700 :     // move [_First, _Last) to raw _Dest, using _Al
; 1701 :     // note: only called internally from elsewhere in the STL
; 1702 :     using _Ptrval     = typename _Alloc::value_type*;
; 1703 :     auto _UFirst      = _Get_unwrapped(_First);
; 1704 :     const auto _ULast = _Get_unwrapped(_Last);
; 1705 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1706 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1707 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1708 :         if (!_STD is_constant_evaluated())
; 1709 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1710 :         {
; 1711 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1712 :             return _Dest + (_ULast - _UFirst);
; 1713 :         }
; 1714 :     }
; 1715 : 
; 1716 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	cmp	ecx, esi
	jne	SHORT $LL4@Uninitiali
$LN3@Uninitiali:
	pop	esi

; 1718 :         _Backout._Emplace_back(_STD move(*_UFirst));
; 1719 :     }
; 1720 : 
; 1721 :     return _Backout._Release();
; 1722 : }

	ret	0
??$_Uninitialized_move@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0PAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ENDP ; std::_Uninitialized_move<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Get_unwrapped@ABQAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_TABQAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
??$_Get_unwrapped@ABQAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_TABQAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; std::_Get_unwrapped<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * * const &>, COMDAT
; __It$ = ecx

; 1275 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1276 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1277 :         return _It + 0;

	mov	eax, DWORD PTR [ecx]

; 1278 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1279 :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 1280 :     } else {
; 1281 :         return static_cast<_Iter&&>(_It);
; 1282 :     }
; 1283 : }

	ret	0
??$_Get_unwrapped@ABQAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_TABQAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; std::_Get_unwrapped<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * * const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0PAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Al$dead$ = 12						; size = 4
??$_Uninitialized_move@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0PAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z PROC ; std::_Uninitialized_move<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	eax, DWORD PTR __Dest$[esp-4]

; 1699 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

	push	esi
	mov	esi, edx

; 1700 :     // move [_First, _Last) to raw _Dest, using _Al
; 1701 :     // note: only called internally from elsewhere in the STL
; 1702 :     using _Ptrval     = typename _Alloc::value_type*;
; 1703 :     auto _UFirst      = _Get_unwrapped(_First);
; 1704 :     const auto _ULast = _Get_unwrapped(_Last);
; 1705 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1706 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1707 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1708 :         if (!_STD is_constant_evaluated())
; 1709 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1710 :         {
; 1711 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1712 :             return _Dest + (_ULast - _UFirst);
; 1713 :         }
; 1714 :     }
; 1715 : 
; 1716 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	cmp	ecx, esi
	je	SHORT $LN3@Uninitiali
	npad	5
$LL4@Uninitiali:

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	edx, DWORD PTR [ecx]

; 1621 :         ++_Last;

	add	ecx, 4
	mov	DWORD PTR [eax], edx
	add	eax, 4

; 1700 :     // move [_First, _Last) to raw _Dest, using _Al
; 1701 :     // note: only called internally from elsewhere in the STL
; 1702 :     using _Ptrval     = typename _Alloc::value_type*;
; 1703 :     auto _UFirst      = _Get_unwrapped(_First);
; 1704 :     const auto _ULast = _Get_unwrapped(_Last);
; 1705 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1706 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1707 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1708 :         if (!_STD is_constant_evaluated())
; 1709 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1710 :         {
; 1711 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1712 :             return _Dest + (_ULast - _UFirst);
; 1713 :         }
; 1714 :     }
; 1715 : 
; 1716 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	cmp	ecx, esi
	jne	SHORT $LL4@Uninitiali
$LN3@Uninitiali:
	pop	esi

; 1718 :         _Backout._Emplace_back(_STD move(*_UFirst));
; 1719 :     }
; 1720 : 
; 1721 :     return _Backout._Release();
; 1722 : }

	ret	0
??$_Uninitialized_move@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0PAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ENDP ; std::_Uninitialized_move<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Get_unwrapped@ABQAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_TABQAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
??$_Get_unwrapped@ABQAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_TABQAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; std::_Get_unwrapped<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * * const &>, COMDAT
; __It$ = ecx

; 1275 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1276 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1277 :         return _It + 0;

	mov	eax, DWORD PTR [ecx]

; 1278 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1279 :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 1280 :     } else {
; 1281 :         return static_cast<_Iter&&>(_It);
; 1282 :     }
; 1283 : }

	ret	0
??$_Get_unwrapped@ABQAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_TABQAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; std::_Get_unwrapped<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * * const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0PAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Al$dead$ = 12						; size = 4
??$_Uninitialized_move@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0PAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z PROC ; std::_Uninitialized_move<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	eax, DWORD PTR __Dest$[esp-4]

; 1699 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

	push	esi
	mov	esi, edx

; 1700 :     // move [_First, _Last) to raw _Dest, using _Al
; 1701 :     // note: only called internally from elsewhere in the STL
; 1702 :     using _Ptrval     = typename _Alloc::value_type*;
; 1703 :     auto _UFirst      = _Get_unwrapped(_First);
; 1704 :     const auto _ULast = _Get_unwrapped(_Last);
; 1705 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1706 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1707 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1708 :         if (!_STD is_constant_evaluated())
; 1709 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1710 :         {
; 1711 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1712 :             return _Dest + (_ULast - _UFirst);
; 1713 :         }
; 1714 :     }
; 1715 : 
; 1716 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	cmp	ecx, esi
	je	SHORT $LN3@Uninitiali
	npad	5
$LL4@Uninitiali:

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	edx, DWORD PTR [ecx]

; 1621 :         ++_Last;

	add	ecx, 4
	mov	DWORD PTR [eax], edx
	add	eax, 4

; 1700 :     // move [_First, _Last) to raw _Dest, using _Al
; 1701 :     // note: only called internally from elsewhere in the STL
; 1702 :     using _Ptrval     = typename _Alloc::value_type*;
; 1703 :     auto _UFirst      = _Get_unwrapped(_First);
; 1704 :     const auto _ULast = _Get_unwrapped(_Last);
; 1705 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1706 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1707 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1708 :         if (!_STD is_constant_evaluated())
; 1709 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1710 :         {
; 1711 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1712 :             return _Dest + (_ULast - _UFirst);
; 1713 :         }
; 1714 :     }
; 1715 : 
; 1716 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	cmp	ecx, esi
	jne	SHORT $LL4@Uninitiali
$LN3@Uninitiali:
	pop	esi

; 1718 :         _Backout._Emplace_back(_STD move(*_UFirst));
; 1719 :     }
; 1720 : 
; 1721 :     return _Backout._Release();
; 1722 : }

	ret	0
??$_Uninitialized_move@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0PAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ENDP ; std::_Uninitialized_move<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Get_unwrapped@ABQAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_TABQAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
??$_Get_unwrapped@ABQAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_TABQAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; std::_Get_unwrapped<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * * const &>, COMDAT
; __It$ = ecx

; 1275 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1276 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1277 :         return _It + 0;

	mov	eax, DWORD PTR [ecx]

; 1278 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1279 :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 1280 :     } else {
; 1281 :         return static_cast<_Iter&&>(_It);
; 1282 :     }
; 1283 : }

	ret	0
??$_Get_unwrapped@ABQAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_TABQAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; std::_Get_unwrapped<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * * const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0PAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Al$dead$ = 12						; size = 4
??$_Uninitialized_move@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0PAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z PROC ; std::_Uninitialized_move<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	eax, DWORD PTR __Dest$[esp-4]

; 1699 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

	push	esi
	mov	esi, edx

; 1700 :     // move [_First, _Last) to raw _Dest, using _Al
; 1701 :     // note: only called internally from elsewhere in the STL
; 1702 :     using _Ptrval     = typename _Alloc::value_type*;
; 1703 :     auto _UFirst      = _Get_unwrapped(_First);
; 1704 :     const auto _ULast = _Get_unwrapped(_Last);
; 1705 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1706 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1707 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1708 :         if (!_STD is_constant_evaluated())
; 1709 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1710 :         {
; 1711 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1712 :             return _Dest + (_ULast - _UFirst);
; 1713 :         }
; 1714 :     }
; 1715 : 
; 1716 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	cmp	ecx, esi
	je	SHORT $LN3@Uninitiali
	npad	5
$LL4@Uninitiali:

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	edx, DWORD PTR [ecx]

; 1621 :         ++_Last;

	add	ecx, 4
	mov	DWORD PTR [eax], edx
	add	eax, 4

; 1700 :     // move [_First, _Last) to raw _Dest, using _Al
; 1701 :     // note: only called internally from elsewhere in the STL
; 1702 :     using _Ptrval     = typename _Alloc::value_type*;
; 1703 :     auto _UFirst      = _Get_unwrapped(_First);
; 1704 :     const auto _ULast = _Get_unwrapped(_Last);
; 1705 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1706 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1707 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1708 :         if (!_STD is_constant_evaluated())
; 1709 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1710 :         {
; 1711 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1712 :             return _Dest + (_ULast - _UFirst);
; 1713 :         }
; 1714 :     }
; 1715 : 
; 1716 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

	cmp	ecx, esi
	jne	SHORT $LL4@Uninitiali
$LN3@Uninitiali:
	pop	esi

; 1718 :         _Backout._Emplace_back(_STD move(*_UFirst));
; 1719 :     }
; 1720 : 
; 1721 :     return _Backout._Release();
; 1722 : }

	ret	0
??$_Uninitialized_move@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0PAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ENDP ; std::_Uninitialized_move<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Get_unwrapped@ABQAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_TABQAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
??$_Get_unwrapped@ABQAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_TABQAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; std::_Get_unwrapped<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * * const &>, COMDAT
; __It$ = ecx

; 1275 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1276 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1277 :         return _It + 0;

	mov	eax, DWORD PTR [ecx]

; 1278 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1279 :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 1280 :     } else {
; 1281 :         return static_cast<_Iter&&>(_It);
; 1282 :     }
; 1283 : }

	ret	0
??$_Get_unwrapped@ABQAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA?A_TABQAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; std::_Get_unwrapped<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * * const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Move_backward_unchecked@PAU_NormalItem@R_dsgraph@@PAU12@@std@@YAPAU_NormalItem@R_dsgraph@@PAU12@00@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
??$_Move_backward_unchecked@PAU_NormalItem@R_dsgraph@@PAU12@@std@@YAPAU_NormalItem@R_dsgraph@@PAU12@00@Z PROC ; std::_Move_backward_unchecked<R_dsgraph::_NormalItem *,R_dsgraph::_NormalItem *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 4255 :     auto _Result                = _CSTD memmove(_Dest_ch - _Count, _First_ch, _Count);

	mov	eax, DWORD PTR __Dest$[esp-4]
	sub	edx, ecx
	push	edx
	push	ecx
	sub	eax, edx
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH

; 4351 :     // move [_First, _Last) backwards to [..., _Dest)
; 4352 :     // note: _Move_backward_unchecked has callers other than the move_backward family
; 4353 :     if constexpr (_Ptr_move_cat<_BidIt1, _BidIt2>::_Trivially_copyable) {
; 4354 : #ifdef __cpp_lib_is_constant_evaluated
; 4355 :         if (!_STD is_constant_evaluated())
; 4356 : #endif // __cpp_lib_is_constant_evaluated
; 4357 :         {
; 4358 :             return _Copy_backward_memmove(_First, _Last, _Dest);
; 4359 :         }
; 4360 :     }
; 4361 : 
; 4362 :     while (_First != _Last) {
; 4363 :         *--_Dest = _STD move(*--_Last);
; 4364 :     }
; 4365 : 
; 4366 :     return _Dest;
; 4367 : }

	ret	0
??$_Move_backward_unchecked@PAU_NormalItem@R_dsgraph@@PAU12@@std@@YAPAU_NormalItem@R_dsgraph@@PAU12@00@Z ENDP ; std::_Move_backward_unchecked<R_dsgraph::_NormalItem *,R_dsgraph::_NormalItem *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Pop_heap_hole_by_index@PAU_NormalItem@R_dsgraph@@U12@P6A_NABU12@0@Z@std@@YAXPAU_NormalItem@R_dsgraph@@HH$$QAU12@P6A_NABU12@2@Z@Z
_TEXT	SEGMENT
__Top$1$ = -8						; size = 4
tv234 = -4						; size = 4
__Bottom$ = 8						; size = 4
__Val$ = 12						; size = 4
__Pred$ = 16						; size = 4
??$_Pop_heap_hole_by_index@PAU_NormalItem@R_dsgraph@@U12@P6A_NABU12@0@Z@std@@YAXPAU_NormalItem@R_dsgraph@@HH$$QAU12@P6A_NABU12@2@Z@Z PROC ; std::_Pop_heap_hole_by_index<R_dsgraph::_NormalItem *,R_dsgraph::_NormalItem,bool (__cdecl*)(R_dsgraph::_NormalItem const &,R_dsgraph::_NormalItem const &)>, COMDAT
; __First$ = ecx
; __Hole$ = edx

; 5375 :     _RanIt _First, _Iter_diff_t<_RanIt> _Hole, _Iter_diff_t<_RanIt> _Bottom, _Ty&& _Val, _Pr _Pred) {

	sub	esp, 8
	push	ebx
	push	ebp
	push	esi
	mov	esi, ecx

; 5376 :     // percolate _Hole to _Bottom, then push _Val
; 5377 :     _STL_INTERNAL_CHECK(_Bottom > 0);
; 5378 : 
; 5379 :     using _Diff      = _Iter_diff_t<_RanIt>;
; 5380 :     const _Diff _Top = _Hole;
; 5381 :     _Diff _Idx       = _Hole;
; 5382 : 
; 5383 :     // Check whether _Idx can have a child before calculating that child's index, since
; 5384 :     // calculating the child's index can trigger integer overflows
; 5385 :     const _Diff _Max_sequence_non_leaf = (_Bottom - 1) >> 1; // shift for codegen

	mov	ecx, DWORD PTR __Bottom$[esp+16]
	push	edi
	mov	edi, edx

; 5386 :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

	mov	edx, DWORD PTR __Pred$[esp+20]
	mov	DWORD PTR __Top$1$[esp+24], edi
	mov	ebx, edi
	lea	eax, DWORD PTR [ecx-1]
	mov	ebp, eax
	mov	DWORD PTR tv234[esp+24], eax
	sar	ebp, 1
	cmp	edi, ebp
	jge	SHORT $LN3@Pop_heap_h
	npad	8
$LL2@Pop_heap_h:

; 5387 :         _Idx = 2 * _Idx + 2;

	lea	ebx, DWORD PTR [ebx*2+2]

; 5388 :         if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1)))) {

	lea	ecx, DWORD PTR [esi+ebx*8]
	lea	eax, DWORD PTR [ecx-8]
	push	eax
	push	ecx
	call	edx
	add	esp, 8
	test	al, al
	je	SHORT $LN4@Pop_heap_h

; 5389 :             --_Idx;

	dec	ebx
$LN4@Pop_heap_h:

; 5390 :         }
; 5391 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [esi+ebx*8]
	mov	ecx, DWORD PTR [esi+ebx*8+4]
	mov	edx, DWORD PTR __Pred$[esp+20]
	mov	DWORD PTR [esi+edi*8], eax
	mov	DWORD PTR [esi+edi*8+4], ecx

; 5392 :         _Hole             = _Idx;

	mov	edi, ebx
	cmp	ebx, ebp
	jl	SHORT $LL2@Pop_heap_h
	mov	ecx, DWORD PTR __Bottom$[esp+20]
$LN3@Pop_heap_h:

; 5393 :     }
; 5394 : 
; 5395 :     if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it

	cmp	ebx, ebp
	jne	SHORT $LN5@Pop_heap_h
	test	cl, 1
	jne	SHORT $LN5@Pop_heap_h

; 5396 :         *(_First + _Hole) = _STD move(*(_First + (_Bottom - 1)));

	mov	eax, DWORD PTR [esi+ecx*8-8]
	mov	ecx, DWORD PTR [esi+ecx*8-4]
	mov	DWORD PTR [esi+edi*8], eax
	mov	DWORD PTR [esi+edi*8+4], ecx

; 5397 :         _Hole             = _Bottom - 1;

	mov	edi, DWORD PTR tv234[esp+24]
$LN5@Pop_heap_h:

; 5268 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

	cmp	DWORD PTR __Top$1$[esp+24], edi
	jge	SHORT $LN20@Pop_heap_h
$LL10@Pop_heap_h:
	push	DWORD PTR __Val$[esp+20]
	lea	ebx, DWORD PTR [edi-1]
	sar	ebx, 1
	lea	ebp, DWORD PTR [esi+ebx*8]
	push	ebp
	call	edx
	add	esp, 8
	test	al, al
	je	SHORT $LN20@Pop_heap_h

; 5269 :          _Idx = (_Hole - 1) >> 1) { // shift for codegen
; 5270 :         // move _Hole up to parent
; 5271 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [ebp]
	mov	ecx, DWORD PTR [ebp+4]
	mov	edx, DWORD PTR __Pred$[esp+20]
	mov	DWORD PTR [esi+edi*8], eax
	mov	DWORD PTR [esi+edi*8+4], ecx

; 5272 :         _Hole             = _Idx;

	mov	edi, ebx
	cmp	DWORD PTR __Top$1$[esp+24], ebx
	jl	SHORT $LL10@Pop_heap_h
$LN20@Pop_heap_h:

; 5273 :     }
; 5274 : 
; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	ecx, DWORD PTR __Val$[esp+20]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [esi+edi*8], eax
	mov	DWORD PTR [esi+edi*8+4], ecx
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 5398 :     }
; 5399 : 
; 5400 :     _Push_heap_by_index(_First, _Hole, _Top, _STD forward<_Ty>(_Val), _Pred);
; 5401 : }

	add	esp, 8
	ret	0
??$_Pop_heap_hole_by_index@PAU_NormalItem@R_dsgraph@@U12@P6A_NABU12@0@Z@std@@YAXPAU_NormalItem@R_dsgraph@@HH$$QAU12@P6A_NABU12@2@Z@Z ENDP ; std::_Pop_heap_hole_by_index<R_dsgraph::_NormalItem *,R_dsgraph::_NormalItem,bool (__cdecl*)(R_dsgraph::_NormalItem const &,R_dsgraph::_NormalItem const &)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Pop_heap_unchecked@PAU_NormalItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_NormalItem@R_dsgraph@@0P6A_NABU12@1@Z@Z
_TEXT	SEGMENT
__Val$1 = -8						; size = 8
__Pred$ = 8						; size = 4
??$_Pop_heap_unchecked@PAU_NormalItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_NormalItem@R_dsgraph@@0P6A_NABU12@1@Z@Z PROC ; std::_Pop_heap_unchecked<R_dsgraph::_NormalItem *,bool (__cdecl*)(R_dsgraph::_NormalItem const &,R_dsgraph::_NormalItem const &)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 5415 : _CONSTEXPR20 void _Pop_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

	sub	esp, 12					; 0000000cH

; 5416 :     // pop *_First to *(_Last - 1) and reheap
; 5417 :     if (2 <= _Last - _First) {

	mov	eax, edx
	push	esi
	mov	esi, ecx
	sub	eax, esi
	and	eax, -8					; fffffff8H
	cmp	eax, 16					; 00000010H
	jl	SHORT $LN2@Pop_heap_u

; 5418 :         --_Last;
; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	eax, DWORD PTR [edx-8]
	sub	edx, 8

; 5410 :     _Pop_heap_hole_by_index(

	push	DWORD PTR __Pred$[esp+12]

; 5418 :         --_Last;
; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	DWORD PTR __Val$1[esp+20], eax

; 5408 :     *_Dest      = _STD move(*_First);

	mov	eax, DWORD PTR [esi]

; 5418 :         --_Last;
; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR __Val$1[esp+24], ecx

; 5408 :     *_Dest      = _STD move(*_First);

	mov	ecx, DWORD PTR [esi+4]
	mov	DWORD PTR [edx], eax

; 5409 :     using _Diff = _Iter_diff_t<_RanIt>;
; 5410 :     _Pop_heap_hole_by_index(

	lea	eax, DWORD PTR __Val$1[esp+20]
	mov	DWORD PTR [edx+4], ecx
	sub	edx, esi
	sar	edx, 3
	mov	ecx, esi
	push	eax
	push	edx
	xor	edx, edx
	call	??$_Pop_heap_hole_by_index@PAU_NormalItem@R_dsgraph@@U12@P6A_NABU12@0@Z@std@@YAXPAU_NormalItem@R_dsgraph@@HH$$QAU12@P6A_NABU12@2@Z@Z ; std::_Pop_heap_hole_by_index<R_dsgraph::_NormalItem *,R_dsgraph::_NormalItem,bool (__cdecl*)(R_dsgraph::_NormalItem const &,R_dsgraph::_NormalItem const &)>
	add	esp, 12					; 0000000cH
$LN2@Pop_heap_u:

; 5420 :         _Pop_heap_hole_unchecked(_First, _Last, _Last, _STD move(_Val), _Pred);
; 5421 :     }
; 5422 : }

	pop	esi
	add	esp, 12					; 0000000cH
	ret	0
??$_Pop_heap_unchecked@PAU_NormalItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_NormalItem@R_dsgraph@@0P6A_NABU12@1@Z@Z ENDP ; std::_Pop_heap_unchecked<R_dsgraph::_NormalItem *,bool (__cdecl*)(R_dsgraph::_NormalItem const &,R_dsgraph::_NormalItem const &)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Prev_iter@PAU_NormalItem@R_dsgraph@@@std@@YAPAU_NormalItem@R_dsgraph@@PAU12@@Z
_TEXT	SEGMENT
??$_Prev_iter@PAU_NormalItem@R_dsgraph@@@std@@YAPAU_NormalItem@R_dsgraph@@PAU12@@Z PROC ; std::_Prev_iter<R_dsgraph::_NormalItem *>, COMDAT
; __First$ = ecx

; 1554 :     return --_First;

	lea	eax, DWORD PTR [ecx-8]

; 1555 : }

	ret	0
??$_Prev_iter@PAU_NormalItem@R_dsgraph@@@std@@YAPAU_NormalItem@R_dsgraph@@PAU12@@Z ENDP ; std::_Prev_iter<R_dsgraph::_NormalItem *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Guess_median_unchecked@PAU_NormalItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_NormalItem@R_dsgraph@@00P6A_NABU12@1@Z@Z
_TEXT	SEGMENT
__Mid$1$ = -4						; size = 4
$T1 = 8							; size = 4
__Last$ = 8						; size = 4
__Pred$ = 12						; size = 4
??$_Guess_median_unchecked@PAU_NormalItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_NormalItem@R_dsgraph@@00P6A_NABU12@1@Z@Z PROC ; std::_Guess_median_unchecked<R_dsgraph::_NormalItem *,bool (__cdecl*)(R_dsgraph::_NormalItem const &,R_dsgraph::_NormalItem const &)>, COMDAT
; __First$ = ecx
; __Mid$ = edx

; 6959 : _CONSTEXPR20 void _Guess_median_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred) {

	push	ecx
	push	ebx

; 6960 :     // sort median element to middle
; 6961 :     using _Diff        = _Iter_diff_t<_RanIt>;
; 6962 :     const _Diff _Count = _Last - _First;

	mov	ebx, DWORD PTR __Last$[esp+4]
	mov	eax, ebx
	push	ebp
	sub	eax, ecx
	mov	ebp, edx

; 6963 :     if (40 < _Count) { // Tukey's ninther

	mov	edx, DWORD PTR __Pred$[esp+8]
	sar	eax, 3
	mov	DWORD PTR __Mid$1$[esp+12], ebp
	push	esi
	push	edi
	cmp	eax, 40					; 00000028H
	jle	SHORT $LN2@Guess_medi

; 6964 :         const _Diff _Step     = (_Count + 1) >> 3; // +1 can't overflow because range was made inclusive in caller

	inc	eax
	sar	eax, 3

; 6965 :         const _Diff _Two_step = _Step << 1; // note: intentionally discards low-order bit
; 6966 :         _Med3_unchecked(_First, _First + _Step, _First + _Two_step, _Pred);

	mov	edi, eax
	shl	edi, 4
	push	edx
	lea	esi, DWORD PTR [eax*8]
	lea	eax, DWORD PTR [esi+ecx]
	mov	DWORD PTR $T1[esp+20], eax
	lea	edx, DWORD PTR [esi+ecx]
	lea	eax, DWORD PTR [edi+ecx]
	push	eax
	call	??$_Med3_unchecked@PAU_NormalItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_NormalItem@R_dsgraph@@00P6A_NABU12@1@Z@Z ; std::_Med3_unchecked<R_dsgraph::_NormalItem *,bool (__cdecl*)(R_dsgraph::_NormalItem const &,R_dsgraph::_NormalItem const &)>

; 6967 :         _Med3_unchecked(_Mid - _Step, _Mid, _Mid + _Step, _Pred);

	push	DWORD PTR __Pred$[esp+24]
	lea	eax, DWORD PTR [esi+ebp]
	mov	ecx, ebp
	push	eax
	sub	ecx, esi
	mov	edx, ebp
	call	??$_Med3_unchecked@PAU_NormalItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_NormalItem@R_dsgraph@@00P6A_NABU12@1@Z@Z ; std::_Med3_unchecked<R_dsgraph::_NormalItem *,bool (__cdecl*)(R_dsgraph::_NormalItem const &,R_dsgraph::_NormalItem const &)>

; 6968 :         _Med3_unchecked(_Last - _Two_step, _Last - _Step, _Last, _Pred);

	push	DWORD PTR __Pred$[esp+32]
	mov	ebp, ebx
	push	ebx
	sub	ebp, esi
	sub	ebx, edi
	mov	edx, ebp
	mov	ecx, ebx
	call	??$_Med3_unchecked@PAU_NormalItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_NormalItem@R_dsgraph@@00P6A_NABU12@1@Z@Z ; std::_Med3_unchecked<R_dsgraph::_NormalItem *,bool (__cdecl*)(R_dsgraph::_NormalItem const &,R_dsgraph::_NormalItem const &)>

; 6969 :         _Med3_unchecked(_First + _Step, _Mid, _Last - _Step, _Pred);
; 6970 :     } else {

	mov	edx, DWORD PTR __Pred$[esp+40]
	add	esp, 24					; 00000018H
	mov	eax, DWORD PTR $T1[esp+16]
	jmp	SHORT $LN3@Guess_medi
$LN2@Guess_medi:

; 6971 :         _Med3_unchecked(_First, _Mid, _Last, _Pred);

	mov	eax, ecx
	mov	ebp, ebx
$LN3@Guess_medi:

; 6972 :     }
; 6973 : }

	push	edx
	mov	edx, DWORD PTR __Mid$1$[esp+24]
	mov	ecx, eax
	push	ebp
	call	??$_Med3_unchecked@PAU_NormalItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_NormalItem@R_dsgraph@@00P6A_NABU12@1@Z@Z ; std::_Med3_unchecked<R_dsgraph::_NormalItem *,bool (__cdecl*)(R_dsgraph::_NormalItem const &,R_dsgraph::_NormalItem const &)>
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	pop	ecx
	ret	0
??$_Guess_median_unchecked@PAU_NormalItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_NormalItem@R_dsgraph@@00P6A_NABU12@1@Z@Z ENDP ; std::_Guess_median_unchecked<R_dsgraph::_NormalItem *,bool (__cdecl*)(R_dsgraph::_NormalItem const &,R_dsgraph::_NormalItem const &)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Next_iter@PAU_NormalItem@R_dsgraph@@@std@@YAPAU_NormalItem@R_dsgraph@@PAU12@@Z
_TEXT	SEGMENT
??$_Next_iter@PAU_NormalItem@R_dsgraph@@@std@@YAPAU_NormalItem@R_dsgraph@@PAU12@@Z PROC ; std::_Next_iter<R_dsgraph::_NormalItem *>, COMDAT
; __First$ = ecx

; 1541 :     return ++_First;

	lea	eax, DWORD PTR [ecx+8]

; 1542 : }

	ret	0
??$_Next_iter@PAU_NormalItem@R_dsgraph@@@std@@YAPAU_NormalItem@R_dsgraph@@PAU12@@Z ENDP ; std::_Next_iter<R_dsgraph::_NormalItem *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$iter_swap@PAU_NormalItem@R_dsgraph@@PAU12@@std@@YAXPAU_NormalItem@R_dsgraph@@0@Z
_TEXT	SEGMENT
??$iter_swap@PAU_NormalItem@R_dsgraph@@PAU12@@std@@YAXPAU_NormalItem@R_dsgraph@@0@Z PROC ; std::iter_swap<R_dsgraph::_NormalItem *,R_dsgraph::_NormalItem *>, COMDAT
; __Left$ = ecx
; __Right$ = edx

; 77   : _CONSTEXPR20 void iter_swap(_FwdIt1 _Left, _FwdIt2 _Right) { // swap *_Left and *_Right

	push	ebx
	mov	ebx, edx

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	edx, DWORD PTR [ecx+4]

; 77   : _CONSTEXPR20 void iter_swap(_FwdIt1 _Left, _FwdIt2 _Right) { // swap *_Left and *_Right

	push	esi
	push	edi

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	edi, DWORD PTR [ecx]

; 101  :     _Left    = _STD move(_Right);

	mov	esi, DWORD PTR [ebx+4]
	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR [ecx+4], esi
	mov	DWORD PTR [ecx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebx], edi

; 78   :     swap(*_Left, *_Right);
; 79   : }

	pop	edi
	pop	esi

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebx+4], edx

; 78   :     swap(*_Left, *_Right);
; 79   : }

	pop	ebx
	ret	0
??$iter_swap@PAU_NormalItem@R_dsgraph@@PAU12@@std@@YAXPAU_NormalItem@R_dsgraph@@0@Z ENDP ; std::iter_swap<R_dsgraph::_NormalItem *,R_dsgraph::_NormalItem *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$?0AAPAU_NormalItem@R_dsgraph@@AAPAU01@$0A@@?$pair@PAU_NormalItem@R_dsgraph@@PAU12@@std@@QAE@AAPAU_NormalItem@R_dsgraph@@0@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAPAU_NormalItem@R_dsgraph@@AAPAU01@$0A@@?$pair@PAU_NormalItem@R_dsgraph@@PAU12@@std@@QAE@AAPAU_NormalItem@R_dsgraph@@0@Z PROC ; std::pair<R_dsgraph::_NormalItem *,R_dsgraph::_NormalItem *>::pair<R_dsgraph::_NormalItem *,R_dsgraph::_NormalItem *><R_dsgraph::_NormalItem * &,R_dsgraph::_NormalItem * &,0>, COMDAT
; _this$ = ecx

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	eax, DWORD PTR __Val1$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR __Val2$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	ret	8
??$?0AAPAU_NormalItem@R_dsgraph@@AAPAU01@$0A@@?$pair@PAU_NormalItem@R_dsgraph@@PAU12@@std@@QAE@AAPAU_NormalItem@R_dsgraph@@0@Z ENDP ; std::pair<R_dsgraph::_NormalItem *,R_dsgraph::_NormalItem *>::pair<R_dsgraph::_NormalItem *,R_dsgraph::_NormalItem *><R_dsgraph::_NormalItem * &,R_dsgraph::_NormalItem * &,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Move_backward_unchecked@PAU_MatrixItem@R_dsgraph@@PAU12@@std@@YAPAU_MatrixItem@R_dsgraph@@PAU12@00@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
??$_Move_backward_unchecked@PAU_MatrixItem@R_dsgraph@@PAU12@@std@@YAPAU_MatrixItem@R_dsgraph@@PAU12@00@Z PROC ; std::_Move_backward_unchecked<R_dsgraph::_MatrixItem *,R_dsgraph::_MatrixItem *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 4255 :     auto _Result                = _CSTD memmove(_Dest_ch - _Count, _First_ch, _Count);

	mov	eax, DWORD PTR __Dest$[esp-4]
	sub	edx, ecx
	push	edx
	push	ecx
	sub	eax, edx
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH

; 4351 :     // move [_First, _Last) backwards to [..., _Dest)
; 4352 :     // note: _Move_backward_unchecked has callers other than the move_backward family
; 4353 :     if constexpr (_Ptr_move_cat<_BidIt1, _BidIt2>::_Trivially_copyable) {
; 4354 : #ifdef __cpp_lib_is_constant_evaluated
; 4355 :         if (!_STD is_constant_evaluated())
; 4356 : #endif // __cpp_lib_is_constant_evaluated
; 4357 :         {
; 4358 :             return _Copy_backward_memmove(_First, _Last, _Dest);
; 4359 :         }
; 4360 :     }
; 4361 : 
; 4362 :     while (_First != _Last) {
; 4363 :         *--_Dest = _STD move(*--_Last);
; 4364 :     }
; 4365 : 
; 4366 :     return _Dest;
; 4367 : }

	ret	0
??$_Move_backward_unchecked@PAU_MatrixItem@R_dsgraph@@PAU12@@std@@YAPAU_MatrixItem@R_dsgraph@@PAU12@00@Z ENDP ; std::_Move_backward_unchecked<R_dsgraph::_MatrixItem *,R_dsgraph::_MatrixItem *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Pop_heap_hole_by_index@PAU_MatrixItem@R_dsgraph@@U12@P6A_NABU12@0@Z@std@@YAXPAU_MatrixItem@R_dsgraph@@HH$$QAU12@P6A_NABU12@2@Z@Z
_TEXT	SEGMENT
__Top$1$ = -12						; size = 4
__Max_sequence_non_leaf$1$ = -8				; size = 4
tv257 = -4						; size = 4
__Bottom$ = 8						; size = 4
__Val$ = 12						; size = 4
__Pred$ = 16						; size = 4
??$_Pop_heap_hole_by_index@PAU_MatrixItem@R_dsgraph@@U12@P6A_NABU12@0@Z@std@@YAXPAU_MatrixItem@R_dsgraph@@HH$$QAU12@P6A_NABU12@2@Z@Z PROC ; std::_Pop_heap_hole_by_index<R_dsgraph::_MatrixItem *,R_dsgraph::_MatrixItem,bool (__cdecl*)(R_dsgraph::_MatrixItem const &,R_dsgraph::_MatrixItem const &)>, COMDAT
; __First$ = ecx
; __Hole$ = edx

; 5375 :     _RanIt _First, _Iter_diff_t<_RanIt> _Hole, _Iter_diff_t<_RanIt> _Bottom, _Ty&& _Val, _Pr _Pred) {

	sub	esp, 12					; 0000000cH
	push	ebx
	push	ebp
	mov	ebp, ecx

; 5376 :     // percolate _Hole to _Bottom, then push _Val
; 5377 :     _STL_INTERNAL_CHECK(_Bottom > 0);
; 5378 : 
; 5379 :     using _Diff      = _Iter_diff_t<_RanIt>;
; 5380 :     const _Diff _Top = _Hole;
; 5381 :     _Diff _Idx       = _Hole;
; 5382 : 
; 5383 :     // Check whether _Idx can have a child before calculating that child's index, since
; 5384 :     // calculating the child's index can trigger integer overflows
; 5385 :     const _Diff _Max_sequence_non_leaf = (_Bottom - 1) >> 1; // shift for codegen

	mov	ecx, DWORD PTR __Bottom$[esp+16]
	push	esi
	push	edi
	mov	edi, edx

; 5386 :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

	mov	edx, DWORD PTR __Pred$[esp+24]
	lea	eax, DWORD PTR [ecx-1]
	mov	DWORD PTR __Top$1$[esp+28], edi
	mov	DWORD PTR tv257[esp+28], eax
	mov	ebx, edi
	sar	eax, 1
	mov	DWORD PTR __Max_sequence_non_leaf$1$[esp+28], eax
	cmp	edi, eax
	jge	SHORT $LN3@Pop_heap_h
	npad	6
$LL2@Pop_heap_h:

; 5387 :         _Idx = 2 * _Idx + 2;

	lea	ebx, DWORD PTR [ebx*2+2]

; 5388 :         if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1)))) {

	imul	ecx, ebx, 76
	add	ecx, ebp
	lea	eax, DWORD PTR [ecx-76]
	push	eax
	push	ecx
	call	edx
	add	esp, 8
	test	al, al
	je	SHORT $LN4@Pop_heap_h

; 5389 :             --_Idx;

	dec	ebx
$LN4@Pop_heap_h:

; 5386 :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

	mov	eax, DWORD PTR __Max_sequence_non_leaf$1$[esp+28]

; 5390 :         }
; 5391 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	ecx, 19					; 00000013H
	mov	edx, DWORD PTR __Pred$[esp+24]
	imul	edi, edi, 76
	imul	esi, ebx, 76
	add	edi, ebp
	add	esi, ebp
	rep movsd

; 5392 :         _Hole             = _Idx;

	mov	edi, ebx
	cmp	ebx, eax
	jl	SHORT $LL2@Pop_heap_h
	mov	ecx, DWORD PTR __Bottom$[esp+24]
$LN3@Pop_heap_h:

; 5393 :     }
; 5394 : 
; 5395 :     if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it

	cmp	ebx, eax
	jne	SHORT $LN5@Pop_heap_h
	test	cl, 1
	jne	SHORT $LN5@Pop_heap_h

; 5396 :         *(_First + _Hole) = _STD move(*(_First + (_Bottom - 1)));

	imul	eax, ecx, 76
	lea	esi, DWORD PTR [ebp-76]
	imul	edi, edi, 76
	mov	ecx, 19					; 00000013H
	add	esi, eax
	add	edi, ebp
	rep movsd

; 5397 :         _Hole             = _Bottom - 1;

	mov	edi, DWORD PTR tv257[esp+28]
$LN5@Pop_heap_h:

; 5268 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

	cmp	DWORD PTR __Top$1$[esp+28], edi
	jge	SHORT $LN20@Pop_heap_h
$LL10@Pop_heap_h:
	push	DWORD PTR __Val$[esp+24]
	lea	ebx, DWORD PTR [edi-1]
	sar	ebx, 1
	imul	esi, ebx, 76
	add	esi, ebp
	push	esi
	call	edx
	add	esp, 8
	test	al, al
	je	SHORT $LN20@Pop_heap_h
	mov	edx, DWORD PTR __Pred$[esp+24]

; 5269 :          _Idx = (_Hole - 1) >> 1) { // shift for codegen
; 5270 :         // move _Hole up to parent
; 5271 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	ecx, 19					; 00000013H
	imul	edi, edi, 76
	add	edi, ebp
	rep movsd

; 5272 :         _Hole             = _Idx;

	mov	edi, ebx
	cmp	DWORD PTR __Top$1$[esp+28], ebx
	jl	SHORT $LL10@Pop_heap_h
$LN20@Pop_heap_h:

; 5273 :     }
; 5274 : 
; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	esi, DWORD PTR __Val$[esp+24]
	mov	ecx, 19					; 00000013H
	imul	edi, edi, 76
	add	edi, ebp
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 5398 :     }
; 5399 : 
; 5400 :     _Push_heap_by_index(_First, _Hole, _Top, _STD forward<_Ty>(_Val), _Pred);
; 5401 : }

	add	esp, 12					; 0000000cH
	ret	0
??$_Pop_heap_hole_by_index@PAU_MatrixItem@R_dsgraph@@U12@P6A_NABU12@0@Z@std@@YAXPAU_MatrixItem@R_dsgraph@@HH$$QAU12@P6A_NABU12@2@Z@Z ENDP ; std::_Pop_heap_hole_by_index<R_dsgraph::_MatrixItem *,R_dsgraph::_MatrixItem,bool (__cdecl*)(R_dsgraph::_MatrixItem const &,R_dsgraph::_MatrixItem const &)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Pop_heap_unchecked@PAU_MatrixItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_MatrixItem@R_dsgraph@@0P6A_NABU12@1@Z@Z
_TEXT	SEGMENT
__Val$1 = -76						; size = 76
__Pred$ = 8						; size = 4
??$_Pop_heap_unchecked@PAU_MatrixItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_MatrixItem@R_dsgraph@@0P6A_NABU12@1@Z@Z PROC ; std::_Pop_heap_unchecked<R_dsgraph::_MatrixItem *,bool (__cdecl*)(R_dsgraph::_MatrixItem const &,R_dsgraph::_MatrixItem const &)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 5415 : _CONSTEXPR20 void _Pop_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

	sub	esp, 76					; 0000004cH

; 5416 :     // pop *_First to *(_Last - 1) and reheap
; 5417 :     if (2 <= _Last - _First) {

	mov	eax, edx
	push	ebx
	mov	ebx, ecx
	sub	eax, ebx
	sar	eax, 2
	imul	eax, eax, 678152731
	cmp	eax, 2
	jl	SHORT $LN2@Pop_heap_u

; 5418 :         --_Last;

	push	esi
	push	edi

; 5410 :     _Pop_heap_hole_by_index(

	push	DWORD PTR __Pred$[esp+84]

; 5418 :         --_Last;

	sub	edx, 76					; 0000004cH

; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	lea	edi, DWORD PTR __Val$1[esp+92]
	mov	esi, edx

; 5410 :     _Pop_heap_hole_by_index(

	lea	eax, DWORD PTR __Val$1[esp+92]

; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	ecx, 19					; 00000013H
	rep movsd

; 5408 :     *_Dest      = _STD move(*_First);

	mov	edi, edx
	mov	ecx, 19					; 00000013H

; 5409 :     using _Diff = _Iter_diff_t<_RanIt>;
; 5410 :     _Pop_heap_hole_by_index(

	sub	edx, ebx
	mov	esi, ebx
	sar	edx, 2
	push	eax
	imul	eax, edx, 678152731
	xor	edx, edx
	rep movsd
	push	eax
	mov	ecx, ebx
	call	??$_Pop_heap_hole_by_index@PAU_MatrixItem@R_dsgraph@@U12@P6A_NABU12@0@Z@std@@YAXPAU_MatrixItem@R_dsgraph@@HH$$QAU12@P6A_NABU12@2@Z@Z ; std::_Pop_heap_hole_by_index<R_dsgraph::_MatrixItem *,R_dsgraph::_MatrixItem,bool (__cdecl*)(R_dsgraph::_MatrixItem const &,R_dsgraph::_MatrixItem const &)>
	add	esp, 12					; 0000000cH
	pop	edi
	pop	esi
$LN2@Pop_heap_u:
	pop	ebx

; 5420 :         _Pop_heap_hole_unchecked(_First, _Last, _Last, _STD move(_Val), _Pred);
; 5421 :     }
; 5422 : }

	add	esp, 76					; 0000004cH
	ret	0
??$_Pop_heap_unchecked@PAU_MatrixItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_MatrixItem@R_dsgraph@@0P6A_NABU12@1@Z@Z ENDP ; std::_Pop_heap_unchecked<R_dsgraph::_MatrixItem *,bool (__cdecl*)(R_dsgraph::_MatrixItem const &,R_dsgraph::_MatrixItem const &)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Prev_iter@PAU_MatrixItem@R_dsgraph@@@std@@YAPAU_MatrixItem@R_dsgraph@@PAU12@@Z
_TEXT	SEGMENT
??$_Prev_iter@PAU_MatrixItem@R_dsgraph@@@std@@YAPAU_MatrixItem@R_dsgraph@@PAU12@@Z PROC ; std::_Prev_iter<R_dsgraph::_MatrixItem *>, COMDAT
; __First$ = ecx

; 1554 :     return --_First;

	lea	eax, DWORD PTR [ecx-76]

; 1555 : }

	ret	0
??$_Prev_iter@PAU_MatrixItem@R_dsgraph@@@std@@YAPAU_MatrixItem@R_dsgraph@@PAU12@@Z ENDP ; std::_Prev_iter<R_dsgraph::_MatrixItem *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Guess_median_unchecked@PAU_MatrixItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_MatrixItem@R_dsgraph@@00P6A_NABU12@1@Z@Z
_TEXT	SEGMENT
__Mid$1$ = -4						; size = 4
$T1 = 8							; size = 4
__Last$ = 8						; size = 4
__Pred$ = 12						; size = 4
??$_Guess_median_unchecked@PAU_MatrixItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_MatrixItem@R_dsgraph@@00P6A_NABU12@1@Z@Z PROC ; std::_Guess_median_unchecked<R_dsgraph::_MatrixItem *,bool (__cdecl*)(R_dsgraph::_MatrixItem const &,R_dsgraph::_MatrixItem const &)>, COMDAT
; __First$ = ecx
; __Mid$ = edx

; 6959 : _CONSTEXPR20 void _Guess_median_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred) {

	push	ecx
	push	ebx

; 6960 :     // sort median element to middle
; 6961 :     using _Diff        = _Iter_diff_t<_RanIt>;
; 6962 :     const _Diff _Count = _Last - _First;

	mov	ebx, DWORD PTR __Last$[esp+4]
	mov	eax, ebx
	sub	eax, ecx
	sar	eax, 2
	imul	eax, eax, 678152731
	push	ebp
	mov	ebp, edx
	mov	DWORD PTR __Mid$1$[esp+12], ebp

; 6963 :     if (40 < _Count) { // Tukey's ninther

	cmp	eax, 40					; 00000028H
	jle	SHORT $LN2@Guess_medi

; 6964 :         const _Diff _Step     = (_Count + 1) >> 3; // +1 can't overflow because range was made inclusive in caller

	push	esi
	inc	eax
	sar	eax, 3
	push	edi

; 6965 :         const _Diff _Two_step = _Step << 1; // note: intentionally discards low-order bit
; 6966 :         _Med3_unchecked(_First, _First + _Step, _First + _Two_step, _Pred);

	push	DWORD PTR __Pred$[esp+16]
	imul	edi, eax, 152
	imul	esi, eax, 76
	lea	eax, DWORD PTR [edi+ecx]
	lea	edx, DWORD PTR [esi+ecx]
	push	eax
	mov	DWORD PTR $T1[esp+24], edx
	call	??$_Med3_unchecked@PAU_MatrixItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_MatrixItem@R_dsgraph@@00P6A_NABU12@1@Z@Z ; std::_Med3_unchecked<R_dsgraph::_MatrixItem *,bool (__cdecl*)(R_dsgraph::_MatrixItem const &,R_dsgraph::_MatrixItem const &)>

; 6967 :         _Med3_unchecked(_Mid - _Step, _Mid, _Mid + _Step, _Pred);

	push	DWORD PTR __Pred$[esp+24]
	lea	eax, DWORD PTR [esi+ebp]
	mov	ecx, ebp
	push	eax
	sub	ecx, esi
	mov	edx, ebp
	call	??$_Med3_unchecked@PAU_MatrixItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_MatrixItem@R_dsgraph@@00P6A_NABU12@1@Z@Z ; std::_Med3_unchecked<R_dsgraph::_MatrixItem *,bool (__cdecl*)(R_dsgraph::_MatrixItem const &,R_dsgraph::_MatrixItem const &)>

; 6968 :         _Med3_unchecked(_Last - _Two_step, _Last - _Step, _Last, _Pred);

	push	DWORD PTR __Pred$[esp+32]
	mov	ebp, ebx
	push	ebx
	sub	ebp, esi
	sub	ebx, edi
	mov	edx, ebp
	mov	ecx, ebx
	call	??$_Med3_unchecked@PAU_MatrixItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_MatrixItem@R_dsgraph@@00P6A_NABU12@1@Z@Z ; std::_Med3_unchecked<R_dsgraph::_MatrixItem *,bool (__cdecl*)(R_dsgraph::_MatrixItem const &,R_dsgraph::_MatrixItem const &)>

; 6969 :         _Med3_unchecked(_First + _Step, _Mid, _Last - _Step, _Pred);
; 6970 :     } else {

	mov	ecx, DWORD PTR $T1[esp+40]
	add	esp, 24					; 00000018H

; 6971 :         _Med3_unchecked(_First, _Mid, _Last, _Pred);
; 6972 :     }
; 6973 : }

	mov	edx, DWORD PTR __Mid$1$[esp+20]
	pop	edi
	pop	esi
	push	DWORD PTR __Pred$[esp+8]
	push	ebp
	call	??$_Med3_unchecked@PAU_MatrixItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_MatrixItem@R_dsgraph@@00P6A_NABU12@1@Z@Z ; std::_Med3_unchecked<R_dsgraph::_MatrixItem *,bool (__cdecl*)(R_dsgraph::_MatrixItem const &,R_dsgraph::_MatrixItem const &)>
	add	esp, 8
	pop	ebp
	pop	ebx
	pop	ecx
	ret	0
$LN2@Guess_medi:
	push	DWORD PTR __Pred$[esp+8]
	mov	edx, DWORD PTR __Mid$1$[esp+16]
	mov	ebp, ebx
	push	ebp
	call	??$_Med3_unchecked@PAU_MatrixItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_MatrixItem@R_dsgraph@@00P6A_NABU12@1@Z@Z ; std::_Med3_unchecked<R_dsgraph::_MatrixItem *,bool (__cdecl*)(R_dsgraph::_MatrixItem const &,R_dsgraph::_MatrixItem const &)>
	add	esp, 8
	pop	ebp
	pop	ebx
	pop	ecx
	ret	0
??$_Guess_median_unchecked@PAU_MatrixItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_MatrixItem@R_dsgraph@@00P6A_NABU12@1@Z@Z ENDP ; std::_Guess_median_unchecked<R_dsgraph::_MatrixItem *,bool (__cdecl*)(R_dsgraph::_MatrixItem const &,R_dsgraph::_MatrixItem const &)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Next_iter@PAU_MatrixItem@R_dsgraph@@@std@@YAPAU_MatrixItem@R_dsgraph@@PAU12@@Z
_TEXT	SEGMENT
??$_Next_iter@PAU_MatrixItem@R_dsgraph@@@std@@YAPAU_MatrixItem@R_dsgraph@@PAU12@@Z PROC ; std::_Next_iter<R_dsgraph::_MatrixItem *>, COMDAT
; __First$ = ecx

; 1541 :     return ++_First;

	lea	eax, DWORD PTR [ecx+76]

; 1542 : }

	ret	0
??$_Next_iter@PAU_MatrixItem@R_dsgraph@@@std@@YAPAU_MatrixItem@R_dsgraph@@PAU12@@Z ENDP ; std::_Next_iter<R_dsgraph::_MatrixItem *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$iter_swap@PAU_MatrixItem@R_dsgraph@@PAU12@@std@@YAXPAU_MatrixItem@R_dsgraph@@0@Z
_TEXT	SEGMENT
__Tmp$1 = -76						; size = 76
??$iter_swap@PAU_MatrixItem@R_dsgraph@@PAU12@@std@@YAXPAU_MatrixItem@R_dsgraph@@0@Z PROC ; std::iter_swap<R_dsgraph::_MatrixItem *,R_dsgraph::_MatrixItem *>, COMDAT
; __Left$ = ecx
; __Right$ = edx

; 77   : _CONSTEXPR20 void iter_swap(_FwdIt1 _Left, _FwdIt2 _Right) { // swap *_Left and *_Right

	sub	esp, 76					; 0000004cH
	mov	eax, ecx

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, 19					; 00000013H

; 77   : _CONSTEXPR20 void iter_swap(_FwdIt1 _Left, _FwdIt2 _Right) { // swap *_Left and *_Right

	push	esi
	push	edi

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	esi, eax
	lea	edi, DWORD PTR __Tmp$1[esp+84]
	rep movsd

; 101  :     _Left    = _STD move(_Right);

	mov	ecx, 19					; 00000013H
	mov	esi, edx
	mov	edi, eax
	rep movsd

; 102  :     _Right   = _STD move(_Tmp);

	mov	ecx, 19					; 00000013H
	lea	esi, DWORD PTR __Tmp$1[esp+84]
	mov	edi, edx
	rep movsd
	pop	edi
	pop	esi

; 78   :     swap(*_Left, *_Right);
; 79   : }

	add	esp, 76					; 0000004cH
	ret	0
??$iter_swap@PAU_MatrixItem@R_dsgraph@@PAU12@@std@@YAXPAU_MatrixItem@R_dsgraph@@0@Z ENDP ; std::iter_swap<R_dsgraph::_MatrixItem *,R_dsgraph::_MatrixItem *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$?0AAPAU_MatrixItem@R_dsgraph@@AAPAU01@$0A@@?$pair@PAU_MatrixItem@R_dsgraph@@PAU12@@std@@QAE@AAPAU_MatrixItem@R_dsgraph@@0@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAPAU_MatrixItem@R_dsgraph@@AAPAU01@$0A@@?$pair@PAU_MatrixItem@R_dsgraph@@PAU12@@std@@QAE@AAPAU_MatrixItem@R_dsgraph@@0@Z PROC ; std::pair<R_dsgraph::_MatrixItem *,R_dsgraph::_MatrixItem *>::pair<R_dsgraph::_MatrixItem *,R_dsgraph::_MatrixItem *><R_dsgraph::_MatrixItem * &,R_dsgraph::_MatrixItem * &,0>, COMDAT
; _this$ = ecx

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	eax, DWORD PTR __Val1$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR __Val2$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	ret	8
??$?0AAPAU_MatrixItem@R_dsgraph@@AAPAU01@$0A@@?$pair@PAU_MatrixItem@R_dsgraph@@PAU12@@std@@QAE@AAPAU_MatrixItem@R_dsgraph@@0@Z ENDP ; std::pair<R_dsgraph::_MatrixItem *,R_dsgraph::_MatrixItem *>::pair<R_dsgraph::_MatrixItem *,R_dsgraph::_MatrixItem *><R_dsgraph::_MatrixItem * &,R_dsgraph::_MatrixItem * &,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$?RAAU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@AAU01@@?$less@X@std@@QBE_NAAU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@1@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?RAAU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@AAU01@@?$less@X@std@@QBE_NAAU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@1@0@Z PROC ; std::less<void>::operator()<std::pair<unsigned int,resptr_core<CTexture,resptrcode_texture> > &,std::pair<unsigned int,resptr_core<CTexture,resptrcode_texture> > &>, COMDAT
; _this$dead$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 362  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

	mov	eax, DWORD PTR __Left$[esp-4]
	mov	ecx, DWORD PTR __Right$[esp-4]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jb	SHORT $LN6@operator
	ja	SHORT $LN5@operator
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

	mov	eax, DWORD PTR [eax+4]
	cmp	eax, DWORD PTR [ecx+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 362  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

	jb	SHORT $LN6@operator
$LN5@operator:
	xor	al, al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef

; 222  :     }

	ret	8
$LN6@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 362  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

	mov	al, 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef

; 222  :     }

	ret	8
??$?RAAU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@std@@AAU01@@?$less@X@std@@QBE_NAAU?$pair@IV?$resptr_core@VCTexture@@Uresptrcode_texture@@@@@1@0@Z ENDP ; std::less<void>::operator()<std::pair<unsigned int,resptr_core<CTexture,resptrcode_texture> > &,std::pair<unsigned int,resptr_core<CTexture,resptrcode_texture> > &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z
_TEXT	SEGMENT
__Top$1$ = -8						; size = 4
tv234 = -4						; size = 4
__Bottom$ = 8						; size = 4
__Val$ = 12						; size = 4
__Pred$ = 16						; size = 4
??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z PROC ; std::_Pop_heap_hole_by_index<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Hole$ = edx

; 5375 :     _RanIt _First, _Iter_diff_t<_RanIt> _Hole, _Iter_diff_t<_RanIt> _Bottom, _Ty&& _Val, _Pr _Pred) {

	sub	esp, 8

; 5376 :     // percolate _Hole to _Bottom, then push _Val
; 5377 :     _STL_INTERNAL_CHECK(_Bottom > 0);
; 5378 : 
; 5379 :     using _Diff      = _Iter_diff_t<_RanIt>;
; 5380 :     const _Diff _Top = _Hole;
; 5381 :     _Diff _Idx       = _Hole;
; 5382 : 
; 5383 :     // Check whether _Idx can have a child before calculating that child's index, since
; 5384 :     // calculating the child's index can trigger integer overflows
; 5385 :     const _Diff _Max_sequence_non_leaf = (_Bottom - 1) >> 1; // shift for codegen

	mov	eax, DWORD PTR __Bottom$[esp+4]
	push	ebx
	push	ebp
	mov	ebx, ecx
	mov	DWORD PTR __Top$1$[esp+16], edx
	lea	ecx, DWORD PTR [eax-1]
	mov	ebp, ecx
	mov	DWORD PTR tv234[esp+16], ecx

; 5386 :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

	mov	ecx, DWORD PTR __Pred$[esp+12]
	push	esi
	mov	esi, edx
	sar	ebp, 1
	push	edi
	mov	edi, esi
	cmp	esi, ebp
	jge	SHORT $LN3@Pop_heap_h
	npad	8
$LL2@Pop_heap_h:

; 5387 :         _Idx = 2 * _Idx + 2;
; 5388 :         if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1)))) {

	push	DWORD PTR [ebx+edi*8+4]
	lea	edi, DWORD PTR [edi*2+2]
	push	DWORD PTR [ebx+edi*4]
	call	ecx
	add	esp, 8
	test	al, al
	je	SHORT $LN4@Pop_heap_h

; 5389 :             --_Idx;

	dec	edi
$LN4@Pop_heap_h:

; 5390 :         }
; 5391 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [ebx+edi*4]
	mov	ecx, DWORD PTR __Pred$[esp+20]
	mov	DWORD PTR [ebx+esi*4], eax

; 5392 :         _Hole             = _Idx;

	mov	esi, edi
	cmp	edi, ebp
	jl	SHORT $LL2@Pop_heap_h
	mov	edx, DWORD PTR __Top$1$[esp+24]
	mov	eax, DWORD PTR __Bottom$[esp+20]
$LN3@Pop_heap_h:

; 5393 :     }
; 5394 : 
; 5395 :     if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it

	cmp	edi, ebp
	jne	SHORT $LN5@Pop_heap_h
	test	al, 1
	jne	SHORT $LN5@Pop_heap_h

; 5396 :         *(_First + _Hole) = _STD move(*(_First + (_Bottom - 1)));

	mov	eax, DWORD PTR [ebx+eax*4-4]
	mov	DWORD PTR [ebx+esi*4], eax

; 5397 :         _Hole             = _Bottom - 1;

	mov	esi, DWORD PTR tv234[esp+24]
$LN5@Pop_heap_h:

; 5268 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

	cmp	edx, esi
	jge	SHORT $LN20@Pop_heap_h
	mov	ebp, DWORD PTR __Val$[esp+20]
	npad	5
$LL10@Pop_heap_h:
	push	DWORD PTR [ebp]
	lea	edi, DWORD PTR [esi-1]
	sar	edi, 1
	push	DWORD PTR [ebx+edi*4]
	call	ecx
	add	esp, 8
	test	al, al
	je	SHORT $LN21@Pop_heap_h

; 5269 :          _Idx = (_Hole - 1) >> 1) { // shift for codegen
; 5270 :         // move _Hole up to parent
; 5271 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [ebx+edi*4]
	mov	ecx, DWORD PTR __Pred$[esp+20]
	mov	DWORD PTR [ebx+esi*4], eax

; 5272 :         _Hole             = _Idx;

	mov	esi, edi
	cmp	DWORD PTR __Top$1$[esp+24], edi
	jl	SHORT $LL10@Pop_heap_h
$LN21@Pop_heap_h:

; 5398 :     }
; 5399 : 
; 5400 :     _Push_heap_by_index(_First, _Hole, _Top, _STD forward<_Ty>(_Val), _Pred);
; 5401 : }

	mov	eax, DWORD PTR [ebp]
	pop	edi
	mov	DWORD PTR [ebx+esi*4], eax
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 8
	ret	0
$LN20@Pop_heap_h:

; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	eax, DWORD PTR __Val$[esp+20]
	pop	edi
	mov	eax, DWORD PTR [eax]

; 5398 :     }
; 5399 : 
; 5400 :     _Push_heap_by_index(_First, _Hole, _Top, _STD forward<_Ty>(_Val), _Pred);
; 5401 : }

	mov	DWORD PTR [ebx+esi*4], eax
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 8
	ret	0
??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ENDP ; std::_Pop_heap_hole_by_index<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Pop_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z
_TEXT	SEGMENT
__Val$1 = -4						; size = 4
__Pred$ = 8						; size = 4
??$_Pop_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z PROC ; std::_Pop_heap_unchecked<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 5415 : _CONSTEXPR20 void _Pop_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

	push	ecx

; 5416 :     // pop *_First to *(_Last - 1) and reheap
; 5417 :     if (2 <= _Last - _First) {

	mov	eax, edx
	sub	eax, ecx
	and	eax, -4					; fffffffcH
	cmp	eax, 8
	jl	SHORT $LN2@Pop_heap_u

; 5418 :         --_Last;
; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	eax, DWORD PTR [edx-4]
	sub	edx, 4

; 5410 :     _Pop_heap_hole_by_index(

	push	DWORD PTR __Pred$[esp]

; 5418 :         --_Last;
; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	DWORD PTR __Val$1[esp+8], eax

; 5408 :     *_Dest      = _STD move(*_First);

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax

; 5409 :     using _Diff = _Iter_diff_t<_RanIt>;
; 5410 :     _Pop_heap_hole_by_index(

	sub	edx, ecx
	lea	eax, DWORD PTR __Val$1[esp+8]
	sar	edx, 2
	push	eax
	push	edx
	xor	edx, edx
	call	??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ; std::_Pop_heap_hole_by_index<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *)>
	add	esp, 12					; 0000000cH
$LN2@Pop_heap_u:

; 5420 :         _Pop_heap_hole_unchecked(_First, _Last, _Last, _STD move(_Val), _Pred);
; 5421 :     }
; 5422 : }

	pop	ecx
	ret	0
??$_Pop_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z ENDP ; std::_Pop_heap_unchecked<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Prev_iter@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z
_TEXT	SEGMENT
??$_Prev_iter@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z PROC ; std::_Prev_iter<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *>, COMDAT
; __First$ = ecx

; 1554 :     return --_First;

	lea	eax, DWORD PTR [ecx-4]

; 1555 : }

	ret	0
??$_Prev_iter@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z ENDP ; std::_Prev_iter<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Guess_median_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z
_TEXT	SEGMENT
tv426 = -8						; size = 4
tv422 = -4						; size = 4
__First$1$ = -4						; size = 4
__Last$ = 8						; size = 4
__Pred$ = 12						; size = 4
??$_Guess_median_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z PROC ; std::_Guess_median_unchecked<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Mid$ = edx

; 6959 : _CONSTEXPR20 void _Guess_median_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred) {

	sub	esp, 8
	push	ebx

; 6960 :     // sort median element to middle
; 6961 :     using _Diff        = _Iter_diff_t<_RanIt>;
; 6962 :     const _Diff _Count = _Last - _First;

	mov	ebx, DWORD PTR __Last$[esp+8]
	mov	eax, ebx
	push	ebp

; 6963 :     if (40 < _Count) { // Tukey's ninther

	mov	ebp, DWORD PTR __Pred$[esp+12]
	push	esi
	push	edi
	mov	edi, ecx
	mov	esi, edx
	sub	eax, edi
	sar	eax, 2
	mov	ecx, DWORD PTR [edi]
	push	ecx
	cmp	eax, 40					; 00000028H
	jle	$LN2@Guess_medi

; 6964 :         const _Diff _Step     = (_Count + 1) >> 3; // +1 can't overflow because range was made inclusive in caller

	inc	eax
	sar	eax, 3

; 6965 :         const _Diff _Two_step = _Step << 1; // note: intentionally discards low-order bit
; 6966 :         _Med3_unchecked(_First, _First + _Step, _First + _Two_step, _Pred);

	lea	edx, DWORD PTR [eax*8]
	shl	eax, 2

; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [eax+edi]

; 6965 :         const _Diff _Two_step = _Step << 1; // note: intentionally discards low-order bit
; 6966 :         _Med3_unchecked(_First, _First + _Step, _First + _Two_step, _Pred);

	lea	ebx, DWORD PTR [eax+edi]
	mov	DWORD PTR tv422[esp+32], edx
	mov	DWORD PTR tv426[esp+32], eax

; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN95@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [ebx]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [ebx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN95@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6949 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

	mov	eax, DWORD PTR tv422[esp+24]
	push	DWORD PTR [ebx]
	push	DWORD PTR [eax+edi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN8@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	edx, DWORD PTR tv422[esp+24]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebx]
	mov	ecx, DWORD PTR [edx+edi]
	mov	DWORD PTR [edx+edi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebx], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [edi]
	push	ecx
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN8@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [ebx]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [ebx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN8@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6967 :         _Med3_unchecked(_Mid - _Step, _Mid, _Mid + _Step, _Pred);

	mov	edi, esi
	sub	edi, DWORD PTR tv426[esp+24]

; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [edi]
	push	DWORD PTR [esi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN96@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN96@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6949 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

	mov	eax, DWORD PTR tv426[esp+24]
	push	DWORD PTR [esi]
	push	DWORD PTR [eax+esi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN25@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	edx, DWORD PTR tv426[esp+24]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [edx+esi]
	mov	DWORD PTR [edx+esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [esi], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [edi]
	push	ecx
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN25@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN25@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6968 :         _Med3_unchecked(_Last - _Two_step, _Last - _Step, _Last, _Pred);

	mov	eax, DWORD PTR __Last$[esp+20]
	mov	edi, eax
	sub	eax, DWORD PTR tv422[esp+24]
	sub	edi, DWORD PTR tv426[esp+24]
	mov	DWORD PTR __First$1$[esp+24], eax

; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [eax]
	push	DWORD PTR [edi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN97@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 101  :     _Left    = _STD move(_Right);

	mov	edx, DWORD PTR __First$1$[esp+24]
	mov	ecx, DWORD PTR [edi]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [edi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edx], ecx
$LN97@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6949 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

	mov	eax, DWORD PTR __Last$[esp+20]
	push	DWORD PTR [edi]
	push	DWORD PTR [eax]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN42@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	edx, DWORD PTR __Last$[esp+20]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [edx], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	mov	eax, DWORD PTR __First$1$[esp+24]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [eax]
	push	ecx
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN42@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 101  :     _Left    = _STD move(_Right);

	mov	edx, DWORD PTR __First$1$[esp+24]
	mov	ecx, DWORD PTR [edi]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [edi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edx], ecx
$LN42@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [ebx]
	push	DWORD PTR [esi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN98@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebx], ecx
$LN98@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6949 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

	push	DWORD PTR [esi]
	push	DWORD PTR [edi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN76@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [edi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [edi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [esi], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [ebx]
	push	ecx
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN76@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebx]
	pop	edi
	mov	DWORD PTR [esi], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6973 : }

	pop	esi
	pop	ebp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebx], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6973 : }

	pop	ebx
	add	esp, 8
	ret	0
$LN2@Guess_medi:

; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [esi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN99@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN99@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6949 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

	push	DWORD PTR [esi]
	push	DWORD PTR [ebx]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN76@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [ebx]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [ebx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [esi], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [edi]
	push	ecx
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN76@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN76@Guess_medi:
	pop	edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6973 : }

	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 8
	ret	0
??$_Guess_median_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z ENDP ; std::_Guess_median_unchecked<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Next_iter@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z
_TEXT	SEGMENT
??$_Next_iter@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z PROC ; std::_Next_iter<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *>, COMDAT
; __First$ = ecx

; 1541 :     return ++_First;

	lea	eax, DWORD PTR [ecx+4]

; 1542 : }

	ret	0
??$_Next_iter@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z ENDP ; std::_Next_iter<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$iter_swap@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z
_TEXT	SEGMENT
??$iter_swap@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z PROC ; std::iter_swap<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *>, COMDAT
; __Left$ = ecx
; __Right$ = edx

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edx]

; 77   : _CONSTEXPR20 void iter_swap(_FwdIt1 _Left, _FwdIt2 _Right) { // swap *_Left and *_Right

	push	esi

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	esi, DWORD PTR [ecx]

; 101  :     _Left    = _STD move(_Right);

	mov	DWORD PTR [ecx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edx], esi
	pop	esi

; 78   :     swap(*_Left, *_Right);
; 79   : }

	ret	0
??$iter_swap@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ENDP ; std::iter_swap<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$?0AAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU01@$0A@@?$pair@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@QAE@AAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU01@$0A@@?$pair@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@QAE@AAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z PROC ; std::pair<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *>::pair<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *><FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * * &,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * * &,0>, COMDAT
; _this$ = ecx

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	eax, DWORD PTR __Val1$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR __Val2$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	ret	8
??$?0AAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU01@$0A@@?$pair@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@QAE@AAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ENDP ; std::pair<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *>::pair<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *><FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * * &,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * * &,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Uninitialized_copy@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0PAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Al$dead$ = 12						; size = 4
??$_Uninitialized_copy@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0PAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z PROC ; std::_Uninitialized_copy<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	eax, DWORD PTR __Dest$[esp-4]

; 1637 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

	push	esi
	mov	esi, edx

; 1638 :     // copy [_First, _Last) to raw _Dest, using _Al
; 1639 :     // note: only called internally from elsewhere in the STL
; 1640 :     using _Ptrval = typename _Alloc::value_type*;
; 1641 : 
; 1642 :     auto _UFirst      = _Get_unwrapped(_First);
; 1643 :     const auto _ULast = _Get_unwrapped(_Last);
; 1644 : 
; 1645 :     if constexpr (conjunction_v<bool_constant<_Ptr_copy_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1646 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(*_UFirst)>>) {
; 1647 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1648 :         if (!_STD is_constant_evaluated())
; 1649 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1650 :         {
; 1651 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1652 :             _Dest += _ULast - _UFirst;
; 1653 :             return _Dest;
; 1654 :         }
; 1655 :     }
; 1656 : 
; 1657 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1658 :     for (; _UFirst != _ULast; ++_UFirst) {

	cmp	ecx, esi
	je	SHORT $LN3@Uninitiali
	npad	5
$LL4@Uninitiali:

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	edx, DWORD PTR [ecx]

; 1621 :         ++_Last;

	add	ecx, 4
	mov	DWORD PTR [eax], edx
	add	eax, 4

; 1638 :     // copy [_First, _Last) to raw _Dest, using _Al
; 1639 :     // note: only called internally from elsewhere in the STL
; 1640 :     using _Ptrval = typename _Alloc::value_type*;
; 1641 : 
; 1642 :     auto _UFirst      = _Get_unwrapped(_First);
; 1643 :     const auto _ULast = _Get_unwrapped(_Last);
; 1644 : 
; 1645 :     if constexpr (conjunction_v<bool_constant<_Ptr_copy_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1646 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(*_UFirst)>>) {
; 1647 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1648 :         if (!_STD is_constant_evaluated())
; 1649 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1650 :         {
; 1651 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1652 :             _Dest += _ULast - _UFirst;
; 1653 :             return _Dest;
; 1654 :         }
; 1655 :     }
; 1656 : 
; 1657 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1658 :     for (; _UFirst != _ULast; ++_UFirst) {

	cmp	ecx, esi
	jne	SHORT $LL4@Uninitiali
$LN3@Uninitiali:
	pop	esi

; 1659 :         _Backout._Emplace_back(*_UFirst);
; 1660 :     }
; 1661 : 
; 1662 :     return _Backout._Release();
; 1663 : }

	ret	0
??$_Uninitialized_copy@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0PAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ENDP ; std::_Uninitialized_copy<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Copy_backward_memmove@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
??$_Copy_backward_memmove@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z PROC ; std::_Copy_backward_memmove<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 4247 :     // implement copy_backward-like function as memmove
; 4248 :     auto _FirstPtr              = _To_address(_First);
; 4249 :     auto _LastPtr               = _To_address(_Last);
; 4250 :     auto _DestPtr               = _To_address(_Dest);
; 4251 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 4252 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 4253 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 4254 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);
; 4255 :     auto _Result                = _CSTD memmove(_Dest_ch - _Count, _First_ch, _Count);

	mov	eax, DWORD PTR __Dest$[esp-4]
	sub	edx, ecx
	push	edx
	push	ecx
	sub	eax, edx
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH

; 4256 :     if constexpr (is_pointer_v<_CtgIt2>) {
; 4257 :         return static_cast<_CtgIt2>(_Result);
; 4258 :     } else {
; 4259 :         return _Dest - (_LastPtr - _FirstPtr);
; 4260 :     }
; 4261 : }

	ret	0
??$_Copy_backward_memmove@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z ENDP ; std::_Copy_backward_memmove<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
??$_Copy_memmove@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z PROC ; std::_Copy_memmove<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 4058 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

	push	esi

; 4059 :     auto _FirstPtr              = _To_address(_First);
; 4060 :     auto _LastPtr               = _To_address(_Last);
; 4061 :     auto _DestPtr               = _To_address(_Dest);
; 4062 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 4063 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 4064 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 4065 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);
; 4066 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	esi, DWORD PTR __Dest$[esp]
	push	edi
	mov	edi, edx
	sub	edi, ecx
	push	edi
	push	ecx
	push	esi
	call	_memmove
	add	esp, 12					; 0000000cH

; 4067 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4068 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

	lea	eax, DWORD PTR [edi+esi]
	pop	edi
	pop	esi

; 4069 :     } else {
; 4070 :         return _Dest + (_LastPtr - _FirstPtr);
; 4071 :     }
; 4072 : }

	ret	0
??$_Copy_memmove@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z ENDP ; std::_Copy_memmove<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z
_TEXT	SEGMENT
__Top$1$ = -8						; size = 4
tv234 = -4						; size = 4
__Bottom$ = 8						; size = 4
__Val$ = 12						; size = 4
__Pred$ = 16						; size = 4
??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z PROC ; std::_Pop_heap_hole_by_index<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Hole$ = edx

; 5375 :     _RanIt _First, _Iter_diff_t<_RanIt> _Hole, _Iter_diff_t<_RanIt> _Bottom, _Ty&& _Val, _Pr _Pred) {

	sub	esp, 8

; 5376 :     // percolate _Hole to _Bottom, then push _Val
; 5377 :     _STL_INTERNAL_CHECK(_Bottom > 0);
; 5378 : 
; 5379 :     using _Diff      = _Iter_diff_t<_RanIt>;
; 5380 :     const _Diff _Top = _Hole;
; 5381 :     _Diff _Idx       = _Hole;
; 5382 : 
; 5383 :     // Check whether _Idx can have a child before calculating that child's index, since
; 5384 :     // calculating the child's index can trigger integer overflows
; 5385 :     const _Diff _Max_sequence_non_leaf = (_Bottom - 1) >> 1; // shift for codegen

	mov	eax, DWORD PTR __Bottom$[esp+4]
	push	ebx
	push	ebp
	mov	ebx, ecx
	mov	DWORD PTR __Top$1$[esp+16], edx
	lea	ecx, DWORD PTR [eax-1]
	mov	ebp, ecx
	mov	DWORD PTR tv234[esp+16], ecx

; 5386 :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

	mov	ecx, DWORD PTR __Pred$[esp+12]
	push	esi
	mov	esi, edx
	sar	ebp, 1
	push	edi
	mov	edi, esi
	cmp	esi, ebp
	jge	SHORT $LN3@Pop_heap_h
	npad	8
$LL2@Pop_heap_h:

; 5387 :         _Idx = 2 * _Idx + 2;
; 5388 :         if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1)))) {

	push	DWORD PTR [ebx+edi*8+4]
	lea	edi, DWORD PTR [edi*2+2]
	push	DWORD PTR [ebx+edi*4]
	call	ecx
	add	esp, 8
	test	al, al
	je	SHORT $LN4@Pop_heap_h

; 5389 :             --_Idx;

	dec	edi
$LN4@Pop_heap_h:

; 5390 :         }
; 5391 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [ebx+edi*4]
	mov	ecx, DWORD PTR __Pred$[esp+20]
	mov	DWORD PTR [ebx+esi*4], eax

; 5392 :         _Hole             = _Idx;

	mov	esi, edi
	cmp	edi, ebp
	jl	SHORT $LL2@Pop_heap_h
	mov	edx, DWORD PTR __Top$1$[esp+24]
	mov	eax, DWORD PTR __Bottom$[esp+20]
$LN3@Pop_heap_h:

; 5393 :     }
; 5394 : 
; 5395 :     if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it

	cmp	edi, ebp
	jne	SHORT $LN5@Pop_heap_h
	test	al, 1
	jne	SHORT $LN5@Pop_heap_h

; 5396 :         *(_First + _Hole) = _STD move(*(_First + (_Bottom - 1)));

	mov	eax, DWORD PTR [ebx+eax*4-4]
	mov	DWORD PTR [ebx+esi*4], eax

; 5397 :         _Hole             = _Bottom - 1;

	mov	esi, DWORD PTR tv234[esp+24]
$LN5@Pop_heap_h:

; 5268 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

	cmp	edx, esi
	jge	SHORT $LN20@Pop_heap_h
	mov	ebp, DWORD PTR __Val$[esp+20]
	npad	5
$LL10@Pop_heap_h:
	push	DWORD PTR [ebp]
	lea	edi, DWORD PTR [esi-1]
	sar	edi, 1
	push	DWORD PTR [ebx+edi*4]
	call	ecx
	add	esp, 8
	test	al, al
	je	SHORT $LN21@Pop_heap_h

; 5269 :          _Idx = (_Hole - 1) >> 1) { // shift for codegen
; 5270 :         // move _Hole up to parent
; 5271 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [ebx+edi*4]
	mov	ecx, DWORD PTR __Pred$[esp+20]
	mov	DWORD PTR [ebx+esi*4], eax

; 5272 :         _Hole             = _Idx;

	mov	esi, edi
	cmp	DWORD PTR __Top$1$[esp+24], edi
	jl	SHORT $LL10@Pop_heap_h
$LN21@Pop_heap_h:

; 5398 :     }
; 5399 : 
; 5400 :     _Push_heap_by_index(_First, _Hole, _Top, _STD forward<_Ty>(_Val), _Pred);
; 5401 : }

	mov	eax, DWORD PTR [ebp]
	pop	edi
	mov	DWORD PTR [ebx+esi*4], eax
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 8
	ret	0
$LN20@Pop_heap_h:

; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	eax, DWORD PTR __Val$[esp+20]
	pop	edi
	mov	eax, DWORD PTR [eax]

; 5398 :     }
; 5399 : 
; 5400 :     _Push_heap_by_index(_First, _Hole, _Top, _STD forward<_Ty>(_Val), _Pred);
; 5401 : }

	mov	DWORD PTR [ebx+esi*4], eax
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 8
	ret	0
??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ENDP ; std::_Pop_heap_hole_by_index<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Pop_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z
_TEXT	SEGMENT
__Val$1 = -4						; size = 4
__Pred$ = 8						; size = 4
??$_Pop_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z PROC ; std::_Pop_heap_unchecked<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 5415 : _CONSTEXPR20 void _Pop_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

	push	ecx

; 5416 :     // pop *_First to *(_Last - 1) and reheap
; 5417 :     if (2 <= _Last - _First) {

	mov	eax, edx
	sub	eax, ecx
	and	eax, -4					; fffffffcH
	cmp	eax, 8
	jl	SHORT $LN2@Pop_heap_u

; 5418 :         --_Last;
; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	eax, DWORD PTR [edx-4]
	sub	edx, 4

; 5410 :     _Pop_heap_hole_by_index(

	push	DWORD PTR __Pred$[esp]

; 5418 :         --_Last;
; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	DWORD PTR __Val$1[esp+8], eax

; 5408 :     *_Dest      = _STD move(*_First);

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax

; 5409 :     using _Diff = _Iter_diff_t<_RanIt>;
; 5410 :     _Pop_heap_hole_by_index(

	sub	edx, ecx
	lea	eax, DWORD PTR __Val$1[esp+8]
	sar	edx, 2
	push	eax
	push	edx
	xor	edx, edx
	call	??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ; std::_Pop_heap_hole_by_index<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *)>
	add	esp, 12					; 0000000cH
$LN2@Pop_heap_u:

; 5420 :         _Pop_heap_hole_unchecked(_First, _Last, _Last, _STD move(_Val), _Pred);
; 5421 :     }
; 5422 : }

	pop	ecx
	ret	0
??$_Pop_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z ENDP ; std::_Pop_heap_unchecked<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Prev_iter@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z
_TEXT	SEGMENT
??$_Prev_iter@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z PROC ; std::_Prev_iter<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *>, COMDAT
; __First$ = ecx

; 1554 :     return --_First;

	lea	eax, DWORD PTR [ecx-4]

; 1555 : }

	ret	0
??$_Prev_iter@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z ENDP ; std::_Prev_iter<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Guess_median_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z
_TEXT	SEGMENT
tv426 = -8						; size = 4
tv422 = -4						; size = 4
__First$1$ = -4						; size = 4
__Last$ = 8						; size = 4
__Pred$ = 12						; size = 4
??$_Guess_median_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z PROC ; std::_Guess_median_unchecked<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Mid$ = edx

; 6959 : _CONSTEXPR20 void _Guess_median_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred) {

	sub	esp, 8
	push	ebx

; 6960 :     // sort median element to middle
; 6961 :     using _Diff        = _Iter_diff_t<_RanIt>;
; 6962 :     const _Diff _Count = _Last - _First;

	mov	ebx, DWORD PTR __Last$[esp+8]
	mov	eax, ebx
	push	ebp

; 6963 :     if (40 < _Count) { // Tukey's ninther

	mov	ebp, DWORD PTR __Pred$[esp+12]
	push	esi
	push	edi
	mov	edi, ecx
	mov	esi, edx
	sub	eax, edi
	sar	eax, 2
	mov	ecx, DWORD PTR [edi]
	push	ecx
	cmp	eax, 40					; 00000028H
	jle	$LN2@Guess_medi

; 6964 :         const _Diff _Step     = (_Count + 1) >> 3; // +1 can't overflow because range was made inclusive in caller

	inc	eax
	sar	eax, 3

; 6965 :         const _Diff _Two_step = _Step << 1; // note: intentionally discards low-order bit
; 6966 :         _Med3_unchecked(_First, _First + _Step, _First + _Two_step, _Pred);

	lea	edx, DWORD PTR [eax*8]
	shl	eax, 2

; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [eax+edi]

; 6965 :         const _Diff _Two_step = _Step << 1; // note: intentionally discards low-order bit
; 6966 :         _Med3_unchecked(_First, _First + _Step, _First + _Two_step, _Pred);

	lea	ebx, DWORD PTR [eax+edi]
	mov	DWORD PTR tv422[esp+32], edx
	mov	DWORD PTR tv426[esp+32], eax

; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN95@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [ebx]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [ebx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN95@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6949 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

	mov	eax, DWORD PTR tv422[esp+24]
	push	DWORD PTR [ebx]
	push	DWORD PTR [eax+edi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN8@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	edx, DWORD PTR tv422[esp+24]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebx]
	mov	ecx, DWORD PTR [edx+edi]
	mov	DWORD PTR [edx+edi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebx], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [edi]
	push	ecx
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN8@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [ebx]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [ebx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN8@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6967 :         _Med3_unchecked(_Mid - _Step, _Mid, _Mid + _Step, _Pred);

	mov	edi, esi
	sub	edi, DWORD PTR tv426[esp+24]

; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [edi]
	push	DWORD PTR [esi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN96@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN96@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6949 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

	mov	eax, DWORD PTR tv426[esp+24]
	push	DWORD PTR [esi]
	push	DWORD PTR [eax+esi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN25@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	edx, DWORD PTR tv426[esp+24]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [edx+esi]
	mov	DWORD PTR [edx+esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [esi], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [edi]
	push	ecx
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN25@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN25@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6968 :         _Med3_unchecked(_Last - _Two_step, _Last - _Step, _Last, _Pred);

	mov	eax, DWORD PTR __Last$[esp+20]
	mov	edi, eax
	sub	eax, DWORD PTR tv422[esp+24]
	sub	edi, DWORD PTR tv426[esp+24]
	mov	DWORD PTR __First$1$[esp+24], eax

; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [eax]
	push	DWORD PTR [edi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN97@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 101  :     _Left    = _STD move(_Right);

	mov	edx, DWORD PTR __First$1$[esp+24]
	mov	ecx, DWORD PTR [edi]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [edi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edx], ecx
$LN97@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6949 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

	mov	eax, DWORD PTR __Last$[esp+20]
	push	DWORD PTR [edi]
	push	DWORD PTR [eax]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN42@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	edx, DWORD PTR __Last$[esp+20]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [edx], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	mov	eax, DWORD PTR __First$1$[esp+24]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [eax]
	push	ecx
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN42@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 101  :     _Left    = _STD move(_Right);

	mov	edx, DWORD PTR __First$1$[esp+24]
	mov	ecx, DWORD PTR [edi]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [edi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edx], ecx
$LN42@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [ebx]
	push	DWORD PTR [esi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN98@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebx], ecx
$LN98@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6949 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

	push	DWORD PTR [esi]
	push	DWORD PTR [edi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN76@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [edi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [edi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [esi], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [ebx]
	push	ecx
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN76@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebx]
	pop	edi
	mov	DWORD PTR [esi], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6973 : }

	pop	esi
	pop	ebp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebx], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6973 : }

	pop	ebx
	add	esp, 8
	ret	0
$LN2@Guess_medi:

; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [esi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN99@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN99@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6949 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

	push	DWORD PTR [esi]
	push	DWORD PTR [ebx]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN76@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [ebx]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [ebx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [esi], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [edi]
	push	ecx
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN76@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN76@Guess_medi:
	pop	edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6973 : }

	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 8
	ret	0
??$_Guess_median_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z ENDP ; std::_Guess_median_unchecked<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Next_iter@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z
_TEXT	SEGMENT
??$_Next_iter@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z PROC ; std::_Next_iter<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *>, COMDAT
; __First$ = ecx

; 1541 :     return ++_First;

	lea	eax, DWORD PTR [ecx+4]

; 1542 : }

	ret	0
??$_Next_iter@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z ENDP ; std::_Next_iter<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$iter_swap@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z
_TEXT	SEGMENT
??$iter_swap@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z PROC ; std::iter_swap<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *>, COMDAT
; __Left$ = ecx
; __Right$ = edx

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edx]

; 77   : _CONSTEXPR20 void iter_swap(_FwdIt1 _Left, _FwdIt2 _Right) { // swap *_Left and *_Right

	push	esi

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	esi, DWORD PTR [ecx]

; 101  :     _Left    = _STD move(_Right);

	mov	DWORD PTR [ecx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edx], esi
	pop	esi

; 78   :     swap(*_Left, *_Right);
; 79   : }

	ret	0
??$iter_swap@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ENDP ; std::iter_swap<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$?0AAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU01@$0A@@?$pair@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@QAE@AAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU01@$0A@@?$pair@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@QAE@AAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z PROC ; std::pair<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *>::pair<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *><FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * * &,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * * &,0>, COMDAT
; _this$ = ecx

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	eax, DWORD PTR __Val1$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR __Val2$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	ret	8
??$?0AAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU01@$0A@@?$pair@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@QAE@AAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ENDP ; std::pair<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *>::pair<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *><FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * * &,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * * &,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Uninitialized_copy@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0PAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Al$dead$ = 12						; size = 4
??$_Uninitialized_copy@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0PAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z PROC ; std::_Uninitialized_copy<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	eax, DWORD PTR __Dest$[esp-4]

; 1637 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

	push	esi
	mov	esi, edx

; 1638 :     // copy [_First, _Last) to raw _Dest, using _Al
; 1639 :     // note: only called internally from elsewhere in the STL
; 1640 :     using _Ptrval = typename _Alloc::value_type*;
; 1641 : 
; 1642 :     auto _UFirst      = _Get_unwrapped(_First);
; 1643 :     const auto _ULast = _Get_unwrapped(_Last);
; 1644 : 
; 1645 :     if constexpr (conjunction_v<bool_constant<_Ptr_copy_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1646 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(*_UFirst)>>) {
; 1647 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1648 :         if (!_STD is_constant_evaluated())
; 1649 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1650 :         {
; 1651 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1652 :             _Dest += _ULast - _UFirst;
; 1653 :             return _Dest;
; 1654 :         }
; 1655 :     }
; 1656 : 
; 1657 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1658 :     for (; _UFirst != _ULast; ++_UFirst) {

	cmp	ecx, esi
	je	SHORT $LN3@Uninitiali
	npad	5
$LL4@Uninitiali:

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	edx, DWORD PTR [ecx]

; 1621 :         ++_Last;

	add	ecx, 4
	mov	DWORD PTR [eax], edx
	add	eax, 4

; 1638 :     // copy [_First, _Last) to raw _Dest, using _Al
; 1639 :     // note: only called internally from elsewhere in the STL
; 1640 :     using _Ptrval = typename _Alloc::value_type*;
; 1641 : 
; 1642 :     auto _UFirst      = _Get_unwrapped(_First);
; 1643 :     const auto _ULast = _Get_unwrapped(_Last);
; 1644 : 
; 1645 :     if constexpr (conjunction_v<bool_constant<_Ptr_copy_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1646 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(*_UFirst)>>) {
; 1647 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1648 :         if (!_STD is_constant_evaluated())
; 1649 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1650 :         {
; 1651 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1652 :             _Dest += _ULast - _UFirst;
; 1653 :             return _Dest;
; 1654 :         }
; 1655 :     }
; 1656 : 
; 1657 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1658 :     for (; _UFirst != _ULast; ++_UFirst) {

	cmp	ecx, esi
	jne	SHORT $LL4@Uninitiali
$LN3@Uninitiali:
	pop	esi

; 1659 :         _Backout._Emplace_back(*_UFirst);
; 1660 :     }
; 1661 : 
; 1662 :     return _Backout._Release();
; 1663 : }

	ret	0
??$_Uninitialized_copy@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@0PAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ENDP ; std::_Uninitialized_copy<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Copy_backward_memmove@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
??$_Copy_backward_memmove@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z PROC ; std::_Copy_backward_memmove<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 4247 :     // implement copy_backward-like function as memmove
; 4248 :     auto _FirstPtr              = _To_address(_First);
; 4249 :     auto _LastPtr               = _To_address(_Last);
; 4250 :     auto _DestPtr               = _To_address(_Dest);
; 4251 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 4252 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 4253 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 4254 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);
; 4255 :     auto _Result                = _CSTD memmove(_Dest_ch - _Count, _First_ch, _Count);

	mov	eax, DWORD PTR __Dest$[esp-4]
	sub	edx, ecx
	push	edx
	push	ecx
	sub	eax, edx
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH

; 4256 :     if constexpr (is_pointer_v<_CtgIt2>) {
; 4257 :         return static_cast<_CtgIt2>(_Result);
; 4258 :     } else {
; 4259 :         return _Dest - (_LastPtr - _FirstPtr);
; 4260 :     }
; 4261 : }

	ret	0
??$_Copy_backward_memmove@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z ENDP ; std::_Copy_backward_memmove<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
??$_Copy_memmove@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z PROC ; std::_Copy_memmove<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 4058 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

	push	esi

; 4059 :     auto _FirstPtr              = _To_address(_First);
; 4060 :     auto _LastPtr               = _To_address(_Last);
; 4061 :     auto _DestPtr               = _To_address(_Dest);
; 4062 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 4063 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 4064 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 4065 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);
; 4066 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	esi, DWORD PTR __Dest$[esp]
	push	edi
	mov	edi, edx
	sub	edi, ecx
	push	edi
	push	ecx
	push	esi
	call	_memmove
	add	esp, 12					; 0000000cH

; 4067 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4068 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

	lea	eax, DWORD PTR [edi+esi]
	pop	edi
	pop	esi

; 4069 :     } else {
; 4070 :         return _Dest + (_LastPtr - _FirstPtr);
; 4071 :     }
; 4072 : }

	ret	0
??$_Copy_memmove@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z ENDP ; std::_Copy_memmove<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$move@AAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z
_TEXT	SEGMENT
??$move@AAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z PROC ; std::move<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * &>, COMDAT
; __Arg$ = ecx

; 1397 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	eax, ecx

; 1398 : }

	ret	0
??$move@AAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z ENDP ; std::move<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Move_backward_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
??$_Move_backward_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z PROC ; std::_Move_backward_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 4255 :     auto _Result                = _CSTD memmove(_Dest_ch - _Count, _First_ch, _Count);

	mov	eax, DWORD PTR __Dest$[esp-4]
	sub	edx, ecx
	push	edx
	push	ecx
	sub	eax, edx
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH

; 4351 :     // move [_First, _Last) backwards to [..., _Dest)
; 4352 :     // note: _Move_backward_unchecked has callers other than the move_backward family
; 4353 :     if constexpr (_Ptr_move_cat<_BidIt1, _BidIt2>::_Trivially_copyable) {
; 4354 : #ifdef __cpp_lib_is_constant_evaluated
; 4355 :         if (!_STD is_constant_evaluated())
; 4356 : #endif // __cpp_lib_is_constant_evaluated
; 4357 :         {
; 4358 :             return _Copy_backward_memmove(_First, _Last, _Dest);
; 4359 :         }
; 4360 :     }
; 4361 : 
; 4362 :     while (_First != _Last) {
; 4363 :         *--_Dest = _STD move(*--_Last);
; 4364 :     }
; 4365 : 
; 4366 :     return _Dest;
; 4367 : }

	ret	0
??$_Move_backward_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z ENDP ; std::_Move_backward_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z
_TEXT	SEGMENT
__Top$1$ = -8						; size = 4
tv234 = -4						; size = 4
__Bottom$ = 8						; size = 4
__Val$ = 12						; size = 4
__Pred$ = 16						; size = 4
??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z PROC ; std::_Pop_heap_hole_by_index<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Hole$ = edx

; 5375 :     _RanIt _First, _Iter_diff_t<_RanIt> _Hole, _Iter_diff_t<_RanIt> _Bottom, _Ty&& _Val, _Pr _Pred) {

	sub	esp, 8

; 5376 :     // percolate _Hole to _Bottom, then push _Val
; 5377 :     _STL_INTERNAL_CHECK(_Bottom > 0);
; 5378 : 
; 5379 :     using _Diff      = _Iter_diff_t<_RanIt>;
; 5380 :     const _Diff _Top = _Hole;
; 5381 :     _Diff _Idx       = _Hole;
; 5382 : 
; 5383 :     // Check whether _Idx can have a child before calculating that child's index, since
; 5384 :     // calculating the child's index can trigger integer overflows
; 5385 :     const _Diff _Max_sequence_non_leaf = (_Bottom - 1) >> 1; // shift for codegen

	mov	eax, DWORD PTR __Bottom$[esp+4]
	push	ebx
	push	ebp
	mov	ebx, ecx
	mov	DWORD PTR __Top$1$[esp+16], edx
	lea	ecx, DWORD PTR [eax-1]
	mov	ebp, ecx
	mov	DWORD PTR tv234[esp+16], ecx

; 5386 :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

	mov	ecx, DWORD PTR __Pred$[esp+12]
	push	esi
	mov	esi, edx
	sar	ebp, 1
	push	edi
	mov	edi, esi
	cmp	esi, ebp
	jge	SHORT $LN3@Pop_heap_h
	npad	8
$LL2@Pop_heap_h:

; 5387 :         _Idx = 2 * _Idx + 2;
; 5388 :         if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1)))) {

	push	DWORD PTR [ebx+edi*8+4]
	lea	edi, DWORD PTR [edi*2+2]
	push	DWORD PTR [ebx+edi*4]
	call	ecx
	add	esp, 8
	test	al, al
	je	SHORT $LN4@Pop_heap_h

; 5389 :             --_Idx;

	dec	edi
$LN4@Pop_heap_h:

; 5390 :         }
; 5391 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [ebx+edi*4]
	mov	ecx, DWORD PTR __Pred$[esp+20]
	mov	DWORD PTR [ebx+esi*4], eax

; 5392 :         _Hole             = _Idx;

	mov	esi, edi
	cmp	edi, ebp
	jl	SHORT $LL2@Pop_heap_h
	mov	edx, DWORD PTR __Top$1$[esp+24]
	mov	eax, DWORD PTR __Bottom$[esp+20]
$LN3@Pop_heap_h:

; 5393 :     }
; 5394 : 
; 5395 :     if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it

	cmp	edi, ebp
	jne	SHORT $LN5@Pop_heap_h
	test	al, 1
	jne	SHORT $LN5@Pop_heap_h

; 5396 :         *(_First + _Hole) = _STD move(*(_First + (_Bottom - 1)));

	mov	eax, DWORD PTR [ebx+eax*4-4]
	mov	DWORD PTR [ebx+esi*4], eax

; 5397 :         _Hole             = _Bottom - 1;

	mov	esi, DWORD PTR tv234[esp+24]
$LN5@Pop_heap_h:

; 5268 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

	cmp	edx, esi
	jge	SHORT $LN20@Pop_heap_h
	mov	ebp, DWORD PTR __Val$[esp+20]
	npad	5
$LL10@Pop_heap_h:
	push	DWORD PTR [ebp]
	lea	edi, DWORD PTR [esi-1]
	sar	edi, 1
	push	DWORD PTR [ebx+edi*4]
	call	ecx
	add	esp, 8
	test	al, al
	je	SHORT $LN21@Pop_heap_h

; 5269 :          _Idx = (_Hole - 1) >> 1) { // shift for codegen
; 5270 :         // move _Hole up to parent
; 5271 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [ebx+edi*4]
	mov	ecx, DWORD PTR __Pred$[esp+20]
	mov	DWORD PTR [ebx+esi*4], eax

; 5272 :         _Hole             = _Idx;

	mov	esi, edi
	cmp	DWORD PTR __Top$1$[esp+24], edi
	jl	SHORT $LL10@Pop_heap_h
$LN21@Pop_heap_h:

; 5398 :     }
; 5399 : 
; 5400 :     _Push_heap_by_index(_First, _Hole, _Top, _STD forward<_Ty>(_Val), _Pred);
; 5401 : }

	mov	eax, DWORD PTR [ebp]
	pop	edi
	mov	DWORD PTR [ebx+esi*4], eax
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 8
	ret	0
$LN20@Pop_heap_h:

; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	eax, DWORD PTR __Val$[esp+20]
	pop	edi
	mov	eax, DWORD PTR [eax]

; 5398 :     }
; 5399 : 
; 5400 :     _Push_heap_by_index(_First, _Hole, _Top, _STD forward<_Ty>(_Val), _Pred);
; 5401 : }

	mov	DWORD PTR [ebx+esi*4], eax
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 8
	ret	0
??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ENDP ; std::_Pop_heap_hole_by_index<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Pop_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z
_TEXT	SEGMENT
__Val$1 = -4						; size = 4
__Pred$ = 8						; size = 4
??$_Pop_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z PROC ; std::_Pop_heap_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 5415 : _CONSTEXPR20 void _Pop_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

	push	ecx

; 5416 :     // pop *_First to *(_Last - 1) and reheap
; 5417 :     if (2 <= _Last - _First) {

	mov	eax, edx
	sub	eax, ecx
	and	eax, -4					; fffffffcH
	cmp	eax, 8
	jl	SHORT $LN2@Pop_heap_u

; 5418 :         --_Last;
; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	eax, DWORD PTR [edx-4]
	sub	edx, 4

; 5410 :     _Pop_heap_hole_by_index(

	push	DWORD PTR __Pred$[esp]

; 5418 :         --_Last;
; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	DWORD PTR __Val$1[esp+8], eax

; 5408 :     *_Dest      = _STD move(*_First);

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax

; 5409 :     using _Diff = _Iter_diff_t<_RanIt>;
; 5410 :     _Pop_heap_hole_by_index(

	sub	edx, ecx
	lea	eax, DWORD PTR __Val$1[esp+8]
	sar	edx, 2
	push	eax
	push	edx
	xor	edx, edx
	call	??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ; std::_Pop_heap_hole_by_index<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *)>
	add	esp, 12					; 0000000cH
$LN2@Pop_heap_u:

; 5420 :         _Pop_heap_hole_unchecked(_First, _Last, _Last, _STD move(_Val), _Pred);
; 5421 :     }
; 5422 : }

	pop	ecx
	ret	0
??$_Pop_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z ENDP ; std::_Pop_heap_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Prev_iter@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z
_TEXT	SEGMENT
??$_Prev_iter@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z PROC ; std::_Prev_iter<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *>, COMDAT
; __First$ = ecx

; 1554 :     return --_First;

	lea	eax, DWORD PTR [ecx-4]

; 1555 : }

	ret	0
??$_Prev_iter@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z ENDP ; std::_Prev_iter<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Guess_median_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z
_TEXT	SEGMENT
tv426 = -8						; size = 4
tv422 = -4						; size = 4
__First$1$ = -4						; size = 4
__Last$ = 8						; size = 4
__Pred$ = 12						; size = 4
??$_Guess_median_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z PROC ; std::_Guess_median_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Mid$ = edx

; 6959 : _CONSTEXPR20 void _Guess_median_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred) {

	sub	esp, 8
	push	ebx

; 6960 :     // sort median element to middle
; 6961 :     using _Diff        = _Iter_diff_t<_RanIt>;
; 6962 :     const _Diff _Count = _Last - _First;

	mov	ebx, DWORD PTR __Last$[esp+8]
	mov	eax, ebx
	push	ebp

; 6963 :     if (40 < _Count) { // Tukey's ninther

	mov	ebp, DWORD PTR __Pred$[esp+12]
	push	esi
	push	edi
	mov	edi, ecx
	mov	esi, edx
	sub	eax, edi
	sar	eax, 2
	mov	ecx, DWORD PTR [edi]
	push	ecx
	cmp	eax, 40					; 00000028H
	jle	$LN2@Guess_medi

; 6964 :         const _Diff _Step     = (_Count + 1) >> 3; // +1 can't overflow because range was made inclusive in caller

	inc	eax
	sar	eax, 3

; 6965 :         const _Diff _Two_step = _Step << 1; // note: intentionally discards low-order bit
; 6966 :         _Med3_unchecked(_First, _First + _Step, _First + _Two_step, _Pred);

	lea	edx, DWORD PTR [eax*8]
	shl	eax, 2

; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [eax+edi]

; 6965 :         const _Diff _Two_step = _Step << 1; // note: intentionally discards low-order bit
; 6966 :         _Med3_unchecked(_First, _First + _Step, _First + _Two_step, _Pred);

	lea	ebx, DWORD PTR [eax+edi]
	mov	DWORD PTR tv422[esp+32], edx
	mov	DWORD PTR tv426[esp+32], eax

; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN95@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [ebx]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [ebx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN95@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6949 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

	mov	eax, DWORD PTR tv422[esp+24]
	push	DWORD PTR [ebx]
	push	DWORD PTR [eax+edi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN8@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	edx, DWORD PTR tv422[esp+24]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebx]
	mov	ecx, DWORD PTR [edx+edi]
	mov	DWORD PTR [edx+edi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebx], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [edi]
	push	ecx
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN8@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [ebx]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [ebx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN8@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6967 :         _Med3_unchecked(_Mid - _Step, _Mid, _Mid + _Step, _Pred);

	mov	edi, esi
	sub	edi, DWORD PTR tv426[esp+24]

; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [edi]
	push	DWORD PTR [esi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN96@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN96@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6949 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

	mov	eax, DWORD PTR tv426[esp+24]
	push	DWORD PTR [esi]
	push	DWORD PTR [eax+esi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN25@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	edx, DWORD PTR tv426[esp+24]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [edx+esi]
	mov	DWORD PTR [edx+esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [esi], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [edi]
	push	ecx
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN25@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN25@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6968 :         _Med3_unchecked(_Last - _Two_step, _Last - _Step, _Last, _Pred);

	mov	eax, DWORD PTR __Last$[esp+20]
	mov	edi, eax
	sub	eax, DWORD PTR tv422[esp+24]
	sub	edi, DWORD PTR tv426[esp+24]
	mov	DWORD PTR __First$1$[esp+24], eax

; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [eax]
	push	DWORD PTR [edi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN97@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 101  :     _Left    = _STD move(_Right);

	mov	edx, DWORD PTR __First$1$[esp+24]
	mov	ecx, DWORD PTR [edi]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [edi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edx], ecx
$LN97@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6949 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

	mov	eax, DWORD PTR __Last$[esp+20]
	push	DWORD PTR [edi]
	push	DWORD PTR [eax]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN42@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	edx, DWORD PTR __Last$[esp+20]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [edx], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	mov	eax, DWORD PTR __First$1$[esp+24]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [eax]
	push	ecx
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN42@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 101  :     _Left    = _STD move(_Right);

	mov	edx, DWORD PTR __First$1$[esp+24]
	mov	ecx, DWORD PTR [edi]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [edi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edx], ecx
$LN42@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [ebx]
	push	DWORD PTR [esi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN98@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebx], ecx
$LN98@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6949 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

	push	DWORD PTR [esi]
	push	DWORD PTR [edi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN76@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [edi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [edi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [esi], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [ebx]
	push	ecx
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN76@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebx]
	pop	edi
	mov	DWORD PTR [esi], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6973 : }

	pop	esi
	pop	ebp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebx], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6973 : }

	pop	ebx
	add	esp, 8
	ret	0
$LN2@Guess_medi:

; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [esi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN99@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN99@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6949 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

	push	DWORD PTR [esi]
	push	DWORD PTR [ebx]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN76@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [ebx]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [ebx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [esi], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [edi]
	push	ecx
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN76@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN76@Guess_medi:
	pop	edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6973 : }

	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 8
	ret	0
??$_Guess_median_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z ENDP ; std::_Guess_median_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Next_iter@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z
_TEXT	SEGMENT
??$_Next_iter@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z PROC ; std::_Next_iter<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *>, COMDAT
; __First$ = ecx

; 1541 :     return ++_First;

	lea	eax, DWORD PTR [ecx+4]

; 1542 : }

	ret	0
??$_Next_iter@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z ENDP ; std::_Next_iter<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$iter_swap@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z
_TEXT	SEGMENT
??$iter_swap@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z PROC ; std::iter_swap<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *>, COMDAT
; __Left$ = ecx
; __Right$ = edx

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edx]

; 77   : _CONSTEXPR20 void iter_swap(_FwdIt1 _Left, _FwdIt2 _Right) { // swap *_Left and *_Right

	push	esi

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	esi, DWORD PTR [ecx]

; 101  :     _Left    = _STD move(_Right);

	mov	DWORD PTR [ecx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edx], esi
	pop	esi

; 78   :     swap(*_Left, *_Right);
; 79   : }

	ret	0
??$iter_swap@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ENDP ; std::iter_swap<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$?0AAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU01@$0A@@?$pair@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@QAE@AAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU01@$0A@@?$pair@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@QAE@AAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z PROC ; std::pair<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *>::pair<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *><FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * * &,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * * &,0>, COMDAT
; _this$ = ecx

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	eax, DWORD PTR __Val1$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR __Val2$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	ret	8
??$?0AAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU01@$0A@@?$pair@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@QAE@AAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ENDP ; std::pair<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *>::pair<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *><FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * * &,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * * &,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$move@AAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z
_TEXT	SEGMENT
??$move@AAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z PROC ; std::move<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * &>, COMDAT
; __Arg$ = ecx

; 1397 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	eax, ecx

; 1398 : }

	ret	0
??$move@AAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z ENDP ; std::move<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Move_backward_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
??$_Move_backward_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z PROC ; std::_Move_backward_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 4255 :     auto _Result                = _CSTD memmove(_Dest_ch - _Count, _First_ch, _Count);

	mov	eax, DWORD PTR __Dest$[esp-4]
	sub	edx, ecx
	push	edx
	push	ecx
	sub	eax, edx
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH

; 4351 :     // move [_First, _Last) backwards to [..., _Dest)
; 4352 :     // note: _Move_backward_unchecked has callers other than the move_backward family
; 4353 :     if constexpr (_Ptr_move_cat<_BidIt1, _BidIt2>::_Trivially_copyable) {
; 4354 : #ifdef __cpp_lib_is_constant_evaluated
; 4355 :         if (!_STD is_constant_evaluated())
; 4356 : #endif // __cpp_lib_is_constant_evaluated
; 4357 :         {
; 4358 :             return _Copy_backward_memmove(_First, _Last, _Dest);
; 4359 :         }
; 4360 :     }
; 4361 : 
; 4362 :     while (_First != _Last) {
; 4363 :         *--_Dest = _STD move(*--_Last);
; 4364 :     }
; 4365 : 
; 4366 :     return _Dest;
; 4367 : }

	ret	0
??$_Move_backward_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z ENDP ; std::_Move_backward_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z
_TEXT	SEGMENT
__Top$1$ = -8						; size = 4
tv234 = -4						; size = 4
__Bottom$ = 8						; size = 4
__Val$ = 12						; size = 4
__Pred$ = 16						; size = 4
??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z PROC ; std::_Pop_heap_hole_by_index<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Hole$ = edx

; 5375 :     _RanIt _First, _Iter_diff_t<_RanIt> _Hole, _Iter_diff_t<_RanIt> _Bottom, _Ty&& _Val, _Pr _Pred) {

	sub	esp, 8

; 5376 :     // percolate _Hole to _Bottom, then push _Val
; 5377 :     _STL_INTERNAL_CHECK(_Bottom > 0);
; 5378 : 
; 5379 :     using _Diff      = _Iter_diff_t<_RanIt>;
; 5380 :     const _Diff _Top = _Hole;
; 5381 :     _Diff _Idx       = _Hole;
; 5382 : 
; 5383 :     // Check whether _Idx can have a child before calculating that child's index, since
; 5384 :     // calculating the child's index can trigger integer overflows
; 5385 :     const _Diff _Max_sequence_non_leaf = (_Bottom - 1) >> 1; // shift for codegen

	mov	eax, DWORD PTR __Bottom$[esp+4]
	push	ebx
	push	ebp
	mov	ebx, ecx
	mov	DWORD PTR __Top$1$[esp+16], edx
	lea	ecx, DWORD PTR [eax-1]
	mov	ebp, ecx
	mov	DWORD PTR tv234[esp+16], ecx

; 5386 :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

	mov	ecx, DWORD PTR __Pred$[esp+12]
	push	esi
	mov	esi, edx
	sar	ebp, 1
	push	edi
	mov	edi, esi
	cmp	esi, ebp
	jge	SHORT $LN3@Pop_heap_h
	npad	8
$LL2@Pop_heap_h:

; 5387 :         _Idx = 2 * _Idx + 2;
; 5388 :         if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1)))) {

	push	DWORD PTR [ebx+edi*8+4]
	lea	edi, DWORD PTR [edi*2+2]
	push	DWORD PTR [ebx+edi*4]
	call	ecx
	add	esp, 8
	test	al, al
	je	SHORT $LN4@Pop_heap_h

; 5389 :             --_Idx;

	dec	edi
$LN4@Pop_heap_h:

; 5390 :         }
; 5391 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [ebx+edi*4]
	mov	ecx, DWORD PTR __Pred$[esp+20]
	mov	DWORD PTR [ebx+esi*4], eax

; 5392 :         _Hole             = _Idx;

	mov	esi, edi
	cmp	edi, ebp
	jl	SHORT $LL2@Pop_heap_h
	mov	edx, DWORD PTR __Top$1$[esp+24]
	mov	eax, DWORD PTR __Bottom$[esp+20]
$LN3@Pop_heap_h:

; 5393 :     }
; 5394 : 
; 5395 :     if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it

	cmp	edi, ebp
	jne	SHORT $LN5@Pop_heap_h
	test	al, 1
	jne	SHORT $LN5@Pop_heap_h

; 5396 :         *(_First + _Hole) = _STD move(*(_First + (_Bottom - 1)));

	mov	eax, DWORD PTR [ebx+eax*4-4]
	mov	DWORD PTR [ebx+esi*4], eax

; 5397 :         _Hole             = _Bottom - 1;

	mov	esi, DWORD PTR tv234[esp+24]
$LN5@Pop_heap_h:

; 5268 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

	cmp	edx, esi
	jge	SHORT $LN20@Pop_heap_h
	mov	ebp, DWORD PTR __Val$[esp+20]
	npad	5
$LL10@Pop_heap_h:
	push	DWORD PTR [ebp]
	lea	edi, DWORD PTR [esi-1]
	sar	edi, 1
	push	DWORD PTR [ebx+edi*4]
	call	ecx
	add	esp, 8
	test	al, al
	je	SHORT $LN21@Pop_heap_h

; 5269 :          _Idx = (_Hole - 1) >> 1) { // shift for codegen
; 5270 :         // move _Hole up to parent
; 5271 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [ebx+edi*4]
	mov	ecx, DWORD PTR __Pred$[esp+20]
	mov	DWORD PTR [ebx+esi*4], eax

; 5272 :         _Hole             = _Idx;

	mov	esi, edi
	cmp	DWORD PTR __Top$1$[esp+24], edi
	jl	SHORT $LL10@Pop_heap_h
$LN21@Pop_heap_h:

; 5398 :     }
; 5399 : 
; 5400 :     _Push_heap_by_index(_First, _Hole, _Top, _STD forward<_Ty>(_Val), _Pred);
; 5401 : }

	mov	eax, DWORD PTR [ebp]
	pop	edi
	mov	DWORD PTR [ebx+esi*4], eax
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 8
	ret	0
$LN20@Pop_heap_h:

; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	eax, DWORD PTR __Val$[esp+20]
	pop	edi
	mov	eax, DWORD PTR [eax]

; 5398 :     }
; 5399 : 
; 5400 :     _Push_heap_by_index(_First, _Hole, _Top, _STD forward<_Ty>(_Val), _Pred);
; 5401 : }

	mov	DWORD PTR [ebx+esi*4], eax
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 8
	ret	0
??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ENDP ; std::_Pop_heap_hole_by_index<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Pop_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z
_TEXT	SEGMENT
__Val$1 = -4						; size = 4
__Pred$ = 8						; size = 4
??$_Pop_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z PROC ; std::_Pop_heap_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 5415 : _CONSTEXPR20 void _Pop_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

	push	ecx

; 5416 :     // pop *_First to *(_Last - 1) and reheap
; 5417 :     if (2 <= _Last - _First) {

	mov	eax, edx
	sub	eax, ecx
	and	eax, -4					; fffffffcH
	cmp	eax, 8
	jl	SHORT $LN2@Pop_heap_u

; 5418 :         --_Last;
; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	eax, DWORD PTR [edx-4]
	sub	edx, 4

; 5410 :     _Pop_heap_hole_by_index(

	push	DWORD PTR __Pred$[esp]

; 5418 :         --_Last;
; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	DWORD PTR __Val$1[esp+8], eax

; 5408 :     *_Dest      = _STD move(*_First);

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax

; 5409 :     using _Diff = _Iter_diff_t<_RanIt>;
; 5410 :     _Pop_heap_hole_by_index(

	sub	edx, ecx
	lea	eax, DWORD PTR __Val$1[esp+8]
	sar	edx, 2
	push	eax
	push	edx
	xor	edx, edx
	call	??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ; std::_Pop_heap_hole_by_index<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *)>
	add	esp, 12					; 0000000cH
$LN2@Pop_heap_u:

; 5420 :         _Pop_heap_hole_unchecked(_First, _Last, _Last, _STD move(_Val), _Pred);
; 5421 :     }
; 5422 : }

	pop	ecx
	ret	0
??$_Pop_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z ENDP ; std::_Pop_heap_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Prev_iter@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z
_TEXT	SEGMENT
??$_Prev_iter@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z PROC ; std::_Prev_iter<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *>, COMDAT
; __First$ = ecx

; 1554 :     return --_First;

	lea	eax, DWORD PTR [ecx-4]

; 1555 : }

	ret	0
??$_Prev_iter@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z ENDP ; std::_Prev_iter<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Guess_median_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z
_TEXT	SEGMENT
tv426 = -8						; size = 4
tv422 = -4						; size = 4
__First$1$ = -4						; size = 4
__Last$ = 8						; size = 4
__Pred$ = 12						; size = 4
??$_Guess_median_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z PROC ; std::_Guess_median_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Mid$ = edx

; 6959 : _CONSTEXPR20 void _Guess_median_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred) {

	sub	esp, 8
	push	ebx

; 6960 :     // sort median element to middle
; 6961 :     using _Diff        = _Iter_diff_t<_RanIt>;
; 6962 :     const _Diff _Count = _Last - _First;

	mov	ebx, DWORD PTR __Last$[esp+8]
	mov	eax, ebx
	push	ebp

; 6963 :     if (40 < _Count) { // Tukey's ninther

	mov	ebp, DWORD PTR __Pred$[esp+12]
	push	esi
	push	edi
	mov	edi, ecx
	mov	esi, edx
	sub	eax, edi
	sar	eax, 2
	mov	ecx, DWORD PTR [edi]
	push	ecx
	cmp	eax, 40					; 00000028H
	jle	$LN2@Guess_medi

; 6964 :         const _Diff _Step     = (_Count + 1) >> 3; // +1 can't overflow because range was made inclusive in caller

	inc	eax
	sar	eax, 3

; 6965 :         const _Diff _Two_step = _Step << 1; // note: intentionally discards low-order bit
; 6966 :         _Med3_unchecked(_First, _First + _Step, _First + _Two_step, _Pred);

	lea	edx, DWORD PTR [eax*8]
	shl	eax, 2

; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [eax+edi]

; 6965 :         const _Diff _Two_step = _Step << 1; // note: intentionally discards low-order bit
; 6966 :         _Med3_unchecked(_First, _First + _Step, _First + _Two_step, _Pred);

	lea	ebx, DWORD PTR [eax+edi]
	mov	DWORD PTR tv422[esp+32], edx
	mov	DWORD PTR tv426[esp+32], eax

; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN95@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [ebx]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [ebx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN95@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6949 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

	mov	eax, DWORD PTR tv422[esp+24]
	push	DWORD PTR [ebx]
	push	DWORD PTR [eax+edi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN8@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	edx, DWORD PTR tv422[esp+24]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebx]
	mov	ecx, DWORD PTR [edx+edi]
	mov	DWORD PTR [edx+edi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebx], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [edi]
	push	ecx
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN8@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [ebx]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [ebx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN8@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6967 :         _Med3_unchecked(_Mid - _Step, _Mid, _Mid + _Step, _Pred);

	mov	edi, esi
	sub	edi, DWORD PTR tv426[esp+24]

; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [edi]
	push	DWORD PTR [esi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN96@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN96@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6949 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

	mov	eax, DWORD PTR tv426[esp+24]
	push	DWORD PTR [esi]
	push	DWORD PTR [eax+esi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN25@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	edx, DWORD PTR tv426[esp+24]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [edx+esi]
	mov	DWORD PTR [edx+esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [esi], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [edi]
	push	ecx
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN25@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN25@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6968 :         _Med3_unchecked(_Last - _Two_step, _Last - _Step, _Last, _Pred);

	mov	eax, DWORD PTR __Last$[esp+20]
	mov	edi, eax
	sub	eax, DWORD PTR tv422[esp+24]
	sub	edi, DWORD PTR tv426[esp+24]
	mov	DWORD PTR __First$1$[esp+24], eax

; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [eax]
	push	DWORD PTR [edi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN97@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 101  :     _Left    = _STD move(_Right);

	mov	edx, DWORD PTR __First$1$[esp+24]
	mov	ecx, DWORD PTR [edi]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [edi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edx], ecx
$LN97@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6949 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

	mov	eax, DWORD PTR __Last$[esp+20]
	push	DWORD PTR [edi]
	push	DWORD PTR [eax]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN42@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	edx, DWORD PTR __Last$[esp+20]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [edx], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	mov	eax, DWORD PTR __First$1$[esp+24]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [eax]
	push	ecx
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN42@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 101  :     _Left    = _STD move(_Right);

	mov	edx, DWORD PTR __First$1$[esp+24]
	mov	ecx, DWORD PTR [edi]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [edi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edx], ecx
$LN42@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [ebx]
	push	DWORD PTR [esi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN98@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebx], ecx
$LN98@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6949 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

	push	DWORD PTR [esi]
	push	DWORD PTR [edi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN76@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [edi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [edi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [esi], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [ebx]
	push	ecx
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN76@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebx]
	pop	edi
	mov	DWORD PTR [esi], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6973 : }

	pop	esi
	pop	ebp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebx], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6973 : }

	pop	ebx
	add	esp, 8
	ret	0
$LN2@Guess_medi:

; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [esi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN99@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN99@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6949 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

	push	DWORD PTR [esi]
	push	DWORD PTR [ebx]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN76@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [ebx]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [ebx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [esi], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [edi]
	push	ecx
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN76@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN76@Guess_medi:
	pop	edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6973 : }

	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 8
	ret	0
??$_Guess_median_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z ENDP ; std::_Guess_median_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Next_iter@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z
_TEXT	SEGMENT
??$_Next_iter@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z PROC ; std::_Next_iter<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *>, COMDAT
; __First$ = ecx

; 1541 :     return ++_First;

	lea	eax, DWORD PTR [ecx+4]

; 1542 : }

	ret	0
??$_Next_iter@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z ENDP ; std::_Next_iter<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$iter_swap@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z
_TEXT	SEGMENT
??$iter_swap@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z PROC ; std::iter_swap<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *>, COMDAT
; __Left$ = ecx
; __Right$ = edx

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edx]

; 77   : _CONSTEXPR20 void iter_swap(_FwdIt1 _Left, _FwdIt2 _Right) { // swap *_Left and *_Right

	push	esi

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	esi, DWORD PTR [ecx]

; 101  :     _Left    = _STD move(_Right);

	mov	DWORD PTR [ecx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edx], esi
	pop	esi

; 78   :     swap(*_Left, *_Right);
; 79   : }

	ret	0
??$iter_swap@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ENDP ; std::iter_swap<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$?0AAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU01@$0A@@?$pair@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@QAE@AAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU01@$0A@@?$pair@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@QAE@AAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z PROC ; std::pair<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *>::pair<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *><FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * * &,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * * &,0>, COMDAT
; _this$ = ecx

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	eax, DWORD PTR __Val1$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR __Val2$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	ret	8
??$?0AAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU01@$0A@@?$pair@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@QAE@AAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ENDP ; std::pair<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *>::pair<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *><FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * * &,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * * &,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$move@AAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z
_TEXT	SEGMENT
??$move@AAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z PROC ; std::move<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * &>, COMDAT
; __Arg$ = ecx

; 1397 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	eax, ecx

; 1398 : }

	ret	0
??$move@AAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z ENDP ; std::move<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Move_backward_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
??$_Move_backward_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z PROC ; std::_Move_backward_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 4255 :     auto _Result                = _CSTD memmove(_Dest_ch - _Count, _First_ch, _Count);

	mov	eax, DWORD PTR __Dest$[esp-4]
	sub	edx, ecx
	push	edx
	push	ecx
	sub	eax, edx
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH

; 4351 :     // move [_First, _Last) backwards to [..., _Dest)
; 4352 :     // note: _Move_backward_unchecked has callers other than the move_backward family
; 4353 :     if constexpr (_Ptr_move_cat<_BidIt1, _BidIt2>::_Trivially_copyable) {
; 4354 : #ifdef __cpp_lib_is_constant_evaluated
; 4355 :         if (!_STD is_constant_evaluated())
; 4356 : #endif // __cpp_lib_is_constant_evaluated
; 4357 :         {
; 4358 :             return _Copy_backward_memmove(_First, _Last, _Dest);
; 4359 :         }
; 4360 :     }
; 4361 : 
; 4362 :     while (_First != _Last) {
; 4363 :         *--_Dest = _STD move(*--_Last);
; 4364 :     }
; 4365 : 
; 4366 :     return _Dest;
; 4367 : }

	ret	0
??$_Move_backward_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z ENDP ; std::_Move_backward_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z
_TEXT	SEGMENT
__Top$1$ = -8						; size = 4
tv234 = -4						; size = 4
__Bottom$ = 8						; size = 4
__Val$ = 12						; size = 4
__Pred$ = 16						; size = 4
??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z PROC ; std::_Pop_heap_hole_by_index<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Hole$ = edx

; 5375 :     _RanIt _First, _Iter_diff_t<_RanIt> _Hole, _Iter_diff_t<_RanIt> _Bottom, _Ty&& _Val, _Pr _Pred) {

	sub	esp, 8

; 5376 :     // percolate _Hole to _Bottom, then push _Val
; 5377 :     _STL_INTERNAL_CHECK(_Bottom > 0);
; 5378 : 
; 5379 :     using _Diff      = _Iter_diff_t<_RanIt>;
; 5380 :     const _Diff _Top = _Hole;
; 5381 :     _Diff _Idx       = _Hole;
; 5382 : 
; 5383 :     // Check whether _Idx can have a child before calculating that child's index, since
; 5384 :     // calculating the child's index can trigger integer overflows
; 5385 :     const _Diff _Max_sequence_non_leaf = (_Bottom - 1) >> 1; // shift for codegen

	mov	eax, DWORD PTR __Bottom$[esp+4]
	push	ebx
	push	ebp
	mov	ebx, ecx
	mov	DWORD PTR __Top$1$[esp+16], edx
	lea	ecx, DWORD PTR [eax-1]
	mov	ebp, ecx
	mov	DWORD PTR tv234[esp+16], ecx

; 5386 :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

	mov	ecx, DWORD PTR __Pred$[esp+12]
	push	esi
	mov	esi, edx
	sar	ebp, 1
	push	edi
	mov	edi, esi
	cmp	esi, ebp
	jge	SHORT $LN3@Pop_heap_h
	npad	8
$LL2@Pop_heap_h:

; 5387 :         _Idx = 2 * _Idx + 2;
; 5388 :         if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1)))) {

	push	DWORD PTR [ebx+edi*8+4]
	lea	edi, DWORD PTR [edi*2+2]
	push	DWORD PTR [ebx+edi*4]
	call	ecx
	add	esp, 8
	test	al, al
	je	SHORT $LN4@Pop_heap_h

; 5389 :             --_Idx;

	dec	edi
$LN4@Pop_heap_h:

; 5390 :         }
; 5391 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [ebx+edi*4]
	mov	ecx, DWORD PTR __Pred$[esp+20]
	mov	DWORD PTR [ebx+esi*4], eax

; 5392 :         _Hole             = _Idx;

	mov	esi, edi
	cmp	edi, ebp
	jl	SHORT $LL2@Pop_heap_h
	mov	edx, DWORD PTR __Top$1$[esp+24]
	mov	eax, DWORD PTR __Bottom$[esp+20]
$LN3@Pop_heap_h:

; 5393 :     }
; 5394 : 
; 5395 :     if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it

	cmp	edi, ebp
	jne	SHORT $LN5@Pop_heap_h
	test	al, 1
	jne	SHORT $LN5@Pop_heap_h

; 5396 :         *(_First + _Hole) = _STD move(*(_First + (_Bottom - 1)));

	mov	eax, DWORD PTR [ebx+eax*4-4]
	mov	DWORD PTR [ebx+esi*4], eax

; 5397 :         _Hole             = _Bottom - 1;

	mov	esi, DWORD PTR tv234[esp+24]
$LN5@Pop_heap_h:

; 5268 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

	cmp	edx, esi
	jge	SHORT $LN20@Pop_heap_h
	mov	ebp, DWORD PTR __Val$[esp+20]
	npad	5
$LL10@Pop_heap_h:
	push	DWORD PTR [ebp]
	lea	edi, DWORD PTR [esi-1]
	sar	edi, 1
	push	DWORD PTR [ebx+edi*4]
	call	ecx
	add	esp, 8
	test	al, al
	je	SHORT $LN21@Pop_heap_h

; 5269 :          _Idx = (_Hole - 1) >> 1) { // shift for codegen
; 5270 :         // move _Hole up to parent
; 5271 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [ebx+edi*4]
	mov	ecx, DWORD PTR __Pred$[esp+20]
	mov	DWORD PTR [ebx+esi*4], eax

; 5272 :         _Hole             = _Idx;

	mov	esi, edi
	cmp	DWORD PTR __Top$1$[esp+24], edi
	jl	SHORT $LL10@Pop_heap_h
$LN21@Pop_heap_h:

; 5398 :     }
; 5399 : 
; 5400 :     _Push_heap_by_index(_First, _Hole, _Top, _STD forward<_Ty>(_Val), _Pred);
; 5401 : }

	mov	eax, DWORD PTR [ebp]
	pop	edi
	mov	DWORD PTR [ebx+esi*4], eax
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 8
	ret	0
$LN20@Pop_heap_h:

; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	eax, DWORD PTR __Val$[esp+20]
	pop	edi
	mov	eax, DWORD PTR [eax]

; 5398 :     }
; 5399 : 
; 5400 :     _Push_heap_by_index(_First, _Hole, _Top, _STD forward<_Ty>(_Val), _Pred);
; 5401 : }

	mov	DWORD PTR [ebx+esi*4], eax
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 8
	ret	0
??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ENDP ; std::_Pop_heap_hole_by_index<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Pop_heap_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z
_TEXT	SEGMENT
__Val$1 = -4						; size = 4
__Pred$ = 8						; size = 4
??$_Pop_heap_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z PROC ; std::_Pop_heap_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 5415 : _CONSTEXPR20 void _Pop_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

	push	ecx

; 5416 :     // pop *_First to *(_Last - 1) and reheap
; 5417 :     if (2 <= _Last - _First) {

	mov	eax, edx
	sub	eax, ecx
	and	eax, -4					; fffffffcH
	cmp	eax, 8
	jl	SHORT $LN2@Pop_heap_u

; 5418 :         --_Last;
; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	eax, DWORD PTR [edx-4]
	sub	edx, 4

; 5410 :     _Pop_heap_hole_by_index(

	push	DWORD PTR __Pred$[esp]

; 5418 :         --_Last;
; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	DWORD PTR __Val$1[esp+8], eax

; 5408 :     *_Dest      = _STD move(*_First);

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax

; 5409 :     using _Diff = _Iter_diff_t<_RanIt>;
; 5410 :     _Pop_heap_hole_by_index(

	sub	edx, ecx
	lea	eax, DWORD PTR __Val$1[esp+8]
	sar	edx, 2
	push	eax
	push	edx
	xor	edx, edx
	call	??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ; std::_Pop_heap_hole_by_index<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *)>
	add	esp, 12					; 0000000cH
$LN2@Pop_heap_u:

; 5420 :         _Pop_heap_hole_unchecked(_First, _Last, _Last, _STD move(_Val), _Pred);
; 5421 :     }
; 5422 : }

	pop	ecx
	ret	0
??$_Pop_heap_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z ENDP ; std::_Pop_heap_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Prev_iter@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z
_TEXT	SEGMENT
??$_Prev_iter@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z PROC ; std::_Prev_iter<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *>, COMDAT
; __First$ = ecx

; 1554 :     return --_First;

	lea	eax, DWORD PTR [ecx-4]

; 1555 : }

	ret	0
??$_Prev_iter@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z ENDP ; std::_Prev_iter<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Guess_median_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z
_TEXT	SEGMENT
tv426 = -8						; size = 4
tv422 = -4						; size = 4
__First$1$ = -4						; size = 4
__Last$ = 8						; size = 4
__Pred$ = 12						; size = 4
??$_Guess_median_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z PROC ; std::_Guess_median_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Mid$ = edx

; 6959 : _CONSTEXPR20 void _Guess_median_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred) {

	sub	esp, 8
	push	ebx

; 6960 :     // sort median element to middle
; 6961 :     using _Diff        = _Iter_diff_t<_RanIt>;
; 6962 :     const _Diff _Count = _Last - _First;

	mov	ebx, DWORD PTR __Last$[esp+8]
	mov	eax, ebx
	push	ebp

; 6963 :     if (40 < _Count) { // Tukey's ninther

	mov	ebp, DWORD PTR __Pred$[esp+12]
	push	esi
	push	edi
	mov	edi, ecx
	mov	esi, edx
	sub	eax, edi
	sar	eax, 2
	mov	ecx, DWORD PTR [edi]
	push	ecx
	cmp	eax, 40					; 00000028H
	jle	$LN2@Guess_medi

; 6964 :         const _Diff _Step     = (_Count + 1) >> 3; // +1 can't overflow because range was made inclusive in caller

	inc	eax
	sar	eax, 3

; 6965 :         const _Diff _Two_step = _Step << 1; // note: intentionally discards low-order bit
; 6966 :         _Med3_unchecked(_First, _First + _Step, _First + _Two_step, _Pred);

	lea	edx, DWORD PTR [eax*8]
	shl	eax, 2

; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [eax+edi]

; 6965 :         const _Diff _Two_step = _Step << 1; // note: intentionally discards low-order bit
; 6966 :         _Med3_unchecked(_First, _First + _Step, _First + _Two_step, _Pred);

	lea	ebx, DWORD PTR [eax+edi]
	mov	DWORD PTR tv422[esp+32], edx
	mov	DWORD PTR tv426[esp+32], eax

; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN95@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [ebx]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [ebx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN95@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6949 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

	mov	eax, DWORD PTR tv422[esp+24]
	push	DWORD PTR [ebx]
	push	DWORD PTR [eax+edi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN8@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	edx, DWORD PTR tv422[esp+24]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebx]
	mov	ecx, DWORD PTR [edx+edi]
	mov	DWORD PTR [edx+edi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebx], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [edi]
	push	ecx
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN8@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [ebx]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [ebx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN8@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6967 :         _Med3_unchecked(_Mid - _Step, _Mid, _Mid + _Step, _Pred);

	mov	edi, esi
	sub	edi, DWORD PTR tv426[esp+24]

; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [edi]
	push	DWORD PTR [esi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN96@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN96@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6949 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

	mov	eax, DWORD PTR tv426[esp+24]
	push	DWORD PTR [esi]
	push	DWORD PTR [eax+esi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN25@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	edx, DWORD PTR tv426[esp+24]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [edx+esi]
	mov	DWORD PTR [edx+esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [esi], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [edi]
	push	ecx
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN25@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN25@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6968 :         _Med3_unchecked(_Last - _Two_step, _Last - _Step, _Last, _Pred);

	mov	eax, DWORD PTR __Last$[esp+20]
	mov	edi, eax
	sub	eax, DWORD PTR tv422[esp+24]
	sub	edi, DWORD PTR tv426[esp+24]
	mov	DWORD PTR __First$1$[esp+24], eax

; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [eax]
	push	DWORD PTR [edi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN97@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 101  :     _Left    = _STD move(_Right);

	mov	edx, DWORD PTR __First$1$[esp+24]
	mov	ecx, DWORD PTR [edi]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [edi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edx], ecx
$LN97@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6949 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

	mov	eax, DWORD PTR __Last$[esp+20]
	push	DWORD PTR [edi]
	push	DWORD PTR [eax]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN42@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	edx, DWORD PTR __Last$[esp+20]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [edx], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	mov	eax, DWORD PTR __First$1$[esp+24]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [eax]
	push	ecx
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN42@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 101  :     _Left    = _STD move(_Right);

	mov	edx, DWORD PTR __First$1$[esp+24]
	mov	ecx, DWORD PTR [edi]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [edi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edx], ecx
$LN42@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [ebx]
	push	DWORD PTR [esi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN98@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebx], ecx
$LN98@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6949 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

	push	DWORD PTR [esi]
	push	DWORD PTR [edi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN76@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [edi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [edi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [esi], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [ebx]
	push	ecx
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN76@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebx]
	pop	edi
	mov	DWORD PTR [esi], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6973 : }

	pop	esi
	pop	ebp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebx], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6973 : }

	pop	ebx
	add	esp, 8
	ret	0
$LN2@Guess_medi:

; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [esi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN99@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN99@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6949 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

	push	DWORD PTR [esi]
	push	DWORD PTR [ebx]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN76@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [ebx]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [ebx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [esi], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [edi]
	push	ecx
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN76@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN76@Guess_medi:
	pop	edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6973 : }

	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 8
	ret	0
??$_Guess_median_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z ENDP ; std::_Guess_median_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Next_iter@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z
_TEXT	SEGMENT
??$_Next_iter@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z PROC ; std::_Next_iter<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *>, COMDAT
; __First$ = ecx

; 1541 :     return ++_First;

	lea	eax, DWORD PTR [ecx+4]

; 1542 : }

	ret	0
??$_Next_iter@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z ENDP ; std::_Next_iter<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$iter_swap@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@0@Z
_TEXT	SEGMENT
??$iter_swap@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@0@Z PROC ; std::iter_swap<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *>, COMDAT
; __Left$ = ecx
; __Right$ = edx

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edx]

; 77   : _CONSTEXPR20 void iter_swap(_FwdIt1 _Left, _FwdIt2 _Right) { // swap *_Left and *_Right

	push	esi

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	esi, DWORD PTR [ecx]

; 101  :     _Left    = _STD move(_Right);

	mov	DWORD PTR [ecx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edx], esi
	pop	esi

; 78   :     swap(*_Left, *_Right);
; 79   : }

	ret	0
??$iter_swap@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ENDP ; std::iter_swap<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$?0AAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU01@$0A@@?$pair@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@QAE@AAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@0@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU01@$0A@@?$pair@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@QAE@AAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@0@Z PROC ; std::pair<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *>::pair<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *><FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * * &,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * * &,0>, COMDAT
; _this$ = ecx

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	eax, DWORD PTR __Val1$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR __Val2$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	ret	8
??$?0AAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU01@$0A@@?$pair@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@QAE@AAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ENDP ; std::pair<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *>::pair<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *><FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * * &,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * * &,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$move@AAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z
_TEXT	SEGMENT
??$move@AAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z PROC ; std::move<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * &>, COMDAT
; __Arg$ = ecx

; 1397 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	eax, ecx

; 1398 : }

	ret	0
??$move@AAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z ENDP ; std::move<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Move_backward_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
??$_Move_backward_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z PROC ; std::_Move_backward_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 4255 :     auto _Result                = _CSTD memmove(_Dest_ch - _Count, _First_ch, _Count);

	mov	eax, DWORD PTR __Dest$[esp-4]
	sub	edx, ecx
	push	edx
	push	ecx
	sub	eax, edx
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH

; 4351 :     // move [_First, _Last) backwards to [..., _Dest)
; 4352 :     // note: _Move_backward_unchecked has callers other than the move_backward family
; 4353 :     if constexpr (_Ptr_move_cat<_BidIt1, _BidIt2>::_Trivially_copyable) {
; 4354 : #ifdef __cpp_lib_is_constant_evaluated
; 4355 :         if (!_STD is_constant_evaluated())
; 4356 : #endif // __cpp_lib_is_constant_evaluated
; 4357 :         {
; 4358 :             return _Copy_backward_memmove(_First, _Last, _Dest);
; 4359 :         }
; 4360 :     }
; 4361 : 
; 4362 :     while (_First != _Last) {
; 4363 :         *--_Dest = _STD move(*--_Last);
; 4364 :     }
; 4365 : 
; 4366 :     return _Dest;
; 4367 : }

	ret	0
??$_Move_backward_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z ENDP ; std::_Move_backward_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z
_TEXT	SEGMENT
__Top$1$ = -8						; size = 4
tv234 = -4						; size = 4
__Bottom$ = 8						; size = 4
__Val$ = 12						; size = 4
__Pred$ = 16						; size = 4
??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z PROC ; std::_Pop_heap_hole_by_index<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Hole$ = edx

; 5375 :     _RanIt _First, _Iter_diff_t<_RanIt> _Hole, _Iter_diff_t<_RanIt> _Bottom, _Ty&& _Val, _Pr _Pred) {

	sub	esp, 8

; 5376 :     // percolate _Hole to _Bottom, then push _Val
; 5377 :     _STL_INTERNAL_CHECK(_Bottom > 0);
; 5378 : 
; 5379 :     using _Diff      = _Iter_diff_t<_RanIt>;
; 5380 :     const _Diff _Top = _Hole;
; 5381 :     _Diff _Idx       = _Hole;
; 5382 : 
; 5383 :     // Check whether _Idx can have a child before calculating that child's index, since
; 5384 :     // calculating the child's index can trigger integer overflows
; 5385 :     const _Diff _Max_sequence_non_leaf = (_Bottom - 1) >> 1; // shift for codegen

	mov	eax, DWORD PTR __Bottom$[esp+4]
	push	ebx
	push	ebp
	mov	ebx, ecx
	mov	DWORD PTR __Top$1$[esp+16], edx
	lea	ecx, DWORD PTR [eax-1]
	mov	ebp, ecx
	mov	DWORD PTR tv234[esp+16], ecx

; 5386 :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

	mov	ecx, DWORD PTR __Pred$[esp+12]
	push	esi
	mov	esi, edx
	sar	ebp, 1
	push	edi
	mov	edi, esi
	cmp	esi, ebp
	jge	SHORT $LN3@Pop_heap_h
	npad	8
$LL2@Pop_heap_h:

; 5387 :         _Idx = 2 * _Idx + 2;
; 5388 :         if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1)))) {

	push	DWORD PTR [ebx+edi*8+4]
	lea	edi, DWORD PTR [edi*2+2]
	push	DWORD PTR [ebx+edi*4]
	call	ecx
	add	esp, 8
	test	al, al
	je	SHORT $LN4@Pop_heap_h

; 5389 :             --_Idx;

	dec	edi
$LN4@Pop_heap_h:

; 5390 :         }
; 5391 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [ebx+edi*4]
	mov	ecx, DWORD PTR __Pred$[esp+20]
	mov	DWORD PTR [ebx+esi*4], eax

; 5392 :         _Hole             = _Idx;

	mov	esi, edi
	cmp	edi, ebp
	jl	SHORT $LL2@Pop_heap_h
	mov	edx, DWORD PTR __Top$1$[esp+24]
	mov	eax, DWORD PTR __Bottom$[esp+20]
$LN3@Pop_heap_h:

; 5393 :     }
; 5394 : 
; 5395 :     if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it

	cmp	edi, ebp
	jne	SHORT $LN5@Pop_heap_h
	test	al, 1
	jne	SHORT $LN5@Pop_heap_h

; 5396 :         *(_First + _Hole) = _STD move(*(_First + (_Bottom - 1)));

	mov	eax, DWORD PTR [ebx+eax*4-4]
	mov	DWORD PTR [ebx+esi*4], eax

; 5397 :         _Hole             = _Bottom - 1;

	mov	esi, DWORD PTR tv234[esp+24]
$LN5@Pop_heap_h:

; 5268 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

	cmp	edx, esi
	jge	SHORT $LN20@Pop_heap_h
	mov	ebp, DWORD PTR __Val$[esp+20]
	npad	5
$LL10@Pop_heap_h:
	push	DWORD PTR [ebp]
	lea	edi, DWORD PTR [esi-1]
	sar	edi, 1
	push	DWORD PTR [ebx+edi*4]
	call	ecx
	add	esp, 8
	test	al, al
	je	SHORT $LN21@Pop_heap_h

; 5269 :          _Idx = (_Hole - 1) >> 1) { // shift for codegen
; 5270 :         // move _Hole up to parent
; 5271 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [ebx+edi*4]
	mov	ecx, DWORD PTR __Pred$[esp+20]
	mov	DWORD PTR [ebx+esi*4], eax

; 5272 :         _Hole             = _Idx;

	mov	esi, edi
	cmp	DWORD PTR __Top$1$[esp+24], edi
	jl	SHORT $LL10@Pop_heap_h
$LN21@Pop_heap_h:

; 5398 :     }
; 5399 : 
; 5400 :     _Push_heap_by_index(_First, _Hole, _Top, _STD forward<_Ty>(_Val), _Pred);
; 5401 : }

	mov	eax, DWORD PTR [ebp]
	pop	edi
	mov	DWORD PTR [ebx+esi*4], eax
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 8
	ret	0
$LN20@Pop_heap_h:

; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	eax, DWORD PTR __Val$[esp+20]
	pop	edi
	mov	eax, DWORD PTR [eax]

; 5398 :     }
; 5399 : 
; 5400 :     _Push_heap_by_index(_First, _Hole, _Top, _STD forward<_Ty>(_Val), _Pred);
; 5401 : }

	mov	DWORD PTR [ebx+esi*4], eax
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 8
	ret	0
??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ENDP ; std::_Pop_heap_hole_by_index<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Pop_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z
_TEXT	SEGMENT
__Val$1 = -4						; size = 4
__Pred$ = 8						; size = 4
??$_Pop_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z PROC ; std::_Pop_heap_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 5415 : _CONSTEXPR20 void _Pop_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

	push	ecx

; 5416 :     // pop *_First to *(_Last - 1) and reheap
; 5417 :     if (2 <= _Last - _First) {

	mov	eax, edx
	sub	eax, ecx
	and	eax, -4					; fffffffcH
	cmp	eax, 8
	jl	SHORT $LN2@Pop_heap_u

; 5418 :         --_Last;
; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	eax, DWORD PTR [edx-4]
	sub	edx, 4

; 5410 :     _Pop_heap_hole_by_index(

	push	DWORD PTR __Pred$[esp]

; 5418 :         --_Last;
; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	DWORD PTR __Val$1[esp+8], eax

; 5408 :     *_Dest      = _STD move(*_First);

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax

; 5409 :     using _Diff = _Iter_diff_t<_RanIt>;
; 5410 :     _Pop_heap_hole_by_index(

	sub	edx, ecx
	lea	eax, DWORD PTR __Val$1[esp+8]
	sar	edx, 2
	push	eax
	push	edx
	xor	edx, edx
	call	??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ; std::_Pop_heap_hole_by_index<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *)>
	add	esp, 12					; 0000000cH
$LN2@Pop_heap_u:

; 5420 :         _Pop_heap_hole_unchecked(_First, _Last, _Last, _STD move(_Val), _Pred);
; 5421 :     }
; 5422 : }

	pop	ecx
	ret	0
??$_Pop_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z ENDP ; std::_Pop_heap_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Prev_iter@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z
_TEXT	SEGMENT
??$_Prev_iter@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z PROC ; std::_Prev_iter<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *>, COMDAT
; __First$ = ecx

; 1554 :     return --_First;

	lea	eax, DWORD PTR [ecx-4]

; 1555 : }

	ret	0
??$_Prev_iter@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z ENDP ; std::_Prev_iter<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Guess_median_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z
_TEXT	SEGMENT
tv426 = -8						; size = 4
tv422 = -4						; size = 4
__First$1$ = -4						; size = 4
__Last$ = 8						; size = 4
__Pred$ = 12						; size = 4
??$_Guess_median_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z PROC ; std::_Guess_median_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Mid$ = edx

; 6959 : _CONSTEXPR20 void _Guess_median_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred) {

	sub	esp, 8
	push	ebx

; 6960 :     // sort median element to middle
; 6961 :     using _Diff        = _Iter_diff_t<_RanIt>;
; 6962 :     const _Diff _Count = _Last - _First;

	mov	ebx, DWORD PTR __Last$[esp+8]
	mov	eax, ebx
	push	ebp

; 6963 :     if (40 < _Count) { // Tukey's ninther

	mov	ebp, DWORD PTR __Pred$[esp+12]
	push	esi
	push	edi
	mov	edi, ecx
	mov	esi, edx
	sub	eax, edi
	sar	eax, 2
	mov	ecx, DWORD PTR [edi]
	push	ecx
	cmp	eax, 40					; 00000028H
	jle	$LN2@Guess_medi

; 6964 :         const _Diff _Step     = (_Count + 1) >> 3; // +1 can't overflow because range was made inclusive in caller

	inc	eax
	sar	eax, 3

; 6965 :         const _Diff _Two_step = _Step << 1; // note: intentionally discards low-order bit
; 6966 :         _Med3_unchecked(_First, _First + _Step, _First + _Two_step, _Pred);

	lea	edx, DWORD PTR [eax*8]
	shl	eax, 2

; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [eax+edi]

; 6965 :         const _Diff _Two_step = _Step << 1; // note: intentionally discards low-order bit
; 6966 :         _Med3_unchecked(_First, _First + _Step, _First + _Two_step, _Pred);

	lea	ebx, DWORD PTR [eax+edi]
	mov	DWORD PTR tv422[esp+32], edx
	mov	DWORD PTR tv426[esp+32], eax

; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN95@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [ebx]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [ebx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN95@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6949 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

	mov	eax, DWORD PTR tv422[esp+24]
	push	DWORD PTR [ebx]
	push	DWORD PTR [eax+edi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN8@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	edx, DWORD PTR tv422[esp+24]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebx]
	mov	ecx, DWORD PTR [edx+edi]
	mov	DWORD PTR [edx+edi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebx], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [edi]
	push	ecx
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN8@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [ebx]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [ebx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN8@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6967 :         _Med3_unchecked(_Mid - _Step, _Mid, _Mid + _Step, _Pred);

	mov	edi, esi
	sub	edi, DWORD PTR tv426[esp+24]

; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [edi]
	push	DWORD PTR [esi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN96@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN96@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6949 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

	mov	eax, DWORD PTR tv426[esp+24]
	push	DWORD PTR [esi]
	push	DWORD PTR [eax+esi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN25@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	edx, DWORD PTR tv426[esp+24]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [edx+esi]
	mov	DWORD PTR [edx+esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [esi], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [edi]
	push	ecx
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN25@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN25@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6968 :         _Med3_unchecked(_Last - _Two_step, _Last - _Step, _Last, _Pred);

	mov	eax, DWORD PTR __Last$[esp+20]
	mov	edi, eax
	sub	eax, DWORD PTR tv422[esp+24]
	sub	edi, DWORD PTR tv426[esp+24]
	mov	DWORD PTR __First$1$[esp+24], eax

; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [eax]
	push	DWORD PTR [edi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN97@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 101  :     _Left    = _STD move(_Right);

	mov	edx, DWORD PTR __First$1$[esp+24]
	mov	ecx, DWORD PTR [edi]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [edi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edx], ecx
$LN97@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6949 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

	mov	eax, DWORD PTR __Last$[esp+20]
	push	DWORD PTR [edi]
	push	DWORD PTR [eax]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN42@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	edx, DWORD PTR __Last$[esp+20]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [edx], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	mov	eax, DWORD PTR __First$1$[esp+24]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [eax]
	push	ecx
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN42@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 101  :     _Left    = _STD move(_Right);

	mov	edx, DWORD PTR __First$1$[esp+24]
	mov	ecx, DWORD PTR [edi]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [edi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edx], ecx
$LN42@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [ebx]
	push	DWORD PTR [esi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN98@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebx], ecx
$LN98@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6949 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

	push	DWORD PTR [esi]
	push	DWORD PTR [edi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN76@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [edi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [edi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [esi], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [ebx]
	push	ecx
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN76@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebx]
	pop	edi
	mov	DWORD PTR [esi], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6973 : }

	pop	esi
	pop	ebp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebx], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6973 : }

	pop	ebx
	add	esp, 8
	ret	0
$LN2@Guess_medi:

; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [esi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN99@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN99@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6949 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

	push	DWORD PTR [esi]
	push	DWORD PTR [ebx]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN76@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [ebx]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [ebx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [esi], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [edi]
	push	ecx
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN76@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN76@Guess_medi:
	pop	edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6973 : }

	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 8
	ret	0
??$_Guess_median_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z ENDP ; std::_Guess_median_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Next_iter@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z
_TEXT	SEGMENT
??$_Next_iter@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z PROC ; std::_Next_iter<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *>, COMDAT
; __First$ = ecx

; 1541 :     return ++_First;

	lea	eax, DWORD PTR [ecx+4]

; 1542 : }

	ret	0
??$_Next_iter@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z ENDP ; std::_Next_iter<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$iter_swap@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@Z
_TEXT	SEGMENT
??$iter_swap@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@Z PROC ; std::iter_swap<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *>, COMDAT
; __Left$ = ecx
; __Right$ = edx

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edx]

; 77   : _CONSTEXPR20 void iter_swap(_FwdIt1 _Left, _FwdIt2 _Right) { // swap *_Left and *_Right

	push	esi

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	esi, DWORD PTR [ecx]

; 101  :     _Left    = _STD move(_Right);

	mov	DWORD PTR [ecx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edx], esi
	pop	esi

; 78   :     swap(*_Left, *_Right);
; 79   : }

	ret	0
??$iter_swap@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ENDP ; std::iter_swap<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$?0AAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU01@$0A@@?$pair@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@QAE@AAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU01@$0A@@?$pair@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@QAE@AAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@Z PROC ; std::pair<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *>::pair<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *><FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * * &,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * * &,0>, COMDAT
; _this$ = ecx

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	eax, DWORD PTR __Val1$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR __Val2$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	ret	8
??$?0AAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU01@$0A@@?$pair@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@QAE@AAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ENDP ; std::pair<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *>::pair<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *><FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * * &,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * * &,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$move@AAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z
_TEXT	SEGMENT
??$move@AAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z PROC ; std::move<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * &>, COMDAT
; __Arg$ = ecx

; 1397 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	eax, ecx

; 1398 : }

	ret	0
??$move@AAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z ENDP ; std::move<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Move_backward_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
??$_Move_backward_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z PROC ; std::_Move_backward_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 4255 :     auto _Result                = _CSTD memmove(_Dest_ch - _Count, _First_ch, _Count);

	mov	eax, DWORD PTR __Dest$[esp-4]
	sub	edx, ecx
	push	edx
	push	ecx
	sub	eax, edx
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH

; 4351 :     // move [_First, _Last) backwards to [..., _Dest)
; 4352 :     // note: _Move_backward_unchecked has callers other than the move_backward family
; 4353 :     if constexpr (_Ptr_move_cat<_BidIt1, _BidIt2>::_Trivially_copyable) {
; 4354 : #ifdef __cpp_lib_is_constant_evaluated
; 4355 :         if (!_STD is_constant_evaluated())
; 4356 : #endif // __cpp_lib_is_constant_evaluated
; 4357 :         {
; 4358 :             return _Copy_backward_memmove(_First, _Last, _Dest);
; 4359 :         }
; 4360 :     }
; 4361 : 
; 4362 :     while (_First != _Last) {
; 4363 :         *--_Dest = _STD move(*--_Last);
; 4364 :     }
; 4365 : 
; 4366 :     return _Dest;
; 4367 : }

	ret	0
??$_Move_backward_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z ENDP ; std::_Move_backward_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z
_TEXT	SEGMENT
__Top$1$ = -8						; size = 4
tv234 = -4						; size = 4
__Bottom$ = 8						; size = 4
__Val$ = 12						; size = 4
__Pred$ = 16						; size = 4
??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z PROC ; std::_Pop_heap_hole_by_index<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Hole$ = edx

; 5375 :     _RanIt _First, _Iter_diff_t<_RanIt> _Hole, _Iter_diff_t<_RanIt> _Bottom, _Ty&& _Val, _Pr _Pred) {

	sub	esp, 8

; 5376 :     // percolate _Hole to _Bottom, then push _Val
; 5377 :     _STL_INTERNAL_CHECK(_Bottom > 0);
; 5378 : 
; 5379 :     using _Diff      = _Iter_diff_t<_RanIt>;
; 5380 :     const _Diff _Top = _Hole;
; 5381 :     _Diff _Idx       = _Hole;
; 5382 : 
; 5383 :     // Check whether _Idx can have a child before calculating that child's index, since
; 5384 :     // calculating the child's index can trigger integer overflows
; 5385 :     const _Diff _Max_sequence_non_leaf = (_Bottom - 1) >> 1; // shift for codegen

	mov	eax, DWORD PTR __Bottom$[esp+4]
	push	ebx
	push	ebp
	mov	ebx, ecx
	mov	DWORD PTR __Top$1$[esp+16], edx
	lea	ecx, DWORD PTR [eax-1]
	mov	ebp, ecx
	mov	DWORD PTR tv234[esp+16], ecx

; 5386 :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

	mov	ecx, DWORD PTR __Pred$[esp+12]
	push	esi
	mov	esi, edx
	sar	ebp, 1
	push	edi
	mov	edi, esi
	cmp	esi, ebp
	jge	SHORT $LN3@Pop_heap_h
	npad	8
$LL2@Pop_heap_h:

; 5387 :         _Idx = 2 * _Idx + 2;
; 5388 :         if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1)))) {

	push	DWORD PTR [ebx+edi*8+4]
	lea	edi, DWORD PTR [edi*2+2]
	push	DWORD PTR [ebx+edi*4]
	call	ecx
	add	esp, 8
	test	al, al
	je	SHORT $LN4@Pop_heap_h

; 5389 :             --_Idx;

	dec	edi
$LN4@Pop_heap_h:

; 5390 :         }
; 5391 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [ebx+edi*4]
	mov	ecx, DWORD PTR __Pred$[esp+20]
	mov	DWORD PTR [ebx+esi*4], eax

; 5392 :         _Hole             = _Idx;

	mov	esi, edi
	cmp	edi, ebp
	jl	SHORT $LL2@Pop_heap_h
	mov	edx, DWORD PTR __Top$1$[esp+24]
	mov	eax, DWORD PTR __Bottom$[esp+20]
$LN3@Pop_heap_h:

; 5393 :     }
; 5394 : 
; 5395 :     if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it

	cmp	edi, ebp
	jne	SHORT $LN5@Pop_heap_h
	test	al, 1
	jne	SHORT $LN5@Pop_heap_h

; 5396 :         *(_First + _Hole) = _STD move(*(_First + (_Bottom - 1)));

	mov	eax, DWORD PTR [ebx+eax*4-4]
	mov	DWORD PTR [ebx+esi*4], eax

; 5397 :         _Hole             = _Bottom - 1;

	mov	esi, DWORD PTR tv234[esp+24]
$LN5@Pop_heap_h:

; 5268 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

	cmp	edx, esi
	jge	SHORT $LN20@Pop_heap_h
	mov	ebp, DWORD PTR __Val$[esp+20]
	npad	5
$LL10@Pop_heap_h:
	push	DWORD PTR [ebp]
	lea	edi, DWORD PTR [esi-1]
	sar	edi, 1
	push	DWORD PTR [ebx+edi*4]
	call	ecx
	add	esp, 8
	test	al, al
	je	SHORT $LN21@Pop_heap_h

; 5269 :          _Idx = (_Hole - 1) >> 1) { // shift for codegen
; 5270 :         // move _Hole up to parent
; 5271 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [ebx+edi*4]
	mov	ecx, DWORD PTR __Pred$[esp+20]
	mov	DWORD PTR [ebx+esi*4], eax

; 5272 :         _Hole             = _Idx;

	mov	esi, edi
	cmp	DWORD PTR __Top$1$[esp+24], edi
	jl	SHORT $LL10@Pop_heap_h
$LN21@Pop_heap_h:

; 5398 :     }
; 5399 : 
; 5400 :     _Push_heap_by_index(_First, _Hole, _Top, _STD forward<_Ty>(_Val), _Pred);
; 5401 : }

	mov	eax, DWORD PTR [ebp]
	pop	edi
	mov	DWORD PTR [ebx+esi*4], eax
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 8
	ret	0
$LN20@Pop_heap_h:

; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	eax, DWORD PTR __Val$[esp+20]
	pop	edi
	mov	eax, DWORD PTR [eax]

; 5398 :     }
; 5399 : 
; 5400 :     _Push_heap_by_index(_First, _Hole, _Top, _STD forward<_Ty>(_Val), _Pred);
; 5401 : }

	mov	DWORD PTR [ebx+esi*4], eax
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 8
	ret	0
??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ENDP ; std::_Pop_heap_hole_by_index<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Pop_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z
_TEXT	SEGMENT
__Val$1 = -4						; size = 4
__Pred$ = 8						; size = 4
??$_Pop_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z PROC ; std::_Pop_heap_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 5415 : _CONSTEXPR20 void _Pop_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

	push	ecx

; 5416 :     // pop *_First to *(_Last - 1) and reheap
; 5417 :     if (2 <= _Last - _First) {

	mov	eax, edx
	sub	eax, ecx
	and	eax, -4					; fffffffcH
	cmp	eax, 8
	jl	SHORT $LN2@Pop_heap_u

; 5418 :         --_Last;
; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	eax, DWORD PTR [edx-4]
	sub	edx, 4

; 5410 :     _Pop_heap_hole_by_index(

	push	DWORD PTR __Pred$[esp]

; 5418 :         --_Last;
; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	DWORD PTR __Val$1[esp+8], eax

; 5408 :     *_Dest      = _STD move(*_First);

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax

; 5409 :     using _Diff = _Iter_diff_t<_RanIt>;
; 5410 :     _Pop_heap_hole_by_index(

	sub	edx, ecx
	lea	eax, DWORD PTR __Val$1[esp+8]
	sar	edx, 2
	push	eax
	push	edx
	xor	edx, edx
	call	??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ; std::_Pop_heap_hole_by_index<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *)>
	add	esp, 12					; 0000000cH
$LN2@Pop_heap_u:

; 5420 :         _Pop_heap_hole_unchecked(_First, _Last, _Last, _STD move(_Val), _Pred);
; 5421 :     }
; 5422 : }

	pop	ecx
	ret	0
??$_Pop_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z ENDP ; std::_Pop_heap_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Prev_iter@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z
_TEXT	SEGMENT
??$_Prev_iter@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z PROC ; std::_Prev_iter<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *>, COMDAT
; __First$ = ecx

; 1554 :     return --_First;

	lea	eax, DWORD PTR [ecx-4]

; 1555 : }

	ret	0
??$_Prev_iter@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z ENDP ; std::_Prev_iter<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Guess_median_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z
_TEXT	SEGMENT
tv426 = -8						; size = 4
tv422 = -4						; size = 4
__First$1$ = -4						; size = 4
__Last$ = 8						; size = 4
__Pred$ = 12						; size = 4
??$_Guess_median_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z PROC ; std::_Guess_median_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Mid$ = edx

; 6959 : _CONSTEXPR20 void _Guess_median_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred) {

	sub	esp, 8
	push	ebx

; 6960 :     // sort median element to middle
; 6961 :     using _Diff        = _Iter_diff_t<_RanIt>;
; 6962 :     const _Diff _Count = _Last - _First;

	mov	ebx, DWORD PTR __Last$[esp+8]
	mov	eax, ebx
	push	ebp

; 6963 :     if (40 < _Count) { // Tukey's ninther

	mov	ebp, DWORD PTR __Pred$[esp+12]
	push	esi
	push	edi
	mov	edi, ecx
	mov	esi, edx
	sub	eax, edi
	sar	eax, 2
	mov	ecx, DWORD PTR [edi]
	push	ecx
	cmp	eax, 40					; 00000028H
	jle	$LN2@Guess_medi

; 6964 :         const _Diff _Step     = (_Count + 1) >> 3; // +1 can't overflow because range was made inclusive in caller

	inc	eax
	sar	eax, 3

; 6965 :         const _Diff _Two_step = _Step << 1; // note: intentionally discards low-order bit
; 6966 :         _Med3_unchecked(_First, _First + _Step, _First + _Two_step, _Pred);

	lea	edx, DWORD PTR [eax*8]
	shl	eax, 2

; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [eax+edi]

; 6965 :         const _Diff _Two_step = _Step << 1; // note: intentionally discards low-order bit
; 6966 :         _Med3_unchecked(_First, _First + _Step, _First + _Two_step, _Pred);

	lea	ebx, DWORD PTR [eax+edi]
	mov	DWORD PTR tv422[esp+32], edx
	mov	DWORD PTR tv426[esp+32], eax

; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN95@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [ebx]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [ebx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN95@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6949 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

	mov	eax, DWORD PTR tv422[esp+24]
	push	DWORD PTR [ebx]
	push	DWORD PTR [eax+edi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN8@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	edx, DWORD PTR tv422[esp+24]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebx]
	mov	ecx, DWORD PTR [edx+edi]
	mov	DWORD PTR [edx+edi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebx], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [edi]
	push	ecx
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN8@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [ebx]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [ebx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN8@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6967 :         _Med3_unchecked(_Mid - _Step, _Mid, _Mid + _Step, _Pred);

	mov	edi, esi
	sub	edi, DWORD PTR tv426[esp+24]

; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [edi]
	push	DWORD PTR [esi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN96@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN96@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6949 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

	mov	eax, DWORD PTR tv426[esp+24]
	push	DWORD PTR [esi]
	push	DWORD PTR [eax+esi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN25@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	edx, DWORD PTR tv426[esp+24]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [edx+esi]
	mov	DWORD PTR [edx+esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [esi], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [edi]
	push	ecx
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN25@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN25@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6968 :         _Med3_unchecked(_Last - _Two_step, _Last - _Step, _Last, _Pred);

	mov	eax, DWORD PTR __Last$[esp+20]
	mov	edi, eax
	sub	eax, DWORD PTR tv422[esp+24]
	sub	edi, DWORD PTR tv426[esp+24]
	mov	DWORD PTR __First$1$[esp+24], eax

; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [eax]
	push	DWORD PTR [edi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN97@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 101  :     _Left    = _STD move(_Right);

	mov	edx, DWORD PTR __First$1$[esp+24]
	mov	ecx, DWORD PTR [edi]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [edi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edx], ecx
$LN97@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6949 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

	mov	eax, DWORD PTR __Last$[esp+20]
	push	DWORD PTR [edi]
	push	DWORD PTR [eax]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN42@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	edx, DWORD PTR __Last$[esp+20]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [edx], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	mov	eax, DWORD PTR __First$1$[esp+24]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [eax]
	push	ecx
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN42@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 101  :     _Left    = _STD move(_Right);

	mov	edx, DWORD PTR __First$1$[esp+24]
	mov	ecx, DWORD PTR [edi]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [edi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edx], ecx
$LN42@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [ebx]
	push	DWORD PTR [esi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN98@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebx], ecx
$LN98@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6949 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

	push	DWORD PTR [esi]
	push	DWORD PTR [edi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN76@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [edi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [edi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [esi], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [ebx]
	push	ecx
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN76@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebx]
	pop	edi
	mov	DWORD PTR [esi], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6973 : }

	pop	esi
	pop	ebp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebx], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6973 : }

	pop	ebx
	add	esp, 8
	ret	0
$LN2@Guess_medi:

; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [esi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN99@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN99@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6949 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

	push	DWORD PTR [esi]
	push	DWORD PTR [ebx]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN76@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [ebx]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [ebx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [esi], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [edi]
	push	ecx
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN76@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN76@Guess_medi:
	pop	edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6973 : }

	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 8
	ret	0
??$_Guess_median_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z ENDP ; std::_Guess_median_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Next_iter@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z
_TEXT	SEGMENT
??$_Next_iter@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z PROC ; std::_Next_iter<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *>, COMDAT
; __First$ = ecx

; 1541 :     return ++_First;

	lea	eax, DWORD PTR [ecx+4]

; 1542 : }

	ret	0
??$_Next_iter@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z ENDP ; std::_Next_iter<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$iter_swap@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z
_TEXT	SEGMENT
??$iter_swap@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z PROC ; std::iter_swap<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *>, COMDAT
; __Left$ = ecx
; __Right$ = edx

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edx]

; 77   : _CONSTEXPR20 void iter_swap(_FwdIt1 _Left, _FwdIt2 _Right) { // swap *_Left and *_Right

	push	esi

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	esi, DWORD PTR [ecx]

; 101  :     _Left    = _STD move(_Right);

	mov	DWORD PTR [ecx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edx], esi
	pop	esi

; 78   :     swap(*_Left, *_Right);
; 79   : }

	ret	0
??$iter_swap@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ENDP ; std::iter_swap<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$?0AAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU01@$0A@@?$pair@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@QAE@AAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU01@$0A@@?$pair@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@QAE@AAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z PROC ; std::pair<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *>::pair<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *><FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * * &,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * * &,0>, COMDAT
; _this$ = ecx

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	eax, DWORD PTR __Val1$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR __Val2$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	ret	8
??$?0AAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU01@$0A@@?$pair@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@QAE@AAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ENDP ; std::pair<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *>::pair<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *><FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * * &,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * * &,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$move@AAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z
_TEXT	SEGMENT
??$move@AAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z PROC ; std::move<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * &>, COMDAT
; __Arg$ = ecx

; 1397 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	eax, ecx

; 1398 : }

	ret	0
??$move@AAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z ENDP ; std::move<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Move_backward_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
??$_Move_backward_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z PROC ; std::_Move_backward_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 4255 :     auto _Result                = _CSTD memmove(_Dest_ch - _Count, _First_ch, _Count);

	mov	eax, DWORD PTR __Dest$[esp-4]
	sub	edx, ecx
	push	edx
	push	ecx
	sub	eax, edx
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH

; 4351 :     // move [_First, _Last) backwards to [..., _Dest)
; 4352 :     // note: _Move_backward_unchecked has callers other than the move_backward family
; 4353 :     if constexpr (_Ptr_move_cat<_BidIt1, _BidIt2>::_Trivially_copyable) {
; 4354 : #ifdef __cpp_lib_is_constant_evaluated
; 4355 :         if (!_STD is_constant_evaluated())
; 4356 : #endif // __cpp_lib_is_constant_evaluated
; 4357 :         {
; 4358 :             return _Copy_backward_memmove(_First, _Last, _Dest);
; 4359 :         }
; 4360 :     }
; 4361 : 
; 4362 :     while (_First != _Last) {
; 4363 :         *--_Dest = _STD move(*--_Last);
; 4364 :     }
; 4365 : 
; 4366 :     return _Dest;
; 4367 : }

	ret	0
??$_Move_backward_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z ENDP ; std::_Move_backward_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z
_TEXT	SEGMENT
__Top$1$ = -8						; size = 4
tv234 = -4						; size = 4
__Bottom$ = 8						; size = 4
__Val$ = 12						; size = 4
__Pred$ = 16						; size = 4
??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z PROC ; std::_Pop_heap_hole_by_index<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Hole$ = edx

; 5375 :     _RanIt _First, _Iter_diff_t<_RanIt> _Hole, _Iter_diff_t<_RanIt> _Bottom, _Ty&& _Val, _Pr _Pred) {

	sub	esp, 8

; 5376 :     // percolate _Hole to _Bottom, then push _Val
; 5377 :     _STL_INTERNAL_CHECK(_Bottom > 0);
; 5378 : 
; 5379 :     using _Diff      = _Iter_diff_t<_RanIt>;
; 5380 :     const _Diff _Top = _Hole;
; 5381 :     _Diff _Idx       = _Hole;
; 5382 : 
; 5383 :     // Check whether _Idx can have a child before calculating that child's index, since
; 5384 :     // calculating the child's index can trigger integer overflows
; 5385 :     const _Diff _Max_sequence_non_leaf = (_Bottom - 1) >> 1; // shift for codegen

	mov	eax, DWORD PTR __Bottom$[esp+4]
	push	ebx
	push	ebp
	mov	ebx, ecx
	mov	DWORD PTR __Top$1$[esp+16], edx
	lea	ecx, DWORD PTR [eax-1]
	mov	ebp, ecx
	mov	DWORD PTR tv234[esp+16], ecx

; 5386 :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

	mov	ecx, DWORD PTR __Pred$[esp+12]
	push	esi
	mov	esi, edx
	sar	ebp, 1
	push	edi
	mov	edi, esi
	cmp	esi, ebp
	jge	SHORT $LN3@Pop_heap_h
	npad	8
$LL2@Pop_heap_h:

; 5387 :         _Idx = 2 * _Idx + 2;
; 5388 :         if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1)))) {

	push	DWORD PTR [ebx+edi*8+4]
	lea	edi, DWORD PTR [edi*2+2]
	push	DWORD PTR [ebx+edi*4]
	call	ecx
	add	esp, 8
	test	al, al
	je	SHORT $LN4@Pop_heap_h

; 5389 :             --_Idx;

	dec	edi
$LN4@Pop_heap_h:

; 5390 :         }
; 5391 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [ebx+edi*4]
	mov	ecx, DWORD PTR __Pred$[esp+20]
	mov	DWORD PTR [ebx+esi*4], eax

; 5392 :         _Hole             = _Idx;

	mov	esi, edi
	cmp	edi, ebp
	jl	SHORT $LL2@Pop_heap_h
	mov	edx, DWORD PTR __Top$1$[esp+24]
	mov	eax, DWORD PTR __Bottom$[esp+20]
$LN3@Pop_heap_h:

; 5393 :     }
; 5394 : 
; 5395 :     if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it

	cmp	edi, ebp
	jne	SHORT $LN5@Pop_heap_h
	test	al, 1
	jne	SHORT $LN5@Pop_heap_h

; 5396 :         *(_First + _Hole) = _STD move(*(_First + (_Bottom - 1)));

	mov	eax, DWORD PTR [ebx+eax*4-4]
	mov	DWORD PTR [ebx+esi*4], eax

; 5397 :         _Hole             = _Bottom - 1;

	mov	esi, DWORD PTR tv234[esp+24]
$LN5@Pop_heap_h:

; 5268 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

	cmp	edx, esi
	jge	SHORT $LN20@Pop_heap_h
	mov	ebp, DWORD PTR __Val$[esp+20]
	npad	5
$LL10@Pop_heap_h:
	push	DWORD PTR [ebp]
	lea	edi, DWORD PTR [esi-1]
	sar	edi, 1
	push	DWORD PTR [ebx+edi*4]
	call	ecx
	add	esp, 8
	test	al, al
	je	SHORT $LN21@Pop_heap_h

; 5269 :          _Idx = (_Hole - 1) >> 1) { // shift for codegen
; 5270 :         // move _Hole up to parent
; 5271 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [ebx+edi*4]
	mov	ecx, DWORD PTR __Pred$[esp+20]
	mov	DWORD PTR [ebx+esi*4], eax

; 5272 :         _Hole             = _Idx;

	mov	esi, edi
	cmp	DWORD PTR __Top$1$[esp+24], edi
	jl	SHORT $LL10@Pop_heap_h
$LN21@Pop_heap_h:

; 5398 :     }
; 5399 : 
; 5400 :     _Push_heap_by_index(_First, _Hole, _Top, _STD forward<_Ty>(_Val), _Pred);
; 5401 : }

	mov	eax, DWORD PTR [ebp]
	pop	edi
	mov	DWORD PTR [ebx+esi*4], eax
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 8
	ret	0
$LN20@Pop_heap_h:

; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	eax, DWORD PTR __Val$[esp+20]
	pop	edi
	mov	eax, DWORD PTR [eax]

; 5398 :     }
; 5399 : 
; 5400 :     _Push_heap_by_index(_First, _Hole, _Top, _STD forward<_Ty>(_Val), _Pred);
; 5401 : }

	mov	DWORD PTR [ebx+esi*4], eax
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 8
	ret	0
??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ENDP ; std::_Pop_heap_hole_by_index<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Pop_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z
_TEXT	SEGMENT
__Val$1 = -4						; size = 4
__Pred$ = 8						; size = 4
??$_Pop_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z PROC ; std::_Pop_heap_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 5415 : _CONSTEXPR20 void _Pop_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

	push	ecx

; 5416 :     // pop *_First to *(_Last - 1) and reheap
; 5417 :     if (2 <= _Last - _First) {

	mov	eax, edx
	sub	eax, ecx
	and	eax, -4					; fffffffcH
	cmp	eax, 8
	jl	SHORT $LN2@Pop_heap_u

; 5418 :         --_Last;
; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	eax, DWORD PTR [edx-4]
	sub	edx, 4

; 5410 :     _Pop_heap_hole_by_index(

	push	DWORD PTR __Pred$[esp]

; 5418 :         --_Last;
; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	DWORD PTR __Val$1[esp+8], eax

; 5408 :     *_Dest      = _STD move(*_First);

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax

; 5409 :     using _Diff = _Iter_diff_t<_RanIt>;
; 5410 :     _Pop_heap_hole_by_index(

	sub	edx, ecx
	lea	eax, DWORD PTR __Val$1[esp+8]
	sar	edx, 2
	push	eax
	push	edx
	xor	edx, edx
	call	??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ; std::_Pop_heap_hole_by_index<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *)>
	add	esp, 12					; 0000000cH
$LN2@Pop_heap_u:

; 5420 :         _Pop_heap_hole_unchecked(_First, _Last, _Last, _STD move(_Val), _Pred);
; 5421 :     }
; 5422 : }

	pop	ecx
	ret	0
??$_Pop_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z ENDP ; std::_Pop_heap_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Prev_iter@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z
_TEXT	SEGMENT
??$_Prev_iter@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z PROC ; std::_Prev_iter<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *>, COMDAT
; __First$ = ecx

; 1554 :     return --_First;

	lea	eax, DWORD PTR [ecx-4]

; 1555 : }

	ret	0
??$_Prev_iter@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z ENDP ; std::_Prev_iter<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Guess_median_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z
_TEXT	SEGMENT
tv426 = -8						; size = 4
tv422 = -4						; size = 4
__First$1$ = -4						; size = 4
__Last$ = 8						; size = 4
__Pred$ = 12						; size = 4
??$_Guess_median_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z PROC ; std::_Guess_median_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Mid$ = edx

; 6959 : _CONSTEXPR20 void _Guess_median_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred) {

	sub	esp, 8
	push	ebx

; 6960 :     // sort median element to middle
; 6961 :     using _Diff        = _Iter_diff_t<_RanIt>;
; 6962 :     const _Diff _Count = _Last - _First;

	mov	ebx, DWORD PTR __Last$[esp+8]
	mov	eax, ebx
	push	ebp

; 6963 :     if (40 < _Count) { // Tukey's ninther

	mov	ebp, DWORD PTR __Pred$[esp+12]
	push	esi
	push	edi
	mov	edi, ecx
	mov	esi, edx
	sub	eax, edi
	sar	eax, 2
	mov	ecx, DWORD PTR [edi]
	push	ecx
	cmp	eax, 40					; 00000028H
	jle	$LN2@Guess_medi

; 6964 :         const _Diff _Step     = (_Count + 1) >> 3; // +1 can't overflow because range was made inclusive in caller

	inc	eax
	sar	eax, 3

; 6965 :         const _Diff _Two_step = _Step << 1; // note: intentionally discards low-order bit
; 6966 :         _Med3_unchecked(_First, _First + _Step, _First + _Two_step, _Pred);

	lea	edx, DWORD PTR [eax*8]
	shl	eax, 2

; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [eax+edi]

; 6965 :         const _Diff _Two_step = _Step << 1; // note: intentionally discards low-order bit
; 6966 :         _Med3_unchecked(_First, _First + _Step, _First + _Two_step, _Pred);

	lea	ebx, DWORD PTR [eax+edi]
	mov	DWORD PTR tv422[esp+32], edx
	mov	DWORD PTR tv426[esp+32], eax

; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN95@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [ebx]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [ebx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN95@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6949 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

	mov	eax, DWORD PTR tv422[esp+24]
	push	DWORD PTR [ebx]
	push	DWORD PTR [eax+edi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN8@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	edx, DWORD PTR tv422[esp+24]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebx]
	mov	ecx, DWORD PTR [edx+edi]
	mov	DWORD PTR [edx+edi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebx], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [edi]
	push	ecx
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN8@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [ebx]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [ebx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN8@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6967 :         _Med3_unchecked(_Mid - _Step, _Mid, _Mid + _Step, _Pred);

	mov	edi, esi
	sub	edi, DWORD PTR tv426[esp+24]

; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [edi]
	push	DWORD PTR [esi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN96@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN96@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6949 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

	mov	eax, DWORD PTR tv426[esp+24]
	push	DWORD PTR [esi]
	push	DWORD PTR [eax+esi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN25@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	edx, DWORD PTR tv426[esp+24]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [edx+esi]
	mov	DWORD PTR [edx+esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [esi], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [edi]
	push	ecx
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN25@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN25@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6968 :         _Med3_unchecked(_Last - _Two_step, _Last - _Step, _Last, _Pred);

	mov	eax, DWORD PTR __Last$[esp+20]
	mov	edi, eax
	sub	eax, DWORD PTR tv422[esp+24]
	sub	edi, DWORD PTR tv426[esp+24]
	mov	DWORD PTR __First$1$[esp+24], eax

; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [eax]
	push	DWORD PTR [edi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN97@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 101  :     _Left    = _STD move(_Right);

	mov	edx, DWORD PTR __First$1$[esp+24]
	mov	ecx, DWORD PTR [edi]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [edi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edx], ecx
$LN97@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6949 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

	mov	eax, DWORD PTR __Last$[esp+20]
	push	DWORD PTR [edi]
	push	DWORD PTR [eax]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN42@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	edx, DWORD PTR __Last$[esp+20]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [edx], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	mov	eax, DWORD PTR __First$1$[esp+24]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [eax]
	push	ecx
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN42@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 101  :     _Left    = _STD move(_Right);

	mov	edx, DWORD PTR __First$1$[esp+24]
	mov	ecx, DWORD PTR [edi]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [edi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edx], ecx
$LN42@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [ebx]
	push	DWORD PTR [esi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN98@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebx], ecx
$LN98@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6949 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

	push	DWORD PTR [esi]
	push	DWORD PTR [edi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN76@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [edi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [edi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [esi], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [ebx]
	push	ecx
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN76@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebx]
	pop	edi
	mov	DWORD PTR [esi], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6973 : }

	pop	esi
	pop	ebp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebx], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6973 : }

	pop	ebx
	add	esp, 8
	ret	0
$LN2@Guess_medi:

; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [esi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN99@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN99@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6949 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

	push	DWORD PTR [esi]
	push	DWORD PTR [ebx]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN76@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [ebx]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [ebx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [esi], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [edi]
	push	ecx
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN76@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN76@Guess_medi:
	pop	edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6973 : }

	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 8
	ret	0
??$_Guess_median_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z ENDP ; std::_Guess_median_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Next_iter@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z
_TEXT	SEGMENT
??$_Next_iter@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z PROC ; std::_Next_iter<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *>, COMDAT
; __First$ = ecx

; 1541 :     return ++_First;

	lea	eax, DWORD PTR [ecx+4]

; 1542 : }

	ret	0
??$_Next_iter@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z ENDP ; std::_Next_iter<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$iter_swap@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z
_TEXT	SEGMENT
??$iter_swap@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z PROC ; std::iter_swap<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *>, COMDAT
; __Left$ = ecx
; __Right$ = edx

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edx]

; 77   : _CONSTEXPR20 void iter_swap(_FwdIt1 _Left, _FwdIt2 _Right) { // swap *_Left and *_Right

	push	esi

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	esi, DWORD PTR [ecx]

; 101  :     _Left    = _STD move(_Right);

	mov	DWORD PTR [ecx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edx], esi
	pop	esi

; 78   :     swap(*_Left, *_Right);
; 79   : }

	ret	0
??$iter_swap@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ENDP ; std::iter_swap<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$?0AAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU01@$0A@@?$pair@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@QAE@AAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU01@$0A@@?$pair@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@QAE@AAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z PROC ; std::pair<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *>::pair<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *><FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * * &,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * * &,0>, COMDAT
; _this$ = ecx

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	eax, DWORD PTR __Val1$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR __Val2$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	ret	8
??$?0AAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU01@$0A@@?$pair@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@QAE@AAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ENDP ; std::pair<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *>::pair<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *><FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * * &,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * * &,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$move@AAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z
_TEXT	SEGMENT
??$move@AAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z PROC ; std::move<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * &>, COMDAT
; __Arg$ = ecx

; 1397 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	eax, ecx

; 1398 : }

	ret	0
??$move@AAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z ENDP ; std::move<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Move_backward_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
??$_Move_backward_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z PROC ; std::_Move_backward_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 4255 :     auto _Result                = _CSTD memmove(_Dest_ch - _Count, _First_ch, _Count);

	mov	eax, DWORD PTR __Dest$[esp-4]
	sub	edx, ecx
	push	edx
	push	ecx
	sub	eax, edx
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH

; 4351 :     // move [_First, _Last) backwards to [..., _Dest)
; 4352 :     // note: _Move_backward_unchecked has callers other than the move_backward family
; 4353 :     if constexpr (_Ptr_move_cat<_BidIt1, _BidIt2>::_Trivially_copyable) {
; 4354 : #ifdef __cpp_lib_is_constant_evaluated
; 4355 :         if (!_STD is_constant_evaluated())
; 4356 : #endif // __cpp_lib_is_constant_evaluated
; 4357 :         {
; 4358 :             return _Copy_backward_memmove(_First, _Last, _Dest);
; 4359 :         }
; 4360 :     }
; 4361 : 
; 4362 :     while (_First != _Last) {
; 4363 :         *--_Dest = _STD move(*--_Last);
; 4364 :     }
; 4365 : 
; 4366 :     return _Dest;
; 4367 : }

	ret	0
??$_Move_backward_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z ENDP ; std::_Move_backward_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z
_TEXT	SEGMENT
__Top$1$ = -8						; size = 4
tv234 = -4						; size = 4
__Bottom$ = 8						; size = 4
__Val$ = 12						; size = 4
__Pred$ = 16						; size = 4
??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z PROC ; std::_Pop_heap_hole_by_index<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Hole$ = edx

; 5375 :     _RanIt _First, _Iter_diff_t<_RanIt> _Hole, _Iter_diff_t<_RanIt> _Bottom, _Ty&& _Val, _Pr _Pred) {

	sub	esp, 8

; 5376 :     // percolate _Hole to _Bottom, then push _Val
; 5377 :     _STL_INTERNAL_CHECK(_Bottom > 0);
; 5378 : 
; 5379 :     using _Diff      = _Iter_diff_t<_RanIt>;
; 5380 :     const _Diff _Top = _Hole;
; 5381 :     _Diff _Idx       = _Hole;
; 5382 : 
; 5383 :     // Check whether _Idx can have a child before calculating that child's index, since
; 5384 :     // calculating the child's index can trigger integer overflows
; 5385 :     const _Diff _Max_sequence_non_leaf = (_Bottom - 1) >> 1; // shift for codegen

	mov	eax, DWORD PTR __Bottom$[esp+4]
	push	ebx
	push	ebp
	mov	ebx, ecx
	mov	DWORD PTR __Top$1$[esp+16], edx
	lea	ecx, DWORD PTR [eax-1]
	mov	ebp, ecx
	mov	DWORD PTR tv234[esp+16], ecx

; 5386 :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

	mov	ecx, DWORD PTR __Pred$[esp+12]
	push	esi
	mov	esi, edx
	sar	ebp, 1
	push	edi
	mov	edi, esi
	cmp	esi, ebp
	jge	SHORT $LN3@Pop_heap_h
	npad	8
$LL2@Pop_heap_h:

; 5387 :         _Idx = 2 * _Idx + 2;
; 5388 :         if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1)))) {

	push	DWORD PTR [ebx+edi*8+4]
	lea	edi, DWORD PTR [edi*2+2]
	push	DWORD PTR [ebx+edi*4]
	call	ecx
	add	esp, 8
	test	al, al
	je	SHORT $LN4@Pop_heap_h

; 5389 :             --_Idx;

	dec	edi
$LN4@Pop_heap_h:

; 5390 :         }
; 5391 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [ebx+edi*4]
	mov	ecx, DWORD PTR __Pred$[esp+20]
	mov	DWORD PTR [ebx+esi*4], eax

; 5392 :         _Hole             = _Idx;

	mov	esi, edi
	cmp	edi, ebp
	jl	SHORT $LL2@Pop_heap_h
	mov	edx, DWORD PTR __Top$1$[esp+24]
	mov	eax, DWORD PTR __Bottom$[esp+20]
$LN3@Pop_heap_h:

; 5393 :     }
; 5394 : 
; 5395 :     if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it

	cmp	edi, ebp
	jne	SHORT $LN5@Pop_heap_h
	test	al, 1
	jne	SHORT $LN5@Pop_heap_h

; 5396 :         *(_First + _Hole) = _STD move(*(_First + (_Bottom - 1)));

	mov	eax, DWORD PTR [ebx+eax*4-4]
	mov	DWORD PTR [ebx+esi*4], eax

; 5397 :         _Hole             = _Bottom - 1;

	mov	esi, DWORD PTR tv234[esp+24]
$LN5@Pop_heap_h:

; 5268 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

	cmp	edx, esi
	jge	SHORT $LN20@Pop_heap_h
	mov	ebp, DWORD PTR __Val$[esp+20]
	npad	5
$LL10@Pop_heap_h:
	push	DWORD PTR [ebp]
	lea	edi, DWORD PTR [esi-1]
	sar	edi, 1
	push	DWORD PTR [ebx+edi*4]
	call	ecx
	add	esp, 8
	test	al, al
	je	SHORT $LN21@Pop_heap_h

; 5269 :          _Idx = (_Hole - 1) >> 1) { // shift for codegen
; 5270 :         // move _Hole up to parent
; 5271 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [ebx+edi*4]
	mov	ecx, DWORD PTR __Pred$[esp+20]
	mov	DWORD PTR [ebx+esi*4], eax

; 5272 :         _Hole             = _Idx;

	mov	esi, edi
	cmp	DWORD PTR __Top$1$[esp+24], edi
	jl	SHORT $LL10@Pop_heap_h
$LN21@Pop_heap_h:

; 5398 :     }
; 5399 : 
; 5400 :     _Push_heap_by_index(_First, _Hole, _Top, _STD forward<_Ty>(_Val), _Pred);
; 5401 : }

	mov	eax, DWORD PTR [ebp]
	pop	edi
	mov	DWORD PTR [ebx+esi*4], eax
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 8
	ret	0
$LN20@Pop_heap_h:

; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	eax, DWORD PTR __Val$[esp+20]
	pop	edi
	mov	eax, DWORD PTR [eax]

; 5398 :     }
; 5399 : 
; 5400 :     _Push_heap_by_index(_First, _Hole, _Top, _STD forward<_Ty>(_Val), _Pred);
; 5401 : }

	mov	DWORD PTR [ebx+esi*4], eax
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 8
	ret	0
??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ENDP ; std::_Pop_heap_hole_by_index<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Pop_heap_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z
_TEXT	SEGMENT
__Val$1 = -4						; size = 4
__Pred$ = 8						; size = 4
??$_Pop_heap_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z PROC ; std::_Pop_heap_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 5415 : _CONSTEXPR20 void _Pop_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

	push	ecx

; 5416 :     // pop *_First to *(_Last - 1) and reheap
; 5417 :     if (2 <= _Last - _First) {

	mov	eax, edx
	sub	eax, ecx
	and	eax, -4					; fffffffcH
	cmp	eax, 8
	jl	SHORT $LN2@Pop_heap_u

; 5418 :         --_Last;
; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	eax, DWORD PTR [edx-4]
	sub	edx, 4

; 5410 :     _Pop_heap_hole_by_index(

	push	DWORD PTR __Pred$[esp]

; 5418 :         --_Last;
; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	DWORD PTR __Val$1[esp+8], eax

; 5408 :     *_Dest      = _STD move(*_First);

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax

; 5409 :     using _Diff = _Iter_diff_t<_RanIt>;
; 5410 :     _Pop_heap_hole_by_index(

	sub	edx, ecx
	lea	eax, DWORD PTR __Val$1[esp+8]
	sar	edx, 2
	push	eax
	push	edx
	xor	edx, edx
	call	??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ; std::_Pop_heap_hole_by_index<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *)>
	add	esp, 12					; 0000000cH
$LN2@Pop_heap_u:

; 5420 :         _Pop_heap_hole_unchecked(_First, _Last, _Last, _STD move(_Val), _Pred);
; 5421 :     }
; 5422 : }

	pop	ecx
	ret	0
??$_Pop_heap_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z ENDP ; std::_Pop_heap_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Prev_iter@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z
_TEXT	SEGMENT
??$_Prev_iter@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z PROC ; std::_Prev_iter<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *>, COMDAT
; __First$ = ecx

; 1554 :     return --_First;

	lea	eax, DWORD PTR [ecx-4]

; 1555 : }

	ret	0
??$_Prev_iter@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z ENDP ; std::_Prev_iter<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Guess_median_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z
_TEXT	SEGMENT
tv426 = -8						; size = 4
tv422 = -4						; size = 4
__First$1$ = -4						; size = 4
__Last$ = 8						; size = 4
__Pred$ = 12						; size = 4
??$_Guess_median_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z PROC ; std::_Guess_median_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Mid$ = edx

; 6959 : _CONSTEXPR20 void _Guess_median_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred) {

	sub	esp, 8
	push	ebx

; 6960 :     // sort median element to middle
; 6961 :     using _Diff        = _Iter_diff_t<_RanIt>;
; 6962 :     const _Diff _Count = _Last - _First;

	mov	ebx, DWORD PTR __Last$[esp+8]
	mov	eax, ebx
	push	ebp

; 6963 :     if (40 < _Count) { // Tukey's ninther

	mov	ebp, DWORD PTR __Pred$[esp+12]
	push	esi
	push	edi
	mov	edi, ecx
	mov	esi, edx
	sub	eax, edi
	sar	eax, 2
	mov	ecx, DWORD PTR [edi]
	push	ecx
	cmp	eax, 40					; 00000028H
	jle	$LN2@Guess_medi

; 6964 :         const _Diff _Step     = (_Count + 1) >> 3; // +1 can't overflow because range was made inclusive in caller

	inc	eax
	sar	eax, 3

; 6965 :         const _Diff _Two_step = _Step << 1; // note: intentionally discards low-order bit
; 6966 :         _Med3_unchecked(_First, _First + _Step, _First + _Two_step, _Pred);

	lea	edx, DWORD PTR [eax*8]
	shl	eax, 2

; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [eax+edi]

; 6965 :         const _Diff _Two_step = _Step << 1; // note: intentionally discards low-order bit
; 6966 :         _Med3_unchecked(_First, _First + _Step, _First + _Two_step, _Pred);

	lea	ebx, DWORD PTR [eax+edi]
	mov	DWORD PTR tv422[esp+32], edx
	mov	DWORD PTR tv426[esp+32], eax

; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN95@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [ebx]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [ebx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN95@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6949 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

	mov	eax, DWORD PTR tv422[esp+24]
	push	DWORD PTR [ebx]
	push	DWORD PTR [eax+edi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN8@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	edx, DWORD PTR tv422[esp+24]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebx]
	mov	ecx, DWORD PTR [edx+edi]
	mov	DWORD PTR [edx+edi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebx], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [edi]
	push	ecx
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN8@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [ebx]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [ebx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN8@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6967 :         _Med3_unchecked(_Mid - _Step, _Mid, _Mid + _Step, _Pred);

	mov	edi, esi
	sub	edi, DWORD PTR tv426[esp+24]

; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [edi]
	push	DWORD PTR [esi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN96@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN96@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6949 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

	mov	eax, DWORD PTR tv426[esp+24]
	push	DWORD PTR [esi]
	push	DWORD PTR [eax+esi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN25@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	edx, DWORD PTR tv426[esp+24]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [edx+esi]
	mov	DWORD PTR [edx+esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [esi], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [edi]
	push	ecx
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN25@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN25@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6968 :         _Med3_unchecked(_Last - _Two_step, _Last - _Step, _Last, _Pred);

	mov	eax, DWORD PTR __Last$[esp+20]
	mov	edi, eax
	sub	eax, DWORD PTR tv422[esp+24]
	sub	edi, DWORD PTR tv426[esp+24]
	mov	DWORD PTR __First$1$[esp+24], eax

; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [eax]
	push	DWORD PTR [edi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN97@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 101  :     _Left    = _STD move(_Right);

	mov	edx, DWORD PTR __First$1$[esp+24]
	mov	ecx, DWORD PTR [edi]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [edi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edx], ecx
$LN97@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6949 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

	mov	eax, DWORD PTR __Last$[esp+20]
	push	DWORD PTR [edi]
	push	DWORD PTR [eax]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN42@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	edx, DWORD PTR __Last$[esp+20]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [edx], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	mov	eax, DWORD PTR __First$1$[esp+24]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [eax]
	push	ecx
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN42@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 101  :     _Left    = _STD move(_Right);

	mov	edx, DWORD PTR __First$1$[esp+24]
	mov	ecx, DWORD PTR [edi]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [edi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edx], ecx
$LN42@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [ebx]
	push	DWORD PTR [esi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN98@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebx], ecx
$LN98@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6949 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

	push	DWORD PTR [esi]
	push	DWORD PTR [edi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN76@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [edi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [edi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [esi], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [ebx]
	push	ecx
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN76@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebx]
	pop	edi
	mov	DWORD PTR [esi], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6973 : }

	pop	esi
	pop	ebp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebx], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6973 : }

	pop	ebx
	add	esp, 8
	ret	0
$LN2@Guess_medi:

; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [esi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN99@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN99@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6949 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

	push	DWORD PTR [esi]
	push	DWORD PTR [ebx]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN76@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [ebx]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [ebx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [esi], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [edi]
	push	ecx
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN76@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN76@Guess_medi:
	pop	edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6973 : }

	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 8
	ret	0
??$_Guess_median_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z ENDP ; std::_Guess_median_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Next_iter@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z
_TEXT	SEGMENT
??$_Next_iter@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z PROC ; std::_Next_iter<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *>, COMDAT
; __First$ = ecx

; 1541 :     return ++_First;

	lea	eax, DWORD PTR [ecx+4]

; 1542 : }

	ret	0
??$_Next_iter@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z ENDP ; std::_Next_iter<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$iter_swap@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@0@Z
_TEXT	SEGMENT
??$iter_swap@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@0@Z PROC ; std::iter_swap<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *>, COMDAT
; __Left$ = ecx
; __Right$ = edx

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edx]

; 77   : _CONSTEXPR20 void iter_swap(_FwdIt1 _Left, _FwdIt2 _Right) { // swap *_Left and *_Right

	push	esi

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	esi, DWORD PTR [ecx]

; 101  :     _Left    = _STD move(_Right);

	mov	DWORD PTR [ecx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edx], esi
	pop	esi

; 78   :     swap(*_Left, *_Right);
; 79   : }

	ret	0
??$iter_swap@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ENDP ; std::iter_swap<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$?0AAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU01@$0A@@?$pair@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@QAE@AAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@0@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU01@$0A@@?$pair@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@QAE@AAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@0@Z PROC ; std::pair<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *>::pair<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *><FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * * &,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * * &,0>, COMDAT
; _this$ = ecx

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	eax, DWORD PTR __Val1$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR __Val2$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	ret	8
??$?0AAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU01@$0A@@?$pair@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@QAE@AAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ENDP ; std::pair<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *>::pair<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *><FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * * &,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * * &,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$move@AAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z
_TEXT	SEGMENT
??$move@AAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z PROC ; std::move<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * &>, COMDAT
; __Arg$ = ecx

; 1397 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	eax, ecx

; 1398 : }

	ret	0
??$move@AAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z ENDP ; std::move<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Move_backward_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
??$_Move_backward_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z PROC ; std::_Move_backward_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 4255 :     auto _Result                = _CSTD memmove(_Dest_ch - _Count, _First_ch, _Count);

	mov	eax, DWORD PTR __Dest$[esp-4]
	sub	edx, ecx
	push	edx
	push	ecx
	sub	eax, edx
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH

; 4351 :     // move [_First, _Last) backwards to [..., _Dest)
; 4352 :     // note: _Move_backward_unchecked has callers other than the move_backward family
; 4353 :     if constexpr (_Ptr_move_cat<_BidIt1, _BidIt2>::_Trivially_copyable) {
; 4354 : #ifdef __cpp_lib_is_constant_evaluated
; 4355 :         if (!_STD is_constant_evaluated())
; 4356 : #endif // __cpp_lib_is_constant_evaluated
; 4357 :         {
; 4358 :             return _Copy_backward_memmove(_First, _Last, _Dest);
; 4359 :         }
; 4360 :     }
; 4361 : 
; 4362 :     while (_First != _Last) {
; 4363 :         *--_Dest = _STD move(*--_Last);
; 4364 :     }
; 4365 : 
; 4366 :     return _Dest;
; 4367 : }

	ret	0
??$_Move_backward_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z ENDP ; std::_Move_backward_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z
_TEXT	SEGMENT
__Top$1$ = -8						; size = 4
tv234 = -4						; size = 4
__Bottom$ = 8						; size = 4
__Val$ = 12						; size = 4
__Pred$ = 16						; size = 4
??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z PROC ; std::_Pop_heap_hole_by_index<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Hole$ = edx

; 5375 :     _RanIt _First, _Iter_diff_t<_RanIt> _Hole, _Iter_diff_t<_RanIt> _Bottom, _Ty&& _Val, _Pr _Pred) {

	sub	esp, 8

; 5376 :     // percolate _Hole to _Bottom, then push _Val
; 5377 :     _STL_INTERNAL_CHECK(_Bottom > 0);
; 5378 : 
; 5379 :     using _Diff      = _Iter_diff_t<_RanIt>;
; 5380 :     const _Diff _Top = _Hole;
; 5381 :     _Diff _Idx       = _Hole;
; 5382 : 
; 5383 :     // Check whether _Idx can have a child before calculating that child's index, since
; 5384 :     // calculating the child's index can trigger integer overflows
; 5385 :     const _Diff _Max_sequence_non_leaf = (_Bottom - 1) >> 1; // shift for codegen

	mov	eax, DWORD PTR __Bottom$[esp+4]
	push	ebx
	push	ebp
	mov	ebx, ecx
	mov	DWORD PTR __Top$1$[esp+16], edx
	lea	ecx, DWORD PTR [eax-1]
	mov	ebp, ecx
	mov	DWORD PTR tv234[esp+16], ecx

; 5386 :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

	mov	ecx, DWORD PTR __Pred$[esp+12]
	push	esi
	mov	esi, edx
	sar	ebp, 1
	push	edi
	mov	edi, esi
	cmp	esi, ebp
	jge	SHORT $LN3@Pop_heap_h
	npad	8
$LL2@Pop_heap_h:

; 5387 :         _Idx = 2 * _Idx + 2;
; 5388 :         if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1)))) {

	push	DWORD PTR [ebx+edi*8+4]
	lea	edi, DWORD PTR [edi*2+2]
	push	DWORD PTR [ebx+edi*4]
	call	ecx
	add	esp, 8
	test	al, al
	je	SHORT $LN4@Pop_heap_h

; 5389 :             --_Idx;

	dec	edi
$LN4@Pop_heap_h:

; 5390 :         }
; 5391 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [ebx+edi*4]
	mov	ecx, DWORD PTR __Pred$[esp+20]
	mov	DWORD PTR [ebx+esi*4], eax

; 5392 :         _Hole             = _Idx;

	mov	esi, edi
	cmp	edi, ebp
	jl	SHORT $LL2@Pop_heap_h
	mov	edx, DWORD PTR __Top$1$[esp+24]
	mov	eax, DWORD PTR __Bottom$[esp+20]
$LN3@Pop_heap_h:

; 5393 :     }
; 5394 : 
; 5395 :     if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it

	cmp	edi, ebp
	jne	SHORT $LN5@Pop_heap_h
	test	al, 1
	jne	SHORT $LN5@Pop_heap_h

; 5396 :         *(_First + _Hole) = _STD move(*(_First + (_Bottom - 1)));

	mov	eax, DWORD PTR [ebx+eax*4-4]
	mov	DWORD PTR [ebx+esi*4], eax

; 5397 :         _Hole             = _Bottom - 1;

	mov	esi, DWORD PTR tv234[esp+24]
$LN5@Pop_heap_h:

; 5268 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

	cmp	edx, esi
	jge	SHORT $LN20@Pop_heap_h
	mov	ebp, DWORD PTR __Val$[esp+20]
	npad	5
$LL10@Pop_heap_h:
	push	DWORD PTR [ebp]
	lea	edi, DWORD PTR [esi-1]
	sar	edi, 1
	push	DWORD PTR [ebx+edi*4]
	call	ecx
	add	esp, 8
	test	al, al
	je	SHORT $LN21@Pop_heap_h

; 5269 :          _Idx = (_Hole - 1) >> 1) { // shift for codegen
; 5270 :         // move _Hole up to parent
; 5271 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [ebx+edi*4]
	mov	ecx, DWORD PTR __Pred$[esp+20]
	mov	DWORD PTR [ebx+esi*4], eax

; 5272 :         _Hole             = _Idx;

	mov	esi, edi
	cmp	DWORD PTR __Top$1$[esp+24], edi
	jl	SHORT $LL10@Pop_heap_h
$LN21@Pop_heap_h:

; 5398 :     }
; 5399 : 
; 5400 :     _Push_heap_by_index(_First, _Hole, _Top, _STD forward<_Ty>(_Val), _Pred);
; 5401 : }

	mov	eax, DWORD PTR [ebp]
	pop	edi
	mov	DWORD PTR [ebx+esi*4], eax
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 8
	ret	0
$LN20@Pop_heap_h:

; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	eax, DWORD PTR __Val$[esp+20]
	pop	edi
	mov	eax, DWORD PTR [eax]

; 5398 :     }
; 5399 : 
; 5400 :     _Push_heap_by_index(_First, _Hole, _Top, _STD forward<_Ty>(_Val), _Pred);
; 5401 : }

	mov	DWORD PTR [ebx+esi*4], eax
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 8
	ret	0
??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ENDP ; std::_Pop_heap_hole_by_index<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Pop_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z
_TEXT	SEGMENT
__Val$1 = -4						; size = 4
__Pred$ = 8						; size = 4
??$_Pop_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z PROC ; std::_Pop_heap_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 5415 : _CONSTEXPR20 void _Pop_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

	push	ecx

; 5416 :     // pop *_First to *(_Last - 1) and reheap
; 5417 :     if (2 <= _Last - _First) {

	mov	eax, edx
	sub	eax, ecx
	and	eax, -4					; fffffffcH
	cmp	eax, 8
	jl	SHORT $LN2@Pop_heap_u

; 5418 :         --_Last;
; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	eax, DWORD PTR [edx-4]
	sub	edx, 4

; 5410 :     _Pop_heap_hole_by_index(

	push	DWORD PTR __Pred$[esp]

; 5418 :         --_Last;
; 5419 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

	mov	DWORD PTR __Val$1[esp+8], eax

; 5408 :     *_Dest      = _STD move(*_First);

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax

; 5409 :     using _Diff = _Iter_diff_t<_RanIt>;
; 5410 :     _Pop_heap_hole_by_index(

	sub	edx, ecx
	lea	eax, DWORD PTR __Val$1[esp+8]
	sar	edx, 2
	push	eax
	push	edx
	xor	edx, edx
	call	??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ; std::_Pop_heap_hole_by_index<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *)>
	add	esp, 12					; 0000000cH
$LN2@Pop_heap_u:

; 5420 :         _Pop_heap_hole_unchecked(_First, _Last, _Last, _STD move(_Val), _Pred);
; 5421 :     }
; 5422 : }

	pop	ecx
	ret	0
??$_Pop_heap_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@0P6A_NPAU12@1@Z@Z ENDP ; std::_Pop_heap_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Prev_iter@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z
_TEXT	SEGMENT
??$_Prev_iter@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z PROC ; std::_Prev_iter<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *>, COMDAT
; __First$ = ecx

; 1554 :     return --_First;

	lea	eax, DWORD PTR [ecx-4]

; 1555 : }

	ret	0
??$_Prev_iter@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z ENDP ; std::_Prev_iter<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Guess_median_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z
_TEXT	SEGMENT
tv426 = -8						; size = 4
tv422 = -4						; size = 4
__First$1$ = -4						; size = 4
__Last$ = 8						; size = 4
__Pred$ = 12						; size = 4
??$_Guess_median_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z PROC ; std::_Guess_median_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Mid$ = edx

; 6959 : _CONSTEXPR20 void _Guess_median_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred) {

	sub	esp, 8
	push	ebx

; 6960 :     // sort median element to middle
; 6961 :     using _Diff        = _Iter_diff_t<_RanIt>;
; 6962 :     const _Diff _Count = _Last - _First;

	mov	ebx, DWORD PTR __Last$[esp+8]
	mov	eax, ebx
	push	ebp

; 6963 :     if (40 < _Count) { // Tukey's ninther

	mov	ebp, DWORD PTR __Pred$[esp+12]
	push	esi
	push	edi
	mov	edi, ecx
	mov	esi, edx
	sub	eax, edi
	sar	eax, 2
	mov	ecx, DWORD PTR [edi]
	push	ecx
	cmp	eax, 40					; 00000028H
	jle	$LN2@Guess_medi

; 6964 :         const _Diff _Step     = (_Count + 1) >> 3; // +1 can't overflow because range was made inclusive in caller

	inc	eax
	sar	eax, 3

; 6965 :         const _Diff _Two_step = _Step << 1; // note: intentionally discards low-order bit
; 6966 :         _Med3_unchecked(_First, _First + _Step, _First + _Two_step, _Pred);

	lea	edx, DWORD PTR [eax*8]
	shl	eax, 2

; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [eax+edi]

; 6965 :         const _Diff _Two_step = _Step << 1; // note: intentionally discards low-order bit
; 6966 :         _Med3_unchecked(_First, _First + _Step, _First + _Two_step, _Pred);

	lea	ebx, DWORD PTR [eax+edi]
	mov	DWORD PTR tv422[esp+32], edx
	mov	DWORD PTR tv426[esp+32], eax

; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN95@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [ebx]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [ebx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN95@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6949 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

	mov	eax, DWORD PTR tv422[esp+24]
	push	DWORD PTR [ebx]
	push	DWORD PTR [eax+edi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN8@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	edx, DWORD PTR tv422[esp+24]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebx]
	mov	ecx, DWORD PTR [edx+edi]
	mov	DWORD PTR [edx+edi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebx], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [edi]
	push	ecx
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN8@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [ebx]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [ebx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN8@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6967 :         _Med3_unchecked(_Mid - _Step, _Mid, _Mid + _Step, _Pred);

	mov	edi, esi
	sub	edi, DWORD PTR tv426[esp+24]

; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [edi]
	push	DWORD PTR [esi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN96@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN96@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6949 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

	mov	eax, DWORD PTR tv426[esp+24]
	push	DWORD PTR [esi]
	push	DWORD PTR [eax+esi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN25@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	edx, DWORD PTR tv426[esp+24]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [edx+esi]
	mov	DWORD PTR [edx+esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [esi], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [edi]
	push	ecx
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN25@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN25@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6968 :         _Med3_unchecked(_Last - _Two_step, _Last - _Step, _Last, _Pred);

	mov	eax, DWORD PTR __Last$[esp+20]
	mov	edi, eax
	sub	eax, DWORD PTR tv422[esp+24]
	sub	edi, DWORD PTR tv426[esp+24]
	mov	DWORD PTR __First$1$[esp+24], eax

; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [eax]
	push	DWORD PTR [edi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN97@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 101  :     _Left    = _STD move(_Right);

	mov	edx, DWORD PTR __First$1$[esp+24]
	mov	ecx, DWORD PTR [edi]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [edi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edx], ecx
$LN97@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6949 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

	mov	eax, DWORD PTR __Last$[esp+20]
	push	DWORD PTR [edi]
	push	DWORD PTR [eax]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN42@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	edx, DWORD PTR __Last$[esp+20]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [edx], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	mov	eax, DWORD PTR __First$1$[esp+24]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [eax]
	push	ecx
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN42@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 101  :     _Left    = _STD move(_Right);

	mov	edx, DWORD PTR __First$1$[esp+24]
	mov	ecx, DWORD PTR [edi]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [edi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edx], ecx
$LN42@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [ebx]
	push	DWORD PTR [esi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN98@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebx], ecx
$LN98@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6949 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

	push	DWORD PTR [esi]
	push	DWORD PTR [edi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN76@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [edi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [edi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [esi], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [ebx]
	push	ecx
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN76@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebx]
	pop	edi
	mov	DWORD PTR [esi], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6973 : }

	pop	esi
	pop	ebp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebx], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6973 : }

	pop	ebx
	add	esp, 8
	ret	0
$LN2@Guess_medi:

; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [esi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN99@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN99@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6949 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

	push	DWORD PTR [esi]
	push	DWORD PTR [ebx]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN76@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [ebx]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [ebx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [esi], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [edi]
	push	ecx
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN76@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN76@Guess_medi:
	pop	edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6973 : }

	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 8
	ret	0
??$_Guess_median_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z ENDP ; std::_Guess_median_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Next_iter@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z
_TEXT	SEGMENT
??$_Next_iter@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z PROC ; std::_Next_iter<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *>, COMDAT
; __First$ = ecx

; 1541 :     return ++_First;

	lea	eax, DWORD PTR [ecx+4]

; 1542 : }

	ret	0
??$_Next_iter@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z ENDP ; std::_Next_iter<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$iter_swap@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@Z
_TEXT	SEGMENT
??$iter_swap@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@Z PROC ; std::iter_swap<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *>, COMDAT
; __Left$ = ecx
; __Right$ = edx

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edx]

; 77   : _CONSTEXPR20 void iter_swap(_FwdIt1 _Left, _FwdIt2 _Right) { // swap *_Left and *_Right

	push	esi

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	esi, DWORD PTR [ecx]

; 101  :     _Left    = _STD move(_Right);

	mov	DWORD PTR [ecx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edx], esi
	pop	esi

; 78   :     swap(*_Left, *_Right);
; 79   : }

	ret	0
??$iter_swap@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ENDP ; std::iter_swap<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$?0AAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU01@$0A@@?$pair@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@QAE@AAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU01@$0A@@?$pair@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@QAE@AAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@Z PROC ; std::pair<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *>::pair<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *><FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * * &,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * * &,0>, COMDAT
; _this$ = ecx

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	mov	eax, DWORD PTR __Val1$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR __Val2$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	ret	8
??$?0AAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU01@$0A@@?$pair@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@QAE@AAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ENDP ; std::pair<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *>::pair<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *><FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * * &,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * * &,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z
_TEXT	SEGMENT
??$forward@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z PROC ; std::forward<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *>, COMDAT
; __Arg$ = ecx

; 1386 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, ecx

; 1387 : }

	ret	0
??$forward@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z ENDP ; std::forward<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$construct@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@$$QAPAU34@@Z
_TEXT	SEGMENT
_<_Args_0>$ = 8						; size = 4
??$construct@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@$$QAPAU34@@Z PROC ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::construct<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *>, COMDAT
; __Al$dead$ = ecx
; __Ptr$ = edx

; 565  :         if constexpr (_Uses_default_construct<_Alloc, _Ty*, _Types...>::value) {
; 566  :             (void) _Al; // TRANSITION, DevCom-1004719
; 567  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 568  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 569  : #else // __cpp_lib_constexpr_dynamic_alloc
; 570  :             ::new (static_cast<void*>(_Ptr)) _Ty(_STD forward<_Types>(_Args)...);
; 571  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 572  :         } else {
; 573  :             _Al.construct(_Ptr, _STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR _<_Args_0>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 574  :         }
; 575  :     }

	ret	0
??$construct@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@$$QAPAU34@@Z ENDP ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::construct<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$construct@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@$$V@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
??$construct@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@$$V@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::construct<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *>, COMDAT
; __Al$dead$ = ecx
; __Ptr$ = edx

; 565  :         if constexpr (_Uses_default_construct<_Alloc, _Ty*, _Types...>::value) {
; 566  :             (void) _Al; // TRANSITION, DevCom-1004719
; 567  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 568  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 569  : #else // __cpp_lib_constexpr_dynamic_alloc
; 570  :             ::new (static_cast<void*>(_Ptr)) _Ty(_STD forward<_Types>(_Args)...);

	mov	DWORD PTR [edx], 0

; 571  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 572  :         } else {
; 573  :             _Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 574  :         }
; 575  :     }

	ret	0
??$construct@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@$$V@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::construct<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$construct@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@$$V@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
??$construct@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@$$V@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::construct<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *>, COMDAT
; __Al$dead$ = ecx
; __Ptr$ = edx

; 565  :         if constexpr (_Uses_default_construct<_Alloc, _Ty*, _Types...>::value) {
; 566  :             (void) _Al; // TRANSITION, DevCom-1004719
; 567  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 568  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 569  : #else // __cpp_lib_constexpr_dynamic_alloc
; 570  :             ::new (static_cast<void*>(_Ptr)) _Ty(_STD forward<_Types>(_Args)...);

	mov	DWORD PTR [edx], 0

; 571  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 572  :         } else {
; 573  :             _Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 574  :         }
; 575  :     }

	ret	0
??$construct@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@$$V@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::construct<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$construct@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@$$V@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
??$construct@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@$$V@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::construct<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *>, COMDAT
; __Al$dead$ = ecx
; __Ptr$ = edx

; 565  :         if constexpr (_Uses_default_construct<_Alloc, _Ty*, _Types...>::value) {
; 566  :             (void) _Al; // TRANSITION, DevCom-1004719
; 567  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 568  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 569  : #else // __cpp_lib_constexpr_dynamic_alloc
; 570  :             ::new (static_cast<void*>(_Ptr)) _Ty(_STD forward<_Types>(_Args)...);

	mov	DWORD PTR [edx], 0

; 571  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 572  :         } else {
; 573  :             _Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 574  :         }
; 575  :     }

	ret	0
??$construct@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@$$V@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::construct<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$construct@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@$$V@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
??$construct@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@$$V@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::construct<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *>, COMDAT
; __Al$dead$ = ecx
; __Ptr$ = edx

; 565  :         if constexpr (_Uses_default_construct<_Alloc, _Ty*, _Types...>::value) {
; 566  :             (void) _Al; // TRANSITION, DevCom-1004719
; 567  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 568  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 569  : #else // __cpp_lib_constexpr_dynamic_alloc
; 570  :             ::new (static_cast<void*>(_Ptr)) _Ty(_STD forward<_Types>(_Args)...);

	mov	DWORD PTR [edx], 0

; 571  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 572  :         } else {
; 573  :             _Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 574  :         }
; 575  :     }

	ret	0
??$construct@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@$$V@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::construct<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$construct@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@$$V@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
??$construct@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@$$V@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::construct<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *>, COMDAT
; __Al$dead$ = ecx
; __Ptr$ = edx

; 565  :         if constexpr (_Uses_default_construct<_Alloc, _Ty*, _Types...>::value) {
; 566  :             (void) _Al; // TRANSITION, DevCom-1004719
; 567  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 568  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 569  : #else // __cpp_lib_constexpr_dynamic_alloc
; 570  :             ::new (static_cast<void*>(_Ptr)) _Ty(_STD forward<_Types>(_Args)...);

	mov	DWORD PTR [edx], 0

; 571  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 572  :         } else {
; 573  :             _Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 574  :         }
; 575  :     }

	ret	0
??$construct@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@$$V@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::construct<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z
_TEXT	SEGMENT
??$forward@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z PROC ; std::forward<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *>, COMDAT
; __Arg$ = ecx

; 1386 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, ecx

; 1387 : }

	ret	0
??$forward@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z ENDP ; std::forward<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$construct@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@$$QAPAU34@@Z
_TEXT	SEGMENT
_<_Args_0>$ = 8						; size = 4
??$construct@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@$$QAPAU34@@Z PROC ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::construct<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *>, COMDAT
; __Al$dead$ = ecx
; __Ptr$ = edx

; 565  :         if constexpr (_Uses_default_construct<_Alloc, _Ty*, _Types...>::value) {
; 566  :             (void) _Al; // TRANSITION, DevCom-1004719
; 567  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 568  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 569  : #else // __cpp_lib_constexpr_dynamic_alloc
; 570  :             ::new (static_cast<void*>(_Ptr)) _Ty(_STD forward<_Types>(_Args)...);
; 571  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 572  :         } else {
; 573  :             _Al.construct(_Ptr, _STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR _<_Args_0>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 574  :         }
; 575  :     }

	ret	0
??$construct@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@$$QAPAU34@@Z ENDP ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::construct<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$construct@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@$$V@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
??$construct@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@$$V@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::construct<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *>, COMDAT
; __Al$dead$ = ecx
; __Ptr$ = edx

; 565  :         if constexpr (_Uses_default_construct<_Alloc, _Ty*, _Types...>::value) {
; 566  :             (void) _Al; // TRANSITION, DevCom-1004719
; 567  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 568  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 569  : #else // __cpp_lib_constexpr_dynamic_alloc
; 570  :             ::new (static_cast<void*>(_Ptr)) _Ty(_STD forward<_Types>(_Args)...);

	mov	DWORD PTR [edx], 0

; 571  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 572  :         } else {
; 573  :             _Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 574  :         }
; 575  :     }

	ret	0
??$construct@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@$$V@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::construct<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$construct@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@$$V@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
??$construct@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@$$V@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::construct<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *>, COMDAT
; __Al$dead$ = ecx
; __Ptr$ = edx

; 565  :         if constexpr (_Uses_default_construct<_Alloc, _Ty*, _Types...>::value) {
; 566  :             (void) _Al; // TRANSITION, DevCom-1004719
; 567  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 568  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 569  : #else // __cpp_lib_constexpr_dynamic_alloc
; 570  :             ::new (static_cast<void*>(_Ptr)) _Ty(_STD forward<_Types>(_Args)...);

	mov	DWORD PTR [edx], 0

; 571  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 572  :         } else {
; 573  :             _Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 574  :         }
; 575  :     }

	ret	0
??$construct@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@$$V@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::construct<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$construct@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@$$V@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
??$construct@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@$$V@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::construct<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *>, COMDAT
; __Al$dead$ = ecx
; __Ptr$ = edx

; 565  :         if constexpr (_Uses_default_construct<_Alloc, _Ty*, _Types...>::value) {
; 566  :             (void) _Al; // TRANSITION, DevCom-1004719
; 567  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 568  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 569  : #else // __cpp_lib_constexpr_dynamic_alloc
; 570  :             ::new (static_cast<void*>(_Ptr)) _Ty(_STD forward<_Types>(_Args)...);

	mov	DWORD PTR [edx], 0

; 571  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 572  :         } else {
; 573  :             _Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 574  :         }
; 575  :     }

	ret	0
??$construct@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@$$V@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::construct<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$construct@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@$$V@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
??$construct@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@$$V@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::construct<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *>, COMDAT
; __Al$dead$ = ecx
; __Ptr$ = edx

; 565  :         if constexpr (_Uses_default_construct<_Alloc, _Ty*, _Types...>::value) {
; 566  :             (void) _Al; // TRANSITION, DevCom-1004719
; 567  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 568  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 569  : #else // __cpp_lib_constexpr_dynamic_alloc
; 570  :             ::new (static_cast<void*>(_Ptr)) _Ty(_STD forward<_Types>(_Args)...);

	mov	DWORD PTR [edx], 0

; 571  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 572  :         } else {
; 573  :             _Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 574  :         }
; 575  :     }

	ret	0
??$construct@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@$$V@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::construct<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$construct@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@$$V@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
??$construct@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@$$V@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::construct<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *>, COMDAT
; __Al$dead$ = ecx
; __Ptr$ = edx

; 565  :         if constexpr (_Uses_default_construct<_Alloc, _Ty*, _Types...>::value) {
; 566  :             (void) _Al; // TRANSITION, DevCom-1004719
; 567  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 568  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 569  : #else // __cpp_lib_constexpr_dynamic_alloc
; 570  :             ::new (static_cast<void*>(_Ptr)) _Ty(_STD forward<_Types>(_Args)...);

	mov	DWORD PTR [edx], 0

; 571  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 572  :         } else {
; 573  :             _Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 574  :         }
; 575  :     }

	ret	0
??$construct@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@$$V@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::construct<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Emplace_back@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEX$$QAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
_<_Vals_0>$ = 8						; size = 4
??$_Emplace_back@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEX$$QAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::_Emplace_back<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *>, COMDAT
; _this$ = ecx

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _<_Vals_0>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 1621 :         ++_Last;

	add	DWORD PTR [ecx+4], 4

; 1622 :     }

	ret	4
??$_Emplace_back@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEX$$QAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::_Emplace_back<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Emplace_back@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEX$$QAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
_<_Vals_0>$ = 8						; size = 4
??$_Emplace_back@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEX$$QAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::_Emplace_back<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *>, COMDAT
; _this$ = ecx

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _<_Vals_0>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 1621 :         ++_Last;

	add	DWORD PTR [ecx+4], 4

; 1622 :     }

	ret	4
??$_Emplace_back@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEX$$QAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::_Emplace_back<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Emplace_back@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEX$$QAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
_<_Vals_0>$ = 8						; size = 4
??$_Emplace_back@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEX$$QAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::_Emplace_back<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *>, COMDAT
; _this$ = ecx

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _<_Vals_0>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 1621 :         ++_Last;

	add	DWORD PTR [ecx+4], 4

; 1622 :     }

	ret	4
??$_Emplace_back@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEX$$QAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::_Emplace_back<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Emplace_back@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEX$$QAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
_<_Vals_0>$ = 8						; size = 4
??$_Emplace_back@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEX$$QAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::_Emplace_back<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *>, COMDAT
; _this$ = ecx

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _<_Vals_0>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 1621 :         ++_Last;

	add	DWORD PTR [ecx+4], 4

; 1622 :     }

	ret	4
??$_Emplace_back@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEX$$QAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::_Emplace_back<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Emplace_back@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEX$$QAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
_<_Vals_0>$ = 8						; size = 4
??$_Emplace_back@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEX$$QAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::_Emplace_back<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *>, COMDAT
; _this$ = ecx

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _<_Vals_0>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 1621 :         ++_Last;

	add	DWORD PTR [ecx+4], 4

; 1622 :     }

	ret	4
??$_Emplace_back@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEX$$QAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::_Emplace_back<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Emplace_back@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEX$$QAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
_<_Vals_0>$ = 8						; size = 4
??$_Emplace_back@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEX$$QAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::_Emplace_back<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *>, COMDAT
; _this$ = ecx

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _<_Vals_0>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 1621 :         ++_Last;

	add	DWORD PTR [ecx+4], 4

; 1622 :     }

	ret	4
??$_Emplace_back@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEX$$QAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::_Emplace_back<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Emplace_back@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEX$$QAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
_<_Vals_0>$ = 8						; size = 4
??$_Emplace_back@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEX$$QAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::_Emplace_back<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *>, COMDAT
; _this$ = ecx

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _<_Vals_0>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 1621 :         ++_Last;

	add	DWORD PTR [ecx+4], 4

; 1622 :     }

	ret	4
??$_Emplace_back@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEX$$QAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::_Emplace_back<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Emplace_back@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEX$$QAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
_<_Vals_0>$ = 8						; size = 4
??$_Emplace_back@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEX$$QAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::_Emplace_back<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *>, COMDAT
; _this$ = ecx

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _<_Vals_0>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 1621 :         ++_Last;

	add	DWORD PTR [ecx+4], 4

; 1622 :     }

	ret	4
??$_Emplace_back@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEX$$QAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::_Emplace_back<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Copy_backward_memmove@PAU_NormalItem@R_dsgraph@@PAU12@@std@@YAPAU_NormalItem@R_dsgraph@@PAU12@00@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
??$_Copy_backward_memmove@PAU_NormalItem@R_dsgraph@@PAU12@@std@@YAPAU_NormalItem@R_dsgraph@@PAU12@00@Z PROC ; std::_Copy_backward_memmove<R_dsgraph::_NormalItem *,R_dsgraph::_NormalItem *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 4247 :     // implement copy_backward-like function as memmove
; 4248 :     auto _FirstPtr              = _To_address(_First);
; 4249 :     auto _LastPtr               = _To_address(_Last);
; 4250 :     auto _DestPtr               = _To_address(_Dest);
; 4251 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 4252 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 4253 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 4254 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);
; 4255 :     auto _Result                = _CSTD memmove(_Dest_ch - _Count, _First_ch, _Count);

	mov	eax, DWORD PTR __Dest$[esp-4]
	sub	edx, ecx
	push	edx
	push	ecx
	sub	eax, edx
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH

; 4256 :     if constexpr (is_pointer_v<_CtgIt2>) {
; 4257 :         return static_cast<_CtgIt2>(_Result);
; 4258 :     } else {
; 4259 :         return _Dest - (_LastPtr - _FirstPtr);
; 4260 :     }
; 4261 : }

	ret	0
??$_Copy_backward_memmove@PAU_NormalItem@R_dsgraph@@PAU12@@std@@YAPAU_NormalItem@R_dsgraph@@PAU12@00@Z ENDP ; std::_Copy_backward_memmove<R_dsgraph::_NormalItem *,R_dsgraph::_NormalItem *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_To_address@PAU_NormalItem@R_dsgraph@@@std@@YA?A_PABQAU_NormalItem@R_dsgraph@@@Z
_TEXT	SEGMENT
??$_To_address@PAU_NormalItem@R_dsgraph@@@std@@YA?A_PABQAU_NormalItem@R_dsgraph@@@Z PROC ; std::_To_address<R_dsgraph::_NormalItem *>, COMDAT
; __Val$ = ecx

; 3981 :     _STL_INTERNAL_STATIC_ASSERT(is_pointer_v<_Iter>);
; 3982 :     return _Val;

	mov	eax, DWORD PTR [ecx]

; 3983 : }

	ret	0
??$_To_address@PAU_NormalItem@R_dsgraph@@@std@@YA?A_PABQAU_NormalItem@R_dsgraph@@@Z ENDP ; std::_To_address<R_dsgraph::_NormalItem *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Push_heap_by_index@PAU_NormalItem@R_dsgraph@@U12@P6A_NABU12@0@Z@std@@YAXPAU_NormalItem@R_dsgraph@@HH$$QAU12@P6A_NABU12@2@Z@Z
_TEXT	SEGMENT
__Top$ = 8						; size = 4
__Val$ = 12						; size = 4
__Pred$ = 16						; size = 4
??$_Push_heap_by_index@PAU_NormalItem@R_dsgraph@@U12@P6A_NABU12@0@Z@std@@YAXPAU_NormalItem@R_dsgraph@@HH$$QAU12@P6A_NABU12@2@Z@Z PROC ; std::_Push_heap_by_index<R_dsgraph::_NormalItem *,R_dsgraph::_NormalItem,bool (__cdecl*)(R_dsgraph::_NormalItem const &,R_dsgraph::_NormalItem const &)>, COMDAT
; __First$ = ecx
; __Hole$ = edx

; 5264 :     _RanIt _First, _Iter_diff_t<_RanIt> _Hole, _Iter_diff_t<_RanIt> _Top, _Ty&& _Val, _Pr _Pred) {

	push	ebx
	push	edi
	mov	edi, edx
	mov	ebx, ecx

; 5265 :     // percolate _Hole to _Top or where _Val belongs
; 5266 :     using _Diff = _Iter_diff_t<_RanIt>;
; 5267 :     for (_Diff _Idx = (_Hole - 1) >> 1; // shift for codegen
; 5268 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

	cmp	DWORD PTR __Top$[esp+4], edi
	jge	SHORT $LN10@Push_heap_
	push	ebp
	push	esi
	npad	2
$LL4@Push_heap_:
	push	DWORD PTR __Val$[esp+12]
	lea	esi, DWORD PTR [edi-1]
	sar	esi, 1
	lea	ebp, DWORD PTR [ebx+esi*8]
	push	ebp
	call	DWORD PTR __Pred$[esp+20]
	add	esp, 8
	test	al, al
	je	SHORT $LN11@Push_heap_

; 5269 :          _Idx = (_Hole - 1) >> 1) { // shift for codegen
; 5270 :         // move _Hole up to parent
; 5271 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [ebp]
	mov	ecx, DWORD PTR [ebp+4]
	mov	DWORD PTR [ebx+edi*8], eax
	mov	DWORD PTR [ebx+edi*8+4], ecx

; 5272 :         _Hole             = _Idx;

	mov	edi, esi
	cmp	DWORD PTR __Top$[esp+12], esi
	jl	SHORT $LL4@Push_heap_
$LN11@Push_heap_:
	pop	esi
	pop	ebp
$LN10@Push_heap_:

; 5273 :     }
; 5274 : 
; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	ecx, DWORD PTR __Val$[esp+4]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [ebx+edi*8], eax
	mov	DWORD PTR [ebx+edi*8+4], ecx
	pop	edi
	pop	ebx

; 5276 : }

	ret	0
??$_Push_heap_by_index@PAU_NormalItem@R_dsgraph@@U12@P6A_NABU12@0@Z@std@@YAXPAU_NormalItem@R_dsgraph@@HH$$QAU12@P6A_NABU12@2@Z@Z ENDP ; std::_Push_heap_by_index<R_dsgraph::_NormalItem *,R_dsgraph::_NormalItem,bool (__cdecl*)(R_dsgraph::_NormalItem const &,R_dsgraph::_NormalItem const &)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Pop_heap_hole_unchecked@PAU_NormalItem@R_dsgraph@@U12@P6A_NABU12@0@Z@std@@YAXPAU_NormalItem@R_dsgraph@@00$$QAU12@P6A_NABU12@2@Z@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Val$ = 12						; size = 4
__Pred$ = 16						; size = 4
??$_Pop_heap_hole_unchecked@PAU_NormalItem@R_dsgraph@@U12@P6A_NABU12@0@Z@std@@YAXPAU_NormalItem@R_dsgraph@@00$$QAU12@P6A_NABU12@2@Z@Z PROC ; std::_Pop_heap_hole_unchecked<R_dsgraph::_NormalItem *,R_dsgraph::_NormalItem,bool (__cdecl*)(R_dsgraph::_NormalItem const &,R_dsgraph::_NormalItem const &)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 5405 :     // pop *_First to *_Dest and reheap
; 5406 :     // precondition: _First != _Last
; 5407 :     // precondition: _First != _Dest
; 5408 :     *_Dest      = _STD move(*_First);

	mov	eax, DWORD PTR __Dest$[esp-4]
	push	esi
	mov	esi, DWORD PTR [ecx]
	push	edi
	mov	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edi

; 5409 :     using _Diff = _Iter_diff_t<_RanIt>;
; 5410 :     _Pop_heap_hole_by_index(

	pop	edi
	mov	DWORD PTR [eax], esi
	pop	esi
	sub	edx, ecx
	sar	edx, 3
	mov	DWORD PTR __Dest$[esp-4], edx
	xor	edx, edx
	jmp	??$_Pop_heap_hole_by_index@PAU_NormalItem@R_dsgraph@@U12@P6A_NABU12@0@Z@std@@YAXPAU_NormalItem@R_dsgraph@@HH$$QAU12@P6A_NABU12@2@Z@Z ; std::_Pop_heap_hole_by_index<R_dsgraph::_NormalItem *,R_dsgraph::_NormalItem,bool (__cdecl*)(R_dsgraph::_NormalItem const &,R_dsgraph::_NormalItem const &)>
??$_Pop_heap_hole_unchecked@PAU_NormalItem@R_dsgraph@@U12@P6A_NABU12@0@Z@std@@YAXPAU_NormalItem@R_dsgraph@@00$$QAU12@P6A_NABU12@2@Z@Z ENDP ; std::_Pop_heap_hole_unchecked<R_dsgraph::_NormalItem *,R_dsgraph::_NormalItem,bool (__cdecl*)(R_dsgraph::_NormalItem const &,R_dsgraph::_NormalItem const &)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Med3_unchecked@PAU_NormalItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_NormalItem@R_dsgraph@@00P6A_NABU12@1@Z@Z
_TEXT	SEGMENT
__Last$ = 8						; size = 4
__Pred$ = 12						; size = 4
??$_Med3_unchecked@PAU_NormalItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_NormalItem@R_dsgraph@@00P6A_NABU12@1@Z@Z PROC ; std::_Med3_unchecked<R_dsgraph::_NormalItem *,bool (__cdecl*)(R_dsgraph::_NormalItem const &,R_dsgraph::_NormalItem const &)>, COMDAT
; __First$ = ecx
; __Mid$ = edx

; 6943 : _CONSTEXPR20 void _Med3_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred) {

	push	ecx
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	ebx, ecx
	mov	edi, edx

; 6944 :     // sort median of three elements to middle
; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	ebx
	push	edi
	call	DWORD PTR __Pred$[esp+24]
	add	esp, 8
	test	al, al
	je	SHORT $LN19@Med3_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	edx, DWORD PTR [edi]
	mov	esi, DWORD PTR [edi+4]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebx]
	mov	ecx, DWORD PTR [ebx+4]
	mov	DWORD PTR [edi], eax
	mov	DWORD PTR [edi+4], ecx

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebx], edx
	mov	DWORD PTR [ebx+4], esi
$LN19@Med3_unche:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6949 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

	mov	ebp, DWORD PTR __Last$[esp+16]
	push	edi
	push	ebp
	call	DWORD PTR __Pred$[esp+24]
	add	esp, 8
	test	al, al
	je	SHORT $LN4@Med3_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	edx, DWORD PTR [ebp]
	mov	esi, DWORD PTR [ebp+4]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [edi+4]
	mov	DWORD PTR [ebp], eax
	mov	DWORD PTR [ebp+4], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	ebx
	push	edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], edx
	mov	DWORD PTR [edi+4], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	call	DWORD PTR __Pred$[esp+24]
	add	esp, 8
	test	al, al
	je	SHORT $LN4@Med3_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	edx, DWORD PTR [edi]
	mov	esi, DWORD PTR [edi+4]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [ebx]
	mov	ecx, DWORD PTR [ebx+4]
	mov	DWORD PTR [edi], eax
	mov	DWORD PTR [edi+4], ecx

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebx], edx
	mov	DWORD PTR [ebx+4], esi
$LN4@Med3_unche:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6956 : }

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	pop	ecx
	ret	0
??$_Med3_unchecked@PAU_NormalItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_NormalItem@R_dsgraph@@00P6A_NABU12@1@Z@Z ENDP ; std::_Med3_unchecked<R_dsgraph::_NormalItem *,bool (__cdecl*)(R_dsgraph::_NormalItem const &,R_dsgraph::_NormalItem const &)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$swap@U_NormalItem@R_dsgraph@@$0A@@std@@YAXAAU_NormalItem@R_dsgraph@@0@Z
_TEXT	SEGMENT
??$swap@U_NormalItem@R_dsgraph@@$0A@@std@@YAXAAU_NormalItem@R_dsgraph@@0@Z PROC ; std::swap<R_dsgraph::_NormalItem,0>, COMDAT
; __Left$ = ecx
; __Right$ = edx

; 99   :     is_nothrow_move_constructible_v<_Ty>&& is_nothrow_move_assignable_v<_Ty>) {

	push	ebx
	mov	ebx, edx

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	edx, DWORD PTR [ecx+4]
	push	esi
	push	edi
	mov	edi, DWORD PTR [ecx]

; 101  :     _Left    = _STD move(_Right);

	mov	esi, DWORD PTR [ebx+4]
	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR [ecx+4], esi
	mov	DWORD PTR [ecx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [ebx], edi

; 103  : }

	pop	edi
	pop	esi
	mov	DWORD PTR [ebx+4], edx
	pop	ebx
	ret	0
??$swap@U_NormalItem@R_dsgraph@@$0A@@std@@YAXAAU_NormalItem@R_dsgraph@@0@Z ENDP ; std::swap<R_dsgraph::_NormalItem,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@AAPAU_NormalItem@R_dsgraph@@@std@@YAAAPAU_NormalItem@R_dsgraph@@AAPAU12@@Z
_TEXT	SEGMENT
??$forward@AAPAU_NormalItem@R_dsgraph@@@std@@YAAAPAU_NormalItem@R_dsgraph@@AAPAU12@@Z PROC ; std::forward<R_dsgraph::_NormalItem * &>, COMDAT
; __Arg$ = ecx

; 1386 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, ecx

; 1387 : }

	ret	0
??$forward@AAPAU_NormalItem@R_dsgraph@@@std@@YAAAPAU_NormalItem@R_dsgraph@@AAPAU12@@Z ENDP ; std::forward<R_dsgraph::_NormalItem * &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Copy_backward_memmove@PAU_MatrixItem@R_dsgraph@@PAU12@@std@@YAPAU_MatrixItem@R_dsgraph@@PAU12@00@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
??$_Copy_backward_memmove@PAU_MatrixItem@R_dsgraph@@PAU12@@std@@YAPAU_MatrixItem@R_dsgraph@@PAU12@00@Z PROC ; std::_Copy_backward_memmove<R_dsgraph::_MatrixItem *,R_dsgraph::_MatrixItem *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 4247 :     // implement copy_backward-like function as memmove
; 4248 :     auto _FirstPtr              = _To_address(_First);
; 4249 :     auto _LastPtr               = _To_address(_Last);
; 4250 :     auto _DestPtr               = _To_address(_Dest);
; 4251 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 4252 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 4253 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 4254 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);
; 4255 :     auto _Result                = _CSTD memmove(_Dest_ch - _Count, _First_ch, _Count);

	mov	eax, DWORD PTR __Dest$[esp-4]
	sub	edx, ecx
	push	edx
	push	ecx
	sub	eax, edx
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH

; 4256 :     if constexpr (is_pointer_v<_CtgIt2>) {
; 4257 :         return static_cast<_CtgIt2>(_Result);
; 4258 :     } else {
; 4259 :         return _Dest - (_LastPtr - _FirstPtr);
; 4260 :     }
; 4261 : }

	ret	0
??$_Copy_backward_memmove@PAU_MatrixItem@R_dsgraph@@PAU12@@std@@YAPAU_MatrixItem@R_dsgraph@@PAU12@00@Z ENDP ; std::_Copy_backward_memmove<R_dsgraph::_MatrixItem *,R_dsgraph::_MatrixItem *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_To_address@PAU_MatrixItem@R_dsgraph@@@std@@YA?A_PABQAU_MatrixItem@R_dsgraph@@@Z
_TEXT	SEGMENT
??$_To_address@PAU_MatrixItem@R_dsgraph@@@std@@YA?A_PABQAU_MatrixItem@R_dsgraph@@@Z PROC ; std::_To_address<R_dsgraph::_MatrixItem *>, COMDAT
; __Val$ = ecx

; 3981 :     _STL_INTERNAL_STATIC_ASSERT(is_pointer_v<_Iter>);
; 3982 :     return _Val;

	mov	eax, DWORD PTR [ecx]

; 3983 : }

	ret	0
??$_To_address@PAU_MatrixItem@R_dsgraph@@@std@@YA?A_PABQAU_MatrixItem@R_dsgraph@@@Z ENDP ; std::_To_address<R_dsgraph::_MatrixItem *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Push_heap_by_index@PAU_MatrixItem@R_dsgraph@@U12@P6A_NABU12@0@Z@std@@YAXPAU_MatrixItem@R_dsgraph@@HH$$QAU12@P6A_NABU12@2@Z@Z
_TEXT	SEGMENT
__First$1$ = -4						; size = 4
__Top$ = 8						; size = 4
__Val$ = 12						; size = 4
__Pred$ = 16						; size = 4
??$_Push_heap_by_index@PAU_MatrixItem@R_dsgraph@@U12@P6A_NABU12@0@Z@std@@YAXPAU_MatrixItem@R_dsgraph@@HH$$QAU12@P6A_NABU12@2@Z@Z PROC ; std::_Push_heap_by_index<R_dsgraph::_MatrixItem *,R_dsgraph::_MatrixItem,bool (__cdecl*)(R_dsgraph::_MatrixItem const &,R_dsgraph::_MatrixItem const &)>, COMDAT
; __First$ = ecx
; __Hole$ = edx

; 5264 :     _RanIt _First, _Iter_diff_t<_RanIt> _Hole, _Iter_diff_t<_RanIt> _Top, _Ty&& _Val, _Pr _Pred) {

	push	ecx
	push	esi
	mov	esi, edx
	mov	DWORD PTR __First$1$[esp+8], ecx

; 5268 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

	mov	edx, DWORD PTR __Val$[esp+4]
	push	edi
	cmp	DWORD PTR __Top$[esp+8], esi
	jge	SHORT $LN3@Push_heap_
	push	ebx
	push	ebp
$LL4@Push_heap_:

; 5265 :     // percolate _Hole to _Top or where _Val belongs
; 5266 :     using _Diff = _Iter_diff_t<_RanIt>;
; 5267 :     for (_Diff _Idx = (_Hole - 1) >> 1; // shift for codegen

	lea	ebx, DWORD PTR [esi-1]
	sar	ebx, 1

; 5268 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

	imul	ebp, ebx, 76
	push	edx
	add	ebp, ecx
	push	ebp
	call	DWORD PTR __Pred$[esp+24]
	add	esp, 8
	test	al, al
	je	SHORT $LN10@Push_heap_
	mov	edx, DWORD PTR __Val$[esp+16]

; 5269 :          _Idx = (_Hole - 1) >> 1) { // shift for codegen
; 5270 :         // move _Hole up to parent
; 5271 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	ecx, 19					; 00000013H
	imul	edi, esi, 76
	mov	esi, ebp
	add	edi, DWORD PTR __First$1$[esp+20]
	rep movsd

; 5272 :         _Hole             = _Idx;

	mov	esi, ebx
	mov	ecx, DWORD PTR __First$1$[esp+20]
	cmp	DWORD PTR __Top$[esp+16], ebx
	jl	SHORT $LL4@Push_heap_
$LN10@Push_heap_:
	mov	ecx, DWORD PTR __First$1$[esp+20]
	mov	edx, DWORD PTR __Val$[esp+16]
	pop	ebp
	pop	ebx
$LN3@Push_heap_:

; 5273 :     }
; 5274 : 
; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	imul	edi, esi, 76
	mov	esi, edx
	add	edi, ecx
	mov	ecx, 19					; 00000013H
	rep movsd
	pop	edi
	pop	esi

; 5276 : }

	pop	ecx
	ret	0
??$_Push_heap_by_index@PAU_MatrixItem@R_dsgraph@@U12@P6A_NABU12@0@Z@std@@YAXPAU_MatrixItem@R_dsgraph@@HH$$QAU12@P6A_NABU12@2@Z@Z ENDP ; std::_Push_heap_by_index<R_dsgraph::_MatrixItem *,R_dsgraph::_MatrixItem,bool (__cdecl*)(R_dsgraph::_MatrixItem const &,R_dsgraph::_MatrixItem const &)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Pop_heap_hole_unchecked@PAU_MatrixItem@R_dsgraph@@U12@P6A_NABU12@0@Z@std@@YAXPAU_MatrixItem@R_dsgraph@@00$$QAU12@P6A_NABU12@2@Z@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Val$ = 12						; size = 4
__Pred$ = 16						; size = 4
??$_Pop_heap_hole_unchecked@PAU_MatrixItem@R_dsgraph@@U12@P6A_NABU12@0@Z@std@@YAXPAU_MatrixItem@R_dsgraph@@00$$QAU12@P6A_NABU12@2@Z@Z PROC ; std::_Pop_heap_hole_unchecked<R_dsgraph::_MatrixItem *,R_dsgraph::_MatrixItem,bool (__cdecl*)(R_dsgraph::_MatrixItem const &,R_dsgraph::_MatrixItem const &)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 5404 : _CONSTEXPR20 void _Pop_heap_hole_unchecked(_RanIt _First, _RanIt _Last, _RanIt _Dest, _Ty&& _Val, _Pr _Pred) {

	push	ebx
	mov	ebx, ecx

; 5405 :     // pop *_First to *_Dest and reheap
; 5406 :     // precondition: _First != _Last
; 5407 :     // precondition: _First != _Dest
; 5408 :     *_Dest      = _STD move(*_First);

	mov	ecx, 19					; 00000013H
	push	esi
	push	edi

; 5409 :     using _Diff = _Iter_diff_t<_RanIt>;
; 5410 :     _Pop_heap_hole_by_index(

	push	DWORD PTR __Pred$[esp+8]
	mov	edi, DWORD PTR __Dest$[esp+12]
	sub	edx, ebx
	push	DWORD PTR __Val$[esp+12]
	sar	edx, 2
	mov	esi, ebx
	imul	eax, edx, 678152731
	xor	edx, edx
	rep movsd
	push	eax
	mov	ecx, ebx
	call	??$_Pop_heap_hole_by_index@PAU_MatrixItem@R_dsgraph@@U12@P6A_NABU12@0@Z@std@@YAXPAU_MatrixItem@R_dsgraph@@HH$$QAU12@P6A_NABU12@2@Z@Z ; std::_Pop_heap_hole_by_index<R_dsgraph::_MatrixItem *,R_dsgraph::_MatrixItem,bool (__cdecl*)(R_dsgraph::_MatrixItem const &,R_dsgraph::_MatrixItem const &)>
	add	esp, 12					; 0000000cH
	pop	edi
	pop	esi
	pop	ebx

; 5411 :         _First, static_cast<_Diff>(0), static_cast<_Diff>(_Last - _First), _STD forward<_Ty>(_Val), _Pred);
; 5412 : }

	ret	0
??$_Pop_heap_hole_unchecked@PAU_MatrixItem@R_dsgraph@@U12@P6A_NABU12@0@Z@std@@YAXPAU_MatrixItem@R_dsgraph@@00$$QAU12@P6A_NABU12@2@Z@Z ENDP ; std::_Pop_heap_hole_unchecked<R_dsgraph::_MatrixItem *,R_dsgraph::_MatrixItem,bool (__cdecl*)(R_dsgraph::_MatrixItem const &,R_dsgraph::_MatrixItem const &)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Med3_unchecked@PAU_MatrixItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_MatrixItem@R_dsgraph@@00P6A_NABU12@1@Z@Z
_TEXT	SEGMENT
__Tmp$1 = -76						; size = 76
__Tmp$2 = -76						; size = 76
__Tmp$3 = -76						; size = 76
__Last$ = 8						; size = 4
__Pred$ = 12						; size = 4
??$_Med3_unchecked@PAU_MatrixItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_MatrixItem@R_dsgraph@@00P6A_NABU12@1@Z@Z PROC ; std::_Med3_unchecked<R_dsgraph::_MatrixItem *,bool (__cdecl*)(R_dsgraph::_MatrixItem const &,R_dsgraph::_MatrixItem const &)>, COMDAT
; __First$ = ecx
; __Mid$ = edx

; 6943 : _CONSTEXPR20 void _Med3_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred) {

	sub	esp, 76					; 0000004cH
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	ebp, ecx
	mov	ebx, edx

; 6944 :     // sort median of three elements to middle
; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	ebp
	push	ebx
	call	DWORD PTR __Pred$[esp+96]
	add	esp, 8
	test	al, al
	je	SHORT $LN2@Med3_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, 19					; 00000013H
	lea	edi, DWORD PTR __Tmp$3[esp+92]
	mov	esi, ebx
	rep movsd

; 101  :     _Left    = _STD move(_Right);

	mov	ecx, 19					; 00000013H
	mov	esi, ebp
	mov	edi, ebx
	rep movsd

; 102  :     _Right   = _STD move(_Tmp);

	mov	ecx, 19					; 00000013H
	lea	esi, DWORD PTR __Tmp$3[esp+92]
	mov	edi, ebp
	rep movsd
$LN2@Med3_unche:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6949 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

	mov	esi, DWORD PTR __Last$[esp+88]
	push	ebx
	push	esi
	call	DWORD PTR __Pred$[esp+96]
	add	esp, 8
	test	al, al
	je	SHORT $LN4@Med3_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, 19					; 00000013H
	lea	edi, DWORD PTR __Tmp$2[esp+92]
	rep movsd

; 101  :     _Left    = _STD move(_Right);

	mov	edi, DWORD PTR __Last$[esp+88]
	mov	ecx, 19					; 00000013H
	mov	esi, ebx
	rep movsd

; 102  :     _Right   = _STD move(_Tmp);

	mov	ecx, 19					; 00000013H
	lea	esi, DWORD PTR __Tmp$2[esp+92]
	mov	edi, ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	ebp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 102  :     _Right   = _STD move(_Tmp);

	rep movsd
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	ebx
	call	DWORD PTR __Pred$[esp+96]
	add	esp, 8
	test	al, al
	je	SHORT $LN4@Med3_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, 19					; 00000013H
	lea	edi, DWORD PTR __Tmp$1[esp+92]
	mov	esi, ebx
	rep movsd

; 101  :     _Left    = _STD move(_Right);

	mov	ecx, 19					; 00000013H
	mov	esi, ebp
	mov	edi, ebx
	rep movsd

; 102  :     _Right   = _STD move(_Tmp);

	mov	ecx, 19					; 00000013H
	lea	esi, DWORD PTR __Tmp$1[esp+92]
	mov	edi, ebp
	rep movsd
$LN4@Med3_unche:
	pop	edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6956 : }

	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 76					; 0000004cH
	ret	0
??$_Med3_unchecked@PAU_MatrixItem@R_dsgraph@@P6A_NABU12@0@Z@std@@YAXPAU_MatrixItem@R_dsgraph@@00P6A_NABU12@1@Z@Z ENDP ; std::_Med3_unchecked<R_dsgraph::_MatrixItem *,bool (__cdecl*)(R_dsgraph::_MatrixItem const &,R_dsgraph::_MatrixItem const &)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$swap@U_MatrixItem@R_dsgraph@@$0A@@std@@YAXAAU_MatrixItem@R_dsgraph@@0@Z
_TEXT	SEGMENT
__Tmp$ = -76						; size = 76
??$swap@U_MatrixItem@R_dsgraph@@$0A@@std@@YAXAAU_MatrixItem@R_dsgraph@@0@Z PROC ; std::swap<R_dsgraph::_MatrixItem,0>, COMDAT
; __Left$ = ecx
; __Right$ = edx

; 99   :     is_nothrow_move_constructible_v<_Ty>&& is_nothrow_move_assignable_v<_Ty>) {

	sub	esp, 76					; 0000004cH
	mov	eax, ecx

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, 19					; 00000013H
	push	esi
	push	edi
	mov	esi, eax
	lea	edi, DWORD PTR __Tmp$[esp+84]
	rep movsd

; 101  :     _Left    = _STD move(_Right);

	mov	ecx, 19					; 00000013H
	mov	esi, edx
	mov	edi, eax
	rep movsd

; 102  :     _Right   = _STD move(_Tmp);

	mov	ecx, 19					; 00000013H
	lea	esi, DWORD PTR __Tmp$[esp+84]
	mov	edi, edx
	rep movsd
	pop	edi
	pop	esi

; 103  : }

	add	esp, 76					; 0000004cH
	ret	0
??$swap@U_MatrixItem@R_dsgraph@@$0A@@std@@YAXAAU_MatrixItem@R_dsgraph@@0@Z ENDP ; std::swap<R_dsgraph::_MatrixItem,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@AAPAU_MatrixItem@R_dsgraph@@@std@@YAAAPAU_MatrixItem@R_dsgraph@@AAPAU12@@Z
_TEXT	SEGMENT
??$forward@AAPAU_MatrixItem@R_dsgraph@@@std@@YAAAPAU_MatrixItem@R_dsgraph@@AAPAU12@@Z PROC ; std::forward<R_dsgraph::_MatrixItem * &>, COMDAT
; __Arg$ = ecx

; 1386 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, ecx

; 1387 : }

	ret	0
??$forward@AAPAU_MatrixItem@R_dsgraph@@@std@@YAAAPAU_MatrixItem@R_dsgraph@@AAPAU12@@Z ENDP ; std::forward<R_dsgraph::_MatrixItem * &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Push_heap_by_index@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z
_TEXT	SEGMENT
__Top$ = 8						; size = 4
__Val$ = 12						; size = 4
__Pred$ = 16						; size = 4
??$_Push_heap_by_index@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z PROC ; std::_Push_heap_by_index<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Hole$ = edx

; 5264 :     _RanIt _First, _Iter_diff_t<_RanIt> _Hole, _Iter_diff_t<_RanIt> _Top, _Ty&& _Val, _Pr _Pred) {

	push	ebx
	push	edi
	mov	edi, edx
	mov	ebx, ecx

; 5265 :     // percolate _Hole to _Top or where _Val belongs
; 5266 :     using _Diff = _Iter_diff_t<_RanIt>;
; 5267 :     for (_Diff _Idx = (_Hole - 1) >> 1; // shift for codegen
; 5268 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

	cmp	DWORD PTR __Top$[esp+4], edi
	jge	SHORT $LN10@Push_heap_
	push	ebp
	mov	ebp, DWORD PTR __Val$[esp+8]
	push	esi
$LL4@Push_heap_:
	push	DWORD PTR [ebp]
	lea	esi, DWORD PTR [edi-1]
	sar	esi, 1
	push	DWORD PTR [ebx+esi*4]
	call	DWORD PTR __Pred$[esp+20]
	add	esp, 8
	test	al, al
	je	SHORT $LN11@Push_heap_

; 5269 :          _Idx = (_Hole - 1) >> 1) { // shift for codegen
; 5270 :         // move _Hole up to parent
; 5271 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [ebx+esi*4]
	mov	DWORD PTR [ebx+edi*4], eax

; 5272 :         _Hole             = _Idx;

	mov	edi, esi
	cmp	DWORD PTR __Top$[esp+12], esi
	jl	SHORT $LL4@Push_heap_
$LN11@Push_heap_:

; 5273 :     }
; 5274 : 
; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	eax, DWORD PTR [ebp]
	pop	esi
	pop	ebp
	mov	DWORD PTR [ebx+edi*4], eax
	pop	edi

; 5276 : }

	pop	ebx
	ret	0
$LN10@Push_heap_:

; 5273 :     }
; 5274 : 
; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	eax, DWORD PTR __Val$[esp+4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ebx+edi*4], eax
	pop	edi

; 5276 : }

	pop	ebx
	ret	0
??$_Push_heap_by_index@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ENDP ; std::_Push_heap_by_index<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Pop_heap_hole_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@00$$QAPAU12@P6A_NPAU12@2@Z@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Val$ = 12						; size = 4
__Pred$ = 16						; size = 4
??$_Pop_heap_hole_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@00$$QAPAU12@P6A_NPAU12@2@Z@Z PROC ; std::_Pop_heap_hole_unchecked<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 5405 :     // pop *_First to *_Dest and reheap
; 5406 :     // precondition: _First != _Last
; 5407 :     // precondition: _First != _Dest
; 5408 :     *_Dest      = _STD move(*_First);

	mov	eax, DWORD PTR __Dest$[esp-4]
	push	esi
	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR [eax], esi

; 5409 :     using _Diff = _Iter_diff_t<_RanIt>;
; 5410 :     _Pop_heap_hole_by_index(

	pop	esi
	sub	edx, ecx
	sar	edx, 2
	mov	DWORD PTR __Dest$[esp-4], edx
	xor	edx, edx
	jmp	??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ; std::_Pop_heap_hole_by_index<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *)>
??$_Pop_heap_hole_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@00$$QAPAU12@P6A_NPAU12@2@Z@Z ENDP ; std::_Pop_heap_hole_unchecked<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Med3_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z
_TEXT	SEGMENT
__Last$ = 8						; size = 4
__Pred$ = 12						; size = 4
??$_Med3_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z PROC ; std::_Med3_unchecked<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Mid$ = edx

; 6943 : _CONSTEXPR20 void _Med3_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred) {

	push	ebx
	push	ebp

; 6944 :     // sort median of three elements to middle
; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	mov	ebp, DWORD PTR __Pred$[esp+4]
	push	esi
	push	edi
	mov	edi, ecx
	mov	esi, edx
	push	DWORD PTR [edi]
	push	DWORD PTR [esi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN19@Med3_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN19@Med3_unche:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6949 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

	mov	ebx, DWORD PTR __Last$[esp+12]
	push	DWORD PTR [esi]
	push	DWORD PTR [ebx]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN4@Med3_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [ebx]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [ebx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [esi], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [edi]
	push	ecx
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN4@Med3_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN4@Med3_unche:
	pop	edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6956 : }

	pop	esi
	pop	ebp
	pop	ebx
	ret	0
??$_Med3_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z ENDP ; std::_Med3_unchecked<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$swap@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@$0A@@std@@YAXAAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z
_TEXT	SEGMENT
??$swap@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@$0A@@std@@YAXAAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z PROC ; std::swap<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,0>, COMDAT
; __Left$ = ecx
; __Right$ = edx

; 100  :     _Ty _Tmp = _STD move(_Left);
; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edx]
	push	esi
	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR [ecx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edx], esi
	pop	esi

; 103  : }

	ret	0
??$swap@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@$0A@@std@@YAXAAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ENDP ; std::swap<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@AAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAAAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU12@@Z
_TEXT	SEGMENT
??$forward@AAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAAAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU12@@Z PROC ; std::forward<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * * &>, COMDAT
; __Arg$ = ecx

; 1386 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, ecx

; 1387 : }

	ret	0
??$forward@AAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAAAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU12@@Z ENDP ; std::forward<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * * &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Emplace_back@AAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXAAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
_<_Vals_0>$ = 8						; size = 4
??$_Emplace_back@AAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXAAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Emplace_back<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * &>, COMDAT
; _this$ = ecx

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _<_Vals_0>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 1621 :         ++_Last;

	add	DWORD PTR [ecx+4], 4

; 1622 :     }

	ret	4
??$_Emplace_back@AAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXAAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Emplace_back<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Push_heap_by_index@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z
_TEXT	SEGMENT
__Top$ = 8						; size = 4
__Val$ = 12						; size = 4
__Pred$ = 16						; size = 4
??$_Push_heap_by_index@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z PROC ; std::_Push_heap_by_index<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Hole$ = edx

; 5264 :     _RanIt _First, _Iter_diff_t<_RanIt> _Hole, _Iter_diff_t<_RanIt> _Top, _Ty&& _Val, _Pr _Pred) {

	push	ebx
	push	edi
	mov	edi, edx
	mov	ebx, ecx

; 5265 :     // percolate _Hole to _Top or where _Val belongs
; 5266 :     using _Diff = _Iter_diff_t<_RanIt>;
; 5267 :     for (_Diff _Idx = (_Hole - 1) >> 1; // shift for codegen
; 5268 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

	cmp	DWORD PTR __Top$[esp+4], edi
	jge	SHORT $LN10@Push_heap_
	push	ebp
	mov	ebp, DWORD PTR __Val$[esp+8]
	push	esi
$LL4@Push_heap_:
	push	DWORD PTR [ebp]
	lea	esi, DWORD PTR [edi-1]
	sar	esi, 1
	push	DWORD PTR [ebx+esi*4]
	call	DWORD PTR __Pred$[esp+20]
	add	esp, 8
	test	al, al
	je	SHORT $LN11@Push_heap_

; 5269 :          _Idx = (_Hole - 1) >> 1) { // shift for codegen
; 5270 :         // move _Hole up to parent
; 5271 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [ebx+esi*4]
	mov	DWORD PTR [ebx+edi*4], eax

; 5272 :         _Hole             = _Idx;

	mov	edi, esi
	cmp	DWORD PTR __Top$[esp+12], esi
	jl	SHORT $LL4@Push_heap_
$LN11@Push_heap_:

; 5273 :     }
; 5274 : 
; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	eax, DWORD PTR [ebp]
	pop	esi
	pop	ebp
	mov	DWORD PTR [ebx+edi*4], eax
	pop	edi

; 5276 : }

	pop	ebx
	ret	0
$LN10@Push_heap_:

; 5273 :     }
; 5274 : 
; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	eax, DWORD PTR __Val$[esp+4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ebx+edi*4], eax
	pop	edi

; 5276 : }

	pop	ebx
	ret	0
??$_Push_heap_by_index@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ENDP ; std::_Push_heap_by_index<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Pop_heap_hole_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@00$$QAPAU12@P6A_NPAU12@2@Z@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Val$ = 12						; size = 4
__Pred$ = 16						; size = 4
??$_Pop_heap_hole_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@00$$QAPAU12@P6A_NPAU12@2@Z@Z PROC ; std::_Pop_heap_hole_unchecked<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 5405 :     // pop *_First to *_Dest and reheap
; 5406 :     // precondition: _First != _Last
; 5407 :     // precondition: _First != _Dest
; 5408 :     *_Dest      = _STD move(*_First);

	mov	eax, DWORD PTR __Dest$[esp-4]
	push	esi
	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR [eax], esi

; 5409 :     using _Diff = _Iter_diff_t<_RanIt>;
; 5410 :     _Pop_heap_hole_by_index(

	pop	esi
	sub	edx, ecx
	sar	edx, 2
	mov	DWORD PTR __Dest$[esp-4], edx
	xor	edx, edx
	jmp	??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ; std::_Pop_heap_hole_by_index<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *)>
??$_Pop_heap_hole_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@00$$QAPAU12@P6A_NPAU12@2@Z@Z ENDP ; std::_Pop_heap_hole_unchecked<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Med3_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z
_TEXT	SEGMENT
__Last$ = 8						; size = 4
__Pred$ = 12						; size = 4
??$_Med3_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z PROC ; std::_Med3_unchecked<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Mid$ = edx

; 6943 : _CONSTEXPR20 void _Med3_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred) {

	push	ebx
	push	ebp

; 6944 :     // sort median of three elements to middle
; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	mov	ebp, DWORD PTR __Pred$[esp+4]
	push	esi
	push	edi
	mov	edi, ecx
	mov	esi, edx
	push	DWORD PTR [edi]
	push	DWORD PTR [esi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN19@Med3_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN19@Med3_unche:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6949 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

	mov	ebx, DWORD PTR __Last$[esp+12]
	push	DWORD PTR [esi]
	push	DWORD PTR [ebx]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN4@Med3_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [ebx]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [ebx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [esi], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [edi]
	push	ecx
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN4@Med3_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN4@Med3_unche:
	pop	edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6956 : }

	pop	esi
	pop	ebp
	pop	ebx
	ret	0
??$_Med3_unchecked@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z ENDP ; std::_Med3_unchecked<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$swap@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@$0A@@std@@YAXAAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z
_TEXT	SEGMENT
??$swap@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@$0A@@std@@YAXAAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z PROC ; std::swap<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,0>, COMDAT
; __Left$ = ecx
; __Right$ = edx

; 100  :     _Ty _Tmp = _STD move(_Left);
; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edx]
	push	esi
	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR [ecx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edx], esi
	pop	esi

; 103  : }

	ret	0
??$swap@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@$0A@@std@@YAXAAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ENDP ; std::swap<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@AAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAAAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU12@@Z
_TEXT	SEGMENT
??$forward@AAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAAAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU12@@Z PROC ; std::forward<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * * &>, COMDAT
; __Arg$ = ecx

; 1386 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, ecx

; 1387 : }

	ret	0
??$forward@AAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAAAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU12@@Z ENDP ; std::forward<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * * &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Emplace_back@AAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXAAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
_<_Vals_0>$ = 8						; size = 4
??$_Emplace_back@AAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXAAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Emplace_back<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * &>, COMDAT
; _this$ = ecx

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _<_Vals_0>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 1621 :         ++_Last;

	add	DWORD PTR [ecx+4], 4

; 1622 :     }

	ret	4
??$_Emplace_back@AAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Uninitialized_backout_al@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXAAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; std::_Uninitialized_backout_al<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Emplace_back<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Copy_backward_memmove@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
??$_Copy_backward_memmove@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z PROC ; std::_Copy_backward_memmove<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 4247 :     // implement copy_backward-like function as memmove
; 4248 :     auto _FirstPtr              = _To_address(_First);
; 4249 :     auto _LastPtr               = _To_address(_Last);
; 4250 :     auto _DestPtr               = _To_address(_Dest);
; 4251 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 4252 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 4253 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 4254 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);
; 4255 :     auto _Result                = _CSTD memmove(_Dest_ch - _Count, _First_ch, _Count);

	mov	eax, DWORD PTR __Dest$[esp-4]
	sub	edx, ecx
	push	edx
	push	ecx
	sub	eax, edx
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH

; 4256 :     if constexpr (is_pointer_v<_CtgIt2>) {
; 4257 :         return static_cast<_CtgIt2>(_Result);
; 4258 :     } else {
; 4259 :         return _Dest - (_LastPtr - _FirstPtr);
; 4260 :     }
; 4261 : }

	ret	0
??$_Copy_backward_memmove@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z ENDP ; std::_Copy_backward_memmove<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z
_TEXT	SEGMENT
??$forward@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z PROC ; std::forward<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *>, COMDAT
; __Arg$ = ecx

; 1386 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, ecx

; 1387 : }

	ret	0
??$forward@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z ENDP ; std::forward<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Push_heap_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z
_TEXT	SEGMENT
__Top$ = 8						; size = 4
__Val$ = 12						; size = 4
__Pred$ = 16						; size = 4
??$_Push_heap_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z PROC ; std::_Push_heap_by_index<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Hole$ = edx

; 5264 :     _RanIt _First, _Iter_diff_t<_RanIt> _Hole, _Iter_diff_t<_RanIt> _Top, _Ty&& _Val, _Pr _Pred) {

	push	ebx
	push	edi
	mov	edi, edx
	mov	ebx, ecx

; 5265 :     // percolate _Hole to _Top or where _Val belongs
; 5266 :     using _Diff = _Iter_diff_t<_RanIt>;
; 5267 :     for (_Diff _Idx = (_Hole - 1) >> 1; // shift for codegen
; 5268 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

	cmp	DWORD PTR __Top$[esp+4], edi
	jge	SHORT $LN10@Push_heap_
	push	ebp
	mov	ebp, DWORD PTR __Val$[esp+8]
	push	esi
$LL4@Push_heap_:
	push	DWORD PTR [ebp]
	lea	esi, DWORD PTR [edi-1]
	sar	esi, 1
	push	DWORD PTR [ebx+esi*4]
	call	DWORD PTR __Pred$[esp+20]
	add	esp, 8
	test	al, al
	je	SHORT $LN11@Push_heap_

; 5269 :          _Idx = (_Hole - 1) >> 1) { // shift for codegen
; 5270 :         // move _Hole up to parent
; 5271 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [ebx+esi*4]
	mov	DWORD PTR [ebx+edi*4], eax

; 5272 :         _Hole             = _Idx;

	mov	edi, esi
	cmp	DWORD PTR __Top$[esp+12], esi
	jl	SHORT $LL4@Push_heap_
$LN11@Push_heap_:

; 5273 :     }
; 5274 : 
; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	eax, DWORD PTR [ebp]
	pop	esi
	pop	ebp
	mov	DWORD PTR [ebx+edi*4], eax
	pop	edi

; 5276 : }

	pop	ebx
	ret	0
$LN10@Push_heap_:

; 5273 :     }
; 5274 : 
; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	eax, DWORD PTR __Val$[esp+4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ebx+edi*4], eax
	pop	edi

; 5276 : }

	pop	ebx
	ret	0
??$_Push_heap_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ENDP ; std::_Push_heap_by_index<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Pop_heap_hole_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@00$$QAPAU12@P6A_NPAU12@2@Z@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Val$ = 12						; size = 4
__Pred$ = 16						; size = 4
??$_Pop_heap_hole_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@00$$QAPAU12@P6A_NPAU12@2@Z@Z PROC ; std::_Pop_heap_hole_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 5405 :     // pop *_First to *_Dest and reheap
; 5406 :     // precondition: _First != _Last
; 5407 :     // precondition: _First != _Dest
; 5408 :     *_Dest      = _STD move(*_First);

	mov	eax, DWORD PTR __Dest$[esp-4]
	push	esi
	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR [eax], esi

; 5409 :     using _Diff = _Iter_diff_t<_RanIt>;
; 5410 :     _Pop_heap_hole_by_index(

	pop	esi
	sub	edx, ecx
	sar	edx, 2
	mov	DWORD PTR __Dest$[esp-4], edx
	xor	edx, edx
	jmp	??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ; std::_Pop_heap_hole_by_index<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *)>
??$_Pop_heap_hole_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@00$$QAPAU12@P6A_NPAU12@2@Z@Z ENDP ; std::_Pop_heap_hole_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Med3_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z
_TEXT	SEGMENT
__Last$ = 8						; size = 4
__Pred$ = 12						; size = 4
??$_Med3_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z PROC ; std::_Med3_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Mid$ = edx

; 6943 : _CONSTEXPR20 void _Med3_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred) {

	push	ebx
	push	ebp

; 6944 :     // sort median of three elements to middle
; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	mov	ebp, DWORD PTR __Pred$[esp+4]
	push	esi
	push	edi
	mov	edi, ecx
	mov	esi, edx
	push	DWORD PTR [edi]
	push	DWORD PTR [esi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN19@Med3_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN19@Med3_unche:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6949 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

	mov	ebx, DWORD PTR __Last$[esp+12]
	push	DWORD PTR [esi]
	push	DWORD PTR [ebx]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN4@Med3_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [ebx]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [ebx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [esi], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [edi]
	push	ecx
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN4@Med3_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN4@Med3_unche:
	pop	edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6956 : }

	pop	esi
	pop	ebp
	pop	ebx
	ret	0
??$_Med3_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z ENDP ; std::_Med3_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$swap@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@$0A@@std@@YAXAAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z
_TEXT	SEGMENT
??$swap@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@$0A@@std@@YAXAAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z PROC ; std::swap<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,0>, COMDAT
; __Left$ = ecx
; __Right$ = edx

; 100  :     _Ty _Tmp = _STD move(_Left);
; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edx]
	push	esi
	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR [ecx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edx], esi
	pop	esi

; 103  : }

	ret	0
??$swap@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@$0A@@std@@YAXAAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ENDP ; std::swap<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@AAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAAAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU12@@Z
_TEXT	SEGMENT
??$forward@AAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAAAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU12@@Z PROC ; std::forward<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * * &>, COMDAT
; __Arg$ = ecx

; 1386 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, ecx

; 1387 : }

	ret	0
??$forward@AAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAAAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU12@@Z ENDP ; std::forward<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * * &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Copy_backward_memmove@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
??$_Copy_backward_memmove@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z PROC ; std::_Copy_backward_memmove<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 4247 :     // implement copy_backward-like function as memmove
; 4248 :     auto _FirstPtr              = _To_address(_First);
; 4249 :     auto _LastPtr               = _To_address(_Last);
; 4250 :     auto _DestPtr               = _To_address(_Dest);
; 4251 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 4252 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 4253 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 4254 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);
; 4255 :     auto _Result                = _CSTD memmove(_Dest_ch - _Count, _First_ch, _Count);

	mov	eax, DWORD PTR __Dest$[esp-4]
	sub	edx, ecx
	push	edx
	push	ecx
	sub	eax, edx
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH

; 4256 :     if constexpr (is_pointer_v<_CtgIt2>) {
; 4257 :         return static_cast<_CtgIt2>(_Result);
; 4258 :     } else {
; 4259 :         return _Dest - (_LastPtr - _FirstPtr);
; 4260 :     }
; 4261 : }

	ret	0
??$_Copy_backward_memmove@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z ENDP ; std::_Copy_backward_memmove<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z
_TEXT	SEGMENT
??$forward@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z PROC ; std::forward<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *>, COMDAT
; __Arg$ = ecx

; 1386 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, ecx

; 1387 : }

	ret	0
??$forward@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z ENDP ; std::forward<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Push_heap_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z
_TEXT	SEGMENT
__Top$ = 8						; size = 4
__Val$ = 12						; size = 4
__Pred$ = 16						; size = 4
??$_Push_heap_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z PROC ; std::_Push_heap_by_index<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Hole$ = edx

; 5264 :     _RanIt _First, _Iter_diff_t<_RanIt> _Hole, _Iter_diff_t<_RanIt> _Top, _Ty&& _Val, _Pr _Pred) {

	push	ebx
	push	edi
	mov	edi, edx
	mov	ebx, ecx

; 5265 :     // percolate _Hole to _Top or where _Val belongs
; 5266 :     using _Diff = _Iter_diff_t<_RanIt>;
; 5267 :     for (_Diff _Idx = (_Hole - 1) >> 1; // shift for codegen
; 5268 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

	cmp	DWORD PTR __Top$[esp+4], edi
	jge	SHORT $LN10@Push_heap_
	push	ebp
	mov	ebp, DWORD PTR __Val$[esp+8]
	push	esi
$LL4@Push_heap_:
	push	DWORD PTR [ebp]
	lea	esi, DWORD PTR [edi-1]
	sar	esi, 1
	push	DWORD PTR [ebx+esi*4]
	call	DWORD PTR __Pred$[esp+20]
	add	esp, 8
	test	al, al
	je	SHORT $LN11@Push_heap_

; 5269 :          _Idx = (_Hole - 1) >> 1) { // shift for codegen
; 5270 :         // move _Hole up to parent
; 5271 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [ebx+esi*4]
	mov	DWORD PTR [ebx+edi*4], eax

; 5272 :         _Hole             = _Idx;

	mov	edi, esi
	cmp	DWORD PTR __Top$[esp+12], esi
	jl	SHORT $LL4@Push_heap_
$LN11@Push_heap_:

; 5273 :     }
; 5274 : 
; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	eax, DWORD PTR [ebp]
	pop	esi
	pop	ebp
	mov	DWORD PTR [ebx+edi*4], eax
	pop	edi

; 5276 : }

	pop	ebx
	ret	0
$LN10@Push_heap_:

; 5273 :     }
; 5274 : 
; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	eax, DWORD PTR __Val$[esp+4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ebx+edi*4], eax
	pop	edi

; 5276 : }

	pop	ebx
	ret	0
??$_Push_heap_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ENDP ; std::_Push_heap_by_index<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Pop_heap_hole_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@00$$QAPAU12@P6A_NPAU12@2@Z@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Val$ = 12						; size = 4
__Pred$ = 16						; size = 4
??$_Pop_heap_hole_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@00$$QAPAU12@P6A_NPAU12@2@Z@Z PROC ; std::_Pop_heap_hole_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 5405 :     // pop *_First to *_Dest and reheap
; 5406 :     // precondition: _First != _Last
; 5407 :     // precondition: _First != _Dest
; 5408 :     *_Dest      = _STD move(*_First);

	mov	eax, DWORD PTR __Dest$[esp-4]
	push	esi
	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR [eax], esi

; 5409 :     using _Diff = _Iter_diff_t<_RanIt>;
; 5410 :     _Pop_heap_hole_by_index(

	pop	esi
	sub	edx, ecx
	sar	edx, 2
	mov	DWORD PTR __Dest$[esp-4], edx
	xor	edx, edx
	jmp	??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ; std::_Pop_heap_hole_by_index<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *)>
??$_Pop_heap_hole_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@00$$QAPAU12@P6A_NPAU12@2@Z@Z ENDP ; std::_Pop_heap_hole_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Med3_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z
_TEXT	SEGMENT
__Last$ = 8						; size = 4
__Pred$ = 12						; size = 4
??$_Med3_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z PROC ; std::_Med3_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Mid$ = edx

; 6943 : _CONSTEXPR20 void _Med3_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred) {

	push	ebx
	push	ebp

; 6944 :     // sort median of three elements to middle
; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	mov	ebp, DWORD PTR __Pred$[esp+4]
	push	esi
	push	edi
	mov	edi, ecx
	mov	esi, edx
	push	DWORD PTR [edi]
	push	DWORD PTR [esi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN19@Med3_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN19@Med3_unche:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6949 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

	mov	ebx, DWORD PTR __Last$[esp+12]
	push	DWORD PTR [esi]
	push	DWORD PTR [ebx]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN4@Med3_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [ebx]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [ebx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [esi], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [edi]
	push	ecx
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN4@Med3_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN4@Med3_unche:
	pop	edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6956 : }

	pop	esi
	pop	ebp
	pop	ebx
	ret	0
??$_Med3_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z ENDP ; std::_Med3_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$swap@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@$0A@@std@@YAXAAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z
_TEXT	SEGMENT
??$swap@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@$0A@@std@@YAXAAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z PROC ; std::swap<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,0>, COMDAT
; __Left$ = ecx
; __Right$ = edx

; 100  :     _Ty _Tmp = _STD move(_Left);
; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edx]
	push	esi
	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR [ecx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edx], esi
	pop	esi

; 103  : }

	ret	0
??$swap@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@$0A@@std@@YAXAAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ENDP ; std::swap<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@AAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAAAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU12@@Z
_TEXT	SEGMENT
??$forward@AAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAAAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU12@@Z PROC ; std::forward<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * * &>, COMDAT
; __Arg$ = ecx

; 1386 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, ecx

; 1387 : }

	ret	0
??$forward@AAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAAAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU12@@Z ENDP ; std::forward<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * * &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Copy_backward_memmove@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
??$_Copy_backward_memmove@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z PROC ; std::_Copy_backward_memmove<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 4247 :     // implement copy_backward-like function as memmove
; 4248 :     auto _FirstPtr              = _To_address(_First);
; 4249 :     auto _LastPtr               = _To_address(_Last);
; 4250 :     auto _DestPtr               = _To_address(_Dest);
; 4251 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 4252 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 4253 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 4254 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);
; 4255 :     auto _Result                = _CSTD memmove(_Dest_ch - _Count, _First_ch, _Count);

	mov	eax, DWORD PTR __Dest$[esp-4]
	sub	edx, ecx
	push	edx
	push	ecx
	sub	eax, edx
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH

; 4256 :     if constexpr (is_pointer_v<_CtgIt2>) {
; 4257 :         return static_cast<_CtgIt2>(_Result);
; 4258 :     } else {
; 4259 :         return _Dest - (_LastPtr - _FirstPtr);
; 4260 :     }
; 4261 : }

	ret	0
??$_Copy_backward_memmove@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z ENDP ; std::_Copy_backward_memmove<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z
_TEXT	SEGMENT
??$forward@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z PROC ; std::forward<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *>, COMDAT
; __Arg$ = ecx

; 1386 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, ecx

; 1387 : }

	ret	0
??$forward@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z ENDP ; std::forward<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Push_heap_by_index@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z
_TEXT	SEGMENT
__Top$ = 8						; size = 4
__Val$ = 12						; size = 4
__Pred$ = 16						; size = 4
??$_Push_heap_by_index@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z PROC ; std::_Push_heap_by_index<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Hole$ = edx

; 5264 :     _RanIt _First, _Iter_diff_t<_RanIt> _Hole, _Iter_diff_t<_RanIt> _Top, _Ty&& _Val, _Pr _Pred) {

	push	ebx
	push	edi
	mov	edi, edx
	mov	ebx, ecx

; 5265 :     // percolate _Hole to _Top or where _Val belongs
; 5266 :     using _Diff = _Iter_diff_t<_RanIt>;
; 5267 :     for (_Diff _Idx = (_Hole - 1) >> 1; // shift for codegen
; 5268 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

	cmp	DWORD PTR __Top$[esp+4], edi
	jge	SHORT $LN10@Push_heap_
	push	ebp
	mov	ebp, DWORD PTR __Val$[esp+8]
	push	esi
$LL4@Push_heap_:
	push	DWORD PTR [ebp]
	lea	esi, DWORD PTR [edi-1]
	sar	esi, 1
	push	DWORD PTR [ebx+esi*4]
	call	DWORD PTR __Pred$[esp+20]
	add	esp, 8
	test	al, al
	je	SHORT $LN11@Push_heap_

; 5269 :          _Idx = (_Hole - 1) >> 1) { // shift for codegen
; 5270 :         // move _Hole up to parent
; 5271 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [ebx+esi*4]
	mov	DWORD PTR [ebx+edi*4], eax

; 5272 :         _Hole             = _Idx;

	mov	edi, esi
	cmp	DWORD PTR __Top$[esp+12], esi
	jl	SHORT $LL4@Push_heap_
$LN11@Push_heap_:

; 5273 :     }
; 5274 : 
; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	eax, DWORD PTR [ebp]
	pop	esi
	pop	ebp
	mov	DWORD PTR [ebx+edi*4], eax
	pop	edi

; 5276 : }

	pop	ebx
	ret	0
$LN10@Push_heap_:

; 5273 :     }
; 5274 : 
; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	eax, DWORD PTR __Val$[esp+4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ebx+edi*4], eax
	pop	edi

; 5276 : }

	pop	ebx
	ret	0
??$_Push_heap_by_index@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ENDP ; std::_Push_heap_by_index<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Pop_heap_hole_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@00$$QAPAU12@P6A_NPAU12@2@Z@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Val$ = 12						; size = 4
__Pred$ = 16						; size = 4
??$_Pop_heap_hole_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@00$$QAPAU12@P6A_NPAU12@2@Z@Z PROC ; std::_Pop_heap_hole_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 5405 :     // pop *_First to *_Dest and reheap
; 5406 :     // precondition: _First != _Last
; 5407 :     // precondition: _First != _Dest
; 5408 :     *_Dest      = _STD move(*_First);

	mov	eax, DWORD PTR __Dest$[esp-4]
	push	esi
	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR [eax], esi

; 5409 :     using _Diff = _Iter_diff_t<_RanIt>;
; 5410 :     _Pop_heap_hole_by_index(

	pop	esi
	sub	edx, ecx
	sar	edx, 2
	mov	DWORD PTR __Dest$[esp-4], edx
	xor	edx, edx
	jmp	??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ; std::_Pop_heap_hole_by_index<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *)>
??$_Pop_heap_hole_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@00$$QAPAU12@P6A_NPAU12@2@Z@Z ENDP ; std::_Pop_heap_hole_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Med3_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z
_TEXT	SEGMENT
__Last$ = 8						; size = 4
__Pred$ = 12						; size = 4
??$_Med3_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z PROC ; std::_Med3_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Mid$ = edx

; 6943 : _CONSTEXPR20 void _Med3_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred) {

	push	ebx
	push	ebp

; 6944 :     // sort median of three elements to middle
; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	mov	ebp, DWORD PTR __Pred$[esp+4]
	push	esi
	push	edi
	mov	edi, ecx
	mov	esi, edx
	push	DWORD PTR [edi]
	push	DWORD PTR [esi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN19@Med3_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN19@Med3_unche:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6949 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

	mov	ebx, DWORD PTR __Last$[esp+12]
	push	DWORD PTR [esi]
	push	DWORD PTR [ebx]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN4@Med3_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [ebx]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [ebx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [esi], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [edi]
	push	ecx
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN4@Med3_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN4@Med3_unche:
	pop	edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6956 : }

	pop	esi
	pop	ebp
	pop	ebx
	ret	0
??$_Med3_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z ENDP ; std::_Med3_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$swap@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@$0A@@std@@YAXAAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@0@Z
_TEXT	SEGMENT
??$swap@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@$0A@@std@@YAXAAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@0@Z PROC ; std::swap<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,0>, COMDAT
; __Left$ = ecx
; __Right$ = edx

; 100  :     _Ty _Tmp = _STD move(_Left);
; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edx]
	push	esi
	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR [ecx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edx], esi
	pop	esi

; 103  : }

	ret	0
??$swap@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@$0A@@std@@YAXAAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ENDP ; std::swap<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@AAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAAAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU12@@Z
_TEXT	SEGMENT
??$forward@AAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAAAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU12@@Z PROC ; std::forward<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * * &>, COMDAT
; __Arg$ = ecx

; 1386 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, ecx

; 1387 : }

	ret	0
??$forward@AAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAAAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU12@@Z ENDP ; std::forward<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * * &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Copy_backward_memmove@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
??$_Copy_backward_memmove@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z PROC ; std::_Copy_backward_memmove<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 4247 :     // implement copy_backward-like function as memmove
; 4248 :     auto _FirstPtr              = _To_address(_First);
; 4249 :     auto _LastPtr               = _To_address(_Last);
; 4250 :     auto _DestPtr               = _To_address(_Dest);
; 4251 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 4252 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 4253 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 4254 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);
; 4255 :     auto _Result                = _CSTD memmove(_Dest_ch - _Count, _First_ch, _Count);

	mov	eax, DWORD PTR __Dest$[esp-4]
	sub	edx, ecx
	push	edx
	push	ecx
	sub	eax, edx
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH

; 4256 :     if constexpr (is_pointer_v<_CtgIt2>) {
; 4257 :         return static_cast<_CtgIt2>(_Result);
; 4258 :     } else {
; 4259 :         return _Dest - (_LastPtr - _FirstPtr);
; 4260 :     }
; 4261 : }

	ret	0
??$_Copy_backward_memmove@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z ENDP ; std::_Copy_backward_memmove<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z
_TEXT	SEGMENT
??$forward@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z PROC ; std::forward<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *>, COMDAT
; __Arg$ = ecx

; 1386 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, ecx

; 1387 : }

	ret	0
??$forward@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z ENDP ; std::forward<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Push_heap_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z
_TEXT	SEGMENT
__Top$ = 8						; size = 4
__Val$ = 12						; size = 4
__Pred$ = 16						; size = 4
??$_Push_heap_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z PROC ; std::_Push_heap_by_index<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Hole$ = edx

; 5264 :     _RanIt _First, _Iter_diff_t<_RanIt> _Hole, _Iter_diff_t<_RanIt> _Top, _Ty&& _Val, _Pr _Pred) {

	push	ebx
	push	edi
	mov	edi, edx
	mov	ebx, ecx

; 5265 :     // percolate _Hole to _Top or where _Val belongs
; 5266 :     using _Diff = _Iter_diff_t<_RanIt>;
; 5267 :     for (_Diff _Idx = (_Hole - 1) >> 1; // shift for codegen
; 5268 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

	cmp	DWORD PTR __Top$[esp+4], edi
	jge	SHORT $LN10@Push_heap_
	push	ebp
	mov	ebp, DWORD PTR __Val$[esp+8]
	push	esi
$LL4@Push_heap_:
	push	DWORD PTR [ebp]
	lea	esi, DWORD PTR [edi-1]
	sar	esi, 1
	push	DWORD PTR [ebx+esi*4]
	call	DWORD PTR __Pred$[esp+20]
	add	esp, 8
	test	al, al
	je	SHORT $LN11@Push_heap_

; 5269 :          _Idx = (_Hole - 1) >> 1) { // shift for codegen
; 5270 :         // move _Hole up to parent
; 5271 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [ebx+esi*4]
	mov	DWORD PTR [ebx+edi*4], eax

; 5272 :         _Hole             = _Idx;

	mov	edi, esi
	cmp	DWORD PTR __Top$[esp+12], esi
	jl	SHORT $LL4@Push_heap_
$LN11@Push_heap_:

; 5273 :     }
; 5274 : 
; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	eax, DWORD PTR [ebp]
	pop	esi
	pop	ebp
	mov	DWORD PTR [ebx+edi*4], eax
	pop	edi

; 5276 : }

	pop	ebx
	ret	0
$LN10@Push_heap_:

; 5273 :     }
; 5274 : 
; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	eax, DWORD PTR __Val$[esp+4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ebx+edi*4], eax
	pop	edi

; 5276 : }

	pop	ebx
	ret	0
??$_Push_heap_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ENDP ; std::_Push_heap_by_index<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Pop_heap_hole_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@00$$QAPAU12@P6A_NPAU12@2@Z@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Val$ = 12						; size = 4
__Pred$ = 16						; size = 4
??$_Pop_heap_hole_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@00$$QAPAU12@P6A_NPAU12@2@Z@Z PROC ; std::_Pop_heap_hole_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 5405 :     // pop *_First to *_Dest and reheap
; 5406 :     // precondition: _First != _Last
; 5407 :     // precondition: _First != _Dest
; 5408 :     *_Dest      = _STD move(*_First);

	mov	eax, DWORD PTR __Dest$[esp-4]
	push	esi
	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR [eax], esi

; 5409 :     using _Diff = _Iter_diff_t<_RanIt>;
; 5410 :     _Pop_heap_hole_by_index(

	pop	esi
	sub	edx, ecx
	sar	edx, 2
	mov	DWORD PTR __Dest$[esp-4], edx
	xor	edx, edx
	jmp	??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ; std::_Pop_heap_hole_by_index<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *)>
??$_Pop_heap_hole_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@00$$QAPAU12@P6A_NPAU12@2@Z@Z ENDP ; std::_Pop_heap_hole_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Med3_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z
_TEXT	SEGMENT
__Last$ = 8						; size = 4
__Pred$ = 12						; size = 4
??$_Med3_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z PROC ; std::_Med3_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Mid$ = edx

; 6943 : _CONSTEXPR20 void _Med3_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred) {

	push	ebx
	push	ebp

; 6944 :     // sort median of three elements to middle
; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	mov	ebp, DWORD PTR __Pred$[esp+4]
	push	esi
	push	edi
	mov	edi, ecx
	mov	esi, edx
	push	DWORD PTR [edi]
	push	DWORD PTR [esi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN19@Med3_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN19@Med3_unche:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6949 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

	mov	ebx, DWORD PTR __Last$[esp+12]
	push	DWORD PTR [esi]
	push	DWORD PTR [ebx]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN4@Med3_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [ebx]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [ebx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [esi], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [edi]
	push	ecx
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN4@Med3_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN4@Med3_unche:
	pop	edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6956 : }

	pop	esi
	pop	ebp
	pop	ebx
	ret	0
??$_Med3_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z ENDP ; std::_Med3_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$swap@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@$0A@@std@@YAXAAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@Z
_TEXT	SEGMENT
??$swap@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@$0A@@std@@YAXAAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@Z PROC ; std::swap<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,0>, COMDAT
; __Left$ = ecx
; __Right$ = edx

; 100  :     _Ty _Tmp = _STD move(_Left);
; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edx]
	push	esi
	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR [ecx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edx], esi
	pop	esi

; 103  : }

	ret	0
??$swap@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@$0A@@std@@YAXAAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ENDP ; std::swap<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@AAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAAAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU12@@Z
_TEXT	SEGMENT
??$forward@AAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAAAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU12@@Z PROC ; std::forward<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * * &>, COMDAT
; __Arg$ = ecx

; 1386 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, ecx

; 1387 : }

	ret	0
??$forward@AAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAAAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU12@@Z ENDP ; std::forward<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * * &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Copy_backward_memmove@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
??$_Copy_backward_memmove@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z PROC ; std::_Copy_backward_memmove<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 4247 :     // implement copy_backward-like function as memmove
; 4248 :     auto _FirstPtr              = _To_address(_First);
; 4249 :     auto _LastPtr               = _To_address(_Last);
; 4250 :     auto _DestPtr               = _To_address(_Dest);
; 4251 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 4252 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 4253 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 4254 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);
; 4255 :     auto _Result                = _CSTD memmove(_Dest_ch - _Count, _First_ch, _Count);

	mov	eax, DWORD PTR __Dest$[esp-4]
	sub	edx, ecx
	push	edx
	push	ecx
	sub	eax, edx
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH

; 4256 :     if constexpr (is_pointer_v<_CtgIt2>) {
; 4257 :         return static_cast<_CtgIt2>(_Result);
; 4258 :     } else {
; 4259 :         return _Dest - (_LastPtr - _FirstPtr);
; 4260 :     }
; 4261 : }

	ret	0
??$_Copy_backward_memmove@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z ENDP ; std::_Copy_backward_memmove<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z
_TEXT	SEGMENT
??$forward@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z PROC ; std::forward<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *>, COMDAT
; __Arg$ = ecx

; 1386 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, ecx

; 1387 : }

	ret	0
??$forward@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z ENDP ; std::forward<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Push_heap_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z
_TEXT	SEGMENT
__Top$ = 8						; size = 4
__Val$ = 12						; size = 4
__Pred$ = 16						; size = 4
??$_Push_heap_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z PROC ; std::_Push_heap_by_index<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Hole$ = edx

; 5264 :     _RanIt _First, _Iter_diff_t<_RanIt> _Hole, _Iter_diff_t<_RanIt> _Top, _Ty&& _Val, _Pr _Pred) {

	push	ebx
	push	edi
	mov	edi, edx
	mov	ebx, ecx

; 5265 :     // percolate _Hole to _Top or where _Val belongs
; 5266 :     using _Diff = _Iter_diff_t<_RanIt>;
; 5267 :     for (_Diff _Idx = (_Hole - 1) >> 1; // shift for codegen
; 5268 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

	cmp	DWORD PTR __Top$[esp+4], edi
	jge	SHORT $LN10@Push_heap_
	push	ebp
	mov	ebp, DWORD PTR __Val$[esp+8]
	push	esi
$LL4@Push_heap_:
	push	DWORD PTR [ebp]
	lea	esi, DWORD PTR [edi-1]
	sar	esi, 1
	push	DWORD PTR [ebx+esi*4]
	call	DWORD PTR __Pred$[esp+20]
	add	esp, 8
	test	al, al
	je	SHORT $LN11@Push_heap_

; 5269 :          _Idx = (_Hole - 1) >> 1) { // shift for codegen
; 5270 :         // move _Hole up to parent
; 5271 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [ebx+esi*4]
	mov	DWORD PTR [ebx+edi*4], eax

; 5272 :         _Hole             = _Idx;

	mov	edi, esi
	cmp	DWORD PTR __Top$[esp+12], esi
	jl	SHORT $LL4@Push_heap_
$LN11@Push_heap_:

; 5273 :     }
; 5274 : 
; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	eax, DWORD PTR [ebp]
	pop	esi
	pop	ebp
	mov	DWORD PTR [ebx+edi*4], eax
	pop	edi

; 5276 : }

	pop	ebx
	ret	0
$LN10@Push_heap_:

; 5273 :     }
; 5274 : 
; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	eax, DWORD PTR __Val$[esp+4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ebx+edi*4], eax
	pop	edi

; 5276 : }

	pop	ebx
	ret	0
??$_Push_heap_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ENDP ; std::_Push_heap_by_index<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Pop_heap_hole_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@00$$QAPAU12@P6A_NPAU12@2@Z@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Val$ = 12						; size = 4
__Pred$ = 16						; size = 4
??$_Pop_heap_hole_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@00$$QAPAU12@P6A_NPAU12@2@Z@Z PROC ; std::_Pop_heap_hole_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 5405 :     // pop *_First to *_Dest and reheap
; 5406 :     // precondition: _First != _Last
; 5407 :     // precondition: _First != _Dest
; 5408 :     *_Dest      = _STD move(*_First);

	mov	eax, DWORD PTR __Dest$[esp-4]
	push	esi
	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR [eax], esi

; 5409 :     using _Diff = _Iter_diff_t<_RanIt>;
; 5410 :     _Pop_heap_hole_by_index(

	pop	esi
	sub	edx, ecx
	sar	edx, 2
	mov	DWORD PTR __Dest$[esp-4], edx
	xor	edx, edx
	jmp	??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ; std::_Pop_heap_hole_by_index<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *)>
??$_Pop_heap_hole_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@00$$QAPAU12@P6A_NPAU12@2@Z@Z ENDP ; std::_Pop_heap_hole_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Med3_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z
_TEXT	SEGMENT
__Last$ = 8						; size = 4
__Pred$ = 12						; size = 4
??$_Med3_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z PROC ; std::_Med3_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Mid$ = edx

; 6943 : _CONSTEXPR20 void _Med3_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred) {

	push	ebx
	push	ebp

; 6944 :     // sort median of three elements to middle
; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	mov	ebp, DWORD PTR __Pred$[esp+4]
	push	esi
	push	edi
	mov	edi, ecx
	mov	esi, edx
	push	DWORD PTR [edi]
	push	DWORD PTR [esi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN19@Med3_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN19@Med3_unche:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6949 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

	mov	ebx, DWORD PTR __Last$[esp+12]
	push	DWORD PTR [esi]
	push	DWORD PTR [ebx]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN4@Med3_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [ebx]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [ebx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [esi], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [edi]
	push	ecx
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN4@Med3_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN4@Med3_unche:
	pop	edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6956 : }

	pop	esi
	pop	ebp
	pop	ebx
	ret	0
??$_Med3_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z ENDP ; std::_Med3_unchecked<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$swap@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@$0A@@std@@YAXAAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z
_TEXT	SEGMENT
??$swap@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@$0A@@std@@YAXAAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z PROC ; std::swap<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,0>, COMDAT
; __Left$ = ecx
; __Right$ = edx

; 100  :     _Ty _Tmp = _STD move(_Left);
; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edx]
	push	esi
	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR [ecx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edx], esi
	pop	esi

; 103  : }

	ret	0
??$swap@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@$0A@@std@@YAXAAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ENDP ; std::swap<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@AAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAAAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU12@@Z
_TEXT	SEGMENT
??$forward@AAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAAAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU12@@Z PROC ; std::forward<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * * &>, COMDAT
; __Arg$ = ecx

; 1386 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, ecx

; 1387 : }

	ret	0
??$forward@AAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAAAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU12@@Z ENDP ; std::forward<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * * &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Copy_backward_memmove@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
??$_Copy_backward_memmove@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z PROC ; std::_Copy_backward_memmove<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 4247 :     // implement copy_backward-like function as memmove
; 4248 :     auto _FirstPtr              = _To_address(_First);
; 4249 :     auto _LastPtr               = _To_address(_Last);
; 4250 :     auto _DestPtr               = _To_address(_Dest);
; 4251 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 4252 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 4253 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 4254 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);
; 4255 :     auto _Result                = _CSTD memmove(_Dest_ch - _Count, _First_ch, _Count);

	mov	eax, DWORD PTR __Dest$[esp-4]
	sub	edx, ecx
	push	edx
	push	ecx
	sub	eax, edx
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH

; 4256 :     if constexpr (is_pointer_v<_CtgIt2>) {
; 4257 :         return static_cast<_CtgIt2>(_Result);
; 4258 :     } else {
; 4259 :         return _Dest - (_LastPtr - _FirstPtr);
; 4260 :     }
; 4261 : }

	ret	0
??$_Copy_backward_memmove@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z ENDP ; std::_Copy_backward_memmove<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z
_TEXT	SEGMENT
??$forward@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z PROC ; std::forward<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *>, COMDAT
; __Arg$ = ecx

; 1386 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, ecx

; 1387 : }

	ret	0
??$forward@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z ENDP ; std::forward<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Push_heap_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z
_TEXT	SEGMENT
__Top$ = 8						; size = 4
__Val$ = 12						; size = 4
__Pred$ = 16						; size = 4
??$_Push_heap_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z PROC ; std::_Push_heap_by_index<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Hole$ = edx

; 5264 :     _RanIt _First, _Iter_diff_t<_RanIt> _Hole, _Iter_diff_t<_RanIt> _Top, _Ty&& _Val, _Pr _Pred) {

	push	ebx
	push	edi
	mov	edi, edx
	mov	ebx, ecx

; 5265 :     // percolate _Hole to _Top or where _Val belongs
; 5266 :     using _Diff = _Iter_diff_t<_RanIt>;
; 5267 :     for (_Diff _Idx = (_Hole - 1) >> 1; // shift for codegen
; 5268 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

	cmp	DWORD PTR __Top$[esp+4], edi
	jge	SHORT $LN10@Push_heap_
	push	ebp
	mov	ebp, DWORD PTR __Val$[esp+8]
	push	esi
$LL4@Push_heap_:
	push	DWORD PTR [ebp]
	lea	esi, DWORD PTR [edi-1]
	sar	esi, 1
	push	DWORD PTR [ebx+esi*4]
	call	DWORD PTR __Pred$[esp+20]
	add	esp, 8
	test	al, al
	je	SHORT $LN11@Push_heap_

; 5269 :          _Idx = (_Hole - 1) >> 1) { // shift for codegen
; 5270 :         // move _Hole up to parent
; 5271 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [ebx+esi*4]
	mov	DWORD PTR [ebx+edi*4], eax

; 5272 :         _Hole             = _Idx;

	mov	edi, esi
	cmp	DWORD PTR __Top$[esp+12], esi
	jl	SHORT $LL4@Push_heap_
$LN11@Push_heap_:

; 5273 :     }
; 5274 : 
; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	eax, DWORD PTR [ebp]
	pop	esi
	pop	ebp
	mov	DWORD PTR [ebx+edi*4], eax
	pop	edi

; 5276 : }

	pop	ebx
	ret	0
$LN10@Push_heap_:

; 5273 :     }
; 5274 : 
; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	eax, DWORD PTR __Val$[esp+4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ebx+edi*4], eax
	pop	edi

; 5276 : }

	pop	ebx
	ret	0
??$_Push_heap_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ENDP ; std::_Push_heap_by_index<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Pop_heap_hole_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@00$$QAPAU12@P6A_NPAU12@2@Z@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Val$ = 12						; size = 4
__Pred$ = 16						; size = 4
??$_Pop_heap_hole_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@00$$QAPAU12@P6A_NPAU12@2@Z@Z PROC ; std::_Pop_heap_hole_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 5405 :     // pop *_First to *_Dest and reheap
; 5406 :     // precondition: _First != _Last
; 5407 :     // precondition: _First != _Dest
; 5408 :     *_Dest      = _STD move(*_First);

	mov	eax, DWORD PTR __Dest$[esp-4]
	push	esi
	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR [eax], esi

; 5409 :     using _Diff = _Iter_diff_t<_RanIt>;
; 5410 :     _Pop_heap_hole_by_index(

	pop	esi
	sub	edx, ecx
	sar	edx, 2
	mov	DWORD PTR __Dest$[esp-4], edx
	xor	edx, edx
	jmp	??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ; std::_Pop_heap_hole_by_index<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *)>
??$_Pop_heap_hole_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@00$$QAPAU12@P6A_NPAU12@2@Z@Z ENDP ; std::_Pop_heap_hole_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Med3_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z
_TEXT	SEGMENT
__Last$ = 8						; size = 4
__Pred$ = 12						; size = 4
??$_Med3_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z PROC ; std::_Med3_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Mid$ = edx

; 6943 : _CONSTEXPR20 void _Med3_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred) {

	push	ebx
	push	ebp

; 6944 :     // sort median of three elements to middle
; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	mov	ebp, DWORD PTR __Pred$[esp+4]
	push	esi
	push	edi
	mov	edi, ecx
	mov	esi, edx
	push	DWORD PTR [edi]
	push	DWORD PTR [esi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN19@Med3_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN19@Med3_unche:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6949 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

	mov	ebx, DWORD PTR __Last$[esp+12]
	push	DWORD PTR [esi]
	push	DWORD PTR [ebx]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN4@Med3_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [ebx]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [ebx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [esi], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [edi]
	push	ecx
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN4@Med3_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN4@Med3_unche:
	pop	edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6956 : }

	pop	esi
	pop	ebp
	pop	ebx
	ret	0
??$_Med3_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z ENDP ; std::_Med3_unchecked<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$swap@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@$0A@@std@@YAXAAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z
_TEXT	SEGMENT
??$swap@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@$0A@@std@@YAXAAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z PROC ; std::swap<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,0>, COMDAT
; __Left$ = ecx
; __Right$ = edx

; 100  :     _Ty _Tmp = _STD move(_Left);
; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edx]
	push	esi
	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR [ecx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edx], esi
	pop	esi

; 103  : }

	ret	0
??$swap@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@$0A@@std@@YAXAAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ENDP ; std::swap<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@AAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAAAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU12@@Z
_TEXT	SEGMENT
??$forward@AAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAAAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU12@@Z PROC ; std::forward<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * * &>, COMDAT
; __Arg$ = ecx

; 1386 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, ecx

; 1387 : }

	ret	0
??$forward@AAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAAAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU12@@Z ENDP ; std::forward<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * * &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Copy_backward_memmove@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
??$_Copy_backward_memmove@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z PROC ; std::_Copy_backward_memmove<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 4247 :     // implement copy_backward-like function as memmove
; 4248 :     auto _FirstPtr              = _To_address(_First);
; 4249 :     auto _LastPtr               = _To_address(_Last);
; 4250 :     auto _DestPtr               = _To_address(_Dest);
; 4251 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 4252 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 4253 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 4254 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);
; 4255 :     auto _Result                = _CSTD memmove(_Dest_ch - _Count, _First_ch, _Count);

	mov	eax, DWORD PTR __Dest$[esp-4]
	sub	edx, ecx
	push	edx
	push	ecx
	sub	eax, edx
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH

; 4256 :     if constexpr (is_pointer_v<_CtgIt2>) {
; 4257 :         return static_cast<_CtgIt2>(_Result);
; 4258 :     } else {
; 4259 :         return _Dest - (_LastPtr - _FirstPtr);
; 4260 :     }
; 4261 : }

	ret	0
??$_Copy_backward_memmove@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z ENDP ; std::_Copy_backward_memmove<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z
_TEXT	SEGMENT
??$forward@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z PROC ; std::forward<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *>, COMDAT
; __Arg$ = ecx

; 1386 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, ecx

; 1387 : }

	ret	0
??$forward@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z ENDP ; std::forward<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Push_heap_by_index@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z
_TEXT	SEGMENT
__Top$ = 8						; size = 4
__Val$ = 12						; size = 4
__Pred$ = 16						; size = 4
??$_Push_heap_by_index@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z PROC ; std::_Push_heap_by_index<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Hole$ = edx

; 5264 :     _RanIt _First, _Iter_diff_t<_RanIt> _Hole, _Iter_diff_t<_RanIt> _Top, _Ty&& _Val, _Pr _Pred) {

	push	ebx
	push	edi
	mov	edi, edx
	mov	ebx, ecx

; 5265 :     // percolate _Hole to _Top or where _Val belongs
; 5266 :     using _Diff = _Iter_diff_t<_RanIt>;
; 5267 :     for (_Diff _Idx = (_Hole - 1) >> 1; // shift for codegen
; 5268 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

	cmp	DWORD PTR __Top$[esp+4], edi
	jge	SHORT $LN10@Push_heap_
	push	ebp
	mov	ebp, DWORD PTR __Val$[esp+8]
	push	esi
$LL4@Push_heap_:
	push	DWORD PTR [ebp]
	lea	esi, DWORD PTR [edi-1]
	sar	esi, 1
	push	DWORD PTR [ebx+esi*4]
	call	DWORD PTR __Pred$[esp+20]
	add	esp, 8
	test	al, al
	je	SHORT $LN11@Push_heap_

; 5269 :          _Idx = (_Hole - 1) >> 1) { // shift for codegen
; 5270 :         // move _Hole up to parent
; 5271 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [ebx+esi*4]
	mov	DWORD PTR [ebx+edi*4], eax

; 5272 :         _Hole             = _Idx;

	mov	edi, esi
	cmp	DWORD PTR __Top$[esp+12], esi
	jl	SHORT $LL4@Push_heap_
$LN11@Push_heap_:

; 5273 :     }
; 5274 : 
; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	eax, DWORD PTR [ebp]
	pop	esi
	pop	ebp
	mov	DWORD PTR [ebx+edi*4], eax
	pop	edi

; 5276 : }

	pop	ebx
	ret	0
$LN10@Push_heap_:

; 5273 :     }
; 5274 : 
; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	eax, DWORD PTR __Val$[esp+4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ebx+edi*4], eax
	pop	edi

; 5276 : }

	pop	ebx
	ret	0
??$_Push_heap_by_index@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ENDP ; std::_Push_heap_by_index<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Pop_heap_hole_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@00$$QAPAU12@P6A_NPAU12@2@Z@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Val$ = 12						; size = 4
__Pred$ = 16						; size = 4
??$_Pop_heap_hole_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@00$$QAPAU12@P6A_NPAU12@2@Z@Z PROC ; std::_Pop_heap_hole_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 5405 :     // pop *_First to *_Dest and reheap
; 5406 :     // precondition: _First != _Last
; 5407 :     // precondition: _First != _Dest
; 5408 :     *_Dest      = _STD move(*_First);

	mov	eax, DWORD PTR __Dest$[esp-4]
	push	esi
	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR [eax], esi

; 5409 :     using _Diff = _Iter_diff_t<_RanIt>;
; 5410 :     _Pop_heap_hole_by_index(

	pop	esi
	sub	edx, ecx
	sar	edx, 2
	mov	DWORD PTR __Dest$[esp-4], edx
	xor	edx, edx
	jmp	??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ; std::_Pop_heap_hole_by_index<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *)>
??$_Pop_heap_hole_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@00$$QAPAU12@P6A_NPAU12@2@Z@Z ENDP ; std::_Pop_heap_hole_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Med3_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z
_TEXT	SEGMENT
__Last$ = 8						; size = 4
__Pred$ = 12						; size = 4
??$_Med3_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z PROC ; std::_Med3_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Mid$ = edx

; 6943 : _CONSTEXPR20 void _Med3_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred) {

	push	ebx
	push	ebp

; 6944 :     // sort median of three elements to middle
; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	mov	ebp, DWORD PTR __Pred$[esp+4]
	push	esi
	push	edi
	mov	edi, ecx
	mov	esi, edx
	push	DWORD PTR [edi]
	push	DWORD PTR [esi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN19@Med3_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN19@Med3_unche:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6949 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

	mov	ebx, DWORD PTR __Last$[esp+12]
	push	DWORD PTR [esi]
	push	DWORD PTR [ebx]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN4@Med3_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [ebx]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [ebx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [esi], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [edi]
	push	ecx
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN4@Med3_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN4@Med3_unche:
	pop	edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6956 : }

	pop	esi
	pop	ebp
	pop	ebx
	ret	0
??$_Med3_unchecked@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z ENDP ; std::_Med3_unchecked<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$swap@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@$0A@@std@@YAXAAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@0@Z
_TEXT	SEGMENT
??$swap@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@$0A@@std@@YAXAAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@0@Z PROC ; std::swap<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,0>, COMDAT
; __Left$ = ecx
; __Right$ = edx

; 100  :     _Ty _Tmp = _STD move(_Left);
; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edx]
	push	esi
	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR [ecx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edx], esi
	pop	esi

; 103  : }

	ret	0
??$swap@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@$0A@@std@@YAXAAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ENDP ; std::swap<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@AAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAAAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU12@@Z
_TEXT	SEGMENT
??$forward@AAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAAAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU12@@Z PROC ; std::forward<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * * &>, COMDAT
; __Arg$ = ecx

; 1386 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, ecx

; 1387 : }

	ret	0
??$forward@AAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAAAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU12@@Z ENDP ; std::forward<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * * &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Copy_backward_memmove@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
??$_Copy_backward_memmove@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z PROC ; std::_Copy_backward_memmove<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 4247 :     // implement copy_backward-like function as memmove
; 4248 :     auto _FirstPtr              = _To_address(_First);
; 4249 :     auto _LastPtr               = _To_address(_Last);
; 4250 :     auto _DestPtr               = _To_address(_Dest);
; 4251 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 4252 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 4253 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 4254 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);
; 4255 :     auto _Result                = _CSTD memmove(_Dest_ch - _Count, _First_ch, _Count);

	mov	eax, DWORD PTR __Dest$[esp-4]
	sub	edx, ecx
	push	edx
	push	ecx
	sub	eax, edx
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH

; 4256 :     if constexpr (is_pointer_v<_CtgIt2>) {
; 4257 :         return static_cast<_CtgIt2>(_Result);
; 4258 :     } else {
; 4259 :         return _Dest - (_LastPtr - _FirstPtr);
; 4260 :     }
; 4261 : }

	ret	0
??$_Copy_backward_memmove@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@00@Z ENDP ; std::_Copy_backward_memmove<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z
_TEXT	SEGMENT
??$forward@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z PROC ; std::forward<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *>, COMDAT
; __Arg$ = ecx

; 1386 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, ecx

; 1387 : }

	ret	0
??$forward@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YA$$QAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z ENDP ; std::forward<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Push_heap_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z
_TEXT	SEGMENT
__Top$ = 8						; size = 4
__Val$ = 12						; size = 4
__Pred$ = 16						; size = 4
??$_Push_heap_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z PROC ; std::_Push_heap_by_index<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Hole$ = edx

; 5264 :     _RanIt _First, _Iter_diff_t<_RanIt> _Hole, _Iter_diff_t<_RanIt> _Top, _Ty&& _Val, _Pr _Pred) {

	push	ebx
	push	edi
	mov	edi, edx
	mov	ebx, ecx

; 5265 :     // percolate _Hole to _Top or where _Val belongs
; 5266 :     using _Diff = _Iter_diff_t<_RanIt>;
; 5267 :     for (_Diff _Idx = (_Hole - 1) >> 1; // shift for codegen
; 5268 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

	cmp	DWORD PTR __Top$[esp+4], edi
	jge	SHORT $LN10@Push_heap_
	push	ebp
	mov	ebp, DWORD PTR __Val$[esp+8]
	push	esi
$LL4@Push_heap_:
	push	DWORD PTR [ebp]
	lea	esi, DWORD PTR [edi-1]
	sar	esi, 1
	push	DWORD PTR [ebx+esi*4]
	call	DWORD PTR __Pred$[esp+20]
	add	esp, 8
	test	al, al
	je	SHORT $LN11@Push_heap_

; 5269 :          _Idx = (_Hole - 1) >> 1) { // shift for codegen
; 5270 :         // move _Hole up to parent
; 5271 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

	mov	eax, DWORD PTR [ebx+esi*4]
	mov	DWORD PTR [ebx+edi*4], eax

; 5272 :         _Hole             = _Idx;

	mov	edi, esi
	cmp	DWORD PTR __Top$[esp+12], esi
	jl	SHORT $LL4@Push_heap_
$LN11@Push_heap_:

; 5273 :     }
; 5274 : 
; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	eax, DWORD PTR [ebp]
	pop	esi
	pop	ebp
	mov	DWORD PTR [ebx+edi*4], eax
	pop	edi

; 5276 : }

	pop	ebx
	ret	0
$LN10@Push_heap_:

; 5273 :     }
; 5274 : 
; 5275 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

	mov	eax, DWORD PTR __Val$[esp+4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ebx+edi*4], eax
	pop	edi

; 5276 : }

	pop	ebx
	ret	0
??$_Push_heap_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ENDP ; std::_Push_heap_by_index<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Pop_heap_hole_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@00$$QAPAU12@P6A_NPAU12@2@Z@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Val$ = 12						; size = 4
__Pred$ = 16						; size = 4
??$_Pop_heap_hole_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@00$$QAPAU12@P6A_NPAU12@2@Z@Z PROC ; std::_Pop_heap_hole_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 5405 :     // pop *_First to *_Dest and reheap
; 5406 :     // precondition: _First != _Last
; 5407 :     // precondition: _First != _Dest
; 5408 :     *_Dest      = _STD move(*_First);

	mov	eax, DWORD PTR __Dest$[esp-4]
	push	esi
	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR [eax], esi

; 5409 :     using _Diff = _Iter_diff_t<_RanIt>;
; 5410 :     _Pop_heap_hole_by_index(

	pop	esi
	sub	edx, ecx
	sar	edx, 2
	mov	DWORD PTR __Dest$[esp-4], edx
	xor	edx, edx
	jmp	??$_Pop_heap_hole_by_index@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@HH$$QAPAU12@P6A_NPAU12@2@Z@Z ; std::_Pop_heap_hole_by_index<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *)>
??$_Pop_heap_hole_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@00$$QAPAU12@P6A_NPAU12@2@Z@Z ENDP ; std::_Pop_heap_hole_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm
;	COMDAT ??$_Med3_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z
_TEXT	SEGMENT
__Last$ = 8						; size = 4
__Pred$ = 12						; size = 4
??$_Med3_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z PROC ; std::_Med3_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *)>, COMDAT
; __First$ = ecx
; __Mid$ = edx

; 6943 : _CONSTEXPR20 void _Med3_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred) {

	push	ebx
	push	ebp

; 6944 :     // sort median of three elements to middle
; 6945 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	mov	ebp, DWORD PTR __Pred$[esp+4]
	push	esi
	push	edi
	mov	edi, ecx
	mov	esi, edx
	push	DWORD PTR [edi]
	push	DWORD PTR [esi]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN19@Med3_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN19@Med3_unche:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6949 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

	mov	ebx, DWORD PTR __Last$[esp+12]
	push	DWORD PTR [esi]
	push	DWORD PTR [ebx]
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN4@Med3_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [ebx]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [ebx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [esi], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6952 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

	push	DWORD PTR [edi]
	push	ecx
	call	ebp
	add	esp, 8
	test	al, al
	je	SHORT $LN4@Med3_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edi], ecx
$LN4@Med3_unche:
	pop	edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\algorithm

; 6956 : }

	pop	esi
	pop	ebp
	pop	ebx
	ret	0
??$_Med3_unchecked@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@P6A_NPAU12@0@Z@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@00P6A_NPAU12@1@Z@Z ENDP ; std::_Med3_unchecked<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *,bool (__cdecl*)(FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$swap@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@$0A@@std@@YAXAAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@Z
_TEXT	SEGMENT
??$swap@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@$0A@@std@@YAXAAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@Z PROC ; std::swap<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,0>, COMDAT
; __Left$ = ecx
; __Right$ = edx

; 100  :     _Ty _Tmp = _STD move(_Left);
; 101  :     _Left    = _STD move(_Right);

	mov	eax, DWORD PTR [edx]
	push	esi
	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR [ecx], eax

; 102  :     _Right   = _STD move(_Tmp);

	mov	DWORD PTR [edx], esi
	pop	esi

; 103  : }

	ret	0
??$swap@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@$0A@@std@@YAXAAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ENDP ; std::swap<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@AAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAAAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU12@@Z
_TEXT	SEGMENT
??$forward@AAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAAAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU12@@Z PROC ; std::forward<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * * &>, COMDAT
; __Arg$ = ecx

; 1386 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, ecx

; 1387 : }

	ret	0
??$forward@AAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAAAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@AAPAPAU12@@Z ENDP ; std::forward<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * * &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$construct@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@$$QAPAU34@@Z
_TEXT	SEGMENT
_<_Args_0>$ = 8						; size = 4
??$construct@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@$$QAPAU34@@Z PROC ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::construct<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *>, COMDAT
; __Al$dead$ = ecx
; __Ptr$ = edx

; 565  :         if constexpr (_Uses_default_construct<_Alloc, _Ty*, _Types...>::value) {
; 566  :             (void) _Al; // TRANSITION, DevCom-1004719
; 567  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 568  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 569  : #else // __cpp_lib_constexpr_dynamic_alloc
; 570  :             ::new (static_cast<void*>(_Ptr)) _Ty(_STD forward<_Types>(_Args)...);
; 571  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 572  :         } else {
; 573  :             _Al.construct(_Ptr, _STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR _<_Args_0>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 574  :         }
; 575  :     }

	ret	0
??$construct@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@$$QAPAU34@@Z ENDP ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::construct<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$construct@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@$$QAPAU34@@Z
_TEXT	SEGMENT
_<_Args_0>$ = 8						; size = 4
??$construct@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@$$QAPAU34@@Z PROC ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::construct<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *>, COMDAT
; __Al$dead$ = ecx
; __Ptr$ = edx

; 565  :         if constexpr (_Uses_default_construct<_Alloc, _Ty*, _Types...>::value) {
; 566  :             (void) _Al; // TRANSITION, DevCom-1004719
; 567  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 568  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 569  : #else // __cpp_lib_constexpr_dynamic_alloc
; 570  :             ::new (static_cast<void*>(_Ptr)) _Ty(_STD forward<_Types>(_Args)...);
; 571  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 572  :         } else {
; 573  :             _Al.construct(_Ptr, _STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR _<_Args_0>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 574  :         }
; 575  :     }

	ret	0
??$construct@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@$$QAPAU34@@Z ENDP ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::construct<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$construct@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@$$QAPAU34@@Z
_TEXT	SEGMENT
_<_Args_0>$ = 8						; size = 4
??$construct@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@$$QAPAU34@@Z PROC ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::construct<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *>, COMDAT
; __Al$dead$ = ecx
; __Ptr$ = edx

; 565  :         if constexpr (_Uses_default_construct<_Alloc, _Ty*, _Types...>::value) {
; 566  :             (void) _Al; // TRANSITION, DevCom-1004719
; 567  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 568  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 569  : #else // __cpp_lib_constexpr_dynamic_alloc
; 570  :             ::new (static_cast<void*>(_Ptr)) _Ty(_STD forward<_Types>(_Args)...);
; 571  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 572  :         } else {
; 573  :             _Al.construct(_Ptr, _STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR _<_Args_0>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 574  :         }
; 575  :     }

	ret	0
??$construct@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@$$QAPAU34@@Z ENDP ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::construct<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$construct@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@$$QAPAU34@@Z
_TEXT	SEGMENT
_<_Args_0>$ = 8						; size = 4
??$construct@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@$$QAPAU34@@Z PROC ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::construct<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *>, COMDAT
; __Al$dead$ = ecx
; __Ptr$ = edx

; 565  :         if constexpr (_Uses_default_construct<_Alloc, _Ty*, _Types...>::value) {
; 566  :             (void) _Al; // TRANSITION, DevCom-1004719
; 567  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 568  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 569  : #else // __cpp_lib_constexpr_dynamic_alloc
; 570  :             ::new (static_cast<void*>(_Ptr)) _Ty(_STD forward<_Types>(_Args)...);
; 571  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 572  :         } else {
; 573  :             _Al.construct(_Ptr, _STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR _<_Args_0>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 574  :         }
; 575  :     }

	ret	0
??$construct@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@$$QAPAU34@@Z ENDP ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::construct<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$construct@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@$$QAPAU34@@Z
_TEXT	SEGMENT
_<_Args_0>$ = 8						; size = 4
??$construct@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@$$QAPAU34@@Z PROC ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::construct<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *>, COMDAT
; __Al$dead$ = ecx
; __Ptr$ = edx

; 565  :         if constexpr (_Uses_default_construct<_Alloc, _Ty*, _Types...>::value) {
; 566  :             (void) _Al; // TRANSITION, DevCom-1004719
; 567  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 568  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 569  : #else // __cpp_lib_constexpr_dynamic_alloc
; 570  :             ::new (static_cast<void*>(_Ptr)) _Ty(_STD forward<_Types>(_Args)...);
; 571  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 572  :         } else {
; 573  :             _Al.construct(_Ptr, _STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR _<_Args_0>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 574  :         }
; 575  :     }

	ret	0
??$construct@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@$$QAPAU34@@Z ENDP ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::construct<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$construct@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@$$QAPAU34@@Z
_TEXT	SEGMENT
_<_Args_0>$ = 8						; size = 4
??$construct@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@$$QAPAU34@@Z PROC ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::construct<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *>, COMDAT
; __Al$dead$ = ecx
; __Ptr$ = edx

; 565  :         if constexpr (_Uses_default_construct<_Alloc, _Ty*, _Types...>::value) {
; 566  :             (void) _Al; // TRANSITION, DevCom-1004719
; 567  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 568  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 569  : #else // __cpp_lib_constexpr_dynamic_alloc
; 570  :             ::new (static_cast<void*>(_Ptr)) _Ty(_STD forward<_Types>(_Args)...);
; 571  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 572  :         } else {
; 573  :             _Al.construct(_Ptr, _STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR _<_Args_0>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 574  :         }
; 575  :     }

	ret	0
??$construct@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@$$QAPAU34@@Z ENDP ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::construct<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$construct@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@$$QAPAU34@@Z
_TEXT	SEGMENT
_<_Args_0>$ = 8						; size = 4
??$construct@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@$$QAPAU34@@Z PROC ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::construct<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *>, COMDAT
; __Al$dead$ = ecx
; __Ptr$ = edx

; 565  :         if constexpr (_Uses_default_construct<_Alloc, _Ty*, _Types...>::value) {
; 566  :             (void) _Al; // TRANSITION, DevCom-1004719
; 567  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 568  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 569  : #else // __cpp_lib_constexpr_dynamic_alloc
; 570  :             ::new (static_cast<void*>(_Ptr)) _Ty(_STD forward<_Types>(_Args)...);
; 571  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 572  :         } else {
; 573  :             _Al.construct(_Ptr, _STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR _<_Args_0>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 574  :         }
; 575  :     }

	ret	0
??$construct@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@$$QAPAU34@@Z ENDP ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::construct<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$construct@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@$$QAPAU34@@Z
_TEXT	SEGMENT
_<_Args_0>$ = 8						; size = 4
??$construct@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@$$QAPAU34@@Z PROC ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::construct<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *>, COMDAT
; __Al$dead$ = ecx
; __Ptr$ = edx

; 565  :         if constexpr (_Uses_default_construct<_Alloc, _Ty*, _Types...>::value) {
; 566  :             (void) _Al; // TRANSITION, DevCom-1004719
; 567  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 568  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 569  : #else // __cpp_lib_constexpr_dynamic_alloc
; 570  :             ::new (static_cast<void*>(_Ptr)) _Ty(_STD forward<_Types>(_Args)...);
; 571  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 572  :         } else {
; 573  :             _Al.construct(_Ptr, _STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR _<_Args_0>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 574  :         }
; 575  :     }

	ret	0
??$construct@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PAU12@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@$$QAPAU34@@Z ENDP ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::construct<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
;	COMDAT ?construct@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@ABQAU23@@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
__Val$ = 12						; size = 4
?construct@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@ABQAU23@@Z PROC ; doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *>::construct, COMDAT
; _this$dead$ = ecx

; 37   : 								void					construct		(pointer p, const T& _Val)				{	::new((void*)p) value_type (_Val); }

	mov	eax, DWORD PTR __Val$[esp-4]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR _p$[esp-4]
	mov	DWORD PTR [eax], ecx
	ret	8
?construct@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@ABQAU23@@Z ENDP ; doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *>::construct
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
;	COMDAT ?construct@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@ABQAU23@@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
__Val$ = 12						; size = 4
?construct@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@ABQAU23@@Z PROC ; doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *>::construct, COMDAT
; _this$dead$ = ecx

; 37   : 								void					construct		(pointer p, const T& _Val)				{	::new((void*)p) value_type (_Val); }

	mov	eax, DWORD PTR __Val$[esp-4]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR _p$[esp-4]
	mov	DWORD PTR [eax], ecx
	ret	8
?construct@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@ABQAU23@@Z ENDP ; doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *>::construct
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
;	COMDAT ?construct@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@ABQAU23@@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
__Val$ = 12						; size = 4
?construct@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@ABQAU23@@Z PROC ; doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *>::construct, COMDAT
; _this$dead$ = ecx

; 37   : 								void					construct		(pointer p, const T& _Val)				{	::new((void*)p) value_type (_Val); }

	mov	eax, DWORD PTR __Val$[esp-4]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR _p$[esp-4]
	mov	DWORD PTR [eax], ecx
	ret	8
?construct@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@ABQAU23@@Z ENDP ; doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *>::construct
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
;	COMDAT ?construct@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@ABQAU23@@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
__Val$ = 12						; size = 4
?construct@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@ABQAU23@@Z PROC ; doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *>::construct, COMDAT
; _this$dead$ = ecx

; 37   : 								void					construct		(pointer p, const T& _Val)				{	::new((void*)p) value_type (_Val); }

	mov	eax, DWORD PTR __Val$[esp-4]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR _p$[esp-4]
	mov	DWORD PTR [eax], ecx
	ret	8
?construct@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@ABQAU23@@Z ENDP ; doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *>::construct
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
;	COMDAT ?construct@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@ABQAU23@@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
__Val$ = 12						; size = 4
?construct@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@ABQAU23@@Z PROC ; doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *>::construct, COMDAT
; _this$dead$ = ecx

; 37   : 								void					construct		(pointer p, const T& _Val)				{	::new((void*)p) value_type (_Val); }

	mov	eax, DWORD PTR __Val$[esp-4]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR _p$[esp-4]
	mov	DWORD PTR [eax], ecx
	ret	8
?construct@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@ABQAU23@@Z ENDP ; doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *>::construct
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
;	COMDAT ?construct@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@ABQAU23@@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
__Val$ = 12						; size = 4
?construct@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@ABQAU23@@Z PROC ; doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *>::construct, COMDAT
; _this$dead$ = ecx

; 37   : 								void					construct		(pointer p, const T& _Val)				{	::new((void*)p) value_type (_Val); }

	mov	eax, DWORD PTR __Val$[esp-4]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR _p$[esp-4]
	mov	DWORD PTR [eax], ecx
	ret	8
?construct@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@ABQAU23@@Z ENDP ; doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *>::construct
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
;	COMDAT ?construct@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@ABQAU23@@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
__Val$ = 12						; size = 4
?construct@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@ABQAU23@@Z PROC ; doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *>::construct, COMDAT
; _this$dead$ = ecx

; 37   : 								void					construct		(pointer p, const T& _Val)				{	::new((void*)p) value_type (_Val); }

	mov	eax, DWORD PTR __Val$[esp-4]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR _p$[esp-4]
	mov	DWORD PTR [eax], ecx
	ret	8
?construct@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@ABQAU23@@Z ENDP ; doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *>::construct
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
;	COMDAT ?construct@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@ABQAU23@@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
__Val$ = 12						; size = 4
?construct@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@ABQAU23@@Z PROC ; doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *>::construct, COMDAT
; _this$dead$ = ecx

; 37   : 								void					construct		(pointer p, const T& _Val)				{	::new((void*)p) value_type (_Val); }

	mov	eax, DWORD PTR __Val$[esp-4]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR _p$[esp-4]
	mov	DWORD PTR [eax], ecx
	ret	8
?construct@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@ABQAU23@@Z ENDP ; doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *>::construct
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@AAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAAAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z
_TEXT	SEGMENT
??$forward@AAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAAAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z PROC ; std::forward<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * &>, COMDAT
; __Arg$ = ecx

; 1386 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, ecx

; 1387 : }

	ret	0
??$forward@AAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAAAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z ENDP ; std::forward<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$construct@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU34@@Z
_TEXT	SEGMENT
_<_Args_0>$ = 8						; size = 4
??$construct@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU34@@Z PROC ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::construct<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * &>, COMDAT
; __Al$dead$ = ecx
; __Ptr$ = edx

; 565  :         if constexpr (_Uses_default_construct<_Alloc, _Ty*, _Types...>::value) {
; 566  :             (void) _Al; // TRANSITION, DevCom-1004719
; 567  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 568  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 569  : #else // __cpp_lib_constexpr_dynamic_alloc
; 570  :             ::new (static_cast<void*>(_Ptr)) _Ty(_STD forward<_Types>(_Args)...);
; 571  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 572  :         } else {
; 573  :             _Al.construct(_Ptr, _STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR _<_Args_0>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 574  :         }
; 575  :     }

	ret	0
??$construct@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU34@@Z ENDP ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::construct<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@AAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAAAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z
_TEXT	SEGMENT
??$forward@AAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAAAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z PROC ; std::forward<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * &>, COMDAT
; __Arg$ = ecx

; 1386 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, ecx

; 1387 : }

	ret	0
??$forward@AAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAAAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@Z ENDP ; std::forward<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$construct@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU34@@Z
_TEXT	SEGMENT
_<_Args_0>$ = 8						; size = 4
??$construct@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU34@@Z PROC ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::construct<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * &>, COMDAT
; __Al$dead$ = ecx
; __Ptr$ = edx

; 565  :         if constexpr (_Uses_default_construct<_Alloc, _Ty*, _Types...>::value) {
; 566  :             (void) _Al; // TRANSITION, DevCom-1004719
; 567  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 568  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 569  : #else // __cpp_lib_constexpr_dynamic_alloc
; 570  :             ::new (static_cast<void*>(_Ptr)) _Ty(_STD forward<_Types>(_Args)...);
; 571  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 572  :         } else {
; 573  :             _Al.construct(_Ptr, _STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR _<_Args_0>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 574  :         }
; 575  :     }

	ret	0
??$construct@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU12@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@AAPAU34@@Z ENDP ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::construct<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
;	COMDAT ?deallocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@I@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
_n$dead$ = 12						; size = 4
?deallocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@I@Z PROC ; doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *>::deallocate, COMDAT
; _this$dead$ = ecx

; 35   : 								void					deallocate		(pointer p, size_type n) const			{	dlfree	(p);				}

	mov	ecx, DWORD PTR _p$[esp-4]
	call	_dlfree
	ret	8
?deallocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@I@Z ENDP ; doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
;	COMDAT ?deallocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@I@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
_n$dead$ = 12						; size = 4
?deallocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@I@Z PROC ; doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *>::deallocate, COMDAT
; _this$dead$ = ecx

; 35   : 								void					deallocate		(pointer p, size_type n) const			{	dlfree	(p);				}

	mov	ecx, DWORD PTR _p$[esp-4]
	call	_dlfree
	ret	8
?deallocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@I@Z ENDP ; doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
;	COMDAT ?deallocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@I@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
_n$dead$ = 12						; size = 4
?deallocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@I@Z PROC ; doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *>::deallocate, COMDAT
; _this$dead$ = ecx

; 35   : 								void					deallocate		(pointer p, size_type n) const			{	dlfree	(p);				}

	mov	ecx, DWORD PTR _p$[esp-4]
	call	_dlfree
	ret	8
?deallocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@I@Z ENDP ; doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
;	COMDAT ?deallocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@I@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
_n$dead$ = 12						; size = 4
?deallocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@I@Z PROC ; doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *>::deallocate, COMDAT
; _this$dead$ = ecx

; 35   : 								void					deallocate		(pointer p, size_type n) const			{	dlfree	(p);				}

	mov	ecx, DWORD PTR _p$[esp-4]
	call	_dlfree
	ret	8
?deallocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@I@Z ENDP ; doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
;	COMDAT ?deallocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@I@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
_n$dead$ = 12						; size = 4
?deallocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@I@Z PROC ; doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *>::deallocate, COMDAT
; _this$dead$ = ecx

; 35   : 								void					deallocate		(pointer p, size_type n) const			{	dlfree	(p);				}

	mov	ecx, DWORD PTR _p$[esp-4]
	call	_dlfree
	ret	8
?deallocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@I@Z ENDP ; doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
;	COMDAT ?deallocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@I@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
_n$dead$ = 12						; size = 4
?deallocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@I@Z PROC ; doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *>::deallocate, COMDAT
; _this$dead$ = ecx

; 35   : 								void					deallocate		(pointer p, size_type n) const			{	dlfree	(p);				}

	mov	ecx, DWORD PTR _p$[esp-4]
	call	_dlfree
	ret	8
?deallocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@I@Z ENDP ; doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
;	COMDAT ?deallocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@I@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
_n$dead$ = 12						; size = 4
?deallocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@I@Z PROC ; doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *>::deallocate, COMDAT
; _this$dead$ = ecx

; 35   : 								void					deallocate		(pointer p, size_type n) const			{	dlfree	(p);				}

	mov	ecx, DWORD PTR _p$[esp-4]
	call	_dlfree
	ret	8
?deallocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@I@Z ENDP ; doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
;	COMDAT ?deallocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@I@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
_n$dead$ = 12						; size = 4
?deallocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@I@Z PROC ; doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *>::deallocate, COMDAT
; _this$dead$ = ecx

; 35   : 								void					deallocate		(pointer p, size_type n) const			{	dlfree	(p);				}

	mov	ecx, DWORD PTR _p$[esp-4]
	call	_dlfree
	ret	8
?deallocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@I@Z ENDP ; doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
;	COMDAT ?deallocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@I@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
_n$dead$ = 12						; size = 4
?deallocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@I@Z PROC ; doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *>::deallocate, COMDAT
; _this$dead$ = ecx

; 35   : 								void					deallocate		(pointer p, size_type n) const			{	dlfree	(p);				}

	mov	ecx, DWORD PTR _p$[esp-4]
	call	_dlfree
	ret	8
?deallocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@I@Z ENDP ; doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
;	COMDAT ?deallocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@I@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
_n$dead$ = 12						; size = 4
?deallocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@I@Z PROC ; doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *>::deallocate, COMDAT
; _this$dead$ = ecx

; 35   : 								void					deallocate		(pointer p, size_type n) const			{	dlfree	(p);				}

	mov	ecx, DWORD PTR _p$[esp-4]
	call	_dlfree
	ret	8
?deallocate@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@QBEXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@I@Z ENDP ; doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
;	COMDAT ?deallocate@?$doug_lea_alloc@PAVIRender_Visual@@@@QBEXPAPAVIRender_Visual@@I@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
_n$dead$ = 12						; size = 4
?deallocate@?$doug_lea_alloc@PAVIRender_Visual@@@@QBEXPAPAVIRender_Visual@@I@Z PROC ; doug_lea_alloc<IRender_Visual *>::deallocate, COMDAT
; _this$dead$ = ecx

; 35   : 								void					deallocate		(pointer p, size_type n) const			{	dlfree	(p);				}

	mov	ecx, DWORD PTR _p$[esp-4]
	call	_dlfree
	ret	8
?deallocate@?$doug_lea_alloc@PAVIRender_Visual@@@@QBEXPAPAVIRender_Visual@@I@Z ENDP ; doug_lea_alloc<IRender_Visual *>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
;	COMDAT ?begin@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ
_TEXT	SEGMENT
?begin@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ PROC ; FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::begin, COMDAT
; _this$ = ecx

; 200  : 	IC TNode*	begin()		{ return nodes;			}

	mov	eax, DWORD PTR [ecx]
	ret	0
?begin@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ ENDP ; FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::begin
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
;	COMDAT ?begin@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ
_TEXT	SEGMENT
?begin@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ PROC ; FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::begin, COMDAT
; _this$ = ecx

; 200  : 	IC TNode*	begin()		{ return nodes;			}

	mov	eax, DWORD PTR [ecx]
	ret	0
?begin@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ ENDP ; FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::begin
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
;	COMDAT ?begin@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ
_TEXT	SEGMENT
?begin@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ PROC ; FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::begin, COMDAT
; _this$ = ecx

; 200  : 	IC TNode*	begin()		{ return nodes;			}

	mov	eax, DWORD PTR [ecx]
	ret	0
?begin@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ ENDP ; FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::begin
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
;	COMDAT ?begin@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ
_TEXT	SEGMENT
?begin@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ PROC ; FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::begin, COMDAT
; _this$ = ecx

; 200  : 	IC TNode*	begin()		{ return nodes;			}

	mov	eax, DWORD PTR [ecx]
	ret	0
?begin@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ ENDP ; FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::begin
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
;	COMDAT ?begin@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ
_TEXT	SEGMENT
?begin@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ PROC ; FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::begin, COMDAT
; _this$ = ecx

; 200  : 	IC TNode*	begin()		{ return nodes;			}

	mov	eax, DWORD PTR [ecx]
	ret	0
?begin@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ ENDP ; FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::begin
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
;	COMDAT ?begin@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ
_TEXT	SEGMENT
?begin@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ PROC ; FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::begin, COMDAT
; _this$ = ecx

; 200  : 	IC TNode*	begin()		{ return nodes;			}

	mov	eax, DWORD PTR [ecx]
	ret	0
?begin@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ ENDP ; FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::begin
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
;	COMDAT ?begin@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ
_TEXT	SEGMENT
?begin@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ PROC ; FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::begin, COMDAT
; _this$ = ecx

; 200  : 	IC TNode*	begin()		{ return nodes;			}

	mov	eax, DWORD PTR [ecx]
	ret	0
?begin@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ ENDP ; FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::begin
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
;	COMDAT ?begin@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ
_TEXT	SEGMENT
?begin@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ PROC ; FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::begin, COMDAT
; _this$ = ecx

; 200  : 	IC TNode*	begin()		{ return nodes;			}

	mov	eax, DWORD PTR [ecx]
	ret	0
?begin@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ ENDP ; FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::begin
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\FixedVector.h
;	COMDAT ?size@?$svector@V?$resptr_core@USPass@@V?$resptr_base@USPass@@@@@@$01@@QBEIXZ
_TEXT	SEGMENT
?size@?$svector@V?$resptr_core@USPass@@V?$resptr_base@USPass@@@@@@$01@@QBEIXZ PROC ; svector<resptr_core<SPass,resptr_base<SPass> >,2>::size, COMDAT
; _this$ = ecx

; 30   : 	IC u32		size()		const			{ return count;							}

	mov	eax, DWORD PTR [ecx+8]
	ret	0
?size@?$svector@V?$resptr_core@USPass@@V?$resptr_base@USPass@@@@@@$01@@QBEIXZ ENDP ; svector<resptr_core<SPass,resptr_base<SPass> >,2>::size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
;	COMDAT ?destroy@?$doug_lea_alloc@PAVIRender_Visual@@@@QAEXPAPAVIRender_Visual@@@Z
_TEXT	SEGMENT
_p$dead$ = 8						; size = 4
?destroy@?$doug_lea_alloc@PAVIRender_Visual@@@@QAEXPAPAVIRender_Visual@@@Z PROC ; doug_lea_alloc<IRender_Visual *>::destroy, COMDAT
; _this$dead$ = ecx

; 38   : 								void					destroy			(pointer p)								{	std::_Destroy_in_place(p);			}

	ret	4
?destroy@?$doug_lea_alloc@PAVIRender_Visual@@@@QAEXPAPAVIRender_Visual@@@Z ENDP ; doug_lea_alloc<IRender_Visual *>::destroy
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$destroy@PAVIRender_Visual@@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@SAXAAV?$doug_lea_alloc@PAVIRender_Visual@@@@PAPAVIRender_Visual@@@Z
_TEXT	SEGMENT
??$destroy@PAVIRender_Visual@@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@SAXAAV?$doug_lea_alloc@PAVIRender_Visual@@@@PAPAVIRender_Visual@@@Z PROC ; std::_Normal_allocator_traits<doug_lea_alloc<IRender_Visual *> >::destroy<IRender_Visual *>, COMDAT
; __Al$dead$ = ecx
; __Ptr$dead$ = edx

; 579  :         if constexpr (_Uses_default_destroy<_Alloc, _Ty*>::value) {
; 580  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 581  :             _STD destroy_at(_Ptr);
; 582  : #else // __cpp_lib_constexpr_dynamic_alloc
; 583  :             _Ptr->~_Ty();
; 584  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 585  :         } else {
; 586  :             _Al.destroy(_Ptr);
; 587  :         }
; 588  :     }

	ret	0
??$destroy@PAVIRender_Visual@@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@SAXAAV?$doug_lea_alloc@PAVIRender_Visual@@@@PAPAVIRender_Visual@@@Z ENDP ; std::_Normal_allocator_traits<doug_lea_alloc<IRender_Visual *> >::destroy<IRender_Visual *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Destroy_range@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@YAXPAPAVIRender_Visual@@QAPAV1@AAV?$doug_lea_alloc@PAVIRender_Visual@@@@@Z
_TEXT	SEGMENT
__Al$dead$ = 8						; size = 4
??$_Destroy_range@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@YAXPAPAVIRender_Visual@@QAPAV1@AAV?$doug_lea_alloc@PAVIRender_Visual@@@@@Z PROC ; std::_Destroy_range<doug_lea_alloc<IRender_Visual *> >, COMDAT
; __First$dead$ = ecx
; __Last$dead$ = edx

; 901  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 902  :     using _Ty = typename _Alloc::value_type;
; 903  :     if constexpr (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 904  :         for (; _First != _Last; ++_First) {
; 905  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 906  :         }
; 907  :     }
; 908  : }

	ret	0
??$_Destroy_range@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@YAXPAPAVIRender_Visual@@QAPAV1@AAV?$doug_lea_alloc@PAVIRender_Visual@@@@@Z ENDP ; std::_Destroy_range<doug_lea_alloc<IRender_Visual *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAVIRender_Visual@@@@V?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@std@@$00@std@@QAEAAV?$doug_lea_alloc@PAVIRender_Visual@@@@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAVIRender_Visual@@@@V?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@std@@$00@std@@QAEAAV?$doug_lea_alloc@PAVIRender_Visual@@@@XZ PROC ; std::_Compressed_pair<doug_lea_alloc<IRender_Visual *>,std::_Vector_val<std::_Simple_types<IRender_Visual *> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1339 :         return *this;

	mov	eax, ecx

; 1340 :     }

	ret	0
?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAVIRender_Visual@@@@V?$_Vector_val@U?$_Simple_types@PAVIRender_Visual@@@std@@@std@@$00@std@@QAEAAV?$doug_lea_alloc@PAVIRender_Visual@@@@XZ ENDP ; std::_Compressed_pair<doug_lea_alloc<IRender_Visual *>,std::_Vector_val<std::_Simple_types<IRender_Visual *> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Getal@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@AAEAAV?$doug_lea_alloc@PAVIRender_Visual@@@@XZ
_TEXT	SEGMENT
?_Getal@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@AAEAAV?$doug_lea_alloc@PAVIRender_Visual@@@@XZ PROC ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::_Getal, COMDAT
; _this$ = ecx

; 1805 :         return _Mypair._Get_first();

	mov	eax, ecx

; 1806 :     }

	ret	0
?_Getal@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@AAEAAV?$doug_lea_alloc@PAVIRender_Visual@@@@XZ ENDP ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Destroy@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@AAEXPAPAVIRender_Visual@@0@Z
_TEXT	SEGMENT
__First$dead$ = 8					; size = 4
__Last$dead$ = 12					; size = 4
?_Destroy@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@AAEXPAPAVIRender_Visual@@0@Z PROC ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::_Destroy, COMDAT
; _this$dead$ = ecx

; 1666 :         // destroy [_First, _Last) using allocator
; 1667 :         _Destroy_range(_First, _Last, _Getal());
; 1668 :     }

	ret	8
?_Destroy@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@AAEXPAPAVIRender_Visual@@0@Z ENDP ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?clear@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAEXXZ PROC ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::clear, COMDAT
; _this$ = ecx

; 1437 :         auto& _My_data    = _Mypair._Myval2;
; 1438 :         pointer& _Myfirst = _My_data._Myfirst;
; 1439 :         pointer& _Mylast  = _My_data._Mylast;
; 1440 : 
; 1441 :         _My_data._Orphan_all();
; 1442 :         _Destroy(_Myfirst, _Mylast);
; 1443 :         _Mylast = _Myfirst;

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [ecx+4], eax

; 1444 :     }

	ret	0
?clear@?$vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@std@@QAEXXZ ENDP ; std::vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ?clear_and_free@?$xr_vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@@QAEXXZ
_TEXT	SEGMENT
?clear_and_free@?$xr_vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@@QAEXXZ PROC ; xr_vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::clear_and_free, COMDAT
; _this$ = ecx

; 127  : 	void	clear_and_free		()									{ inherited::clear();			}

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [ecx+4], eax
	ret	0
?clear_and_free@?$xr_vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@@QAEXXZ ENDP ; xr_vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::clear_and_free
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ?clear@?$xr_vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@@QAEXXZ
_TEXT	SEGMENT
?clear@?$xr_vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@@QAEXXZ PROC ; xr_vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::clear, COMDAT
; _this$ = ecx

; 132  : 	void	clear				()									{ clear_and_free	();			}

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [ecx+4], eax
	ret	0
?clear@?$xr_vector@PAVIRender_Visual@@V?$doug_lea_alloc@PAVIRender_Visual@@@@@@QAEXXZ ENDP ; xr_vector<IRender_Visual *,doug_lea_alloc<IRender_Visual *> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__sector.h
;	COMDAT ?root@CSector@@QAEPAVIRender_Visual@@XZ
_TEXT	SEGMENT
?root@CSector@@QAEPAVIRender_Visual@@XZ PROC		; CSector::root, COMDAT
; _this$ = ecx

; 63   : 	IRender_Visual*					root			()				{ return m_root; }

	mov	eax, DWORD PTR [ecx+4]
	ret	0
?root@CSector@@QAEPAVIRender_Visual@@XZ ENDP		; CSector::root
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAXAAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
??$_Destroy_in_place@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAXAAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; std::_Destroy_in_place<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *>, COMDAT
; __Obj$dead$ = ecx

; 295  :     if constexpr (is_array_v<_Ty>) {
; 296  :         _Destroy_range(_Obj, _Obj + extent_v<_Ty>);
; 297  :     } else {
; 298  :         _Obj.~_Ty();
; 299  :     }
; 300  : }

	ret	0
??$_Destroy_in_place@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAXAAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; std::_Destroy_in_place<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
;	COMDAT ?destroy@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
_p$dead$ = 8						; size = 4
?destroy@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *>::destroy, COMDAT
; _this$dead$ = ecx

; 38   : 								void					destroy			(pointer p)								{	std::_Destroy_in_place(p);			}

	ret	4
?destroy@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *>::destroy
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$destroy@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
??$destroy@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::destroy<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *>, COMDAT
; __Al$dead$ = ecx
; __Ptr$dead$ = edx

; 579  :         if constexpr (_Uses_default_destroy<_Alloc, _Ty*>::value) {
; 580  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 581  :             _STD destroy_at(_Ptr);
; 582  : #else // __cpp_lib_constexpr_dynamic_alloc
; 583  :             _Ptr->~_Ty();
; 584  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 585  :         } else {
; 586  :             _Al.destroy(_Ptr);
; 587  :         }
; 588  :     }

	ret	0
??$destroy@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::destroy<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$_Unfancy@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z
_TEXT	SEGMENT
??$_Unfancy@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z PROC ; std::_Unfancy<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *>, COMDAT
; __Ptr$ = ecx

; 266  :     return _Ptr;

	mov	eax, ecx

; 267  : }

	ret	0
??$_Unfancy@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z ENDP ; std::_Unfancy<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Destroy_range@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z
_TEXT	SEGMENT
__Al$dead$ = 8						; size = 4
??$_Destroy_range@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z PROC ; std::_Destroy_range<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >, COMDAT
; __First$dead$ = ecx
; __Last$dead$ = edx

; 901  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 902  :     using _Ty = typename _Alloc::value_type;
; 903  :     if constexpr (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 904  :         for (; _First != _Last; ++_First) {
; 905  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 906  :         }
; 907  :     }
; 908  : }

	ret	0
??$_Destroy_range@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ENDP ; std::_Destroy_range<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ PROC ; std::_Compressed_pair<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *>,std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1339 :         return *this;

	mov	eax, ecx

; 1340 :     }

	ret	0
?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ENDP ; std::_Compressed_pair<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *>,std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Getal@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ
_TEXT	SEGMENT
?_Getal@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ PROC ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::_Getal, COMDAT
; _this$ = ecx

; 1805 :         return _Mypair._Get_first();

	mov	eax, ecx

; 1806 :     }

	ret	0
?_Getal@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ENDP ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Destroy@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z
_TEXT	SEGMENT
__First$dead$ = 8					; size = 4
__Last$dead$ = 12					; size = 4
?_Destroy@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z PROC ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::_Destroy, COMDAT
; _this$dead$ = ecx

; 1666 :         // destroy [_First, _Last) using allocator
; 1667 :         _Destroy_range(_First, _Last, _Getal());
; 1668 :     }

	ret	8
?_Destroy@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ENDP ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?clear@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ PROC ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::clear, COMDAT
; _this$ = ecx

; 1437 :         auto& _My_data    = _Mypair._Myval2;
; 1438 :         pointer& _Myfirst = _My_data._Myfirst;
; 1439 :         pointer& _Mylast  = _My_data._Mylast;
; 1440 : 
; 1441 :         _My_data._Orphan_all();
; 1442 :         _Destroy(_Myfirst, _Mylast);
; 1443 :         _Mylast = _Myfirst;

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [ecx+4], eax

; 1444 :     }

	ret	0
?clear@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ ENDP ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ?clear_and_free@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ
_TEXT	SEGMENT
?clear_and_free@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ PROC ; xr_vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::clear_and_free, COMDAT
; _this$ = ecx

; 127  : 	void	clear_and_free		()									{ inherited::clear();			}

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [ecx+4], eax
	ret	0
?clear_and_free@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ ENDP ; xr_vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::clear_and_free
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ?clear@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ
_TEXT	SEGMENT
?clear@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ PROC ; xr_vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::clear, COMDAT
; _this$ = ecx

; 132  : 	void	clear				()									{ clear_and_free	();			}

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [ecx+4], eax
	ret	0
?clear@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapMatrixPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ ENDP ; xr_vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapMatrixPS,doug_lea_allocator>::TNode *> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAXAAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
??$_Destroy_in_place@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAXAAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; std::_Destroy_in_place<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *>, COMDAT
; __Obj$dead$ = ecx

; 295  :     if constexpr (is_array_v<_Ty>) {
; 296  :         _Destroy_range(_Obj, _Obj + extent_v<_Ty>);
; 297  :     } else {
; 298  :         _Obj.~_Ty();
; 299  :     }
; 300  : }

	ret	0
??$_Destroy_in_place@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAXAAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; std::_Destroy_in_place<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
;	COMDAT ?destroy@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
_p$dead$ = 8						; size = 4
?destroy@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *>::destroy, COMDAT
; _this$dead$ = ecx

; 38   : 								void					destroy			(pointer p)								{	std::_Destroy_in_place(p);			}

	ret	4
?destroy@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *>::destroy
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$destroy@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
??$destroy@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::destroy<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *>, COMDAT
; __Al$dead$ = ecx
; __Ptr$dead$ = edx

; 579  :         if constexpr (_Uses_default_destroy<_Alloc, _Ty*>::value) {
; 580  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 581  :             _STD destroy_at(_Ptr);
; 582  : #else // __cpp_lib_constexpr_dynamic_alloc
; 583  :             _Ptr->~_Ty();
; 584  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 585  :         } else {
; 586  :             _Al.destroy(_Ptr);
; 587  :         }
; 588  :     }

	ret	0
??$destroy@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::destroy<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$_Unfancy@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z
_TEXT	SEGMENT
??$_Unfancy@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z PROC ; std::_Unfancy<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *>, COMDAT
; __Ptr$ = ecx

; 266  :     return _Ptr;

	mov	eax, ecx

; 267  : }

	ret	0
??$_Unfancy@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z ENDP ; std::_Unfancy<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Destroy_range@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z
_TEXT	SEGMENT
__Al$dead$ = 8						; size = 4
??$_Destroy_range@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z PROC ; std::_Destroy_range<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >, COMDAT
; __First$dead$ = ecx
; __Last$dead$ = edx

; 901  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 902  :     using _Ty = typename _Alloc::value_type;
; 903  :     if constexpr (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 904  :         for (; _First != _Last; ++_First) {
; 905  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 906  :         }
; 907  :     }
; 908  : }

	ret	0
??$_Destroy_range@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ENDP ; std::_Destroy_range<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ PROC ; std::_Compressed_pair<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *>,std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1339 :         return *this;

	mov	eax, ecx

; 1340 :     }

	ret	0
?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ENDP ; std::_Compressed_pair<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *>,std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Getal@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ
_TEXT	SEGMENT
?_Getal@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ PROC ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::_Getal, COMDAT
; _this$ = ecx

; 1805 :         return _Mypair._Get_first();

	mov	eax, ecx

; 1806 :     }

	ret	0
?_Getal@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ENDP ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Destroy@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z
_TEXT	SEGMENT
__First$dead$ = 8					; size = 4
__Last$dead$ = 12					; size = 4
?_Destroy@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z PROC ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::_Destroy, COMDAT
; _this$dead$ = ecx

; 1666 :         // destroy [_First, _Last) using allocator
; 1667 :         _Destroy_range(_First, _Last, _Getal());
; 1668 :     }

	ret	8
?_Destroy@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ENDP ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?clear@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ PROC ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::clear, COMDAT
; _this$ = ecx

; 1437 :         auto& _My_data    = _Mypair._Myval2;
; 1438 :         pointer& _Myfirst = _My_data._Myfirst;
; 1439 :         pointer& _Mylast  = _My_data._Mylast;
; 1440 : 
; 1441 :         _My_data._Orphan_all();
; 1442 :         _Destroy(_Myfirst, _Mylast);
; 1443 :         _Mylast = _Myfirst;

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [ecx+4], eax

; 1444 :     }

	ret	0
?clear@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ ENDP ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ?clear_and_free@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ
_TEXT	SEGMENT
?clear_and_free@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ PROC ; xr_vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::clear_and_free, COMDAT
; _this$ = ecx

; 127  : 	void	clear_and_free		()									{ inherited::clear();			}

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [ecx+4], eax
	ret	0
?clear_and_free@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ ENDP ; xr_vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::clear_and_free
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ?clear@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ
_TEXT	SEGMENT
?clear@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ PROC ; xr_vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::clear, COMDAT
; _this$ = ecx

; 132  : 	void	clear				()									{ clear_and_free	();			}

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [ecx+4], eax
	ret	0
?clear@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapMatrixCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ ENDP ; xr_vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapMatrixCS,doug_lea_allocator>::TNode *> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAXAAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
??$_Destroy_in_place@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAXAAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; std::_Destroy_in_place<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *>, COMDAT
; __Obj$dead$ = ecx

; 295  :     if constexpr (is_array_v<_Ty>) {
; 296  :         _Destroy_range(_Obj, _Obj + extent_v<_Ty>);
; 297  :     } else {
; 298  :         _Obj.~_Ty();
; 299  :     }
; 300  : }

	ret	0
??$_Destroy_in_place@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAXAAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; std::_Destroy_in_place<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
;	COMDAT ?destroy@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
_p$dead$ = 8						; size = 4
?destroy@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *>::destroy, COMDAT
; _this$dead$ = ecx

; 38   : 								void					destroy			(pointer p)								{	std::_Destroy_in_place(p);			}

	ret	4
?destroy@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *>::destroy
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$destroy@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
??$destroy@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::destroy<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *>, COMDAT
; __Al$dead$ = ecx
; __Ptr$dead$ = edx

; 579  :         if constexpr (_Uses_default_destroy<_Alloc, _Ty*>::value) {
; 580  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 581  :             _STD destroy_at(_Ptr);
; 582  : #else // __cpp_lib_constexpr_dynamic_alloc
; 583  :             _Ptr->~_Ty();
; 584  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 585  :         } else {
; 586  :             _Al.destroy(_Ptr);
; 587  :         }
; 588  :     }

	ret	0
??$destroy@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::destroy<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$_Unfancy@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z
_TEXT	SEGMENT
??$_Unfancy@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z PROC ; std::_Unfancy<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *>, COMDAT
; __Ptr$ = ecx

; 266  :     return _Ptr;

	mov	eax, ecx

; 267  : }

	ret	0
??$_Unfancy@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z ENDP ; std::_Unfancy<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Destroy_range@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z
_TEXT	SEGMENT
__Al$dead$ = 8						; size = 4
??$_Destroy_range@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z PROC ; std::_Destroy_range<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >, COMDAT
; __First$dead$ = ecx
; __Last$dead$ = edx

; 901  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 902  :     using _Ty = typename _Alloc::value_type;
; 903  :     if constexpr (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 904  :         for (; _First != _Last; ++_First) {
; 905  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 906  :         }
; 907  :     }
; 908  : }

	ret	0
??$_Destroy_range@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ENDP ; std::_Destroy_range<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ PROC ; std::_Compressed_pair<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *>,std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1339 :         return *this;

	mov	eax, ecx

; 1340 :     }

	ret	0
?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ENDP ; std::_Compressed_pair<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *>,std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Getal@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ
_TEXT	SEGMENT
?_Getal@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ PROC ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::_Getal, COMDAT
; _this$ = ecx

; 1805 :         return _Mypair._Get_first();

	mov	eax, ecx

; 1806 :     }

	ret	0
?_Getal@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ENDP ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Destroy@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@0@Z
_TEXT	SEGMENT
__First$dead$ = 8					; size = 4
__Last$dead$ = 12					; size = 4
?_Destroy@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@0@Z PROC ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::_Destroy, COMDAT
; _this$dead$ = ecx

; 1666 :         // destroy [_First, _Last) using allocator
; 1667 :         _Destroy_range(_First, _Last, _Getal());
; 1668 :     }

	ret	8
?_Destroy@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ENDP ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?clear@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ PROC ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::clear, COMDAT
; _this$ = ecx

; 1437 :         auto& _My_data    = _Mypair._Myval2;
; 1438 :         pointer& _Myfirst = _My_data._Myfirst;
; 1439 :         pointer& _Mylast  = _My_data._Mylast;
; 1440 : 
; 1441 :         _My_data._Orphan_all();
; 1442 :         _Destroy(_Myfirst, _Mylast);
; 1443 :         _Mylast = _Myfirst;

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [ecx+4], eax

; 1444 :     }

	ret	0
?clear@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ ENDP ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ?clear_and_free@?$xr_vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ
_TEXT	SEGMENT
?clear_and_free@?$xr_vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ PROC ; xr_vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::clear_and_free, COMDAT
; _this$ = ecx

; 127  : 	void	clear_and_free		()									{ inherited::clear();			}

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [ecx+4], eax
	ret	0
?clear_and_free@?$xr_vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ ENDP ; xr_vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::clear_and_free
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ?clear@?$xr_vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ
_TEXT	SEGMENT
?clear@?$xr_vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ PROC ; xr_vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::clear, COMDAT
; _this$ = ecx

; 132  : 	void	clear				()									{ clear_and_free	();			}

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [ecx+4], eax
	ret	0
?clear@?$xr_vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapMatrixStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ ENDP ; xr_vector<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapMatrixStates,doug_lea_allocator>::TNode *> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAXAAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
??$_Destroy_in_place@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAXAAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; std::_Destroy_in_place<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *>, COMDAT
; __Obj$dead$ = ecx

; 295  :     if constexpr (is_array_v<_Ty>) {
; 296  :         _Destroy_range(_Obj, _Obj + extent_v<_Ty>);
; 297  :     } else {
; 298  :         _Obj.~_Ty();
; 299  :     }
; 300  : }

	ret	0
??$_Destroy_in_place@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAXAAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; std::_Destroy_in_place<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
;	COMDAT ?destroy@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
_p$dead$ = 8						; size = 4
?destroy@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *>::destroy, COMDAT
; _this$dead$ = ecx

; 38   : 								void					destroy			(pointer p)								{	std::_Destroy_in_place(p);			}

	ret	4
?destroy@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *>::destroy
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$destroy@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
??$destroy@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::destroy<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *>, COMDAT
; __Al$dead$ = ecx
; __Ptr$dead$ = edx

; 579  :         if constexpr (_Uses_default_destroy<_Alloc, _Ty*>::value) {
; 580  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 581  :             _STD destroy_at(_Ptr);
; 582  : #else // __cpp_lib_constexpr_dynamic_alloc
; 583  :             _Ptr->~_Ty();
; 584  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 585  :         } else {
; 586  :             _Al.destroy(_Ptr);
; 587  :         }
; 588  :     }

	ret	0
??$destroy@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::destroy<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$_Unfancy@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z
_TEXT	SEGMENT
??$_Unfancy@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z PROC ; std::_Unfancy<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *>, COMDAT
; __Ptr$ = ecx

; 266  :     return _Ptr;

	mov	eax, ecx

; 267  : }

	ret	0
??$_Unfancy@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z ENDP ; std::_Unfancy<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Destroy_range@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z
_TEXT	SEGMENT
__Al$dead$ = 8						; size = 4
??$_Destroy_range@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z PROC ; std::_Destroy_range<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >, COMDAT
; __First$dead$ = ecx
; __Last$dead$ = edx

; 901  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 902  :     using _Ty = typename _Alloc::value_type;
; 903  :     if constexpr (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 904  :         for (; _First != _Last; ++_First) {
; 905  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 906  :         }
; 907  :     }
; 908  : }

	ret	0
??$_Destroy_range@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ENDP ; std::_Destroy_range<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ PROC ; std::_Compressed_pair<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *>,std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1339 :         return *this;

	mov	eax, ecx

; 1340 :     }

	ret	0
?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ENDP ; std::_Compressed_pair<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *>,std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Getal@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ
_TEXT	SEGMENT
?_Getal@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ PROC ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::_Getal, COMDAT
; _this$ = ecx

; 1805 :         return _Mypair._Get_first();

	mov	eax, ecx

; 1806 :     }

	ret	0
?_Getal@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ENDP ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Destroy@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@Z
_TEXT	SEGMENT
__First$dead$ = 8					; size = 4
__Last$dead$ = 12					; size = 4
?_Destroy@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@Z PROC ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::_Destroy, COMDAT
; _this$dead$ = ecx

; 1666 :         // destroy [_First, _Last) using allocator
; 1667 :         _Destroy_range(_First, _Last, _Getal());
; 1668 :     }

	ret	8
?_Destroy@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ENDP ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?clear@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ PROC ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::clear, COMDAT
; _this$ = ecx

; 1437 :         auto& _My_data    = _Mypair._Myval2;
; 1438 :         pointer& _Myfirst = _My_data._Myfirst;
; 1439 :         pointer& _Mylast  = _My_data._Mylast;
; 1440 : 
; 1441 :         _My_data._Orphan_all();
; 1442 :         _Destroy(_Myfirst, _Mylast);
; 1443 :         _Mylast = _Myfirst;

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [ecx+4], eax

; 1444 :     }

	ret	0
?clear@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ ENDP ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ?clear_and_free@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ
_TEXT	SEGMENT
?clear_and_free@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ PROC ; xr_vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::clear_and_free, COMDAT
; _this$ = ecx

; 127  : 	void	clear_and_free		()									{ inherited::clear();			}

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [ecx+4], eax
	ret	0
?clear_and_free@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ ENDP ; xr_vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::clear_and_free
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ?clear@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ
_TEXT	SEGMENT
?clear@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ PROC ; xr_vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::clear, COMDAT
; _this$ = ecx

; 132  : 	void	clear				()									{ clear_and_free	();			}

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [ecx+4], eax
	ret	0
?clear@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapMatrixTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ ENDP ; xr_vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapMatrixTextures,doug_lea_allocator>::TNode *> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAXAAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
??$_Destroy_in_place@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAXAAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; std::_Destroy_in_place<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *>, COMDAT
; __Obj$dead$ = ecx

; 295  :     if constexpr (is_array_v<_Ty>) {
; 296  :         _Destroy_range(_Obj, _Obj + extent_v<_Ty>);
; 297  :     } else {
; 298  :         _Obj.~_Ty();
; 299  :     }
; 300  : }

	ret	0
??$_Destroy_in_place@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAXAAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; std::_Destroy_in_place<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
;	COMDAT ?destroy@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
_p$dead$ = 8						; size = 4
?destroy@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *>::destroy, COMDAT
; _this$dead$ = ecx

; 38   : 								void					destroy			(pointer p)								{	std::_Destroy_in_place(p);			}

	ret	4
?destroy@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *>::destroy
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$destroy@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
??$destroy@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::destroy<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *>, COMDAT
; __Al$dead$ = ecx
; __Ptr$dead$ = edx

; 579  :         if constexpr (_Uses_default_destroy<_Alloc, _Ty*>::value) {
; 580  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 581  :             _STD destroy_at(_Ptr);
; 582  : #else // __cpp_lib_constexpr_dynamic_alloc
; 583  :             _Ptr->~_Ty();
; 584  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 585  :         } else {
; 586  :             _Al.destroy(_Ptr);
; 587  :         }
; 588  :     }

	ret	0
??$destroy@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::destroy<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$_Unfancy@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z
_TEXT	SEGMENT
??$_Unfancy@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z PROC ; std::_Unfancy<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *>, COMDAT
; __Ptr$ = ecx

; 266  :     return _Ptr;

	mov	eax, ecx

; 267  : }

	ret	0
??$_Unfancy@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z ENDP ; std::_Unfancy<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Destroy_range@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z
_TEXT	SEGMENT
__Al$dead$ = 8						; size = 4
??$_Destroy_range@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z PROC ; std::_Destroy_range<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >, COMDAT
; __First$dead$ = ecx
; __Last$dead$ = edx

; 901  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 902  :     using _Ty = typename _Alloc::value_type;
; 903  :     if constexpr (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 904  :         for (; _First != _Last; ++_First) {
; 905  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 906  :         }
; 907  :     }
; 908  : }

	ret	0
??$_Destroy_range@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ENDP ; std::_Destroy_range<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ PROC ; std::_Compressed_pair<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *>,std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1339 :         return *this;

	mov	eax, ecx

; 1340 :     }

	ret	0
?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ENDP ; std::_Compressed_pair<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *>,std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Getal@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ
_TEXT	SEGMENT
?_Getal@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ PROC ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Getal, COMDAT
; _this$ = ecx

; 1805 :         return _Mypair._Get_first();

	mov	eax, ecx

; 1806 :     }

	ret	0
?_Getal@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ENDP ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Destroy@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z
_TEXT	SEGMENT
__First$dead$ = 8					; size = 4
__Last$dead$ = 12					; size = 4
?_Destroy@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z PROC ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Destroy, COMDAT
; _this$dead$ = ecx

; 1666 :         // destroy [_First, _Last) using allocator
; 1667 :         _Destroy_range(_First, _Last, _Getal());
; 1668 :     }

	ret	8
?_Destroy@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ENDP ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?clear@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ PROC ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::clear, COMDAT
; _this$ = ecx

; 1437 :         auto& _My_data    = _Mypair._Myval2;
; 1438 :         pointer& _Myfirst = _My_data._Myfirst;
; 1439 :         pointer& _Mylast  = _My_data._Mylast;
; 1440 : 
; 1441 :         _My_data._Orphan_all();
; 1442 :         _Destroy(_Myfirst, _Mylast);
; 1443 :         _Mylast = _Myfirst;

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [ecx+4], eax

; 1444 :     }

	ret	0
?clear@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ ENDP ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ?clear_and_free@?$xr_vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ
_TEXT	SEGMENT
?clear_and_free@?$xr_vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ PROC ; xr_vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::clear_and_free, COMDAT
; _this$ = ecx

; 127  : 	void	clear_and_free		()									{ inherited::clear();			}

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [ecx+4], eax
	ret	0
?clear_and_free@?$xr_vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ ENDP ; xr_vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::clear_and_free
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ?clear@?$xr_vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ
_TEXT	SEGMENT
?clear@?$xr_vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ PROC ; xr_vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::clear, COMDAT
; _this$ = ecx

; 132  : 	void	clear				()									{ clear_and_free	();			}

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [ecx+4], eax
	ret	0
?clear@?$xr_vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ ENDP ; xr_vector<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::TNode *> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAXAAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
??$_Destroy_in_place@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAXAAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; std::_Destroy_in_place<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *>, COMDAT
; __Obj$dead$ = ecx

; 295  :     if constexpr (is_array_v<_Ty>) {
; 296  :         _Destroy_range(_Obj, _Obj + extent_v<_Ty>);
; 297  :     } else {
; 298  :         _Obj.~_Ty();
; 299  :     }
; 300  : }

	ret	0
??$_Destroy_in_place@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAXAAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; std::_Destroy_in_place<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
;	COMDAT ?destroy@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
_p$dead$ = 8						; size = 4
?destroy@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *>::destroy, COMDAT
; _this$dead$ = ecx

; 38   : 								void					destroy			(pointer p)								{	std::_Destroy_in_place(p);			}

	ret	4
?destroy@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *>::destroy
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$destroy@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
??$destroy@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::destroy<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *>, COMDAT
; __Al$dead$ = ecx
; __Ptr$dead$ = edx

; 579  :         if constexpr (_Uses_default_destroy<_Alloc, _Ty*>::value) {
; 580  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 581  :             _STD destroy_at(_Ptr);
; 582  : #else // __cpp_lib_constexpr_dynamic_alloc
; 583  :             _Ptr->~_Ty();
; 584  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 585  :         } else {
; 586  :             _Al.destroy(_Ptr);
; 587  :         }
; 588  :     }

	ret	0
??$destroy@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::destroy<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$_Unfancy@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z
_TEXT	SEGMENT
??$_Unfancy@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z PROC ; std::_Unfancy<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *>, COMDAT
; __Ptr$ = ecx

; 266  :     return _Ptr;

	mov	eax, ecx

; 267  : }

	ret	0
??$_Unfancy@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z ENDP ; std::_Unfancy<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Destroy_range@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z
_TEXT	SEGMENT
__Al$dead$ = 8						; size = 4
??$_Destroy_range@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z PROC ; std::_Destroy_range<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >, COMDAT
; __First$dead$ = ecx
; __Last$dead$ = edx

; 901  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 902  :     using _Ty = typename _Alloc::value_type;
; 903  :     if constexpr (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 904  :         for (; _First != _Last; ++_First) {
; 905  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 906  :         }
; 907  :     }
; 908  : }

	ret	0
??$_Destroy_range@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ENDP ; std::_Destroy_range<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ PROC ; std::_Compressed_pair<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *>,std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1339 :         return *this;

	mov	eax, ecx

; 1340 :     }

	ret	0
?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ENDP ; std::_Compressed_pair<doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *>,std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Getal@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ
_TEXT	SEGMENT
?_Getal@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ PROC ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::_Getal, COMDAT
; _this$ = ecx

; 1805 :         return _Mypair._Get_first();

	mov	eax, ecx

; 1806 :     }

	ret	0
?_Getal@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ENDP ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Destroy@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z
_TEXT	SEGMENT
__First$dead$ = 8					; size = 4
__Last$dead$ = 12					; size = 4
?_Destroy@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z PROC ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::_Destroy, COMDAT
; _this$dead$ = ecx

; 1666 :         // destroy [_First, _Last) using allocator
; 1667 :         _Destroy_range(_First, _Last, _Getal());
; 1668 :     }

	ret	8
?_Destroy@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ENDP ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?clear@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ PROC ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::clear, COMDAT
; _this$ = ecx

; 1437 :         auto& _My_data    = _Mypair._Myval2;
; 1438 :         pointer& _Myfirst = _My_data._Myfirst;
; 1439 :         pointer& _Mylast  = _My_data._Mylast;
; 1440 : 
; 1441 :         _My_data._Orphan_all();
; 1442 :         _Destroy(_Myfirst, _Mylast);
; 1443 :         _Mylast = _Myfirst;

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [ecx+4], eax

; 1444 :     }

	ret	0
?clear@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ ENDP ; std::vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ?clear_and_free@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ
_TEXT	SEGMENT
?clear_and_free@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ PROC ; xr_vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::clear_and_free, COMDAT
; _this$ = ecx

; 127  : 	void	clear_and_free		()									{ inherited::clear();			}

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [ecx+4], eax
	ret	0
?clear_and_free@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ ENDP ; xr_vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::clear_and_free
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ?clear@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ
_TEXT	SEGMENT
?clear@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ PROC ; xr_vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::clear, COMDAT
; _this$ = ecx

; 132  : 	void	clear				()									{ clear_and_free	();			}

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [ecx+4], eax
	ret	0
?clear@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DVertexShader9@@UmapNormalPS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ ENDP ; xr_vector<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DVertexShader9 *,R_dsgraph::mapNormalPS,doug_lea_allocator>::TNode *> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAXAAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
??$_Destroy_in_place@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAXAAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; std::_Destroy_in_place<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *>, COMDAT
; __Obj$dead$ = ecx

; 295  :     if constexpr (is_array_v<_Ty>) {
; 296  :         _Destroy_range(_Obj, _Obj + extent_v<_Ty>);
; 297  :     } else {
; 298  :         _Obj.~_Ty();
; 299  :     }
; 300  : }

	ret	0
??$_Destroy_in_place@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAXAAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; std::_Destroy_in_place<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
;	COMDAT ?destroy@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
_p$dead$ = 8						; size = 4
?destroy@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *>::destroy, COMDAT
; _this$dead$ = ecx

; 38   : 								void					destroy			(pointer p)								{	std::_Destroy_in_place(p);			}

	ret	4
?destroy@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *>::destroy
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$destroy@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
??$destroy@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::destroy<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *>, COMDAT
; __Al$dead$ = ecx
; __Ptr$dead$ = edx

; 579  :         if constexpr (_Uses_default_destroy<_Alloc, _Ty*>::value) {
; 580  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 581  :             _STD destroy_at(_Ptr);
; 582  : #else // __cpp_lib_constexpr_dynamic_alloc
; 583  :             _Ptr->~_Ty();
; 584  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 585  :         } else {
; 586  :             _Al.destroy(_Ptr);
; 587  :         }
; 588  :     }

	ret	0
??$destroy@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::destroy<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$_Unfancy@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z
_TEXT	SEGMENT
??$_Unfancy@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z PROC ; std::_Unfancy<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *>, COMDAT
; __Ptr$ = ecx

; 266  :     return _Ptr;

	mov	eax, ecx

; 267  : }

	ret	0
??$_Unfancy@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z ENDP ; std::_Unfancy<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Destroy_range@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z
_TEXT	SEGMENT
__Al$dead$ = 8						; size = 4
??$_Destroy_range@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z PROC ; std::_Destroy_range<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >, COMDAT
; __First$dead$ = ecx
; __Last$dead$ = edx

; 901  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 902  :     using _Ty = typename _Alloc::value_type;
; 903  :     if constexpr (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 904  :         for (; _First != _Last; ++_First) {
; 905  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 906  :         }
; 907  :     }
; 908  : }

	ret	0
??$_Destroy_range@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ENDP ; std::_Destroy_range<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ PROC ; std::_Compressed_pair<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *>,std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1339 :         return *this;

	mov	eax, ecx

; 1340 :     }

	ret	0
?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ENDP ; std::_Compressed_pair<doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *>,std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Getal@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ
_TEXT	SEGMENT
?_Getal@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ PROC ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::_Getal, COMDAT
; _this$ = ecx

; 1805 :         return _Mypair._Get_first();

	mov	eax, ecx

; 1806 :     }

	ret	0
?_Getal@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ENDP ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Destroy@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z
_TEXT	SEGMENT
__First$dead$ = 8					; size = 4
__Last$dead$ = 12					; size = 4
?_Destroy@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z PROC ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::_Destroy, COMDAT
; _this$dead$ = ecx

; 1666 :         // destroy [_First, _Last) using allocator
; 1667 :         _Destroy_range(_First, _Last, _Getal());
; 1668 :     }

	ret	8
?_Destroy@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ENDP ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?clear@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ PROC ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::clear, COMDAT
; _this$ = ecx

; 1437 :         auto& _My_data    = _Mypair._Myval2;
; 1438 :         pointer& _Myfirst = _My_data._Myfirst;
; 1439 :         pointer& _Mylast  = _My_data._Mylast;
; 1440 : 
; 1441 :         _My_data._Orphan_all();
; 1442 :         _Destroy(_Myfirst, _Mylast);
; 1443 :         _Mylast = _Myfirst;

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [ecx+4], eax

; 1444 :     }

	ret	0
?clear@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ ENDP ; std::vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ?clear_and_free@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ
_TEXT	SEGMENT
?clear_and_free@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ PROC ; xr_vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::clear_and_free, COMDAT
; _this$ = ecx

; 127  : 	void	clear_and_free		()									{ inherited::clear();			}

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [ecx+4], eax
	ret	0
?clear_and_free@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ ENDP ; xr_vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::clear_and_free
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ?clear@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ
_TEXT	SEGMENT
?clear@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ PROC ; xr_vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::clear, COMDAT
; _this$ = ecx

; 132  : 	void	clear				()									{ clear_and_free	();			}

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [ecx+4], eax
	ret	0
?clear@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DPixelShader9@@UmapNormalCS@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ ENDP ; xr_vector<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DPixelShader9 *,R_dsgraph::mapNormalCS,doug_lea_allocator>::TNode *> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAXAAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
??$_Destroy_in_place@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAXAAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; std::_Destroy_in_place<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *>, COMDAT
; __Obj$dead$ = ecx

; 295  :     if constexpr (is_array_v<_Ty>) {
; 296  :         _Destroy_range(_Obj, _Obj + extent_v<_Ty>);
; 297  :     } else {
; 298  :         _Obj.~_Ty();
; 299  :     }
; 300  : }

	ret	0
??$_Destroy_in_place@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAXAAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; std::_Destroy_in_place<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
;	COMDAT ?destroy@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
_p$dead$ = 8						; size = 4
?destroy@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *>::destroy, COMDAT
; _this$dead$ = ecx

; 38   : 								void					destroy			(pointer p)								{	std::_Destroy_in_place(p);			}

	ret	4
?destroy@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *>::destroy
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$destroy@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
??$destroy@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::destroy<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *>, COMDAT
; __Al$dead$ = ecx
; __Ptr$dead$ = edx

; 579  :         if constexpr (_Uses_default_destroy<_Alloc, _Ty*>::value) {
; 580  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 581  :             _STD destroy_at(_Ptr);
; 582  : #else // __cpp_lib_constexpr_dynamic_alloc
; 583  :             _Ptr->~_Ty();
; 584  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 585  :         } else {
; 586  :             _Al.destroy(_Ptr);
; 587  :         }
; 588  :     }

	ret	0
??$destroy@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::destroy<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$_Unfancy@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z
_TEXT	SEGMENT
??$_Unfancy@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z PROC ; std::_Unfancy<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *>, COMDAT
; __Ptr$ = ecx

; 266  :     return _Ptr;

	mov	eax, ecx

; 267  : }

	ret	0
??$_Unfancy@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z ENDP ; std::_Unfancy<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Destroy_range@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z
_TEXT	SEGMENT
__Al$dead$ = 8						; size = 4
??$_Destroy_range@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z PROC ; std::_Destroy_range<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >, COMDAT
; __First$dead$ = ecx
; __Last$dead$ = edx

; 901  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 902  :     using _Ty = typename _Alloc::value_type;
; 903  :     if constexpr (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 904  :         for (; _First != _Last; ++_First) {
; 905  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 906  :         }
; 907  :     }
; 908  : }

	ret	0
??$_Destroy_range@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ENDP ; std::_Destroy_range<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ PROC ; std::_Compressed_pair<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *>,std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1339 :         return *this;

	mov	eax, ecx

; 1340 :     }

	ret	0
?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ENDP ; std::_Compressed_pair<doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *>,std::_Vector_val<std::_Simple_types<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Getal@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ
_TEXT	SEGMENT
?_Getal@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ PROC ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::_Getal, COMDAT
; _this$ = ecx

; 1805 :         return _Mypair._Get_first();

	mov	eax, ecx

; 1806 :     }

	ret	0
?_Getal@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ENDP ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Destroy@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@0@Z
_TEXT	SEGMENT
__First$dead$ = 8					; size = 4
__Last$dead$ = 12					; size = 4
?_Destroy@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@0@Z PROC ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::_Destroy, COMDAT
; _this$dead$ = ecx

; 1666 :         // destroy [_First, _Last) using allocator
; 1667 :         _Destroy_range(_First, _Last, _Getal());
; 1668 :     }

	ret	8
?_Destroy@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ENDP ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?clear@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ PROC ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::clear, COMDAT
; _this$ = ecx

; 1437 :         auto& _My_data    = _Mypair._Myval2;
; 1438 :         pointer& _Myfirst = _My_data._Myfirst;
; 1439 :         pointer& _Mylast  = _My_data._Mylast;
; 1440 : 
; 1441 :         _My_data._Orphan_all();
; 1442 :         _Destroy(_Myfirst, _Mylast);
; 1443 :         _Mylast = _Myfirst;

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [ecx+4], eax

; 1444 :     }

	ret	0
?clear@?$vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ ENDP ; std::vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ?clear_and_free@?$xr_vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ
_TEXT	SEGMENT
?clear_and_free@?$xr_vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ PROC ; xr_vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::clear_and_free, COMDAT
; _this$ = ecx

; 127  : 	void	clear_and_free		()									{ inherited::clear();			}

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [ecx+4], eax
	ret	0
?clear_and_free@?$xr_vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ ENDP ; xr_vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::clear_and_free
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ?clear@?$xr_vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ
_TEXT	SEGMENT
?clear@?$xr_vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ PROC ; xr_vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::clear, COMDAT
; _this$ = ecx

; 132  : 	void	clear				()									{ clear_and_free	();			}

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [ecx+4], eax
	ret	0
?clear@?$xr_vector@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAVR_constant_table@@UmapNormalStates@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ ENDP ; xr_vector<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<R_constant_table *,R_dsgraph::mapNormalStates,doug_lea_allocator>::TNode *> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAXAAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
??$_Destroy_in_place@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAXAAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; std::_Destroy_in_place<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *>, COMDAT
; __Obj$dead$ = ecx

; 295  :     if constexpr (is_array_v<_Ty>) {
; 296  :         _Destroy_range(_Obj, _Obj + extent_v<_Ty>);
; 297  :     } else {
; 298  :         _Obj.~_Ty();
; 299  :     }
; 300  : }

	ret	0
??$_Destroy_in_place@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAXAAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; std::_Destroy_in_place<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
;	COMDAT ?destroy@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
_p$dead$ = 8						; size = 4
?destroy@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *>::destroy, COMDAT
; _this$dead$ = ecx

; 38   : 								void					destroy			(pointer p)								{	std::_Destroy_in_place(p);			}

	ret	4
?destroy@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *>::destroy
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$destroy@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
??$destroy@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::destroy<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *>, COMDAT
; __Al$dead$ = ecx
; __Ptr$dead$ = edx

; 579  :         if constexpr (_Uses_default_destroy<_Alloc, _Ty*>::value) {
; 580  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 581  :             _STD destroy_at(_Ptr);
; 582  : #else // __cpp_lib_constexpr_dynamic_alloc
; 583  :             _Ptr->~_Ty();
; 584  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 585  :         } else {
; 586  :             _Al.destroy(_Ptr);
; 587  :         }
; 588  :     }

	ret	0
??$destroy@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::destroy<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$_Unfancy@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z
_TEXT	SEGMENT
??$_Unfancy@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z PROC ; std::_Unfancy<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *>, COMDAT
; __Ptr$ = ecx

; 266  :     return _Ptr;

	mov	eax, ecx

; 267  : }

	ret	0
??$_Unfancy@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z ENDP ; std::_Unfancy<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Destroy_range@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z
_TEXT	SEGMENT
__Al$dead$ = 8						; size = 4
??$_Destroy_range@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z PROC ; std::_Destroy_range<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >, COMDAT
; __First$dead$ = ecx
; __Last$dead$ = edx

; 901  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 902  :     using _Ty = typename _Alloc::value_type;
; 903  :     if constexpr (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 904  :         for (; _First != _Last; ++_First) {
; 905  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 906  :         }
; 907  :     }
; 908  : }

	ret	0
??$_Destroy_range@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ENDP ; std::_Destroy_range<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ PROC ; std::_Compressed_pair<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *>,std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1339 :         return *this;

	mov	eax, ecx

; 1340 :     }

	ret	0
?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ENDP ; std::_Compressed_pair<doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *>,std::_Vector_val<std::_Simple_types<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Getal@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ
_TEXT	SEGMENT
?_Getal@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ PROC ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::_Getal, COMDAT
; _this$ = ecx

; 1805 :         return _Mypair._Get_first();

	mov	eax, ecx

; 1806 :     }

	ret	0
?_Getal@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ENDP ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Destroy@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@Z
_TEXT	SEGMENT
__First$dead$ = 8					; size = 4
__Last$dead$ = 12					; size = 4
?_Destroy@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@Z PROC ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::_Destroy, COMDAT
; _this$dead$ = ecx

; 1666 :         // destroy [_First, _Last) using allocator
; 1667 :         _Destroy_range(_First, _Last, _Getal());
; 1668 :     }

	ret	8
?_Destroy@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ENDP ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?clear@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ PROC ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::clear, COMDAT
; _this$ = ecx

; 1437 :         auto& _My_data    = _Mypair._Myval2;
; 1438 :         pointer& _Myfirst = _My_data._Myfirst;
; 1439 :         pointer& _Mylast  = _My_data._Mylast;
; 1440 : 
; 1441 :         _My_data._Orphan_all();
; 1442 :         _Destroy(_Myfirst, _Mylast);
; 1443 :         _Mylast = _Myfirst;

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [ecx+4], eax

; 1444 :     }

	ret	0
?clear@?$vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ ENDP ; std::vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ?clear_and_free@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ
_TEXT	SEGMENT
?clear_and_free@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ PROC ; xr_vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::clear_and_free, COMDAT
; _this$ = ecx

; 127  : 	void	clear_and_free		()									{ inherited::clear();			}

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [ecx+4], eax
	ret	0
?clear_and_free@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ ENDP ; xr_vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::clear_and_free
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ?clear@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ
_TEXT	SEGMENT
?clear@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ PROC ; xr_vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::clear, COMDAT
; _this$ = ecx

; 132  : 	void	clear				()									{ clear_and_free	();			}

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [ecx+4], eax
	ret	0
?clear@?$xr_vector@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUIDirect3DStateBlock9@@UmapNormalTextures@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ ENDP ; xr_vector<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<IDirect3DStateBlock9 *,R_dsgraph::mapNormalTextures,doug_lea_allocator>::TNode *> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAXAAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
??$_Destroy_in_place@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAXAAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; std::_Destroy_in_place<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *>, COMDAT
; __Obj$dead$ = ecx

; 295  :     if constexpr (is_array_v<_Ty>) {
; 296  :         _Destroy_range(_Obj, _Obj + extent_v<_Ty>);
; 297  :     } else {
; 298  :         _Obj.~_Ty();
; 299  :     }
; 300  : }

	ret	0
??$_Destroy_in_place@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAXAAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; std::_Destroy_in_place<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\r__dsgraph_types.h
;	COMDAT ?destroy@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
_p$dead$ = 8						; size = 4
?destroy@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *>::destroy, COMDAT
; _this$dead$ = ecx

; 38   : 								void					destroy			(pointer p)								{	std::_Destroy_in_place(p);			}

	ret	4
?destroy@?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@QAEXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *>::destroy
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$destroy@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z
_TEXT	SEGMENT
??$destroy@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z PROC ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::destroy<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *>, COMDAT
; __Al$dead$ = ecx
; __Ptr$dead$ = edx

; 579  :         if constexpr (_Uses_default_destroy<_Alloc, _Ty*>::value) {
; 580  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 581  :             _STD destroy_at(_Ptr);
; 582  : #else // __cpp_lib_constexpr_dynamic_alloc
; 583  :             _Ptr->~_Ty();
; 584  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 585  :         } else {
; 586  :             _Al.destroy(_Ptr);
; 587  :         }
; 588  :     }

	ret	0
??$destroy@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@?$_Normal_allocator_traits@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@SAXAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@PAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@Z ENDP ; std::_Normal_allocator_traits<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::destroy<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$_Unfancy@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z
_TEXT	SEGMENT
??$_Unfancy@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z PROC ; std::_Unfancy<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *>, COMDAT
; __Ptr$ = ecx

; 266  :     return _Ptr;

	mov	eax, ecx

; 267  : }

	ret	0
??$_Unfancy@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@YAPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@PAPAU12@@Z ENDP ; std::_Unfancy<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Destroy_range@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z
_TEXT	SEGMENT
__Al$dead$ = 8						; size = 4
??$_Destroy_range@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z PROC ; std::_Destroy_range<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >, COMDAT
; __First$dead$ = ecx
; __Last$dead$ = edx

; 901  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 902  :     using _Ty = typename _Alloc::value_type;
; 903  :     if constexpr (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 904  :         for (; _First != _Last; ++_First) {
; 905  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 906  :         }
; 907  :     }
; 908  : }

	ret	0
??$_Destroy_range@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@YAXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@QAPAU12@AAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@Z ENDP ; std::_Destroy_range<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ PROC ; std::_Compressed_pair<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *>,std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1339 :         return *this;

	mov	eax, ecx

; 1340 :     }

	ret	0
?_Get_first@?$_Compressed_pair@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@V?$_Vector_val@U?$_Simple_types@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@std@@@std@@$00@std@@QAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ENDP ; std::_Compressed_pair<doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *>,std::_Vector_val<std::_Simple_types<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Getal@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ
_TEXT	SEGMENT
?_Getal@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ PROC ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Getal, COMDAT
; _this$ = ecx

; 1805 :         return _Mypair._Get_first();

	mov	eax, ecx

; 1806 :     }

	ret	0
?_Getal@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEAAV?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@XZ ENDP ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Destroy@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z
_TEXT	SEGMENT
__First$dead$ = 8					; size = 4
__Last$dead$ = 12					; size = 4
?_Destroy@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z PROC ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Destroy, COMDAT
; _this$dead$ = ecx

; 1666 :         // destroy [_First, _Last) using allocator
; 1667 :         _Destroy_range(_First, _Last, _Getal());
; 1668 :     }

	ret	8
?_Destroy@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@AAEXPAPAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@0@Z ENDP ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?clear@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ PROC ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::clear, COMDAT
; _this$ = ecx

; 1437 :         auto& _My_data    = _Mypair._Myval2;
; 1438 :         pointer& _Myfirst = _My_data._Myfirst;
; 1439 :         pointer& _Mylast  = _My_data._Mylast;
; 1440 : 
; 1441 :         _My_data._Orphan_all();
; 1442 :         _Destroy(_Myfirst, _Mylast);
; 1443 :         _Mylast = _Myfirst;

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [ecx+4], eax

; 1444 :     }

	ret	0
?clear@?$vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@std@@QAEXXZ ENDP ; std::vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ?clear_and_free@?$xr_vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ
_TEXT	SEGMENT
?clear_and_free@?$xr_vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ PROC ; xr_vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::clear_and_free, COMDAT
; _this$ = ecx

; 127  : 	void	clear_and_free		()									{ inherited::clear();			}

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [ecx+4], eax
	ret	0
?clear_and_free@?$xr_vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ ENDP ; xr_vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::clear_and_free
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ?clear@?$xr_vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ
_TEXT	SEGMENT
?clear@?$xr_vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ PROC ; xr_vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::clear, COMDAT
; _this$ = ecx

; 132  : 	void	clear				()									{ clear_and_free	();			}

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [ecx+4], eax
	ret	0
?clear@?$xr_vector@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@V?$doug_lea_alloc@PAUTNode@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@@@@@QAEXXZ ENDP ; xr_vector<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *,doug_lea_alloc<FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::TNode *> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
;	COMDAT ?begin@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ
_TEXT	SEGMENT
?begin@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ PROC ; FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::begin, COMDAT
; _this$ = ecx

; 200  : 	IC TNode*	begin()		{ return nodes;			}

	mov	eax, DWORD PTR [ecx]
	ret	0
?begin@?$FixedMAP@PAUSTextureList@@UmapMatrixItems@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ ENDP ; FixedMAP<STextureList *,R_dsgraph::mapMatrixItems,doug_lea_allocator>::begin
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\fixedmap.h
;	COMDAT ?begin@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ
_TEXT	SEGMENT
?begin@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ PROC ; FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::begin, COMDAT
; _this$ = ecx

; 200  : 	IC TNode*	begin()		{ return nodes;			}

	mov	eax, DWORD PTR [ecx]
	ret	0
?begin@?$FixedMAP@PAUSTextureList@@UmapNormalItems@R_dsgraph@@Udoug_lea_allocator@@@@QAEPAUTNode@1@XZ ENDP ; FixedMAP<STextureList *,R_dsgraph::mapNormalItems,doug_lea_allocator>::begin
_TEXT	ENDS
END
