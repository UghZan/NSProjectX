; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30146.0 

	TITLE	i:\vitalya\mine\nsprojectx\nspx_build\intermediate\release-win32\xrrender_r1\blender_laemb.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BN@LJHNKABO@LEVEL?3?5?$CIlmap?$CLenv?$CKconst?$CJ?$CKbase@ ; `string'
PUBLIC	??_C@_08CHMPKCOC@Constant@			; `string'
PUBLIC	??_C@_0BF@MILBFPDM@CBlender_LaEmB?3?3Load@	; `string'
PUBLIC	??_C@_0EC@EGCKFFAN@I?3?2Vitalya?2mine?2NSProjectX?2laye@ ; `string'
PUBLIC	??_R2CBlender_LaEmB@@8				; CBlender_LaEmB::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CBlender_LaEmB@@8			; CBlender_LaEmB::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3CBlender_LaEmB@@8				; CBlender_LaEmB::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AVCBlender_LaEmB@@@8			; CBlender_LaEmB `RTTI Type Descriptor'
PUBLIC	??_R4CBlender_LaEmB@@6B@			; CBlender_LaEmB::`RTTI Complete Object Locator'
PUBLIC	??_7CBlender_LaEmB@@6B@				; CBlender_LaEmB::`vftable'
EXTRN	__imp_?PassSET_Blend_MUL2X@CBlender_Compile@@QAEXHI@Z:PROC
EXTRN	__imp_?StageTemplate_LMAP0@CBlender_Compile@@QAEXXZ:PROC
EXTRN	__imp_?PassSET_Blend_MUL@CBlender_Compile@@QAEXHI@Z:PROC
;	COMDAT ?ignore_always@?BD@??Load@CBlender_LaEmB@@UAEXAAVIReader@@G@Z@4_NA
_BSS	SEGMENT
?ignore_always@?BD@??Load@CBlender_LaEmB@@UAEXAAVIReader@@G@Z@4_NA DB 01H DUP (?) ; `CBlender_LaEmB::Load'::`19'::ignore_always
_BSS	ENDS
;	COMDAT ?ignore_always@?M@??Load@CBlender_LaEmB@@UAEXAAVIReader@@G@Z@4_NA
_BSS	SEGMENT
?ignore_always@?M@??Load@CBlender_LaEmB@@UAEXAAVIReader@@G@Z@4_NA DB 01H DUP (?) ; `CBlender_LaEmB::Load'::`12'::ignore_always
_BSS	ENDS
;	COMDAT ?ignore_always@?4??Load@CBlender_LaEmB@@UAEXAAVIReader@@G@Z@4_NA
_BSS	SEGMENT
?ignore_always@?4??Load@CBlender_LaEmB@@UAEXAAVIReader@@G@Z@4_NA DB 01H DUP (?) ; `CBlender_LaEmB::Load'::`5'::ignore_always
_BSS	ENDS
;	COMDAT ??_7CBlender_LaEmB@@6B@
CONST	SEGMENT
??_7CBlender_LaEmB@@6B@ DD FLAT:??_R4CBlender_LaEmB@@6B@ ; CBlender_LaEmB::`vftable'
	DD	FLAT:?getName@IBlender@@UAEPBDXZ
	DD	FLAT:?getComment@CBlender_LaEmB@@UAEPBDXZ
	DD	FLAT:?Save@CBlender_LaEmB@@UAEXAAVIWriter@@@Z
	DD	FLAT:?Load@CBlender_LaEmB@@UAEXAAVIReader@@G@Z
	DD	FLAT:?canBeDetailed@IBlender@@UAEHXZ
	DD	FLAT:?canBeLMAPped@CBlender_LaEmB@@UAEHXZ
	DD	FLAT:?Compile@CBlender_LaEmB@@UAEXAAVCBlender_Compile@@@Z
	DD	FLAT:??_ECBlender_LaEmB@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R4CBlender_LaEmB@@6B@
rdata$r	SEGMENT
??_R4CBlender_LaEmB@@6B@ DD 00H				; CBlender_LaEmB::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCBlender_LaEmB@@@8
	DD	FLAT:??_R3CBlender_LaEmB@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCBlender_LaEmB@@@8
data$rs	SEGMENT
??_R0?AVCBlender_LaEmB@@@8 DD FLAT:??_7type_info@@6B@	; CBlender_LaEmB `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCBlender_LaEmB@@', 00H
data$rs	ENDS
;	COMDAT ??_R3CBlender_LaEmB@@8
rdata$r	SEGMENT
??_R3CBlender_LaEmB@@8 DD 00H				; CBlender_LaEmB::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CBlender_LaEmB@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CBlender_LaEmB@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CBlender_LaEmB@@8 DD FLAT:??_R0?AVCBlender_LaEmB@@@8 ; CBlender_LaEmB::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CBlender_LaEmB@@8
rdata$r	ENDS
;	COMDAT ??_R2CBlender_LaEmB@@8
rdata$r	SEGMENT
??_R2CBlender_LaEmB@@8 DD FLAT:??_R1A@?0A@EA@CBlender_LaEmB@@8 ; CBlender_LaEmB::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IBlender@@8
	DD	FLAT:??_R1A@?0A@EA@CPropertyBase@@8
rdata$r	ENDS
;	COMDAT ??_C@_0EC@EGCKFFAN@I?3?2Vitalya?2mine?2NSProjectX?2laye@
CONST	SEGMENT
??_C@_0EC@EGCKFFAN@I?3?2Vitalya?2mine?2NSProjectX?2laye@ DB 'I:\Vitalya\m'
	DB	'ine\NSProjectX\layers\xrRenderPC_R1\Blender_LaEmB.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@MILBFPDM@CBlender_LaEmB?3?3Load@
CONST	SEGMENT
??_C@_0BF@MILBFPDM@CBlender_LaEmB?3?3Load@ DB 'CBlender_LaEmB::Load', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08CHMPKCOC@Constant@
CONST	SEGMENT
??_C@_08CHMPKCOC@Constant@ DB 'Constant', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@LJHNKABO@LEVEL?3?5?$CIlmap?$CLenv?$CKconst?$CJ?$CKbase@
CONST	SEGMENT
??_C@_0BN@LJHNKABO@LEVEL?3?5?$CIlmap?$CLenv?$CKconst?$CJ?$CKbase@ DB 'LEV'
	DB	'EL: (lmap+env*const)*base', 00H		; `string'
PUBLIC	?compile_Lc@CBlender_LaEmB@@QAEXAAVCBlender_Compile@@@Z ; CBlender_LaEmB::compile_Lc
PUBLIC	?compile_L@CBlender_LaEmB@@QAEXAAVCBlender_Compile@@@Z ; CBlender_LaEmB::compile_L
PUBLIC	?compile_3c@CBlender_LaEmB@@QAEXAAVCBlender_Compile@@@Z ; CBlender_LaEmB::compile_3c
PUBLIC	?compile_3@CBlender_LaEmB@@QAEXAAVCBlender_Compile@@@Z ; CBlender_LaEmB::compile_3
PUBLIC	?compile_2c@CBlender_LaEmB@@QAEXAAVCBlender_Compile@@@Z ; CBlender_LaEmB::compile_2c
PUBLIC	?compile_2@CBlender_LaEmB@@QAEXAAVCBlender_Compile@@@Z ; CBlender_LaEmB::compile_2
PUBLIC	?compile_EDc@CBlender_LaEmB@@QAEXAAVCBlender_Compile@@@Z ; CBlender_LaEmB::compile_EDc
PUBLIC	?compile_ED@CBlender_LaEmB@@QAEXAAVCBlender_Compile@@@Z ; CBlender_LaEmB::compile_ED
PUBLIC	?Compile@CBlender_LaEmB@@UAEXAAVCBlender_Compile@@@Z ; CBlender_LaEmB::Compile
PUBLIC	?Load@CBlender_LaEmB@@UAEXAAVIReader@@G@Z	; CBlender_LaEmB::Load
PUBLIC	?Save@CBlender_LaEmB@@UAEXAAVIWriter@@@Z	; CBlender_LaEmB::Save
PUBLIC	??1CBlender_LaEmB@@UAE@XZ			; CBlender_LaEmB::~CBlender_LaEmB
PUBLIC	??_GCBlender_LaEmB@@UAEPAXI@Z			; CBlender_LaEmB::`scalar deleting destructor'
PUBLIC	??0CBlender_LaEmB@@QAE@XZ			; CBlender_LaEmB::CBlender_LaEmB
PUBLIC	?canBeLMAPped@CBlender_LaEmB@@UAEHXZ		; CBlender_LaEmB::canBeLMAPped
PUBLIC	?getComment@CBlender_LaEmB@@UAEPBDXZ		; CBlender_LaEmB::getComment
EXTRN	??_ECBlender_LaEmB@@UAEPAXI@Z:PROC		; CBlender_LaEmB::`vector deleting destructor'
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\blender_LaEmB.h
;	COMDAT ?getComment@CBlender_LaEmB@@UAEPBDXZ
_TEXT	SEGMENT
?getComment@CBlender_LaEmB@@UAEPBDXZ PROC		; CBlender_LaEmB::getComment, COMDAT
; _this$ = ecx

; 25   : 	virtual		LPCSTR		getComment()	{ return "LEVEL: (lmap+env*const)*base";	}

	mov	eax, OFFSET ??_C@_0BN@LJHNKABO@LEVEL?3?5?$CIlmap?$CLenv?$CKconst?$CJ?$CKbase@
	ret	0
?getComment@CBlender_LaEmB@@UAEPBDXZ ENDP		; CBlender_LaEmB::getComment
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\blender_LaEmB.h
;	COMDAT ?canBeLMAPped@CBlender_LaEmB@@UAEHXZ
_TEXT	SEGMENT
?canBeLMAPped@CBlender_LaEmB@@UAEHXZ PROC		; CBlender_LaEmB::canBeLMAPped, COMDAT
; _this$ = ecx

; 26   : 	virtual		BOOL		canBeLMAPped()	{ return TRUE; }

	mov	eax, 1
	ret	0
?canBeLMAPped@CBlender_LaEmB@@UAEHXZ ENDP		; CBlender_LaEmB::canBeLMAPped
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\Blender_LaEmB.cpp
_TEXT	SEGMENT
??0CBlender_LaEmB@@QAE@XZ PROC				; CBlender_LaEmB::CBlender_LaEmB
; _this$ = ecx

; 15   : {

	push	esi
	mov	esi, ecx
	call	DWORD PTR __imp_??0IBlender@@QAE@XZ
	mov	DWORD PTR [esi], OFFSET ??_7CBlender_LaEmB@@6B@

; 16   : 	description.CLS		= B_LaEmB;

	mov	DWORD PTR [esi+4], 1109401632		; 42202020H
	mov	DWORD PTR [esi+8], 1281443181		; 4c61456dH

; 17   : 	strcpy				(oT2_Name,	"$null");

	mov	eax, DWORD PTR ??_C@_05CAGGJGBB@$null@
	mov	DWORD PTR [esi+324], eax
	movzx	eax, WORD PTR ??_C@_05CAGGJGBB@$null@+4
	mov	WORD PTR [esi+328], ax

; 18   : 	strcpy				(oT2_xform,	"$null");

	mov	eax, DWORD PTR ??_C@_05CAGGJGBB@$null@
	mov	DWORD PTR [esi+388], eax
	movzx	eax, WORD PTR ??_C@_05CAGGJGBB@$null@+4
	mov	WORD PTR [esi+392], ax

; 19   : 	strcpy				(oT2_const,	"$null");

	mov	eax, DWORD PTR ??_C@_05CAGGJGBB@$null@
	mov	DWORD PTR [esi+452], eax
	movzx	eax, WORD PTR ??_C@_05CAGGJGBB@$null@+4
	mov	WORD PTR [esi+456], ax

; 20   : }

	mov	eax, esi
	pop	esi
	ret	0
??0CBlender_LaEmB@@QAE@XZ ENDP				; CBlender_LaEmB::CBlender_LaEmB
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\Blender_LaEmB.cpp
;	COMDAT ??_GCBlender_LaEmB@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCBlender_LaEmB@@UAEPAXI@Z PROC			; CBlender_LaEmB::`scalar deleting destructor', COMDAT
; _this$ = ecx

; 23   : {

	push	esi
	mov	esi, ecx
	mov	DWORD PTR [esi], OFFSET ??_7CBlender_LaEmB@@6B@

; 24   : 	
; 25   : }

	call	DWORD PTR __imp_??1IBlender@@UAE@XZ
	test	BYTE PTR ___flags$[esp], 1
	je	SHORT $LN6@scalar
	push	516					; 00000204H
	push	esi
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN6@scalar:
	mov	eax, esi
	pop	esi
	ret	4
??_GCBlender_LaEmB@@UAEPAXI@Z ENDP			; CBlender_LaEmB::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\Blender_LaEmB.cpp
_TEXT	SEGMENT
??1CBlender_LaEmB@@UAE@XZ PROC				; CBlender_LaEmB::~CBlender_LaEmB
; _this$ = ecx

; 23   : {

	mov	DWORD PTR [ecx], OFFSET ??_7CBlender_LaEmB@@6B@

; 24   : 	
; 25   : }

	jmp	DWORD PTR __imp_??1IBlender@@UAE@XZ
??1CBlender_LaEmB@@UAE@XZ ENDP				; CBlender_LaEmB::~CBlender_LaEmB
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\Blender_LaEmB.cpp
; File I:\Vitalya\mine\NSProjectX\xrEngine\properties.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\Blender_LaEmB.cpp
; File I:\Vitalya\mine\NSProjectX\xrEngine\properties.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\Blender_LaEmB.cpp
; File I:\Vitalya\mine\NSProjectX\xrEngine\properties.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\Blender_LaEmB.cpp
; File I:\Vitalya\mine\NSProjectX\xrEngine\properties.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\Blender_LaEmB.cpp
_TEXT	SEGMENT
_fs$ = 8						; size = 4
?Save@CBlender_LaEmB@@UAEXAAVIWriter@@@Z PROC		; CBlender_LaEmB::Save
; _this$ = ecx

; 28   : {

	push	ebx
	push	esi

; 29   : 	IBlender::Save	(fs);

	mov	esi, DWORD PTR _fs$[esp+4]
	push	edi
	push	esi
	mov	edi, ecx
	call	DWORD PTR __imp_?Save@IBlender@@UAEXAAVIWriter@@@Z
; File I:\Vitalya\mine\NSProjectX\xrEngine\properties.h

; 101  : 	fs.w_u32(ID);

	push	0
	mov	ecx, esi
	call	DWORD PTR __imp_?w_u32@IWriter@@QAEXI@Z

; 102  : 	fs.w_stringZ(name);

	push	OFFSET ??_C@_0BA@KHCMMLLL@Environment?5map@
	mov	ecx, esi
	call	DWORD PTR __imp_?w_stringZ@IWriter@@QAEXPBD@Z

; 101  : 	fs.w_u32(ID);

	push	3
	mov	ecx, esi
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\Blender_LaEmB.cpp

; 31   : 	xrPWRITE_PROP	(fs,"Name",				xrPID_TEXTURE,	oT2_Name);

	lea	ebx, DWORD PTR [edi+324]
; File I:\Vitalya\mine\NSProjectX\xrEngine\properties.h

; 101  : 	fs.w_u32(ID);

	call	DWORD PTR __imp_?w_u32@IWriter@@QAEXI@Z

; 102  : 	fs.w_stringZ(name);

	push	OFFSET ??_C@_04FABLJDN@Name@
	mov	ecx, esi
	call	DWORD PTR __imp_?w_stringZ@IWriter@@QAEXPBD@Z

; 103  : 	if (data && size)	fs.w(data, size);

	test	ebx, ebx
	je	SHORT $LN9@Save
	mov	eax, DWORD PTR [esi]
	mov	ecx, esi
	push	64					; 00000040H
	push	ebx
	call	DWORD PTR [eax+12]
$LN9@Save:

; 101  : 	fs.w_u32(ID);

	push	1
	mov	ecx, esi
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\Blender_LaEmB.cpp

; 32   : 	xrPWRITE_PROP	(fs,"Transform",		xrPID_MATRIX,	oT2_xform);

	lea	ebx, DWORD PTR [edi+388]
; File I:\Vitalya\mine\NSProjectX\xrEngine\properties.h

; 101  : 	fs.w_u32(ID);

	call	DWORD PTR __imp_?w_u32@IWriter@@QAEXI@Z

; 102  : 	fs.w_stringZ(name);

	push	OFFSET ??_C@_09MKLAHOHG@Transform@
	mov	ecx, esi
	call	DWORD PTR __imp_?w_stringZ@IWriter@@QAEXPBD@Z

; 103  : 	if (data && size)	fs.w(data, size);

	test	ebx, ebx
	je	SHORT $LN12@Save
	mov	eax, DWORD PTR [esi]
	mov	ecx, esi
	push	64					; 00000040H
	push	ebx
	call	DWORD PTR [eax+12]
$LN12@Save:

; 101  : 	fs.w_u32(ID);

	push	2
	mov	ecx, esi
	call	DWORD PTR __imp_?w_u32@IWriter@@QAEXI@Z

; 102  : 	fs.w_stringZ(name);

	push	OFFSET ??_C@_08CHMPKCOC@Constant@
	mov	ecx, esi
	call	DWORD PTR __imp_?w_stringZ@IWriter@@QAEXPBD@Z
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\Blender_LaEmB.cpp

; 33   : 	xrPWRITE_PROP	(fs,"Constant",			xrPID_CONSTANT,	oT2_const);

	add	edi, 452				; 000001c4H
; File I:\Vitalya\mine\NSProjectX\xrEngine\properties.h

; 103  : 	if (data && size)	fs.w(data, size);

	je	SHORT $LN15@Save
	mov	eax, DWORD PTR [esi]
	mov	ecx, esi
	push	64					; 00000040H
	push	edi
	call	DWORD PTR [eax+12]
$LN15@Save:
	pop	edi
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\Blender_LaEmB.cpp

; 34   : }

	pop	esi
	pop	ebx
	ret	4
?Save@CBlender_LaEmB@@UAEXAAVIWriter@@@Z ENDP		; CBlender_LaEmB::Save
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\Blender_LaEmB.cpp
; File I:\Vitalya\mine\NSProjectX\xrEngine\properties.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\Blender_LaEmB.cpp
; File I:\Vitalya\mine\NSProjectX\xrEngine\properties.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\Blender_LaEmB.cpp
; File I:\Vitalya\mine\NSProjectX\xrEngine\properties.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\Blender_LaEmB.cpp
; File I:\Vitalya\mine\NSProjectX\xrEngine\properties.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\Blender_LaEmB.cpp
_TEXT	SEGMENT
_fs$ = 8						; size = 4
_version$ = 12						; size = 2
?Load@CBlender_LaEmB@@UAEXAAVIReader@@G@Z PROC		; CBlender_LaEmB::Load
; _this$ = ecx

; 37   : {

	push	ebx
	push	ebp
	push	esi
	push	edi

; 38   : 	IBlender::Load	(fs,version);

	push	DWORD PTR _version$[esp+12]
	mov	edi, DWORD PTR _fs$[esp+16]
	mov	ebp, ecx
	push	edi
	call	DWORD PTR __imp_?Load@IBlender@@UAEXAAVIReader@@G@Z
; File I:\Vitalya\mine\NSProjectX\xrEngine\properties.h

; 124  : 	R_ASSERT(xrPID_MARKER == xrPREAD(fs));

	cmp	BYTE PTR ?ignore_always@?3??xrPREAD_MARKER@@YAXAAVIReader@@@Z@4_NA, 0 ; `xrPREAD_MARKER'::`4'::ignore_always
	mov	ebx, DWORD PTR __imp_?fail@xrDebug@@QAEXPBD0H0AA_N@Z
	jne	SHORT $LN28@Load

; 118  : 	u32 T = fs.r_u32();

	mov	ecx, edi
	call	DWORD PTR __imp_?r_u32@?$IReaderBase@VIReader@@@@QAEIXZ

; 119  : 	fs.skip_stringZ();

	mov	ecx, edi
	mov	esi, eax
	call	DWORD PTR __imp_?skip_stringZ@IReader@@QAEXXZ

; 124  : 	R_ASSERT(xrPID_MARKER == xrPREAD(fs));

	test	esi, esi
	je	SHORT $LN28@Load
	mov	ecx, DWORD PTR __imp_?Debug@@3VxrDebug@@A
	push	OFFSET ?ignore_always@?3??xrPREAD_MARKER@@YAXAAVIReader@@@Z@4_NA ; `xrPREAD_MARKER'::`4'::ignore_always
	push	OFFSET ??_C@_0P@PLOPPKHB@xrPREAD_MARKER@
	push	124					; 0000007cH
	push	OFFSET ??_C@_0DB@CNPOFPKJ@I?3?2Vitalya?2mine?2NSProjectX?2xrEn@
	push	OFFSET ??_C@_0BM@KGILKBEF@xrPID_MARKER?5?$DN?$DN?5xrPREAD?$CIfs?$CJ@
	call	ebx
$LN28@Load:
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\Blender_LaEmB.cpp

; 40   : 	xrPREAD_PROP	(fs,xrPID_TEXTURE,	oT2_Name);

	cmp	BYTE PTR ?ignore_always@?4??Load@CBlender_LaEmB@@UAEXAAVIReader@@G@Z@4_NA, 0
	jne	SHORT $LN2@Load
; File I:\Vitalya\mine\NSProjectX\xrEngine\properties.h

; 118  : 	u32 T = fs.r_u32();

	mov	ecx, edi
	call	DWORD PTR __imp_?r_u32@?$IReaderBase@VIReader@@@@QAEIXZ

; 119  : 	fs.skip_stringZ();

	mov	ecx, edi
	mov	esi, eax
	call	DWORD PTR __imp_?skip_stringZ@IReader@@QAEXXZ
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\Blender_LaEmB.cpp

; 40   : 	xrPREAD_PROP	(fs,xrPID_TEXTURE,	oT2_Name);

	cmp	esi, 3
	je	SHORT $LN2@Load
	mov	ecx, DWORD PTR __imp_?Debug@@3VxrDebug@@A
	push	OFFSET ?ignore_always@?4??Load@CBlender_LaEmB@@UAEXAAVIReader@@G@Z@4_NA
	push	OFFSET ??_C@_0BF@MILBFPDM@CBlender_LaEmB?3?3Load@
	push	40					; 00000028H
	push	OFFSET ??_C@_0EC@EGCKFFAN@I?3?2Vitalya?2mine?2NSProjectX?2laye@
	push	OFFSET ??_C@_0BL@BLIOCLAN@xrPID_TEXTURE?$DN?$DNxrPREAD?$CIfs?$CJ@
	call	ebx
$LN2@Load:
	push	64					; 00000040H
	lea	eax, DWORD PTR [ebp+324]
	mov	ecx, edi
	push	eax
	call	DWORD PTR __imp_?r@IReader@@QAEXPAXH@Z

; 41   : 	xrPREAD_PROP	(fs,xrPID_MATRIX,	oT2_xform);

	cmp	BYTE PTR ?ignore_always@?M@??Load@CBlender_LaEmB@@UAEXAAVIReader@@G@Z@4_NA, 0
	jne	SHORT $LN7@Load
; File I:\Vitalya\mine\NSProjectX\xrEngine\properties.h

; 118  : 	u32 T = fs.r_u32();

	mov	ecx, edi
	call	DWORD PTR __imp_?r_u32@?$IReaderBase@VIReader@@@@QAEIXZ

; 119  : 	fs.skip_stringZ();

	mov	ecx, edi
	mov	esi, eax
	call	DWORD PTR __imp_?skip_stringZ@IReader@@QAEXXZ
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\Blender_LaEmB.cpp

; 41   : 	xrPREAD_PROP	(fs,xrPID_MATRIX,	oT2_xform);

	cmp	esi, 1
	je	SHORT $LN7@Load
	mov	ecx, DWORD PTR __imp_?Debug@@3VxrDebug@@A
	push	OFFSET ?ignore_always@?M@??Load@CBlender_LaEmB@@UAEXAAVIReader@@G@Z@4_NA
	push	OFFSET ??_C@_0BF@MILBFPDM@CBlender_LaEmB?3?3Load@
	push	41					; 00000029H
	push	OFFSET ??_C@_0EC@EGCKFFAN@I?3?2Vitalya?2mine?2NSProjectX?2laye@
	push	OFFSET ??_C@_0BK@PIKCNJKB@xrPID_MATRIX?$DN?$DNxrPREAD?$CIfs?$CJ@
	call	ebx
$LN7@Load:
	push	64					; 00000040H
	lea	eax, DWORD PTR [ebp+388]
	mov	ecx, edi
	push	eax
	call	DWORD PTR __imp_?r@IReader@@QAEXPAXH@Z

; 42   : 	xrPREAD_PROP	(fs,xrPID_CONSTANT,	oT2_const);

	cmp	BYTE PTR ?ignore_always@?BD@??Load@CBlender_LaEmB@@UAEXAAVIReader@@G@Z@4_NA, 0
	jne	SHORT $LN12@Load
; File I:\Vitalya\mine\NSProjectX\xrEngine\properties.h

; 118  : 	u32 T = fs.r_u32();

	mov	ecx, edi
	call	DWORD PTR __imp_?r_u32@?$IReaderBase@VIReader@@@@QAEIXZ

; 119  : 	fs.skip_stringZ();

	mov	ecx, edi
	mov	esi, eax
	call	DWORD PTR __imp_?skip_stringZ@IReader@@QAEXXZ
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\Blender_LaEmB.cpp

; 42   : 	xrPREAD_PROP	(fs,xrPID_CONSTANT,	oT2_const);

	cmp	esi, 2
	je	SHORT $LN12@Load
	mov	ecx, DWORD PTR __imp_?Debug@@3VxrDebug@@A
	push	OFFSET ?ignore_always@?BD@??Load@CBlender_LaEmB@@UAEXAAVIReader@@G@Z@4_NA
	push	OFFSET ??_C@_0BF@MILBFPDM@CBlender_LaEmB?3?3Load@
	push	42					; 0000002aH
	push	OFFSET ??_C@_0EC@EGCKFFAN@I?3?2Vitalya?2mine?2NSProjectX?2laye@
	push	OFFSET ??_C@_0BM@MMHLKGDA@xrPID_CONSTANT?$DN?$DNxrPREAD?$CIfs?$CJ@
	call	ebx
$LN12@Load:
	push	64					; 00000040H
	lea	eax, DWORD PTR [ebp+452]
	mov	ecx, edi
	push	eax
	call	DWORD PTR __imp_?r@IReader@@QAEXPAXH@Z
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 43   : }

	ret	8
?Load@CBlender_LaEmB@@UAEXAAVIReader@@G@Z ENDP		; CBlender_LaEmB::Load
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\Blender_LaEmB.cpp
; File I:\Vitalya\mine\NSProjectX\xrEngine\blenders\Blender_Recorder.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\Blender_LaEmB.cpp
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_C$ = 8							; size = 4
?Compile@CBlender_LaEmB@@UAEXAAVCBlender_Compile@@@Z PROC ; CBlender_LaEmB::Compile
; _this$ = ecx

; 46   : {

	push	ecx
	push	ebx
	push	ebp
	push	esi
	push	edi

; 47   : 	IBlender::Compile		(C);

	mov	edi, DWORD PTR _C$[esp+16]
	mov	esi, ecx
	push	edi
	mov	DWORD PTR _this$1$[esp+24], esi
	call	DWORD PTR __imp_?Compile@IBlender@@UAEXAAVCBlender_Compile@@@Z

; 48   : 
; 49   : 	BOOL bConstant			= (0!=stricmp(oT2_const,"$null"));

	lea	eax, DWORD PTR [esi+452]
	push	OFFSET ??_C@_05CAGGJGBB@$null@
	push	eax
	call	DWORD PTR __imp__stricmp
	add	esp, 8
	neg	eax
	sbb	ecx, ecx
	neg	ecx

; 50   : 	if (C.bEditor)	{

	cmp	DWORD PTR [edi+44], 0
	je	$LN4@Compile

; 51   : 		if (bConstant)	compile_EDc	(C);

	test	ecx, ecx
	je	SHORT $LN6@Compile
	push	edi
	mov	ecx, esi
	call	?compile_EDc@CBlender_LaEmB@@QAEXAAVCBlender_Compile@@@Z ; CBlender_LaEmB::compile_EDc
	pop	edi

; 68   : 				else			compile_3	(C);
; 69   : 				break;
; 70   : 			}
; 71   : 		}
; 72   : 	}
; 73   : }

	pop	esi
	pop	ebp
	pop	ebx
	pop	ecx
	ret	4
$LN6@Compile:

; 78   : 	C.PassBegin		();

	mov	ecx, edi
	call	DWORD PTR __imp_?PassBegin@CBlender_Compile@@QAEXXZ

; 79   : 	{
; 80   : 		C.PassSET_ZB			(TRUE,TRUE);

	push	0
	push	1
	push	1
	mov	ecx, edi
	call	DWORD PTR __imp_?PassSET_ZB@CBlender_Compile@@QAEXHHH@Z

; 81   : 		C.PassSET_Blend_SET		();

	push	0
	push	0
	mov	ecx, edi
	call	DWORD PTR __imp_?PassSET_Blend_SET@CBlender_Compile@@QAEXHI@Z

; 82   : 		C.PassSET_LightFog		(TRUE,TRUE);

	push	1
	push	1
	mov	ecx, edi
	call	DWORD PTR __imp_?PassSET_LightFog@CBlender_Compile@@QAEXHH@Z

; 83   : 		
; 84   : 		// Stage1 - Env texture
; 85   : 		C.StageBegin			();

	mov	ecx, edi
	call	DWORD PTR __imp_?StageBegin@CBlender_Compile@@QAEXXZ

; 86   : 		C.StageSET_Color		(D3DTA_TEXTURE,	  D3DTOP_ADD,			D3DTA_DIFFUSE);

	mov	ebp, DWORD PTR __imp_?StageSET_Color@CBlender_Compile@@QAEXIII@Z
	mov	ecx, edi
	push	0
	push	7
	push	2
	call	ebp

; 87   : 		C.StageSET_Alpha		(D3DTA_TEXTURE,	  D3DTOP_ADD,			D3DTA_DIFFUSE);

	mov	ebx, DWORD PTR __imp_?StageSET_Alpha@CBlender_Compile@@QAEXIII@Z
	mov	ecx, edi
	push	0
	push	7
	push	2
	call	ebx

; 88   : 		C.StageSET_TMC			(oT2_Name, oT2_xform, "$null", 0);

	push	0
	push	OFFSET ??_C@_05CAGGJGBB@$null@
	lea	eax, DWORD PTR [esi+388]
	mov	ecx, edi
	mov	edi, DWORD PTR __imp_?StageSET_TMC@CBlender_Compile@@QAEXPBD00H@Z
	push	eax
	lea	eax, DWORD PTR [esi+324]
	push	eax
	call	edi

; 89   : 		C.StageEnd				();

	mov	ecx, DWORD PTR _C$[esp+16]
	mov	esi, DWORD PTR __imp_?StageEnd@CBlender_Compile@@QAEXXZ
	call	esi

; 90   : 		
; 91   : 		// Stage2 - Base texture
; 92   : 		C.StageBegin			();

	mov	ecx, DWORD PTR _C$[esp+16]
	call	DWORD PTR __imp_?StageBegin@CBlender_Compile@@QAEXXZ

; 93   : 		C.StageSET_Color		(D3DTA_TEXTURE,	  D3DTOP_MODULATE,		D3DTA_CURRENT);

	mov	ecx, DWORD PTR _C$[esp+16]
	push	1
	push	4
	push	2
	call	ebp

; 94   : 		C.StageSET_Alpha		(D3DTA_TEXTURE,	  D3DTOP_MODULATE,		D3DTA_CURRENT);

	push	1
	push	4

; 52   : 		else			compile_ED	(C);
; 53   : 	} else {

	jmp	$LN34@Compile
$LN4@Compile:

; 54   : 		if (2==C.iElement)

	cmp	DWORD PTR [edi+60], 2
	jne	$LN8@Compile

; 55   : 		{
; 56   : 			if (bConstant)	compile_Lc	(C);

	test	ecx, ecx
	mov	ecx, edi
	je	$LN10@Compile

; 319  : 	C.PassBegin		();

	call	DWORD PTR __imp_?PassBegin@CBlender_Compile@@QAEXXZ

; 320  : 	{	
; 321  : 		C.PassSET_ZB			(TRUE,TRUE);

	push	0
	push	1
	push	1
	mov	ecx, edi
	call	DWORD PTR __imp_?PassSET_ZB@CBlender_Compile@@QAEXHHH@Z

; 322  : 		C.PassSET_Blend_SET		();

	push	0
	push	0
	mov	ecx, edi
	call	DWORD PTR __imp_?PassSET_Blend_SET@CBlender_Compile@@QAEXHI@Z

; 323  : 		C.PassSET_LightFog		(FALSE,FALSE);

	push	0
	push	0
	mov	ecx, edi
	call	DWORD PTR __imp_?PassSET_LightFog@CBlender_Compile@@QAEXHH@Z

; 324  : 		
; 325  : 		// Stage0 - Environment map [*] const
; 326  : 		C.StageBegin			();

	mov	ecx, edi
	call	DWORD PTR __imp_?StageBegin@CBlender_Compile@@QAEXXZ

; 327  : 		C.StageSET_Color		(D3DTA_TEXTURE,	  D3DTOP_MODULATE,		D3DTA_TFACTOR);

	mov	ebp, DWORD PTR __imp_?StageSET_Color@CBlender_Compile@@QAEXIII@Z
	mov	ecx, edi
	push	3
	push	4
	push	2
	call	ebp

; 328  : 		C.StageSET_Alpha		(D3DTA_TEXTURE,	  D3DTOP_MODULATE,		D3DTA_TFACTOR);

	mov	ebx, DWORD PTR __imp_?StageSET_Alpha@CBlender_Compile@@QAEXIII@Z
	mov	ecx, edi
	push	3
	push	4
	push	2
	call	ebx

; 329  : 		C.StageSET_TMC			(oT2_Name,oT2_xform,oT2_const,0);

	push	0
	lea	eax, DWORD PTR [esi+452]
	mov	ecx, edi
	mov	edi, DWORD PTR __imp_?StageSET_TMC@CBlender_Compile@@QAEXPBD00H@Z
	push	eax
	lea	eax, DWORD PTR [esi+388]
	push	eax
	lea	eax, DWORD PTR [esi+324]
	push	eax
	call	edi

; 330  : 		C.StageEnd				();

	mov	ecx, DWORD PTR _C$[esp+16]
	mov	esi, DWORD PTR __imp_?StageEnd@CBlender_Compile@@QAEXXZ
	call	esi

; 331  : 		
; 332  : 		// Stage1 - [+] Lightmap
; 333  : 		C.StageBegin			();

	mov	ecx, DWORD PTR _C$[esp+16]
	call	DWORD PTR __imp_?StageBegin@CBlender_Compile@@QAEXXZ

; 334  : 		C.StageSET_Color		(D3DTA_TEXTURE,	  D3DTOP_ADD,			D3DTA_CURRENT);

	mov	ecx, DWORD PTR _C$[esp+16]
	push	1
	push	7
	push	2
	call	ebp

; 335  : 		C.StageSET_Alpha		(D3DTA_TEXTURE,	  D3DTOP_ADD,			D3DTA_CURRENT);

	mov	ebp, DWORD PTR _C$[esp+16]
	mov	ecx, ebp
	push	1
	push	7
	push	2
	call	ebx

; 336  : 		C.StageSET_TMC			("$base1","$null","$null",1);

	push	1
	push	OFFSET ??_C@_05CAGGJGBB@$null@
	push	OFFSET ??_C@_05CAGGJGBB@$null@
	push	OFFSET ??_C@_06EJMEMMKJ@$base1@

; 55   : 		{
; 56   : 			if (bConstant)	compile_Lc	(C);

	jmp	$LN35@Compile
$LN10@Compile:

; 296  : 	C.PassBegin			();

	call	DWORD PTR __imp_?PassBegin@CBlender_Compile@@QAEXXZ

; 297  : 	{
; 298  : 		C.PassSET_ZB			(TRUE,TRUE);

	push	0
	push	1
	push	1
	mov	ecx, edi
	call	DWORD PTR __imp_?PassSET_ZB@CBlender_Compile@@QAEXHHH@Z

; 299  : 		C.PassSET_Blend_SET		();

	push	0
	push	0
	mov	ecx, edi
	call	DWORD PTR __imp_?PassSET_Blend_SET@CBlender_Compile@@QAEXHI@Z

; 300  : 		C.PassSET_LightFog		(FALSE,FALSE);

	push	0
	push	0
	mov	ecx, edi
	call	DWORD PTR __imp_?PassSET_LightFog@CBlender_Compile@@QAEXHH@Z

; 301  : 		
; 302  : 		// Stage0 - Lightmap
; 303  : 		C.StageBegin			();

	mov	esi, DWORD PTR __imp_?StageBegin@CBlender_Compile@@QAEXXZ
	mov	ecx, edi
	call	esi

; 304  : 		C.StageTemplate_LMAP0	();

	mov	ecx, edi
	call	DWORD PTR __imp_?StageTemplate_LMAP0@CBlender_Compile@@QAEXXZ

; 305  : 		C.StageEnd				();

	mov	ecx, edi
	mov	edi, DWORD PTR __imp_?StageEnd@CBlender_Compile@@QAEXXZ
	call	edi

; 306  : 		
; 307  : 		// Stage1 - Environment map
; 308  : 		C.StageBegin			();

	mov	ebx, DWORD PTR _C$[esp+16]
	mov	ecx, ebx
	call	esi

; 309  : 		C.StageSET_Color		(D3DTA_TEXTURE,	  D3DTOP_ADD,			D3DTA_CURRENT);

	push	1
	push	7
	push	2
	mov	ecx, ebx
	call	DWORD PTR __imp_?StageSET_Color@CBlender_Compile@@QAEXIII@Z

; 310  : 		C.StageSET_Alpha		(D3DTA_TEXTURE,	  D3DTOP_ADD,			D3DTA_CURRENT);

	push	1
	push	7
	push	2
	mov	ecx, ebx
	call	DWORD PTR __imp_?StageSET_Alpha@CBlender_Compile@@QAEXIII@Z

; 311  : 		C.StageSET_TMC			(oT2_Name, oT2_xform, "$null",0);

	mov	ecx, DWORD PTR _this$1$[esp+20]
	push	0
	push	OFFSET ??_C@_05CAGGJGBB@$null@
	lea	eax, DWORD PTR [ecx+388]
	push	eax
	lea	eax, DWORD PTR [ecx+324]
	mov	ecx, ebx
	push	eax
	call	DWORD PTR __imp_?StageSET_TMC@CBlender_Compile@@QAEXPBD00H@Z

; 312  : 		C.StageEnd				();

	mov	ecx, ebx
	call	edi

; 313  : 	}
; 314  : 	C.PassEnd			();

	mov	ecx, ebx
	call	DWORD PTR __imp_?PassEnd@CBlender_Compile@@QAEXXZ
	pop	edi

; 68   : 				else			compile_3	(C);
; 69   : 				break;
; 70   : 			}
; 71   : 		}
; 72   : 	}
; 73   : }

	pop	esi
	pop	ebp
	pop	ebx
	pop	ecx
	ret	4
$LN8@Compile:

; 57   : 			else			compile_L	(C);
; 58   : 		} else {
; 59   : 			switch (HW.Caps.raster.dwStages)

	mov	eax, DWORD PTR __imp_?HW@@3VCHW@@A
	mov	eax, DWORD PTR [eax+68]
	and	eax, 15					; 0000000fH
	sub	eax, 2
	je	$LN12@Compile

; 63   : 				else			compile_2	(C);
; 64   : 				break;
; 65   : 			case 3:		// Kyro, Radeon, Radeon2, Geforce3/4
; 66   : 			default:
; 67   : 				if (bConstant)	compile_3c	(C);

	test	ecx, ecx
	mov	ecx, edi
	je	$LN17@Compile

; 262  : 	C.PassBegin		();

	call	DWORD PTR __imp_?PassBegin@CBlender_Compile@@QAEXXZ

; 263  : 	{
; 264  : 		C.PassSET_ZB			(TRUE,TRUE);

	push	0
	push	1
	push	1
	mov	ecx, edi
	call	DWORD PTR __imp_?PassSET_ZB@CBlender_Compile@@QAEXHHH@Z

; 265  : 		C.PassSET_Blend_SET		();

	push	0
	push	0
	mov	ecx, edi
	call	DWORD PTR __imp_?PassSET_Blend_SET@CBlender_Compile@@QAEXHI@Z

; 266  : 		C.PassSET_LightFog		(FALSE,TRUE);

	push	1
	push	0
	mov	ecx, edi
	call	DWORD PTR __imp_?PassSET_LightFog@CBlender_Compile@@QAEXHH@Z

; 267  : 		
; 268  : 		// Stage1 - [=] Env-map [*] const
; 269  : 		C.StageBegin			();

	mov	ecx, edi
	call	DWORD PTR __imp_?StageBegin@CBlender_Compile@@QAEXXZ

; 270  : 		C.StageSET_Color		(D3DTA_TEXTURE,	  D3DTOP_MODULATE,		D3DTA_TFACTOR);

	mov	ebp, DWORD PTR __imp_?StageSET_Color@CBlender_Compile@@QAEXIII@Z
	mov	ecx, edi
	push	3
	push	4
	push	2
	call	ebp

; 271  : 		C.StageSET_Alpha		(D3DTA_TEXTURE,	  D3DTOP_MODULATE,		D3DTA_TFACTOR);

	mov	ebx, DWORD PTR __imp_?StageSET_Alpha@CBlender_Compile@@QAEXIII@Z
	mov	ecx, edi
	push	3
	push	4
	push	2
	call	ebx

; 272  : 		C.StageSET_TMC			(oT2_Name,oT2_xform,oT2_const,0);

	push	0
	lea	eax, DWORD PTR [esi+452]
	mov	ecx, edi
	mov	edi, DWORD PTR __imp_?StageSET_TMC@CBlender_Compile@@QAEXPBD00H@Z
	push	eax
	lea	eax, DWORD PTR [esi+388]
	push	eax
	lea	eax, DWORD PTR [esi+324]
	push	eax
	call	edi

; 273  : 		C.StageEnd				();

	mov	ecx, DWORD PTR _C$[esp+16]
	mov	esi, DWORD PTR __imp_?StageEnd@CBlender_Compile@@QAEXXZ
	call	esi

; 274  : 		
; 275  : 		// Stage0 - [+] Lightmap
; 276  : 		C.StageBegin			();

	mov	ecx, DWORD PTR _C$[esp+16]
	call	DWORD PTR __imp_?StageBegin@CBlender_Compile@@QAEXXZ

; 277  : 		C.StageSET_Color		(D3DTA_TEXTURE,	  D3DTOP_ADD,			D3DTA_CURRENT);

	mov	ecx, DWORD PTR _C$[esp+16]
	push	1
	push	7
	push	2
	call	ebp

; 278  : 		C.StageSET_Alpha		(D3DTA_TEXTURE,	  D3DTOP_ADD,			D3DTA_CURRENT);

	mov	ecx, DWORD PTR _C$[esp+16]
	push	1
	push	7
	push	2
	call	ebx

; 279  : 		C.StageSET_TMC			("$base1","$null","$null",1);

	mov	ecx, DWORD PTR _C$[esp+16]
	push	1
	push	OFFSET ??_C@_05CAGGJGBB@$null@
	push	OFFSET ??_C@_05CAGGJGBB@$null@
	push	OFFSET ??_C@_06EJMEMMKJ@$base1@
	call	edi

; 280  : 		C.StageEnd				();

	mov	ecx, DWORD PTR _C$[esp+16]
	call	esi

; 281  : 		
; 282  : 		// Stage2 - [*] Base
; 283  : 		C.StageBegin			();

	mov	ecx, DWORD PTR _C$[esp+16]
	call	DWORD PTR __imp_?StageBegin@CBlender_Compile@@QAEXXZ

; 284  : 		C.StageSET_Color		(D3DTA_TEXTURE,	  D3DTOP_MODULATE2X,	D3DTA_CURRENT);

	mov	ecx, DWORD PTR _C$[esp+16]
	push	1
	push	5
	push	2
	call	ebp

; 285  : 		C.StageSET_Alpha		(D3DTA_TEXTURE,	  D3DTOP_MODULATE2X,	D3DTA_CURRENT);

	push	1
	push	5
$LN34@Compile:

; 68   : 				else			compile_3	(C);
; 69   : 				break;
; 70   : 			}
; 71   : 		}
; 72   : 	}
; 73   : }

	mov	ebp, DWORD PTR _C$[esp+24]
	mov	ecx, ebp
	push	2
	call	ebx
	mov	ecx, DWORD PTR _this$1$[esp+20]
	push	0
	push	OFFSET ??_C@_05CAGGJGBB@$null@
	lea	eax, DWORD PTR [ecx+260]
	push	eax
	lea	eax, DWORD PTR [ecx+196]
	push	eax
$LN35@Compile:
	mov	ecx, ebp
	call	edi
	mov	ecx, ebp
	call	esi
	mov	ecx, ebp
	call	DWORD PTR __imp_?PassEnd@CBlender_Compile@@QAEXXZ
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	pop	ecx
	ret	4
$LN17@Compile:

; 231  : 	C.PassBegin		();

	call	DWORD PTR __imp_?PassBegin@CBlender_Compile@@QAEXXZ

; 232  : 	{
; 233  : 		C.PassSET_ZB			(TRUE,TRUE);

	push	0
	push	1
	push	1
	mov	ecx, edi
	call	DWORD PTR __imp_?PassSET_ZB@CBlender_Compile@@QAEXHHH@Z

; 234  : 		C.PassSET_Blend_SET		();

	push	0
	push	0
	mov	ecx, edi
	call	DWORD PTR __imp_?PassSET_Blend_SET@CBlender_Compile@@QAEXHI@Z

; 235  : 		C.PassSET_LightFog		(FALSE,TRUE);

	push	1
	push	0
	mov	ecx, edi
	call	DWORD PTR __imp_?PassSET_LightFog@CBlender_Compile@@QAEXHH@Z

; 236  : 		
; 237  : 		// Stage0 - [=] Lightmap
; 238  : 		C.StageBegin			();

	mov	ebp, DWORD PTR __imp_?StageBegin@CBlender_Compile@@QAEXXZ
	mov	ecx, edi
	call	ebp

; 239  : 		C.StageTemplate_LMAP0	();

	mov	ecx, edi
	call	DWORD PTR __imp_?StageTemplate_LMAP0@CBlender_Compile@@QAEXXZ

; 240  : 		C.StageEnd				();

	mov	ecx, edi
	call	DWORD PTR __imp_?StageEnd@CBlender_Compile@@QAEXXZ

; 241  : 		
; 242  : 		// Stage1 - [+] Env-map
; 243  : 		C.StageBegin			();

	mov	ecx, edi
	call	ebp

; 244  : 		C.StageSET_Color		(D3DTA_TEXTURE,	  D3DTOP_ADD,			D3DTA_CURRENT);

	mov	ebx, DWORD PTR __imp_?StageSET_Color@CBlender_Compile@@QAEXIII@Z
	mov	ecx, edi
	push	1
	push	7
	push	2
	call	ebx

; 245  : 		C.StageSET_Alpha		(D3DTA_TEXTURE,	  D3DTOP_ADD,			D3DTA_CURRENT);

	push	1
	push	7
	mov	ecx, edi
	mov	edi, DWORD PTR __imp_?StageSET_Alpha@CBlender_Compile@@QAEXIII@Z
	push	2
	call	edi

; 246  : 		C.StageSET_TMC			(oT2_Name,oT2_xform,"$null",0);

	mov	ecx, DWORD PTR _C$[esp+16]
	lea	eax, DWORD PTR [esi+388]
	push	0
	push	OFFSET ??_C@_05CAGGJGBB@$null@
	push	eax
	lea	eax, DWORD PTR [esi+324]
	mov	esi, DWORD PTR __imp_?StageSET_TMC@CBlender_Compile@@QAEXPBD00H@Z
	push	eax
	call	esi

; 247  : 		C.StageEnd				();

	mov	ecx, DWORD PTR _C$[esp+16]
	call	DWORD PTR __imp_?StageEnd@CBlender_Compile@@QAEXXZ

; 248  : 		
; 249  : 		// Stage2 - [*] Base
; 250  : 		C.StageBegin			();

	mov	ecx, DWORD PTR _C$[esp+16]
	call	ebp

; 251  : 		C.StageSET_Color		(D3DTA_TEXTURE,	  D3DTOP_MODULATE2X,	D3DTA_CURRENT);

	mov	ebp, DWORD PTR _C$[esp+16]
	mov	ecx, ebp
	push	1
	push	5
	push	2
	call	ebx

; 252  : 		C.StageSET_Alpha		(D3DTA_TEXTURE,	  D3DTOP_MODULATE2X,	D3DTA_CURRENT);

	push	1
	push	5
	push	2
	mov	ecx, ebp
	call	edi

; 253  : 		C.StageSET_TMC			(oT_Name,oT_xform,"$null",0);

	mov	ecx, DWORD PTR _this$1$[esp+20]
	push	0
	push	OFFSET ??_C@_05CAGGJGBB@$null@
	lea	eax, DWORD PTR [ecx+260]
	push	eax
	lea	eax, DWORD PTR [ecx+196]
	mov	ecx, ebp
	push	eax
	call	esi

; 254  : 		C.StageEnd			();

	mov	ecx, ebp
	call	DWORD PTR __imp_?StageEnd@CBlender_Compile@@QAEXXZ

; 255  : 	}
; 256  : 	C.PassEnd			();

	mov	ecx, ebp
	call	DWORD PTR __imp_?PassEnd@CBlender_Compile@@QAEXXZ
	pop	edi

; 68   : 				else			compile_3	(C);
; 69   : 				break;
; 70   : 			}
; 71   : 		}
; 72   : 	}
; 73   : }

	pop	esi
	pop	ebp
	pop	ebx
	pop	ecx
	ret	4
$LN12@Compile:

; 60   : 			{
; 61   : 			case 2:		// Geforce1/2/MX
; 62   : 				if (bConstant)	compile_2c	(C);

	test	ecx, ecx
	je	SHORT $LN13@Compile
	push	edi
	mov	ecx, esi
	call	?compile_2c@CBlender_LaEmB@@QAEXAAVCBlender_Compile@@@Z ; CBlender_LaEmB::compile_2c
	pop	edi

; 68   : 				else			compile_3	(C);
; 69   : 				break;
; 70   : 			}
; 71   : 		}
; 72   : 	}
; 73   : }

	pop	esi
	pop	ebp
	pop	ebx
	pop	ecx
	ret	4
$LN13@Compile:

; 150  : 	C.PassBegin			();

	mov	ecx, edi
	call	DWORD PTR __imp_?PassBegin@CBlender_Compile@@QAEXXZ

; 151  : 	{
; 152  : 		C.PassSET_ZB			(TRUE,TRUE);

	push	0
	push	1
	push	1
	mov	ecx, edi
	call	DWORD PTR __imp_?PassSET_ZB@CBlender_Compile@@QAEXHHH@Z

; 153  : 		C.PassSET_Blend_SET		();

	push	0
	push	0
	mov	ecx, edi
	call	DWORD PTR __imp_?PassSET_Blend_SET@CBlender_Compile@@QAEXHI@Z

; 154  : 		C.PassSET_LightFog		(FALSE,TRUE);

	push	1
	push	0
	mov	ecx, edi
	call	DWORD PTR __imp_?PassSET_LightFog@CBlender_Compile@@QAEXHH@Z

; 155  : 		
; 156  : 		// Stage0 - Lightmap
; 157  : 		C.StageBegin			();

	mov	ebx, DWORD PTR __imp_?StageBegin@CBlender_Compile@@QAEXXZ
	mov	ecx, edi
	call	ebx

; 158  : 		C.StageTemplate_LMAP0	();

	mov	ecx, edi
	call	DWORD PTR __imp_?StageTemplate_LMAP0@CBlender_Compile@@QAEXXZ

; 159  : 		C.StageEnd				();

	mov	esi, DWORD PTR __imp_?StageEnd@CBlender_Compile@@QAEXXZ
	mov	ecx, edi
	call	esi

; 160  : 		
; 161  : 		// Stage1 - Environment map
; 162  : 		C.StageBegin			();

	mov	ecx, edi
	call	ebx

; 163  : 		C.StageSET_Color		(D3DTA_TEXTURE,	  D3DTOP_ADD,			D3DTA_CURRENT);

	mov	ebp, DWORD PTR __imp_?StageSET_Color@CBlender_Compile@@QAEXIII@Z
	mov	ecx, edi
	push	1
	push	7
	push	2
	call	ebp

; 164  : 		C.StageSET_Alpha		(D3DTA_TEXTURE,	  D3DTOP_ADD,			D3DTA_CURRENT);

	mov	ebx, DWORD PTR __imp_?StageSET_Alpha@CBlender_Compile@@QAEXIII@Z
	mov	ecx, edi
	push	1
	push	7
	push	2
	call	ebx

; 165  : 		C.StageSET_TMC			(oT2_Name, oT2_xform, "$null",0);

	mov	ecx, DWORD PTR _this$1$[esp+20]
	push	0
	push	OFFSET ??_C@_05CAGGJGBB@$null@
	lea	eax, DWORD PTR [ecx+388]
	push	eax
	lea	eax, DWORD PTR [ecx+324]
	mov	ecx, edi
	mov	edi, DWORD PTR __imp_?StageSET_TMC@CBlender_Compile@@QAEXPBD00H@Z
	push	eax
	call	edi

; 166  : 		C.StageEnd				();

	mov	ecx, DWORD PTR _C$[esp+16]
	call	esi

; 167  : 	}
; 168  : 	C.PassEnd			();

	mov	ecx, DWORD PTR _C$[esp+16]
	mov	esi, DWORD PTR __imp_?PassEnd@CBlender_Compile@@QAEXXZ
	call	esi

; 169  : 	
; 170  : 	// Pass2 - Base map
; 171  : 	C.PassBegin		();

	mov	ecx, DWORD PTR _C$[esp+16]
	call	DWORD PTR __imp_?PassBegin@CBlender_Compile@@QAEXXZ

; 172  : 	{
; 173  : 		C.PassSET_ZB			(TRUE,FALSE);

	mov	ecx, DWORD PTR _C$[esp+16]
	push	0
	push	0
	push	1
	call	DWORD PTR __imp_?PassSET_ZB@CBlender_Compile@@QAEXHHH@Z
; File I:\Vitalya\mine\NSProjectX\xrEngine\blenders\Blender_Recorder.h

; 64   : 	void				PassSET_Blend_MUL2X(BOOL bAref = FALSE, u32 ref = 0) { PassSET_Blend(TRUE, D3DBLEND_DESTCOLOR, D3DBLEND_SRCCOLOR, bAref, ref); }

	mov	ecx, DWORD PTR _C$[esp+16]
	push	0
	push	0
	push	3
	push	9
	push	1
	call	DWORD PTR __imp_?PassSET_Blend@CBlender_Compile@@QAEXHIIHI@Z
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\Blender_LaEmB.cpp

; 175  : 		C.PassSET_LightFog		(FALSE,TRUE);

	mov	ecx, DWORD PTR _C$[esp+16]
	push	1
	push	0
	call	DWORD PTR __imp_?PassSET_LightFog@CBlender_Compile@@QAEXHH@Z

; 176  : 		
; 177  : 		// Stage0 - Base
; 178  : 		C.StageBegin			();

	mov	ecx, DWORD PTR _C$[esp+16]
	call	DWORD PTR __imp_?StageBegin@CBlender_Compile@@QAEXXZ

; 179  : 		C.StageSET_Color		(D3DTA_TEXTURE,	  D3DTOP_SELECTARG1,	D3DTA_DIFFUSE);

	mov	ecx, DWORD PTR _C$[esp+16]
	push	0
	push	2
	push	2
	call	ebp

; 180  : 		C.StageSET_Alpha		(D3DTA_TEXTURE,	  D3DTOP_SELECTARG1,	D3DTA_DIFFUSE);

	mov	ebp, DWORD PTR _C$[esp+16]
	push	0
	push	2
	push	2
	mov	ecx, ebp
	call	ebx

; 181  : 		C.StageSET_TMC			(oT_Name, oT_xform, "$null",0);

	mov	ecx, DWORD PTR _this$1$[esp+20]
	push	0
	push	OFFSET ??_C@_05CAGGJGBB@$null@
	lea	eax, DWORD PTR [ecx+260]
	push	eax
	lea	eax, DWORD PTR [ecx+196]
	mov	ecx, ebp
	push	eax
	call	edi

; 182  : 		C.StageEnd				();

	mov	ecx, ebp
	call	DWORD PTR __imp_?StageEnd@CBlender_Compile@@QAEXXZ

; 183  : 	}
; 184  : 	C.PassEnd			();

	mov	ecx, ebp
	call	esi
	pop	edi

; 68   : 				else			compile_3	(C);
; 69   : 				break;
; 70   : 			}
; 71   : 		}
; 72   : 	}
; 73   : }

	pop	esi
	pop	ebp
	pop	ebx
	pop	ecx
	ret	4
?Compile@CBlender_LaEmB@@UAEXAAVCBlender_Compile@@@Z ENDP ; CBlender_LaEmB::Compile
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\Blender_LaEmB.cpp
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_C$ = 8							; size = 4
?compile_ED@CBlender_LaEmB@@QAEXAAVCBlender_Compile@@@Z PROC ; CBlender_LaEmB::compile_ED
; _this$ = ecx

; 77   : {

	push	ecx
	push	ebp
	push	esi
	push	edi

; 78   : 	C.PassBegin		();

	mov	edi, DWORD PTR _C$[esp+12]
	mov	esi, ecx
	mov	ecx, edi
	mov	DWORD PTR _this$1$[esp+16], esi
	call	DWORD PTR __imp_?PassBegin@CBlender_Compile@@QAEXXZ

; 79   : 	{
; 80   : 		C.PassSET_ZB			(TRUE,TRUE);

	push	0
	push	1
	push	1
	mov	ecx, edi
	call	DWORD PTR __imp_?PassSET_ZB@CBlender_Compile@@QAEXHHH@Z

; 81   : 		C.PassSET_Blend_SET		();

	push	0
	push	0
	mov	ecx, edi
	call	DWORD PTR __imp_?PassSET_Blend_SET@CBlender_Compile@@QAEXHI@Z

; 82   : 		C.PassSET_LightFog		(TRUE,TRUE);

	push	1
	push	1
	mov	ecx, edi
	call	DWORD PTR __imp_?PassSET_LightFog@CBlender_Compile@@QAEXHH@Z

; 83   : 		
; 84   : 		// Stage1 - Env texture
; 85   : 		C.StageBegin			();

	mov	ecx, edi
	call	DWORD PTR __imp_?StageBegin@CBlender_Compile@@QAEXXZ

; 86   : 		C.StageSET_Color		(D3DTA_TEXTURE,	  D3DTOP_ADD,			D3DTA_DIFFUSE);

	mov	ebp, DWORD PTR __imp_?StageSET_Color@CBlender_Compile@@QAEXIII@Z
	mov	ecx, edi
	push	0
	push	7
	push	2
	call	ebp

; 87   : 		C.StageSET_Alpha		(D3DTA_TEXTURE,	  D3DTOP_ADD,			D3DTA_DIFFUSE);

	push	0
	push	7
	push	2
	mov	ecx, edi
	call	DWORD PTR __imp_?StageSET_Alpha@CBlender_Compile@@QAEXIII@Z

; 88   : 		C.StageSET_TMC			(oT2_Name, oT2_xform, "$null", 0);

	push	0
	push	OFFSET ??_C@_05CAGGJGBB@$null@
	lea	eax, DWORD PTR [esi+388]
	mov	ecx, edi
	mov	edi, DWORD PTR __imp_?StageSET_TMC@CBlender_Compile@@QAEXPBD00H@Z
	push	eax
	lea	eax, DWORD PTR [esi+324]
	push	eax
	call	edi

; 89   : 		C.StageEnd				();

	mov	ecx, DWORD PTR _C$[esp+12]
	mov	esi, DWORD PTR __imp_?StageEnd@CBlender_Compile@@QAEXXZ
	call	esi

; 90   : 		
; 91   : 		// Stage2 - Base texture
; 92   : 		C.StageBegin			();

	mov	ecx, DWORD PTR _C$[esp+12]
	call	DWORD PTR __imp_?StageBegin@CBlender_Compile@@QAEXXZ

; 93   : 		C.StageSET_Color		(D3DTA_TEXTURE,	  D3DTOP_MODULATE,		D3DTA_CURRENT);

	mov	ecx, DWORD PTR _C$[esp+12]
	push	1
	push	4
	push	2
	call	ebp

; 94   : 		C.StageSET_Alpha		(D3DTA_TEXTURE,	  D3DTOP_MODULATE,		D3DTA_CURRENT);

	mov	ebp, DWORD PTR _C$[esp+12]
	mov	ecx, ebp
	push	1
	push	4
	push	2
	call	DWORD PTR __imp_?StageSET_Alpha@CBlender_Compile@@QAEXIII@Z

; 95   : 		C.StageSET_TMC			(oT_Name, oT_xform, "$null", 0);

	mov	ecx, DWORD PTR _this$1$[esp+16]
	push	0
	push	OFFSET ??_C@_05CAGGJGBB@$null@
	lea	eax, DWORD PTR [ecx+260]
	push	eax
	lea	eax, DWORD PTR [ecx+196]
	mov	ecx, ebp
	push	eax
	call	edi

; 96   : 		C.StageEnd				();

	mov	ecx, ebp
	call	esi

; 97   : 	}
; 98   : 	C.PassEnd			();

	mov	ecx, ebp
	call	DWORD PTR __imp_?PassEnd@CBlender_Compile@@QAEXXZ
	pop	edi
	pop	esi
	pop	ebp

; 99   : }

	pop	ecx
	ret	4
?compile_ED@CBlender_LaEmB@@QAEXAAVCBlender_Compile@@@Z ENDP ; CBlender_LaEmB::compile_ED
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\Blender_LaEmB.cpp
; File I:\Vitalya\mine\NSProjectX\xrEngine\blenders\Blender_Recorder.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\Blender_LaEmB.cpp
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_C$ = 8							; size = 4
?compile_EDc@CBlender_LaEmB@@QAEXAAVCBlender_Compile@@@Z PROC ; CBlender_LaEmB::compile_EDc
; _this$ = ecx

; 103  : {

	push	ecx
	push	ebx
	push	ebp
	push	esi
	push	edi

; 104  : 	// Pass0 - (lmap+env*const)
; 105  : 	C.PassBegin		();

	mov	edi, DWORD PTR _C$[esp+16]
	mov	ebx, ecx
	mov	ecx, edi
	mov	DWORD PTR _this$1$[esp+20], ebx
	call	DWORD PTR __imp_?PassBegin@CBlender_Compile@@QAEXXZ

; 106  : 	{
; 107  : 		C.PassSET_ZB			(TRUE,TRUE);

	push	0
	push	1
	push	1
	mov	ecx, edi
	call	DWORD PTR __imp_?PassSET_ZB@CBlender_Compile@@QAEXHHH@Z

; 108  : 		C.PassSET_Blend_SET		();

	push	0
	push	0
	mov	ecx, edi
	call	DWORD PTR __imp_?PassSET_Blend_SET@CBlender_Compile@@QAEXHI@Z

; 109  : 		C.PassSET_LightFog		(TRUE,TRUE);

	push	1
	push	1
	mov	ecx, edi
	call	DWORD PTR __imp_?PassSET_LightFog@CBlender_Compile@@QAEXHH@Z

; 110  : 		
; 111  : 		// Stage1 - Env texture * constant
; 112  : 		C.StageBegin			();

	mov	ecx, edi
	call	DWORD PTR __imp_?StageBegin@CBlender_Compile@@QAEXXZ

; 113  : 		C.StageSET_Color		(D3DTA_TEXTURE,	  D3DTOP_MODULATE,		D3DTA_TFACTOR);

	mov	esi, DWORD PTR __imp_?StageSET_Color@CBlender_Compile@@QAEXIII@Z
	mov	ecx, edi
	push	3
	push	4
	push	2
	call	esi

; 114  : 		C.StageSET_Alpha		(D3DTA_TEXTURE,	  D3DTOP_MODULATE,		D3DTA_TFACTOR);

	mov	ebp, DWORD PTR __imp_?StageSET_Alpha@CBlender_Compile@@QAEXIII@Z
	mov	ecx, edi
	push	3
	push	4
	push	2
	call	ebp

; 115  : 		C.StageSET_TMC			(oT2_Name, oT2_xform, oT2_const, 0);

	push	0
	lea	eax, DWORD PTR [ebx+452]
	mov	ecx, edi
	push	eax
	lea	eax, DWORD PTR [ebx+388]
	push	eax
	lea	eax, DWORD PTR [ebx+324]
	mov	ebx, DWORD PTR __imp_?StageSET_TMC@CBlender_Compile@@QAEXPBD00H@Z
	push	eax
	call	ebx

; 116  : 		C.StageEnd				();

	mov	ecx, edi
	mov	edi, DWORD PTR __imp_?StageEnd@CBlender_Compile@@QAEXXZ
	call	edi

; 117  : 		
; 118  : 		// Stage2 - Diffuse color
; 119  : 		C.StageBegin			();

	mov	ecx, DWORD PTR _C$[esp+16]
	call	DWORD PTR __imp_?StageBegin@CBlender_Compile@@QAEXXZ

; 120  : 		C.StageSET_Color		(D3DTA_DIFFUSE,	  D3DTOP_ADD,			D3DTA_CURRENT);

	mov	ecx, DWORD PTR _C$[esp+16]
	push	1
	push	7
	push	0
	call	esi

; 121  : 		C.StageSET_Alpha		(D3DTA_DIFFUSE,	  D3DTOP_ADD,			D3DTA_CURRENT);

	mov	esi, DWORD PTR _C$[esp+16]
	mov	ecx, esi
	push	1
	push	7
	push	0
	call	ebp

; 122  : 		C.Stage_Texture			("$null");

	push	2
	push	2
	push	2
	push	1
	push	OFFSET ??_C@_05CAGGJGBB@$null@
	mov	ecx, esi
	call	DWORD PTR __imp_?Stage_Texture@CBlender_Compile@@QAEXPBDIIII@Z

; 123  : 		C.Stage_Matrix			("$null",0);

	push	0
	push	OFFSET ??_C@_05CAGGJGBB@$null@
	mov	ecx, esi
	call	DWORD PTR __imp_?Stage_Matrix@CBlender_Compile@@QAEXPBDH@Z

; 124  : 		C.Stage_Constant		("$null");

	push	OFFSET ??_C@_05CAGGJGBB@$null@
	mov	ecx, esi
	call	DWORD PTR __imp_?Stage_Constant@CBlender_Compile@@QAEXPBD@Z

; 125  : 		C.StageEnd				();

	mov	ecx, esi
	call	edi

; 126  : 	}
; 127  : 	C.PassEnd			();

	mov	ecx, esi
	mov	esi, DWORD PTR __imp_?PassEnd@CBlender_Compile@@QAEXXZ
	call	esi

; 128  : 	
; 129  : 	// Pass1 - *base
; 130  : 	C.PassBegin		();

	mov	ecx, DWORD PTR _C$[esp+16]
	call	DWORD PTR __imp_?PassBegin@CBlender_Compile@@QAEXXZ

; 131  : 	{
; 132  : 		C.PassSET_ZB			(TRUE,FALSE);

	mov	ecx, DWORD PTR _C$[esp+16]
	push	0
	push	0
	push	1
	call	DWORD PTR __imp_?PassSET_ZB@CBlender_Compile@@QAEXHHH@Z
; File I:\Vitalya\mine\NSProjectX\xrEngine\blenders\Blender_Recorder.h

; 63   : 	void				PassSET_Blend_MUL(BOOL bAref = FALSE, u32 ref = 0) { PassSET_Blend(TRUE, D3DBLEND_DESTCOLOR, D3DBLEND_ZERO, bAref, ref); }

	mov	ecx, DWORD PTR _C$[esp+16]
	push	0
	push	0
	push	1
	push	9
	push	1
	call	DWORD PTR __imp_?PassSET_Blend@CBlender_Compile@@QAEXHIIHI@Z
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\Blender_LaEmB.cpp

; 134  : 		C.PassSET_LightFog		(FALSE,TRUE);

	mov	ecx, DWORD PTR _C$[esp+16]
	push	1
	push	0
	call	DWORD PTR __imp_?PassSET_LightFog@CBlender_Compile@@QAEXHH@Z

; 135  : 		
; 136  : 		// Stage2 - Diffuse color
; 137  : 		C.StageBegin			();

	mov	ecx, DWORD PTR _C$[esp+16]
	call	DWORD PTR __imp_?StageBegin@CBlender_Compile@@QAEXXZ

; 138  : 		C.StageSET_Color		(D3DTA_TEXTURE,	  D3DTOP_SELECTARG1,	D3DTA_DIFFUSE);

	mov	ecx, DWORD PTR _C$[esp+16]
	push	0
	push	2
	push	2
	call	DWORD PTR __imp_?StageSET_Color@CBlender_Compile@@QAEXIII@Z

; 139  : 		C.StageSET_Alpha		(D3DTA_TEXTURE,	  D3DTOP_SELECTARG1,	D3DTA_DIFFUSE);

	mov	ecx, DWORD PTR _C$[esp+16]
	push	0
	push	2
	push	2
	call	ebp

; 140  : 		C.StageSET_TMC			(oT_Name, oT_xform, "$null",0);

	mov	ecx, DWORD PTR _this$1$[esp+20]
	mov	ebp, DWORD PTR _C$[esp+16]
	push	0
	push	OFFSET ??_C@_05CAGGJGBB@$null@
	lea	eax, DWORD PTR [ecx+260]
	push	eax
	lea	eax, DWORD PTR [ecx+196]
	mov	ecx, ebp
	push	eax
	call	ebx

; 141  : 		C.StageEnd				();

	mov	ecx, ebp
	call	edi

; 142  : 	}
; 143  : 	C.PassEnd			();

	mov	ecx, ebp
	call	esi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 144  : }

	pop	ecx
	ret	4
?compile_EDc@CBlender_LaEmB@@QAEXAAVCBlender_Compile@@@Z ENDP ; CBlender_LaEmB::compile_EDc
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\Blender_LaEmB.cpp
; File I:\Vitalya\mine\NSProjectX\xrEngine\blenders\Blender_Recorder.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\Blender_LaEmB.cpp
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_C$ = 8							; size = 4
?compile_2@CBlender_LaEmB@@QAEXAAVCBlender_Compile@@@Z PROC ; CBlender_LaEmB::compile_2
; _this$ = ecx

; 148  : {

	push	ecx
	push	ebx
	push	ebp

; 149  : 	// Pass1 - Lmap+Env
; 150  : 	C.PassBegin			();

	mov	ebp, DWORD PTR _C$[esp+8]
	push	esi
	push	edi
	mov	edi, ecx
	mov	ecx, ebp
	mov	DWORD PTR _this$1$[esp+20], edi
	call	DWORD PTR __imp_?PassBegin@CBlender_Compile@@QAEXXZ

; 151  : 	{
; 152  : 		C.PassSET_ZB			(TRUE,TRUE);

	push	0
	push	1
	push	1
	mov	ecx, ebp
	call	DWORD PTR __imp_?PassSET_ZB@CBlender_Compile@@QAEXHHH@Z

; 153  : 		C.PassSET_Blend_SET		();

	push	0
	push	0
	mov	ecx, ebp
	call	DWORD PTR __imp_?PassSET_Blend_SET@CBlender_Compile@@QAEXHI@Z

; 154  : 		C.PassSET_LightFog		(FALSE,TRUE);

	push	1
	push	0
	mov	ecx, ebp
	call	DWORD PTR __imp_?PassSET_LightFog@CBlender_Compile@@QAEXHH@Z

; 155  : 		
; 156  : 		// Stage0 - Lightmap
; 157  : 		C.StageBegin			();

	mov	ebx, DWORD PTR __imp_?StageBegin@CBlender_Compile@@QAEXXZ
	mov	ecx, ebp
	call	ebx

; 158  : 		C.StageTemplate_LMAP0	();

	mov	ecx, ebp
	call	DWORD PTR __imp_?StageTemplate_LMAP0@CBlender_Compile@@QAEXXZ

; 159  : 		C.StageEnd				();

	mov	esi, DWORD PTR __imp_?StageEnd@CBlender_Compile@@QAEXXZ
	mov	ecx, ebp
	call	esi

; 160  : 		
; 161  : 		// Stage1 - Environment map
; 162  : 		C.StageBegin			();

	mov	ecx, ebp
	call	ebx

; 163  : 		C.StageSET_Color		(D3DTA_TEXTURE,	  D3DTOP_ADD,			D3DTA_CURRENT);

	push	1
	push	7
	mov	ecx, ebp
	mov	ebp, DWORD PTR __imp_?StageSET_Color@CBlender_Compile@@QAEXIII@Z
	push	2
	call	ebp

; 164  : 		C.StageSET_Alpha		(D3DTA_TEXTURE,	  D3DTOP_ADD,			D3DTA_CURRENT);

	mov	ecx, DWORD PTR _C$[esp+16]
	mov	ebx, DWORD PTR __imp_?StageSET_Alpha@CBlender_Compile@@QAEXIII@Z
	push	1
	push	7
	push	2
	call	ebx

; 165  : 		C.StageSET_TMC			(oT2_Name, oT2_xform, "$null",0);

	mov	ecx, DWORD PTR _C$[esp+16]
	lea	eax, DWORD PTR [edi+388]
	push	0
	push	OFFSET ??_C@_05CAGGJGBB@$null@
	push	eax
	lea	eax, DWORD PTR [edi+324]
	mov	edi, DWORD PTR __imp_?StageSET_TMC@CBlender_Compile@@QAEXPBD00H@Z
	push	eax
	call	edi

; 166  : 		C.StageEnd				();

	mov	ecx, DWORD PTR _C$[esp+16]
	call	esi

; 167  : 	}
; 168  : 	C.PassEnd			();

	mov	ecx, DWORD PTR _C$[esp+16]
	mov	esi, DWORD PTR __imp_?PassEnd@CBlender_Compile@@QAEXXZ
	call	esi

; 169  : 	
; 170  : 	// Pass2 - Base map
; 171  : 	C.PassBegin		();

	mov	ecx, DWORD PTR _C$[esp+16]
	call	DWORD PTR __imp_?PassBegin@CBlender_Compile@@QAEXXZ

; 172  : 	{
; 173  : 		C.PassSET_ZB			(TRUE,FALSE);

	mov	ecx, DWORD PTR _C$[esp+16]
	push	0
	push	0
	push	1
	call	DWORD PTR __imp_?PassSET_ZB@CBlender_Compile@@QAEXHHH@Z
; File I:\Vitalya\mine\NSProjectX\xrEngine\blenders\Blender_Recorder.h

; 64   : 	void				PassSET_Blend_MUL2X(BOOL bAref = FALSE, u32 ref = 0) { PassSET_Blend(TRUE, D3DBLEND_DESTCOLOR, D3DBLEND_SRCCOLOR, bAref, ref); }

	mov	ecx, DWORD PTR _C$[esp+16]
	push	0
	push	0
	push	3
	push	9
	push	1
	call	DWORD PTR __imp_?PassSET_Blend@CBlender_Compile@@QAEXHIIHI@Z
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\Blender_LaEmB.cpp

; 175  : 		C.PassSET_LightFog		(FALSE,TRUE);

	mov	ecx, DWORD PTR _C$[esp+16]
	push	1
	push	0
	call	DWORD PTR __imp_?PassSET_LightFog@CBlender_Compile@@QAEXHH@Z

; 176  : 		
; 177  : 		// Stage0 - Base
; 178  : 		C.StageBegin			();

	mov	ecx, DWORD PTR _C$[esp+16]
	call	DWORD PTR __imp_?StageBegin@CBlender_Compile@@QAEXXZ

; 179  : 		C.StageSET_Color		(D3DTA_TEXTURE,	  D3DTOP_SELECTARG1,	D3DTA_DIFFUSE);

	push	0
	push	2
	push	2
	mov	ecx, DWORD PTR _C$[esp+28]
	call	ebp

; 180  : 		C.StageSET_Alpha		(D3DTA_TEXTURE,	  D3DTOP_SELECTARG1,	D3DTA_DIFFUSE);

	mov	ebp, DWORD PTR _C$[esp+16]
	mov	ecx, ebp
	push	0
	push	2
	push	2
	call	ebx

; 181  : 		C.StageSET_TMC			(oT_Name, oT_xform, "$null",0);

	mov	ecx, DWORD PTR _this$1$[esp+20]
	push	0
	push	OFFSET ??_C@_05CAGGJGBB@$null@
	lea	eax, DWORD PTR [ecx+260]
	push	eax
	lea	eax, DWORD PTR [ecx+196]
	mov	ecx, ebp
	push	eax
	call	edi

; 182  : 		C.StageEnd				();

	mov	ecx, ebp
	call	DWORD PTR __imp_?StageEnd@CBlender_Compile@@QAEXXZ

; 183  : 	}
; 184  : 	C.PassEnd			();

	mov	ecx, ebp
	call	esi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 185  : }

	pop	ecx
	ret	4
?compile_2@CBlender_LaEmB@@QAEXAAVCBlender_Compile@@@Z ENDP ; CBlender_LaEmB::compile_2
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\Blender_LaEmB.cpp
; File I:\Vitalya\mine\NSProjectX\xrEngine\blenders\Blender_Recorder.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\Blender_LaEmB.cpp
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_C$ = 8							; size = 4
?compile_2c@CBlender_LaEmB@@QAEXAAVCBlender_Compile@@@Z PROC ; CBlender_LaEmB::compile_2c
; _this$ = ecx

; 188  : {

	push	ecx
	push	ebx
	push	ebp
	push	esi
	push	edi

; 189  : 	C.PassBegin		();

	mov	edi, DWORD PTR _C$[esp+16]
	mov	ebx, ecx
	mov	ecx, edi
	mov	DWORD PTR _this$1$[esp+20], ebx
	call	DWORD PTR __imp_?PassBegin@CBlender_Compile@@QAEXXZ

; 190  : 	{	
; 191  : 		C.PassSET_ZB			(TRUE,TRUE);

	push	0
	push	1
	push	1
	mov	ecx, edi
	call	DWORD PTR __imp_?PassSET_ZB@CBlender_Compile@@QAEXHHH@Z

; 192  : 		C.PassSET_Blend_SET		();

	push	0
	push	0
	mov	ecx, edi
	call	DWORD PTR __imp_?PassSET_Blend_SET@CBlender_Compile@@QAEXHI@Z

; 193  : 		C.PassSET_LightFog		(FALSE,TRUE);

	push	1
	push	0
	mov	ecx, edi
	call	DWORD PTR __imp_?PassSET_LightFog@CBlender_Compile@@QAEXHH@Z

; 194  : 		
; 195  : 		// Stage0 - Environment map [*] const
; 196  : 		C.StageBegin			();

	mov	ecx, edi
	call	DWORD PTR __imp_?StageBegin@CBlender_Compile@@QAEXXZ

; 197  : 		C.StageSET_Color		(D3DTA_TEXTURE,	  D3DTOP_MODULATE,		D3DTA_TFACTOR);

	mov	esi, DWORD PTR __imp_?StageSET_Color@CBlender_Compile@@QAEXIII@Z
	mov	ecx, edi
	push	3
	push	4
	push	2
	call	esi

; 198  : 		C.StageSET_Alpha		(D3DTA_TEXTURE,	  D3DTOP_MODULATE,		D3DTA_TFACTOR);

	mov	ebp, DWORD PTR __imp_?StageSET_Alpha@CBlender_Compile@@QAEXIII@Z
	mov	ecx, edi
	push	3
	push	4
	push	2
	call	ebp

; 199  : 		C.StageSET_TMC			(oT2_Name,oT2_xform,oT2_const,0);

	push	0
	lea	eax, DWORD PTR [ebx+452]
	mov	ecx, edi
	push	eax
	lea	eax, DWORD PTR [ebx+388]
	push	eax
	lea	eax, DWORD PTR [ebx+324]
	mov	ebx, DWORD PTR __imp_?StageSET_TMC@CBlender_Compile@@QAEXPBD00H@Z
	push	eax
	call	ebx

; 200  : 		C.StageEnd				();

	mov	ecx, edi
	mov	edi, DWORD PTR __imp_?StageEnd@CBlender_Compile@@QAEXXZ
	call	edi

; 201  : 
; 202  : 		// Stage1 - [+] Lightmap
; 203  : 		C.StageBegin			();

	mov	ecx, DWORD PTR _C$[esp+16]
	call	DWORD PTR __imp_?StageBegin@CBlender_Compile@@QAEXXZ

; 204  : 		C.StageSET_Color		(D3DTA_TEXTURE,	  D3DTOP_ADD,			D3DTA_CURRENT);

	mov	ecx, DWORD PTR _C$[esp+16]
	push	1
	push	7
	push	2
	call	esi

; 205  : 		C.StageSET_Alpha		(D3DTA_TEXTURE,	  D3DTOP_ADD,			D3DTA_CURRENT);

	mov	esi, DWORD PTR _C$[esp+16]
	mov	ecx, esi
	push	1
	push	7
	push	2
	call	ebp

; 206  : 		C.StageSET_TMC			("$base1","$null","$null",1);

	push	1
	push	OFFSET ??_C@_05CAGGJGBB@$null@
	push	OFFSET ??_C@_05CAGGJGBB@$null@
	push	OFFSET ??_C@_06EJMEMMKJ@$base1@
	mov	ecx, esi
	call	ebx

; 207  : 		C.StageEnd				();

	mov	ecx, esi
	call	edi

; 208  : 	}
; 209  : 	C.PassEnd			();

	mov	ecx, esi
	mov	esi, DWORD PTR __imp_?PassEnd@CBlender_Compile@@QAEXXZ
	call	esi

; 210  : 	
; 211  : 	// Pass2 - Base map
; 212  : 	C.PassBegin		();

	mov	ecx, DWORD PTR _C$[esp+16]
	call	DWORD PTR __imp_?PassBegin@CBlender_Compile@@QAEXXZ

; 213  : 	{
; 214  : 		C.PassSET_ZB			(TRUE,FALSE);

	mov	ecx, DWORD PTR _C$[esp+16]
	push	0
	push	0
	push	1
	call	DWORD PTR __imp_?PassSET_ZB@CBlender_Compile@@QAEXHHH@Z
; File I:\Vitalya\mine\NSProjectX\xrEngine\blenders\Blender_Recorder.h

; 64   : 	void				PassSET_Blend_MUL2X(BOOL bAref = FALSE, u32 ref = 0) { PassSET_Blend(TRUE, D3DBLEND_DESTCOLOR, D3DBLEND_SRCCOLOR, bAref, ref); }

	push	0
	mov	ecx, DWORD PTR _C$[esp+20]
	push	0
	push	3
	push	9
	push	1
	call	DWORD PTR __imp_?PassSET_Blend@CBlender_Compile@@QAEXHIIHI@Z
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\Blender_LaEmB.cpp

; 216  : 		C.PassSET_LightFog		(FALSE,TRUE);

	mov	ecx, DWORD PTR _C$[esp+16]
	push	1
	push	0
	call	DWORD PTR __imp_?PassSET_LightFog@CBlender_Compile@@QAEXHH@Z

; 217  : 		
; 218  : 		// Stage0 - Detail
; 219  : 		C.StageBegin			();

	mov	ecx, DWORD PTR _C$[esp+16]
	call	DWORD PTR __imp_?StageBegin@CBlender_Compile@@QAEXXZ

; 220  : 		C.StageSET_Color		(D3DTA_TEXTURE,	  D3DTOP_SELECTARG1,	D3DTA_DIFFUSE);

	mov	ecx, DWORD PTR _C$[esp+16]
	push	0
	push	2
	push	2
	call	DWORD PTR __imp_?StageSET_Color@CBlender_Compile@@QAEXIII@Z

; 221  : 		C.StageSET_Alpha		(D3DTA_TEXTURE,	  D3DTOP_SELECTARG1,	D3DTA_DIFFUSE);

	mov	ecx, DWORD PTR _C$[esp+16]
	push	0
	push	2
	push	2
	call	ebp

; 222  : 		C.StageSET_TMC			(oT_Name, oT_xform, "$null",0);

	mov	ecx, DWORD PTR _this$1$[esp+20]
	mov	ebp, DWORD PTR _C$[esp+16]
	push	0
	push	OFFSET ??_C@_05CAGGJGBB@$null@
	lea	eax, DWORD PTR [ecx+260]
	push	eax
	lea	eax, DWORD PTR [ecx+196]
	mov	ecx, ebp
	push	eax
	call	ebx

; 223  : 		C.StageEnd				();

	mov	ecx, ebp
	call	edi

; 224  : 	}
; 225  : 	C.PassEnd			();

	mov	ecx, ebp
	call	esi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 226  : }

	pop	ecx
	ret	4
?compile_2c@CBlender_LaEmB@@QAEXAAVCBlender_Compile@@@Z ENDP ; CBlender_LaEmB::compile_2c
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\Blender_LaEmB.cpp
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_C$ = 8							; size = 4
?compile_3@CBlender_LaEmB@@QAEXAAVCBlender_Compile@@@Z PROC ; CBlender_LaEmB::compile_3
; _this$ = ecx

; 230  : {

	push	ecx
	push	ebp
	push	esi
	push	edi

; 231  : 	C.PassBegin		();

	mov	edi, DWORD PTR _C$[esp+12]
	mov	esi, ecx
	mov	ecx, edi
	mov	DWORD PTR _this$1$[esp+16], esi
	call	DWORD PTR __imp_?PassBegin@CBlender_Compile@@QAEXXZ

; 232  : 	{
; 233  : 		C.PassSET_ZB			(TRUE,TRUE);

	push	0
	push	1
	push	1
	mov	ecx, edi
	call	DWORD PTR __imp_?PassSET_ZB@CBlender_Compile@@QAEXHHH@Z

; 234  : 		C.PassSET_Blend_SET		();

	push	0
	push	0
	mov	ecx, edi
	call	DWORD PTR __imp_?PassSET_Blend_SET@CBlender_Compile@@QAEXHI@Z

; 235  : 		C.PassSET_LightFog		(FALSE,TRUE);

	push	1
	push	0
	mov	ecx, edi
	call	DWORD PTR __imp_?PassSET_LightFog@CBlender_Compile@@QAEXHH@Z

; 236  : 		
; 237  : 		// Stage0 - [=] Lightmap
; 238  : 		C.StageBegin			();

	mov	ebp, DWORD PTR __imp_?StageBegin@CBlender_Compile@@QAEXXZ
	mov	ecx, edi
	call	ebp

; 239  : 		C.StageTemplate_LMAP0	();

	mov	ecx, edi
	call	DWORD PTR __imp_?StageTemplate_LMAP0@CBlender_Compile@@QAEXXZ

; 240  : 		C.StageEnd				();

	mov	ecx, edi
	call	DWORD PTR __imp_?StageEnd@CBlender_Compile@@QAEXXZ

; 241  : 		
; 242  : 		// Stage1 - [+] Env-map
; 243  : 		C.StageBegin			();

	mov	ecx, edi
	call	ebp

; 244  : 		C.StageSET_Color		(D3DTA_TEXTURE,	  D3DTOP_ADD,			D3DTA_CURRENT);

	push	1
	push	7
	push	2
	mov	ecx, edi
	call	DWORD PTR __imp_?StageSET_Color@CBlender_Compile@@QAEXIII@Z

; 245  : 		C.StageSET_Alpha		(D3DTA_TEXTURE,	  D3DTOP_ADD,			D3DTA_CURRENT);

	push	1
	push	7
	mov	ecx, edi
	mov	edi, DWORD PTR __imp_?StageSET_Alpha@CBlender_Compile@@QAEXIII@Z
	push	2
	call	edi

; 246  : 		C.StageSET_TMC			(oT2_Name,oT2_xform,"$null",0);

	mov	ecx, DWORD PTR _C$[esp+12]
	lea	eax, DWORD PTR [esi+388]
	push	0
	push	OFFSET ??_C@_05CAGGJGBB@$null@
	push	eax
	lea	eax, DWORD PTR [esi+324]
	mov	esi, DWORD PTR __imp_?StageSET_TMC@CBlender_Compile@@QAEXPBD00H@Z
	push	eax
	call	esi

; 247  : 		C.StageEnd				();

	mov	ecx, DWORD PTR _C$[esp+12]
	call	DWORD PTR __imp_?StageEnd@CBlender_Compile@@QAEXXZ

; 248  : 		
; 249  : 		// Stage2 - [*] Base
; 250  : 		C.StageBegin			();

	mov	ecx, DWORD PTR _C$[esp+12]
	call	ebp

; 251  : 		C.StageSET_Color		(D3DTA_TEXTURE,	  D3DTOP_MODULATE2X,	D3DTA_CURRENT);

	mov	ebp, DWORD PTR _C$[esp+12]
	mov	ecx, ebp
	push	1
	push	5
	push	2
	call	DWORD PTR __imp_?StageSET_Color@CBlender_Compile@@QAEXIII@Z

; 252  : 		C.StageSET_Alpha		(D3DTA_TEXTURE,	  D3DTOP_MODULATE2X,	D3DTA_CURRENT);

	push	1
	push	5
	push	2
	mov	ecx, ebp
	call	edi

; 253  : 		C.StageSET_TMC			(oT_Name,oT_xform,"$null",0);

	mov	ecx, DWORD PTR _this$1$[esp+16]
	push	0
	push	OFFSET ??_C@_05CAGGJGBB@$null@
	lea	eax, DWORD PTR [ecx+260]
	push	eax
	lea	eax, DWORD PTR [ecx+196]
	mov	ecx, ebp
	push	eax
	call	esi

; 254  : 		C.StageEnd			();

	mov	ecx, ebp
	call	DWORD PTR __imp_?StageEnd@CBlender_Compile@@QAEXXZ

; 255  : 	}
; 256  : 	C.PassEnd			();

	mov	ecx, ebp
	call	DWORD PTR __imp_?PassEnd@CBlender_Compile@@QAEXXZ
	pop	edi
	pop	esi
	pop	ebp

; 257  : }

	pop	ecx
	ret	4
?compile_3@CBlender_LaEmB@@QAEXAAVCBlender_Compile@@@Z ENDP ; CBlender_LaEmB::compile_3
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\Blender_LaEmB.cpp
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_C$ = 8							; size = 4
?compile_3c@CBlender_LaEmB@@QAEXAAVCBlender_Compile@@@Z PROC ; CBlender_LaEmB::compile_3c
; _this$ = ecx

; 261  : {

	push	ecx
	push	ebx
	push	ebp
	push	esi
	push	edi

; 262  : 	C.PassBegin		();

	mov	edi, DWORD PTR _C$[esp+16]
	mov	esi, ecx
	mov	ecx, edi
	mov	DWORD PTR _this$1$[esp+20], esi
	call	DWORD PTR __imp_?PassBegin@CBlender_Compile@@QAEXXZ

; 263  : 	{
; 264  : 		C.PassSET_ZB			(TRUE,TRUE);

	push	0
	push	1
	push	1
	mov	ecx, edi
	call	DWORD PTR __imp_?PassSET_ZB@CBlender_Compile@@QAEXHHH@Z

; 265  : 		C.PassSET_Blend_SET		();

	push	0
	push	0
	mov	ecx, edi
	call	DWORD PTR __imp_?PassSET_Blend_SET@CBlender_Compile@@QAEXHI@Z

; 266  : 		C.PassSET_LightFog		(FALSE,TRUE);

	push	1
	push	0
	mov	ecx, edi
	call	DWORD PTR __imp_?PassSET_LightFog@CBlender_Compile@@QAEXHH@Z

; 267  : 		
; 268  : 		// Stage1 - [=] Env-map [*] const
; 269  : 		C.StageBegin			();

	mov	ecx, edi
	call	DWORD PTR __imp_?StageBegin@CBlender_Compile@@QAEXXZ

; 270  : 		C.StageSET_Color		(D3DTA_TEXTURE,	  D3DTOP_MODULATE,		D3DTA_TFACTOR);

	mov	ebp, DWORD PTR __imp_?StageSET_Color@CBlender_Compile@@QAEXIII@Z
	mov	ecx, edi
	push	3
	push	4
	push	2
	call	ebp

; 271  : 		C.StageSET_Alpha		(D3DTA_TEXTURE,	  D3DTOP_MODULATE,		D3DTA_TFACTOR);

	mov	ebx, DWORD PTR __imp_?StageSET_Alpha@CBlender_Compile@@QAEXIII@Z
	mov	ecx, edi
	push	3
	push	4
	push	2
	call	ebx

; 272  : 		C.StageSET_TMC			(oT2_Name,oT2_xform,oT2_const,0);

	push	0
	lea	eax, DWORD PTR [esi+452]
	mov	ecx, edi
	mov	edi, DWORD PTR __imp_?StageSET_TMC@CBlender_Compile@@QAEXPBD00H@Z
	push	eax
	lea	eax, DWORD PTR [esi+388]
	push	eax
	lea	eax, DWORD PTR [esi+324]
	push	eax
	call	edi

; 273  : 		C.StageEnd				();

	mov	ecx, DWORD PTR _C$[esp+16]
	mov	esi, DWORD PTR __imp_?StageEnd@CBlender_Compile@@QAEXXZ
	call	esi

; 274  : 		
; 275  : 		// Stage0 - [+] Lightmap
; 276  : 		C.StageBegin			();

	mov	ecx, DWORD PTR _C$[esp+16]
	call	DWORD PTR __imp_?StageBegin@CBlender_Compile@@QAEXXZ

; 277  : 		C.StageSET_Color		(D3DTA_TEXTURE,	  D3DTOP_ADD,			D3DTA_CURRENT);

	mov	ecx, DWORD PTR _C$[esp+16]
	push	1
	push	7
	push	2
	call	ebp

; 278  : 		C.StageSET_Alpha		(D3DTA_TEXTURE,	  D3DTOP_ADD,			D3DTA_CURRENT);

	mov	ecx, DWORD PTR _C$[esp+16]
	push	1
	push	7
	push	2
	call	ebx

; 279  : 		C.StageSET_TMC			("$base1","$null","$null",1);

	mov	ecx, DWORD PTR _C$[esp+16]
	push	1
	push	OFFSET ??_C@_05CAGGJGBB@$null@
	push	OFFSET ??_C@_05CAGGJGBB@$null@
	push	OFFSET ??_C@_06EJMEMMKJ@$base1@
	call	edi

; 280  : 		C.StageEnd				();

	mov	ecx, DWORD PTR _C$[esp+16]
	call	esi

; 281  : 		
; 282  : 		// Stage2 - [*] Base
; 283  : 		C.StageBegin			();

	mov	ecx, DWORD PTR _C$[esp+16]
	call	DWORD PTR __imp_?StageBegin@CBlender_Compile@@QAEXXZ

; 284  : 		C.StageSET_Color		(D3DTA_TEXTURE,	  D3DTOP_MODULATE2X,	D3DTA_CURRENT);

	mov	ecx, DWORD PTR _C$[esp+16]
	push	1
	push	5
	push	2
	call	ebp

; 285  : 		C.StageSET_Alpha		(D3DTA_TEXTURE,	  D3DTOP_MODULATE2X,	D3DTA_CURRENT);

	mov	ebp, DWORD PTR _C$[esp+16]
	mov	ecx, ebp
	push	1
	push	5
	push	2
	call	ebx

; 286  : 		C.StageSET_TMC			(oT_Name,oT_xform,"$null",0);

	mov	ecx, DWORD PTR _this$1$[esp+20]
	push	0
	push	OFFSET ??_C@_05CAGGJGBB@$null@
	lea	eax, DWORD PTR [ecx+260]
	push	eax
	lea	eax, DWORD PTR [ecx+196]
	mov	ecx, ebp
	push	eax
	call	edi

; 287  : 		C.StageEnd				();

	mov	ecx, ebp
	call	esi

; 288  : 	}
; 289  : 	C.PassEnd			();

	mov	ecx, ebp
	call	DWORD PTR __imp_?PassEnd@CBlender_Compile@@QAEXXZ
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 290  : }

	pop	ecx
	ret	4
?compile_3c@CBlender_LaEmB@@QAEXAAVCBlender_Compile@@@Z ENDP ; CBlender_LaEmB::compile_3c
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\Blender_LaEmB.cpp
_TEXT	SEGMENT
_C$ = 8							; size = 4
?compile_L@CBlender_LaEmB@@QAEXAAVCBlender_Compile@@@Z PROC ; CBlender_LaEmB::compile_L
; _this$ = ecx

; 294  : {

	push	ebx
	push	ebp

; 295  : 	// Pass1 - Lmap+Env
; 296  : 	C.PassBegin			();

	mov	ebp, DWORD PTR _C$[esp+4]
	mov	ebx, ecx
	mov	ecx, ebp
	call	DWORD PTR __imp_?PassBegin@CBlender_Compile@@QAEXXZ

; 297  : 	{
; 298  : 		C.PassSET_ZB			(TRUE,TRUE);

	push	0
	push	1
	push	1
	mov	ecx, ebp
	call	DWORD PTR __imp_?PassSET_ZB@CBlender_Compile@@QAEXHHH@Z

; 299  : 		C.PassSET_Blend_SET		();

	push	0
	push	0
	mov	ecx, ebp
	call	DWORD PTR __imp_?PassSET_Blend_SET@CBlender_Compile@@QAEXHI@Z

; 300  : 		C.PassSET_LightFog		(FALSE,FALSE);

	push	0
	push	0
	mov	ecx, ebp
	call	DWORD PTR __imp_?PassSET_LightFog@CBlender_Compile@@QAEXHH@Z

; 301  : 		
; 302  : 		// Stage0 - Lightmap
; 303  : 		C.StageBegin			();

	mov	ecx, ebp
	call	DWORD PTR __imp_?StageBegin@CBlender_Compile@@QAEXXZ

; 304  : 		C.StageTemplate_LMAP0	();

	mov	ecx, ebp
	call	DWORD PTR __imp_?StageTemplate_LMAP0@CBlender_Compile@@QAEXXZ

; 305  : 		C.StageEnd				();

	mov	ecx, ebp
	call	DWORD PTR __imp_?StageEnd@CBlender_Compile@@QAEXXZ

; 306  : 		
; 307  : 		// Stage1 - Environment map
; 308  : 		C.StageBegin			();

	mov	ecx, ebp
	call	DWORD PTR __imp_?StageBegin@CBlender_Compile@@QAEXXZ

; 309  : 		C.StageSET_Color		(D3DTA_TEXTURE,	  D3DTOP_ADD,			D3DTA_CURRENT);

	push	1
	push	7
	push	2
	mov	ecx, ebp
	call	DWORD PTR __imp_?StageSET_Color@CBlender_Compile@@QAEXIII@Z

; 310  : 		C.StageSET_Alpha		(D3DTA_TEXTURE,	  D3DTOP_ADD,			D3DTA_CURRENT);

	push	1
	push	7
	push	2
	mov	ecx, ebp
	call	DWORD PTR __imp_?StageSET_Alpha@CBlender_Compile@@QAEXIII@Z

; 311  : 		C.StageSET_TMC			(oT2_Name, oT2_xform, "$null",0);

	push	0
	push	OFFSET ??_C@_05CAGGJGBB@$null@
	lea	eax, DWORD PTR [ebx+388]
	mov	ecx, ebp
	push	eax
	lea	eax, DWORD PTR [ebx+324]
	push	eax
	call	DWORD PTR __imp_?StageSET_TMC@CBlender_Compile@@QAEXPBD00H@Z

; 312  : 		C.StageEnd				();

	mov	ecx, ebp
	call	DWORD PTR __imp_?StageEnd@CBlender_Compile@@QAEXXZ

; 313  : 	}
; 314  : 	C.PassEnd			();

	mov	ecx, ebp
	call	DWORD PTR __imp_?PassEnd@CBlender_Compile@@QAEXXZ
	pop	ebp
	pop	ebx

; 315  : }

	ret	4
?compile_L@CBlender_LaEmB@@QAEXAAVCBlender_Compile@@@Z ENDP ; CBlender_LaEmB::compile_L
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRenderPC_R1\Blender_LaEmB.cpp
_TEXT	SEGMENT
_C$ = 8							; size = 4
?compile_Lc@CBlender_LaEmB@@QAEXAAVCBlender_Compile@@@Z PROC ; CBlender_LaEmB::compile_Lc
; _this$ = ecx

; 318  : {

	push	ebp
	push	esi
	push	edi

; 319  : 	C.PassBegin		();

	mov	edi, DWORD PTR _C$[esp+8]
	mov	esi, ecx
	mov	ecx, edi
	call	DWORD PTR __imp_?PassBegin@CBlender_Compile@@QAEXXZ

; 320  : 	{	
; 321  : 		C.PassSET_ZB			(TRUE,TRUE);

	push	0
	push	1
	push	1
	mov	ecx, edi
	call	DWORD PTR __imp_?PassSET_ZB@CBlender_Compile@@QAEXHHH@Z

; 322  : 		C.PassSET_Blend_SET		();

	push	0
	push	0
	mov	ecx, edi
	call	DWORD PTR __imp_?PassSET_Blend_SET@CBlender_Compile@@QAEXHI@Z

; 323  : 		C.PassSET_LightFog		(FALSE,FALSE);

	push	0
	push	0
	mov	ecx, edi
	call	DWORD PTR __imp_?PassSET_LightFog@CBlender_Compile@@QAEXHH@Z

; 324  : 		
; 325  : 		// Stage0 - Environment map [*] const
; 326  : 		C.StageBegin			();

	mov	ecx, edi
	call	DWORD PTR __imp_?StageBegin@CBlender_Compile@@QAEXXZ

; 327  : 		C.StageSET_Color		(D3DTA_TEXTURE,	  D3DTOP_MODULATE,		D3DTA_TFACTOR);

	mov	ebp, DWORD PTR __imp_?StageSET_Color@CBlender_Compile@@QAEXIII@Z
	mov	ecx, edi
	push	3
	push	4
	push	2
	call	ebp

; 328  : 		C.StageSET_Alpha		(D3DTA_TEXTURE,	  D3DTOP_MODULATE,		D3DTA_TFACTOR);

	push	3
	push	4
	push	2
	mov	ecx, edi
	call	DWORD PTR __imp_?StageSET_Alpha@CBlender_Compile@@QAEXIII@Z

; 329  : 		C.StageSET_TMC			(oT2_Name,oT2_xform,oT2_const,0);

	push	0
	lea	eax, DWORD PTR [esi+452]
	mov	ecx, edi
	mov	edi, DWORD PTR __imp_?StageSET_TMC@CBlender_Compile@@QAEXPBD00H@Z
	push	eax
	lea	eax, DWORD PTR [esi+388]
	push	eax
	lea	eax, DWORD PTR [esi+324]
	push	eax
	call	edi

; 330  : 		C.StageEnd				();

	mov	ecx, DWORD PTR _C$[esp+8]
	mov	esi, DWORD PTR __imp_?StageEnd@CBlender_Compile@@QAEXXZ
	call	esi

; 331  : 		
; 332  : 		// Stage1 - [+] Lightmap
; 333  : 		C.StageBegin			();

	mov	ecx, DWORD PTR _C$[esp+8]
	call	DWORD PTR __imp_?StageBegin@CBlender_Compile@@QAEXXZ

; 334  : 		C.StageSET_Color		(D3DTA_TEXTURE,	  D3DTOP_ADD,			D3DTA_CURRENT);

	mov	ecx, DWORD PTR _C$[esp+8]
	push	1
	push	7
	push	2
	call	ebp

; 335  : 		C.StageSET_Alpha		(D3DTA_TEXTURE,	  D3DTOP_ADD,			D3DTA_CURRENT);

	mov	ebp, DWORD PTR _C$[esp+8]
	mov	ecx, ebp
	push	1
	push	7
	push	2
	call	DWORD PTR __imp_?StageSET_Alpha@CBlender_Compile@@QAEXIII@Z

; 336  : 		C.StageSET_TMC			("$base1","$null","$null",1);

	push	1
	push	OFFSET ??_C@_05CAGGJGBB@$null@
	push	OFFSET ??_C@_05CAGGJGBB@$null@
	push	OFFSET ??_C@_06EJMEMMKJ@$base1@
	mov	ecx, ebp
	call	edi

; 337  : 		C.StageEnd				();

	mov	ecx, ebp
	call	esi

; 338  : 	}
; 339  : 	C.PassEnd			();

	mov	ecx, ebp
	call	DWORD PTR __imp_?PassEnd@CBlender_Compile@@QAEXXZ
	pop	edi
	pop	esi
	pop	ebp

; 340  : }

	ret	4
?compile_Lc@CBlender_LaEmB@@QAEXAAVCBlender_Compile@@@Z ENDP ; CBlender_LaEmB::compile_Lc
_TEXT	ENDS
END
