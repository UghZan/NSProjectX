; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30146.0 

	TITLE	i:\vitalya\mine\nsprojectx\nspx_build\intermediate\release-win32\xrrender_r1\blender_tree.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BE@LJGNNENL@LEVEL?3?5trees?1bushes@	; `string'
PUBLIC	??_C@_0L@IAKBEDEA@Object?5LOD@			; `string'
PUBLIC	??_C@_0BE@MJBCMNLM@CBlender_Tree?3?3Load@	; `string'
PUBLIC	??_C@_0DM@LDFFPPCP@I?3?2Vitalya?2mine?2NSProjectX?2laye@ ; `string'
PUBLIC	??_C@_06CIGMEMH@tree_s@				; `string'
PUBLIC	??_C@_04FPJBBKHA@vert@				; `string'
PUBLIC	??_C@_09KIEOHEGC@tree_s_dt@			; `string'
PUBLIC	??_C@_07PEDHPBPM@vert_dt@			; `string'
PUBLIC	??_C@_09FNMONCKC@tree_w_dt@			; `string'
PUBLIC	??_C@_06GGOKABMD@tree_w@			; `string'
PUBLIC	??_C@_0N@FBCHMLMM@tree_s_point@			; `string'
PUBLIC	??_C@_0N@NFGNMFDG@tree_w_point@			; `string'
PUBLIC	??_C@_0M@FFNJPIGE@tree_s_spot@			; `string'
PUBLIC	??_C@_0M@KBJGNMHH@tree_w_spot@			; `string'
PUBLIC	??_R2CBlender_Tree@@8				; CBlender_Tree::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CBlender_Tree@@8			; CBlender_Tree::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3CBlender_Tree@@8				; CBlender_Tree::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AVCBlender_Tree@@@8			; CBlender_Tree `RTTI Type Descriptor'
PUBLIC	??_R4CBlender_Tree@@6B@				; CBlender_Tree::`RTTI Complete Object Locator'
PUBLIC	??_7CBlender_Tree@@6B@				; CBlender_Tree::`vftable'
;	COMDAT ?ignore_always@?P@??Load@CBlender_Tree@@UAEXAAVIReader@@G@Z@4_NA
_BSS	SEGMENT
?ignore_always@?P@??Load@CBlender_Tree@@UAEXAAVIReader@@G@Z@4_NA DB 01H DUP (?) ; `CBlender_Tree::Load'::`15'::ignore_always
_BSS	ENDS
;	COMDAT ?ignore_always@?4??Load@CBlender_Tree@@UAEXAAVIReader@@G@Z@4_NA
_BSS	SEGMENT
?ignore_always@?4??Load@CBlender_Tree@@UAEXAAVIReader@@G@Z@4_NA DB 01H DUP (?) ; `CBlender_Tree::Load'::`5'::ignore_always
_BSS	ENDS
;	COMDAT ??_7CBlender_Tree@@6B@
CONST	SEGMENT
??_7CBlender_Tree@@6B@ DD FLAT:??_R4CBlender_Tree@@6B@	; CBlender_Tree::`vftable'
	DD	FLAT:?getName@IBlender@@UAEPBDXZ
	DD	FLAT:?getComment@CBlender_Tree@@UAEPBDXZ
	DD	FLAT:?Save@CBlender_Tree@@UAEXAAVIWriter@@@Z
	DD	FLAT:?Load@CBlender_Tree@@UAEXAAVIReader@@G@Z
	DD	FLAT:?canBeDetailed@CBlender_Tree@@UAEHXZ
	DD	FLAT:?canBeLMAPped@CBlender_Tree@@UAEHXZ
	DD	FLAT:?Compile@CBlender_Tree@@UAEXAAVCBlender_Compile@@@Z
	DD	FLAT:??_ECBlender_Tree@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R4CBlender_Tree@@6B@
rdata$r	SEGMENT
??_R4CBlender_Tree@@6B@ DD 00H				; CBlender_Tree::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCBlender_Tree@@@8
	DD	FLAT:??_R3CBlender_Tree@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCBlender_Tree@@@8
data$rs	SEGMENT
??_R0?AVCBlender_Tree@@@8 DD FLAT:??_7type_info@@6B@	; CBlender_Tree `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCBlender_Tree@@', 00H
data$rs	ENDS
;	COMDAT ??_R3CBlender_Tree@@8
rdata$r	SEGMENT
??_R3CBlender_Tree@@8 DD 00H				; CBlender_Tree::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CBlender_Tree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CBlender_Tree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CBlender_Tree@@8 DD FLAT:??_R0?AVCBlender_Tree@@@8 ; CBlender_Tree::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CBlender_Tree@@8
rdata$r	ENDS
;	COMDAT ??_R2CBlender_Tree@@8
rdata$r	SEGMENT
??_R2CBlender_Tree@@8 DD FLAT:??_R1A@?0A@EA@CBlender_Tree@@8 ; CBlender_Tree::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IBlender@@8
	DD	FLAT:??_R1A@?0A@EA@CPropertyBase@@8
rdata$r	ENDS
;	COMDAT ??_C@_0M@KBJGNMHH@tree_w_spot@
CONST	SEGMENT
??_C@_0M@KBJGNMHH@tree_w_spot@ DB 'tree_w_spot', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FFNJPIGE@tree_s_spot@
CONST	SEGMENT
??_C@_0M@FFNJPIGE@tree_s_spot@ DB 'tree_s_spot', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NFGNMFDG@tree_w_point@
CONST	SEGMENT
??_C@_0N@NFGNMFDG@tree_w_point@ DB 'tree_w_point', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@FBCHMLMM@tree_s_point@
CONST	SEGMENT
??_C@_0N@FBCHMLMM@tree_s_point@ DB 'tree_s_point', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06GGOKABMD@tree_w@
CONST	SEGMENT
??_C@_06GGOKABMD@tree_w@ DB 'tree_w', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09FNMONCKC@tree_w_dt@
CONST	SEGMENT
??_C@_09FNMONCKC@tree_w_dt@ DB 'tree_w_dt', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07PEDHPBPM@vert_dt@
CONST	SEGMENT
??_C@_07PEDHPBPM@vert_dt@ DB 'vert_dt', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09KIEOHEGC@tree_s_dt@
CONST	SEGMENT
??_C@_09KIEOHEGC@tree_s_dt@ DB 'tree_s_dt', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FPJBBKHA@vert@
CONST	SEGMENT
??_C@_04FPJBBKHA@vert@ DB 'vert', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06CIGMEMH@tree_s@
CONST	SEGMENT
??_C@_06CIGMEMH@tree_s@ DB 'tree_s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@LDFFPPCP@I?3?2Vitalya?2mine?2NSProjectX?2laye@
CONST	SEGMENT
??_C@_0DM@LDFFPPCP@I?3?2Vitalya?2mine?2NSProjectX?2laye@ DB 'I:\Vitalya\m'
	DB	'ine\NSProjectX\layers\xrRender\Blender_tree.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@MJBCMNLM@CBlender_Tree?3?3Load@
CONST	SEGMENT
??_C@_0BE@MJBCMNLM@CBlender_Tree?3?3Load@ DB 'CBlender_Tree::Load', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@IAKBEDEA@Object?5LOD@
CONST	SEGMENT
??_C@_0L@IAKBEDEA@Object?5LOD@ DB 'Object LOD', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LJGNNENL@LEVEL?3?5trees?1bushes@
CONST	SEGMENT
??_C@_0BE@LJGNNENL@LEVEL?3?5trees?1bushes@ DB 'LEVEL: trees/bushes', 00H ; `string'
PUBLIC	?Compile@CBlender_Tree@@UAEXAAVCBlender_Compile@@@Z ; CBlender_Tree::Compile
PUBLIC	?Load@CBlender_Tree@@UAEXAAVIReader@@G@Z	; CBlender_Tree::Load
PUBLIC	?Save@CBlender_Tree@@UAEXAAVIWriter@@@Z		; CBlender_Tree::Save
PUBLIC	??1CBlender_Tree@@UAE@XZ			; CBlender_Tree::~CBlender_Tree
PUBLIC	??_GCBlender_Tree@@UAEPAXI@Z			; CBlender_Tree::`scalar deleting destructor'
PUBLIC	??0CBlender_Tree@@QAE@XZ			; CBlender_Tree::CBlender_Tree
PUBLIC	?canBeDetailed@CBlender_Tree@@UAEHXZ		; CBlender_Tree::canBeDetailed
PUBLIC	?canBeLMAPped@CBlender_Tree@@UAEHXZ		; CBlender_Tree::canBeLMAPped
PUBLIC	?getComment@CBlender_Tree@@UAEPBDXZ		; CBlender_Tree::getComment
EXTRN	??_ECBlender_Tree@@UAEPAXI@Z:PROC		; CBlender_Tree::`vector deleting destructor'
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\Blender_tree.h
;	COMDAT ?getComment@CBlender_Tree@@UAEPBDXZ
_TEXT	SEGMENT
?getComment@CBlender_Tree@@UAEPBDXZ PROC		; CBlender_Tree::getComment, COMDAT
; _this$ = ecx

; 15   : 	virtual		LPCSTR		getComment()	{ return "LEVEL: trees/bushes";	}

	mov	eax, OFFSET ??_C@_0BE@LJGNNENL@LEVEL?3?5trees?1bushes@
	ret	0
?getComment@CBlender_Tree@@UAEPBDXZ ENDP		; CBlender_Tree::getComment
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\Blender_tree.h
;	COMDAT ?canBeLMAPped@CBlender_Tree@@UAEHXZ
_TEXT	SEGMENT
?canBeLMAPped@CBlender_Tree@@UAEHXZ PROC		; CBlender_Tree::canBeLMAPped, COMDAT
; _this$ = ecx

; 16   : 	virtual		BOOL		canBeLMAPped()	{ return FALSE; }

	xor	eax, eax
	ret	0
?canBeLMAPped@CBlender_Tree@@UAEHXZ ENDP		; CBlender_Tree::canBeLMAPped
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\Blender_tree.h
;	COMDAT ?canBeDetailed@CBlender_Tree@@UAEHXZ
_TEXT	SEGMENT
?canBeDetailed@CBlender_Tree@@UAEHXZ PROC		; CBlender_Tree::canBeDetailed, COMDAT
; _this$ = ecx

; 17   : 	virtual		BOOL		canBeDetailed()	{ return TRUE; }

	mov	eax, 1
	ret	0
?canBeDetailed@CBlender_Tree@@UAEHXZ ENDP		; CBlender_Tree::canBeDetailed
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\Blender_tree.cpp
_TEXT	SEGMENT
??0CBlender_Tree@@QAE@XZ PROC				; CBlender_Tree::CBlender_Tree
; _this$ = ecx

; 15   : {

	push	esi
	mov	esi, ecx
	call	DWORD PTR __imp_??0IBlender@@QAE@XZ

; 16   : 	description.CLS		= B_TREE;
; 17   : 	description.version	= 1;

	mov	eax, 1
	mov	DWORD PTR [esi], OFFSET ??_7CBlender_Tree@@6B@
	mov	WORD PTR [esi+176], ax

; 18   : 	oBlend.value		= FALSE;
; 19   : 	oNotAnTree.value	= FALSE;
; 20   : }

	mov	eax, esi
	mov	DWORD PTR [esi+4], 1162158112		; 45452020H
	mov	DWORD PTR [esi+8], 1147098194		; 445f5452H
	mov	DWORD PTR [esi+324], 0
	mov	DWORD PTR [esi+328], 0
	pop	esi
	ret	0
??0CBlender_Tree@@QAE@XZ ENDP				; CBlender_Tree::CBlender_Tree
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\Blender_tree.cpp
;	COMDAT ??_GCBlender_Tree@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCBlender_Tree@@UAEPAXI@Z PROC			; CBlender_Tree::`scalar deleting destructor', COMDAT
; _this$ = ecx

; 23   : {

	push	esi
	mov	esi, ecx
	mov	DWORD PTR [esi], OFFSET ??_7CBlender_Tree@@6B@

; 24   : 
; 25   : }

	call	DWORD PTR __imp_??1IBlender@@UAE@XZ
	test	BYTE PTR ___flags$[esp], 1
	je	SHORT $LN6@scalar
	push	332					; 0000014cH
	push	esi
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN6@scalar:
	mov	eax, esi
	pop	esi
	ret	4
??_GCBlender_Tree@@UAEPAXI@Z ENDP			; CBlender_Tree::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\Blender_tree.cpp
_TEXT	SEGMENT
??1CBlender_Tree@@UAE@XZ PROC				; CBlender_Tree::~CBlender_Tree
; _this$ = ecx

; 23   : {

	mov	DWORD PTR [ecx], OFFSET ??_7CBlender_Tree@@6B@

; 24   : 
; 25   : }

	jmp	DWORD PTR __imp_??1IBlender@@UAE@XZ
??1CBlender_Tree@@UAE@XZ ENDP				; CBlender_Tree::~CBlender_Tree
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\Blender_tree.cpp
; File I:\Vitalya\mine\NSProjectX\xrEngine\properties.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\Blender_tree.cpp
; File I:\Vitalya\mine\NSProjectX\xrEngine\properties.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\Blender_tree.cpp
; File I:\Vitalya\mine\NSProjectX\xrEngine\properties.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\Blender_tree.cpp
_TEXT	SEGMENT
_fs$ = 8						; size = 4
?Save@CBlender_Tree@@UAEXAAVIWriter@@@Z PROC		; CBlender_Tree::Save
; _this$ = ecx

; 28   : {

	push	ebx
	push	esi

; 29   : 	IBlender::Save		(fs);

	mov	esi, DWORD PTR _fs$[esp+4]
	push	edi
	push	esi
	mov	edi, ecx
	call	DWORD PTR __imp_?Save@IBlender@@UAEXAAVIWriter@@@Z
; File I:\Vitalya\mine\NSProjectX\xrEngine\properties.h

; 101  : 	fs.w_u32(ID);

	push	6
	mov	ecx, esi
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\Blender_tree.cpp

; 30   : 	xrPWRITE_PROP		(fs,"Alpha-blend",	xrPID_BOOL,		oBlend);

	lea	ebx, DWORD PTR [edi+324]
; File I:\Vitalya\mine\NSProjectX\xrEngine\properties.h

; 101  : 	fs.w_u32(ID);

	call	DWORD PTR __imp_?w_u32@IWriter@@QAEXI@Z

; 102  : 	fs.w_stringZ(name);

	push	OFFSET ??_C@_0M@IACFODAI@Alpha?9blend@
	mov	ecx, esi
	call	DWORD PTR __imp_?w_stringZ@IWriter@@QAEXPBD@Z

; 103  : 	if (data && size)	fs.w(data, size);

	test	ebx, ebx
	je	SHORT $LN4@Save
	mov	eax, DWORD PTR [esi]
	mov	ecx, esi
	push	4
	push	ebx
	call	DWORD PTR [eax+12]
$LN4@Save:

; 101  : 	fs.w_u32(ID);

	push	6
	mov	ecx, esi
	call	DWORD PTR __imp_?w_u32@IWriter@@QAEXI@Z

; 102  : 	fs.w_stringZ(name);

	push	OFFSET ??_C@_0L@IAKBEDEA@Object?5LOD@
	mov	ecx, esi
	call	DWORD PTR __imp_?w_stringZ@IWriter@@QAEXPBD@Z
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\Blender_tree.cpp

; 31   : 	xrPWRITE_PROP		(fs,"Object LOD",	xrPID_BOOL,		oNotAnTree);

	add	edi, 328				; 00000148H
; File I:\Vitalya\mine\NSProjectX\xrEngine\properties.h

; 103  : 	if (data && size)	fs.w(data, size);

	je	SHORT $LN7@Save
	mov	eax, DWORD PTR [esi]
	mov	ecx, esi
	push	4
	push	edi
	call	DWORD PTR [eax+12]
$LN7@Save:
	pop	edi
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\Blender_tree.cpp

; 32   : }

	pop	esi
	pop	ebx
	ret	4
?Save@CBlender_Tree@@UAEXAAVIWriter@@@Z ENDP		; CBlender_Tree::Save
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\Blender_tree.cpp
; File I:\Vitalya\mine\NSProjectX\xrEngine\properties.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\Blender_tree.cpp
; File I:\Vitalya\mine\NSProjectX\xrEngine\properties.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\Blender_tree.cpp
_TEXT	SEGMENT
_fs$ = 8						; size = 4
_version$ = 12						; size = 2
?Load@CBlender_Tree@@UAEXAAVIReader@@G@Z PROC		; CBlender_Tree::Load
; _this$ = ecx

; 35   : {

	push	ebx
	push	esi
	push	edi

; 36   : 	IBlender::Load		(fs,version);

	push	DWORD PTR _version$[esp+8]
	mov	edi, DWORD PTR _fs$[esp+12]
	mov	ebx, ecx
	push	edi
	call	DWORD PTR __imp_?Load@IBlender@@UAEXAAVIReader@@G@Z

; 37   : 	xrPREAD_PROP		(fs,xrPID_BOOL,		oBlend);

	cmp	BYTE PTR ?ignore_always@?4??Load@CBlender_Tree@@UAEXAAVIReader@@G@Z@4_NA, 0
	jne	SHORT $LN2@Load
; File I:\Vitalya\mine\NSProjectX\xrEngine\properties.h

; 118  : 	u32 T = fs.r_u32();

	mov	ecx, edi
	call	DWORD PTR __imp_?r_u32@?$IReaderBase@VIReader@@@@QAEIXZ

; 119  : 	fs.skip_stringZ();

	mov	ecx, edi
	mov	esi, eax
	call	DWORD PTR __imp_?skip_stringZ@IReader@@QAEXXZ
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\Blender_tree.cpp

; 37   : 	xrPREAD_PROP		(fs,xrPID_BOOL,		oBlend);

	cmp	esi, 6
	je	SHORT $LN2@Load
	mov	ecx, DWORD PTR __imp_?Debug@@3VxrDebug@@A
	push	OFFSET ?ignore_always@?4??Load@CBlender_Tree@@UAEXAAVIReader@@G@Z@4_NA
	push	OFFSET ??_C@_0BE@MJBCMNLM@CBlender_Tree?3?3Load@
	push	37					; 00000025H
	push	OFFSET ??_C@_0DM@LDFFPPCP@I?3?2Vitalya?2mine?2NSProjectX?2laye@
	push	OFFSET ??_C@_0BI@FFCKKNMB@xrPID_BOOL?$DN?$DNxrPREAD?$CIfs?$CJ@
	call	DWORD PTR __imp_?fail@xrDebug@@QAEXPBD0H0AA_N@Z
$LN2@Load:
	push	4
	lea	eax, DWORD PTR [ebx+324]
	mov	ecx, edi
	push	eax
	call	DWORD PTR __imp_?r@IReader@@QAEXPAXH@Z

; 38   : 	if (version>=1)		{

	cmp	WORD PTR _version$[esp+8], 1
	jb	SHORT $LN41@Load

; 39   : 		xrPREAD_PROP		(fs,xrPID_BOOL,		oNotAnTree);

	cmp	BYTE PTR ?ignore_always@?P@??Load@CBlender_Tree@@UAEXAAVIReader@@G@Z@4_NA, 0
	jne	SHORT $LN7@Load
; File I:\Vitalya\mine\NSProjectX\xrEngine\properties.h

; 118  : 	u32 T = fs.r_u32();

	mov	ecx, edi
	call	DWORD PTR __imp_?r_u32@?$IReaderBase@VIReader@@@@QAEIXZ

; 119  : 	fs.skip_stringZ();

	mov	ecx, edi
	mov	esi, eax
	call	DWORD PTR __imp_?skip_stringZ@IReader@@QAEXXZ
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\Blender_tree.cpp

; 39   : 		xrPREAD_PROP		(fs,xrPID_BOOL,		oNotAnTree);

	cmp	esi, 6
	je	SHORT $LN7@Load
	mov	ecx, DWORD PTR __imp_?Debug@@3VxrDebug@@A
	push	OFFSET ?ignore_always@?P@??Load@CBlender_Tree@@UAEXAAVIReader@@G@Z@4_NA
	push	OFFSET ??_C@_0BE@MJBCMNLM@CBlender_Tree?3?3Load@
	push	39					; 00000027H
	push	OFFSET ??_C@_0DM@LDFFPPCP@I?3?2Vitalya?2mine?2NSProjectX?2laye@
	push	OFFSET ??_C@_0BI@FFCKKNMB@xrPID_BOOL?$DN?$DNxrPREAD?$CIfs?$CJ@
	call	DWORD PTR __imp_?fail@xrDebug@@QAEXPBD0H0AA_N@Z
$LN7@Load:
	push	4
	lea	eax, DWORD PTR [ebx+328]
	mov	ecx, edi
	push	eax
	call	DWORD PTR __imp_?r@IReader@@QAEXPAXH@Z
$LN41@Load:

; 40   : 	}
; 41   : }

	pop	edi
	pop	esi
	pop	ebx
	ret	8
?Load@CBlender_Tree@@UAEXAAVIReader@@G@Z ENDP		; CBlender_Tree::Load
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\Blender_tree.cpp
_TEXT	SEGMENT
_C$ = 8							; size = 4
?Compile@CBlender_Tree@@UAEXAAVCBlender_Compile@@@Z PROC ; CBlender_Tree::Compile
; _this$ = ecx

; 48   : {

	push	ebx
	push	ebp
	push	esi
	push	edi

; 49   : 	IBlender::Compile	(C);

	mov	edi, DWORD PTR _C$[esp+12]
	mov	esi, ecx
	push	edi
	call	DWORD PTR __imp_?Compile@IBlender@@UAEXAAVCBlender_Compile@@@Z

; 50   : 	
; 51   : 	if (C.bEditor)

	cmp	DWORD PTR [edi+44], 0
	je	$LN4@Compile

; 52   : 	{
; 53   : 		C.PassBegin		();

	mov	ecx, edi
	call	DWORD PTR __imp_?PassBegin@CBlender_Compile@@QAEXXZ

; 54   : 		{
; 55   : 			C.PassSET_ZB		(TRUE,TRUE);

	push	0
	push	1
	push	1
	mov	ecx, edi
	call	DWORD PTR __imp_?PassSET_ZB@CBlender_Compile@@QAEXHHH@Z

; 56   : 			if (oBlend.value)	C.PassSET_Blend_BLEND	(TRUE, 200);

	cmp	DWORD PTR [esi+324], 0
	mov	ecx, edi
	push	200					; 000000c8H
	push	1
	je	SHORT $LN6@Compile
	call	DWORD PTR __imp_?PassSET_Blend_BLEND@CBlender_Compile@@QAEXHI@Z
	jmp	SHORT $LN7@Compile
$LN6@Compile:

; 57   : 			else				C.PassSET_Blend_SET		(TRUE, 200);

	call	DWORD PTR __imp_?PassSET_Blend_SET@CBlender_Compile@@QAEXHI@Z
$LN7@Compile:

; 58   : 			C.PassSET_LightFog	(TRUE,TRUE);

	push	1
	push	1
	mov	ecx, edi
	call	DWORD PTR __imp_?PassSET_LightFog@CBlender_Compile@@QAEXHH@Z

; 59   : 			
; 60   : 			// Stage1 - Base texture
; 61   : 			C.StageBegin		();

	mov	ecx, edi
	call	DWORD PTR __imp_?StageBegin@CBlender_Compile@@QAEXXZ

; 62   : 			C.StageSET_Color	(D3DTA_TEXTURE,	  D3DTOP_MODULATE,	D3DTA_DIFFUSE);

	push	0
	push	4
	push	2
	mov	ecx, edi
	call	DWORD PTR __imp_?StageSET_Color@CBlender_Compile@@QAEXIII@Z

; 63   : 			C.StageSET_Alpha	(D3DTA_TEXTURE,	  D3DTOP_MODULATE,	D3DTA_DIFFUSE);

	push	0
	push	4
	push	2
	mov	ecx, edi
	call	DWORD PTR __imp_?StageSET_Alpha@CBlender_Compile@@QAEXIII@Z

; 64   : 			C.StageSET_TMC		(oT_Name,"$null","$null",0);

	push	0
	push	OFFSET ??_C@_05CAGGJGBB@$null@
	push	OFFSET ??_C@_05CAGGJGBB@$null@
	lea	eax, DWORD PTR [esi+196]
	mov	ecx, edi
	push	eax
	call	DWORD PTR __imp_?StageSET_TMC@CBlender_Compile@@QAEXPBD00H@Z

; 65   : 			C.StageEnd			();

	mov	ecx, edi
	call	DWORD PTR __imp_?StageEnd@CBlender_Compile@@QAEXXZ

; 66   : 		}
; 67   : 		C.PassEnd			();

	mov	ecx, edi
	call	DWORD PTR __imp_?PassEnd@CBlender_Compile@@QAEXXZ

; 121  : 			C.r_End			();
; 122  : 			break;
; 123  : 		case SE_R1_LMODELS:
; 124  : 			/*	Don't use lighting from flora - strange visual results
; 125  : 			//	Lighting only
; 126  : 			C.r_Pass		("tree_wave","vert_l",FALSE);
; 127  : 			C.r_Sampler		("s_base",C.L_textures[0]);
; 128  : 			C.r_End			();
; 129  : 			*/
; 130  : 			break;
; 131  : 		}
; 132  : 	}
; 133  : }

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	ret	4
$LN4@Compile:

; 68   : 	} else {
; 69   : 		u32							tree_aref		= 200;
; 70   : 		if (oNotAnTree.value)		tree_aref		= 0;

	mov	ecx, DWORD PTR [esi+328]

; 71   : 
; 72   : 		switch (C.iElement)

	xor	eax, eax
	test	ecx, ecx
	mov	edx, 200				; 000000c8H
	cmove	eax, edx
	mov	edx, DWORD PTR [edi+60]
	cmp	edx, 3
	ja	$LN26@Compile
	jmp	DWORD PTR $LN130@Compile[edx*4]
$LN9@Compile:

; 73   : 		{
; 74   : 		case SE_R1_NORMAL_HQ:
; 75   : 			if (oNotAnTree.value)	{

	mov	ebx, DWORD PTR [edi+52]
	push	eax
	push	1
	test	ecx, ecx
	je	$LN10@Compile

; 76   : 				// Level view
; 77   : 				LPCSTR tsv	= "tree_s", tsp="vert";
; 78   : 				if (C.bDetail_Diffuse)	{ tsv="tree_s_dt"; tsp="vert_dt";}
; 79   : 				if (oBlend.value)	C.r_Pass	(tsv,	tsp,	TRUE,TRUE,TRUE,TRUE,D3DBLEND_SRCALPHA,	D3DBLEND_INVSRCALPHA,	TRUE,tree_aref);

	test	ebx, ebx
	mov	edx, OFFSET ??_C@_07PEDHPBPM@vert_dt@
	mov	ecx, OFFSET ??_C@_04FPJBBKHA@vert@
	mov	ebp, OFFSET ??_C@_09KIEOHEGC@tree_s_dt@
	cmovne	ecx, edx
	mov	edx, OFFSET ??_C@_06CIGMEMH@tree_s@
	cmovne	edx, ebp
	cmp	DWORD PTR [esi+324], 0
	je	SHORT $LN13@Compile
	push	6
	push	5
	jmp	SHORT $LN131@Compile
$LN13@Compile:

; 80   : 				else				C.r_Pass	(tsv,	tsp,	TRUE,TRUE,TRUE,TRUE,D3DBLEND_ONE,		D3DBLEND_ZERO,			TRUE,tree_aref);

	push	1
	push	2
$LN131@Compile:

; 81   : 				C.r_Sampler			("s_base",	C.L_textures[0]);

	push	1
	push	1
	push	1
	push	1
	push	ecx
	push	edx
	mov	ecx, edi
$LN137@Compile:

; 121  : 			C.r_End			();
; 122  : 			break;
; 123  : 		case SE_R1_LMODELS:
; 124  : 			/*	Don't use lighting from flora - strange visual results
; 125  : 			//	Lighting only
; 126  : 			C.r_Pass		("tree_wave","vert_l",FALSE);
; 127  : 			C.r_Sampler		("s_base",C.L_textures[0]);
; 128  : 			C.r_End			();
; 129  : 			*/
; 130  : 			break;
; 131  : 		}
; 132  : 	}
; 133  : }

	call	DWORD PTR __imp_?r_Pass@CBlender_Compile@@QAEXPBD0_NHHHW4_D3DBLEND@@2HI@Z
	push	2
	push	2
	push	2
	push	1
	push	0
	push	ecx
	mov	ecx, esp
	push	DWORD PTR [edi]
	call	??0shared_str@@QAE@ABV0@@Z		; shared_str::shared_str
	push	OFFSET ??_C@_06GMJOKNLF@s_base@
	mov	ecx, edi
	call	DWORD PTR __imp_?r_Sampler@CBlender_Compile@@QAEIPBDVshared_str@@_NIIII@Z
	push	2
	push	2
	push	2
	push	1
	push	0
	push	DWORD PTR [edi+36]
	mov	ecx, edi
	push	OFFSET ??_C@_08HKJIABFJ@s_detail@
	call	DWORD PTR __imp_?r_Sampler@CBlender_Compile@@QAEIPBD0_NIIII@Z
	mov	ecx, edi
	call	DWORD PTR __imp_?r_End@CBlender_Compile@@QAEXXZ
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	ret	4
$LN10@Compile:

; 82   : 				C.r_Sampler			("s_detail",C.detail_texture);
; 83   : 				C.r_End				();
; 84   : 			} else {
; 85   : 				// Level view
; 86   : 				if (C.bDetail_Diffuse)

	mov	ecx, DWORD PTR [esi+324]
	test	ebx, ebx
	je	SHORT $LN15@Compile

; 87   : 				{
; 88   : 					if (oBlend.value)	C.r_Pass	("tree_w_dt","vert_dt",	TRUE,TRUE,TRUE,TRUE,D3DBLEND_SRCALPHA,	D3DBLEND_INVSRCALPHA,	TRUE,tree_aref);

	test	ecx, ecx
	mov	ecx, edi
	je	SHORT $LN17@Compile
	push	6
	push	5
	jmp	SHORT $LN133@Compile
$LN17@Compile:

; 89   : 					else				C.r_Pass	("tree_w_dt","vert_dt",	TRUE,TRUE,TRUE,TRUE,D3DBLEND_ONE,		D3DBLEND_ZERO,			TRUE,tree_aref);

	push	1
	push	2
$LN133@Compile:

; 90   : 					C.r_Sampler			("s_base",	C.L_textures[0]);

	push	1
	push	1
	push	1
	push	1
	push	OFFSET ??_C@_07PEDHPBPM@vert_dt@
	push	OFFSET ??_C@_09FNMONCKC@tree_w_dt@

; 91   : 					C.r_Sampler			("s_detail",C.detail_texture);
; 92   : 					C.r_End				();
; 93   : 				} else {

	jmp	SHORT $LN137@Compile
$LN15@Compile:

; 94   : 					if (oBlend.value)	C.r_Pass	("tree_w",	"vert",		TRUE,TRUE,TRUE,TRUE,D3DBLEND_SRCALPHA,	D3DBLEND_INVSRCALPHA,	TRUE,tree_aref);

	test	ecx, ecx
	mov	ecx, edi
	je	SHORT $LN19@Compile
	push	6
	push	5
	jmp	SHORT $LN134@Compile
$LN19@Compile:

; 95   : 					else				C.r_Pass	("tree_w",	"vert",		TRUE,TRUE,TRUE,TRUE,D3DBLEND_ONE,		D3DBLEND_ZERO,			TRUE,tree_aref);

	push	1
	push	2
$LN134@Compile:

; 96   : 					C.r_Sampler			("s_base",	C.L_textures[0]);

	push	1
	push	1
	push	1
	push	1
	push	OFFSET ??_C@_04FPJBBKHA@vert@
	push	OFFSET ??_C@_06GGOKABMD@tree_w@

; 97   : 					C.r_Sampler			("s_detail",C.detail_texture);
; 98   : 					C.r_End				();
; 99   : 				}
; 100  : 			}
; 101  : 			break;

	jmp	$LN137@Compile
$LN21@Compile:

; 102  : 		case SE_R1_NORMAL_LQ:
; 103  : 			// Level view
; 104  : 			if (oBlend.value)	C.r_Pass	("tree_s",	"vert",		TRUE,TRUE,TRUE,TRUE,D3DBLEND_SRCALPHA,	D3DBLEND_INVSRCALPHA,	TRUE,tree_aref);

	cmp	DWORD PTR [esi+324], 0
	mov	ecx, edi
	push	eax
	push	1
	je	SHORT $LN22@Compile
	push	6
	push	5
	jmp	SHORT $LN135@Compile
$LN22@Compile:

; 105  : 			else				C.r_Pass	("tree_s",	"vert",		TRUE,TRUE,TRUE,TRUE,D3DBLEND_ONE,		D3DBLEND_ZERO,			TRUE,tree_aref);

	push	1
	push	2
$LN135@Compile:

; 106  : 			C.r_Sampler			("s_base",	C.L_textures[0]);

	push	1
	push	1
	push	1
	push	1
	push	OFFSET ??_C@_04FPJBBKHA@vert@
	push	OFFSET ??_C@_06CIGMEMH@tree_s@
	call	DWORD PTR __imp_?r_Pass@CBlender_Compile@@QAEXPBD0_NHHHW4_D3DBLEND@@2HI@Z
	push	2
	push	2
	push	2
	push	1
	push	0
	push	ecx
	mov	ecx, esp
	push	DWORD PTR [edi]
	call	??0shared_str@@QAE@ABV0@@Z		; shared_str::shared_str
	push	OFFSET ??_C@_06GMJOKNLF@s_base@
	mov	ecx, edi
	call	DWORD PTR __imp_?r_Sampler@CBlender_Compile@@QAEIPBDVshared_str@@_NIIII@Z

; 121  : 			C.r_End			();
; 122  : 			break;
; 123  : 		case SE_R1_LMODELS:
; 124  : 			/*	Don't use lighting from flora - strange visual results
; 125  : 			//	Lighting only
; 126  : 			C.r_Pass		("tree_wave","vert_l",FALSE);
; 127  : 			C.r_Sampler		("s_base",C.L_textures[0]);
; 128  : 			C.r_End			();
; 129  : 			*/
; 130  : 			break;
; 131  : 		}
; 132  : 	}
; 133  : }

	mov	ecx, edi
	call	DWORD PTR __imp_?r_End@CBlender_Compile@@QAEXXZ
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	ret	4
$LN24@Compile:

; 107  : 			C.r_End				();
; 108  : 			break;
; 109  : 		case SE_R1_LPOINT:
; 110  : 			C.r_Pass		((oNotAnTree.value)?"tree_s_point":"tree_w_point",	"add_point",FALSE,TRUE,FALSE,TRUE,D3DBLEND_ONE,D3DBLEND_ONE,TRUE,0);

	push	0
	push	1
	push	2
	push	2
	push	1
	push	0
	push	1
	test	ecx, ecx
	mov	edx, OFFSET ??_C@_0N@NFGNMFDG@tree_w_point@
	push	0
	mov	eax, OFFSET ??_C@_0N@FBCHMLMM@tree_s_point@
	mov	ecx, edi
	push	OFFSET ??_C@_09PNJHBAHM@add_point@
	cmove	eax, edx
	push	eax
	call	DWORD PTR __imp_?r_Pass@CBlender_Compile@@QAEXPBD0_NHHHW4_D3DBLEND@@2HI@Z

; 111  : 			C.r_Sampler		("s_base",	C.L_textures[0]);

	push	2
	push	2
	push	2
	push	1
	push	0
	push	ecx
	mov	ecx, esp
	push	DWORD PTR [edi]
	call	??0shared_str@@QAE@ABV0@@Z		; shared_str::shared_str
	push	OFFSET ??_C@_06GMJOKNLF@s_base@
	mov	ecx, edi
	call	DWORD PTR __imp_?r_Sampler@CBlender_Compile@@QAEIPBDVshared_str@@_NIIII@Z

; 112  : 			C.r_Sampler_clf	("s_lmap",	TEX_POINT_ATT	);

	mov	esi, DWORD PTR __imp_?r_Sampler_clf@CBlender_Compile@@QAEXPBD0_N@Z
	mov	ecx, edi
	push	0
	push	OFFSET ??_C@_0CB@JJPBGPCM@internal?2internal_light_attpoin@
	push	OFFSET ??_C@_06LBGPDNGG@s_lmap@
	call	esi

; 113  : 			C.r_Sampler_clf	("s_att",	TEX_POINT_ATT	);

	push	0
	push	OFFSET ??_C@_0CB@JJPBGPCM@internal?2internal_light_attpoin@

; 114  : 			C.r_End			();
; 115  : 			break;

	jmp	SHORT $LN136@Compile
$LN25@Compile:

; 116  : 		case SE_R1_LSPOT:
; 117  : 			C.r_Pass		((oNotAnTree.value)?"tree_s_spot":"tree_w_spot",	"add_spot",	FALSE,TRUE,FALSE,TRUE,D3DBLEND_ONE,D3DBLEND_ONE,TRUE,0);

	push	0
	push	1
	push	2
	push	2
	push	1
	push	0
	push	1
	test	ecx, ecx
	mov	edx, OFFSET ??_C@_0M@KBJGNMHH@tree_w_spot@
	push	0
	mov	eax, OFFSET ??_C@_0M@FFNJPIGE@tree_s_spot@
	mov	ecx, edi
	push	OFFSET ??_C@_08FJPLAIEP@add_spot@
	cmove	eax, edx
	push	eax
	call	DWORD PTR __imp_?r_Pass@CBlender_Compile@@QAEXPBD0_NHHHW4_D3DBLEND@@2HI@Z

; 118  : 			C.r_Sampler		("s_base",	C.L_textures[0]);

	push	2
	push	2
	push	2
	push	1
	push	0
	push	ecx
	mov	ecx, esp
	push	DWORD PTR [edi]
	call	??0shared_str@@QAE@ABV0@@Z		; shared_str::shared_str
	push	OFFSET ??_C@_06GMJOKNLF@s_base@
	mov	ecx, edi
	call	DWORD PTR __imp_?r_Sampler@CBlender_Compile@@QAEIPBDVshared_str@@_NIIII@Z

; 119  : 			C.r_Sampler_clf	("s_lmap",	"internal\\internal_light_att",		true);

	mov	esi, DWORD PTR __imp_?r_Sampler_clf@CBlender_Compile@@QAEXPBD0_N@Z
	mov	ecx, edi
	push	1
	push	OFFSET ??_C@_0BM@EOCKFCCB@internal?2internal_light_att@
	push	OFFSET ??_C@_06LBGPDNGG@s_lmap@
	call	esi

; 120  : 			C.r_Sampler_clf	("s_att",	TEX_SPOT_ATT	);

	push	0
	push	OFFSET ??_C@_0CA@EOOCFOEF@internal?2internal_light_attclip@
$LN136@Compile:

; 121  : 			C.r_End			();
; 122  : 			break;
; 123  : 		case SE_R1_LMODELS:
; 124  : 			/*	Don't use lighting from flora - strange visual results
; 125  : 			//	Lighting only
; 126  : 			C.r_Pass		("tree_wave","vert_l",FALSE);
; 127  : 			C.r_Sampler		("s_base",C.L_textures[0]);
; 128  : 			C.r_End			();
; 129  : 			*/
; 130  : 			break;
; 131  : 		}
; 132  : 	}
; 133  : }

	push	OFFSET ??_C@_05OCPJJFDB@s_att@
	mov	ecx, edi
	call	esi
	mov	ecx, edi
	call	DWORD PTR __imp_?r_End@CBlender_Compile@@QAEXXZ
$LN26@Compile:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	ret	4
	npad	2
$LN130@Compile:
	DD	$LN9@Compile
	DD	$LN21@Compile
	DD	$LN24@Compile
	DD	$LN25@Compile
?Compile@CBlender_Tree@@UAEXAAVCBlender_Compile@@@Z ENDP ; CBlender_Tree::Compile
_TEXT	ENDS
END
