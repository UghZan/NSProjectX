; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30146.0 

	TITLE	i:\vitalya\mine\nsprojectx\nspx_build\intermediate\release-win32\xrrender_r1\light.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_R2light@@8					; light::`RTTI Base Class Array'
PUBLIC	??_R2ISpatial@@8				; ISpatial::`RTTI Base Class Array'
PUBLIC	??_R2IRender_Light@@8				; IRender_Light::`RTTI Base Class Array'
PUBLIC	??_R17?0A@EA@ISpatial@@8			; ISpatial::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@light@@8				; light::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ISpatial@@8			; ISpatial::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVxr_resource@@@8				; xr_resource `RTTI Type Descriptor'
PUBLIC	??_R1A@?0A@EA@xr_resource@@8			; xr_resource::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R2xr_resource@@8				; xr_resource::`RTTI Base Class Array'
PUBLIC	??_R3xr_resource@@8				; xr_resource::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R13?0A@EA@xr_resource@@8			; xr_resource::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@IRender_Light@@8			; IRender_Light::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3ISpatial@@8				; ISpatial::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AVISpatial@@@8				; ISpatial `RTTI Type Descriptor'
PUBLIC	??_R3IRender_Light@@8				; IRender_Light::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AVIRender_Light@@@8			; IRender_Light `RTTI Type Descriptor'
PUBLIC	??_R3light@@8					; light::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AVlight@@@8				; light `RTTI Type Descriptor'
PUBLIC	??_R4light@@6BISpatial@@@			; light::`RTTI Complete Object Locator'
PUBLIC	??_R4light@@6BIRender_Light@@@			; light::`RTTI Complete Object Locator'
PUBLIC	??_7light@@6BISpatial@@@			; light::`vftable'
PUBLIC	??_7light@@6BIRender_Light@@@			; light::`vftable'
EXTRN	__imp_??0IRender_Light@@QAE@XZ:PROC
EXTRN	?dcast_Renderable@ISpatial@@UAEPAVIRenderable@@XZ:PROC ; ISpatial::dcast_Renderable
EXTRN	__imp_?dcast_Renderable@ISpatial@@UAEPAVIRenderable@@XZ:PROC
EXTRN	?dcast_FeelSound@ISpatial@@UAEPAVSound@Feel@@XZ:PROC ; ISpatial::dcast_FeelSound
EXTRN	__imp_?dcast_FeelSound@ISpatial@@UAEPAVSound@Feel@@XZ:PROC
EXTRN	?dcast_CObject@ISpatial@@UAEPAVCObject@@XZ:PROC	; ISpatial::dcast_CObject
EXTRN	__imp_?dcast_CObject@ISpatial@@UAEPAVCObject@@XZ:PROC
EXTRN	?set_indirect@IRender_Light@@UAEX_N@Z:PROC	; IRender_Light::set_indirect
EXTRN	__imp_?set_indirect@IRender_Light@@UAEX_N@Z:PROC
EXTRN	__imp_?spatial_move@ISpatial@@UAEXXZ:PROC
EXTRN	?spatial_unregister@ISpatial@@UAEXXZ:PROC	; ISpatial::spatial_unregister
EXTRN	__imp_?spatial_unregister@ISpatial@@UAEXXZ:PROC
EXTRN	?spatial_register@ISpatial@@UAEXXZ:PROC		; ISpatial::spatial_register
EXTRN	__imp_?spatial_register@ISpatial@@UAEXXZ:PROC
EXTRN	__imp_??_7IRender_Light@@6B@:BYTE
EXTRN	__imp_??0xr_resource@@QAE@XZ:PROC
EXTRN	__imp_??1ISpatial@@UAE@XZ:PROC
EXTRN	__imp_?g_SpatialSpace@@3PAVISpatial_DB@@A:DWORD
EXTRN	__imp_??0ISpatial@@QAE@PAVISpatial_DB@@@Z:PROC
EXTRN	__imp_??1IRender_Light@@UAE@XZ:PROC
;	COMDAT ??_7light@@6BIRender_Light@@@
CONST	SEGMENT
??_7light@@6BIRender_Light@@@ DD FLAT:??_R4light@@6BIRender_Light@@@ ; light::`vftable'
	DD	FLAT:?set_type@light@@UAEXW4LT@IRender_Light@@@Z
	DD	FLAT:?set_active@light@@UAEX_N@Z
	DD	FLAT:?get_active@light@@UAE_NXZ
	DD	FLAT:?set_shadow@light@@UAEX_N@Z
	DD	FLAT:?set_indirect@IRender_Light@@UAEX_N@Z
	DD	FLAT:?set_position@light@@UAEXABU?$_vector3@M@@@Z
	DD	FLAT:?set_rotation@light@@UAEXABU?$_vector3@M@@0@Z
	DD	FLAT:?set_cone@light@@UAEXM@Z
	DD	FLAT:?set_range@light@@UAEXM@Z
	DD	FLAT:?set_virtual_size@light@@UAEXM@Z
	DD	FLAT:?set_texture@light@@UAEXPBD@Z
	DD	FLAT:?set_color@light@@UAEXMMM@Z
	DD	FLAT:?set_color@light@@UAEXABU?$_color@M@@@Z
	DD	FLAT:??_Elight@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7light@@6BISpatial@@@
CONST	SEGMENT
??_7light@@6BISpatial@@@ DD FLAT:??_R4light@@6BISpatial@@@ ; light::`vftable'
	DD	FLAT:?spatial_register@ISpatial@@UAEXXZ
	DD	FLAT:?spatial_unregister@ISpatial@@UAEXXZ
	DD	FLAT:?spatial_move@light@@UAEXXZ
	DD	FLAT:?spatial_sector_point@light@@UAE?AU?$_vector3@M@@XZ
	DD	FLAT:?dcast_CObject@ISpatial@@UAEPAVCObject@@XZ
	DD	FLAT:?dcast_FeelSound@ISpatial@@UAEPAVSound@Feel@@XZ
	DD	FLAT:?dcast_Renderable@ISpatial@@UAEPAVIRenderable@@XZ
	DD	FLAT:?dcast_Light@light@@UAEPAVIRender_Light@@XZ
	DD	FLAT:??_Elight@@W7AEPAXI@Z
CONST	ENDS
;	COMDAT ??_R4light@@6BIRender_Light@@@
rdata$r	SEGMENT
??_R4light@@6BIRender_Light@@@ DD 00H			; light::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVlight@@@8
	DD	FLAT:??_R3light@@8
rdata$r	ENDS
;	COMDAT ??_R4light@@6BISpatial@@@
rdata$r	SEGMENT
??_R4light@@6BISpatial@@@ DD 00H			; light::`RTTI Complete Object Locator'
	DD	08H
	DD	00H
	DD	FLAT:??_R0?AVlight@@@8
	DD	FLAT:??_R3light@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVlight@@@8
data$rs	SEGMENT
??_R0?AVlight@@@8 DD FLAT:??_7type_info@@6B@		; light `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlight@@', 00H
data$rs	ENDS
;	COMDAT ??_R3light@@8
rdata$r	SEGMENT
??_R3light@@8 DD 00H					; light::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2light@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVIRender_Light@@@8
data$rs	SEGMENT
??_R0?AVIRender_Light@@@8 DD FLAT:??_7type_info@@6B@	; IRender_Light `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVIRender_Light@@', 00H
data$rs	ENDS
;	COMDAT ??_R3IRender_Light@@8
rdata$r	SEGMENT
??_R3IRender_Light@@8 DD 00H				; IRender_Light::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2IRender_Light@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVISpatial@@@8
data$rs	SEGMENT
??_R0?AVISpatial@@@8 DD FLAT:??_7type_info@@6B@		; ISpatial `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVISpatial@@', 00H
data$rs	ENDS
;	COMDAT ??_R3ISpatial@@8
rdata$r	SEGMENT
??_R3ISpatial@@8 DD 00H					; ISpatial::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ISpatial@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@IRender_Light@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IRender_Light@@8 DD FLAT:??_R0?AVIRender_Light@@@8 ; IRender_Light::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IRender_Light@@8
rdata$r	ENDS
;	COMDAT ??_R13?0A@EA@xr_resource@@8
rdata$r	SEGMENT
??_R13?0A@EA@xr_resource@@8 DD FLAT:??_R0?AVxr_resource@@@8 ; xr_resource::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3xr_resource@@8
rdata$r	ENDS
;	COMDAT ??_R3xr_resource@@8
rdata$r	SEGMENT
??_R3xr_resource@@8 DD 00H				; xr_resource::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2xr_resource@@8
rdata$r	ENDS
;	COMDAT ??_R2xr_resource@@8
rdata$r	SEGMENT
??_R2xr_resource@@8 DD FLAT:??_R1A@?0A@EA@xr_resource@@8 ; xr_resource::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@xr_resource@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@xr_resource@@8 DD FLAT:??_R0?AVxr_resource@@@8 ; xr_resource::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3xr_resource@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVxr_resource@@@8
data$rs	SEGMENT
??_R0?AVxr_resource@@@8 DD FLAT:??_7type_info@@6B@	; xr_resource `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVxr_resource@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@ISpatial@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ISpatial@@8 DD FLAT:??_R0?AVISpatial@@@8	; ISpatial::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ISpatial@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@light@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@light@@8 DD FLAT:??_R0?AVlight@@@8	; light::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3light@@8
rdata$r	ENDS
;	COMDAT ??_R17?0A@EA@ISpatial@@8
rdata$r	SEGMENT
??_R17?0A@EA@ISpatial@@8 DD FLAT:??_R0?AVISpatial@@@8	; ISpatial::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	00H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ISpatial@@8
rdata$r	ENDS
;	COMDAT ??_R2IRender_Light@@8
rdata$r	SEGMENT
??_R2IRender_Light@@8 DD FLAT:??_R1A@?0A@EA@IRender_Light@@8 ; IRender_Light::`RTTI Base Class Array'
	DD	FLAT:??_R13?0A@EA@xr_resource@@8
rdata$r	ENDS
;	COMDAT ??_R2ISpatial@@8
rdata$r	SEGMENT
??_R2ISpatial@@8 DD FLAT:??_R1A@?0A@EA@ISpatial@@8	; ISpatial::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R2light@@8
rdata$r	SEGMENT
??_R2light@@8 DD FLAT:??_R1A@?0A@EA@light@@8		; light::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IRender_Light@@8
	DD	FLAT:??_R13?0A@EA@xr_resource@@8
	DD	FLAT:??_R17?0A@EA@ISpatial@@8
PUBLIC	?deg2rad@@YAMM@Z				; deg2rad
PUBLIC	??$deg2rad@M@implement@@YAMM@Z			; implement::deg2rad<float>
PUBLIC	?set@?$_color@M@@QAEAAU1@MMMM@Z			; _color<float>::set
PUBLIC	?similar@?$_vector3@M@@QBEHABU1@M@Z		; _vector3<float>::similar
PUBLIC	?fsimilar@@YAHMMM@Z				; fsimilar
PUBLIC	?mad@?$_vector3@M@@QAEAAU1@ABU1@0M@Z		; _vector3<float>::mad
PUBLIC	_tanf
PUBLIC	??$clampr@M@@YAMABM00@Z				; clampr<float>
PUBLIC	?set_type@light@@UAEXW4LT@IRender_Light@@@Z	; light::set_type
PUBLIC	?get_active@light@@UAE_NXZ			; light::get_active
PUBLIC	?set_shadow@light@@UAEX_N@Z			; light::set_shadow
PUBLIC	?set_virtual_size@light@@UAEXM@Z		; light::set_virtual_size
PUBLIC	?set_color@light@@UAEXMMM@Z			; light::set_color
PUBLIC	?set_color@light@@UAEXABU?$_color@M@@@Z		; light::set_color
PUBLIC	?set@?$_color@M@@QAEAAU1@ABU1@@Z		; _color<float>::set
PUBLIC	?dcast_Light@light@@UAEPAVIRender_Light@@XZ	; light::dcast_Light
PUBLIC	??_Elight@@W7AEPAXI@Z				; [thunk]:light::`vector deleting destructor'
PUBLIC	??$_sqr@M@@YAMM@Z				; _sqr<float>
PUBLIC	?set@?$_box3@M@@QAEAAV1@ABU?$_vector3@M@@0@Z	; _box3<float>::set
PUBLIC	?set@?$_sphere@M@@QAEXABU?$_vector3@M@@M@Z	; _sphere<float>::set
PUBLIC	?spatial_sector_point@light@@UAE?AU?$_vector3@M@@XZ ; light::spatial_sector_point
PUBLIC	?get_homdata@light@@QAEAAUvis_data@@XZ		; light::get_homdata
PUBLIC	?spatial_move@light@@UAEXXZ			; light::spatial_move
PUBLIC	?set_rotation@light@@UAEXABU?$_vector3@M@@0@Z	; light::set_rotation
PUBLIC	?set_cone@light@@UAEXM@Z			; light::set_cone
PUBLIC	?set_range@light@@UAEXM@Z			; light::set_range
PUBLIC	?set_position@light@@UAEXABU?$_vector3@M@@@Z	; light::set_position
PUBLIC	?set_active@light@@UAEX_N@Z			; light::set_active
PUBLIC	?set_texture@light@@UAEXPBD@Z			; light::set_texture
PUBLIC	??1light@@UAE@XZ				; light::~light
PUBLIC	??_Glight@@UAEPAXI@Z				; light::`scalar deleting destructor'
PUBLIC	??0light@@QAE@XZ				; light::light
EXTRN	??_Elight@@UAEPAXI@Z:PROC			; light::`vector deleting destructor'
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xr_resource.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_color.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.cpp
_TEXT	SEGMENT
??0light@@QAE@XZ PROC					; light::light
; _this$ = ecx

; 5    : {

	push	esi
	push	edi
	mov	edi, ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\xr_resource.h

; 11   : 	xr_resource()			: dwReference(0)				{ }

	mov	DWORD PTR [edi+4], 0
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.cpp

; 4    : light::light		(void)	: ISpatial(g_SpatialSpace)

	lea	ecx, DWORD PTR [edi+8]
	mov	eax, DWORD PTR __imp_??_7IRender_Light@@6B@
	mov	DWORD PTR [edi], eax
	mov	eax, DWORD PTR __imp_?g_SpatialSpace@@3PAVISpatial_DB@@A
	push	DWORD PTR [eax]
	call	DWORD PTR __imp_??0ISpatial@@QAE@PAVISpatial_DB@@@Z

; 6    : 	spatial.type	= STYPE_LIGHTSOURCE;
; 7    : 	flags.type		= POINT;

	mov	eax, DWORD PTR [edi+60]
	mov	DWORD PTR [edi], OFFSET ??_7light@@6BIRender_Light@@@
	and	eax, -127				; ffffff81H

; 8    : 	flags.bStatic	= false;
; 9    : 	flags.bActive	= false;
; 10   : 	flags.bShadow	= false;

	or	eax, 1
	mov	DWORD PTR [edi+8], OFFSET ??_7light@@6BISpatial@@@
	mov	DWORD PTR [edi+60], eax

; 19   : 
; 20   : #if RENDER==R_R2
; 21   : 	ZeroMemory		(omnipart,sizeof(omnipart));
; 22   : 	s_spot			= NULL;
; 23   : 	s_point			= NULL;
; 24   : 	vis.frame2test	= 0;	// xffffffff;
; 25   : 	vis.query_id	= 0;
; 26   : 	vis.query_order	= 0;
; 27   : 	vis.visible		= true;
; 28   : 	vis.pending		= false;
; 29   : #endif
; 30   : }

	mov	eax, edi
	mov	DWORD PTR [edi+12], 2
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	mov	DWORD PTR [edi+64], 0
	mov	DWORD PTR [edi+68], -998637568		; c47a0000H
	mov	DWORD PTR [edi+72], 0
	mov	DWORD PTR [edi+76], 0
	mov	DWORD PTR [edi+80], -1082130432		; bf800000H
	mov	DWORD PTR [edi+84], 0
	mov	DWORD PTR [edi+88], 0
	mov	DWORD PTR [edi+92], 0
	mov	DWORD PTR [edi+96], 0
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.cpp

; 14   : 	range			= 8.f;

	mov	DWORD PTR [edi+100], 1090519040		; 41000000H

; 15   : 	cone			= deg2rad(60.f);

	mov	DWORD PTR [edi+104], 1065749138		; 3f860a92H
; File I:\Vitalya\mine\NSProjectX\xrCore\_color.h

; 45   : 		r = _r; g = _g; b = _b; a = _a;		

	mov	DWORD PTR [edi+108], 1065353216		; 3f800000H
	mov	DWORD PTR [edi+112], 1065353216		; 3f800000H
	mov	DWORD PTR [edi+116], 1065353216		; 3f800000H
	mov	DWORD PTR [edi+120], 1065353216		; 3f800000H
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.cpp

; 18   : 	frame_render	= 0;

	mov	DWORD PTR [edi+180], 0

; 19   : 
; 20   : #if RENDER==R_R2
; 21   : 	ZeroMemory		(omnipart,sizeof(omnipart));
; 22   : 	s_spot			= NULL;
; 23   : 	s_point			= NULL;
; 24   : 	vis.frame2test	= 0;	// xffffffff;
; 25   : 	vis.query_id	= 0;
; 26   : 	vis.query_order	= 0;
; 27   : 	vis.visible		= true;
; 28   : 	vis.pending		= false;
; 29   : #endif
; 30   : }

	pop	edi
	pop	esi
	ret	0
??0light@@QAE@XZ ENDP					; light::light
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.cpp
;	COMDAT ??_Glight@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Glight@@UAEPAXI@Z PROC				; light::`scalar deleting destructor', COMDAT
; _this$ = ecx

; 33   : {

	push	esi
	mov	esi, ecx
	push	edi

; 89   : 		if (!flags.bActive)					return;

	mov	eax, DWORD PTR [esi+60]

; 33   : {

	mov	DWORD PTR [esi], OFFSET ??_7light@@6BIRender_Light@@@
	mov	DWORD PTR [esi+8], OFFSET ??_7light@@6BISpatial@@@

; 89   : 		if (!flags.bActive)					return;

	test	al, 32					; 00000020H
	je	SHORT $LN8@scalar

; 90   : 		flags.bActive						= false;

	and	eax, -33				; ffffffdfH
	lea	ecx, DWORD PTR [esi+8]
	mov	DWORD PTR [esi+60], eax

; 91   : 		spatial_move						();

	call	?spatial_move@light@@UAEXXZ		; light::spatial_move

; 92   : 		spatial_unregister					();

	mov	eax, DWORD PTR [esi+8]
	lea	ecx, DWORD PTR [esi+8]
	call	DWORD PTR [eax+4]
$LN8@scalar:

; 44   : }

	lea	ecx, DWORD PTR [esi+8]
	call	DWORD PTR __imp_??1ISpatial@@UAE@XZ
	mov	ecx, esi
	call	DWORD PTR __imp_??1IRender_Light@@UAE@XZ
	test	BYTE PTR ___flags$[esp+4], 1
	je	SHORT $LN16@scalar
	push	184					; 000000b8H
	push	esi
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN16@scalar:
	pop	edi
	mov	eax, esi
	pop	esi
	ret	4
??_Glight@@UAEPAXI@Z ENDP				; light::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.cpp
_TEXT	SEGMENT
??1light@@UAE@XZ PROC					; light::~light
; _this$ = ecx

; 33   : {

	push	esi
	mov	esi, ecx
	push	edi

; 89   : 		if (!flags.bActive)					return;

	mov	eax, DWORD PTR [esi+60]

; 33   : {

	mov	DWORD PTR [esi], OFFSET ??_7light@@6BIRender_Light@@@
	mov	DWORD PTR [esi+8], OFFSET ??_7light@@6BISpatial@@@

; 89   : 		if (!flags.bActive)					return;

	test	al, 32					; 00000020H
	je	SHORT $LN5@light

; 90   : 		flags.bActive						= false;

	and	eax, -33				; ffffffdfH
	lea	ecx, DWORD PTR [esi+8]
	mov	DWORD PTR [esi+60], eax

; 91   : 		spatial_move						();

	call	?spatial_move@light@@UAEXXZ		; light::spatial_move

; 92   : 		spatial_unregister					();

	mov	eax, DWORD PTR [esi+8]
	lea	ecx, DWORD PTR [esi+8]
	call	DWORD PTR [eax+4]
$LN5@light:

; 34   : #if RENDER==R_R2 
; 35   : 	for (int f=0; f<6; f++)	xr_delete(omnipart[f]);
; 36   : #endif
; 37   : 	set_active		(false);
; 38   : 
; 39   : 	// remove from Lights_LastFrame
; 40   : #if RENDER==R_R2 
; 41   : 	for (u32 it=0; it<RImplementation.Lights_LastFrame.size(); it++)
; 42   : 		if (this==RImplementation.Lights_LastFrame[it])	RImplementation.Lights_LastFrame[it]=0;
; 43   : #endif
; 44   : }

	lea	ecx, DWORD PTR [esi+8]
	call	DWORD PTR __imp_??1ISpatial@@UAE@XZ
	pop	edi
	mov	ecx, esi
	pop	esi
	jmp	DWORD PTR __imp_??1IRender_Light@@UAE@XZ
??1light@@UAE@XZ ENDP					; light::~light
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.cpp
_TEXT	SEGMENT
_name$ = 8						; size = 4
?set_texture@light@@UAEXPBD@Z PROC			; light::set_texture
; _this$ = ecx

; 67   : }

	ret	4
?set_texture@light@@UAEXPBD@Z ENDP			; light::set_texture
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.cpp
_TEXT	SEGMENT
_a$ = 8							; size = 1
?set_active@light@@UAEX_N@Z PROC			; light::set_active
; _this$ = ecx

; 72   : 	if (a)

	cmp	BYTE PTR _a$[esp-4], 0
	mov	eax, DWORD PTR [ecx+60]
	push	esi
	je	SHORT $LN2@set_active

; 73   : 	{
; 74   : 		if (flags.bActive)					return;

	test	al, 32					; 00000020H
	jne	SHORT $LN3@set_active

; 75   : 		flags.bActive						= true;

	or	eax, 32					; 00000020H

; 76   : 		spatial_register					();

	lea	esi, DWORD PTR [ecx+8]
	mov	DWORD PTR [ecx+60], eax
	mov	ecx, esi
	mov	eax, DWORD PTR [esi]
	call	DWORD PTR [eax]

; 77   : 		spatial_move						();

	mov	eax, DWORD PTR [esi]
	mov	ecx, esi
	call	DWORD PTR [eax+8]
	pop	esi

; 93   : 		//Msg								("!!! L-unregister: %X",u32(this));
; 94   : 	}
; 95   : }

	ret	4
$LN2@set_active:

; 78   : 		//Msg								("!!! L-register: %X",u32(this));
; 79   : 
; 80   : #ifdef DEBUG
; 81   : 		Fvector	zero = {0,-1000,0}			;
; 82   : 		if (position.similar(zero))			{
; 83   : 			Msg	("- Uninitialized light position.");
; 84   : 		}
; 85   : #endif // DEBUG
; 86   : 	}
; 87   : 	else
; 88   : 	{
; 89   : 		if (!flags.bActive)					return;

	test	al, 32					; 00000020H
	je	SHORT $LN3@set_active

; 90   : 		flags.bActive						= false;

	and	eax, -33				; ffffffdfH

; 91   : 		spatial_move						();

	lea	esi, DWORD PTR [ecx+8]
	mov	DWORD PTR [ecx+60], eax
	mov	ecx, esi
	mov	eax, DWORD PTR [esi]
	call	DWORD PTR [eax+8]

; 92   : 		spatial_unregister					();

	mov	eax, DWORD PTR [esi]
	mov	ecx, esi
	call	DWORD PTR [eax+4]
$LN3@set_active:

; 93   : 		//Msg								("!!! L-unregister: %X",u32(this));
; 94   : 	}
; 95   : }

	pop	esi
	ret	4
?set_active@light@@UAEX_N@Z ENDP			; light::set_active
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.cpp
_TEXT	SEGMENT
_P$ = 8							; size = 4
?set_position@light@@UAEXABU?$_vector3@M@@@Z PROC	; light::set_position
; _this$ = ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 58   : 	ICF BOOL	similar(const Self &v, T E=EPS_L) const	{ return _abs(x-v.x)<E && _abs(y-v.y)<E && _abs(z-v.z)<E;};

	mov	eax, DWORD PTR _P$[esp-4]
	movss	xmm0, DWORD PTR [ecx+64]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 676  :             return (float)fabs(_X);

	movss	xmm1, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 58   : 	ICF BOOL	similar(const Self &v, T E=EPS_L) const	{ return _abs(x-v.x)<E && _abs(y-v.y)<E && _abs(z-v.z)<E;};

	movss	xmm2, DWORD PTR __real@3a83126f
	movss	xmm3, DWORD PTR [eax]
	subss	xmm0, xmm3
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 676  :             return (float)fabs(_X);

	andps	xmm0, xmm1
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 58   : 	ICF BOOL	similar(const Self &v, T E=EPS_L) const	{ return _abs(x-v.x)<E && _abs(y-v.y)<E && _abs(z-v.z)<E;};

	comiss	xmm2, xmm0
	jbe	SHORT $LN6@set_positi
	movss	xmm0, DWORD PTR [ecx+68]
	subss	xmm0, DWORD PTR [eax+4]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 676  :             return (float)fabs(_X);

	andps	xmm0, xmm1
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 58   : 	ICF BOOL	similar(const Self &v, T E=EPS_L) const	{ return _abs(x-v.x)<E && _abs(y-v.y)<E && _abs(z-v.z)<E;};

	comiss	xmm2, xmm0
	jbe	SHORT $LN6@set_positi
	movss	xmm0, DWORD PTR [ecx+72]
	subss	xmm0, DWORD PTR [eax+8]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 676  :             return (float)fabs(_X);

	andps	xmm0, xmm1
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 58   : 	ICF BOOL	similar(const Self &v, T E=EPS_L) const	{ return _abs(x-v.x)<E && _abs(y-v.y)<E && _abs(z-v.z)<E;};

	comiss	xmm2, xmm0
	ja	SHORT $LN1@set_positi
$LN6@set_positi:

; 24   : 	ICF SelfRef	set(const _vector3<float> &v)			{ x = T(v.x);	y = T(v.y);	z = T(v.z);	return *this;	};

	movss	DWORD PTR [ecx+64], xmm3
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [ecx+68]
	fld	DWORD PTR [eax+8]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.cpp

; 102  : 	spatial_move				();

	mov	eax, DWORD PTR [ecx+8]
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 24   : 	ICF SelfRef	set(const _vector3<float> &v)			{ x = T(v.x);	y = T(v.y);	z = T(v.z);	return *this;	};

	fstp	DWORD PTR [ecx+72]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.cpp

; 102  : 	spatial_move				();

	add	ecx, 8
	call	DWORD PTR [eax+8]
$LN1@set_positi:

; 103  : }

	ret	4
?set_position@light@@UAEXABU?$_vector3@M@@@Z ENDP	; light::set_position
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\xrCore\vector.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\xrCore\vector.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.cpp
_TEXT	SEGMENT
_R$ = 8							; size = 4
?set_range@light@@UAEXM@Z PROC				; light::set_range
; _this$ = ecx

; 106  : 	float	eps					=	_max	(range*0.1f,EPS_L);

	movss	xmm0, DWORD PTR [ecx+100]
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 94   : template <class T>	IC T		_max	(T a, T b)	{ return a>b?a:b;	}

	movss	xmm2, DWORD PTR __real@3a83126f
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.cpp

; 106  : 	float	eps					=	_max	(range*0.1f,EPS_L);

	movaps	xmm1, xmm0
	mulss	xmm1, DWORD PTR __real@3dcccccd
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 94   : template <class T>	IC T		_max	(T a, T b)	{ return a>b?a:b;	}

	comiss	xmm1, xmm2
	ja	SHORT $LN7@set_range
	movaps	xmm1, xmm2
$LN7@set_range:
; File I:\Vitalya\mine\NSProjectX\xrCore\vector.h

; 73   : IC BOOL  fsimilar		( float		a, float	b, float	cmp=EPS )		{ return _abs(a-b)<cmp;	}

	movss	xmm2, DWORD PTR _R$[esp-4]
	subss	xmm0, xmm2
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 676  :             return (float)fabs(_X);

	andps	xmm0, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
; File I:\Vitalya\mine\NSProjectX\xrCore\vector.h

; 73   : IC BOOL  fsimilar		( float		a, float	b, float	cmp=EPS )		{ return _abs(a-b)<cmp;	}

	comiss	xmm1, xmm0
	ja	SHORT $LN1@set_range
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.cpp

; 108  : 	range						= R		;

	mov	eax, DWORD PTR [ecx+8]
	movss	DWORD PTR [ecx+100], xmm2

; 109  : 	spatial_move				();

	add	ecx, 8
	call	DWORD PTR [eax+8]
$LN1@set_range:

; 110  : };

	ret	4
?set_range@light@@UAEXM@Z ENDP				; light::set_range
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\vector.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\xrCore\vector.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.cpp
_TEXT	SEGMENT
_angle$ = 8						; size = 4
?set_cone@light@@UAEXM@Z PROC				; light::set_cone
; _this$ = ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\vector.h

; 73   : IC BOOL  fsimilar		( float		a, float	b, float	cmp=EPS )		{ return _abs(a-b)<cmp;	}

	movss	xmm1, DWORD PTR [ecx+104]
	movss	xmm2, DWORD PTR _angle$[esp-4]
	movss	xmm0, DWORD PTR __real@3727c5ac
	subss	xmm1, xmm2
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 676  :             return (float)fabs(_X);

	andps	xmm1, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
; File I:\Vitalya\mine\NSProjectX\xrCore\vector.h

; 73   : IC BOOL  fsimilar		( float		a, float	b, float	cmp=EPS )		{ return _abs(a-b)<cmp;	}

	comiss	xmm0, xmm1
	ja	SHORT $LN1@set_cone
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.cpp

; 115  : 	cone						= angle;

	mov	eax, DWORD PTR [ecx+8]
	movss	DWORD PTR [ecx+104], xmm2

; 116  : 	spatial_move				();

	add	ecx, 8
	call	DWORD PTR [eax+8]
$LN1@set_cone:

; 117  : }

	ret	4
?set_cone@light@@UAEXM@Z ENDP				; light::set_cone
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\vector.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\xrCore\vector.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.cpp
_TEXT	SEGMENT
_old_D$ = -12						; size = 12
_D$ = 8							; size = 4
_R$ = 12						; size = 4
?set_rotation@light@@UAEXABU?$_vector3@M@@0@Z PROC	; light::set_rotation
; _this$ = ecx

; 118  : void	light::set_rotation		(const Fvector& D, const Fvector& R)	{ 

	sub	esp, 12					; 0000000cH
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 214  : 		T mag=_sqrt(1/(v.x*v.x + v.y*v.y + v.z*v.z));

	movss	xmm4, DWORD PTR __real@3f800000
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.cpp

; 118  : void	light::set_rotation		(const Fvector& D, const Fvector& R)	{ 

	mov	edx, ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 214  : 		T mag=_sqrt(1/(v.x*v.x + v.y*v.y + v.z*v.z));

	mov	ecx, DWORD PTR _D$[esp+8]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.cpp

; 119  : 	Fvector	old_D		= direction;

	mov	eax, DWORD PTR [edx+76]
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 214  : 		T mag=_sqrt(1/(v.x*v.x + v.y*v.y + v.z*v.z));

	movss	xmm3, DWORD PTR [ecx]
	movss	xmm2, DWORD PTR [ecx+4]
	movaps	xmm1, xmm3
	movss	xmm0, DWORD PTR [ecx+8]
	mulss	xmm1, xmm3
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.cpp

; 119  : 	Fvector	old_D		= direction;

	mov	DWORD PTR _old_D$[esp+12], eax
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 214  : 		T mag=_sqrt(1/(v.x*v.x + v.y*v.y + v.z*v.z));

	mulss	xmm0, xmm0
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.cpp

; 119  : 	Fvector	old_D		= direction;

	mov	eax, DWORD PTR [edx+80]
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 214  : 		T mag=_sqrt(1/(v.x*v.x + v.y*v.y + v.z*v.z));

	mulss	xmm2, xmm2
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.cpp

; 119  : 	Fvector	old_D		= direction;

	mov	DWORD PTR _old_D$[esp+16], eax
	mov	eax, DWORD PTR [edx+84]
	mov	DWORD PTR _old_D$[esp+20], eax
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 214  : 		T mag=_sqrt(1/(v.x*v.x + v.y*v.y + v.z*v.z));

	addss	xmm1, xmm2
	mov	eax, DWORD PTR _R$[esp+8]
	addss	xmm1, xmm0
	movaps	xmm0, xmm4
	divss	xmm0, xmm1
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 764  :             return (float)sqrt(_X);

	sqrtss	xmm1, xmm0
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 215  : 		x = v.x*mag;

	mulss	xmm3, xmm1

; 216  : 		y = v.y*mag;

	movaps	xmm0, xmm1
	movss	DWORD PTR [edx+76], xmm3
	mulss	xmm0, DWORD PTR [ecx+4]
	movss	DWORD PTR [edx+80], xmm0

; 217  : 		z = v.z*mag;

	mulss	xmm1, DWORD PTR [ecx+8]
	movss	DWORD PTR [edx+84], xmm1

; 214  : 		T mag=_sqrt(1/(v.x*v.x + v.y*v.y + v.z*v.z));

	movss	xmm3, DWORD PTR [eax]
	movss	xmm2, DWORD PTR [eax+4]
	movaps	xmm1, xmm3
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm1, xmm3
	mulss	xmm0, xmm0
	mulss	xmm2, xmm2
	addss	xmm1, xmm2
	addss	xmm1, xmm0
	movaps	xmm0, xmm4
	divss	xmm0, xmm1
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 764  :             return (float)sqrt(_X);

	sqrtss	xmm1, xmm0
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 215  : 		x = v.x*mag;

	mulss	xmm3, xmm1

; 216  : 		y = v.y*mag;

	movaps	xmm0, xmm1
	movss	DWORD PTR [edx+88], xmm3
	mulss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR [edx+92], xmm0

; 217  : 		z = v.z*mag;

	mulss	xmm1, DWORD PTR [eax+8]

; 268  : 	{	return x*v.x + y*v.y + z*v.z; }

	movss	xmm0, DWORD PTR _old_D$[esp+12]

; 217  : 		z = v.z*mag;

	movss	DWORD PTR [edx+96], xmm1

; 268  : 	{	return x*v.x + y*v.y + z*v.z; }

	mulss	xmm0, DWORD PTR [ecx]
	movss	xmm1, DWORD PTR _old_D$[esp+16]
	mulss	xmm1, DWORD PTR [ecx+4]
	addss	xmm1, xmm0
	movss	xmm0, DWORD PTR _old_D$[esp+20]
	mulss	xmm0, DWORD PTR [ecx+8]
	addss	xmm1, xmm0
; File I:\Vitalya\mine\NSProjectX\xrCore\vector.h

; 73   : IC BOOL  fsimilar		( float		a, float	b, float	cmp=EPS )		{ return _abs(a-b)<cmp;	}

	movss	xmm0, DWORD PTR __real@3727c5ac
	subss	xmm4, xmm1
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 676  :             return (float)fabs(_X);

	andps	xmm4, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
; File I:\Vitalya\mine\NSProjectX\xrCore\vector.h

; 73   : IC BOOL  fsimilar		( float		a, float	b, float	cmp=EPS )		{ return _abs(a-b)<cmp;	}

	comiss	xmm0, xmm4
	ja	SHORT $LN2@set_rotati
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.cpp

; 122  : 	if (!fsimilar(1.f, old_D.dotproduct(D)))	spatial_move	();

	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [edx+8]
	call	DWORD PTR [eax+8]
$LN2@set_rotati:

; 123  : }

	add	esp, 12					; 0000000cH
	ret	8
?set_rotation@light@@UAEXABU?$_vector3@M@@0@Z ENDP	; light::set_rotation
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_sphere.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.cpp
_TEXT	SEGMENT
tv348 = -4						; size = 4
$T1 = -4						; size = 4
?spatial_move@light@@UAEXXZ PROC			; light::spatial_move
; _this$ = ecx

; 126  : {

	push	ecx

; 127  : 	switch(flags.type)	{

	mov	eax, DWORD PTR [ecx+52]
	and	eax, 15					; 0000000fH
	dec	eax
	cmp	eax, 3
	ja	$LN2@spatial_mo
	jmp	DWORD PTR $LN32@spatial_mo[eax*4]
$LN7@spatial_mo:
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 24   : 	ICF SelfRef	set(const _vector3<float> &v)			{ x = T(v.x);	y = T(v.y);	z = T(v.z);	return *this;	};

	fld	DWORD PTR [ecx+56]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.cpp

; 131  : 			spatial.sphere.set		(position, range);

	movss	xmm0, DWORD PTR [ecx+92]
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 24   : 	ICF SelfRef	set(const _vector3<float> &v)			{ x = T(v.x);	y = T(v.y);	z = T(v.z);	return *this;	};

	fstp	DWORD PTR [ecx+8]
	fld	DWORD PTR [ecx+60]
	fstp	DWORD PTR [ecx+12]
	fld	DWORD PTR [ecx+64]
	fstp	DWORD PTR [ecx+16]
; File I:\Vitalya\mine\NSProjectX\xrCore\_sphere.h

; 9    : 	IC void		set(const _vector3<T> &_P, T _R)	{ P.set(_P); R = _R; }

	movss	DWORD PTR [ecx+20], xmm0
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.cpp

; 133  : 		break;

	jmp	$LN2@spatial_mo
$LN6@spatial_mo:

; 134  : 	case IRender_Light::SPOT		:	
; 135  : 		{
; 136  : 			// minimal enclosing sphere around cone
; 137  : 			VERIFY2						(cone < deg2rad(121.f), "Too large light-cone angle. Maybe you have passed it in 'degrees'?");
; 138  : 			if (cone>=PI_DIV_2)			{

	movss	xmm0, DWORD PTR [ecx+96]
	comiss	xmm0, DWORD PTR __real@3fc90fdb
	movss	xmm2, DWORD PTR [ecx+92]
	movss	DWORD PTR tv348[esp+4], xmm0
	jb	SHORT $LN10@spatial_mo
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 144  : 		x = p.x + d.x*m;

	movaps	xmm0, xmm2
	mulss	xmm0, DWORD PTR [ecx+68]
	addss	xmm0, DWORD PTR [ecx+56]
	movss	DWORD PTR [ecx+8], xmm0

; 145  : 		y = p.y + d.y*m;

	movaps	xmm0, xmm2
	mulss	xmm0, DWORD PTR [ecx+72]
	addss	xmm0, DWORD PTR [ecx+60]
	movss	DWORD PTR [ecx+12], xmm0

; 146  : 		z = p.z + d.z*m;

	mulss	xmm2, DWORD PTR [ecx+76]
	addss	xmm2, DWORD PTR [ecx+64]
	movss	DWORD PTR [ecx+16], xmm2
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.cpp

; 141  : 				spatial.sphere.R		= range * tanf(cone/2.f);

	fld	DWORD PTR [ecx+96]
	fmul	DWORD PTR __real@3f000000
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 769  :             return (float)tan(_X);

	fptan
	fstp	ST(0)
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.cpp

; 141  : 				spatial.sphere.R		= range * tanf(cone/2.f);

	fmul	DWORD PTR [ecx+92]
	fstp	DWORD PTR [ecx+20]

; 142  : 			} else {

	jmp	$LN2@spatial_mo
$LN10@spatial_mo:

; 144  : 				spatial.sphere.R		= range / (2.f * _sqr(_cos(cone/2.f)));

	fld	DWORD PTR tv348[esp+4]
	fmul	DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR __real@3f000000
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 653  :             return (float)cos(_X);

	fcos
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 101  : IC float	_cos	(float x)		{ return cosf(x); }

	fstp	DWORD PTR $T1[esp+4]

; 95   : template <class T>	IC T		_sqr	(T a)		{ return a*a;		}

	movss	xmm0, DWORD PTR $T1[esp+4]
	mulss	xmm0, xmm0
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.cpp

; 144  : 				spatial.sphere.R		= range / (2.f * _sqr(_cos(cone/2.f)));

	divss	xmm1, xmm0
	mulss	xmm1, xmm2
	movss	DWORD PTR [ecx+20], xmm1
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 144  : 		x = p.x + d.x*m;

	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR [ecx+68]
	addss	xmm0, DWORD PTR [ecx+56]
	movss	DWORD PTR [ecx+8], xmm0

; 145  : 		y = p.y + d.y*m;

	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR [ecx+72]
	addss	xmm0, DWORD PTR [ecx+60]
	movss	DWORD PTR [ecx+12], xmm0

; 146  : 		z = p.z + d.z*m;

	mulss	xmm1, DWORD PTR [ecx+76]
	addss	xmm1, DWORD PTR [ecx+64]
	movss	DWORD PTR [ecx+16], xmm1
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.cpp

; 148  : 		break;

	jmp	SHORT $LN2@spatial_mo
$LN12@spatial_mo:

; 149  : 	case IRender_Light::OMNIPART	:
; 150  : 		{
; 151  : 			// is it optimal? seems to be...
; 152  : 			spatial.sphere.P.mad		(position,direction,range);

	movss	xmm1, DWORD PTR [ecx+92]
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 144  : 		x = p.x + d.x*m;

	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR [ecx+68]
	addss	xmm0, DWORD PTR [ecx+56]
	movss	DWORD PTR [ecx+8], xmm0

; 145  : 		y = p.y + d.y*m;

	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR [ecx+72]
	addss	xmm0, DWORD PTR [ecx+60]
	movss	DWORD PTR [ecx+12], xmm0

; 146  : 		z = p.z + d.z*m;

	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR [ecx+76]
	addss	xmm0, DWORD PTR [ecx+64]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.cpp

; 153  : 			spatial.sphere.R			= range;

	movss	DWORD PTR [ecx+20], xmm1
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 146  : 		z = p.z + d.z*m;

	movss	DWORD PTR [ecx+16], xmm0
$LN2@spatial_mo:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.cpp

; 165  : }

	add	esp, 4

; 154  : 		}
; 155  : 		break;
; 156  : 	}
; 157  : 
; 158  : 	// update spatial DB
; 159  : 	ISpatial::spatial_move			();

	jmp	DWORD PTR __imp_?spatial_move@ISpatial@@UAEXXZ
	npad	2
$LN32@spatial_mo:

; 165  : }

	DD	$LN7@spatial_mo
	DD	$LN6@spatial_mo
	DD	$LN12@spatial_mo
	DD	$LN7@spatial_mo
?spatial_move@light@@UAEXXZ ENDP			; light::spatial_move
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_sphere.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.cpp
_TEXT	SEGMENT
?get_homdata@light@@QAEAAUvis_data@@XZ PROC		; light::get_homdata
; _this$ = ecx

; 169  : 	// commit vis-data
; 170  : 	hom.sphere.set	(spatial.sphere.P,spatial.sphere.R);

	movss	xmm0, DWORD PTR [ecx+28]
	lea	eax, DWORD PTR [ecx+124]
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 24   : 	ICF SelfRef	set(const _vector3<float> &v)			{ x = T(v.x);	y = T(v.y);	z = T(v.z);	return *this;	};

	fld	DWORD PTR [ecx+16]
	fstp	DWORD PTR [eax]
	fld	DWORD PTR [ecx+20]
	fstp	DWORD PTR [eax+4]
	fld	DWORD PTR [ecx+24]
	fstp	DWORD PTR [eax+8]
; File I:\Vitalya\mine\NSProjectX\xrCore\_sphere.h

; 9    : 	IC void		set(const _vector3<T> &_P, T _R)	{ P.set(_P); R = _R; }

	movss	DWORD PTR [eax+12], xmm0
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 24   : 	ICF SelfRef	set(const _vector3<float> &v)			{ x = T(v.x);	y = T(v.y);	z = T(v.z);	return *this;	};

	movss	xmm6, DWORD PTR [ecx+16]
	movss	DWORD PTR [ecx+140], xmm6
	movss	xmm5, DWORD PTR [ecx+20]
	movss	DWORD PTR [ecx+144], xmm5
	movss	xmm4, DWORD PTR [ecx+24]
	movss	DWORD PTR [ecx+148], xmm4
	movss	xmm3, DWORD PTR [ecx+16]
	movss	DWORD PTR [ecx+152], xmm3
	movss	xmm2, DWORD PTR [ecx+20]
	movss	DWORD PTR [ecx+156], xmm2
	movss	xmm1, DWORD PTR [ecx+24]
	movss	DWORD PTR [ecx+160], xmm1
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.cpp

; 172  : 	hom.box.grow	(spatial.sphere.R);

	movss	xmm0, DWORD PTR [ecx+28]
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 35   : 	ICF SelfRef	sub(T s)								{ x-=s;		y-=s;		z-=s;			return *this;	};

	subss	xmm6, xmm0
	subss	xmm5, xmm0
	subss	xmm4, xmm0

; 30   : 	ICF SelfRef	add(T s)								{ x+=s;		y+=s;		z+=s;			return *this;	};

	addss	xmm3, xmm0
	addss	xmm2, xmm0
	addss	xmm1, xmm0

; 35   : 	ICF SelfRef	sub(T s)								{ x-=s;		y-=s;		z-=s;			return *this;	};

	movss	DWORD PTR [ecx+140], xmm6
	movss	DWORD PTR [ecx+144], xmm5
	movss	DWORD PTR [ecx+148], xmm4

; 30   : 	ICF SelfRef	add(T s)								{ x+=s;		y+=s;		z+=s;			return *this;	};

	movss	DWORD PTR [ecx+152], xmm3
	movss	DWORD PTR [ecx+156], xmm2
	movss	DWORD PTR [ecx+160], xmm1
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.cpp

; 174  : };

	ret	0
?get_homdata@light@@QAEAAUvis_data@@XZ ENDP		; light::get_homdata
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.cpp
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?spatial_sector_point@light@@UAE?AU?$_vector3@M@@XZ PROC ; light::spatial_sector_point
; _this$ = ecx

; 178  : 	return position; 

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+60]
	mov	ecx, DWORD PTR [ecx+64]
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ecx

; 179  : }

	ret	4
?spatial_sector_point@light@@UAE?AU?$_vector3@M@@XZ ENDP ; light::spatial_sector_point
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_sphere.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_sphere.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_sphere.h
;	COMDAT ?set@?$_sphere@M@@QAEXABU?$_vector3@M@@M@Z
_TEXT	SEGMENT
__P$ = 8						; size = 4
__R$ = 12						; size = 4
?set@?$_sphere@M@@QAEXABU?$_vector3@M@@M@Z PROC		; _sphere<float>::set, COMDAT
; _this$ = ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 24   : 	ICF SelfRef	set(const _vector3<float> &v)			{ x = T(v.x);	y = T(v.y);	z = T(v.z);	return *this;	};

	mov	eax, DWORD PTR __P$[esp-4]
; File I:\Vitalya\mine\NSProjectX\xrCore\_sphere.h

; 9    : 	IC void		set(const _vector3<T> &_P, T _R)	{ P.set(_P); R = _R; }

	movss	xmm0, DWORD PTR __R$[esp-4]
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 24   : 	ICF SelfRef	set(const _vector3<float> &v)			{ x = T(v.x);	y = T(v.y);	z = T(v.z);	return *this;	};

	fld	DWORD PTR [eax]
	fstp	DWORD PTR [ecx]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [ecx+4]
	fld	DWORD PTR [eax+8]
	fstp	DWORD PTR [ecx+8]
; File I:\Vitalya\mine\NSProjectX\xrCore\_sphere.h

; 9    : 	IC void		set(const _vector3<T> &_P, T _R)	{ P.set(_P); R = _R; }

	movss	DWORD PTR [ecx+12], xmm0
	ret	8
?set@?$_sphere@M@@QAEXABU?$_vector3@M@@M@Z ENDP		; _sphere<float>::set
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h
;	COMDAT ?set@?$_box3@M@@QAEAAV1@ABU?$_vector3@M@@0@Z
_TEXT	SEGMENT
__min$ = 8						; size = 4
__max$ = 12						; size = 4
?set@?$_box3@M@@QAEAAV1@ABU?$_vector3@M@@0@Z PROC	; _box3<float>::set, COMDAT
; _this$ = ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 24   : 	ICF SelfRef	set(const _vector3<float> &v)			{ x = T(v.x);	y = T(v.y);	z = T(v.z);	return *this;	};

	mov	eax, DWORD PTR __min$[esp-4]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [ecx]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [ecx+4]
	fld	DWORD PTR [eax+8]
	mov	eax, DWORD PTR __max$[esp-4]
	fstp	DWORD PTR [ecx+8]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [ecx+12]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [ecx+16]
	fld	DWORD PTR [eax+8]
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h

; 30   : 	IC 	SelfRef	set			(const Tvector &_min, const Tvector &_max)	{ min.set(_min);	max.set(_max);		return *this;	};

	mov	eax, ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 24   : 	ICF SelfRef	set(const _vector3<float> &v)			{ x = T(v.x);	y = T(v.y);	z = T(v.z);	return *this;	};

	fstp	DWORD PTR [ecx+20]
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h

; 30   : 	IC 	SelfRef	set			(const Tvector &_min, const Tvector &_max)	{ min.set(_min);	max.set(_max);		return *this;	};

	ret	8
?set@?$_box3@M@@QAEAAV1@ABU?$_vector3@M@@0@Z ENDP	; _box3<float>::set
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
;	COMDAT ??$_sqr@M@@YAMM@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
??$_sqr@M@@YAMM@Z PROC					; _sqr<float>, COMDAT

; 95   : template <class T>	IC T		_sqr	(T a)		{ return a*a;		}

	fld	DWORD PTR _a$[esp-4]
	fmul	ST(0), ST(0)
	ret	0
??$_sqr@M@@YAMM@Z ENDP					; _sqr<float>
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??_Elight@@W7AEPAXI@Z
_TEXT	SEGMENT
??_Elight@@W7AEPAXI@Z PROC				; [thunk]:light::`vector deleting destructor', COMDAT
	sub	ecx, 8
	jmp	??_Elight@@UAEPAXI@Z
??_Elight@@W7AEPAXI@Z ENDP				; [thunk]:light::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.h
;	COMDAT ?dcast_Light@light@@UAEPAVIRender_Light@@XZ
_TEXT	SEGMENT
?dcast_Light@light@@UAEPAVIRender_Light@@XZ PROC	; light::dcast_Light, COMDAT
; _this$ = ecx

; 96   : 	virtual IRender_Light*	dcast_Light		()	{ return this; }

	lea	eax, DWORD PTR [ecx-8]
	ret	0
?dcast_Light@light@@UAEPAVIRender_Light@@XZ ENDP	; light::dcast_Light
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_color.h
;	COMDAT ?set@?$_color@M@@QAEAAU1@ABU1@@Z
_TEXT	SEGMENT
_dw$ = 8						; size = 4
?set@?$_color@M@@QAEAAU1@ABU1@@Z PROC			; _color<float>::set, COMDAT
; _this$ = ecx

; 50   : 		r=dw.r; g=dw.g; b=dw.b; a = dw.a;	

	mov	eax, DWORD PTR _dw$[esp-4]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [ecx]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [ecx+4]
	fld	DWORD PTR [eax+8]
	fstp	DWORD PTR [ecx+8]
	fld	DWORD PTR [eax+12]

; 51   : 		return *this;

	mov	eax, ecx
	fstp	DWORD PTR [ecx+12]

; 52   : 	};

	ret	4
?set@?$_color@M@@QAEAAU1@ABU1@@Z ENDP			; _color<float>::set
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_color.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.h
;	COMDAT ?set_color@light@@UAEXABU?$_color@M@@@Z
_TEXT	SEGMENT
_C$ = 8							; size = 4
?set_color@light@@UAEXABU?$_color@M@@@Z PROC		; light::set_color, COMDAT
; _this$ = ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\_color.h

; 50   : 		r=dw.r; g=dw.g; b=dw.b; a = dw.a;	

	mov	eax, DWORD PTR _C$[esp-4]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [ecx+108]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [ecx+112]
	fld	DWORD PTR [eax+8]
	fstp	DWORD PTR [ecx+116]
	fld	DWORD PTR [eax+12]
	fstp	DWORD PTR [ecx+120]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.h

; 89   : 	virtual void	set_color				(const Fcolor& C)				{ color.set(C);				}

	ret	4
?set_color@light@@UAEXABU?$_color@M@@@Z ENDP		; light::set_color
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_color.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.h
;	COMDAT ?set_color@light@@UAEXMMM@Z
_TEXT	SEGMENT
_r$ = 8							; size = 4
_g$ = 12						; size = 4
_b$ = 16						; size = 4
?set_color@light@@UAEXMMM@Z PROC			; light::set_color, COMDAT
; _this$ = ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\_color.h

; 45   : 		r = _r; g = _g; b = _b; a = _a;		

	movss	xmm0, DWORD PTR _r$[esp-4]
	movss	DWORD PTR [ecx+108], xmm0
	movss	xmm0, DWORD PTR _g$[esp-4]
	movss	DWORD PTR [ecx+112], xmm0
	movss	xmm0, DWORD PTR _b$[esp-4]
	movss	DWORD PTR [ecx+116], xmm0
	mov	DWORD PTR [ecx+120], 1065353216		; 3f800000H
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.h

; 90   : 	virtual void	set_color				(float r, float g, float b)		{ color.set(r,g,b,1);		}

	ret	12					; 0000000cH
?set_color@light@@UAEXMMM@Z ENDP			; light::set_color
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.h
;	COMDAT ?set_virtual_size@light@@UAEXM@Z
_TEXT	SEGMENT
_R$ = 8							; size = 4
?set_virtual_size@light@@UAEXM@Z PROC			; light::set_virtual_size, COMDAT
; _this$ = ecx

; 88   : 	virtual void	set_virtual_size		(float R)						{};

	ret	4
?set_virtual_size@light@@UAEXM@Z ENDP			; light::set_virtual_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.h
;	COMDAT ?set_shadow@light@@UAEX_N@Z
_TEXT	SEGMENT
_b$ = 8							; size = 1
?set_shadow@light@@UAEX_N@Z PROC			; light::set_shadow, COMDAT
; _this$ = ecx

; 82   : 		flags.bShadow=b;			

	mov	eax, DWORD PTR [ecx+60]
	movzx	edx, BYTE PTR _b$[esp-4]
	and	eax, -65				; ffffffbfH
	shl	edx, 6
	or	edx, eax
	mov	DWORD PTR [ecx+60], edx

; 83   : 	}

	ret	4
?set_shadow@light@@UAEX_N@Z ENDP			; light::set_shadow
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.h
;	COMDAT ?get_active@light@@UAE_NXZ
_TEXT	SEGMENT
?get_active@light@@UAE_NXZ PROC				; light::get_active, COMDAT
; _this$ = ecx

; 79   : 	virtual bool	get_active				()								{ return flags.bActive;		}

	mov	eax, DWORD PTR [ecx+60]
	shr	eax, 5
	and	al, 1
	ret	0
?get_active@light@@UAE_NXZ ENDP				; light::get_active
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\light.h
;	COMDAT ?set_type@light@@UAEXW4LT@IRender_Light@@@Z
_TEXT	SEGMENT
_type$ = 8						; size = 4
?set_type@light@@UAEXW4LT@IRender_Light@@@Z PROC	; light::set_type, COMDAT
; _this$ = ecx

; 77   : 	virtual void	set_type				(LT type)						{ flags.type = type;		}

	mov	eax, DWORD PTR [ecx+60]
	xor	eax, DWORD PTR _type$[esp-4]
	and	eax, 15					; 0000000fH
	xor	DWORD PTR [ecx+60], eax
	ret	4
?set_type@light@@UAEXW4LT@IRender_Light@@@Z ENDP	; light::set_type
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\vector.h
;	COMDAT ??$clampr@M@@YAMABM00@Z
_TEXT	SEGMENT
tv134 = -8						; size = 4
tv131 = -8						; size = 4
tv129 = -4						; size = 4
__high$ = 8						; size = 4
??$clampr@M@@YAMABM00@Z PROC				; clampr<float>, COMDAT
; _val$ = ecx
; __low$ = edx

; 95   : IC T	clampr	( const T& val, const T& _low, const T& _high ){

	sub	esp, 8

; 96   : 	if		( val<_low	)	return _low; 

	movss	xmm1, DWORD PTR [ecx]
	movss	xmm0, DWORD PTR [edx]
	comiss	xmm0, xmm1
	movss	DWORD PTR tv129[esp+8], xmm1
	movss	DWORD PTR tv131[esp+8], xmm0
	jbe	SHORT $LN2@clampr
	fld	DWORD PTR tv131[esp+8]

; 99   : };

	add	esp, 8
	ret	0
$LN2@clampr:

; 97   : 	else if	( val>_high )	return _high;

	mov	eax, DWORD PTR __high$[esp+4]
	movss	xmm0, DWORD PTR [eax]
	comiss	xmm1, xmm0
	movss	DWORD PTR tv134[esp+8], xmm0
	jbe	SHORT $LN4@clampr
	fld	DWORD PTR tv134[esp+8]

; 99   : };

	add	esp, 8
	ret	0
$LN4@clampr:

; 98   : 	else					return val;

	fld	DWORD PTR tv129[esp+8]

; 99   : };

	add	esp, 8
	ret	0
??$clampr@M@@YAMABM00@Z ENDP				; clampr<float>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
;	COMDAT _tanf
_TEXT	SEGMENT
__X$ = 8						; size = 4
_tanf	PROC						; COMDAT

; 769  :             return (float)tan(_X);

	fld	DWORD PTR __X$[esp-4]
	fptan
	fstp	ST(0)

; 770  :         }

	ret	0
_tanf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
;	COMDAT ?mad@?$_vector3@M@@QAEAAU1@ABU1@0M@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
_d$ = 12						; size = 4
_m$ = 16						; size = 4
?mad@?$_vector3@M@@QAEAAU1@ABU1@0M@Z PROC		; _vector3<float>::mad, COMDAT
; _this$ = ecx

; 144  : 		x = p.x + d.x*m;

	mov	edx, DWORD PTR _d$[esp-4]
	movss	xmm1, DWORD PTR _m$[esp-4]
	mov	eax, DWORD PTR _p$[esp-4]
	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR [edx]
	addss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [ecx], xmm0

; 145  : 		y = p.y + d.y*m;

	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR [edx+4]
	addss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR [ecx+4], xmm0

; 146  : 		z = p.z + d.z*m;

	mulss	xmm1, DWORD PTR [edx+8]
	addss	xmm1, DWORD PTR [eax+8]

; 147  : 		return *this;	

	mov	eax, ecx
	movss	DWORD PTR [ecx+8], xmm1

; 148  : 	}

	ret	12					; 0000000cH
?mad@?$_vector3@M@@QAEAAU1@ABU1@0M@Z ENDP		; _vector3<float>::mad
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\vector.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\xrCore\vector.h
;	COMDAT ?fsimilar@@YAHMMM@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_cmp$ = 16						; size = 4
?fsimilar@@YAHMMM@Z PROC				; fsimilar, COMDAT

; 73   : IC BOOL  fsimilar		( float		a, float	b, float	cmp=EPS )		{ return _abs(a-b)<cmp;	}

	movss	xmm1, DWORD PTR _a$[esp-4]
	xor	eax, eax
	subss	xmm1, DWORD PTR _b$[esp-4]
	movss	xmm0, DWORD PTR _cmp$[esp-4]
	mov	ecx, 1
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 676  :             return (float)fabs(_X);

	andps	xmm1, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
; File I:\Vitalya\mine\NSProjectX\xrCore\vector.h

; 73   : IC BOOL  fsimilar		( float		a, float	b, float	cmp=EPS )		{ return _abs(a-b)<cmp;	}

	comiss	xmm0, xmm1
	cmova	eax, ecx
	ret	0
?fsimilar@@YAHMMM@Z ENDP				; fsimilar
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
;	COMDAT ?similar@?$_vector3@M@@QBEHABU1@M@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
_E$ = 12						; size = 4
?similar@?$_vector3@M@@QBEHABU1@M@Z PROC		; _vector3<float>::similar, COMDAT
; _this$ = ecx

; 58   : 	ICF BOOL	similar(const Self &v, T E=EPS_L) const	{ return _abs(x-v.x)<E && _abs(y-v.y)<E && _abs(z-v.z)<E;};

	mov	eax, DWORD PTR _v$[esp-4]
	movss	xmm0, DWORD PTR [ecx]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 676  :             return (float)fabs(_X);

	movss	xmm1, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 58   : 	ICF BOOL	similar(const Self &v, T E=EPS_L) const	{ return _abs(x-v.x)<E && _abs(y-v.y)<E && _abs(z-v.z)<E;};

	movss	xmm2, DWORD PTR _E$[esp-4]
	subss	xmm0, DWORD PTR [eax]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 676  :             return (float)fabs(_X);

	andps	xmm0, xmm1
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 58   : 	ICF BOOL	similar(const Self &v, T E=EPS_L) const	{ return _abs(x-v.x)<E && _abs(y-v.y)<E && _abs(z-v.z)<E;};

	comiss	xmm2, xmm0
	jbe	SHORT $LN3@similar
	movss	xmm0, DWORD PTR [ecx+4]
	subss	xmm0, DWORD PTR [eax+4]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 676  :             return (float)fabs(_X);

	andps	xmm0, xmm1
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 58   : 	ICF BOOL	similar(const Self &v, T E=EPS_L) const	{ return _abs(x-v.x)<E && _abs(y-v.y)<E && _abs(z-v.z)<E;};

	comiss	xmm2, xmm0
	jbe	SHORT $LN3@similar
	movss	xmm0, DWORD PTR [ecx+8]
	subss	xmm0, DWORD PTR [eax+8]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 676  :             return (float)fabs(_X);

	andps	xmm0, xmm1
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 58   : 	ICF BOOL	similar(const Self &v, T E=EPS_L) const	{ return _abs(x-v.x)<E && _abs(y-v.y)<E && _abs(z-v.z)<E;};

	comiss	xmm2, xmm0
	jbe	SHORT $LN3@similar
	mov	eax, 1
	ret	8
$LN3@similar:
	xor	eax, eax
	ret	8
?similar@?$_vector3@M@@QBEHABU1@M@Z ENDP		; _vector3<float>::similar
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_color.h
;	COMDAT ?set@?$_color@M@@QAEAAU1@MMMM@Z
_TEXT	SEGMENT
__r$ = 8						; size = 4
__g$ = 12						; size = 4
__b$ = 16						; size = 4
__a$dead$ = 20						; size = 4
?set@?$_color@M@@QAEAAU1@MMMM@Z PROC			; _color<float>::set, COMDAT
; _this$ = ecx

; 45   : 		r = _r; g = _g; b = _b; a = _a;		

	movss	xmm0, DWORD PTR __r$[esp-4]

; 46   : 		return *this;

	mov	eax, ecx
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR __g$[esp-4]
	movss	DWORD PTR [ecx+4], xmm0
	movss	xmm0, DWORD PTR __b$[esp-4]
	movss	DWORD PTR [ecx+8], xmm0
	mov	DWORD PTR [ecx+12], 1065353216		; 3f800000H

; 47   : 	};

	ret	16					; 00000010H
?set@?$_color@M@@QAEAAU1@MMMM@Z ENDP			; _color<float>::set
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\vector.h
;	COMDAT ??$deg2rad@M@implement@@YAMM@Z
_TEXT	SEGMENT
_val$ = 8						; size = 4
??$deg2rad@M@implement@@YAMM@Z PROC			; implement::deg2rad<float>, COMDAT

; 81   : 	template <class T>	ICF T	deg2rad		( T val )						{ return (val*T(M_PI)/T(180));	};

	fld	DWORD PTR _val$[esp-4]
	fmul	DWORD PTR __real@3c8efa36
	ret	0
??$deg2rad@M@implement@@YAMM@Z ENDP			; implement::deg2rad<float>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\vector.h
;	COMDAT ?deg2rad@@YAMM@Z
_TEXT	SEGMENT
_val$ = 8						; size = 4
?deg2rad@@YAMM@Z PROC					; deg2rad, COMDAT

; 81   : 	template <class T>	ICF T	deg2rad		( T val )						{ return (val*T(M_PI)/T(180));	};

	fld	DWORD PTR _val$[esp-4]
	fmul	DWORD PTR __real@3c8efa36

; 84   : ICF float	deg2rad 	(float val)											{return implement::deg2rad(val);}

	ret	0
?deg2rad@@YAMM@Z ENDP					; deg2rad
_TEXT	ENDS
END
