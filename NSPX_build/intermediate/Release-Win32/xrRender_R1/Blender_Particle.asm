; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30146.0 

	TITLE	i:\vitalya\mine\nsprojectx\nspx_build\intermediate\release-win32\xrrender_r1\blender_particle.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_09JNOBNNGJ@particles@			; `string'
PUBLIC	??_C@_08MHMPAKAC@Blending@			; `string'
PUBLIC	??_C@_03KPIFFHNE@SET@				; `string'
PUBLIC	??_C@_05NDHFMCLH@BLEND@				; `string'
PUBLIC	??_C@_03BOJFLAKG@ADD@				; `string'
PUBLIC	??_C@_03IBHOEMFB@MUL@				; `string'
PUBLIC	??_C@_06EAOMOBGC@MUL_2X@			; `string'
PUBLIC	??_C@_09EKBCGBOF@ALPHA?9ADD@			; `string'
PUBLIC	??_C@_0O@MIAJBJBP@Texture?5clamp@		; `string'
PUBLIC	??_C@_09HNLHEELD@Alpha?5ref@			; `string'
PUBLIC	??_C@_0BI@IMABICJM@CBlender_Particle?3?3Load@	; `string'
PUBLIC	??_C@_0EA@PBLHDGCB@I?3?2Vitalya?2mine?2NSProjectX?2laye@ ; `string'
PUBLIC	??_C@_0BJ@IPOGOJGI@xrPID_TOKEN?$DN?$DNxrPREAD?$CIfs?$CJ@ ; `string'
PUBLIC	??_C@_0BL@OMCBIJFA@xrPID_INTEGER?$DN?$DNxrPREAD?$CIfs?$CJ@ ; `string'
PUBLIC	??_C@_08PKKGOGAD@particle@			; `string'
PUBLIC	??_R2CBlender_Particle@@8			; CBlender_Particle::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CBlender_Particle@@8		; CBlender_Particle::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3CBlender_Particle@@8			; CBlender_Particle::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AVCBlender_Particle@@@8			; CBlender_Particle `RTTI Type Descriptor'
PUBLIC	??_R4CBlender_Particle@@6B@			; CBlender_Particle::`RTTI Complete Object Locator'
PUBLIC	??_7CBlender_Particle@@6B@			; CBlender_Particle::`vftable'
;	COMDAT ?ignore_always@?BD@??Load@CBlender_Particle@@UAEXAAVIReader@@G@Z@4_NA
_BSS	SEGMENT
?ignore_always@?BD@??Load@CBlender_Particle@@UAEXAAVIReader@@G@Z@4_NA DB 01H DUP (?) ; `CBlender_Particle::Load'::`19'::ignore_always
_BSS	ENDS
;	COMDAT ?ignore_always@?M@??Load@CBlender_Particle@@UAEXAAVIReader@@G@Z@4_NA
_BSS	SEGMENT
?ignore_always@?M@??Load@CBlender_Particle@@UAEXAAVIReader@@G@Z@4_NA DB 01H DUP (?) ; `CBlender_Particle::Load'::`12'::ignore_always
_BSS	ENDS
;	COMDAT ?ignore_always@?4??Load@CBlender_Particle@@UAEXAAVIReader@@G@Z@4_NA
_BSS	SEGMENT
?ignore_always@?4??Load@CBlender_Particle@@UAEXAAVIReader@@G@Z@4_NA DB 01H DUP (?) ; `CBlender_Particle::Load'::`5'::ignore_always
_BSS	ENDS
;	COMDAT ??_7CBlender_Particle@@6B@
CONST	SEGMENT
??_7CBlender_Particle@@6B@ DD FLAT:??_R4CBlender_Particle@@6B@ ; CBlender_Particle::`vftable'
	DD	FLAT:?getName@IBlender@@UAEPBDXZ
	DD	FLAT:?getComment@CBlender_Particle@@UAEPBDXZ
	DD	FLAT:?Save@CBlender_Particle@@UAEXAAVIWriter@@@Z
	DD	FLAT:?Load@CBlender_Particle@@UAEXAAVIReader@@G@Z
	DD	FLAT:?canBeDetailed@IBlender@@UAEHXZ
	DD	FLAT:?canBeLMAPped@CBlender_Particle@@UAEHXZ
	DD	FLAT:?Compile@CBlender_Particle@@UAEXAAVCBlender_Compile@@@Z
	DD	FLAT:??_ECBlender_Particle@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R4CBlender_Particle@@6B@
rdata$r	SEGMENT
??_R4CBlender_Particle@@6B@ DD 00H			; CBlender_Particle::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCBlender_Particle@@@8
	DD	FLAT:??_R3CBlender_Particle@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCBlender_Particle@@@8
data$rs	SEGMENT
??_R0?AVCBlender_Particle@@@8 DD FLAT:??_7type_info@@6B@ ; CBlender_Particle `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCBlender_Particle@@', 00H
data$rs	ENDS
;	COMDAT ??_R3CBlender_Particle@@8
rdata$r	SEGMENT
??_R3CBlender_Particle@@8 DD 00H			; CBlender_Particle::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CBlender_Particle@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CBlender_Particle@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CBlender_Particle@@8 DD FLAT:??_R0?AVCBlender_Particle@@@8 ; CBlender_Particle::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CBlender_Particle@@8
rdata$r	ENDS
;	COMDAT ??_R2CBlender_Particle@@8
rdata$r	SEGMENT
??_R2CBlender_Particle@@8 DD FLAT:??_R1A@?0A@EA@CBlender_Particle@@8 ; CBlender_Particle::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IBlender@@8
	DD	FLAT:??_R1A@?0A@EA@CPropertyBase@@8
rdata$r	ENDS
;	COMDAT ??_C@_08PKKGOGAD@particle@
CONST	SEGMENT
??_C@_08PKKGOGAD@particle@ DB 'particle', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@OMCBIJFA@xrPID_INTEGER?$DN?$DNxrPREAD?$CIfs?$CJ@
CONST	SEGMENT
??_C@_0BL@OMCBIJFA@xrPID_INTEGER?$DN?$DNxrPREAD?$CIfs?$CJ@ DB 'xrPID_INTE'
	DB	'GER==xrPREAD(fs)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@IPOGOJGI@xrPID_TOKEN?$DN?$DNxrPREAD?$CIfs?$CJ@
CONST	SEGMENT
??_C@_0BJ@IPOGOJGI@xrPID_TOKEN?$DN?$DNxrPREAD?$CIfs?$CJ@ DB 'xrPID_TOKEN='
	DB	'=xrPREAD(fs)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@PBLHDGCB@I?3?2Vitalya?2mine?2NSProjectX?2laye@
CONST	SEGMENT
??_C@_0EA@PBLHDGCB@I?3?2Vitalya?2mine?2NSProjectX?2laye@ DB 'I:\Vitalya\m'
	DB	'ine\NSProjectX\layers\xrRender\Blender_Particle.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@IMABICJM@CBlender_Particle?3?3Load@
CONST	SEGMENT
??_C@_0BI@IMABICJM@CBlender_Particle?3?3Load@ DB 'CBlender_Particle::Load'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_09HNLHEELD@Alpha?5ref@
CONST	SEGMENT
??_C@_09HNLHEELD@Alpha?5ref@ DB 'Alpha ref', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MIAJBJBP@Texture?5clamp@
CONST	SEGMENT
??_C@_0O@MIAJBJBP@Texture?5clamp@ DB 'Texture clamp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09EKBCGBOF@ALPHA?9ADD@
CONST	SEGMENT
??_C@_09EKBCGBOF@ALPHA?9ADD@ DB 'ALPHA-ADD', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06EAOMOBGC@MUL_2X@
CONST	SEGMENT
??_C@_06EAOMOBGC@MUL_2X@ DB 'MUL_2X', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03IBHOEMFB@MUL@
CONST	SEGMENT
??_C@_03IBHOEMFB@MUL@ DB 'MUL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03BOJFLAKG@ADD@
CONST	SEGMENT
??_C@_03BOJFLAKG@ADD@ DB 'ADD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05NDHFMCLH@BLEND@
CONST	SEGMENT
??_C@_05NDHFMCLH@BLEND@ DB 'BLEND', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03KPIFFHNE@SET@
CONST	SEGMENT
??_C@_03KPIFFHNE@SET@ DB 'SET', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08MHMPAKAC@Blending@
CONST	SEGMENT
??_C@_08MHMPAKAC@Blending@ DB 'Blending', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09JNOBNNGJ@particles@
CONST	SEGMENT
??_C@_09JNOBNNGJ@particles@ DB 'particles', 00H		; `string'
PUBLIC	??0xrP_TOKEN@@QAE@XZ				; xrP_TOKEN::xrP_TOKEN
PUBLIC	??0xrP_Integer@@QAE@XZ				; xrP_Integer::xrP_Integer
PUBLIC	?Compile@CBlender_Particle@@UAEXAAVCBlender_Compile@@@Z ; CBlender_Particle::Compile
PUBLIC	?Load@CBlender_Particle@@UAEXAAVIReader@@G@Z	; CBlender_Particle::Load
PUBLIC	?Save@CBlender_Particle@@UAEXAAVIWriter@@@Z	; CBlender_Particle::Save
PUBLIC	??1CBlender_Particle@@UAE@XZ			; CBlender_Particle::~CBlender_Particle
PUBLIC	??_GCBlender_Particle@@UAEPAXI@Z		; CBlender_Particle::`scalar deleting destructor'
PUBLIC	??0CBlender_Particle@@QAE@XZ			; CBlender_Particle::CBlender_Particle
PUBLIC	?canBeLMAPped@CBlender_Particle@@UAEHXZ		; CBlender_Particle::canBeLMAPped
PUBLIC	?getComment@CBlender_Particle@@UAEPBDXZ		; CBlender_Particle::getComment
EXTRN	??_ECBlender_Particle@@UAEPAXI@Z:PROC		; CBlender_Particle::`vector deleting destructor'
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\Blender_Particle.h
;	COMDAT ?getComment@CBlender_Particle@@UAEPBDXZ
_TEXT	SEGMENT
?getComment@CBlender_Particle@@UAEPBDXZ PROC		; CBlender_Particle::getComment, COMDAT
; _this$ = ecx

; 15   : 	virtual		LPCSTR		getComment()	{ return "particles";	}

	mov	eax, OFFSET ??_C@_09JNOBNNGJ@particles@
	ret	0
?getComment@CBlender_Particle@@UAEPBDXZ ENDP		; CBlender_Particle::getComment
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\Blender_Particle.h
;	COMDAT ?canBeLMAPped@CBlender_Particle@@UAEHXZ
_TEXT	SEGMENT
?canBeLMAPped@CBlender_Particle@@UAEHXZ PROC		; CBlender_Particle::canBeLMAPped, COMDAT
; _this$ = ecx

; 16   : 	virtual		BOOL		canBeLMAPped()	{ return FALSE;			}

	xor	eax, eax
	ret	0
?canBeLMAPped@CBlender_Particle@@UAEHXZ ENDP		; CBlender_Particle::canBeLMAPped
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\Blender_Particle.cpp
; File I:\Vitalya\mine\NSProjectX\xrEngine\properties.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\Blender_Particle.cpp
_TEXT	SEGMENT
??0CBlender_Particle@@QAE@XZ PROC			; CBlender_Particle::CBlender_Particle
; _this$ = ecx

; 13   : {

	push	esi
	mov	esi, ecx
	call	DWORD PTR __imp_??0IBlender@@QAE@XZ
	mov	DWORD PTR [esi], OFFSET ??_7CBlender_Particle@@6B@

; 15   : 	description.version	= 0;

	xor	eax, eax
; File I:\Vitalya\mine\NSProjectX\xrEngine\properties.h

; 37   : 	xrP_Integer() : value(0), min(0), max(255) {}

	mov	DWORD PTR [esi+336], 0

; 67   : 	xrP_TOKEN() : IDselected(0), Count(0) {}

	mov	DWORD PTR [esi+328], 0

; 37   : 	xrP_Integer() : value(0), min(0), max(255) {}

	mov	DWORD PTR [esi+340], 255		; 000000ffH
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\Blender_Particle.cpp

; 15   : 	description.version	= 0;

	mov	WORD PTR [esi+176], ax

; 16   : 	oBlend.Count		= oBlendCount;
; 17   : 	oBlend.IDselected	= 0;

	mov	DWORD PTR [esi+324], eax

; 18   : 	oAREF.value			= 32;
; 19   : 	oAREF.min			= 0;

	mov	DWORD PTR [esi+336], eax

; 20   : 	oAREF.max			= 255;
; 21   : 	oClamp.value		= TRUE;
; 22   : }

	mov	eax, esi
	mov	DWORD PTR [esi+4], 1229147205		; 49434c45H
	mov	DWORD PTR [esi+8], 1346458196		; 50415254H
	mov	DWORD PTR [esi+328], 6
	mov	DWORD PTR [esi+332], 32			; 00000020H
	mov	DWORD PTR [esi+340], 255		; 000000ffH
	mov	DWORD PTR [esi+344], 1
	pop	esi
	ret	0
??0CBlender_Particle@@QAE@XZ ENDP			; CBlender_Particle::CBlender_Particle
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\Blender_Particle.cpp
;	COMDAT ??_GCBlender_Particle@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCBlender_Particle@@UAEPAXI@Z PROC			; CBlender_Particle::`scalar deleting destructor', COMDAT
; _this$ = ecx

; 25   : {

	push	esi
	mov	esi, ecx
	mov	DWORD PTR [esi], OFFSET ??_7CBlender_Particle@@6B@

; 26   : 	
; 27   : }

	call	DWORD PTR __imp_??1IBlender@@UAE@XZ
	test	BYTE PTR ___flags$[esp], 1
	je	SHORT $LN6@scalar
	push	348					; 0000015cH
	push	esi
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN6@scalar:
	mov	eax, esi
	pop	esi
	ret	4
??_GCBlender_Particle@@UAEPAXI@Z ENDP			; CBlender_Particle::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\Blender_Particle.cpp
_TEXT	SEGMENT
??1CBlender_Particle@@UAE@XZ PROC			; CBlender_Particle::~CBlender_Particle
; _this$ = ecx

; 25   : {

	mov	DWORD PTR [ecx], OFFSET ??_7CBlender_Particle@@6B@

; 26   : 	
; 27   : }

	jmp	DWORD PTR __imp_??1IBlender@@UAE@XZ
??1CBlender_Particle@@UAE@XZ ENDP			; CBlender_Particle::~CBlender_Particle
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\Blender_Particle.cpp
; File I:\Vitalya\mine\NSProjectX\xrEngine\properties.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\Blender_Particle.cpp
; File I:\Vitalya\mine\NSProjectX\xrEngine\properties.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\Blender_Particle.cpp
; File I:\Vitalya\mine\NSProjectX\xrEngine\properties.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\Blender_Particle.cpp
; File I:\Vitalya\mine\NSProjectX\xrEngine\properties.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\Blender_Particle.cpp
; File I:\Vitalya\mine\NSProjectX\xrEngine\properties.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\Blender_Particle.cpp
_TEXT	SEGMENT
_I$ = -68						; size = 68
_fs$ = 8						; size = 4
?Save@CBlender_Particle@@UAEXAAVIWriter@@@Z PROC	; CBlender_Particle::Save
; _this$ = ecx

; 30   : {

	sub	esp, 68					; 00000044H
	push	ebx
	push	esi

; 31   : 	IBlender::Save	(fs);

	mov	esi, DWORD PTR _fs$[esp+72]
	push	edi
	push	esi
	mov	edi, ecx
	call	DWORD PTR __imp_?Save@IBlender@@UAEXAAVIWriter@@@Z
; File I:\Vitalya\mine\NSProjectX\xrEngine\properties.h

; 101  : 	fs.w_u32(ID);

	push	7
	mov	ecx, esi
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\Blender_Particle.cpp

; 35   : 	xrPWRITE_PROP	(fs,"Blending",	xrPID_TOKEN,     oBlend);

	lea	ebx, DWORD PTR [edi+324]
; File I:\Vitalya\mine\NSProjectX\xrEngine\properties.h

; 101  : 	fs.w_u32(ID);

	call	DWORD PTR __imp_?w_u32@IWriter@@QAEXI@Z

; 102  : 	fs.w_stringZ(name);

	push	OFFSET ??_C@_08MHMPAKAC@Blending@
	mov	ecx, esi
	call	DWORD PTR __imp_?w_stringZ@IWriter@@QAEXPBD@Z

; 103  : 	if (data && size)	fs.w(data, size);

	test	ebx, ebx
	je	SHORT $LN4@Save
	mov	eax, DWORD PTR [esi]
	mov	ecx, esi
	push	8
	push	ebx
	call	DWORD PTR [eax+12]
$LN4@Save:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\Blender_Particle.cpp

; 36   : 	I.ID = 0; strcpy(I.str,"SET");			fs.w		(&I,sizeof(I));

	mov	eax, DWORD PTR [esi]
	lea	ecx, DWORD PTR _I$[esp+80]
	push	68					; 00000044H
	push	ecx
	mov	ecx, esi
	mov	DWORD PTR _I$[esp+88], 0
	mov	DWORD PTR _I$[esp+92], 5522771		; 00544553H
	call	DWORD PTR [eax+12]

; 37   : 	I.ID = 1; strcpy(I.str,"BLEND");		fs.w		(&I,sizeof(I));

	mov	eax, DWORD PTR ??_C@_05NDHFMCLH@BLEND@
	lea	ecx, DWORD PTR _I$[esp+80]
	mov	DWORD PTR _I$[esp+84], eax
	movzx	eax, WORD PTR ??_C@_05NDHFMCLH@BLEND@+4
	mov	WORD PTR _I$[esp+88], ax
	mov	eax, DWORD PTR [esi]
	push	68					; 00000044H
	push	ecx
	mov	ecx, esi
	mov	DWORD PTR _I$[esp+88], 1
	call	DWORD PTR [eax+12]

; 38   : 	I.ID = 2; strcpy(I.str,"ADD");			fs.w		(&I,sizeof(I));

	mov	eax, DWORD PTR [esi]
	lea	ecx, DWORD PTR _I$[esp+80]
	push	68					; 00000044H
	push	ecx
	mov	ecx, esi
	mov	DWORD PTR _I$[esp+88], 2
	mov	DWORD PTR _I$[esp+92], 4473921		; 00444441H
	call	DWORD PTR [eax+12]

; 39   : 	I.ID = 3; strcpy(I.str,"MUL");			fs.w		(&I,sizeof(I));

	mov	eax, DWORD PTR [esi]
	lea	ecx, DWORD PTR _I$[esp+80]
	push	68					; 00000044H
	push	ecx
	mov	ecx, esi
	mov	DWORD PTR _I$[esp+88], 3
	mov	DWORD PTR _I$[esp+92], 5002573		; 004c554dH
	call	DWORD PTR [eax+12]

; 40   : 	I.ID = 4; strcpy(I.str,"MUL_2X");		fs.w		(&I,sizeof(I));

	mov	eax, DWORD PTR ??_C@_06EAOMOBGC@MUL_2X@
	lea	ecx, DWORD PTR _I$[esp+80]
	mov	DWORD PTR _I$[esp+84], eax
	movzx	eax, WORD PTR ??_C@_06EAOMOBGC@MUL_2X@+4
	mov	WORD PTR _I$[esp+88], ax
	mov	al, BYTE PTR ??_C@_06EAOMOBGC@MUL_2X@+6
	mov	BYTE PTR _I$[esp+90], al
	mov	eax, DWORD PTR [esi]
	push	68					; 00000044H
	push	ecx
	mov	ecx, esi
	mov	DWORD PTR _I$[esp+88], 4
	call	DWORD PTR [eax+12]

; 41   : 	I.ID = 5; strcpy(I.str,"ALPHA-ADD");	fs.w		(&I,sizeof(I));

	mov	eax, DWORD PTR ??_C@_09EKBCGBOF@ALPHA?9ADD@
	lea	ecx, DWORD PTR _I$[esp+80]
	mov	DWORD PTR _I$[esp+84], eax
	mov	eax, DWORD PTR ??_C@_09EKBCGBOF@ALPHA?9ADD@+4
	mov	DWORD PTR _I$[esp+88], eax
	movzx	eax, WORD PTR ??_C@_09EKBCGBOF@ALPHA?9ADD@+8
	mov	WORD PTR _I$[esp+92], ax
	mov	eax, DWORD PTR [esi]
	push	68					; 00000044H
	push	ecx
	mov	ecx, esi
	mov	DWORD PTR _I$[esp+88], 5
	call	DWORD PTR [eax+12]
; File I:\Vitalya\mine\NSProjectX\xrEngine\properties.h

; 101  : 	fs.w_u32(ID);

	push	6
	mov	ecx, esi
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\Blender_Particle.cpp

; 44   : 	xrPWRITE_PROP		(fs,"Texture clamp",xrPID_BOOL,		oClamp);

	lea	ebx, DWORD PTR [edi+344]
; File I:\Vitalya\mine\NSProjectX\xrEngine\properties.h

; 101  : 	fs.w_u32(ID);

	call	DWORD PTR __imp_?w_u32@IWriter@@QAEXI@Z

; 102  : 	fs.w_stringZ(name);

	push	OFFSET ??_C@_0O@MIAJBJBP@Texture?5clamp@
	mov	ecx, esi
	call	DWORD PTR __imp_?w_stringZ@IWriter@@QAEXPBD@Z

; 103  : 	if (data && size)	fs.w(data, size);

	test	ebx, ebx
	je	SHORT $LN7@Save
	mov	eax, DWORD PTR [esi]
	mov	ecx, esi
	push	4
	push	ebx
	call	DWORD PTR [eax+12]
$LN7@Save:

; 101  : 	fs.w_u32(ID);

	push	4
	mov	ecx, esi
	call	DWORD PTR __imp_?w_u32@IWriter@@QAEXI@Z

; 102  : 	fs.w_stringZ(name);

	push	OFFSET ??_C@_09HNLHEELD@Alpha?5ref@
	mov	ecx, esi
	call	DWORD PTR __imp_?w_stringZ@IWriter@@QAEXPBD@Z
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\Blender_Particle.cpp

; 45   : 	xrPWRITE_PROP		(fs,"Alpha ref",	xrPID_INTEGER,	oAREF);

	add	edi, 332				; 0000014cH
; File I:\Vitalya\mine\NSProjectX\xrEngine\properties.h

; 103  : 	if (data && size)	fs.w(data, size);

	je	SHORT $LN10@Save
	mov	eax, DWORD PTR [esi]
	mov	ecx, esi
	push	12					; 0000000cH
	push	edi
	call	DWORD PTR [eax+12]
$LN10@Save:
	pop	edi
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\Blender_Particle.cpp

; 46   : }

	pop	esi
	pop	ebx
	add	esp, 68					; 00000044H
	ret	4
?Save@CBlender_Particle@@UAEXAAVIWriter@@@Z ENDP	; CBlender_Particle::Save
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\Blender_Particle.cpp
; File I:\Vitalya\mine\NSProjectX\xrEngine\properties.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\Blender_Particle.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\FS.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\Blender_Particle.cpp
; File I:\Vitalya\mine\NSProjectX\xrEngine\properties.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\Blender_Particle.cpp
; File I:\Vitalya\mine\NSProjectX\xrEngine\properties.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\Blender_Particle.cpp
_TEXT	SEGMENT
_fs$ = 8						; size = 4
_version$ = 12						; size = 2
?Load@CBlender_Particle@@UAEXAAVIReader@@G@Z PROC	; CBlender_Particle::Load
; _this$ = ecx

; 49   : {

	push	ebx
	push	ebp
	push	esi
	push	edi

; 50   : 	IBlender::Load		(fs,version);

	push	DWORD PTR _version$[esp+12]
	mov	edi, DWORD PTR _fs$[esp+16]
	mov	ebx, ecx
	push	edi
	call	DWORD PTR __imp_?Load@IBlender@@UAEXAAVIReader@@G@Z

; 52   : 	xrPREAD_PROP		(fs,xrPID_TOKEN,		oBlend);	oBlend.Count =   oBlendCount;

	cmp	BYTE PTR ?ignore_always@?4??Load@CBlender_Particle@@UAEXAAVIReader@@G@Z@4_NA, 0
	mov	ebp, DWORD PTR __imp_?fail@xrDebug@@QAEXPBD0H0AA_N@Z
	jne	SHORT $LN2@Load
; File I:\Vitalya\mine\NSProjectX\xrEngine\properties.h

; 118  : 	u32 T = fs.r_u32();

	mov	ecx, edi
	call	DWORD PTR __imp_?r_u32@?$IReaderBase@VIReader@@@@QAEIXZ

; 119  : 	fs.skip_stringZ();

	mov	ecx, edi
	mov	esi, eax
	call	DWORD PTR __imp_?skip_stringZ@IReader@@QAEXXZ
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\Blender_Particle.cpp

; 52   : 	xrPREAD_PROP		(fs,xrPID_TOKEN,		oBlend);	oBlend.Count =   oBlendCount;

	cmp	esi, 7
	je	SHORT $LN2@Load
	mov	ecx, DWORD PTR __imp_?Debug@@3VxrDebug@@A
	push	OFFSET ?ignore_always@?4??Load@CBlender_Particle@@UAEXAAVIReader@@G@Z@4_NA
	push	OFFSET ??_C@_0BI@IMABICJM@CBlender_Particle?3?3Load@
	push	52					; 00000034H
	push	OFFSET ??_C@_0EA@PBLHDGCB@I?3?2Vitalya?2mine?2NSProjectX?2laye@
	push	OFFSET ??_C@_0BJ@IPOGOJGI@xrPID_TOKEN?$DN?$DNxrPREAD?$CIfs?$CJ@
	call	ebp
$LN2@Load:
	push	8
	lea	eax, DWORD PTR [ebx+324]
	mov	ecx, edi
	push	eax
	call	DWORD PTR __imp_?r@IReader@@QAEXPAXH@Z
	mov	eax, DWORD PTR [ebx+328]
	mov	ecx, eax
	shl	ecx, 4
	add	ecx, eax
	shl	ecx, 2
; File I:\Vitalya\mine\NSProjectX\xrCore\FS.h

; 265  : 	IC void			advance		(int cnt)		{	Pos+=cnt;VERIFY((Pos<=Size) && (Pos>=0));};

	add	DWORD PTR [edi+8], ecx
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\Blender_Particle.cpp

; 52   : 	xrPREAD_PROP		(fs,xrPID_TOKEN,		oBlend);	oBlend.Count =   oBlendCount;

	mov	DWORD PTR [ebx+328], 6

; 53   : 	xrPREAD_PROP		(fs,xrPID_BOOL,			oClamp);

	cmp	BYTE PTR ?ignore_always@?M@??Load@CBlender_Particle@@UAEXAAVIReader@@G@Z@4_NA, 0
	jne	SHORT $LN7@Load
; File I:\Vitalya\mine\NSProjectX\xrEngine\properties.h

; 118  : 	u32 T = fs.r_u32();

	mov	ecx, edi
	call	DWORD PTR __imp_?r_u32@?$IReaderBase@VIReader@@@@QAEIXZ

; 119  : 	fs.skip_stringZ();

	mov	ecx, edi
	mov	esi, eax
	call	DWORD PTR __imp_?skip_stringZ@IReader@@QAEXXZ
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\Blender_Particle.cpp

; 53   : 	xrPREAD_PROP		(fs,xrPID_BOOL,			oClamp);

	cmp	esi, 6
	je	SHORT $LN7@Load
	mov	ecx, DWORD PTR __imp_?Debug@@3VxrDebug@@A
	push	OFFSET ?ignore_always@?M@??Load@CBlender_Particle@@UAEXAAVIReader@@G@Z@4_NA
	push	OFFSET ??_C@_0BI@IMABICJM@CBlender_Particle?3?3Load@
	push	53					; 00000035H
	push	OFFSET ??_C@_0EA@PBLHDGCB@I?3?2Vitalya?2mine?2NSProjectX?2laye@
	push	OFFSET ??_C@_0BI@FFCKKNMB@xrPID_BOOL?$DN?$DNxrPREAD?$CIfs?$CJ@
	call	ebp
$LN7@Load:
	push	4
	lea	eax, DWORD PTR [ebx+344]
	mov	ecx, edi
	push	eax
	call	DWORD PTR __imp_?r@IReader@@QAEXPAXH@Z

; 54   : 	xrPREAD_PROP		(fs,xrPID_INTEGER,		oAREF);

	cmp	BYTE PTR ?ignore_always@?BD@??Load@CBlender_Particle@@UAEXAAVIReader@@G@Z@4_NA, 0
	jne	SHORT $LN12@Load
; File I:\Vitalya\mine\NSProjectX\xrEngine\properties.h

; 118  : 	u32 T = fs.r_u32();

	mov	ecx, edi
	call	DWORD PTR __imp_?r_u32@?$IReaderBase@VIReader@@@@QAEIXZ

; 119  : 	fs.skip_stringZ();

	mov	ecx, edi
	mov	esi, eax
	call	DWORD PTR __imp_?skip_stringZ@IReader@@QAEXXZ
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\Blender_Particle.cpp

; 54   : 	xrPREAD_PROP		(fs,xrPID_INTEGER,		oAREF);

	cmp	esi, 4
	je	SHORT $LN12@Load
	mov	ecx, DWORD PTR __imp_?Debug@@3VxrDebug@@A
	push	OFFSET ?ignore_always@?BD@??Load@CBlender_Particle@@UAEXAAVIReader@@G@Z@4_NA
	push	OFFSET ??_C@_0BI@IMABICJM@CBlender_Particle?3?3Load@
	push	54					; 00000036H
	push	OFFSET ??_C@_0EA@PBLHDGCB@I?3?2Vitalya?2mine?2NSProjectX?2laye@
	push	OFFSET ??_C@_0BL@OMCBIJFA@xrPID_INTEGER?$DN?$DNxrPREAD?$CIfs?$CJ@
	call	ebp
$LN12@Load:
	push	12					; 0000000cH
	lea	eax, DWORD PTR [ebx+332]
	mov	ecx, edi
	push	eax
	call	DWORD PTR __imp_?r@IReader@@QAEXPAXH@Z
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 55   : }

	ret	8
?Load@CBlender_Particle@@UAEXAAVIReader@@G@Z ENDP	; CBlender_Particle::Load
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\Blender_Particle.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\Blender_Particle.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\Blender_Particle.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\Blender_Particle.cpp
_TEXT	SEGMENT
_C$ = 8							; size = 4
?Compile@CBlender_Particle@@UAEXAAVCBlender_Compile@@@Z PROC ; CBlender_Particle::Compile
; _this$ = ecx

; 59   : {

	push	esi

; 60   : 	IBlender::Compile		(C);

	mov	esi, DWORD PTR _C$[esp]
	push	edi
	push	esi
	mov	edi, ecx
	call	DWORD PTR __imp_?Compile@IBlender@@UAEXAAVCBlender_Compile@@@Z

; 61   : 	switch (oBlend.IDselected)

	mov	eax, DWORD PTR [edi+324]
	cmp	eax, 5
	ja	SHORT $LN14@Compile
	jmp	DWORD PTR $LN37@Compile[eax*4]
$LN4@Compile:

; 62   : 	{
; 63   : 		case 0:	C.r_Pass	("particle","particle",TRUE,	TRUE,TRUE,	FALSE,	D3DBLEND_ONE,		D3DBLEND_ZERO,			TRUE,200);	break;	// SET

	push	200					; 000000c8H
	push	1
	push	1
	push	2
	push	0
	push	1
	push	1
	push	1
	jmp	SHORT $LN38@Compile
$LN5@Compile:

; 64   : 		case 1: C.r_Pass	("particle","particle",FALSE,	TRUE,FALSE,	TRUE,	D3DBLEND_SRCALPHA,	D3DBLEND_INVSRCALPHA,	TRUE,0);	break;	// BLEND

	push	0
	push	1
	push	6
	jmp	SHORT $LN39@Compile
$LN6@Compile:

; 65   : 		case 2:	C.r_Pass	("particle","particle",FALSE,	TRUE,FALSE,	TRUE,	D3DBLEND_ONE,		D3DBLEND_ONE,			TRUE,0);	break;	// ADD

	push	0
	push	1
	push	2
	push	2
	jmp	SHORT $LN40@Compile
$LN7@Compile:

; 66   : 		case 3:	C.r_Pass	("particle","particle",FALSE,	TRUE,FALSE,	TRUE,	D3DBLEND_DESTCOLOR,	D3DBLEND_ZERO,			TRUE,0);	break;	// MUL

	push	0
	push	1
	push	1
	push	9
	jmp	SHORT $LN40@Compile
$LN8@Compile:

; 67   : 		case 4:	C.r_Pass	("particle","particle",FALSE,	TRUE,FALSE,	TRUE,	D3DBLEND_DESTCOLOR,	D3DBLEND_SRCCOLOR,		TRUE,0);	break;	// MUL_2X

	push	0
	push	1
	push	3
	push	9
	jmp	SHORT $LN40@Compile
$LN9@Compile:

; 68   : 		case 5:	C.r_Pass	("particle","particle",FALSE,	TRUE,FALSE,	TRUE,	D3DBLEND_SRCALPHA,	D3DBLEND_ONE,			TRUE,0);	break;	// ALPHA-ADD

	push	0
	push	1
	push	2
$LN39@Compile:
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h

; 138  : 	reference operator[]		(size_type _Pos)					{ {VERIFY(_Pos<size());} return (*(begin() + _Pos)); }

	push	5
$LN40@Compile:
	push	1
	push	0
	push	1
	push	0
$LN38@Compile:
	push	OFFSET ??_C@_08PKKGOGAD@particle@
	push	OFFSET ??_C@_08PKKGOGAD@particle@
	mov	ecx, esi
	call	DWORD PTR __imp_?r_Pass@CBlender_Compile@@QAEXPBD0_NHHHW4_D3DBLEND@@2HI@Z
$LN14@Compile:
	mov	ecx, DWORD PTR [esi]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\Blender_Particle.cpp

; 70   : 	C.r_Sampler				("s_base",	C.L_textures[0],false,oClamp.value?D3DTADDRESS_CLAMP:D3DTADDRESS_WRAP);

	xor	eax, eax
	cmp	DWORD PTR [edi+344], eax
	push	2
	setne	al
	push	2
	push	2
	lea	eax, DWORD PTR [eax*2+1]
	push	eax
	push	0
	push	ecx
	mov	edx, esp
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 59   : 						shared_str	(shared_str const &rhs)			{	p_ = 0;	_set(rhs);								}

	mov	DWORD PTR [edx], 0

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	eax, DWORD PTR [ecx]
	test	eax, eax
	je	SHORT $LN35@Compile
	inc	DWORD PTR [eax]
	mov	ecx, DWORD PTR [edx]

; 50   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	test	ecx, ecx
	je	SHORT $LN35@Compile
	dec	DWORD PTR [ecx]
$LN35@Compile:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\Blender_Particle.cpp

; 70   : 	C.r_Sampler				("s_base",	C.L_textures[0],false,oClamp.value?D3DTADDRESS_CLAMP:D3DTADDRESS_WRAP);

	push	OFFSET ??_C@_06GMJOKNLF@s_base@
	mov	ecx, esi
; File I:\Vitalya\mine\NSProjectX\xrCore\xrstring.h

; 53   : 	void				_set		(shared_str const &rhs)			{	str_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	DWORD PTR [edx], eax
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\Blender_Particle.cpp

; 70   : 	C.r_Sampler				("s_base",	C.L_textures[0],false,oClamp.value?D3DTADDRESS_CLAMP:D3DTADDRESS_WRAP);

	call	DWORD PTR __imp_?r_Sampler@CBlender_Compile@@QAEIPBDVshared_str@@_NIIII@Z

; 71   : 	C.r_End					();

	mov	ecx, esi
	call	DWORD PTR __imp_?r_End@CBlender_Compile@@QAEXXZ

; 72   : }	

	pop	edi
	pop	esi
	ret	4
$LN37@Compile:
	DD	$LN4@Compile
	DD	$LN5@Compile
	DD	$LN6@Compile
	DD	$LN7@Compile
	DD	$LN8@Compile
	DD	$LN9@Compile
?Compile@CBlender_Particle@@UAEXAAVCBlender_Compile@@@Z ENDP ; CBlender_Particle::Compile
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrEngine\properties.h
;	COMDAT ??0xrP_Integer@@QAE@XZ
_TEXT	SEGMENT
??0xrP_Integer@@QAE@XZ PROC				; xrP_Integer::xrP_Integer, COMDAT
; _this$ = ecx

; 37   : 	xrP_Integer() : value(0), min(0), max(255) {}

	mov	DWORD PTR [ecx], 0
	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 255			; 000000ffH
	ret	0
??0xrP_Integer@@QAE@XZ ENDP				; xrP_Integer::xrP_Integer
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrEngine\properties.h
;	COMDAT ??0xrP_TOKEN@@QAE@XZ
_TEXT	SEGMENT
??0xrP_TOKEN@@QAE@XZ PROC				; xrP_TOKEN::xrP_TOKEN, COMDAT
; _this$ = ecx

; 67   : 	xrP_TOKEN() : IDselected(0), Count(0) {}

	mov	DWORD PTR [ecx], 0
	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	ret	0
??0xrP_TOKEN@@QAE@XZ ENDP				; xrP_TOKEN::xrP_TOKEN
_TEXT	ENDS
END
