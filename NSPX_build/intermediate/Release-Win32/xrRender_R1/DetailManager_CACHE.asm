; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30146.0 

	TITLE	i:\vitalya\mine\nsprojectx\nspx_build\intermediate\release-win32\xrrender_r1\detailmanager_cache.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	?cg2w_X@CDetailManager@@QAEHH@Z			; CDetailManager::cg2w_X
PUBLIC	?cg2w_Z@CDetailManager@@QAEHH@Z			; CDetailManager::cg2w_Z
PUBLIC	?r_ybase@DetailSlot@@QAEMXZ			; DetailSlot::r_ybase
PUBLIC	?r_yheight@DetailSlot@@QAEMXZ			; DetailSlot::r_yheight
PUBLIC	?r_id@DetailSlot@@QAEEI@Z			; DetailSlot::r_id
PUBLIC	?getcenter@?$_box3@M@@QBEABV1@AAU?$_vector3@M@@@Z ; _box3<float>::getcenter
PUBLIC	?w_id@DetailSlot@@QAEXIE@Z			; DetailSlot::w_id
PUBLIC	?_sqrt@@YAMM@Z					; _sqrt
PUBLIC	_sqrtf
PUBLIC	??$_min@M@@YAMMM@Z				; _min<float>
PUBLIC	??$_max@M@@YAMMM@Z				; _max<float>
PUBLIC	?min@?$_vector3@M@@QAEAAU1@ABU1@@Z		; _vector3<float>::min
PUBLIC	?max@?$_vector3@M@@QAEAAU1@ABU1@@Z		; _vector3<float>::max
PUBLIC	?clear@?$vector@PAUSlotItem@CDetailManager@@V?$xalloc@PAUSlotItem@CDetailManager@@@@@std@@QAEXXZ ; std::vector<CDetailManager::SlotItem *,xalloc<CDetailManager::SlotItem *> >::clear
PUBLIC	?add@?$_vector3@M@@QAEAAU1@M@Z			; _vector3<float>::add
PUBLIC	?sub@?$_vector3@M@@QAEAAU1@M@Z			; _vector3<float>::sub
PUBLIC	?distance_to@?$_vector3@M@@QBEMABU1@@Z		; _vector3<float>::distance_to
PUBLIC	?modify@?$_box3@M@@QAEAAV1@ABU?$_vector3@M@@@Z	; _box3<float>::modify
PUBLIC	?clear_and_free@?$xr_vector@PAUSlotItem@CDetailManager@@V?$xalloc@PAUSlotItem@CDetailManager@@@@@@QAEXXZ ; xr_vector<CDetailManager::SlotItem *,xalloc<CDetailManager::SlotItem *> >::clear_and_free
PUBLIC	?access@?$poolSS@USlotItem@CDetailManager@@$0BAAA@@@AAEPAPAUSlotItem@CDetailManager@@PAU23@@Z ; poolSS<CDetailManager::SlotItem,4096>::access
PUBLIC	?grow@?$_box3@M@@QAEAAV1@M@Z			; _box3<float>::grow
PUBLIC	?merge@?$_box3@M@@QAEAAV1@ABV1@@Z		; _box3<float>::merge
PUBLIC	?getsphere@?$_box3@M@@QBEABV1@AAU?$_vector3@M@@AAM@Z ; _box3<float>::getsphere
PUBLIC	?clear@?$xr_vector@PAUSlotItem@CDetailManager@@V?$xalloc@PAUSlotItem@CDetailManager@@@@@@QAEXXZ ; xr_vector<CDetailManager::SlotItem *,xalloc<CDetailManager::SlotItem *> >::clear
PUBLIC	?size@?$svector@PAUSlot@CDetailManager@@$0JGB@@@QBEIXZ ; svector<CDetailManager::Slot *,2401>::size
PUBLIC	?push_back@?$svector@PAUSlot@CDetailManager@@$0JGB@@@QAEXPAUSlot@CDetailManager@@@Z ; svector<CDetailManager::Slot *,2401>::push_back
PUBLIC	??A?$svector@PAUSlot@CDetailManager@@$0JGB@@@QAEAAPAUSlot@CDetailManager@@I@Z ; svector<CDetailManager::Slot *,2401>::operator[]
PUBLIC	?erase@?$svector@PAUSlot@CDetailManager@@$0JGB@@@QAEXI@Z ; svector<CDetailManager::Slot *,2401>::erase
PUBLIC	?destroy@?$poolSS@USlotItem@CDetailManager@@$0BAAA@@@QAEXAAPAUSlotItem@CDetailManager@@@Z ; poolSS<CDetailManager::SlotItem,4096>::destroy
PUBLIC	?QueryDB@CDetailManager@@QAEAAUDetailSlot@@HH@Z	; CDetailManager::QueryDB
PUBLIC	?cache_Task@CDetailManager@@QAEXHHPAUSlot@1@@Z	; CDetailManager::cache_Task
PUBLIC	?cache_Initialize@CDetailManager@@QAEXXZ	; CDetailManager::cache_Initialize
PUBLIC	?cache_Update@CDetailManager@@QAEXHHAAU?$_vector3@M@@H@Z ; CDetailManager::cache_Update
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\DetailManager_CACHE.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\DetailManager_CACHE.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\DetailManager_CACHE.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\DetailManager_CACHE.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\FixedVector.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\DetailManager_CACHE.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\DetailManager_CACHE.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrEngine\vis_common.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrEngine\vis_common.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\DetailManager_CACHE.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\DetailManager_CACHE.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\DetailManager_CACHE.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\DetailManager_CACHE.cpp
_TEXT	SEGMENT
_bNeedMegaUpdate$1$ = -5				; size = 1
_z$1$ = -4						; size = 4
tv4487 = 8						; size = 4
_S$1$ = 8						; size = 4
_v_x$ = 8						; size = 4
tv4486 = 12						; size = 4
_v_z$ = 12						; size = 4
_view$ = 16						; size = 4
_limit$dead$ = 20					; size = 4
?cache_Update@CDetailManager@@QAEXHHAAU?$_vector3@M@@H@Z PROC ; CDetailManager::cache_Update
; _this$ = ecx

; 90   : {

	sub	esp, 12					; 0000000cH
	push	ebx
	mov	ebx, ecx

; 91   : 	bool bNeedMegaUpdate	= (cache_cx!=v_x)||(cache_cz!=v_z);

	mov	ecx, DWORD PTR _v_x$[esp+12]
	push	ebp
	push	esi
	push	edi
	mov	eax, DWORD PTR [ebx+701200]
	cmp	eax, ecx
	jne	SHORT $LN632@cache_Upda
	mov	edx, DWORD PTR _v_z$[esp+24]
	cmp	DWORD PTR [ebx+701204], edx
	jne	SHORT $LN632@cache_Upda
	mov	BYTE PTR _bNeedMegaUpdate$1$[esp+28], 0
	jmp	$LN573@cache_Upda
$LN632@cache_Upda:

; 92   : 	// *****	Cache shift
; 93   : 	while (cache_cx!=v_x)

	mov	BYTE PTR _bNeedMegaUpdate$1$[esp+28], 1
	cmp	eax, ecx
	je	$LN573@cache_Upda

; 94   : 	{
; 95   : 		if (v_x>cache_cx)	{

	cmp	ecx, eax
$LN635@cache_Upda:
	jle	SHORT $LN48@cache_Upda

; 96   : 			// shift matrix to left
; 97   : 			cache_cx ++;

	inc	eax
	lea	ebp, DWORD PTR [ebx+19312]
	xor	edx, edx
	mov	DWORD PTR [ebx+701200], eax
	mov	DWORD PTR _z$1$[esp+28], edx
$LL6@cache_Upda:

; 98   : 			for (int z=0; z<dm_cache_line; z++)
; 99   : 			{
; 100  : 				Slot*	S	= cache[z][0];

	mov	eax, DWORD PTR [ebp]
	lea	esi, DWORD PTR [ebp+4]

; 101  : 				for			(int x=1; x<dm_cache_line; x++)		cache[z][x-1] = cache[z][x];
; 102  : 				cache		[z][dm_cache_line-1] = S;
; 103  : 				cache_Task	(dm_cache_line-1, z, S);

	push	eax
	mov	ecx, 48					; 00000030H
	mov	edi, ebp
	rep movsd
	push	edx
	push	48					; 00000030H
	mov	ecx, ebx
	mov	DWORD PTR [ebp+192], eax
	call	?cache_Task@CDetailManager@@QAEXHHPAUSlot@1@@Z ; CDetailManager::cache_Task
	mov	edx, DWORD PTR _z$1$[esp+28]
	add	ebp, 196				; 000000c4H
	inc	edx
	mov	DWORD PTR _z$1$[esp+28], edx
	cmp	edx, 49					; 00000031H
	jl	SHORT $LL6@cache_Upda

; 104  : 			}
; 105  : 			// R_ASSERT	(cache_Validate());
; 106  : 		} else {

	jmp	SHORT $LN11@cache_Upda
$LN48@cache_Upda:

; 107  : 			// shift matrix to right
; 108  : 			cache_cx --;

	dec	eax
	lea	esi, DWORD PTR [ebx+19504]
	mov	DWORD PTR [ebx+701200], eax
	xor	edi, edi
$LL12@cache_Upda:

; 109  : 			for (int z=0; z<dm_cache_line; z++)
; 110  : 			{
; 111  : 				Slot*	S	= cache[z][dm_cache_line-1];

	mov	ebp, DWORD PTR [esi]
	mov	edx, 48					; 00000030H
	mov	ecx, esi
	npad	1
$LL15@cache_Upda:

; 112  : 				for			(int x=dm_cache_line-1; x>0; x--)	cache[z][x] = cache[z][x-1];

	mov	eax, DWORD PTR [ecx-4]
	lea	ecx, DWORD PTR [ecx-4]
	dec	edx
	mov	DWORD PTR [ecx+4], eax
	test	edx, edx
	jg	SHORT $LL15@cache_Upda

; 113  : 				cache		[z][0]	= S;
; 114  : 				cache_Task	(0,z,S);

	push	ebp
	push	edi
	push	0
	mov	ecx, ebx
	mov	DWORD PTR [esi-192], ebp
	call	?cache_Task@CDetailManager@@QAEXHHPAUSlot@1@@Z ; CDetailManager::cache_Task
	inc	edi
	add	esi, 196				; 000000c4H
	cmp	edi, 49					; 00000031H
	jl	SHORT $LL12@cache_Upda
$LN11@cache_Upda:

; 92   : 	// *****	Cache shift
; 93   : 	while (cache_cx!=v_x)

	mov	eax, DWORD PTR [ebx+701200]
	mov	ecx, DWORD PTR _v_x$[esp+24]
	cmp	ecx, eax
	jne	$LN635@cache_Upda
	mov	BYTE PTR _bNeedMegaUpdate$1$[esp+28], 1
$LN573@cache_Upda:

; 115  : 			}
; 116  : 			// R_ASSERT	(cache_Validate());
; 117  : 		}
; 118  : 	}
; 119  : 	while (cache_cz!=v_z)

	mov	eax, DWORD PTR [ebx+701204]
	mov	ecx, DWORD PTR _v_z$[esp+24]
	cmp	eax, ecx
	je	$LN17@cache_Upda

; 120  : 	{
; 121  : 		if (v_z>cache_cz)	{

	cmp	ecx, eax
$LN636@cache_Upda:
	jle	SHORT $LN50@cache_Upda

; 122  : 			// shift matrix down a bit
; 123  : 			cache_cz ++;

	inc	eax
	lea	esi, DWORD PTR [ebx+28720]
	mov	DWORD PTR [ebx+701204], eax
	xor	edi, edi
$LL20@cache_Upda:

; 124  : 			for (int x=0; x<dm_cache_line; x++)
; 125  : 			{
; 126  : 				Slot*	S	= cache[dm_cache_line-1][x];

	mov	ebp, DWORD PTR [esi]
	mov	edx, 48					; 00000030H
	mov	ecx, esi
$LL23@cache_Upda:

; 127  : 				for			(int z=dm_cache_line-1; z>0; z--)	cache[z][x] = cache[z-1][x];

	mov	eax, DWORD PTR [ecx-196]
	lea	ecx, DWORD PTR [ecx-196]
	dec	edx
	mov	DWORD PTR [ecx+196], eax
	test	edx, edx
	jg	SHORT $LL23@cache_Upda

; 128  : 				cache		[0][x]	= S;
; 129  : 				cache_Task	(x,0,S);

	push	ebp
	push	0
	push	edi
	mov	ecx, ebx
	mov	DWORD PTR [esi-9408], ebp
	call	?cache_Task@CDetailManager@@QAEXHHPAUSlot@1@@Z ; CDetailManager::cache_Task
	inc	edi
	add	esi, 4
	cmp	edi, 49					; 00000031H
	jl	SHORT $LL20@cache_Upda

; 130  : 			}
; 131  : 			// R_ASSERT	(cache_Validate());
; 132  : 		} else {

	jmp	SHORT $LN25@cache_Upda
$LN50@cache_Upda:

; 133  : 			// shift matrix up
; 134  : 			cache_cz --;

	dec	eax
	lea	edi, DWORD PTR [ebx+19312]
	mov	DWORD PTR [ebx+701204], eax
	xor	ebp, ebp
$LL26@cache_Upda:

; 135  : 			for (int x=0; x<dm_cache_line; x++)
; 136  : 			{
; 137  : 				Slot*	S	= cache[0][x];

	mov	eax, DWORD PTR [edi]
	mov	edx, edi
	mov	DWORD PTR _S$1$[esp+24], eax
	mov	esi, 48					; 00000030H
	npad	1
$LL29@cache_Upda:

; 138  : 				for			(int z=1; z<dm_cache_line; z++)		cache[z-1][x] = cache[z][x];

	mov	eax, DWORD PTR [edx+196]
	lea	edx, DWORD PTR [edx+196]
	mov	DWORD PTR [edx-196], eax
	sub	esi, 1
	jne	SHORT $LL29@cache_Upda

; 139  : 				cache		[dm_cache_line-1][x]	= S;

	mov	eax, DWORD PTR _S$1$[esp+24]

; 140  : 				cache_Task	(x,dm_cache_line-1,S);

	mov	ecx, ebx
	push	eax
	push	48					; 00000030H
	push	ebp
	mov	DWORD PTR [edi+9408], eax
	call	?cache_Task@CDetailManager@@QAEXHHPAUSlot@1@@Z ; CDetailManager::cache_Task
	inc	ebp
	add	edi, 4
	cmp	ebp, 49					; 00000031H
	jl	SHORT $LL26@cache_Upda
$LN25@cache_Upda:

; 115  : 			}
; 116  : 			// R_ASSERT	(cache_Validate());
; 117  : 		}
; 118  : 	}
; 119  : 	while (cache_cz!=v_z)

	mov	eax, DWORD PTR [ebx+701204]
	mov	ecx, DWORD PTR _v_z$[esp+24]
	cmp	ecx, eax
	jne	$LN636@cache_Upda
$LN17@cache_Upda:

; 141  : 			}
; 142  : 			// R_ASSERT	(cache_Validate());
; 143  : 		}
; 144  : 	}
; 145  : 
; 146  : 	// Task performer
; 147  : 	BOOL	bFullUnpack		= FALSE;
; 148  : 	if (cache_task.size() == dm_cache_size)	{ limit = dm_cache_size; bFullUnpack=TRUE; }

	mov	ecx, DWORD PTR [ebx+38520]

; 150  : 	for (int iteration=0; cache_task.size() && (iteration<limit); iteration++){

	mov	edx, 2401				; 00000961H
	movss	xmm3, DWORD PTR __real@3f000000
	cmp	ecx, edx
	mov	eax, 7
	mov	DWORD PTR tv4486[esp+24], ecx
	cmovne	edx, eax
	xor	ebp, ebp
	mov	DWORD PTR tv4487[esp+24], edx
	test	ecx, ecx
	je	$LN634@cache_Upda
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 287  : 	{	return (x-v.x)*(x-v.x) + (y-v.y)*(y-v.y) + (z-v.z)*(z-v.z);	}

	mov	eax, ecx
	mov	edi, ecx
	npad	6
$LL32@cache_Upda:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\DetailManager_CACHE.cpp

; 150  : 	for (int iteration=0; cache_task.size() && (iteration<limit); iteration++){

	cmp	ebp, edx
	jge	$LN634@cache_Upda

; 151  : 		u32		best_id		= 0;
; 152  : 		float	best_dist	= flt_max;

	movss	xmm4, DWORD PTR __real@7f7fffff
	xor	esi, esi

; 153  : 
; 154  : 		if (bFullUnpack){

	cmp	ecx, 2401				; 00000961H
	jne	SHORT $LN53@cache_Upda

; 155  : 			best_id			= cache_task.size()-1;

	lea	esi, DWORD PTR [eax-1]

; 156  : 		} else {

	jmp	$LN75@cache_Upda
$LN53@cache_Upda:

; 157  : 			for (u32 entry=0; entry<cache_task.size(); entry++){

	xor	ecx, ecx
	test	eax, eax
	je	$LN75@cache_Upda
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 287  : 	{	return (x-v.x)*(x-v.x) + (y-v.y)*(y-v.y) + (z-v.z)*(z-v.z);	}

	mov	eax, DWORD PTR _view$[esp+24]
	lea	edx, DWORD PTR [ebx+28916]
	movss	xmm5, DWORD PTR [eax]
	movss	xmm6, DWORD PTR [eax+4]
	movss	xmm7, DWORD PTR [eax+8]
$LL35@cache_Upda:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\DetailManager_CACHE.cpp

; 164  : 				S->vis.box.getcenter	(C);

	mov	eax, DWORD PTR [edx]
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h

; 99   : 		C.z = (min.z + max.z) * 0.5f;

	movaps	xmm2, xmm5
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 287  : 	{	return (x-v.x)*(x-v.x) + (y-v.y)*(y-v.y) + (z-v.z)*(z-v.z);	}

	movaps	xmm1, xmm7
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h

; 97   : 		C.x = (min.x + max.x) * 0.5f;

	movss	xmm0, DWORD PTR [eax+40]
	addss	xmm0, DWORD PTR [eax+28]
	mulss	xmm0, xmm3

; 99   : 		C.z = (min.z + max.z) * 0.5f;

	subss	xmm2, xmm0
	movss	xmm0, DWORD PTR [eax+44]
	addss	xmm0, DWORD PTR [eax+32]
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 287  : 	{	return (x-v.x)*(x-v.x) + (y-v.y)*(y-v.y) + (z-v.z)*(z-v.z);	}

	mulss	xmm2, xmm2
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h

; 98   : 		C.y = (min.y + max.y) * 0.5f;

	mulss	xmm0, xmm3
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 287  : 	{	return (x-v.x)*(x-v.x) + (y-v.y)*(y-v.y) + (z-v.z)*(z-v.z);	}

	movaps	xmm3, xmm6
	subss	xmm3, xmm0
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h

; 99   : 		C.z = (min.z + max.z) * 0.5f;

	movss	xmm0, DWORD PTR [eax+48]
	addss	xmm0, DWORD PTR [eax+36]
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 287  : 	{	return (x-v.x)*(x-v.x) + (y-v.y)*(y-v.y) + (z-v.z)*(z-v.z);	}

	mulss	xmm3, xmm3
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h

; 99   : 		C.z = (min.z + max.z) * 0.5f;

	mulss	xmm0, DWORD PTR __real@3f000000
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 287  : 	{	return (x-v.x)*(x-v.x) + (y-v.y)*(y-v.y) + (z-v.z)*(z-v.z);	}

	addss	xmm3, xmm2
	subss	xmm1, xmm0
	mulss	xmm1, xmm1
	addss	xmm3, xmm1
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\DetailManager_CACHE.cpp

; 168  : 				if (D<best_dist)

	comiss	xmm4, xmm3
	jbe	SHORT $LN33@cache_Upda

; 169  : 				{
; 170  : 					best_dist	= D;

	movaps	xmm4, xmm3

; 171  : 					best_id		= entry;

	mov	esi, ecx
$LN33@cache_Upda:

; 157  : 			for (u32 entry=0; entry<cache_task.size(); entry++){

	movss	xmm3, DWORD PTR __real@3f000000
	inc	ecx
	add	edx, 4
	cmp	ecx, edi
	jb	SHORT $LL35@cache_Upda
$LN75@cache_Upda:

; 172  : 				}
; 173  : 			}
; 174  : 		}
; 175  : 
; 176  : 		// Decompress and remove task
; 177  : 		cache_Decompress	(cache_task[best_id]);

	push	DWORD PTR [ebx+esi*4+28916]
	mov	ecx, ebx
	call	?cache_Decompress@CDetailManager@@QAEXPAUSlot@1@@Z ; CDetailManager::cache_Decompress
; File I:\Vitalya\mine\NSProjectX\xrCore\FixedVector.h

; 52   : 		count--;

	dec	DWORD PTR [ebx+38520]

; 53   : 		for (u32 i=id; i<count; i++)

	cmp	esi, DWORD PTR [ebx+38520]
	jae	SHORT $LN30@cache_Upda
	npad	13
$LL470@cache_Upda:

; 54   : 			array[i] = array[i+1];

	mov	eax, DWORD PTR [ebx+esi*4+28920]
	mov	DWORD PTR [ebx+esi*4+28916], eax
	inc	esi
	cmp	esi, DWORD PTR [ebx+38520]
	jb	SHORT $LL470@cache_Upda
$LN30@cache_Upda:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\DetailManager_CACHE.cpp

; 150  : 	for (int iteration=0; cache_task.size() && (iteration<limit); iteration++){

	mov	eax, DWORD PTR [ebx+38520]
	inc	ebp
	movss	xmm3, DWORD PTR __real@3f000000
	mov	edi, eax
	mov	ecx, DWORD PTR tv4486[esp+24]
	mov	edx, DWORD PTR tv4487[esp+24]
	test	eax, eax
	jne	$LL32@cache_Upda
$LN634@cache_Upda:

; 178  : 		cache_task.erase	(best_id);
; 179  : 	}
; 180  : 
; 181  :     if (bNeedMegaUpdate){

	cmp	BYTE PTR _bNeedMegaUpdate$1$[esp+28], 0
	je	$LN40@cache_Upda

; 182  :         for (int _mz1=0; _mz1<dm_cache1_line; _mz1++){

	lea	ecx, DWORD PTR [ebx+1492]
	mov	ebx, 12					; 0000000cH
	npad	2
$LL41@cache_Upda:

; 183  :             for (int _mx1=0; _mx1<dm_cache1_line; _mx1++){

	mov	edi, 12					; 0000000cH
$LL44@cache_Upda:

; 185  : 				MS.empty		= TRUE;

	mov	DWORD PTR [ecx-36], 1
	lea	edx, DWORD PTR [ecx+24]
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	mov	DWORD PTR [ecx-32], 0
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\DetailManager_CACHE.cpp

; 184  :                 CacheSlot1& MS 	= cache_level1[_mz1][_mx1];

	mov	esi, 16					; 00000010H
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	mov	DWORD PTR [ecx-28], 0
	mov	DWORD PTR [ecx-24], 0
; File I:\Vitalya\mine\NSProjectX\xrEngine\vis_common.h

; 18   : 		sphere.R = 0;

	mov	DWORD PTR [ecx-20], 0
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	mov	DWORD PTR [ecx-16], 2139095039		; 7f7fffffH
	mov	DWORD PTR [ecx-12], 2139095039		; 7f7fffffH
	mov	DWORD PTR [ecx-8], 2139095039		; 7f7fffffH
	mov	DWORD PTR [ecx-4], -8388609		; ff7fffffH
	mov	DWORD PTR [ecx], -8388609		; ff7fffffH
	mov	DWORD PTR [ecx+4], -8388609		; ff7fffffH
; File I:\Vitalya\mine\NSProjectX\xrEngine\vis_common.h

; 20   : 		marker = 0;

	mov	DWORD PTR [ecx+8], 0

; 21   : 		accept_frame = 0;

	mov	DWORD PTR [ecx+12], 0

; 22   : 		hom_frame = 0;

	mov	DWORD PTR [ecx+16], 0

; 23   : 		hom_tested = 0;

	mov	DWORD PTR [ecx+20], 0
$LL47@cache_Upda:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\DetailManager_CACHE.cpp

; 188  :                     Slot*	PS		= *MS.slots[_i];

	mov	eax, DWORD PTR [edx]
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 53   : 	IC	SelfRef	min(const Self &v)						{ x = _min(x,v.x);	y = _min(y,v.y);	z = _min(z,v.z);			return *this;	}

	movss	xmm0, DWORD PTR [ecx-16]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\DetailManager_CACHE.cpp

; 189  :                     Slot& 	S 		= *PS;

	mov	eax, DWORD PTR [eax]
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 53   : 	IC	SelfRef	min(const Self &v)						{ x = _min(x,v.x);	y = _min(y,v.y);	z = _min(z,v.z);			return *this;	}

	movss	xmm1, DWORD PTR [eax+28]
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 93   : template <class T>	IC T		_min	(T a, T b)	{ return a<b?a:b;	}

	comiss	xmm1, xmm0
	ja	SHORT $LN503@cache_Upda
	movaps	xmm0, xmm1
$LN503@cache_Upda:
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 53   : 	IC	SelfRef	min(const Self &v)						{ x = _min(x,v.x);	y = _min(y,v.y);	z = _min(z,v.z);			return *this;	}

	movss	DWORD PTR [ecx-16], xmm0
	movss	xmm0, DWORD PTR [ecx-12]
	movss	xmm1, DWORD PTR [eax+32]
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 93   : template <class T>	IC T		_min	(T a, T b)	{ return a<b?a:b;	}

	comiss	xmm1, xmm0
	ja	SHORT $LN507@cache_Upda
	movaps	xmm0, xmm1
$LN507@cache_Upda:
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 53   : 	IC	SelfRef	min(const Self &v)						{ x = _min(x,v.x);	y = _min(y,v.y);	z = _min(z,v.z);			return *this;	}

	movss	DWORD PTR [ecx-12], xmm0
	movss	xmm0, DWORD PTR [ecx-8]
	movss	xmm1, DWORD PTR [eax+36]
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 93   : template <class T>	IC T		_min	(T a, T b)	{ return a<b?a:b;	}

	comiss	xmm1, xmm0
	ja	SHORT $LN511@cache_Upda
	movaps	xmm0, xmm1
$LN511@cache_Upda:
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 53   : 	IC	SelfRef	min(const Self &v)						{ x = _min(x,v.x);	y = _min(y,v.y);	z = _min(z,v.z);			return *this;	}

	movss	DWORD PTR [ecx-8], xmm0

; 55   : 	IC	SelfRef	max(const Self &v)						{ x = _max(x,v.x);	y = _max(y,v.y);	z = _max(z,v.z);			return *this;	}

	movss	xmm0, DWORD PTR [ecx-4]
	movss	xmm1, DWORD PTR [eax+28]
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 94   : template <class T>	IC T		_max	(T a, T b)	{ return a>b?a:b;	}

	comiss	xmm0, xmm1
	ja	SHORT $LN517@cache_Upda
	movaps	xmm0, xmm1
$LN517@cache_Upda:
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 55   : 	IC	SelfRef	max(const Self &v)						{ x = _max(x,v.x);	y = _max(y,v.y);	z = _max(z,v.z);			return *this;	}

	movss	DWORD PTR [ecx-4], xmm0
	movss	xmm0, DWORD PTR [ecx]
	movss	xmm1, DWORD PTR [eax+32]
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 94   : template <class T>	IC T		_max	(T a, T b)	{ return a>b?a:b;	}

	comiss	xmm0, xmm1
	ja	SHORT $LN521@cache_Upda
	movaps	xmm0, xmm1
$LN521@cache_Upda:
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 55   : 	IC	SelfRef	max(const Self &v)						{ x = _max(x,v.x);	y = _max(y,v.y);	z = _max(z,v.z);			return *this;	}

	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	movss	xmm1, DWORD PTR [eax+36]
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 94   : template <class T>	IC T		_max	(T a, T b)	{ return a>b?a:b;	}

	comiss	xmm0, xmm1
	ja	SHORT $LN525@cache_Upda
	movaps	xmm0, xmm1
$LN525@cache_Upda:
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 55   : 	IC	SelfRef	max(const Self &v)						{ x = _max(x,v.x);	y = _max(y,v.y);	z = _max(z,v.z);			return *this;	}

	movss	DWORD PTR [ecx+4], xmm0

; 53   : 	IC	SelfRef	min(const Self &v)						{ x = _min(x,v.x);	y = _min(y,v.y);	z = _min(z,v.z);			return *this;	}

	movss	xmm0, DWORD PTR [ecx-16]
	movss	xmm1, DWORD PTR [eax+40]
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 93   : template <class T>	IC T		_min	(T a, T b)	{ return a<b?a:b;	}

	comiss	xmm1, xmm0
	ja	SHORT $LN533@cache_Upda
	movaps	xmm0, xmm1
$LN533@cache_Upda:
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 53   : 	IC	SelfRef	min(const Self &v)						{ x = _min(x,v.x);	y = _min(y,v.y);	z = _min(z,v.z);			return *this;	}

	movss	DWORD PTR [ecx-16], xmm0
	movss	xmm0, DWORD PTR [ecx-12]
	movss	xmm1, DWORD PTR [eax+44]
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 93   : template <class T>	IC T		_min	(T a, T b)	{ return a<b?a:b;	}

	comiss	xmm1, xmm0
	ja	SHORT $LN537@cache_Upda
	movaps	xmm0, xmm1
$LN537@cache_Upda:
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 53   : 	IC	SelfRef	min(const Self &v)						{ x = _min(x,v.x);	y = _min(y,v.y);	z = _min(z,v.z);			return *this;	}

	movss	DWORD PTR [ecx-12], xmm0
	movss	xmm0, DWORD PTR [ecx-8]
	movss	xmm1, DWORD PTR [eax+48]
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 93   : template <class T>	IC T		_min	(T a, T b)	{ return a<b?a:b;	}

	comiss	xmm1, xmm0
	ja	SHORT $LN541@cache_Upda
	movaps	xmm0, xmm1
$LN541@cache_Upda:
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 53   : 	IC	SelfRef	min(const Self &v)						{ x = _min(x,v.x);	y = _min(y,v.y);	z = _min(z,v.z);			return *this;	}

	movss	DWORD PTR [ecx-8], xmm0

; 55   : 	IC	SelfRef	max(const Self &v)						{ x = _max(x,v.x);	y = _max(y,v.y);	z = _max(z,v.z);			return *this;	}

	movss	xmm0, DWORD PTR [ecx-4]
	movss	xmm1, DWORD PTR [eax+40]
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 94   : template <class T>	IC T		_max	(T a, T b)	{ return a>b?a:b;	}

	comiss	xmm0, xmm1
	ja	SHORT $LN547@cache_Upda
	movaps	xmm0, xmm1
$LN547@cache_Upda:
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 55   : 	IC	SelfRef	max(const Self &v)						{ x = _max(x,v.x);	y = _max(y,v.y);	z = _max(z,v.z);			return *this;	}

	movss	DWORD PTR [ecx-4], xmm0
	movss	xmm0, DWORD PTR [ecx]
	movss	xmm1, DWORD PTR [eax+44]
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 94   : template <class T>	IC T		_max	(T a, T b)	{ return a>b?a:b;	}

	comiss	xmm0, xmm1
	ja	SHORT $LN551@cache_Upda
	movaps	xmm0, xmm1
$LN551@cache_Upda:
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 55   : 	IC	SelfRef	max(const Self &v)						{ x = _max(x,v.x);	y = _max(y,v.y);	z = _max(z,v.z);			return *this;	}

	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	movss	xmm1, DWORD PTR [eax+48]
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 94   : template <class T>	IC T		_max	(T a, T b)	{ return a>b?a:b;	}

	comiss	xmm0, xmm1
	ja	SHORT $LN555@cache_Upda
	movaps	xmm0, xmm1
$LN555@cache_Upda:
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 55   : 	IC	SelfRef	max(const Self &v)						{ x = _max(x,v.x);	y = _max(y,v.y);	z = _max(z,v.z);			return *this;	}

	movss	DWORD PTR [ecx+4], xmm0
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\DetailManager_CACHE.cpp

; 191  : 					if (!S.empty)	MS.empty = FALSE;

	test	BYTE PTR [eax], 1
	jne	SHORT $LN45@cache_Upda
	mov	DWORD PTR [ecx-36], 0
$LN45@cache_Upda:

; 186  :                 MS.vis.clear	();
; 187  :                 for (int _i=0; _i<dm_cache1_count*dm_cache1_count; _i++){

	add	edx, 4
	sub	esi, 1
	jne	$LL47@cache_Upda
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h

; 97   : 		C.x = (min.x + max.x) * 0.5f;

	movss	xmm2, DWORD PTR [ecx-16]
	addss	xmm2, DWORD PTR [ecx-4]
	mulss	xmm2, xmm3
	movss	DWORD PTR [ecx-32], xmm2

; 98   : 		C.y = (min.y + max.y) * 0.5f;

	movss	xmm1, DWORD PTR [ecx]
	addss	xmm1, DWORD PTR [ecx-12]
	mulss	xmm1, xmm3
	movss	DWORD PTR [ecx-28], xmm1

; 99   : 		C.z = (min.z + max.z) * 0.5f;

	addss	xmm0, DWORD PTR [ecx-8]
	mulss	xmm0, xmm3
	movss	DWORD PTR [ecx-24], xmm0
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 287  : 	{	return (x-v.x)*(x-v.x) + (y-v.y)*(y-v.y) + (z-v.z)*(z-v.z);	}

	subss	xmm2, DWORD PTR [ecx-4]
	subss	xmm1, DWORD PTR [ecx]
	subss	xmm0, DWORD PTR [ecx+4]
	mulss	xmm2, xmm2
	mulss	xmm1, xmm1
	mulss	xmm0, xmm0
	addss	xmm2, xmm1
	addss	xmm2, xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 764  :             return (float)sqrt(_X);

	sqrtss	xmm0, xmm2
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h

; 116  : 		R = C.distance_to	(max);

	movss	DWORD PTR [ecx-20], xmm0
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\DetailManager_CACHE.cpp

; 183  :             for (int _mx1=0; _mx1<dm_cache1_line; _mx1++){

	add	ecx, 124				; 0000007cH
	sub	edi, 1
	jne	$LL44@cache_Upda

; 182  :         for (int _mz1=0; _mz1<dm_cache1_line; _mz1++){

	sub	ebx, 1
	jne	$LL41@cache_Upda
$LN40@cache_Upda:

; 192  :                 }
; 193  :                 MS.vis.box.getsphere(MS.vis.sphere.P,MS.vis.sphere.R);
; 194  :             }
; 195  :         }
; 196  :     }
; 197  : }

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 12					; 0000000cH
	ret	16					; 00000010H
?cache_Update@CDetailManager@@QAEXHHAAU?$_vector3@M@@H@Z ENDP ; CDetailManager::cache_Update
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\DetailManager_CACHE.cpp
_TEXT	SEGMENT
tv1413 = -8						; size = 4
_this$1$ = -8						; size = 4
tv1412 = -4						; size = 4
?cache_Initialize@CDetailManager@@QAEXXZ PROC		; CDetailManager::cache_Initialize
; _this$ = ecx

; 5    : {

	sub	esp, 8
	push	ebx
	mov	eax, ecx
	push	ebp
	push	esi
	push	edi
	mov	DWORD PTR _this$1$[esp+24], eax

; 6    : 	// Centroid
; 7    : 	cache_cx			= 0;
; 8    : 	cache_cz			= 0;
; 9    : 
; 10   : 	// Initialize cache-grid
; 11   : 	Slot*	slt 		= cache_pool;

	lea	edi, DWORD PTR [eax+38524]
	mov	DWORD PTR [eax+701200], 0
	lea	ebx, DWORD PTR [eax+19312]
	mov	DWORD PTR [eax+701204], 0
	xor	ebp, ebp
	npad	1
$LL4@cache_Init:

; 13   : 		for (u32 j=0; j<dm_cache_line; j++, slt++){

	xor	esi, esi
$LL7@cache_Init:

; 14   : 			cache			[i][j]	= slt;
; 15   : 			cache_Task		(j,i,slt);

	push	edi
	push	ebp
	push	esi
	mov	ecx, eax
	mov	DWORD PTR [ebx], edi
	call	?cache_Task@CDetailManager@@QAEXHHPAUSlot@1@@Z ; CDetailManager::cache_Task
	mov	eax, DWORD PTR _this$1$[esp+24]
	inc	esi
	add	ebx, 4
	add	edi, 276				; 00000114H
	cmp	esi, 49					; 00000031H
	jb	SHORT $LL7@cache_Init

; 12   : 	for (u32 i=0; i<dm_cache_line; i++)

	inc	ebp
	cmp	ebp, 49					; 00000031H
	jb	SHORT $LL4@cache_Init

; 16   : 		}
; 17   : 	VERIFY	(cache_Validate());
; 18   : 
; 19   :     for (int _mz1=0; _mz1<dm_cache1_line; _mz1++){

	lea	edi, DWORD PTR [eax+1520]
	mov	DWORD PTR tv1412[esp+24], 12		; 0000000cH
	add	eax, 19320				; 00004b78H
	mov	DWORD PTR tv1413[esp+24], eax
	npad	2
$LL13@cache_Init:

; 20   :     	for (int _mx1=0; _mx1<dm_cache1_line; _mx1++){

	mov	ebx, eax
	mov	ebp, 12					; 0000000cH
$LL16@cache_Init:

; 21   : 		    CacheSlot1& MS 	= cache_level1[_mz1][_mx1];

	mov	edx, edi
	mov	eax, ebx
	mov	esi, 4
$LL19@cache_Init:

; 22   : 			for (int _z=0; _z<dm_cache1_count; _z++)
; 23   : 				for (int _x=0; _x<dm_cache1_count; _x++)
; 24   : 					MS.slots[_z*dm_cache1_count+_x] = &cache[_mz1*dm_cache1_count+_z][_mx1*dm_cache1_count+_x];

	lea	ecx, DWORD PTR [eax-8]
	mov	DWORD PTR [edx+4], eax
	mov	DWORD PTR [edx-4], ecx
	lea	edx, DWORD PTR [edx+16]
	lea	ecx, DWORD PTR [eax-4]
	mov	DWORD PTR [edx-16], ecx
	lea	ecx, DWORD PTR [eax+4]
	add	eax, 196				; 000000c4H
	mov	DWORD PTR [edx-8], ecx
	sub	esi, 1
	jne	SHORT $LL19@cache_Init

; 20   :     	for (int _mx1=0; _mx1<dm_cache1_line; _mx1++){

	add	edi, 124				; 0000007cH
	add	ebx, 16					; 00000010H
	sub	ebp, 1
	jne	SHORT $LL16@cache_Init

; 16   : 		}
; 17   : 	VERIFY	(cache_Validate());
; 18   : 
; 19   :     for (int _mz1=0; _mz1<dm_cache1_line; _mz1++){

	mov	eax, DWORD PTR tv1413[esp+24]
	add	eax, 784				; 00000310H
	sub	DWORD PTR tv1412[esp+24], 1
	mov	DWORD PTR tv1413[esp+24], eax
	jne	SHORT $LL13@cache_Init

; 25   :         }
; 26   :     }
; 27   : }

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 8
	ret	0
?cache_Initialize@CDetailManager@@QAEXXZ ENDP		; CDetailManager::cache_Initialize
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\DetailManager_CACHE.cpp
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\detailmanager.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\DetailManager_CACHE.cpp
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\detailmanager.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\DetailManager_CACHE.cpp
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\detailmanager.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\DetailManager_CACHE.cpp
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\detailmanager.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\DetailManager_CACHE.cpp
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\detailformat.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\DetailManager_CACHE.cpp
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\detailformat.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\DetailManager_CACHE.cpp
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\detailformat.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\DetailManager_CACHE.cpp
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\detailformat.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\DetailManager_CACHE.cpp
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\detailformat.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\DetailManager_CACHE.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\DetailManager_CACHE.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\detailformat.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\DetailManager_CACHE.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\DetailManager_CACHE.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\DetailManager_CACHE.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\detailformat.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\DetailManager_CACHE.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\DetailManager_CACHE.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\xrCore\xrPool.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\DetailManager_CACHE.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\DetailManager_CACHE.cpp
; File I:\Vitalya\mine\NSProjectX\xrCore\FixedVector.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\DetailManager_CACHE.cpp
_TEXT	SEGMENT
tv838 = -4						; size = 4
tv836 = -4						; size = 4
_this$1$ = 8						; size = 4
_gx$ = 8						; size = 4
tv845 = 12						; size = 4
_i$1$ = 12						; size = 4
__y$ = 12						; size = 4
_gz$ = 12						; size = 4
tv815 = 16						; size = 4
_D$ = 16						; size = 4
?cache_Task@CDetailManager@@QAEXHHPAUSlot@1@@Z PROC	; CDetailManager::cache_Task
; _this$ = ecx

; 37   : {

	push	ecx
	push	ebx
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\detailmanager.h

; 159  : 	int								cg2w_X			(int x)			{ return cache_cx-dm_size+x;					}

	mov	ebx, DWORD PTR _gx$[esp+4]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\DetailManager_CACHE.cpp

; 37   : {

	push	ebp
	mov	ebp, ecx
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\detailmanager.h

; 159  : 	int								cg2w_X			(int x)			{ return cache_cx-dm_size+x;					}

	add	ebx, -24				; ffffffe8H
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\DetailManager_CACHE.cpp

; 37   : {

	push	esi
	push	edi
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\detailmanager.h

; 160  : 	int								cg2w_Z			(int z)			{ return cache_cz-dm_size+(dm_cache_line-1-z);	}

	mov	esi, DWORD PTR [ebp+701204]
	sub	esi, DWORD PTR _gz$[esp+16]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\DetailManager_CACHE.cpp

; 202  : 	int db_z = sz+dtH.offs_z;

	mov	eax, DWORD PTR [ebp+1104]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\detailmanager.h

; 160  : 	int								cg2w_Z			(int z)			{ return cache_cz-dm_size+(dm_cache_line-1-z);	}

	add	esi, 24					; 00000018H

; 159  : 	int								cg2w_X			(int x)			{ return cache_cx-dm_size+x;					}

	add	ebx, DWORD PTR [ebp+701200]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\DetailManager_CACHE.cpp

; 202  : 	int db_z = sz+dtH.offs_z;

	add	eax, esi
	mov	ecx, DWORD PTR [ebp+1100]
	add	ecx, ebx

; 203  : 	if ((db_x>=0) && (db_x<int(dtH.size_x)) && (db_z>=0) && (db_z<int(dtH.size_z)))

	js	SHORT $LN20@cache_Task
	mov	edx, DWORD PTR [ebp+1108]
	cmp	ecx, edx
	jge	SHORT $LN20@cache_Task
	test	eax, eax
	js	SHORT $LN20@cache_Task
	cmp	eax, DWORD PTR [ebp+1112]
	jge	SHORT $LN20@cache_Task

; 204  : 	{
; 205  : 		u32 linear_id				= db_z*dtH.size_x + db_x;

	imul	edx, eax
	add	edx, ecx

; 206  : 		return dtSlots				[linear_id];

	shl	edx, 4
	add	edx, DWORD PTR [ebp+1116]
	jmp	SHORT $LN126@cache_Task
$LN20@cache_Task:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\detailformat.h

; 122  :         case 1: id1=val; break;

	or	DWORD PTR [ebp+1120], -1048576		; fff00000H
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\DetailManager_CACHE.cpp

; 209  : 		DS_empty.w_id				(0,DetailSlot::ID_Empty);

	lea	edx, DWORD PTR [ebp+1120]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\detailformat.h

; 124  :         case 3: id3=val; break;

	or	DWORD PTR [edx+4], 4095			; 00000fffH
$LN126@cache_Task:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\DetailManager_CACHE.cpp

; 42   : 	D->empty				=	(DS.id0==DetailSlot::ID_Empty)&&

	mov	ecx, DWORD PTR [edx]
	mov	eax, ecx
	and	eax, 66060288				; 03f00000H
	mov	DWORD PTR _this$1$[esp+16], edx
	cmp	eax, 66060288				; 03f00000H
	jne	SHORT $LN13@cache_Task
	and	ecx, -67108864				; fc000000H
	cmp	ecx, -67108864				; fc000000H
	jne	SHORT $LN13@cache_Task
	mov	ecx, DWORD PTR [edx+4]
	mov	eax, ecx
	and	eax, 63					; 0000003fH
	cmp	al, 63					; 0000003fH
	jne	SHORT $LN13@cache_Task
	and	ecx, 4032				; 00000fc0H
	cmp	ecx, 4032				; 00000fc0H
	jne	SHORT $LN13@cache_Task
	mov	eax, 1
	jmp	SHORT $LN14@cache_Task
$LN13@cache_Task:
	xor	eax, eax
$LN14@cache_Task:
	mov	edi, DWORD PTR _D$[esp+16]
	mov	ecx, DWORD PTR [edi]
	and	ecx, -2					; fffffffeH

; 43   : 								(DS.id1==DetailSlot::ID_Empty)&&
; 44   : 								(DS.id2==DetailSlot::ID_Empty)&&
; 45   : 								(DS.id3==DetailSlot::ID_Empty);
; 46   : 
; 47   : 	// Unpacking
; 48   : 	u32 old_type			= D->type;
; 49   : 	D->type					= stPending;
; 50   : 	D->sx					= sx;

	mov	DWORD PTR [edi+4], ebx
	or	ecx, eax

; 51   : 	D->sz					= sz;

	mov	DWORD PTR [edi+8], esi
	mov	eax, ecx
	mov	DWORD PTR tv815[esp+16], ecx
	or	eax, 2
	mov	DWORD PTR [edi], eax
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\detailformat.h

; 100  : 	float			r_ybase		()						{	return float(y_base)*.2f - 200.f;								}

	mov	eax, DWORD PTR [edx]
	and	eax, 4095				; 00000fffH
	mov	DWORD PTR tv845[esp+16], eax
	fild	DWORD PTR tv845[esp+16]
	jns	SHORT $LN123@cache_Task
	fadd	DWORD PTR __real@4f800000
$LN123@cache_Task:
	fld	DWORD PTR __real@3e4ccccd
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\DetailManager_CACHE.cpp

; 54   : 	D->vis.box.max.set		(D->vis.box.min.x+dm_slot_size,	DS.r_ybase()+DS.r_yheight(),	D->vis.box.min.z+dm_slot_size);

	movss	xmm1, DWORD PTR __real@40000000
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\detailformat.h

; 100  : 	float			r_ybase		()						{	return float(y_base)*.2f - 200.f;								}

	fmul	ST(1), ST(0)
	fld	DWORD PTR __real@43480000
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\DetailManager_CACHE.cpp

; 53   : 	D->vis.box.min.set		(sx*dm_slot_size,				DS.r_ybase(),					sz*dm_slot_size);

	cvtsi2ss xmm2, ebx
	cvtsi2ss xmm3, esi
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\detailformat.h

; 100  : 	float			r_ybase		()						{	return float(y_base)*.2f - 200.f;								}

	fsub	ST(2), ST(0)
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\DetailManager_CACHE.cpp

; 53   : 	D->vis.box.min.set		(sx*dm_slot_size,				DS.r_ybase(),					sz*dm_slot_size);

	fxch	ST(2)
	addss	xmm2, xmm2
	addss	xmm3, xmm3
	fst	DWORD PTR __y$[esp+16]
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	fstp	DWORD PTR [edi+32]
	movss	DWORD PTR [edi+28], xmm2
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\DetailManager_CACHE.cpp

; 54   : 	D->vis.box.max.set		(D->vis.box.min.x+dm_slot_size,	DS.r_ybase()+DS.r_yheight(),	D->vis.box.min.z+dm_slot_size);

	addss	xmm2, xmm1
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	movss	DWORD PTR [edi+36], xmm3
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\detailformat.h

; 100  : 	float			r_ybase		()						{	return float(y_base)*.2f - 200.f;								}

	mov	ecx, DWORD PTR [edx]
	mov	eax, ecx
	and	eax, 4095				; 00000fffH
	mov	DWORD PTR tv838[esp+20], eax
	fild	DWORD PTR tv838[esp+20]
	jns	SHORT $LN124@cache_Task
	fadd	DWORD PTR __real@4f800000
$LN124@cache_Task:
	fmulp	ST(1), ST(0)

; 101  : 	float			r_yheight	()						{	return float(y_height)*.1f;									}

	shr	ecx, 12					; 0000000cH
	movzx	eax, cl
	mov	DWORD PTR tv836[esp+20], eax

; 100  : 	float			r_ybase		()						{	return float(y_base)*.2f - 200.f;								}

	fsubrp	ST(1), ST(0)

; 101  : 	float			r_yheight	()						{	return float(y_height)*.1f;									}

	fild	DWORD PTR tv836[esp+20]
	test	eax, eax
	jns	SHORT $LN125@cache_Task
	fadd	DWORD PTR __real@4f800000
$LN125@cache_Task:
	fmul	DWORD PTR __real@3dcccccd
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\DetailManager_CACHE.cpp

; 54   : 	D->vis.box.max.set		(D->vis.box.min.x+dm_slot_size,	DS.r_ybase()+DS.r_yheight(),	D->vis.box.min.z+dm_slot_size);

	movaps	xmm0, xmm3
	addss	xmm0, xmm1

; 57   : 	for (u32 i=0; i<dm_obj_in_slot; i++)	{

	xor	ecx, ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 35   : 	ICF SelfRef	sub(T s)								{ x-=s;		y-=s;		z-=s;			return *this;	};

	movss	xmm1, DWORD PTR __real@3a83126f
	subss	xmm3, xmm1
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\DetailManager_CACHE.cpp

; 54   : 	D->vis.box.max.set		(D->vis.box.min.x+dm_slot_size,	DS.r_ybase()+DS.r_yheight(),	D->vis.box.min.z+dm_slot_size);

	faddp	ST(1), ST(0)
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	movss	DWORD PTR [edi+48], xmm0

; 35   : 	ICF SelfRef	sub(T s)								{ x-=s;		y-=s;		z-=s;			return *this;	};

	movss	xmm0, DWORD PTR [edi+28]
	subss	xmm0, xmm1
	movss	DWORD PTR [edi+36], xmm3

; 23   : 	ICF	SelfRef	set(T _x, T _y, T _z)					{ x = _x;		y = _y;		z = _z;		return *this;	};

	fstp	DWORD PTR [edi+44]

; 35   : 	ICF SelfRef	sub(T s)								{ x-=s;		y-=s;		z-=s;			return *this;	};

	movss	DWORD PTR [edi+28], xmm0
	movss	xmm0, DWORD PTR __y$[esp+16]
	subss	xmm0, xmm1
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\DetailManager_CACHE.cpp

; 57   : 	for (u32 i=0; i<dm_obj_in_slot; i++)	{

	mov	DWORD PTR _i$1$[esp+16], ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 35   : 	ICF SelfRef	sub(T s)								{ x-=s;		y-=s;		z-=s;			return *this;	};

	movss	DWORD PTR [edi+32], xmm0

; 30   : 	ICF SelfRef	add(T s)								{ x+=s;		y+=s;		z+=s;			return *this;	};

	movaps	xmm0, xmm2
	addss	xmm0, xmm1
	movss	DWORD PTR [edi+40], xmm0
	movss	xmm0, DWORD PTR [edi+44]
	addss	xmm0, xmm1
	movss	DWORD PTR [edi+44], xmm0
	movss	xmm0, DWORD PTR [edi+48]
	addss	xmm0, xmm1
	movss	DWORD PTR [edi+48], xmm0
	npad	1
$LL4@cache_Task:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\detailformat.h

; 108  :         switch(idx)	{

	jmp	DWORD PTR $LN122@cache_Task[ecx*4]
$LN80@cache_Task:

; 109  :         case 0: return (u8)id0;

	mov	eax, DWORD PTR [edx]
	shr	eax, 20					; 00000014H
	jmp	SHORT $LN127@cache_Task
$LN81@cache_Task:

; 110  :         case 1: return (u8)id1;

	mov	eax, DWORD PTR [edx]
	shr	eax, 26					; 0000001aH
	jmp	SHORT $LN77@cache_Task
$LN82@cache_Task:

; 111  :         case 2: return (u8)id2;

	mov	al, BYTE PTR [edx+4]
	jmp	SHORT $LN127@cache_Task
$LN83@cache_Task:

; 112  :         case 3: return (u8)id3;

	mov	eax, DWORD PTR [edx+4]
	shr	eax, 6
$LN127@cache_Task:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\DetailManager_CACHE.cpp

; 58   : 		D->G[i].id			= DS.r_id	(i);

	and	al, 63					; 0000003fH
$LN77@cache_Task:
	imul	ebx, ecx, 52

; 59   : 		for (u32 clr=0; clr<D->G[i].items.size(); clr++)

	xor	esi, esi
	movzx	eax, al
	mov	DWORD PTR [ebx+edi+68], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	eax, DWORD PTR [ebx+edi+76]
	mov	ecx, DWORD PTR [ebx+edi+72]
	sub	eax, ecx
	sar	eax, 2
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\DetailManager_CACHE.cpp

; 59   : 		for (u32 clr=0; clr<D->G[i].items.size(); clr++)

	test	eax, eax
	je	SHORT $LN6@cache_Task
	npad	1
$LL7@cache_Task:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 119  :         _Ptr += _Off;

	mov	edx, DWORD PTR [ebx+edi+72]
; File I:\Vitalya\mine\NSProjectX\xrCore\xrPool.h

; 49   : 		*access(P)		= list;

	mov	eax, DWORD PTR [ebp+701208]
	mov	ecx, DWORD PTR [edx+esi*4]
	mov	DWORD PTR [ecx], eax

; 50   : 		list			= P;

	mov	eax, DWORD PTR [edx+esi*4]
	mov	DWORD PTR [ebp+701208], eax

; 51   : 		P				= NULL;

	mov	DWORD PTR [edx+esi*4], 0
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\DetailManager_CACHE.cpp

; 59   : 		for (u32 clr=0; clr<D->G[i].items.size(); clr++)

	inc	esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	eax, DWORD PTR [ebx+edi+76]
	mov	ecx, DWORD PTR [ebx+edi+72]
	sub	eax, ecx
	sar	eax, 2
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\DetailManager_CACHE.cpp

; 59   : 		for (u32 clr=0; clr<D->G[i].items.size(); clr++)

	cmp	esi, eax
	jb	SHORT $LL7@cache_Task
	mov	edx, DWORD PTR _this$1$[esp+16]
$LN6@cache_Task:

; 60   : 			poolSI.destroy(D->G[i].items[clr]);
; 61   : 		D->G[i].items.clear	();

	mov	DWORD PTR [ebx+edi+76], ecx
	mov	ecx, DWORD PTR _i$1$[esp+16]
	inc	ecx
	mov	DWORD PTR _i$1$[esp+16], ecx
	cmp	ecx, 4
	jb	$LL4@cache_Task

; 62   : 	}
; 63   : 
; 64   : 	if (old_type != stPending)

	test	BYTE PTR tv815[esp+16], 2
	jne	SHORT $LN58@cache_Task
; File I:\Vitalya\mine\NSProjectX\xrCore\FixedVector.h

; 35   : 	IC void		push_back(value_type e)		{ VERIFY(count<dim); array[count++]=e;	}

	mov	eax, DWORD PTR [ebp+38520]
	mov	DWORD PTR [ebp+eax*4+28916], edi
	inc	DWORD PTR [ebp+38520]
$LN58@cache_Task:
	pop	edi
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\DetailManager_CACHE.cpp

; 69   : }

	pop	esi
	pop	ebp
	pop	ebx
	pop	ecx
	ret	12					; 0000000cH
	npad	3
$LN122@cache_Task:
	DD	$LN80@cache_Task
	DD	$LN81@cache_Task
	DD	$LN82@cache_Task
	DD	$LN83@cache_Task
?cache_Task@CDetailManager@@QAEXHHPAUSlot@1@@Z ENDP	; CDetailManager::cache_Task
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\DetailManager_CACHE.cpp
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\detailformat.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\DetailManager_CACHE.cpp
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\detailformat.h
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\DetailManager_CACHE.cpp
_TEXT	SEGMENT
_sx$ = 8						; size = 4
_sz$ = 12						; size = 4
?QueryDB@CDetailManager@@QAEAAUDetailSlot@@HH@Z PROC	; CDetailManager::QueryDB
; _this$ = ecx

; 200  : {

	mov	edx, ecx
	push	esi

; 201  : 	int db_x = sx+dtH.offs_x;

	mov	ecx, DWORD PTR [edx+1100]
	add	ecx, DWORD PTR _sx$[esp]

; 203  : 	if ((db_x>=0) && (db_x<int(dtH.size_x)) && (db_z>=0) && (db_z<int(dtH.size_z)))

	js	SHORT $LN2@QueryDB
	mov	eax, DWORD PTR [edx+1108]
	cmp	ecx, eax
	jge	SHORT $LN2@QueryDB

; 202  : 	int db_z = sz+dtH.offs_z;

	mov	esi, DWORD PTR [edx+1104]
	add	esi, DWORD PTR _sz$[esp]

; 203  : 	if ((db_x>=0) && (db_x<int(dtH.size_x)) && (db_z>=0) && (db_z<int(dtH.size_z)))

	js	SHORT $LN2@QueryDB
	cmp	esi, DWORD PTR [edx+1112]
	jge	SHORT $LN2@QueryDB

; 204  : 	{
; 205  : 		u32 linear_id				= db_z*dtH.size_x + db_x;
; 206  : 		return dtSlots				[linear_id];

	imul	eax, esi
	pop	esi
	add	eax, ecx
	shl	eax, 4
	add	eax, DWORD PTR [edx+1116]

; 215  : }

	ret	8
$LN2@QueryDB:
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\detailformat.h

; 122  :         case 1: id1=val; break;

	or	DWORD PTR [edx+1120], -1048576		; fff00000H
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\DetailManager_CACHE.cpp

; 209  : 		DS_empty.w_id				(0,DetailSlot::ID_Empty);

	lea	eax, DWORD PTR [edx+1120]
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\detailformat.h

; 124  :         case 3: id3=val; break;

	or	DWORD PTR [edx+1124], 4095		; 00000fffH
	pop	esi
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\DetailManager_CACHE.cpp

; 215  : }

	ret	8
?QueryDB@CDetailManager@@QAEAAUDetailSlot@@HH@Z ENDP	; CDetailManager::QueryDB
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\xrPool.h
;	COMDAT ?destroy@?$poolSS@USlotItem@CDetailManager@@$0BAAA@@@QAEXAAPAUSlotItem@CDetailManager@@@Z
_TEXT	SEGMENT
_P$ = 8							; size = 4
?destroy@?$poolSS@USlotItem@CDetailManager@@$0BAAA@@@QAEXAAPAUSlotItem@CDetailManager@@@Z PROC ; poolSS<CDetailManager::SlotItem,4096>::destroy, COMDAT
; _this$ = ecx

; 48   : 		P->~T			();
; 49   : 		*access(P)		= list;

	mov	eax, DWORD PTR [ecx]
	push	esi
	mov	esi, DWORD PTR _P$[esp]
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR [edx], eax

; 50   : 		list			= P;

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [ecx], eax

; 51   : 		P				= NULL;

	mov	DWORD PTR [esi], 0
	pop	esi

; 52   : 	}

	ret	4
?destroy@?$poolSS@USlotItem@CDetailManager@@$0BAAA@@@QAEXAAPAUSlotItem@CDetailManager@@@Z ENDP ; poolSS<CDetailManager::SlotItem,4096>::destroy
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\FixedVector.h
;	COMDAT ?erase@?$svector@PAUSlot@CDetailManager@@$0JGB@@@QAEXI@Z
_TEXT	SEGMENT
_id$ = 8						; size = 4
?erase@?$svector@PAUSlot@CDetailManager@@$0JGB@@@QAEXI@Z PROC ; svector<CDetailManager::Slot *,2401>::erase, COMDAT
; _this$ = ecx

; 51   : 		VERIFY(id<count);
; 52   : 		count--;
; 53   : 		for (u32 i=id; i<count; i++)

	mov	eax, DWORD PTR _id$[esp-4]
	mov	edx, ecx
	dec	DWORD PTR [edx+9604]
	cmp	eax, DWORD PTR [edx+9604]
	jae	SHORT $LN6@erase
$LL7@erase:

; 54   : 			array[i] = array[i+1];

	mov	ecx, DWORD PTR [edx+eax*4+4]
	mov	DWORD PTR [edx+eax*4], ecx
	inc	eax
	cmp	eax, DWORD PTR [edx+9604]
	jb	SHORT $LL7@erase
$LN6@erase:

; 55   : 	}

	ret	4
?erase@?$svector@PAUSlot@CDetailManager@@$0JGB@@@QAEXI@Z ENDP ; svector<CDetailManager::Slot *,2401>::erase
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\FixedVector.h
;	COMDAT ??A?$svector@PAUSlot@CDetailManager@@$0JGB@@@QAEAAPAUSlot@CDetailManager@@I@Z
_TEXT	SEGMENT
_id$ = 8						; size = 4
??A?$svector@PAUSlot@CDetailManager@@$0JGB@@@QAEAAPAUSlot@CDetailManager@@I@Z PROC ; svector<CDetailManager::Slot *,2401>::operator[], COMDAT
; _this$ = ecx

; 38   : 	IC reference		operator[] (u32 id)			{ VERIFY(id<count); return array[id];	}

	mov	eax, DWORD PTR _id$[esp-4]
	lea	eax, DWORD PTR [ecx+eax*4]
	ret	4
??A?$svector@PAUSlot@CDetailManager@@$0JGB@@@QAEAAPAUSlot@CDetailManager@@I@Z ENDP ; svector<CDetailManager::Slot *,2401>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\FixedVector.h
;	COMDAT ?push_back@?$svector@PAUSlot@CDetailManager@@$0JGB@@@QAEXPAUSlot@CDetailManager@@@Z
_TEXT	SEGMENT
_e$ = 8							; size = 4
?push_back@?$svector@PAUSlot@CDetailManager@@$0JGB@@@QAEXPAUSlot@CDetailManager@@@Z PROC ; svector<CDetailManager::Slot *,2401>::push_back, COMDAT
; _this$ = ecx

; 35   : 	IC void		push_back(value_type e)		{ VERIFY(count<dim); array[count++]=e;	}

	mov	edx, DWORD PTR [ecx+9604]
	mov	eax, DWORD PTR _e$[esp-4]
	mov	DWORD PTR [ecx+edx*4], eax
	inc	DWORD PTR [ecx+9604]
	ret	4
?push_back@?$svector@PAUSlot@CDetailManager@@$0JGB@@@QAEXPAUSlot@CDetailManager@@@Z ENDP ; svector<CDetailManager::Slot *,2401>::push_back
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\FixedVector.h
;	COMDAT ?size@?$svector@PAUSlot@CDetailManager@@$0JGB@@@QBEIXZ
_TEXT	SEGMENT
?size@?$svector@PAUSlot@CDetailManager@@$0JGB@@@QBEIXZ PROC ; svector<CDetailManager::Slot *,2401>::size, COMDAT
; _this$ = ecx

; 30   : 	IC u32		size()		const			{ return count;							}

	mov	eax, DWORD PTR [ecx+9604]
	ret	0
?size@?$svector@PAUSlot@CDetailManager@@$0JGB@@@QBEIXZ ENDP ; svector<CDetailManager::Slot *,2401>::size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ?clear@?$xr_vector@PAUSlotItem@CDetailManager@@V?$xalloc@PAUSlotItem@CDetailManager@@@@@@QAEXXZ
_TEXT	SEGMENT
?clear@?$xr_vector@PAUSlotItem@CDetailManager@@V?$xalloc@PAUSlotItem@CDetailManager@@@@@@QAEXXZ PROC ; xr_vector<CDetailManager::SlotItem *,xalloc<CDetailManager::SlotItem *> >::clear, COMDAT
; _this$ = ecx

; 132  : 	void	clear				()									{ clear_and_free	();			}

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [ecx+4], eax
	ret	0
?clear@?$xr_vector@PAUSlotItem@CDetailManager@@V?$xalloc@PAUSlotItem@CDetailManager@@@@@@QAEXXZ ENDP ; xr_vector<CDetailManager::SlotItem *,xalloc<CDetailManager::SlotItem *> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h
;	COMDAT ?getsphere@?$_box3@M@@QBEABV1@AAU?$_vector3@M@@AAM@Z
_TEXT	SEGMENT
_C$ = 8							; size = 4
_R$ = 12						; size = 4
?getsphere@?$_box3@M@@QBEABV1@AAU?$_vector3@M@@AAM@Z PROC ; _box3<float>::getsphere, COMDAT
; _this$ = ecx

; 97   : 		C.x = (min.x + max.x) * 0.5f;

	movss	xmm3, DWORD PTR [ecx]
	addss	xmm3, DWORD PTR [ecx+12]
	movss	xmm0, DWORD PTR __real@3f000000
	mov	eax, DWORD PTR _C$[esp-4]
	mulss	xmm3, xmm0
	movss	DWORD PTR [eax], xmm3

; 98   : 		C.y = (min.y + max.y) * 0.5f;

	movss	xmm2, DWORD PTR [ecx+16]
	addss	xmm2, DWORD PTR [ecx+4]
	mulss	xmm2, xmm0
	movss	DWORD PTR [eax+4], xmm2

; 99   : 		C.z = (min.z + max.z) * 0.5f;

	movss	xmm1, DWORD PTR [ecx+20]
	addss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, xmm0
	movss	DWORD PTR [eax+8], xmm1
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 287  : 	{	return (x-v.x)*(x-v.x) + (y-v.y)*(y-v.y) + (z-v.z)*(z-v.z);	}

	subss	xmm3, DWORD PTR [ecx+12]
	subss	xmm2, DWORD PTR [ecx+16]
	subss	xmm1, DWORD PTR [ecx+20]
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h

; 116  : 		R = C.distance_to	(max);

	mov	eax, DWORD PTR _R$[esp-4]
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 287  : 	{	return (x-v.x)*(x-v.x) + (y-v.y)*(y-v.y) + (z-v.z)*(z-v.z);	}

	mulss	xmm3, xmm3
	mulss	xmm2, xmm2
	mulss	xmm1, xmm1
	addss	xmm3, xmm2
	addss	xmm3, xmm1
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 764  :             return (float)sqrt(_X);

	sqrtss	xmm0, xmm3
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h

; 116  : 		R = C.distance_to	(max);

	movss	DWORD PTR [eax], xmm0

; 117  : 		return				*this;

	mov	eax, ecx

; 118  : 	};

	ret	8
?getsphere@?$_box3@M@@QBEABV1@AAU?$_vector3@M@@AAM@Z ENDP ; _box3<float>::getsphere
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h
;	COMDAT ?merge@?$_box3@M@@QAEAAV1@ABV1@@Z
_TEXT	SEGMENT
_b$ = 8							; size = 4
?merge@?$_box3@M@@QAEAAV1@ABV1@@Z PROC			; _box3<float>::merge, COMDAT
; _this$ = ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 53   : 	IC	SelfRef	min(const Self &v)						{ x = _min(x,v.x);	y = _min(y,v.y);	z = _min(z,v.z);			return *this;	}

	mov	eax, DWORD PTR _b$[esp-4]
	movss	xmm0, DWORD PTR [ecx]
	movss	xmm1, DWORD PTR [eax]
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 93   : template <class T>	IC T		_min	(T a, T b)	{ return a<b?a:b;	}

	comiss	xmm1, xmm0
	ja	SHORT $LN10@merge
	movaps	xmm0, xmm1
$LN10@merge:
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 53   : 	IC	SelfRef	min(const Self &v)						{ x = _min(x,v.x);	y = _min(y,v.y);	z = _min(z,v.z);			return *this;	}

	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	movss	xmm1, DWORD PTR [eax+4]
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 93   : template <class T>	IC T		_min	(T a, T b)	{ return a<b?a:b;	}

	comiss	xmm1, xmm0
	ja	SHORT $LN14@merge
	movaps	xmm0, xmm1
$LN14@merge:
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 53   : 	IC	SelfRef	min(const Self &v)						{ x = _min(x,v.x);	y = _min(y,v.y);	z = _min(z,v.z);			return *this;	}

	movss	DWORD PTR [ecx+4], xmm0
	movss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR [eax+8]
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 93   : template <class T>	IC T		_min	(T a, T b)	{ return a<b?a:b;	}

	comiss	xmm1, xmm0
	ja	SHORT $LN18@merge
	movaps	xmm0, xmm1
$LN18@merge:
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 53   : 	IC	SelfRef	min(const Self &v)						{ x = _min(x,v.x);	y = _min(y,v.y);	z = _min(z,v.z);			return *this;	}

	movss	DWORD PTR [ecx+8], xmm0

; 55   : 	IC	SelfRef	max(const Self &v)						{ x = _max(x,v.x);	y = _max(y,v.y);	z = _max(z,v.z);			return *this;	}

	movss	xmm0, DWORD PTR [ecx+12]
	movss	xmm1, DWORD PTR [eax]
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 94   : template <class T>	IC T		_max	(T a, T b)	{ return a>b?a:b;	}

	comiss	xmm0, xmm1
	ja	SHORT $LN24@merge
	movaps	xmm0, xmm1
$LN24@merge:
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 55   : 	IC	SelfRef	max(const Self &v)						{ x = _max(x,v.x);	y = _max(y,v.y);	z = _max(z,v.z);			return *this;	}

	movss	DWORD PTR [ecx+12], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	movss	xmm1, DWORD PTR [eax+4]
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 94   : template <class T>	IC T		_max	(T a, T b)	{ return a>b?a:b;	}

	comiss	xmm0, xmm1
	ja	SHORT $LN28@merge
	movaps	xmm0, xmm1
$LN28@merge:
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 55   : 	IC	SelfRef	max(const Self &v)						{ x = _max(x,v.x);	y = _max(y,v.y);	z = _max(z,v.z);			return *this;	}

	movss	DWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	movss	xmm1, DWORD PTR [eax+8]
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 94   : template <class T>	IC T		_max	(T a, T b)	{ return a>b?a:b;	}

	comiss	xmm0, xmm1
	ja	SHORT $LN32@merge
	movaps	xmm0, xmm1
$LN32@merge:
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 55   : 	IC	SelfRef	max(const Self &v)						{ x = _max(x,v.x);	y = _max(y,v.y);	z = _max(z,v.z);			return *this;	}

	movss	DWORD PTR [ecx+20], xmm0

; 53   : 	IC	SelfRef	min(const Self &v)						{ x = _min(x,v.x);	y = _min(y,v.y);	z = _min(z,v.z);			return *this;	}

	movss	xmm0, DWORD PTR [ecx]
	movss	xmm1, DWORD PTR [eax+12]
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 93   : template <class T>	IC T		_min	(T a, T b)	{ return a<b?a:b;	}

	comiss	xmm1, xmm0
	ja	SHORT $LN40@merge
	movaps	xmm0, xmm1
$LN40@merge:
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 53   : 	IC	SelfRef	min(const Self &v)						{ x = _min(x,v.x);	y = _min(y,v.y);	z = _min(z,v.z);			return *this;	}

	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	movss	xmm1, DWORD PTR [eax+16]
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 93   : template <class T>	IC T		_min	(T a, T b)	{ return a<b?a:b;	}

	comiss	xmm1, xmm0
	ja	SHORT $LN44@merge
	movaps	xmm0, xmm1
$LN44@merge:
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 53   : 	IC	SelfRef	min(const Self &v)						{ x = _min(x,v.x);	y = _min(y,v.y);	z = _min(z,v.z);			return *this;	}

	movss	DWORD PTR [ecx+4], xmm0
	movss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR [eax+20]
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 93   : template <class T>	IC T		_min	(T a, T b)	{ return a<b?a:b;	}

	comiss	xmm1, xmm0
	ja	SHORT $LN48@merge
	movaps	xmm0, xmm1
$LN48@merge:
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 53   : 	IC	SelfRef	min(const Self &v)						{ x = _min(x,v.x);	y = _min(y,v.y);	z = _min(z,v.z);			return *this;	}

	movss	DWORD PTR [ecx+8], xmm0

; 55   : 	IC	SelfRef	max(const Self &v)						{ x = _max(x,v.x);	y = _max(y,v.y);	z = _max(z,v.z);			return *this;	}

	movss	xmm0, DWORD PTR [ecx+12]
	movss	xmm1, DWORD PTR [eax+12]
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 94   : template <class T>	IC T		_max	(T a, T b)	{ return a>b?a:b;	}

	comiss	xmm0, xmm1
	ja	SHORT $LN54@merge
	movaps	xmm0, xmm1
$LN54@merge:
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 55   : 	IC	SelfRef	max(const Self &v)						{ x = _max(x,v.x);	y = _max(y,v.y);	z = _max(z,v.z);			return *this;	}

	movss	DWORD PTR [ecx+12], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	movss	xmm1, DWORD PTR [eax+16]
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 94   : template <class T>	IC T		_max	(T a, T b)	{ return a>b?a:b;	}

	comiss	xmm0, xmm1
	ja	SHORT $LN58@merge
	movaps	xmm0, xmm1
$LN58@merge:
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 55   : 	IC	SelfRef	max(const Self &v)						{ x = _max(x,v.x);	y = _max(y,v.y);	z = _max(z,v.z);			return *this;	}

	movss	DWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	movss	xmm1, DWORD PTR [eax+20]
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 94   : template <class T>	IC T		_max	(T a, T b)	{ return a>b?a:b;	}

	comiss	xmm0, xmm1
	ja	SHORT $LN62@merge
	movaps	xmm0, xmm1
$LN62@merge:
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 55   : 	IC	SelfRef	max(const Self &v)						{ x = _max(x,v.x);	y = _max(y,v.y);	z = _max(z,v.z);			return *this;	}

	movss	DWORD PTR [ecx+20], xmm0
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h

; 57   : 	IC	SelfRef	merge		(SelfCRef b)					{ modify(b.min); modify(b.max);			return *this;	};

	mov	eax, ecx
	ret	4
?merge@?$_box3@M@@QAEAAV1@ABV1@@Z ENDP			; _box3<float>::merge
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h
;	COMDAT ?grow@?$_box3@M@@QAEAAV1@M@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
?grow@?$_box3@M@@QAEAAV1@M@Z PROC			; _box3<float>::grow, COMDAT
; _this$ = ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 35   : 	ICF SelfRef	sub(T s)								{ x-=s;		y-=s;		z-=s;			return *this;	};

	movss	xmm1, DWORD PTR _s$[esp-4]
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h

; 41   : 	IC	SelfRef	grow		(T s)							{ min.sub(s); max.add(s);	return *this;	};

	mov	eax, ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 35   : 	ICF SelfRef	sub(T s)								{ x-=s;		y-=s;		z-=s;			return *this;	};

	movss	xmm0, DWORD PTR [ecx]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx+4], xmm0
	movss	xmm0, DWORD PTR [ecx+8]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx+8], xmm0

; 30   : 	ICF SelfRef	add(T s)								{ x+=s;		y+=s;		z+=s;			return *this;	};

	movaps	xmm0, xmm1
	addss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR [ecx+12], xmm0
	movaps	xmm0, xmm1
	addss	xmm0, DWORD PTR [ecx+16]
	addss	xmm1, DWORD PTR [ecx+20]
	movss	DWORD PTR [ecx+16], xmm0
	movss	DWORD PTR [ecx+20], xmm1
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h

; 41   : 	IC	SelfRef	grow		(T s)							{ min.sub(s); max.add(s);	return *this;	};

	ret	4
?grow@?$_box3@M@@QAEAAV1@M@Z ENDP			; _box3<float>::grow
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\xrPool.h
;	COMDAT ?access@?$poolSS@USlotItem@CDetailManager@@$0BAAA@@@AAEPAPAUSlotItem@CDetailManager@@PAU23@@Z
_TEXT	SEGMENT
_P$ = 8							; size = 4
?access@?$poolSS@USlotItem@CDetailManager@@$0BAAA@@@AAEPAPAUSlotItem@CDetailManager@@PAU23@@Z PROC ; poolSS<CDetailManager::SlotItem,4096>::access, COMDAT
; _this$dead$ = ecx

; 12   : 	T**					access			(T* P)	{ return (T**) LPVOID(P);	}

	mov	eax, DWORD PTR _P$[esp-4]
	ret	4
?access@?$poolSS@USlotItem@CDetailManager@@$0BAAA@@@AAEPAPAUSlotItem@CDetailManager@@PAU23@@Z ENDP ; poolSS<CDetailManager::SlotItem,4096>::access
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_stl_extensions.h
;	COMDAT ?clear_and_free@?$xr_vector@PAUSlotItem@CDetailManager@@V?$xalloc@PAUSlotItem@CDetailManager@@@@@@QAEXXZ
_TEXT	SEGMENT
?clear_and_free@?$xr_vector@PAUSlotItem@CDetailManager@@V?$xalloc@PAUSlotItem@CDetailManager@@@@@@QAEXXZ PROC ; xr_vector<CDetailManager::SlotItem *,xalloc<CDetailManager::SlotItem *> >::clear_and_free, COMDAT
; _this$ = ecx

; 127  : 	void	clear_and_free		()									{ inherited::clear();			}

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [ecx+4], eax
	ret	0
?clear_and_free@?$xr_vector@PAUSlotItem@CDetailManager@@V?$xalloc@PAUSlotItem@CDetailManager@@@@@@QAEXXZ ENDP ; xr_vector<CDetailManager::SlotItem *,xalloc<CDetailManager::SlotItem *> >::clear_and_free
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h
;	COMDAT ?modify@?$_box3@M@@QAEAAV1@ABU?$_vector3@M@@@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
?modify@?$_box3@M@@QAEAAV1@ABU?$_vector3@M@@@Z PROC	; _box3<float>::modify, COMDAT
; _this$ = ecx
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 53   : 	IC	SelfRef	min(const Self &v)						{ x = _min(x,v.x);	y = _min(y,v.y);	z = _min(z,v.z);			return *this;	}

	mov	eax, DWORD PTR _p$[esp-4]
	movss	xmm0, DWORD PTR [ecx]
	movss	xmm1, DWORD PTR [eax]
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 93   : template <class T>	IC T		_min	(T a, T b)	{ return a<b?a:b;	}

	comiss	xmm1, xmm0
	ja	SHORT $LN8@modify
	movaps	xmm0, xmm1
$LN8@modify:
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 53   : 	IC	SelfRef	min(const Self &v)						{ x = _min(x,v.x);	y = _min(y,v.y);	z = _min(z,v.z);			return *this;	}

	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	movss	xmm1, DWORD PTR [eax+4]
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 93   : template <class T>	IC T		_min	(T a, T b)	{ return a<b?a:b;	}

	comiss	xmm1, xmm0
	ja	SHORT $LN12@modify
	movaps	xmm0, xmm1
$LN12@modify:
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 53   : 	IC	SelfRef	min(const Self &v)						{ x = _min(x,v.x);	y = _min(y,v.y);	z = _min(z,v.z);			return *this;	}

	movss	DWORD PTR [ecx+4], xmm0
	movss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR [eax+8]
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 93   : template <class T>	IC T		_min	(T a, T b)	{ return a<b?a:b;	}

	comiss	xmm1, xmm0
	ja	SHORT $LN16@modify
	movaps	xmm0, xmm1
$LN16@modify:
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 53   : 	IC	SelfRef	min(const Self &v)						{ x = _min(x,v.x);	y = _min(y,v.y);	z = _min(z,v.z);			return *this;	}

	movss	DWORD PTR [ecx+8], xmm0

; 55   : 	IC	SelfRef	max(const Self &v)						{ x = _max(x,v.x);	y = _max(y,v.y);	z = _max(z,v.z);			return *this;	}

	movss	xmm0, DWORD PTR [ecx+12]
	movss	xmm1, DWORD PTR [eax]
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 94   : template <class T>	IC T		_max	(T a, T b)	{ return a>b?a:b;	}

	comiss	xmm0, xmm1
	ja	SHORT $LN22@modify
	movaps	xmm0, xmm1
$LN22@modify:
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 55   : 	IC	SelfRef	max(const Self &v)						{ x = _max(x,v.x);	y = _max(y,v.y);	z = _max(z,v.z);			return *this;	}

	movss	DWORD PTR [ecx+12], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	movss	xmm1, DWORD PTR [eax+4]
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 94   : template <class T>	IC T		_max	(T a, T b)	{ return a>b?a:b;	}

	comiss	xmm0, xmm1
	ja	SHORT $LN26@modify
	movaps	xmm0, xmm1
$LN26@modify:
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 55   : 	IC	SelfRef	max(const Self &v)						{ x = _max(x,v.x);	y = _max(y,v.y);	z = _max(z,v.z);			return *this;	}

	movss	DWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	movss	xmm1, DWORD PTR [eax+8]
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 94   : template <class T>	IC T		_max	(T a, T b)	{ return a>b?a:b;	}

	comiss	xmm0, xmm1
	ja	SHORT $LN30@modify
	movaps	xmm0, xmm1
$LN30@modify:
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 55   : 	IC	SelfRef	max(const Self &v)						{ x = _max(x,v.x);	y = _max(y,v.y);	z = _max(z,v.z);			return *this;	}

	movss	DWORD PTR [ecx+20], xmm0
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h

; 55   : 	ICF	SelfRef	modify		(const Tvector &p)				{ min.min(p); max.max(p);				return *this;	}

	mov	eax, ecx
	ret	4
?modify@?$_box3@M@@QAEAAV1@ABU?$_vector3@M@@@Z ENDP	; _box3<float>::modify
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
;	COMDAT ?distance_to@?$_vector3@M@@QBEMABU1@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
?distance_to@?$_vector3@M@@QBEMABU1@@Z PROC		; _vector3<float>::distance_to, COMDAT
; _this$ = ecx

; 287  : 	{	return (x-v.x)*(x-v.x) + (y-v.y)*(y-v.y) + (z-v.z)*(z-v.z);	}

	mov	eax, DWORD PTR _v$[esp-4]
	fld	DWORD PTR [ecx+4]
	fsub	DWORD PTR [eax+4]
	fld	DWORD PTR [ecx]
	fsub	DWORD PTR [eax]
	fld	DWORD PTR [ecx+8]
	fsub	DWORD PTR [eax+8]
	fxch	ST(1)
	fmul	ST(0), ST(0)
	fxch	ST(2)
	fmul	ST(0), ST(0)
	faddp	ST(2), ST(0)
	fmul	ST(0), ST(0)
	faddp	ST(1), ST(0)
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 764  :             return (float)sqrt(_X);

	fsqrt
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 291  : 	{	return _sqrt(distance_to_sqr(v));	}

	ret	4
?distance_to@?$_vector3@M@@QBEMABU1@@Z ENDP		; _vector3<float>::distance_to
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
;	COMDAT ?sub@?$_vector3@M@@QAEAAU1@M@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
?sub@?$_vector3@M@@QAEAAU1@M@Z PROC			; _vector3<float>::sub, COMDAT
; _this$ = ecx

; 35   : 	ICF SelfRef	sub(T s)								{ x-=s;		y-=s;		z-=s;			return *this;	};

	movss	xmm0, DWORD PTR [ecx]
	mov	eax, ecx
	movss	xmm1, DWORD PTR _s$[esp-4]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx+4], xmm0
	movss	xmm0, DWORD PTR [ecx+8]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx+8], xmm0
	ret	4
?sub@?$_vector3@M@@QAEAAU1@M@Z ENDP			; _vector3<float>::sub
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
;	COMDAT ?add@?$_vector3@M@@QAEAAU1@M@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
?add@?$_vector3@M@@QAEAAU1@M@Z PROC			; _vector3<float>::add, COMDAT
; _this$ = ecx

; 30   : 	ICF SelfRef	add(T s)								{ x+=s;		y+=s;		z+=s;			return *this;	};

	movss	xmm1, DWORD PTR _s$[esp-4]
	mov	eax, ecx
	movaps	xmm0, xmm1
	addss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR [ecx], xmm0
	movaps	xmm0, xmm1
	addss	xmm0, DWORD PTR [ecx+4]
	addss	xmm1, DWORD PTR [ecx+8]
	movss	DWORD PTR [ecx+4], xmm0
	movss	DWORD PTR [ecx+8], xmm1
	ret	4
?add@?$_vector3@M@@QAEAAU1@M@Z ENDP			; _vector3<float>::add
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?clear@?$vector@PAUSlotItem@CDetailManager@@V?$xalloc@PAUSlotItem@CDetailManager@@@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@PAUSlotItem@CDetailManager@@V?$xalloc@PAUSlotItem@CDetailManager@@@@@std@@QAEXXZ PROC ; std::vector<CDetailManager::SlotItem *,xalloc<CDetailManager::SlotItem *> >::clear, COMDAT
; _this$ = ecx

; 1437 :         auto& _My_data    = _Mypair._Myval2;
; 1438 :         pointer& _Myfirst = _My_data._Myfirst;
; 1439 :         pointer& _Mylast  = _My_data._Mylast;
; 1440 : 
; 1441 :         _My_data._Orphan_all();
; 1442 :         _Destroy(_Myfirst, _Mylast);
; 1443 :         _Mylast = _Myfirst;

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [ecx+4], eax

; 1444 :     }

	ret	0
?clear@?$vector@PAUSlotItem@CDetailManager@@V?$xalloc@PAUSlotItem@CDetailManager@@@@@std@@QAEXXZ ENDP ; std::vector<CDetailManager::SlotItem *,xalloc<CDetailManager::SlotItem *> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
;	COMDAT ?max@?$_vector3@M@@QAEAAU1@ABU1@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
?max@?$_vector3@M@@QAEAAU1@ABU1@@Z PROC			; _vector3<float>::max, COMDAT
; _this$ = ecx

; 55   : 	IC	SelfRef	max(const Self &v)						{ x = _max(x,v.x);	y = _max(y,v.y);	z = _max(z,v.z);			return *this;	}

	mov	eax, DWORD PTR _v$[esp-4]
	movss	xmm0, DWORD PTR [ecx]
	movss	xmm1, DWORD PTR [eax]
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 94   : template <class T>	IC T		_max	(T a, T b)	{ return a>b?a:b;	}

	comiss	xmm0, xmm1
	ja	SHORT $LN6@max
	movaps	xmm0, xmm1
$LN6@max:
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 55   : 	IC	SelfRef	max(const Self &v)						{ x = _max(x,v.x);	y = _max(y,v.y);	z = _max(z,v.z);			return *this;	}

	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	movss	xmm1, DWORD PTR [eax+4]
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 94   : template <class T>	IC T		_max	(T a, T b)	{ return a>b?a:b;	}

	comiss	xmm0, xmm1
	ja	SHORT $LN10@max
	movaps	xmm0, xmm1
$LN10@max:
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 55   : 	IC	SelfRef	max(const Self &v)						{ x = _max(x,v.x);	y = _max(y,v.y);	z = _max(z,v.z);			return *this;	}

	movss	DWORD PTR [ecx+4], xmm0
	movss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR [eax+8]
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 94   : template <class T>	IC T		_max	(T a, T b)	{ return a>b?a:b;	}

	comiss	xmm0, xmm1
	ja	SHORT $LN14@max
	movaps	xmm0, xmm1
$LN14@max:
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 55   : 	IC	SelfRef	max(const Self &v)						{ x = _max(x,v.x);	y = _max(y,v.y);	z = _max(z,v.z);			return *this;	}

	movss	DWORD PTR [ecx+8], xmm0
	mov	eax, ecx
	ret	4
?max@?$_vector3@M@@QAEAAU1@ABU1@@Z ENDP			; _vector3<float>::max
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h
;	COMDAT ?min@?$_vector3@M@@QAEAAU1@ABU1@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
?min@?$_vector3@M@@QAEAAU1@ABU1@@Z PROC			; _vector3<float>::min, COMDAT
; _this$ = ecx

; 53   : 	IC	SelfRef	min(const Self &v)						{ x = _min(x,v.x);	y = _min(y,v.y);	z = _min(z,v.z);			return *this;	}

	mov	eax, DWORD PTR _v$[esp-4]
	movss	xmm0, DWORD PTR [ecx]
	movss	xmm1, DWORD PTR [eax]
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 93   : template <class T>	IC T		_min	(T a, T b)	{ return a<b?a:b;	}

	comiss	xmm1, xmm0
	ja	SHORT $LN6@min
	movaps	xmm0, xmm1
$LN6@min:
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 53   : 	IC	SelfRef	min(const Self &v)						{ x = _min(x,v.x);	y = _min(y,v.y);	z = _min(z,v.z);			return *this;	}

	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	movss	xmm1, DWORD PTR [eax+4]
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 93   : template <class T>	IC T		_min	(T a, T b)	{ return a<b?a:b;	}

	comiss	xmm1, xmm0
	ja	SHORT $LN10@min
	movaps	xmm0, xmm1
$LN10@min:
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 53   : 	IC	SelfRef	min(const Self &v)						{ x = _min(x,v.x);	y = _min(y,v.y);	z = _min(z,v.z);			return *this;	}

	movss	DWORD PTR [ecx+4], xmm0
	movss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR [eax+8]
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 93   : template <class T>	IC T		_min	(T a, T b)	{ return a<b?a:b;	}

	comiss	xmm1, xmm0
	ja	SHORT $LN14@min
	movaps	xmm0, xmm1
$LN14@min:
; File I:\Vitalya\mine\NSProjectX\xrCore\_vector3d.h

; 53   : 	IC	SelfRef	min(const Self &v)						{ x = _min(x,v.x);	y = _min(y,v.y);	z = _min(z,v.z);			return *this;	}

	movss	DWORD PTR [ecx+8], xmm0
	mov	eax, ecx
	ret	4
?min@?$_vector3@M@@QAEAAU1@ABU1@@Z ENDP			; _vector3<float>::min
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
;	COMDAT ??$_max@M@@YAMMM@Z
_TEXT	SEGMENT
tv65 = 8						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$_max@M@@YAMMM@Z PROC					; _max<float>, COMDAT

; 94   : template <class T>	IC T		_max	(T a, T b)	{ return a>b?a:b;	}

	movss	xmm0, DWORD PTR _a$[esp-4]
	movss	xmm1, DWORD PTR _b$[esp-4]
	comiss	xmm0, xmm1
	jbe	SHORT $LN3@max
	movss	DWORD PTR tv65[esp-4], xmm0
	fld	DWORD PTR tv65[esp-4]
	ret	0
$LN3@max:
	movss	DWORD PTR tv65[esp-4], xmm1
	fld	DWORD PTR tv65[esp-4]
	ret	0
??$_max@M@@YAMMM@Z ENDP					; _max<float>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
;	COMDAT ??$_min@M@@YAMMM@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
tv65 = 12						; size = 4
_b$ = 12						; size = 4
??$_min@M@@YAMMM@Z PROC					; _min<float>, COMDAT

; 93   : template <class T>	IC T		_min	(T a, T b)	{ return a<b?a:b;	}

	movss	xmm0, DWORD PTR _b$[esp-4]
	movss	xmm1, DWORD PTR _a$[esp-4]
	comiss	xmm0, xmm1
	jbe	SHORT $LN3@min
	movss	DWORD PTR tv65[esp-4], xmm1
	fld	DWORD PTR tv65[esp-4]
	ret	0
$LN3@min:
	movss	DWORD PTR tv65[esp-4], xmm0
	fld	DWORD PTR tv65[esp-4]
	ret	0
??$_min@M@@YAMMM@Z ENDP					; _min<float>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
;	COMDAT _sqrtf
_TEXT	SEGMENT
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 764  :             return (float)sqrt(_X);

	fld	DWORD PTR __X$[esp-4]
	fsqrt

; 765  :         }

	ret	0
_sqrtf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h
;	COMDAT ?_sqrt@@YAMM@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
?_sqrt@@YAMM@Z PROC					; _sqrt, COMDAT
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 764  :             return (float)sqrt(_X);

	fld	DWORD PTR _x$[esp-4]
	fsqrt
; File I:\Vitalya\mine\NSProjectX\xrCore\_std_extensions.h

; 99   : IC float	_sqrt	(float x)		{ return sqrtf(x); }

	ret	0
?_sqrt@@YAMM@Z ENDP					; _sqrt
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\detailformat.h
;	COMDAT ?w_id@DetailSlot@@QAEXIE@Z
_TEXT	SEGMENT
_idx$ = 8						; size = 4
_val$dead$ = 12						; size = 1
?w_id@DetailSlot@@QAEXIE@Z PROC				; DetailSlot::w_id, COMDAT
; _this$ = ecx

; 120  :         switch(idx){

	mov	eax, DWORD PTR _idx$[esp-4]
	jmp	DWORD PTR $LN10@w_id[eax*4]
$LN4@w_id:

; 121  :         case 0: id0=val; break;

	or	DWORD PTR [ecx], 66060288		; 03f00000H

; 125  :         default: NODEFAULT;
; 126  :         }
; 127  :     }

	ret	8
$LN5@w_id:

; 122  :         case 1: id1=val; break;

	or	DWORD PTR [ecx], -67108864		; fc000000H

; 125  :         default: NODEFAULT;
; 126  :         }
; 127  :     }

	ret	8
$LN6@w_id:

; 123  :         case 2: id2=val; break;

	or	DWORD PTR [ecx+4], 63			; 0000003fH

; 125  :         default: NODEFAULT;
; 126  :         }
; 127  :     }

	ret	8
$LN7@w_id:

; 124  :         case 3: id3=val; break;

	or	DWORD PTR [ecx+4], 4032			; 00000fc0H

; 125  :         default: NODEFAULT;
; 126  :         }
; 127  :     }

	ret	8
	npad	2
$LN10@w_id:
	DD	$LN4@w_id
	DD	$LN5@w_id
	DD	$LN6@w_id
	DD	$LN7@w_id
?w_id@DetailSlot@@QAEXIE@Z ENDP				; DetailSlot::w_id
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\xrCore\_fbox.h
;	COMDAT ?getcenter@?$_box3@M@@QBEABV1@AAU?$_vector3@M@@@Z
_TEXT	SEGMENT
_C$ = 8							; size = 4
?getcenter@?$_box3@M@@QBEABV1@AAU?$_vector3@M@@@Z PROC	; _box3<float>::getcenter, COMDAT
; _this$ = ecx

; 97   : 		C.x = (min.x + max.x) * 0.5f;

	movss	xmm0, DWORD PTR [ecx+12]
	addss	xmm0, DWORD PTR [ecx]
	movss	xmm1, DWORD PTR __real@3f000000
	mov	eax, DWORD PTR _C$[esp-4]
	mulss	xmm0, xmm1
	movss	DWORD PTR [eax], xmm0

; 98   : 		C.y = (min.y + max.y) * 0.5f;

	movss	xmm0, DWORD PTR [ecx+16]
	addss	xmm0, DWORD PTR [ecx+4]
	mulss	xmm0, xmm1
	movss	DWORD PTR [eax+4], xmm0

; 99   : 		C.z = (min.z + max.z) * 0.5f;

	movss	xmm0, DWORD PTR [ecx+20]
	addss	xmm0, DWORD PTR [ecx+8]
	mulss	xmm0, xmm1
	movss	DWORD PTR [eax+8], xmm0

; 100  : 		return				*this;

	mov	eax, ecx

; 101  : 	};

	ret	4
?getcenter@?$_box3@M@@QBEABV1@AAU?$_vector3@M@@@Z ENDP	; _box3<float>::getcenter
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\detailformat.h
;	COMDAT ?r_id@DetailSlot@@QAEEI@Z
_TEXT	SEGMENT
_idx$ = 8						; size = 4
?r_id@DetailSlot@@QAEEI@Z PROC				; DetailSlot::r_id, COMDAT
; _this$ = ecx

; 108  :         switch(idx)	{

	mov	eax, DWORD PTR _idx$[esp-4]
	jmp	DWORD PTR $LN10@r_id[eax*4]
$LN4@r_id:

; 109  :         case 0: return (u8)id0;

	mov	eax, DWORD PTR [ecx]
	shr	eax, 20					; 00000014H

; 113  :         default: NODEFAULT;	
; 114  :         }
; 115  : #ifdef DEBUG
; 116  : 		return 0;
; 117  : #endif
; 118  :     }

	and	al, 63					; 0000003fH
	ret	4
$LN5@r_id:

; 110  :         case 1: return (u8)id1;

	mov	eax, DWORD PTR [ecx]
	shr	eax, 26					; 0000001aH

; 113  :         default: NODEFAULT;	
; 114  :         }
; 115  : #ifdef DEBUG
; 116  : 		return 0;
; 117  : #endif
; 118  :     }

	ret	4
$LN6@r_id:

; 111  :         case 2: return (u8)id2;

	mov	al, BYTE PTR [ecx+4]

; 113  :         default: NODEFAULT;	
; 114  :         }
; 115  : #ifdef DEBUG
; 116  : 		return 0;
; 117  : #endif
; 118  :     }

	and	al, 63					; 0000003fH
	ret	4
$LN7@r_id:

; 112  :         case 3: return (u8)id3;

	mov	eax, DWORD PTR [ecx+4]
	shr	eax, 6

; 113  :         default: NODEFAULT;	
; 114  :         }
; 115  : #ifdef DEBUG
; 116  : 		return 0;
; 117  : #endif
; 118  :     }

	and	al, 63					; 0000003fH
	ret	4
$LN10@r_id:
	DD	$LN4@r_id
	DD	$LN5@r_id
	DD	$LN6@r_id
	DD	$LN7@r_id
?r_id@DetailSlot@@QAEEI@Z ENDP				; DetailSlot::r_id
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\detailformat.h
;	COMDAT ?r_yheight@DetailSlot@@QAEMXZ
_TEXT	SEGMENT
tv131 = -4						; size = 4
?r_yheight@DetailSlot@@QAEMXZ PROC			; DetailSlot::r_yheight, COMDAT
; _this$ = ecx

; 101  : 	float			r_yheight	()						{	return float(y_height)*.1f;									}

	push	ecx
	mov	eax, DWORD PTR [ecx]
	shr	eax, 12					; 0000000cH
	movzx	eax, al
	mov	DWORD PTR tv131[esp+4], eax
	fild	DWORD PTR tv131[esp+4]
	test	eax, eax
	jns	SHORT $LN3@r_yheight
	fadd	DWORD PTR __real@4f800000
$LN3@r_yheight:
	fmul	DWORD PTR __real@3dcccccd
	pop	ecx
	ret	0
?r_yheight@DetailSlot@@QAEMXZ ENDP			; DetailSlot::r_yheight
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\detailformat.h
;	COMDAT ?r_ybase@DetailSlot@@QAEMXZ
_TEXT	SEGMENT
tv133 = -4						; size = 4
?r_ybase@DetailSlot@@QAEMXZ PROC			; DetailSlot::r_ybase, COMDAT
; _this$ = ecx

; 100  : 	float			r_ybase		()						{	return float(y_base)*.2f - 200.f;								}

	push	ecx
	mov	eax, DWORD PTR [ecx]
	and	eax, 4095				; 00000fffH
	mov	DWORD PTR tv133[esp+4], eax
	fild	DWORD PTR tv133[esp+4]
	jns	SHORT $LN3@r_ybase
	fadd	DWORD PTR __real@4f800000
$LN3@r_ybase:
	fmul	DWORD PTR __real@3e4ccccd
	fsub	DWORD PTR __real@43480000
	pop	ecx
	ret	0
?r_ybase@DetailSlot@@QAEMXZ ENDP			; DetailSlot::r_ybase
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\detailmanager.h
;	COMDAT ?cg2w_Z@CDetailManager@@QAEHH@Z
_TEXT	SEGMENT
_z$ = 8							; size = 4
?cg2w_Z@CDetailManager@@QAEHH@Z PROC			; CDetailManager::cg2w_Z, COMDAT
; _this$ = ecx

; 160  : 	int								cg2w_Z			(int z)			{ return cache_cz-dm_size+(dm_cache_line-1-z);	}

	mov	eax, DWORD PTR [ecx+701204]
	sub	eax, DWORD PTR _z$[esp-4]
	add	eax, 24					; 00000018H
	ret	4
?cg2w_Z@CDetailManager@@QAEHH@Z ENDP			; CDetailManager::cg2w_Z
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File I:\Vitalya\mine\NSProjectX\layers\xrRender\detailmanager.h
;	COMDAT ?cg2w_X@CDetailManager@@QAEHH@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
?cg2w_X@CDetailManager@@QAEHH@Z PROC			; CDetailManager::cg2w_X, COMDAT
; _this$ = ecx

; 159  : 	int								cg2w_X			(int x)			{ return cache_cx-dm_size+x;					}

	mov	eax, DWORD PTR _x$[esp-4]
	mov	ecx, DWORD PTR [ecx+701200]
	add	eax, -24				; ffffffe8H
	add	eax, ecx
	ret	4
?cg2w_X@CDetailManager@@QAEHH@Z ENDP			; CDetailManager::cg2w_X
_TEXT	ENDS
END
